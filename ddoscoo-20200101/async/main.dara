/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'ddoscoo';
  @version = '2020-01-01';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddAutoCcBlacklistRequest {
  blacklist: string(name='Blacklist', position='Query'),
  expireTime: int32(name='ExpireTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model AddAutoCcBlacklistResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddAutoCcBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: AddAutoCcBlacklistResponseBody(name='body'),
}

async function addAutoCcBlacklist(request: AddAutoCcBlacklistRequest): AddAutoCcBlacklistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAutoCcBlacklist', 'POST', '/', 'json', false, 'json', request);
}

model AddAutoCcWhitelistRequest {
  expireTime?: int32(name='ExpireTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  whitelist: string(name='Whitelist', position='Query'),
}

model AddAutoCcWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddAutoCcWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: AddAutoCcWhitelistResponseBody(name='body'),
}

async function addAutoCcWhitelist(request: AddAutoCcWhitelistRequest): AddAutoCcWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAutoCcWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model AssociateWebCertRequest {
  cert?: string(name='Cert', position='Query'),
  certId?: int32(name='CertId', position='Query'),
  certName?: string(name='CertName', position='Query'),
  domain: string(name='Domain', position='Query'),
  key?: string(name='Key', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model AssociateWebCertResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateWebCertResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateWebCertResponseBody(name='body'),
}

async function associateWebCert(request: AssociateWebCertRequest): AssociateWebCertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateWebCert', 'POST', '/', 'json', false, 'json', request);
}

model AttachSceneDefenseObjectRequest {
  objectType: string(name='ObjectType', position='Query'),
  objects: string(name='Objects', position='Query'),
  policyId: string(name='PolicyId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model AttachSceneDefenseObjectResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AttachSceneDefenseObjectResponse = {
  headers: map[string]string(name='headers'),
  body: AttachSceneDefenseObjectResponseBody(name='body'),
}

async function attachSceneDefenseObject(request: AttachSceneDefenseObjectRequest): AttachSceneDefenseObjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachSceneDefenseObject', 'POST', '/', 'json', false, 'json', request);
}

model ConfigL7RsPolicyRequest {
  domain: string(name='Domain', position='Query'),
  policy: string(name='Policy', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ConfigL7RsPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigL7RsPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigL7RsPolicyResponseBody(name='body'),
}

async function configL7RsPolicy(request: ConfigL7RsPolicyRequest): ConfigL7RsPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigL7RsPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ConfigLayer4RemarkRequest {
  listeners: string(name='Listeners', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ConfigLayer4RemarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigLayer4RemarkResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigLayer4RemarkResponseBody(name='body'),
}

async function configLayer4Remark(request: ConfigLayer4RemarkRequest): ConfigLayer4RemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigLayer4Remark', 'POST', '/', 'json', false, 'json', request);
}

model ConfigLayer4RuleBakModeRequest {
  bakMode: string(name='BakMode', position='Query'),
  listeners: string(name='Listeners', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ConfigLayer4RuleBakModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigLayer4RuleBakModeResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigLayer4RuleBakModeResponseBody(name='body'),
}

async function configLayer4RuleBakMode(request: ConfigLayer4RuleBakModeRequest): ConfigLayer4RuleBakModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigLayer4RuleBakMode', 'POST', '/', 'json', false, 'json', request);
}

model ConfigLayer4RulePolicyRequest {
  listeners: string(name='Listeners', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ConfigLayer4RulePolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigLayer4RulePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigLayer4RulePolicyResponseBody(name='body'),
}

async function configLayer4RulePolicy(request: ConfigLayer4RulePolicyRequest): ConfigLayer4RulePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigLayer4RulePolicy', 'POST', '/', 'json', false, 'json', request);
}

model ConfigNetworkRegionBlockRequest {
  config: string(name='Config', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ConfigNetworkRegionBlockResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigNetworkRegionBlockResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigNetworkRegionBlockResponseBody(name='body'),
}

async function configNetworkRegionBlock(request: ConfigNetworkRegionBlockRequest): ConfigNetworkRegionBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigNetworkRegionBlock', 'POST', '/', 'json', false, 'json', request);
}

model ConfigNetworkRulesRequest {
  networkRules: string(name='NetworkRules', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ConfigNetworkRulesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigNetworkRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigNetworkRulesResponseBody(name='body'),
}

async function configNetworkRules(request: ConfigNetworkRulesRequest): ConfigNetworkRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigNetworkRules', 'POST', '/', 'json', false, 'json', request);
}

model ConfigNetworkRulesTfRequest {
  portParam: [ 
    {
      backendPort?: string(name='BackendPort'),
      frontendPort: string(name='FrontendPort'),
      instanceId?: string(name='InstanceId'),
      protocol?: string(name='Protocol'),
      realServers: [ string ](name='RealServers'),
    }
  ](name='PortParam', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ConfigNetworkRulesTfResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigNetworkRulesTfResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigNetworkRulesTfResponseBody(name='body'),
}

async function configNetworkRulesTf(request: ConfigNetworkRulesTfRequest): ConfigNetworkRulesTfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigNetworkRulesTf', 'POST', '/', 'json', false, 'json', request);
}

model ConfigUdpReflectRequest {
  config: string(name='Config', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ConfigUdpReflectResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigUdpReflectResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigUdpReflectResponseBody(name='body'),
}

async function configUdpReflect(request: ConfigUdpReflectRequest): ConfigUdpReflectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigUdpReflect', 'POST', '/', 'json', false, 'json', request);
}

model ConfigWebCCTemplateRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  template: string(name='Template', position='Query'),
}

model ConfigWebCCTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigWebCCTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigWebCCTemplateResponseBody(name='body'),
}

async function configWebCCTemplate(request: ConfigWebCCTemplateRequest): ConfigWebCCTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigWebCCTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ConfigWebIpSetRequest {
  blackList?: [ string ](name='BlackList', position='Query'),
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  whiteList?: [ string ](name='WhiteList', position='Query'),
}

model ConfigWebIpSetResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigWebIpSetResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigWebIpSetResponseBody(name='body'),
}

async function configWebIpSet(request: ConfigWebIpSetRequest): ConfigWebIpSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigWebIpSet', 'POST', '/', 'json', false, 'json', request);
}

model CreateAsyncTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  taskParams: string(name='TaskParams', position='Query'),
  taskType: int32(name='TaskType', position='Query'),
}

model CreateAsyncTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAsyncTaskResponseBody(name='body'),
}

async function createAsyncTask(request: CreateAsyncTaskRequest): CreateAsyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAsyncTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateDomainResourceRequest {
  domain: string(name='Domain', position='Query'),
  httpsExt?: string(name='HttpsExt', position='Query'),
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  proxyTypes: [ 
    {
      proxyPorts: [ int32 ](name='ProxyPorts'),
      proxyType?: string(name='ProxyType'),
    }
  ](name='ProxyTypes', position='Query'),
  realServers: [ string ](name='RealServers', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  rsType: int32(name='RsType', position='Query'),
}

model CreateDomainResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDomainResourceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDomainResourceResponseBody(name='body'),
}

async function createDomainResource(request: CreateDomainResourceRequest): CreateDomainResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDomainResource', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkRulesRequest {
  networkRules: string(name='NetworkRules', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateNetworkRulesResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateNetworkRulesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNetworkRulesResponseBody(name='body'),
}

async function createNetworkRules(request: CreateNetworkRulesRequest): CreateNetworkRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkRules', 'POST', '/', 'json', false, 'json', request);
}

model CreateNetworkRulesTfRequest {
  portParam?: [ 
    {
      backendPort?: string(name='BackendPort'),
      frontendPort?: string(name='FrontendPort'),
      instanceId?: string(name='InstanceId'),
      protocol?: string(name='Protocol'),
      realServers: [ string ](name='RealServers'),
    }
  ](name='PortParam', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateNetworkRulesTfResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateNetworkRulesTfResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNetworkRulesTfResponseBody(name='body'),
}

async function createNetworkRulesTf(request: CreateNetworkRulesTfRequest): CreateNetworkRulesTfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNetworkRulesTf', 'POST', '/', 'json', false, 'json', request);
}

model CreatePortRequest {
  backendPort?: string(name='BackendPort', position='Query'),
  frontendPort: string(name='FrontendPort', position='Query'),
  frontendProtocol: string(name='FrontendProtocol', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  realServers: [ string ](name='RealServers', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreatePortResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreatePortResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePortResponseBody(name='body'),
}

async function createPort(request: CreatePortRequest): CreatePortResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePort', 'POST', '/', 'json', false, 'json', request);
}

model CreateSceneDefensePolicyRequest {
  endTime: long(name='EndTime', position='Query'),
  name: string(name='Name', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  startTime: long(name='StartTime', position='Query'),
  template: string(name='Template', position='Query'),
}

model CreateSceneDefensePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSceneDefensePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSceneDefensePolicyResponseBody(name='body'),
}

async function createSceneDefensePolicy(request: CreateSceneDefensePolicyRequest): CreateSceneDefensePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSceneDefensePolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateSchedulerRuleRequest {
  param?: string(name='Param', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  ruleName: string(name='RuleName', position='Query'),
  ruleType: int32(name='RuleType', position='Query'),
  rules: string(name='Rules', position='Query'),
}

model CreateSchedulerRuleResponseBody = {
  cname?: string(name='Cname'),
  requestId?: string(name='RequestId'),
  ruleName?: string(name='RuleName'),
}

model CreateSchedulerRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSchedulerRuleResponseBody(name='body'),
}

async function createSchedulerRule(request: CreateSchedulerRuleRequest): CreateSchedulerRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSchedulerRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateTagResourcesRequest {
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceIds: [ string ](name='ResourceIds', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
}

model CreateTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTagResourcesResponseBody(name='body'),
}

async function createTagResources(request: CreateTagResourcesRequest): CreateTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTagResources', 'POST', '/', 'json', false, 'json', request);
}

model CreateWebCCRuleRequest {
  act: string(name='Act', position='Query'),
  count: int32(name='Count', position='Query'),
  domain: string(name='Domain', position='Query'),
  interval: int32(name='Interval', position='Query'),
  mode: string(name='Mode', position='Query'),
  name: string(name='Name', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  ttl: int32(name='Ttl', position='Query'),
  uri: string(name='Uri', position='Query'),
}

model CreateWebCCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateWebCCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWebCCRuleResponseBody(name='body'),
}

async function createWebCCRule(request: CreateWebCCRuleRequest): CreateWebCCRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWebCCRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateWebRuleRequest {
  defenseId?: string(name='DefenseId', position='Query'),
  domain: string(name='Domain', position='Query'),
  httpsExt?: string(name='HttpsExt', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  rsType: int32(name='RsType', position='Query'),
  rules: string(name='Rules', position='Query'),
}

model CreateWebRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateWebRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWebRuleResponseBody(name='body'),
}

async function createWebRule(request: CreateWebRuleRequest): CreateWebRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWebRule', 'POST', '/', 'json', false, 'json', request);
}

model CreateWebRuleTfRequest {
  defenseId?: string(name='DefenseId', position='Query'),
  domain: string(name='Domain', position='Query'),
  httpsExt?: string(name='HttpsExt', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  proxyTypes: [ 
    {
      protocol?: string(name='Protocol'),
      proxyPorts: [ integer ](name='ProxyPorts'),
    }
  ](name='ProxyTypes', position='Query'),
  realServers?: [ string ](name='RealServers', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  rsType: int32(name='RsType', position='Query'),
}

model CreateWebRuleTfResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateWebRuleTfResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWebRuleTfResponseBody(name='body'),
}

async function createWebRuleTf(request: CreateWebRuleTfRequest): CreateWebRuleTfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWebRuleTf', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAsyncTaskRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  taskId: int32(name='TaskId', position='Query'),
}

model DeleteAsyncTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAsyncTaskResponseBody(name='body'),
}

async function deleteAsyncTask(request: DeleteAsyncTaskRequest): DeleteAsyncTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAsyncTask', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAutoCcBlacklistRequest {
  blacklist: string(name='Blacklist', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteAutoCcBlacklistResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAutoCcBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAutoCcBlacklistResponseBody(name='body'),
}

async function deleteAutoCcBlacklist(request: DeleteAutoCcBlacklistRequest): DeleteAutoCcBlacklistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAutoCcBlacklist', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAutoCcWhitelistRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  whitelist: string(name='Whitelist', position='Query'),
}

model DeleteAutoCcWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAutoCcWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAutoCcWhitelistResponseBody(name='body'),
}

async function deleteAutoCcWhitelist(request: DeleteAutoCcWhitelistRequest): DeleteAutoCcWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAutoCcWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainResourceRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteDomainResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainResourceResponseBody(name='body'),
}

async function deleteDomainResource(request: DeleteDomainResourceRequest): DeleteDomainResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomainResource', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkRuleRequest {
  networkRule: string(name='NetworkRule', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteNetworkRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNetworkRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetworkRuleResponseBody(name='body'),
}

async function deleteNetworkRule(request: DeleteNetworkRuleRequest): DeleteNetworkRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNetworkRulesTfRequest {
  portParam?: [ 
    {
      backendPort?: string(name='BackendPort'),
      frontendPort?: string(name='FrontendPort'),
      instanceId?: string(name='InstanceId'),
      protocol?: string(name='Protocol'),
      realServers: [ string ](name='RealServers'),
    }
  ](name='PortParam', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteNetworkRulesTfResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNetworkRulesTfResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetworkRulesTfResponseBody(name='body'),
}

async function deleteNetworkRulesTf(request: DeleteNetworkRulesTfRequest): DeleteNetworkRulesTfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNetworkRulesTf', 'POST', '/', 'json', false, 'json', request);
}

model DeletePortRequest {
  backendPort?: string(name='BackendPort', position='Query'),
  frontendPort: string(name='FrontendPort', position='Query'),
  frontendProtocol: string(name='FrontendProtocol', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  realServers?: [ string ](name='RealServers', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeletePortResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeletePortResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePortResponseBody(name='body'),
}

async function deletePort(request: DeletePortRequest): DeletePortResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePort', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSceneDefensePolicyRequest {
  policyId: string(name='PolicyId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteSceneDefensePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSceneDefensePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSceneDefensePolicyResponseBody(name='body'),
}

async function deleteSceneDefensePolicy(request: DeleteSceneDefensePolicyRequest): DeleteSceneDefensePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSceneDefensePolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSchedulerRuleRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  ruleName: string(name='RuleName', position='Query'),
}

model DeleteSchedulerRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSchedulerRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSchedulerRuleResponseBody(name='body'),
}

async function deleteSchedulerRule(request: DeleteSchedulerRuleRequest): DeleteSchedulerRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSchedulerRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceIds: [ string ](name='ResourceIds', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model DeleteTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTagResourcesResponseBody(name='body'),
}

async function deleteTagResources(request: DeleteTagResourcesRequest): DeleteTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTagResources', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWebCCRuleRequest {
  domain: string(name='Domain', position='Query'),
  name: string(name='Name', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DeleteWebCCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWebCCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWebCCRuleResponseBody(name='body'),
}

async function deleteWebCCRule(request: DeleteWebCCRuleRequest): DeleteWebCCRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWebCCRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWebCacheCustomRuleRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  ruleNames: [ string ](name='RuleNames', position='Query'),
}

model DeleteWebCacheCustomRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWebCacheCustomRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWebCacheCustomRuleResponseBody(name='body'),
}

async function deleteWebCacheCustomRule(request: DeleteWebCacheCustomRuleRequest): DeleteWebCacheCustomRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWebCacheCustomRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWebPreciseAccessRuleRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  ruleNames: [ string ](name='RuleNames', position='Query'),
}

model DeleteWebPreciseAccessRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWebPreciseAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWebPreciseAccessRuleResponseBody(name='body'),
}

async function deleteWebPreciseAccessRule(request: DeleteWebPreciseAccessRuleRequest): DeleteWebPreciseAccessRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWebPreciseAccessRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWebRuleRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DeleteWebRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWebRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWebRuleResponseBody(name='body'),
}

async function deleteWebRule(request: DeleteWebRuleRequest): DeleteWebRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWebRule', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWebRuleTfRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DeleteWebRuleTfResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWebRuleTfResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWebRuleTfResponseBody(name='body'),
}

async function deleteWebRuleTf(request: DeleteWebRuleTfRequest): DeleteWebRuleTfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWebRuleTf', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAsyncTasksRequest {
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeAsyncTasksResponseBody = {
  asyncTasks?: [ 
    {
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      taskId?: long(name='TaskId'),
      taskParams?: string(name='TaskParams'),
      taskResult?: string(name='TaskResult'),
      taskStatus?: int32(name='TaskStatus'),
      taskType?: int32(name='TaskType'),
    }
  ](name='AsyncTasks'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAsyncTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAsyncTasksResponseBody(name='body'),
}

async function describeAsyncTasks(request: DescribeAsyncTasksRequest): DescribeAsyncTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAsyncTasks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAttackAnalysisMaxQpsRequest {
  endTime: long(name='EndTime', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeAttackAnalysisMaxQpsResponseBody = {
  qps?: long(name='Qps'),
  requestId?: string(name='RequestId'),
}

model DescribeAttackAnalysisMaxQpsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAttackAnalysisMaxQpsResponseBody(name='body'),
}

async function describeAttackAnalysisMaxQps(request: DescribeAttackAnalysisMaxQpsRequest): DescribeAttackAnalysisMaxQpsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAttackAnalysisMaxQps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoCcBlacklistRequest {
  instanceId: string(name='InstanceId', position='Query'),
  keyWord?: string(name='KeyWord', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAutoCcBlacklistResponseBody = {
  autoCcBlacklist?: [ 
    {
      destIp?: string(name='DestIp'),
      endTime?: long(name='EndTime'),
      sourceIp?: string(name='SourceIp'),
      type?: string(name='Type'),
    }
  ](name='AutoCcBlacklist'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeAutoCcBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoCcBlacklistResponseBody(name='body'),
}

async function describeAutoCcBlacklist(request: DescribeAutoCcBlacklistRequest): DescribeAutoCcBlacklistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoCcBlacklist', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoCcListCountRequest {
  instanceId: string(name='InstanceId', position='Query'),
  queryType?: string(name='QueryType', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAutoCcListCountResponseBody = {
  blackCount?: int32(name='BlackCount'),
  requestId?: string(name='RequestId'),
  whiteCount?: int32(name='WhiteCount'),
}

model DescribeAutoCcListCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoCcListCountResponseBody(name='body'),
}

async function describeAutoCcListCount(request: DescribeAutoCcListCountRequest): DescribeAutoCcListCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoCcListCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAutoCcWhitelistRequest {
  instanceId: string(name='InstanceId', position='Query'),
  keyWord?: string(name='KeyWord', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeAutoCcWhitelistResponseBody = {
  autoCcWhitelist?: [ 
    {
      destIp?: string(name='DestIp'),
      endTime?: long(name='EndTime'),
      sourceIp?: string(name='SourceIp'),
      type?: string(name='Type'),
    }
  ](name='AutoCcWhitelist'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeAutoCcWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoCcWhitelistResponseBody(name='body'),
}

async function describeAutoCcWhitelist(request: DescribeAutoCcWhitelistRequest): DescribeAutoCcWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoCcWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackSourceCidrRequest {
  line?: string(name='Line', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeBackSourceCidrResponseBody = {
  cidrs?: [ string ](name='Cidrs'),
  requestId?: string(name='RequestId'),
}

model DescribeBackSourceCidrResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackSourceCidrResponseBody(name='body'),
}

async function describeBackSourceCidr(request: DescribeBackSourceCidrRequest): DescribeBackSourceCidrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackSourceCidr', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBlackholeStatusRequest {
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeBlackholeStatusResponseBody = {
  blackholeStatus?: [ 
    {
      blackStatus?: string(name='BlackStatus'),
      endTime?: long(name='EndTime'),
      ip?: string(name='Ip'),
      startTime?: long(name='StartTime'),
    }
  ](name='BlackholeStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeBlackholeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBlackholeStatusResponseBody(name='body'),
}

async function describeBlackholeStatus(request: DescribeBlackholeStatusRequest): DescribeBlackholeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlackholeStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBlockStatusRequest {
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeBlockStatusResponseBody = {
  requestId?: string(name='RequestId'),
  statusList?: [ 
    {
      blockStatusList?: [ 
        {
          blockStatus?: string(name='BlockStatus'),
          endTime?: long(name='EndTime'),
          line?: string(name='Line'),
          startTime?: long(name='StartTime'),
        }
      ](name='BlockStatusList'),
      ip?: string(name='Ip'),
    }
  ](name='StatusList'),
}

model DescribeBlockStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBlockStatusResponseBody(name='body'),
}

async function describeBlockStatus(request: DescribeBlockStatusRequest): DescribeBlockStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBlockStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCertsRequest {
  domain?: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeCertsResponseBody = {
  certs?: [ 
    {
      common?: string(name='Common'),
      domainRelated?: boolean(name='DomainRelated'),
      endDate?: string(name='EndDate'),
      id?: int32(name='Id'),
      issuer?: string(name='Issuer'),
      name?: string(name='Name'),
      startDate?: string(name='StartDate'),
    }
  ](name='Certs'),
  requestId?: string(name='RequestId'),
}

model DescribeCertsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCertsResponseBody(name='body'),
}

async function describeCerts(request: DescribeCertsRequest): DescribeCertsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCerts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCnameReusesRequest {
  domains: [ string ](name='Domains', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeCnameReusesResponseBody = {
  cnameReuses?: [ 
    {
      cname?: string(name='Cname'),
      domain?: string(name='Domain'),
      enable?: int32(name='Enable'),
    }
  ](name='CnameReuses'),
  requestId?: string(name='RequestId'),
}

model DescribeCnameReusesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCnameReusesResponseBody(name='body'),
}

async function describeCnameReuses(request: DescribeCnameReusesRequest): DescribeCnameReusesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCnameReuses', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDDoSEventsRequest {
  endTime?: long(name='EndTime', position='Query'),
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDDoSEventsResponseBody = {
  DDoSEvents?: [ 
    {
      bps?: long(name='Bps'),
      endTime?: long(name='EndTime'),
      eventType?: string(name='EventType'),
      ip?: string(name='Ip'),
      port?: string(name='Port'),
      pps?: long(name='Pps'),
      region?: string(name='Region'),
      startTime?: long(name='StartTime'),
    }
  ](name='DDoSEvents'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeDDoSEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDoSEventsResponseBody(name='body'),
}

async function describeDDoSEvents(request: DescribeDDoSEventsRequest): DescribeDDoSEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDDoSEvents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDDosAllEventListRequest {
  endTime: long(name='EndTime', position='Query'),
  eventType?: string(name='EventType', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDDosAllEventListResponseBody = {
  attackEvents?: [ 
    {
      area?: string(name='Area'),
      endTime?: long(name='EndTime'),
      eventType?: string(name='EventType'),
      ip?: string(name='Ip'),
      mbps?: long(name='Mbps'),
      port?: string(name='Port'),
      pps?: long(name='Pps'),
      startTime?: long(name='StartTime'),
    }
  ](name='AttackEvents'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model DescribeDDosAllEventListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDosAllEventListResponseBody(name='body'),
}

async function describeDDosAllEventList(request: DescribeDDosAllEventListRequest): DescribeDDosAllEventListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDDosAllEventList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDDosEventAreaRequest {
  eventType: string(name='EventType', position='Query'),
  ip: string(name='Ip', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDDosEventAreaResponseBody = {
  areas?: [ 
    {
      area?: string(name='Area'),
      inPkts?: long(name='InPkts'),
    }
  ](name='Areas'),
  requestId?: string(name='RequestId'),
}

model DescribeDDosEventAreaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDosEventAreaResponseBody(name='body'),
}

async function describeDDosEventArea(request: DescribeDDosEventAreaRequest): DescribeDDosEventAreaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDDosEventArea', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDDosEventAttackTypeRequest {
  eventType: string(name='EventType', position='Query'),
  ip: string(name='Ip', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDDosEventAttackTypeResponseBody = {
  attackTypes?: [ 
    {
      attackType?: string(name='AttackType'),
      inPkts?: long(name='InPkts'),
    }
  ](name='AttackTypes'),
  requestId?: string(name='RequestId'),
}

model DescribeDDosEventAttackTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDosEventAttackTypeResponseBody(name='body'),
}

async function describeDDosEventAttackType(request: DescribeDDosEventAttackTypeRequest): DescribeDDosEventAttackTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDDosEventAttackType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDDosEventIspRequest {
  eventType: string(name='EventType', position='Query'),
  ip: string(name='Ip', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDDosEventIspResponseBody = {
  isps?: [ 
    {
      inPkts?: long(name='InPkts'),
      isp?: string(name='Isp'),
    }
  ](name='Isps'),
  requestId?: string(name='RequestId'),
}

model DescribeDDosEventIspResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDosEventIspResponseBody(name='body'),
}

async function describeDDosEventIsp(request: DescribeDDosEventIspRequest): DescribeDDosEventIspResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDDosEventIsp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDDosEventMaxRequest {
  endTime: long(name='EndTime', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDDosEventMaxResponseBody = {
  cps?: long(name='Cps'),
  mbps?: long(name='Mbps'),
  qps?: long(name='Qps'),
  requestId?: string(name='RequestId'),
}

model DescribeDDosEventMaxResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDosEventMaxResponseBody(name='body'),
}

async function describeDDosEventMax(request: DescribeDDosEventMaxRequest): DescribeDDosEventMaxResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDDosEventMax', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDDosEventSrcIpRequest {
  eventType: string(name='EventType', position='Query'),
  ip: string(name='Ip', position='Query'),
  range: long(name='Range', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDDosEventSrcIpResponseBody = {
  ips?: [ 
    {
      areaId?: string(name='AreaId'),
      isp?: string(name='Isp'),
      srcIp?: string(name='SrcIp'),
    }
  ](name='Ips'),
  requestId?: string(name='RequestId'),
}

model DescribeDDosEventSrcIpResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDosEventSrcIpResponseBody(name='body'),
}

async function describeDDosEventSrcIp(request: DescribeDDosEventSrcIpRequest): DescribeDDosEventSrcIpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDDosEventSrcIp', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDefenseCountStatisticsRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeDefenseCountStatisticsResponseBody = {
  defenseCountStatistics?: {
    defenseCountTotalUsageOfCurrentMonth?: int32(name='DefenseCountTotalUsageOfCurrentMonth'),
    flowPackCountRemain?: int32(name='FlowPackCountRemain'),
    maxUsableDefenseCountCurrentMonth?: int32(name='MaxUsableDefenseCountCurrentMonth'),
    secHighSpeedCountRemain?: int32(name='SecHighSpeedCountRemain'),
  }(name='DefenseCountStatistics'),
  requestId?: string(name='RequestId'),
}

model DescribeDefenseCountStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDefenseCountStatisticsResponseBody(name='body'),
}

async function describeDefenseCountStatistics(request: DescribeDefenseCountStatisticsRequest): DescribeDefenseCountStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDefenseCountStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDefenseRecordsRequest {
  endTime: long(name='EndTime', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDefenseRecordsResponseBody = {
  defenseRecords?: [ 
    {
      attackPeak?: long(name='AttackPeak'),
      endTime?: long(name='EndTime'),
      eventCount?: int32(name='EventCount'),
      instanceId?: string(name='InstanceId'),
      startTime?: long(name='StartTime'),
      status?: int32(name='Status'),
    }
  ](name='DefenseRecords'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDefenseRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDefenseRecordsResponseBody(name='body'),
}

async function describeDefenseRecords(request: DescribeDefenseRecordsRequest): DescribeDefenseRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDefenseRecords', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainAttackEventsRequest {
  domain?: string(name='Domain', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDomainAttackEventsResponseBody = {
  domainAttackEvents?: [ 
    {
      domain?: string(name='Domain'),
      endTime?: long(name='EndTime'),
      maxQps?: long(name='MaxQps'),
      startTime?: long(name='StartTime'),
    }
  ](name='DomainAttackEvents'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDomainAttackEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainAttackEventsResponseBody(name='body'),
}

async function describeDomainAttackEvents(request: DescribeDomainAttackEventsRequest): DescribeDomainAttackEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainAttackEvents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainOverviewRequest {
  domain?: string(name='Domain', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDomainOverviewResponseBody = {
  maxHttp?: long(name='MaxHttp'),
  maxHttps?: long(name='MaxHttps'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainOverviewResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainOverviewResponseBody(name='body'),
}

async function describeDomainOverview(request: DescribeDomainOverviewRequest): DescribeDomainOverviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainOverview', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainQPSListRequest {
  domain?: string(name='Domain', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  interval: long(name='Interval', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDomainQPSListResponseBody = {
  domainQPSList?: [ 
    {
      attackQps?: long(name='AttackQps'),
      cacheHits?: long(name='CacheHits'),
      index?: long(name='Index'),
      maxAttackQps?: long(name='MaxAttackQps'),
      maxNormalQps?: long(name='MaxNormalQps'),
      maxQps?: long(name='MaxQps'),
      time?: long(name='Time'),
      totalCount?: long(name='TotalCount'),
      totalQps?: long(name='TotalQps'),
    }
  ](name='DomainQPSList'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainQPSListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainQPSListResponseBody(name='body'),
}

async function describeDomainQPSList(request: DescribeDomainQPSListRequest): DescribeDomainQPSListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainQPSList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainQpsWithCacheRequest {
  domain?: string(name='Domain', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDomainQpsWithCacheResponseBody = {
  blocks?: [ string ](name='Blocks'),
  cacheHits?: [ string ](name='CacheHits'),
  ccBlockQps?: [ string ](name='CcBlockQps'),
  ccJsQps?: [ string ](name='CcJsQps'),
  interval?: int32(name='Interval'),
  ipBlockQps?: [ string ](name='IpBlockQps'),
  preciseBlocks?: [ string ](name='PreciseBlocks'),
  preciseJsQps?: [ string ](name='PreciseJsQps'),
  regionBlocks?: [ string ](name='RegionBlocks'),
  requestId?: string(name='RequestId'),
  startTime?: long(name='StartTime'),
  totals?: [ string ](name='Totals'),
}

model DescribeDomainQpsWithCacheResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainQpsWithCacheResponseBody(name='body'),
}

async function describeDomainQpsWithCache(request: DescribeDomainQpsWithCacheRequest): DescribeDomainQpsWithCacheResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainQpsWithCache', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainResourceRequest {
  domain?: string(name='Domain', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  queryDomainPattern?: string(name='QueryDomainPattern', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeDomainResourceResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  webRules?: [ 
    {
      blackList?: [ string ](name='BlackList'),
      ccEnabled?: boolean(name='CcEnabled'),
      ccRuleEnabled?: boolean(name='CcRuleEnabled'),
      ccTemplate?: string(name='CcTemplate'),
      certName?: string(name='CertName'),
      cname?: string(name='Cname'),
      customCiphers?: [ string ](name='CustomCiphers'),
      domain?: string(name='Domain'),
      http2Enable?: boolean(name='Http2Enable'),
      http2HttpsEnable?: boolean(name='Http2HttpsEnable'),
      https2HttpEnable?: boolean(name='Https2HttpEnable'),
      httpsExt?: string(name='HttpsExt'),
      instanceIds?: [ string ](name='InstanceIds'),
      policyMode?: string(name='PolicyMode'),
      proxyEnabled?: boolean(name='ProxyEnabled'),
      proxyTypes?: [ 
        {
          proxyPorts?: [ string ](name='ProxyPorts'),
          proxyType?: string(name='ProxyType'),
        }
      ](name='ProxyTypes'),
      punishReason?: int32(name='PunishReason'),
      punishStatus?: boolean(name='PunishStatus'),
      realServers?: [ string ](name='RealServers'),
      rsType?: int32(name='RsType'),
      ssl13Enabled?: boolean(name='Ssl13Enabled'),
      sslCiphers?: string(name='SslCiphers'),
      sslProtocols?: string(name='SslProtocols'),
      whiteList?: [ string ](name='WhiteList'),
    }
  ](name='WebRules'),
}

model DescribeDomainResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainResourceResponseBody(name='body'),
}

async function describeDomainResource(request: DescribeDomainResourceRequest): DescribeDomainResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainStatusCodeCountRequest {
  domain?: string(name='Domain', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDomainStatusCodeCountResponseBody = {
  requestId?: string(name='RequestId'),
  status200?: long(name='Status200'),
  status2XX?: long(name='Status2XX'),
  status3XX?: long(name='Status3XX'),
  status403?: long(name='Status403'),
  status404?: long(name='Status404'),
  status405?: long(name='Status405'),
  status4XX?: long(name='Status4XX'),
  status501?: long(name='Status501'),
  status502?: long(name='Status502'),
  status503?: long(name='Status503'),
  status504?: long(name='Status504'),
  status5XX?: long(name='Status5XX'),
}

model DescribeDomainStatusCodeCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainStatusCodeCountResponseBody(name='body'),
}

async function describeDomainStatusCodeCount(request: DescribeDomainStatusCodeCountRequest): DescribeDomainStatusCodeCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainStatusCodeCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainStatusCodeListRequest {
  domain?: string(name='Domain', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  interval: long(name='Interval', position='Query'),
  queryType: string(name='QueryType', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDomainStatusCodeListResponseBody = {
  requestId?: string(name='RequestId'),
  statusCodeList?: [ 
    {
      index?: int32(name='Index'),
      status200?: long(name='Status200'),
      status2XX?: long(name='Status2XX'),
      status3XX?: long(name='Status3XX'),
      status403?: long(name='Status403'),
      status404?: long(name='Status404'),
      status405?: long(name='Status405'),
      status4XX?: long(name='Status4XX'),
      status501?: long(name='Status501'),
      status502?: long(name='Status502'),
      status503?: long(name='Status503'),
      status504?: long(name='Status504'),
      status5XX?: long(name='Status5XX'),
      time?: long(name='Time'),
    }
  ](name='StatusCodeList'),
}

model DescribeDomainStatusCodeListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainStatusCodeListResponseBody(name='body'),
}

async function describeDomainStatusCodeList(request: DescribeDomainStatusCodeListRequest): DescribeDomainStatusCodeListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainStatusCodeList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainTopAttackListRequest {
  endTime: long(name='EndTime', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDomainTopAttackListResponseBody = {
  attackList?: [ 
    {
      attack?: long(name='Attack'),
      count?: long(name='Count'),
      domain?: string(name='Domain'),
    }
  ](name='AttackList'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainTopAttackListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainTopAttackListResponseBody(name='body'),
}

async function describeDomainTopAttackList(request: DescribeDomainTopAttackListRequest): DescribeDomainTopAttackListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainTopAttackList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainViewSourceCountriesRequest {
  domain?: string(name='Domain', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDomainViewSourceCountriesResponseBody = {
  requestId?: string(name='RequestId'),
  sourceCountrys?: [ 
    {
      count?: long(name='Count'),
      countryId?: string(name='CountryId'),
    }
  ](name='SourceCountrys'),
}

model DescribeDomainViewSourceCountriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainViewSourceCountriesResponseBody(name='body'),
}

async function describeDomainViewSourceCountries(request: DescribeDomainViewSourceCountriesRequest): DescribeDomainViewSourceCountriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainViewSourceCountries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainViewSourceProvincesRequest {
  domain?: string(name='Domain', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeDomainViewSourceProvincesResponseBody = {
  requestId?: string(name='RequestId'),
  sourceProvinces?: [ 
    {
      count?: long(name='Count'),
      provinceId?: string(name='ProvinceId'),
    }
  ](name='SourceProvinces'),
}

model DescribeDomainViewSourceProvincesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainViewSourceProvincesResponseBody(name='body'),
}

async function describeDomainViewSourceProvinces(request: DescribeDomainViewSourceProvincesRequest): DescribeDomainViewSourceProvincesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainViewSourceProvinces', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainViewTopCostTimeRequest {
  domain?: string(name='Domain', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  top: int32(name='Top', minimum=1, maximum=100, position='Query'),
}

model DescribeDomainViewTopCostTimeResponseBody = {
  requestId?: string(name='RequestId'),
  urlList?: [ 
    {
      costTime?: float(name='CostTime'),
      domain?: string(name='Domain'),
      url?: string(name='Url'),
    }
  ](name='UrlList'),
}

model DescribeDomainViewTopCostTimeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainViewTopCostTimeResponseBody(name='body'),
}

async function describeDomainViewTopCostTime(request: DescribeDomainViewTopCostTimeRequest): DescribeDomainViewTopCostTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainViewTopCostTime', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainViewTopUrlRequest {
  domain?: string(name='Domain', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  top: int32(name='Top', minimum=1, maximum=100, position='Query'),
}

model DescribeDomainViewTopUrlResponseBody = {
  requestId?: string(name='RequestId'),
  urlList?: [ 
    {
      count?: long(name='Count'),
      domain?: string(name='Domain'),
      url?: string(name='Url'),
    }
  ](name='UrlList'),
}

model DescribeDomainViewTopUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainViewTopUrlResponseBody(name='body'),
}

async function describeDomainViewTopUrl(request: DescribeDomainViewTopUrlRequest): DescribeDomainViewTopUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomainViewTopUrl', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainsRequest {
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeDomainsResponseBody = {
  domains?: [ string ](name='Domains'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainsResponseBody(name='body'),
}

async function describeDomains(request: DescribeDomainsRequest): DescribeDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomains', 'POST', '/', 'json', false, 'json', request);
}

model DescribeElasticBandwidthSpecRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeElasticBandwidthSpecResponseBody = {
  elasticBandwidthSpec?: [ string ](name='ElasticBandwidthSpec'),
  requestId?: string(name='RequestId'),
}

model DescribeElasticBandwidthSpecResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeElasticBandwidthSpecResponseBody(name='body'),
}

async function describeElasticBandwidthSpec(request: DescribeElasticBandwidthSpecRequest): DescribeElasticBandwidthSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeElasticBandwidthSpec', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHealthCheckListRequest {
  networkRules: string(name='NetworkRules', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeHealthCheckListResponseBody = {
  healthCheckList?: [ 
    {
      frontendPort?: int32(name='FrontendPort'),
      healthCheck?: {
        domain?: string(name='Domain'),
        down?: int32(name='Down'),
        interval?: int32(name='Interval'),
        port?: int32(name='Port'),
        timeout?: int32(name='Timeout'),
        type?: string(name='Type'),
        up?: int32(name='Up'),
        uri?: string(name='Uri'),
      }(name='HealthCheck'),
      instanceId?: string(name='InstanceId'),
      protocol?: string(name='Protocol'),
    }
  ](name='HealthCheckList'),
  requestId?: string(name='RequestId'),
}

model DescribeHealthCheckListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHealthCheckListResponseBody(name='body'),
}

async function describeHealthCheckList(request: DescribeHealthCheckListRequest): DescribeHealthCheckListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHealthCheckList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHealthCheckStatusRequest {
  networkRules: string(name='NetworkRules', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeHealthCheckStatusResponseBody = {
  healthCheckStatus?: [ 
    {
      frontendPort?: int32(name='FrontendPort'),
      instanceId?: string(name='InstanceId'),
      protocol?: string(name='Protocol'),
      realServerStatusList?: [ 
        {
          address?: string(name='Address'),
          status?: string(name='Status'),
        }
      ](name='RealServerStatusList'),
      status?: string(name='Status'),
    }
  ](name='HealthCheckStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeHealthCheckStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHealthCheckStatusResponseBody(name='body'),
}

async function describeHealthCheckStatus(request: DescribeHealthCheckStatusRequest): DescribeHealthCheckStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHealthCheckStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceDetailsRequest {
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeInstanceDetailsResponseBody = {
  instanceDetails?: [ 
    {
      eipInfos?: [ 
        {
          eip?: string(name='Eip'),
          ipMode?: string(name='IpMode'),
          ipVersion?: string(name='IpVersion'),
          status?: string(name='Status'),
        }
      ](name='EipInfos'),
      instanceId?: string(name='InstanceId'),
      line?: string(name='Line'),
    }
  ](name='InstanceDetails'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceDetailsResponseBody(name='body'),
}

async function describeInstanceDetails(request: DescribeInstanceDetailsRequest): DescribeInstanceDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceDetails', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceIdsRequest {
  edition?: int32(name='Edition', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeInstanceIdsResponseBody = {
  instanceIds?: [ 
    {
      edition?: int32(name='Edition'),
      instanceId?: string(name='InstanceId'),
      ipMode?: string(name='IpMode'),
      ipVersion?: string(name='IpVersion'),
      remark?: string(name='Remark'),
    }
  ](name='InstanceIds'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceIdsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceIdsResponseBody(name='body'),
}

async function describeInstanceIds(request: DescribeInstanceIdsRequest): DescribeInstanceIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceIds', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceSpecsRequest {
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeInstanceSpecsResponseBody = {
  instanceSpecs?: [ 
    {
      bandwidthMbps?: int32(name='BandwidthMbps'),
      baseBandwidth?: int32(name='BaseBandwidth'),
      defenseCount?: int32(name='DefenseCount'),
      domainLimit?: int32(name='DomainLimit'),
      elasticBandwidth?: int32(name='ElasticBandwidth'),
      elasticBw?: int32(name='ElasticBw'),
      functionVersion?: string(name='FunctionVersion'),
      instanceId?: string(name='InstanceId'),
      portLimit?: int32(name='PortLimit'),
      qpsLimit?: int32(name='QpsLimit'),
      siteLimit?: int32(name='SiteLimit'),
    }
  ](name='InstanceSpecs'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSpecsResponseBody(name='body'),
}

async function describeInstanceSpecs(request: DescribeInstanceSpecsRequest): DescribeInstanceSpecsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceSpecs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceStatisticsRequest {
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeInstanceStatisticsResponseBody = {
  instanceStatistics?: [ 
    {
      defenseCountUsage?: int32(name='DefenseCountUsage'),
      domainUsage?: int32(name='DomainUsage'),
      instanceId?: string(name='InstanceId'),
      portUsage?: int32(name='PortUsage'),
      siteUsage?: int32(name='SiteUsage'),
    }
  ](name='InstanceStatistics'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceStatisticsResponseBody(name='body'),
}

async function describeInstanceStatistics(request: DescribeInstanceStatisticsRequest): DescribeInstanceStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceStatistics', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceStatusRequest {
  instanceId: string(name='InstanceId', position='Query'),
  productType: int32(name='ProductType', position='Query'),
}

model DescribeInstanceStatusResponseBody = {
  instanceId?: string(name='InstanceId'),
  instanceStatus?: int32(name='InstanceStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceStatusResponseBody(name='body'),
}

async function describeInstanceStatus(request: DescribeInstanceStatusRequest): DescribeInstanceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstancesRequest {
  edition?: int32(name='Edition', position='Query'),
  enabled?: int32(name='Enabled', position='Query'),
  expireEndTime?: long(name='ExpireEndTime', position='Query'),
  expireStartTime?: long(name='ExpireStartTime', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  ip?: string(name='Ip', position='Query'),
  pageNumber: string(name='PageNumber', position='Query'),
  pageSize: string(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  remark?: string(name='Remark', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  status?: [ int32 ](name='Status', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      createTime?: long(name='CreateTime'),
      debtStatus?: int32(name='DebtStatus'),
      edition?: int32(name='Edition'),
      enabled?: int32(name='Enabled'),
      expireTime?: long(name='ExpireTime'),
      instanceId?: string(name='InstanceId'),
      ipMode?: string(name='IpMode'),
      ipVersion?: string(name='IpVersion'),
      remark?: string(name='Remark'),
      status?: int32(name='Status'),
    }
  ](name='Instances'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeL7RsPolicyRequest {
  domain: string(name='Domain', position='Query'),
  realServers?: [ string ](name='RealServers', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeL7RsPolicyResponseBody = {
  attributes?: [ 
    {
      attribute?: {
        weight?: int32(name='Weight'),
      }(name='Attribute'),
      realServer?: string(name='RealServer'),
      rsType?: int32(name='RsType'),
    }
  ](name='Attributes'),
  proxyMode?: string(name='ProxyMode'),
  requestId?: string(name='RequestId'),
}

model DescribeL7RsPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeL7RsPolicyResponseBody(name='body'),
}

async function describeL7RsPolicy(request: DescribeL7RsPolicyRequest): DescribeL7RsPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeL7RsPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLayer4RulePolicyRequest {
  listeners: string(name='Listeners', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeLayer4RulePolicyResponseBody = {
  backendPort?: int32(name='BackendPort'),
  bakMode?: string(name='BakMode'),
  currentIndex?: int32(name='CurrentIndex'),
  forwardProtocol?: string(name='ForwardProtocol'),
  frontendPort?: int32(name='FrontendPort'),
  instanceId?: string(name='InstanceId'),
  priRealServers?: [ 
    {
      currentIndex?: int32(name='CurrentIndex'),
      eip?: string(name='Eip'),
      frontendPort?: int32(name='FrontendPort'),
      instanceId?: string(name='InstanceId'),
      protocol?: string(name='Protocol'),
      realServer?: string(name='RealServer'),
    }
  ](name='PriRealServers'),
  requestId?: string(name='RequestId'),
  secRealServers?: [ 
    {
      currentIndex?: int32(name='CurrentIndex'),
      eip?: string(name='Eip'),
      frontendPort?: int32(name='FrontendPort'),
      instanceId?: string(name='InstanceId'),
      protocol?: string(name='Protocol'),
      realServer?: string(name='RealServer'),
    }
  ](name='SecRealServers'),
}

model DescribeLayer4RulePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLayer4RulePolicyResponseBody(name='body'),
}

async function describeLayer4RulePolicy(request: DescribeLayer4RulePolicyRequest): DescribeLayer4RulePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLayer4RulePolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeLogStoreExistStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeLogStoreExistStatusResponseBody = {
  existStatus?: boolean(name='ExistStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeLogStoreExistStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogStoreExistStatusResponseBody(name='body'),
}

async function describeLogStoreExistStatus(request: DescribeLogStoreExistStatusRequest): DescribeLogStoreExistStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeLogStoreExistStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetworkRegionBlockRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeNetworkRegionBlockResponseBody = {
  config?: {
    countries?: [ string ](name='Countries'),
    provinces?: [ string ](name='Provinces'),
    regionBlockSwitch?: string(name='RegionBlockSwitch'),
  }(name='Config'),
  requestId?: string(name='RequestId'),
}

model DescribeNetworkRegionBlockResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkRegionBlockResponseBody(name='body'),
}

async function describeNetworkRegionBlock(request: DescribeNetworkRegionBlockRequest): DescribeNetworkRegionBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkRegionBlock', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetworkRuleAttributesRequest {
  networkRules: string(name='NetworkRules', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeNetworkRuleAttributesResponseBody = {
  networkRuleAttributes?: [ 
    {
      config?: {
        cc?: {
          sblack?: [ 
            {
              cnt?: int32(name='Cnt'),
              during?: int32(name='During'),
              expires?: int32(name='Expires'),
              type?: int32(name='Type'),
            }
          ](name='Sblack'),
        }(name='Cc'),
        nodataConn?: string(name='NodataConn'),
        payloadLen?: {
          max?: int32(name='Max'),
          min?: int32(name='Min'),
        }(name='PayloadLen'),
        persistenceTimeout?: int32(name='PersistenceTimeout'),
        sla?: {
          cps?: int32(name='Cps'),
          cpsEnable?: int32(name='CpsEnable'),
          maxconn?: int32(name='Maxconn'),
          maxconnEnable?: int32(name='MaxconnEnable'),
        }(name='Sla'),
        slimit?: {
          bps?: long(name='Bps'),
          cps?: int32(name='Cps'),
          cpsEnable?: int32(name='CpsEnable'),
          cpsMode?: int32(name='CpsMode'),
          maxconn?: int32(name='Maxconn'),
          maxconnEnable?: int32(name='MaxconnEnable'),
          pps?: long(name='Pps'),
        }(name='Slimit'),
        synproxy?: string(name='Synproxy'),
      }(name='Config'),
      frontendPort?: int32(name='FrontendPort'),
      instanceId?: string(name='InstanceId'),
      protocol?: string(name='Protocol'),
    }
  ](name='NetworkRuleAttributes'),
  requestId?: string(name='RequestId'),
}

model DescribeNetworkRuleAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkRuleAttributesResponseBody(name='body'),
}

async function describeNetworkRuleAttributes(request: DescribeNetworkRuleAttributesRequest): DescribeNetworkRuleAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkRuleAttributes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetworkRulesRequest {
  forwardProtocol?: string(name='ForwardProtocol', position='Query'),
  frontendPort?: int32(name='FrontendPort', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeNetworkRulesResponseBody = {
  networkRules?: [ 
    {
      backendPort?: int32(name='BackendPort'),
      frontendPort?: int32(name='FrontendPort'),
      instanceId?: string(name='InstanceId'),
      isAutoCreate?: boolean(name='IsAutoCreate'),
      protocol?: string(name='Protocol'),
      realServers?: [ string ](name='RealServers'),
    }
  ](name='NetworkRules'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeNetworkRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkRulesResponseBody(name='body'),
}

async function describeNetworkRules(request: DescribeNetworkRulesRequest): DescribeNetworkRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNetworkRulesTfRequest {
  forwardProtocol?: string(name='ForwardProtocol', position='Query'),
  frontendPort?: int32(name='FrontendPort', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeNetworkRulesTfResponseBody = {
  networkRules?: [ 
    {
      backendPort?: int32(name='BackendPort'),
      frontendPort?: int32(name='FrontendPort'),
      instanceId?: string(name='InstanceId'),
      isAutoCreate?: boolean(name='IsAutoCreate'),
      protocol?: string(name='Protocol'),
      realServers?: [ string ](name='RealServers'),
    }
  ](name='NetworkRules'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeNetworkRulesTfResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkRulesTfResponseBody(name='body'),
}

async function describeNetworkRulesTf(request: DescribeNetworkRulesTfRequest): DescribeNetworkRulesTfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNetworkRulesTf', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOpEntitiesRequest {
  endTime: long(name='EndTime', position='Query'),
  entityObject?: string(name='EntityObject', position='Query'),
  entityType?: int32(name='EntityType', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeOpEntitiesResponseBody = {
  opEntities?: [ 
    {
      entityObject?: string(name='EntityObject'),
      entityType?: int32(name='EntityType'),
      gmtCreate?: long(name='GmtCreate'),
      opAccount?: string(name='OpAccount'),
      opAction?: int32(name='OpAction'),
      opDesc?: string(name='OpDesc'),
    }
  ](name='OpEntities'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeOpEntitiesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOpEntitiesResponseBody(name='body'),
}

async function describeOpEntities(request: DescribeOpEntitiesRequest): DescribeOpEntitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOpEntities', 'POST', '/', 'json', false, 'json', request);
}

model DescribePortRequest {
  frontendPort?: int32(name='FrontendPort', position='Query'),
  frontendProtocol?: string(name='FrontendProtocol', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribePortResponseBody = {
  networkRules?: [ 
    {
      backendPort?: int32(name='BackendPort'),
      frontendPort?: int32(name='FrontendPort'),
      frontendProtocol?: string(name='FrontendProtocol'),
      instanceId?: string(name='InstanceId'),
      isAutoCreate?: boolean(name='IsAutoCreate'),
      realServers?: [ string ](name='RealServers'),
    }
  ](name='NetworkRules'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribePortResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortResponseBody(name='body'),
}

async function describePort(request: DescribePortRequest): DescribePortResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePort', 'POST', '/', 'json', false, 'json', request);
}

model DescribePortAttackMaxFlowRequest {
  endTime: long(name='EndTime', position='Query'),
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribePortAttackMaxFlowResponseBody = {
  bps?: long(name='Bps'),
  pps?: long(name='Pps'),
  requestId?: string(name='RequestId'),
}

model DescribePortAttackMaxFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortAttackMaxFlowResponseBody(name='body'),
}

async function describePortAttackMaxFlow(request: DescribePortAttackMaxFlowRequest): DescribePortAttackMaxFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePortAttackMaxFlow', 'POST', '/', 'json', false, 'json', request);
}

model DescribePortAutoCcStatusRequest {
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribePortAutoCcStatusResponseBody = {
  portAutoCcStatus?: [ 
    {
      mode?: string(name='Mode'),
      switch?: string(name='Switch'),
      webMode?: string(name='WebMode'),
      webSwitch?: string(name='WebSwitch'),
    }
  ](name='PortAutoCcStatus'),
  requestId?: string(name='RequestId'),
}

model DescribePortAutoCcStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortAutoCcStatusResponseBody(name='body'),
}

async function describePortAutoCcStatus(request: DescribePortAutoCcStatusRequest): DescribePortAutoCcStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePortAutoCcStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribePortConnsCountRequest {
  endTime: long(name='EndTime', position='Query'),
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  port?: string(name='Port', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribePortConnsCountResponseBody = {
  actConns?: long(name='ActConns'),
  conns?: long(name='Conns'),
  cps?: long(name='Cps'),
  inActConns?: long(name='InActConns'),
  requestId?: string(name='RequestId'),
}

model DescribePortConnsCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortConnsCountResponseBody(name='body'),
}

async function describePortConnsCount(request: DescribePortConnsCountRequest): DescribePortConnsCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePortConnsCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribePortConnsListRequest {
  endTime: long(name='EndTime', position='Query'),
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  interval: int32(name='Interval', position='Query'),
  port?: string(name='Port', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribePortConnsListResponseBody = {
  connsList?: [ 
    {
      actConns?: long(name='ActConns'),
      conns?: long(name='Conns'),
      cps?: long(name='Cps'),
      inActConns?: long(name='InActConns'),
      index?: long(name='Index'),
      time?: long(name='Time'),
    }
  ](name='ConnsList'),
  requestId?: string(name='RequestId'),
}

model DescribePortConnsListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortConnsListResponseBody(name='body'),
}

async function describePortConnsList(request: DescribePortConnsListRequest): DescribePortConnsListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePortConnsList', 'POST', '/', 'json', false, 'json', request);
}

model DescribePortFlowListRequest {
  endTime: long(name='EndTime', position='Query'),
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  interval: int32(name='Interval', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribePortFlowListResponseBody = {
  portFlowList?: [ 
    {
      attackBps?: long(name='AttackBps'),
      attackPps?: long(name='AttackPps'),
      inBps?: long(name='InBps'),
      inPps?: long(name='InPps'),
      index?: long(name='Index'),
      outBps?: long(name='OutBps'),
      outPps?: long(name='OutPps'),
      region?: string(name='Region'),
      time?: long(name='Time'),
    }
  ](name='PortFlowList'),
  requestId?: string(name='RequestId'),
}

model DescribePortFlowListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortFlowListResponseBody(name='body'),
}

async function describePortFlowList(request: DescribePortFlowListRequest): DescribePortFlowListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePortFlowList', 'POST', '/', 'json', false, 'json', request);
}

model DescribePortMaxConnsRequest {
  endTime: long(name='EndTime', position='Query'),
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribePortMaxConnsResponseBody = {
  portMaxConns?: [ 
    {
      cps?: long(name='Cps'),
      ip?: string(name='Ip'),
      port?: string(name='Port'),
    }
  ](name='PortMaxConns'),
  requestId?: string(name='RequestId'),
}

model DescribePortMaxConnsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortMaxConnsResponseBody(name='body'),
}

async function describePortMaxConns(request: DescribePortMaxConnsRequest): DescribePortMaxConnsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePortMaxConns', 'POST', '/', 'json', false, 'json', request);
}

model DescribePortViewSourceCountriesRequest {
  endTime: long(name='EndTime', position='Query'),
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribePortViewSourceCountriesResponseBody = {
  requestId?: string(name='RequestId'),
  sourceCountrys?: [ 
    {
      count?: long(name='Count'),
      countryId?: string(name='CountryId'),
    }
  ](name='SourceCountrys'),
}

model DescribePortViewSourceCountriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortViewSourceCountriesResponseBody(name='body'),
}

async function describePortViewSourceCountries(request: DescribePortViewSourceCountriesRequest): DescribePortViewSourceCountriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePortViewSourceCountries', 'POST', '/', 'json', false, 'json', request);
}

model DescribePortViewSourceIspsRequest {
  endTime: long(name='EndTime', position='Query'),
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribePortViewSourceIspsResponseBody = {
  isps?: [ 
    {
      count?: long(name='Count'),
      ispId?: string(name='IspId'),
    }
  ](name='Isps'),
  requestId?: string(name='RequestId'),
}

model DescribePortViewSourceIspsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortViewSourceIspsResponseBody(name='body'),
}

async function describePortViewSourceIsps(request: DescribePortViewSourceIspsRequest): DescribePortViewSourceIspsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePortViewSourceIsps', 'POST', '/', 'json', false, 'json', request);
}

model DescribePortViewSourceProvincesRequest {
  endTime?: long(name='EndTime', position='Query'),
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribePortViewSourceProvincesResponseBody = {
  requestId?: string(name='RequestId'),
  sourceProvinces?: [ 
    {
      count?: long(name='Count'),
      provinceId?: string(name='ProvinceId'),
    }
  ](name='SourceProvinces'),
}

model DescribePortViewSourceProvincesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortViewSourceProvincesResponseBody(name='body'),
}

async function describePortViewSourceProvinces(request: DescribePortViewSourceProvincesRequest): DescribePortViewSourceProvincesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePortViewSourceProvinces', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSceneDefenseObjectsRequest {
  policyId: string(name='PolicyId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeSceneDefenseObjectsResponseBody = {
  objects?: [ 
    {
      domain?: string(name='Domain'),
      policyId?: string(name='PolicyId'),
      vip?: string(name='Vip'),
    }
  ](name='Objects'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSceneDefenseObjectsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSceneDefenseObjectsResponseBody(name='body'),
}

async function describeSceneDefenseObjects(request: DescribeSceneDefenseObjectsRequest): DescribeSceneDefenseObjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSceneDefenseObjects', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSceneDefensePoliciesRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  status?: string(name='Status', position='Query'),
  template?: string(name='Template', position='Query'),
}

model DescribeSceneDefensePoliciesResponseBody = {
  policies?: [ 
    {
      done?: int32(name='Done'),
      endTime?: long(name='EndTime'),
      name?: string(name='Name'),
      objectCount?: int32(name='ObjectCount'),
      policyId?: string(name='PolicyId'),
      runtimePolicies?: [ 
        {
          newValue?: string(name='NewValue'),
          policyType?: int32(name='PolicyType'),
          status?: int32(name='Status'),
          oldValue?: string(name='oldValue'),
        }
      ](name='RuntimePolicies'),
      startTime?: long(name='StartTime'),
      status?: int32(name='Status'),
      template?: string(name='Template'),
    }
  ](name='Policies'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSceneDefensePoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSceneDefensePoliciesResponseBody(name='body'),
}

async function describeSceneDefensePolicies(request: DescribeSceneDefensePoliciesRequest): DescribeSceneDefensePoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSceneDefensePolicies', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSchedulerRulesRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  ruleName?: string(name='RuleName', position='Query'),
}

model DescribeSchedulerRulesResponseBody = {
  requestId?: string(name='RequestId'),
  schedulerRules?: [ 
    {
      cname?: string(name='Cname'),
      param?: {
        paramData?: {
          cloudInstanceId?: string(name='CloudInstanceId'),
        }(name='ParamData'),
        paramType?: string(name='ParamType'),
      }(name='Param'),
      ruleName?: string(name='RuleName'),
      ruleType?: string(name='RuleType'),
      rules?: [ 
        {
          priority?: int32(name='Priority'),
          regionId?: string(name='RegionId'),
          restoreDelay?: int32(name='RestoreDelay'),
          status?: int32(name='Status'),
          type?: string(name='Type'),
          value?: string(name='Value'),
          valueType?: int32(name='ValueType'),
        }
      ](name='Rules'),
    }
  ](name='SchedulerRules'),
  totalCount?: string(name='TotalCount'),
}

model DescribeSchedulerRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSchedulerRulesResponseBody(name='body'),
}

async function describeSchedulerRules(request: DescribeSchedulerRulesRequest): DescribeSchedulerRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSchedulerRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlsAuthStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeSlsAuthStatusResponseBody = {
  requestId?: string(name='RequestId'),
  slsAuthStatus?: boolean(name='SlsAuthStatus'),
}

model DescribeSlsAuthStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlsAuthStatusResponseBody(name='body'),
}

async function describeSlsAuthStatus(request: DescribeSlsAuthStatusRequest): DescribeSlsAuthStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlsAuthStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlsLogstoreInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeSlsLogstoreInfoResponseBody = {
  logStore?: string(name='LogStore'),
  project?: string(name='Project'),
  quota?: long(name='Quota'),
  requestId?: string(name='RequestId'),
  ttl?: int32(name='Ttl'),
  used?: long(name='Used'),
}

model DescribeSlsLogstoreInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlsLogstoreInfoResponseBody(name='body'),
}

async function describeSlsLogstoreInfo(request: DescribeSlsLogstoreInfoRequest): DescribeSlsLogstoreInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlsLogstoreInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSlsOpenStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeSlsOpenStatusResponseBody = {
  requestId?: string(name='RequestId'),
  slsOpenStatus?: boolean(name='SlsOpenStatus'),
}

model DescribeSlsOpenStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlsOpenStatusResponseBody(name='body'),
}

async function describeSlsOpenStatus(request: DescribeSlsOpenStatusRequest): DescribeSlsOpenStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSlsOpenStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeStsGrantStatusRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  role: string(name='Role', position='Query'),
}

model DescribeStsGrantStatusResponseBody = {
  requestId?: string(name='RequestId'),
  stsGrant?: {
    status?: int32(name='Status'),
  }(name='StsGrant'),
}

model DescribeStsGrantStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStsGrantStatusResponseBody(name='body'),
}

async function describeStsGrantStatus(request: DescribeStsGrantStatusRequest): DescribeStsGrantStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeStsGrantStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSystemLogRequest {
  endTime: long(name='EndTime', position='Query'),
  entityObject?: string(name='EntityObject', position='Query'),
  entityType?: int32(name='EntityType', position='Query'),
  pageNumber: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeSystemLogResponseBody = {
  requestId?: string(name='RequestId'),
  systemLog?: [ 
    {
      entityObject?: string(name='EntityObject'),
      entityType?: int32(name='EntityType'),
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      opAccount?: string(name='OpAccount'),
      opAction?: int32(name='OpAction'),
      opDesc?: string(name='OpDesc'),
      status?: int32(name='Status'),
    }
  ](name='SystemLog'),
  total?: long(name='Total'),
}

model DescribeSystemLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSystemLogResponseBody(name='body'),
}

async function describeSystemLog(request: DescribeSystemLogRequest): DescribeSystemLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSystemLog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagKeysRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
}

model DescribeTagKeysResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  tagKeys?: [ 
    {
      tagCount?: int32(name='TagCount'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagKeys'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagKeysResponseBody(name='body'),
}

async function describeTagKeys(request: DescribeTagKeysRequest): DescribeTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceIds?: [ string ](name='ResourceIds', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags', position='Query'),
}

model DescribeTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model DescribeTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagResourcesResponseBody(name='body'),
}

async function describeTagResources(request: DescribeTagResourcesRequest): DescribeTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTagResources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUdpReflectRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeUdpReflectResponseBody = {
  requestId?: string(name='RequestId'),
  udpSports?: [ string ](name='UdpSports'),
}

model DescribeUdpReflectResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUdpReflectResponseBody(name='body'),
}

async function describeUdpReflect(request: DescribeUdpReflectRequest): DescribeUdpReflectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUdpReflect', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUnBlackholeCountRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeUnBlackholeCountResponseBody = {
  remainCount?: int32(name='RemainCount'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeUnBlackholeCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUnBlackholeCountResponseBody(name='body'),
}

async function describeUnBlackholeCount(request: DescribeUnBlackholeCountRequest): DescribeUnBlackholeCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUnBlackholeCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUnBlockCountRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeUnBlockCountResponseBody = {
  remainCount?: int32(name='RemainCount'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeUnBlockCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUnBlockCountResponseBody(name='body'),
}

async function describeUnBlockCount(request: DescribeUnBlockCountRequest): DescribeUnBlockCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUnBlockCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebAccessLogDispatchStatusRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeWebAccessLogDispatchStatusResponseBody = {
  requestId?: string(name='RequestId'),
  slsConfigStatus?: [ 
    {
      domain?: string(name='Domain'),
      enable?: boolean(name='Enable'),
    }
  ](name='SlsConfigStatus'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeWebAccessLogDispatchStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebAccessLogDispatchStatusResponseBody(name='body'),
}

async function describeWebAccessLogDispatchStatus(request: DescribeWebAccessLogDispatchStatusRequest): DescribeWebAccessLogDispatchStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebAccessLogDispatchStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebAccessLogEmptyCountRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeWebAccessLogEmptyCountResponseBody = {
  availableCount?: int32(name='AvailableCount'),
  requestId?: string(name='RequestId'),
}

model DescribeWebAccessLogEmptyCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebAccessLogEmptyCountResponseBody(name='body'),
}

async function describeWebAccessLogEmptyCount(request: DescribeWebAccessLogEmptyCountRequest): DescribeWebAccessLogEmptyCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebAccessLogEmptyCount', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebAccessLogStatusRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeWebAccessLogStatusResponseBody = {
  requestId?: string(name='RequestId'),
  slsLogstore?: string(name='SlsLogstore'),
  slsProject?: string(name='SlsProject'),
  slsStatus?: boolean(name='SlsStatus'),
}

model DescribeWebAccessLogStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebAccessLogStatusResponseBody(name='body'),
}

async function describeWebAccessLogStatus(request: DescribeWebAccessLogStatusRequest): DescribeWebAccessLogStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebAccessLogStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebAccessModeRequest {
  domains: [ string ](name='Domains', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeWebAccessModeResponseBody = {
  domainModes?: [ 
    {
      accessMode?: int32(name='AccessMode'),
      domain?: string(name='Domain'),
    }
  ](name='DomainModes'),
  requestId?: string(name='RequestId'),
}

model DescribeWebAccessModeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebAccessModeResponseBody(name='body'),
}

async function describeWebAccessMode(request: DescribeWebAccessModeRequest): DescribeWebAccessModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebAccessMode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebAreaBlockConfigsRequest {
  domains: [ string ](name='Domains', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeWebAreaBlockConfigsResponseBody = {
  areaBlockConfigs?: [ 
    {
      domain?: string(name='Domain'),
      regionList?: [ 
        {
          block?: int32(name='Block'),
          region?: string(name='Region'),
        }
      ](name='RegionList'),
    }
  ](name='AreaBlockConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeWebAreaBlockConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebAreaBlockConfigsResponseBody(name='body'),
}

async function describeWebAreaBlockConfigs(request: DescribeWebAreaBlockConfigsRequest): DescribeWebAreaBlockConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebAreaBlockConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebCCRulesRequest {
  domain: string(name='Domain', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize: string(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeWebCCRulesResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  webCCRules?: [ 
    {
      act?: string(name='Act'),
      count?: int32(name='Count'),
      interval?: int32(name='Interval'),
      mode?: string(name='Mode'),
      name?: string(name='Name'),
      ttl?: int32(name='Ttl'),
      uri?: string(name='Uri'),
    }
  ](name='WebCCRules'),
}

model DescribeWebCCRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebCCRulesResponseBody(name='body'),
}

async function describeWebCCRules(request: DescribeWebCCRulesRequest): DescribeWebCCRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebCCRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebCacheConfigsRequest {
  domains: [ string ](name='Domains', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeWebCacheConfigsResponseBody = {
  domainCacheConfigs?: [ 
    {
      customRules?: [ 
        {
          cacheTtl?: long(name='CacheTtl'),
          mode?: string(name='Mode'),
          name?: string(name='Name'),
          uri?: string(name='Uri'),
        }
      ](name='CustomRules'),
      domain?: string(name='Domain'),
      enable?: int32(name='Enable'),
      mode?: string(name='Mode'),
    }
  ](name='DomainCacheConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeWebCacheConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebCacheConfigsResponseBody(name='body'),
}

async function describeWebCacheConfigs(request: DescribeWebCacheConfigsRequest): DescribeWebCacheConfigsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebCacheConfigs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebCcProtectSwitchRequest {
  domains: [ string ](name='Domains', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeWebCcProtectSwitchResponseBody = {
  protectSwitchList?: [ 
    {
      aiMode?: string(name='AiMode'),
      aiRuleEnable?: int32(name='AiRuleEnable'),
      aiTemplate?: string(name='AiTemplate'),
      blackWhiteListEnable?: int32(name='BlackWhiteListEnable'),
      ccCustomRuleEnable?: int32(name='CcCustomRuleEnable'),
      ccEnable?: int32(name='CcEnable'),
      ccTemplate?: string(name='CcTemplate'),
      domain?: string(name='Domain'),
      preciseRuleEnable?: int32(name='PreciseRuleEnable'),
      regionBlockEnable?: int32(name='RegionBlockEnable'),
    }
  ](name='ProtectSwitchList'),
  requestId?: string(name='RequestId'),
}

model DescribeWebCcProtectSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebCcProtectSwitchResponseBody(name='body'),
}

async function describeWebCcProtectSwitch(request: DescribeWebCcProtectSwitchRequest): DescribeWebCcProtectSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebCcProtectSwitch', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebCustomPortsRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeWebCustomPortsResponseBody = {
  requestId?: string(name='RequestId'),
  webCustomPorts?: [ 
    {
      proxyPorts?: [ string ](name='ProxyPorts'),
      proxyType?: string(name='ProxyType'),
    }
  ](name='WebCustomPorts'),
}

model DescribeWebCustomPortsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebCustomPortsResponseBody(name='body'),
}

async function describeWebCustomPorts(request: DescribeWebCustomPortsRequest): DescribeWebCustomPortsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebCustomPorts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebInstanceRelationsRequest {
  domains: [ string ](name='Domains', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeWebInstanceRelationsResponseBody = {
  requestId?: string(name='RequestId'),
  webInstanceRelations?: [ 
    {
      domain?: string(name='Domain'),
      instanceDetails?: [ 
        {
          eipList?: [ string ](name='EipList'),
          functionVersion?: string(name='FunctionVersion'),
          instanceId?: string(name='InstanceId'),
        }
      ](name='InstanceDetails'),
    }
  ](name='WebInstanceRelations'),
}

model DescribeWebInstanceRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebInstanceRelationsResponseBody(name='body'),
}

async function describeWebInstanceRelations(request: DescribeWebInstanceRelationsRequest): DescribeWebInstanceRelationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebInstanceRelations', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebPreciseAccessRuleRequest {
  domains: [ string ](name='Domains', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeWebPreciseAccessRuleResponseBody = {
  preciseAccessConfigList?: [ 
    {
      domain?: string(name='Domain'),
      ruleList?: [ 
        {
          action?: string(name='Action'),
          conditionList?: [ 
            {
              content?: string(name='Content'),
              field?: string(name='Field'),
              headerName?: string(name='HeaderName'),
              matchMethod?: string(name='MatchMethod'),
            }
          ](name='ConditionList'),
          expires?: long(name='Expires'),
          name?: string(name='Name'),
          owner?: string(name='Owner'),
        }
      ](name='RuleList'),
    }
  ](name='PreciseAccessConfigList'),
  requestId?: string(name='RequestId'),
}

model DescribeWebPreciseAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebPreciseAccessRuleResponseBody(name='body'),
}

async function describeWebPreciseAccessRule(request: DescribeWebPreciseAccessRuleRequest): DescribeWebPreciseAccessRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebPreciseAccessRule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebRulesRequest {
  domain?: string(name='Domain', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  queryDomainPattern?: string(name='QueryDomainPattern', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeWebRulesResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  webRules?: [ 
    {
      blackList?: [ string ](name='BlackList'),
      ccEnabled?: boolean(name='CcEnabled'),
      ccRuleEnabled?: boolean(name='CcRuleEnabled'),
      ccTemplate?: string(name='CcTemplate'),
      certName?: string(name='CertName'),
      cname?: string(name='Cname'),
      customCiphers?: [ string ](name='CustomCiphers'),
      domain?: string(name='Domain'),
      http2Enable?: boolean(name='Http2Enable'),
      http2HttpsEnable?: boolean(name='Http2HttpsEnable'),
      https2HttpEnable?: boolean(name='Https2HttpEnable'),
      ocspEnabled?: boolean(name='OcspEnabled'),
      policyMode?: string(name='PolicyMode'),
      proxyEnabled?: boolean(name='ProxyEnabled'),
      proxyTypes?: [ 
        {
          proxyPorts?: [ string ](name='ProxyPorts'),
          proxyType?: string(name='ProxyType'),
        }
      ](name='ProxyTypes'),
      punishReason?: int32(name='PunishReason'),
      punishStatus?: boolean(name='PunishStatus'),
      realServers?: [ 
        {
          realServer?: string(name='RealServer'),
          rsType?: int32(name='RsType'),
        }
      ](name='RealServers'),
      ssl13Enabled?: boolean(name='Ssl13Enabled'),
      sslCiphers?: string(name='SslCiphers'),
      sslProtocols?: string(name='SslProtocols'),
      whiteList?: [ string ](name='WhiteList'),
    }
  ](name='WebRules'),
}

model DescribeWebRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebRulesResponseBody(name='body'),
}

async function describeWebRules(request: DescribeWebRulesRequest): DescribeWebRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebRules', 'POST', '/', 'json', false, 'json', request);
}

model DescribeWebRulesTfRequest {
  domain?: string(name='Domain', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize: int32(name='PageSize', position='Query'),
  queryDomainPattern?: string(name='QueryDomainPattern', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeWebRulesTfResponseBody = {
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
  webRules?: [ 
    {
      blackList?: [ string ](name='BlackList'),
      ccEnabled?: boolean(name='CcEnabled'),
      ccRuleEnabled?: boolean(name='CcRuleEnabled'),
      ccTemplate?: string(name='CcTemplate'),
      certName?: string(name='CertName'),
      cname?: string(name='Cname'),
      customCiphers?: [ string ](name='CustomCiphers'),
      domain?: string(name='Domain'),
      http2Enable?: boolean(name='Http2Enable'),
      http2HttpsEnable?: boolean(name='Http2HttpsEnable'),
      https2HttpEnable?: boolean(name='Https2HttpEnable'),
      policyMode?: string(name='PolicyMode'),
      proxyEnabled?: boolean(name='ProxyEnabled'),
      proxyTypes?: [ 
        {
          proxyPorts?: [ string ](name='ProxyPorts'),
          proxyType?: string(name='ProxyType'),
        }
      ](name='ProxyTypes'),
      punishReason?: int32(name='PunishReason'),
      punishStatus?: boolean(name='PunishStatus'),
      realServers?: [ 
        {
          realServer?: string(name='RealServer'),
          rsType?: int32(name='RsType'),
        }
      ](name='RealServers'),
      ssl13Enabled?: boolean(name='Ssl13Enabled'),
      sslCiphers?: string(name='SslCiphers'),
      sslProtocols?: string(name='SslProtocols'),
      whiteList?: [ string ](name='WhiteList'),
    }
  ](name='WebRules'),
}

model DescribeWebRulesTfResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebRulesTfResponseBody(name='body'),
}

async function describeWebRulesTf(request: DescribeWebRulesTfRequest): DescribeWebRulesTfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeWebRulesTf', 'POST', '/', 'json', false, 'json', request);
}

model DetachSceneDefenseObjectRequest {
  objectType?: string(name='ObjectType', position='Query'),
  objects: string(name='Objects', position='Query'),
  policyId: string(name='PolicyId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DetachSceneDefenseObjectResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DetachSceneDefenseObjectResponse = {
  headers: map[string]string(name='headers'),
  body: DetachSceneDefenseObjectResponseBody(name='body'),
}

async function detachSceneDefenseObject(request: DetachSceneDefenseObjectRequest): DetachSceneDefenseObjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachSceneDefenseObject', 'POST', '/', 'json', false, 'json', request);
}

model DisableSceneDefensePolicyRequest {
  policyId: string(name='PolicyId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DisableSceneDefensePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableSceneDefensePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSceneDefensePolicyResponseBody(name='body'),
}

async function disableSceneDefensePolicy(request: DisableSceneDefensePolicyRequest): DisableSceneDefensePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableSceneDefensePolicy', 'POST', '/', 'json', false, 'json', request);
}

model DisableWebAccessLogConfigRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DisableWebAccessLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableWebAccessLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DisableWebAccessLogConfigResponseBody(name='body'),
}

async function disableWebAccessLogConfig(request: DisableWebAccessLogConfigRequest): DisableWebAccessLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableWebAccessLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model DisableWebCCRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DisableWebCCResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableWebCCResponse = {
  headers: map[string]string(name='headers'),
  body: DisableWebCCResponseBody(name='body'),
}

async function disableWebCC(request: DisableWebCCRequest): DisableWebCCResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableWebCC', 'POST', '/', 'json', false, 'json', request);
}

model DisableWebCCRuleRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DisableWebCCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableWebCCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DisableWebCCRuleResponseBody(name='body'),
}

async function disableWebCCRule(request: DisableWebCCRuleRequest): DisableWebCCRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableWebCCRule', 'POST', '/', 'json', false, 'json', request);
}

model EmptyAutoCcBlacklistRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model EmptyAutoCcBlacklistResponseBody = {
  requestId?: string(name='RequestId'),
}

model EmptyAutoCcBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: EmptyAutoCcBlacklistResponseBody(name='body'),
}

async function emptyAutoCcBlacklist(request: EmptyAutoCcBlacklistRequest): EmptyAutoCcBlacklistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EmptyAutoCcBlacklist', 'POST', '/', 'json', false, 'json', request);
}

model EmptyAutoCcWhitelistRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model EmptyAutoCcWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model EmptyAutoCcWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: EmptyAutoCcWhitelistResponseBody(name='body'),
}

async function emptyAutoCcWhitelist(request: EmptyAutoCcWhitelistRequest): EmptyAutoCcWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EmptyAutoCcWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model EmptySlsLogstoreRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model EmptySlsLogstoreResponseBody = {
  requestId?: string(name='RequestId'),
}

model EmptySlsLogstoreResponse = {
  headers: map[string]string(name='headers'),
  body: EmptySlsLogstoreResponseBody(name='body'),
}

async function emptySlsLogstore(request: EmptySlsLogstoreRequest): EmptySlsLogstoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EmptySlsLogstore', 'POST', '/', 'json', false, 'json', request);
}

model EnableSceneDefensePolicyRequest {
  policyId: string(name='PolicyId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model EnableSceneDefensePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableSceneDefensePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSceneDefensePolicyResponseBody(name='body'),
}

async function enableSceneDefensePolicy(request: EnableSceneDefensePolicyRequest): EnableSceneDefensePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableSceneDefensePolicy', 'POST', '/', 'json', false, 'json', request);
}

model EnableWebAccessLogConfigRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model EnableWebAccessLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableWebAccessLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: EnableWebAccessLogConfigResponseBody(name='body'),
}

async function enableWebAccessLogConfig(request: EnableWebAccessLogConfigRequest): EnableWebAccessLogConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableWebAccessLogConfig', 'POST', '/', 'json', false, 'json', request);
}

model EnableWebCCRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model EnableWebCCResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableWebCCResponse = {
  headers: map[string]string(name='headers'),
  body: EnableWebCCResponseBody(name='body'),
}

async function enableWebCC(request: EnableWebCCRequest): EnableWebCCResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableWebCC', 'POST', '/', 'json', false, 'json', request);
}

model EnableWebCCRuleRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model EnableWebCCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableWebCCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: EnableWebCCRuleResponseBody(name='body'),
}

async function enableWebCCRule(request: EnableWebCCRuleRequest): EnableWebCCRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableWebCCRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBlackholeStatusRequest {
  blackholeStatus: string(name='BlackholeStatus', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ModifyBlackholeStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBlackholeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBlackholeStatusResponseBody(name='body'),
}

async function modifyBlackholeStatus(request: ModifyBlackholeStatusRequest): ModifyBlackholeStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBlackholeStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBlockStatusRequest {
  duration?: int32(name='Duration', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  lines: [ string ](name='Lines', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  status: string(name='Status', position='Query'),
}

model ModifyBlockStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBlockStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBlockStatusResponseBody(name='body'),
}

async function modifyBlockStatus(request: ModifyBlockStatusRequest): ModifyBlockStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBlockStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCnameReuseRequest {
  cname?: string(name='Cname', position='Query'),
  domain: string(name='Domain', position='Query'),
  enable: int32(name='Enable', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyCnameReuseResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCnameReuseResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCnameReuseResponseBody(name='body'),
}

async function modifyCnameReuse(request: ModifyCnameReuseRequest): ModifyCnameReuseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCnameReuse', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDomainResourceRequest {
  domain: string(name='Domain', position='Query'),
  httpsExt?: string(name='HttpsExt', position='Query'),
  instanceIds: [ string ](name='InstanceIds', position='Query'),
  proxyTypes: [ 
    {
      proxyPorts: [ int32 ](name='ProxyPorts'),
      proxyType?: string(name='ProxyType'),
    }
  ](name='ProxyTypes', position='Query'),
  realServers: [ string ](name='RealServers', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  rsType: int32(name='RsType', position='Query'),
}

model ModifyDomainResourceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDomainResourceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDomainResourceResponseBody(name='body'),
}

async function modifyDomainResource(request: ModifyDomainResourceRequest): ModifyDomainResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDomainResource', 'POST', '/', 'json', false, 'json', request);
}

model ModifyElasticBandWidthRequest {
  elasticBandwidth: int32(name='ElasticBandwidth', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ModifyElasticBandWidthResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyElasticBandWidthResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyElasticBandWidthResponseBody(name='body'),
}

async function modifyElasticBandWidth(request: ModifyElasticBandWidthRequest): ModifyElasticBandWidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyElasticBandWidth', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFullLogTtlRequest {
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  ttl: int32(name='Ttl', position='Query'),
}

model ModifyFullLogTtlResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyFullLogTtlResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFullLogTtlResponseBody(name='body'),
}

async function modifyFullLogTtl(request: ModifyFullLogTtlRequest): ModifyFullLogTtlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFullLogTtl', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHealthCheckConfigRequest {
  forwardProtocol: string(name='ForwardProtocol', position='Query'),
  frontendPort: int32(name='FrontendPort', position='Query'),
  healthCheck: string(name='HealthCheck', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ModifyHealthCheckConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHealthCheckConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHealthCheckConfigResponseBody(name='body'),
}

async function modifyHealthCheckConfig(request: ModifyHealthCheckConfigRequest): ModifyHealthCheckConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHealthCheckConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyHttp2EnableRequest {
  domain: string(name='Domain', position='Query'),
  enable: int32(name='Enable', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyHttp2EnableResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHttp2EnableResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHttp2EnableResponseBody(name='body'),
}

async function modifyHttp2Enable(request: ModifyHttp2EnableRequest): ModifyHttp2EnableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyHttp2Enable', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceRemarkRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  remark: string(name='Remark', position='Query'),
}

model ModifyInstanceRemarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceRemarkResponseBody(name='body'),
}

async function modifyInstanceRemark(request: ModifyInstanceRemarkRequest): ModifyInstanceRemarkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceRemark', 'POST', '/', 'json', false, 'json', request);
}

model ModifyNetworkRuleAttributeRequest {
  config: string(name='Config', position='Query'),
  forwardProtocol: string(name='ForwardProtocol', position='Query'),
  frontendPort: int32(name='FrontendPort', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ModifyNetworkRuleAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyNetworkRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNetworkRuleAttributeResponseBody(name='body'),
}

async function modifyNetworkRuleAttribute(request: ModifyNetworkRuleAttributeRequest): ModifyNetworkRuleAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyNetworkRuleAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPortRequest {
  backendPort: string(name='BackendPort', position='Query'),
  frontendPort: string(name='FrontendPort', position='Query'),
  frontendProtocol: string(name='FrontendProtocol', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  realServers: [ string ](name='RealServers', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ModifyPortResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyPortResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPortResponseBody(name='body'),
}

async function modifyPort(request: ModifyPortRequest): ModifyPortResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPort', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPortAutoCcStatusRequest {
  instanceId: string(name='InstanceId', position='Query'),
  mode: string(name='Mode', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  switch: string(name='Switch', position='Query'),
}

model ModifyPortAutoCcStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyPortAutoCcStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPortAutoCcStatusResponseBody(name='body'),
}

async function modifyPortAutoCcStatus(request: ModifyPortAutoCcStatusRequest): ModifyPortAutoCcStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPortAutoCcStatus', 'POST', '/', 'json', false, 'json', request);
}

model ModifySceneDefensePolicyRequest {
  endTime: long(name='EndTime', position='Query'),
  name: string(name='Name', position='Query'),
  policyId: string(name='PolicyId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  startTime: long(name='StartTime', position='Query'),
  template: string(name='Template', position='Query'),
}

model ModifySceneDefensePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifySceneDefensePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySceneDefensePolicyResponseBody(name='body'),
}

async function modifySceneDefensePolicy(request: ModifySceneDefensePolicyRequest): ModifySceneDefensePolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySceneDefensePolicy', 'POST', '/', 'json', false, 'json', request);
}

model ModifySchedulerRuleRequest {
  param?: string(name='Param', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  ruleName: string(name='RuleName', position='Query'),
  ruleType: int32(name='RuleType', position='Query'),
  rules: string(name='Rules', position='Query'),
}

model ModifySchedulerRuleResponseBody = {
  cname?: string(name='Cname'),
  requestId?: string(name='RequestId'),
  ruleName?: string(name='RuleName'),
}

model ModifySchedulerRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySchedulerRuleResponseBody(name='body'),
}

async function modifySchedulerRule(request: ModifySchedulerRuleRequest): ModifySchedulerRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySchedulerRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTlsConfigRequest {
  config: string(name='Config', position='Query'),
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyTlsConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyTlsConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTlsConfigResponseBody(name='body'),
}

async function modifyTlsConfig(request: ModifyTlsConfigRequest): ModifyTlsConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTlsConfig', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebAIProtectModeRequest {
  config: string(name='Config', position='Query'),
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyWebAIProtectModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebAIProtectModeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebAIProtectModeResponseBody(name='body'),
}

async function modifyWebAIProtectMode(request: ModifyWebAIProtectModeRequest): ModifyWebAIProtectModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebAIProtectMode', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebAIProtectSwitchRequest {
  config: string(name='Config', position='Query'),
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyWebAIProtectSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebAIProtectSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebAIProtectSwitchResponseBody(name='body'),
}

async function modifyWebAIProtectSwitch(request: ModifyWebAIProtectSwitchRequest): ModifyWebAIProtectSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebAIProtectSwitch', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebAccessModeRequest {
  accessMode: int32(name='AccessMode', position='Query'),
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ModifyWebAccessModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebAccessModeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebAccessModeResponseBody(name='body'),
}

async function modifyWebAccessMode(request: ModifyWebAccessModeRequest): ModifyWebAccessModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebAccessMode', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebAreaBlockRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  regions?: [ string ](name='Regions', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyWebAreaBlockResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebAreaBlockResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebAreaBlockResponseBody(name='body'),
}

async function modifyWebAreaBlock(request: ModifyWebAreaBlockRequest): ModifyWebAreaBlockResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebAreaBlock', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebAreaBlockSwitchRequest {
  config: string(name='Config', position='Query'),
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyWebAreaBlockSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebAreaBlockSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebAreaBlockSwitchResponseBody(name='body'),
}

async function modifyWebAreaBlockSwitch(request: ModifyWebAreaBlockSwitchRequest): ModifyWebAreaBlockSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebAreaBlockSwitch', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebCCRuleRequest {
  act: string(name='Act', position='Query'),
  count: int32(name='Count', position='Query'),
  domain: string(name='Domain', position='Query'),
  interval: int32(name='Interval', position='Query'),
  mode: string(name='Mode', position='Query'),
  name: string(name='Name', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  ttl: int32(name='Ttl', position='Query'),
  uri: string(name='Uri', position='Query'),
}

model ModifyWebCCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebCCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebCCRuleResponseBody(name='body'),
}

async function modifyWebCCRule(request: ModifyWebCCRuleRequest): ModifyWebCCRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebCCRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebCacheCustomRuleRequest {
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  rules: string(name='Rules', position='Query'),
}

model ModifyWebCacheCustomRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebCacheCustomRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebCacheCustomRuleResponseBody(name='body'),
}

async function modifyWebCacheCustomRule(request: ModifyWebCacheCustomRuleRequest): ModifyWebCacheCustomRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebCacheCustomRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebCacheModeRequest {
  domain: string(name='Domain', position='Query'),
  mode: string(name='Mode', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyWebCacheModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebCacheModeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebCacheModeResponseBody(name='body'),
}

async function modifyWebCacheMode(request: ModifyWebCacheModeRequest): ModifyWebCacheModeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebCacheMode', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebCacheSwitchRequest {
  domain: string(name='Domain', position='Query'),
  enable: int32(name='Enable', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyWebCacheSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebCacheSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebCacheSwitchResponseBody(name='body'),
}

async function modifyWebCacheSwitch(request: ModifyWebCacheSwitchRequest): ModifyWebCacheSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebCacheSwitch', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebIpSetSwitchRequest {
  config: string(name='Config', position='Query'),
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyWebIpSetSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebIpSetSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebIpSetSwitchResponseBody(name='body'),
}

async function modifyWebIpSetSwitch(request: ModifyWebIpSetSwitchRequest): ModifyWebIpSetSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebIpSetSwitch', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebPreciseAccessRuleRequest {
  domain: string(name='Domain', position='Query'),
  expires?: int32(name='Expires', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  rules: string(name='Rules', position='Query'),
}

model ModifyWebPreciseAccessRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebPreciseAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebPreciseAccessRuleResponseBody(name='body'),
}

async function modifyWebPreciseAccessRule(request: ModifyWebPreciseAccessRuleRequest): ModifyWebPreciseAccessRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebPreciseAccessRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebPreciseAccessSwitchRequest {
  config: string(name='Config', position='Query'),
  domain: string(name='Domain', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model ModifyWebPreciseAccessSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebPreciseAccessSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebPreciseAccessSwitchResponseBody(name='body'),
}

async function modifyWebPreciseAccessSwitch(request: ModifyWebPreciseAccessSwitchRequest): ModifyWebPreciseAccessSwitchResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebPreciseAccessSwitch', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebRuleRequest {
  domain: string(name='Domain', position='Query'),
  httpsExt?: string(name='HttpsExt', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  proxyTypes: string(name='ProxyTypes', position='Query'),
  realServers: [ string ](name='RealServers', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  rsType: int32(name='RsType', position='Query'),
}

model ModifyWebRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebRuleResponseBody(name='body'),
}

async function modifyWebRule(request: ModifyWebRuleRequest): ModifyWebRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebRule', 'POST', '/', 'json', false, 'json', request);
}

model ModifyWebRuleTfRequest {
  domain: string(name='Domain', position='Query'),
  httpsExt?: string(name='HttpsExt', position='Query'),
  instanceIds?: [ string ](name='InstanceIds', position='Query'),
  proxyTypes: string(name='ProxyTypes', position='Query'),
  realServers: [ string ](name='RealServers', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  rsType: int32(name='RsType', position='Query'),
}

model ModifyWebRuleTfResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebRuleTfResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebRuleTfResponseBody(name='body'),
}

async function modifyWebRuleTf(request: ModifyWebRuleTfRequest): ModifyWebRuleTfResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyWebRuleTf', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model ReleaseInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model SwitchSchedulerRuleRequest {
  ruleName: string(name='RuleName', position='Query'),
  ruleType: int32(name='RuleType', position='Query'),
  switchData: string(name='SwitchData', position='Query'),
}

model SwitchSchedulerRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchSchedulerRuleResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchSchedulerRuleResponseBody(name='body'),
}

async function switchSchedulerRule(request: SwitchSchedulerRuleRequest): SwitchSchedulerRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SwitchSchedulerRule', 'POST', '/', 'json', false, 'json', request);
}

