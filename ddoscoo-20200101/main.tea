/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  

  checkConfig(config);
  @endpoint = getEndpoint('ddoscoo', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddAutoCcBlacklistRequest {
  instanceId?: string(name='InstanceId'),
  blacklist?: string(name='Blacklist'),
  expireTime?: int32(name='ExpireTime'),
}

model AddAutoCcBlacklistResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddAutoCcBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: AddAutoCcBlacklistResponseBody(name='body'),
}

async function addAutoCcBlacklistWithOptions(request: AddAutoCcBlacklistRequest, runtime: Util.RuntimeOptions): AddAutoCcBlacklistResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  query["Blacklist"] = request.blacklist;
  query["ExpireTime"] = request.expireTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddAutoCcBlacklist',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addAutoCcBlacklist(request: AddAutoCcBlacklistRequest): AddAutoCcBlacklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAutoCcBlacklistWithOptions(request, runtime);
}

model AddAutoCcWhitelistRequest {
  instanceId?: string(name='InstanceId'),
  whitelist?: string(name='Whitelist'),
  expireTime?: int32(name='ExpireTime'),
}

model AddAutoCcWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddAutoCcWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: AddAutoCcWhitelistResponseBody(name='body'),
}

async function addAutoCcWhitelistWithOptions(request: AddAutoCcWhitelistRequest, runtime: Util.RuntimeOptions): AddAutoCcWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  query["Whitelist"] = request.whitelist;
  query["ExpireTime"] = request.expireTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AddAutoCcWhitelist',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addAutoCcWhitelist(request: AddAutoCcWhitelistRequest): AddAutoCcWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAutoCcWhitelistWithOptions(request, runtime);
}

model AssociateWebCertRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  certId?: int32(name='CertId'),
  certName?: string(name='CertName'),
  cert?: string(name='Cert'),
  key?: string(name='Key'),
}

model AssociateWebCertResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateWebCertResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateWebCertResponseBody(name='body'),
}

async function associateWebCertWithOptions(request: AssociateWebCertRequest, runtime: Util.RuntimeOptions): AssociateWebCertResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["CertId"] = request.certId;
  query["CertName"] = request.certName;
  query["Cert"] = request.cert;
  query["Key"] = request.key;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AssociateWebCert',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateWebCert(request: AssociateWebCertRequest): AssociateWebCertResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateWebCertWithOptions(request, runtime);
}

model AttachSceneDefenseObjectRequest {
  policyId?: string(name='PolicyId'),
  objectType?: string(name='ObjectType'),
  objects?: string(name='Objects'),
}

model AttachSceneDefenseObjectResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AttachSceneDefenseObjectResponse = {
  headers: map[string]string(name='headers'),
  body: AttachSceneDefenseObjectResponseBody(name='body'),
}

async function attachSceneDefenseObjectWithOptions(request: AttachSceneDefenseObjectRequest, runtime: Util.RuntimeOptions): AttachSceneDefenseObjectResponse {
  Util.validateModel(request);
  var query = {};
  query["PolicyId"] = request.policyId;
  query["ObjectType"] = request.objectType;
  query["Objects"] = request.objects;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'AttachSceneDefenseObject',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachSceneDefenseObject(request: AttachSceneDefenseObjectRequest): AttachSceneDefenseObjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachSceneDefenseObjectWithOptions(request, runtime);
}

model ConfigL7RsPolicyRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  policy?: string(name='Policy'),
}

model ConfigL7RsPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigL7RsPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigL7RsPolicyResponseBody(name='body'),
}

async function configL7RsPolicyWithOptions(request: ConfigL7RsPolicyRequest, runtime: Util.RuntimeOptions): ConfigL7RsPolicyResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Policy"] = request.policy;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ConfigL7RsPolicy',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configL7RsPolicy(request: ConfigL7RsPolicyRequest): ConfigL7RsPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return configL7RsPolicyWithOptions(request, runtime);
}

model ConfigNetworkRegionBlockRequest {
  instanceId?: string(name='InstanceId'),
  config?: string(name='Config'),
}

model ConfigNetworkRegionBlockResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigNetworkRegionBlockResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigNetworkRegionBlockResponseBody(name='body'),
}

async function configNetworkRegionBlockWithOptions(request: ConfigNetworkRegionBlockRequest, runtime: Util.RuntimeOptions): ConfigNetworkRegionBlockResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  query["Config"] = request.config;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ConfigNetworkRegionBlock',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configNetworkRegionBlock(request: ConfigNetworkRegionBlockRequest): ConfigNetworkRegionBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  return configNetworkRegionBlockWithOptions(request, runtime);
}

model ConfigNetworkRulesRequest {
  networkRules?: string(name='NetworkRules'),
}

model ConfigNetworkRulesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigNetworkRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigNetworkRulesResponseBody(name='body'),
}

async function configNetworkRulesWithOptions(request: ConfigNetworkRulesRequest, runtime: Util.RuntimeOptions): ConfigNetworkRulesResponse {
  Util.validateModel(request);
  var query = {};
  query["NetworkRules"] = request.networkRules;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ConfigNetworkRules',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configNetworkRules(request: ConfigNetworkRulesRequest): ConfigNetworkRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return configNetworkRulesWithOptions(request, runtime);
}

model ConfigWebCCTemplateRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  template?: string(name='Template'),
}

model ConfigWebCCTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigWebCCTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigWebCCTemplateResponseBody(name='body'),
}

async function configWebCCTemplateWithOptions(request: ConfigWebCCTemplateRequest, runtime: Util.RuntimeOptions): ConfigWebCCTemplateResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Template"] = request.template;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ConfigWebCCTemplate',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configWebCCTemplate(request: ConfigWebCCTemplateRequest): ConfigWebCCTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return configWebCCTemplateWithOptions(request, runtime);
}

model ConfigWebIpSetRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  blackList?: [ string ](name='BlackList'),
  whiteList?: [ string ](name='WhiteList'),
}

model ConfigWebIpSetResponseBody = {
  requestId?: string(name='RequestId'),
}

model ConfigWebIpSetResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigWebIpSetResponseBody(name='body'),
}

async function configWebIpSetWithOptions(request: ConfigWebIpSetRequest, runtime: Util.RuntimeOptions): ConfigWebIpSetResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["BlackList"] = request.blackList;
  query["WhiteList"] = request.whiteList;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ConfigWebIpSet',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function configWebIpSet(request: ConfigWebIpSetRequest): ConfigWebIpSetResponse {
  var runtime = new Util.RuntimeOptions{};
  return configWebIpSetWithOptions(request, runtime);
}

model CreateAsyncTaskRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  taskType?: int32(name='TaskType'),
  taskParams?: string(name='TaskParams'),
}

model CreateAsyncTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAsyncTaskResponseBody(name='body'),
}

async function createAsyncTaskWithOptions(request: CreateAsyncTaskRequest, runtime: Util.RuntimeOptions): CreateAsyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["TaskType"] = request.taskType;
  query["TaskParams"] = request.taskParams;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateAsyncTask',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAsyncTask(request: CreateAsyncTaskRequest): CreateAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAsyncTaskWithOptions(request, runtime);
}

model CreateNetworkRulesRequest {
  networkRules?: string(name='NetworkRules'),
}

model CreateNetworkRulesResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateNetworkRulesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateNetworkRulesResponseBody(name='body'),
}

async function createNetworkRulesWithOptions(request: CreateNetworkRulesRequest, runtime: Util.RuntimeOptions): CreateNetworkRulesResponse {
  Util.validateModel(request);
  var query = {};
  query["NetworkRules"] = request.networkRules;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateNetworkRules',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createNetworkRules(request: CreateNetworkRulesRequest): CreateNetworkRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createNetworkRulesWithOptions(request, runtime);
}

model CreateSceneDefensePolicyRequest {
  name?: string(name='Name'),
  template?: string(name='Template'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model CreateSceneDefensePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSceneDefensePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSceneDefensePolicyResponseBody(name='body'),
}

async function createSceneDefensePolicyWithOptions(request: CreateSceneDefensePolicyRequest, runtime: Util.RuntimeOptions): CreateSceneDefensePolicyResponse {
  Util.validateModel(request);
  var query = {};
  query["Name"] = request.name;
  query["Template"] = request.template;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateSceneDefensePolicy',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSceneDefensePolicy(request: CreateSceneDefensePolicyRequest): CreateSceneDefensePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSceneDefensePolicyWithOptions(request, runtime);
}

model CreateSchedulerRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  rules?: string(name='Rules'),
  ruleName?: string(name='RuleName'),
  ruleType?: int32(name='RuleType'),
  param?: string(name='Param'),
}

model CreateSchedulerRuleResponseBody = {
  requestId?: string(name='RequestId'),
  cname?: string(name='Cname'),
  ruleName?: string(name='RuleName'),
}

model CreateSchedulerRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSchedulerRuleResponseBody(name='body'),
}

async function createSchedulerRuleWithOptions(request: CreateSchedulerRuleRequest, runtime: Util.RuntimeOptions): CreateSchedulerRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Rules"] = request.rules;
  query["RuleName"] = request.ruleName;
  query["RuleType"] = request.ruleType;
  query["Param"] = request.param;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateSchedulerRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSchedulerRule(request: CreateSchedulerRuleRequest): CreateSchedulerRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSchedulerRuleWithOptions(request, runtime);
}

model CreateTagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceType?: string(name='ResourceType'),
  resourceIds?: [ string ](name='ResourceIds'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model CreateTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTagResourcesResponseBody(name='body'),
}

async function createTagResourcesWithOptions(request: CreateTagResourcesRequest, runtime: Util.RuntimeOptions): CreateTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  query["RegionId"] = request.regionId;
  query["ResourceGroupId"] = request.resourceGroupId;
  query["ResourceType"] = request.resourceType;
  query["ResourceIds"] = request.resourceIds;
  query["Tags"] = request.tags;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateTagResources',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTagResources(request: CreateTagResourcesRequest): CreateTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTagResourcesWithOptions(request, runtime);
}

model CreateWebCCRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  name?: string(name='Name'),
  act?: string(name='Act'),
  count?: int32(name='Count'),
  interval?: int32(name='Interval'),
  mode?: string(name='Mode'),
  ttl?: int32(name='Ttl'),
  uri?: string(name='Uri'),
}

model CreateWebCCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateWebCCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWebCCRuleResponseBody(name='body'),
}

async function createWebCCRuleWithOptions(request: CreateWebCCRuleRequest, runtime: Util.RuntimeOptions): CreateWebCCRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Name"] = request.name;
  query["Act"] = request.act;
  query["Count"] = request.count;
  query["Interval"] = request.interval;
  query["Mode"] = request.mode;
  query["Ttl"] = request.ttl;
  query["Uri"] = request.uri;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateWebCCRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWebCCRule(request: CreateWebCCRuleRequest): CreateWebCCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWebCCRuleWithOptions(request, runtime);
}

model CreateWebRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  rsType?: int32(name='RsType'),
  rules?: string(name='Rules'),
  httpsExt?: string(name='HttpsExt'),
  defenseId?: string(name='DefenseId'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model CreateWebRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateWebRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWebRuleResponseBody(name='body'),
}

async function createWebRuleWithOptions(request: CreateWebRuleRequest, runtime: Util.RuntimeOptions): CreateWebRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["RsType"] = request.rsType;
  query["Rules"] = request.rules;
  query["HttpsExt"] = request.httpsExt;
  query["DefenseId"] = request.defenseId;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateWebRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createWebRule(request: CreateWebRuleRequest): CreateWebRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWebRuleWithOptions(request, runtime);
}

model DeleteAsyncTaskRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  taskId?: int32(name='TaskId'),
}

model DeleteAsyncTaskResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAsyncTaskResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAsyncTaskResponseBody(name='body'),
}

async function deleteAsyncTaskWithOptions(request: DeleteAsyncTaskRequest, runtime: Util.RuntimeOptions): DeleteAsyncTaskResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["TaskId"] = request.taskId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAsyncTask',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAsyncTask(request: DeleteAsyncTaskRequest): DeleteAsyncTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAsyncTaskWithOptions(request, runtime);
}

model DeleteAutoCcBlacklistRequest {
  instanceId?: string(name='InstanceId'),
  blacklist?: string(name='Blacklist'),
}

model DeleteAutoCcBlacklistResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAutoCcBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAutoCcBlacklistResponseBody(name='body'),
}

async function deleteAutoCcBlacklistWithOptions(request: DeleteAutoCcBlacklistRequest, runtime: Util.RuntimeOptions): DeleteAutoCcBlacklistResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  query["Blacklist"] = request.blacklist;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAutoCcBlacklist',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAutoCcBlacklist(request: DeleteAutoCcBlacklistRequest): DeleteAutoCcBlacklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoCcBlacklistWithOptions(request, runtime);
}

model DeleteAutoCcWhitelistRequest {
  instanceId?: string(name='InstanceId'),
  whitelist?: string(name='Whitelist'),
}

model DeleteAutoCcWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAutoCcWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAutoCcWhitelistResponseBody(name='body'),
}

async function deleteAutoCcWhitelistWithOptions(request: DeleteAutoCcWhitelistRequest, runtime: Util.RuntimeOptions): DeleteAutoCcWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  query["Whitelist"] = request.whitelist;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAutoCcWhitelist',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAutoCcWhitelist(request: DeleteAutoCcWhitelistRequest): DeleteAutoCcWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAutoCcWhitelistWithOptions(request, runtime);
}

model DeleteNetworkRuleRequest {
  networkRule?: string(name='NetworkRule'),
}

model DeleteNetworkRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNetworkRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNetworkRuleResponseBody(name='body'),
}

async function deleteNetworkRuleWithOptions(request: DeleteNetworkRuleRequest, runtime: Util.RuntimeOptions): DeleteNetworkRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["NetworkRule"] = request.networkRule;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteNetworkRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteNetworkRule(request: DeleteNetworkRuleRequest): DeleteNetworkRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNetworkRuleWithOptions(request, runtime);
}

model DeleteSceneDefensePolicyRequest {
  policyId?: string(name='PolicyId'),
}

model DeleteSceneDefensePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteSceneDefensePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSceneDefensePolicyResponseBody(name='body'),
}

async function deleteSceneDefensePolicyWithOptions(request: DeleteSceneDefensePolicyRequest, runtime: Util.RuntimeOptions): DeleteSceneDefensePolicyResponse {
  Util.validateModel(request);
  var query = {};
  query["PolicyId"] = request.policyId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSceneDefensePolicy',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSceneDefensePolicy(request: DeleteSceneDefensePolicyRequest): DeleteSceneDefensePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSceneDefensePolicyWithOptions(request, runtime);
}

model DeleteSchedulerRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  ruleName?: string(name='RuleName'),
}

model DeleteSchedulerRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSchedulerRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSchedulerRuleResponseBody(name='body'),
}

async function deleteSchedulerRuleWithOptions(request: DeleteSchedulerRuleRequest, runtime: Util.RuntimeOptions): DeleteSchedulerRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["RuleName"] = request.ruleName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSchedulerRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSchedulerRule(request: DeleteSchedulerRuleRequest): DeleteSchedulerRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSchedulerRuleWithOptions(request, runtime);
}

model DeleteTagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceIds?: [ string ](name='ResourceIds'),
  tagKey?: [ string ](name='TagKey'),
}

model DeleteTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTagResourcesResponseBody(name='body'),
}

async function deleteTagResourcesWithOptions(request: DeleteTagResourcesRequest, runtime: Util.RuntimeOptions): DeleteTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  query["RegionId"] = request.regionId;
  query["ResourceGroupId"] = request.resourceGroupId;
  query["ResourceType"] = request.resourceType;
  query["All"] = request.all;
  query["ResourceIds"] = request.resourceIds;
  query["TagKey"] = request.tagKey;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTagResources',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTagResources(request: DeleteTagResourcesRequest): DeleteTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTagResourcesWithOptions(request, runtime);
}

model DeleteWebCacheCustomRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  ruleNames?: [ string ](name='RuleNames'),
}

model DeleteWebCacheCustomRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWebCacheCustomRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWebCacheCustomRuleResponseBody(name='body'),
}

async function deleteWebCacheCustomRuleWithOptions(request: DeleteWebCacheCustomRuleRequest, runtime: Util.RuntimeOptions): DeleteWebCacheCustomRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["RuleNames"] = request.ruleNames;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWebCacheCustomRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWebCacheCustomRule(request: DeleteWebCacheCustomRuleRequest): DeleteWebCacheCustomRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWebCacheCustomRuleWithOptions(request, runtime);
}

model DeleteWebCCRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  name?: string(name='Name'),
}

model DeleteWebCCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWebCCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWebCCRuleResponseBody(name='body'),
}

async function deleteWebCCRuleWithOptions(request: DeleteWebCCRuleRequest, runtime: Util.RuntimeOptions): DeleteWebCCRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Name"] = request.name;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWebCCRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWebCCRule(request: DeleteWebCCRuleRequest): DeleteWebCCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWebCCRuleWithOptions(request, runtime);
}

model DeleteWebPreciseAccessRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  ruleNames?: [ string ](name='RuleNames'),
}

model DeleteWebPreciseAccessRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWebPreciseAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWebPreciseAccessRuleResponseBody(name='body'),
}

async function deleteWebPreciseAccessRuleWithOptions(request: DeleteWebPreciseAccessRuleRequest, runtime: Util.RuntimeOptions): DeleteWebPreciseAccessRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["RuleNames"] = request.ruleNames;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWebPreciseAccessRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWebPreciseAccessRule(request: DeleteWebPreciseAccessRuleRequest): DeleteWebPreciseAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWebPreciseAccessRuleWithOptions(request, runtime);
}

model DeleteWebRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
}

model DeleteWebRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWebRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWebRuleResponseBody(name='body'),
}

async function deleteWebRuleWithOptions(request: DeleteWebRuleRequest, runtime: Util.RuntimeOptions): DeleteWebRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteWebRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteWebRule(request: DeleteWebRuleRequest): DeleteWebRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWebRuleWithOptions(request, runtime);
}

model DescribeAsyncTasksRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAsyncTasksResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  asyncTasks?: [ 
    {
      endTime?: long(name='EndTime'),
      taskType?: int32(name='TaskType'),
      startTime?: long(name='StartTime'),
      taskParams?: string(name='TaskParams'),
      taskStatus?: int32(name='TaskStatus'),
      taskResult?: string(name='TaskResult'),
      taskId?: long(name='TaskId'),
    }
  ](name='AsyncTasks'),
}

model DescribeAsyncTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAsyncTasksResponseBody(name='body'),
}

async function describeAsyncTasksWithOptions(request: DescribeAsyncTasksRequest, runtime: Util.RuntimeOptions): DescribeAsyncTasksResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAsyncTasks',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAsyncTasks(request: DescribeAsyncTasksRequest): DescribeAsyncTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAsyncTasksWithOptions(request, runtime);
}

model DescribeAutoCcBlacklistRequest {
  instanceId?: string(name='InstanceId'),
  keyWord?: string(name='KeyWord'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAutoCcBlacklistResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  autoCcBlacklist?: [ 
    {
      type?: string(name='Type'),
      endTime?: long(name='EndTime'),
      sourceIp?: string(name='SourceIp'),
      destIp?: string(name='DestIp'),
    }
  ](name='AutoCcBlacklist'),
}

model DescribeAutoCcBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoCcBlacklistResponseBody(name='body'),
}

async function describeAutoCcBlacklistWithOptions(request: DescribeAutoCcBlacklistRequest, runtime: Util.RuntimeOptions): DescribeAutoCcBlacklistResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  query["KeyWord"] = request.keyWord;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoCcBlacklist',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoCcBlacklist(request: DescribeAutoCcBlacklistRequest): DescribeAutoCcBlacklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoCcBlacklistWithOptions(request, runtime);
}

model DescribeAutoCcListCountRequest {
  instanceId?: string(name='InstanceId'),
  queryType?: string(name='QueryType'),
}

model DescribeAutoCcListCountResponseBody = {
  blackCount?: int32(name='BlackCount'),
  requestId?: string(name='RequestId'),
  whiteCount?: int32(name='WhiteCount'),
}

model DescribeAutoCcListCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoCcListCountResponseBody(name='body'),
}

async function describeAutoCcListCountWithOptions(request: DescribeAutoCcListCountRequest, runtime: Util.RuntimeOptions): DescribeAutoCcListCountResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  query["QueryType"] = request.queryType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoCcListCount',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoCcListCount(request: DescribeAutoCcListCountRequest): DescribeAutoCcListCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoCcListCountWithOptions(request, runtime);
}

model DescribeAutoCcWhitelistRequest {
  instanceId?: string(name='InstanceId'),
  keyWord?: string(name='KeyWord'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAutoCcWhitelistResponseBody = {
  autoCcWhitelist?: [ 
    {
      type?: string(name='Type'),
      endTime?: long(name='EndTime'),
      sourceIp?: string(name='SourceIp'),
      destIp?: string(name='DestIp'),
    }
  ](name='AutoCcWhitelist'),
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
}

model DescribeAutoCcWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoCcWhitelistResponseBody(name='body'),
}

async function describeAutoCcWhitelistWithOptions(request: DescribeAutoCcWhitelistRequest, runtime: Util.RuntimeOptions): DescribeAutoCcWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  query["KeyWord"] = request.keyWord;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAutoCcWhitelist',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAutoCcWhitelist(request: DescribeAutoCcWhitelistRequest): DescribeAutoCcWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAutoCcWhitelistWithOptions(request, runtime);
}

model DescribeBackSourceCidrRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  line?: string(name='Line'),
}

model DescribeBackSourceCidrResponseBody = {
  requestId?: string(name='RequestId'),
  cidrs?: [ string ](name='Cidrs'),
}

model DescribeBackSourceCidrResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackSourceCidrResponseBody(name='body'),
}

async function describeBackSourceCidrWithOptions(request: DescribeBackSourceCidrRequest, runtime: Util.RuntimeOptions): DescribeBackSourceCidrResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Line"] = request.line;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBackSourceCidr',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBackSourceCidr(request: DescribeBackSourceCidrRequest): DescribeBackSourceCidrResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackSourceCidrWithOptions(request, runtime);
}

model DescribeBlackholeStatusRequest {
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribeBlackholeStatusResponseBody = {
  requestId?: string(name='RequestId'),
  blackholeStatus?: [ 
    {
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      ip?: string(name='Ip'),
      blackStatus?: string(name='BlackStatus'),
    }
  ](name='BlackholeStatus'),
}

model DescribeBlackholeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBlackholeStatusResponseBody(name='body'),
}

async function describeBlackholeStatusWithOptions(request: DescribeBlackholeStatusRequest, runtime: Util.RuntimeOptions): DescribeBlackholeStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBlackholeStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBlackholeStatus(request: DescribeBlackholeStatusRequest): DescribeBlackholeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBlackholeStatusWithOptions(request, runtime);
}

model DescribeBlockStatusRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribeBlockStatusResponseBody = {
  requestId?: string(name='RequestId'),
  statusList?: [ 
    {
      ip?: string(name='Ip'),
      blockStatusList?: [ 
        {
          endTime?: long(name='EndTime'),
          startTime?: long(name='StartTime'),
          line?: string(name='Line'),
          blockStatus?: string(name='BlockStatus'),
        }
      ](name='BlockStatusList'),
    }
  ](name='StatusList'),
}

model DescribeBlockStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBlockStatusResponseBody(name='body'),
}

async function describeBlockStatusWithOptions(request: DescribeBlockStatusRequest, runtime: Util.RuntimeOptions): DescribeBlockStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBlockStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBlockStatus(request: DescribeBlockStatusRequest): DescribeBlockStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBlockStatusWithOptions(request, runtime);
}

model DescribeCertsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
}

model DescribeCertsResponseBody = {
  certs?: [ 
    {
      endDate?: string(name='EndDate'),
      domainRelated?: boolean(name='DomainRelated'),
      startDate?: string(name='StartDate'),
      issuer?: string(name='Issuer'),
      name?: string(name='Name'),
      common?: string(name='Common'),
      id?: int32(name='Id'),
    }
  ](name='Certs'),
  requestId?: string(name='RequestId'),
}

model DescribeCertsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCertsResponseBody(name='body'),
}

async function describeCertsWithOptions(request: DescribeCertsRequest, runtime: Util.RuntimeOptions): DescribeCertsResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCerts',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCerts(request: DescribeCertsRequest): DescribeCertsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCertsWithOptions(request, runtime);
}

model DescribeCnameReusesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domains?: [ string ](name='Domains'),
}

model DescribeCnameReusesResponseBody = {
  requestId?: string(name='RequestId'),
  cnameReuses?: [ 
    {
      domain?: string(name='Domain'),
      cname?: string(name='Cname'),
      enable?: int32(name='Enable'),
    }
  ](name='CnameReuses'),
}

model DescribeCnameReusesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCnameReusesResponseBody(name='body'),
}

async function describeCnameReusesWithOptions(request: DescribeCnameReusesRequest, runtime: Util.RuntimeOptions): DescribeCnameReusesResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domains"] = request.domains;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCnameReuses',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCnameReuses(request: DescribeCnameReusesRequest): DescribeCnameReusesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCnameReusesWithOptions(request, runtime);
}

model DescribeDDosAllEventListRequest {
  eventType?: string(name='EventType'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDDosAllEventListResponseBody = {
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
  attackEvents?: [ 
    {
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      eventType?: string(name='EventType'),
      mbps?: long(name='Mbps'),
      ip?: string(name='Ip'),
      port?: string(name='Port'),
      pps?: long(name='Pps'),
    }
  ](name='AttackEvents'),
}

model DescribeDDosAllEventListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDosAllEventListResponseBody(name='body'),
}

async function describeDDosAllEventListWithOptions(request: DescribeDDosAllEventListRequest, runtime: Util.RuntimeOptions): DescribeDDosAllEventListResponse {
  Util.validateModel(request);
  var query = {};
  query["EventType"] = request.eventType;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDDosAllEventList',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDDosAllEventList(request: DescribeDDosAllEventListRequest): DescribeDDosAllEventListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDosAllEventListWithOptions(request, runtime);
}

model DescribeDDosEventAreaRequest {
  eventType?: string(name='EventType'),
  startTime?: long(name='StartTime'),
  ip?: string(name='Ip'),
}

model DescribeDDosEventAreaResponseBody = {
  requestId?: string(name='RequestId'),
  areas?: [ 
    {
      inPkts?: long(name='InPkts'),
      area?: string(name='Area'),
    }
  ](name='Areas'),
}

model DescribeDDosEventAreaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDosEventAreaResponseBody(name='body'),
}

async function describeDDosEventAreaWithOptions(request: DescribeDDosEventAreaRequest, runtime: Util.RuntimeOptions): DescribeDDosEventAreaResponse {
  Util.validateModel(request);
  var query = {};
  query["EventType"] = request.eventType;
  query["StartTime"] = request.startTime;
  query["Ip"] = request.ip;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDDosEventArea',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDDosEventArea(request: DescribeDDosEventAreaRequest): DescribeDDosEventAreaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDosEventAreaWithOptions(request, runtime);
}

model DescribeDDosEventAttackTypeRequest {
  eventType?: string(name='EventType'),
  startTime?: long(name='StartTime'),
  ip?: string(name='Ip'),
}

model DescribeDDosEventAttackTypeResponseBody = {
  requestId?: string(name='RequestId'),
  attackTypes?: [ 
    {
      attackType?: string(name='AttackType'),
      inPkts?: long(name='InPkts'),
    }
  ](name='AttackTypes'),
}

model DescribeDDosEventAttackTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDosEventAttackTypeResponseBody(name='body'),
}

async function describeDDosEventAttackTypeWithOptions(request: DescribeDDosEventAttackTypeRequest, runtime: Util.RuntimeOptions): DescribeDDosEventAttackTypeResponse {
  Util.validateModel(request);
  var query = {};
  query["EventType"] = request.eventType;
  query["StartTime"] = request.startTime;
  query["Ip"] = request.ip;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDDosEventAttackType',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDDosEventAttackType(request: DescribeDDosEventAttackTypeRequest): DescribeDDosEventAttackTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDosEventAttackTypeWithOptions(request, runtime);
}

model DescribeDDosEventIspRequest {
  eventType?: string(name='EventType'),
  startTime?: long(name='StartTime'),
  ip?: string(name='Ip'),
}

model DescribeDDosEventIspResponseBody = {
  requestId?: string(name='RequestId'),
  isps?: [ 
    {
      inPkts?: long(name='InPkts'),
      isp?: string(name='Isp'),
    }
  ](name='Isps'),
}

model DescribeDDosEventIspResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDosEventIspResponseBody(name='body'),
}

async function describeDDosEventIspWithOptions(request: DescribeDDosEventIspRequest, runtime: Util.RuntimeOptions): DescribeDDosEventIspResponse {
  Util.validateModel(request);
  var query = {};
  query["EventType"] = request.eventType;
  query["StartTime"] = request.startTime;
  query["Ip"] = request.ip;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDDosEventIsp',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDDosEventIsp(request: DescribeDDosEventIspRequest): DescribeDDosEventIspResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDosEventIspWithOptions(request, runtime);
}

model DescribeDDosEventMaxRequest {
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model DescribeDDosEventMaxResponseBody = {
  requestId?: string(name='RequestId'),
  qps?: long(name='Qps'),
  cps?: long(name='Cps'),
  mbps?: long(name='Mbps'),
}

model DescribeDDosEventMaxResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDosEventMaxResponseBody(name='body'),
}

async function describeDDosEventMaxWithOptions(request: DescribeDDosEventMaxRequest, runtime: Util.RuntimeOptions): DescribeDDosEventMaxResponse {
  Util.validateModel(request);
  var query = {};
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDDosEventMax',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDDosEventMax(request: DescribeDDosEventMaxRequest): DescribeDDosEventMaxResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDosEventMaxWithOptions(request, runtime);
}

model DescribeDDoSEventsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  endTime?: long(name='EndTime'),
  startTime?: long(name='StartTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribeDDoSEventsResponseBody = {
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
  DDoSEvents?: [ 
    {
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      eventType?: string(name='EventType'),
      region?: string(name='Region'),
      ip?: string(name='Ip'),
      port?: string(name='Port'),
      bps?: long(name='Bps'),
      pps?: long(name='Pps'),
    }
  ](name='DDoSEvents'),
}

model DescribeDDoSEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDoSEventsResponseBody(name='body'),
}

async function describeDDoSEventsWithOptions(request: DescribeDDoSEventsRequest, runtime: Util.RuntimeOptions): DescribeDDoSEventsResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["EndTime"] = request.endTime;
  query["StartTime"] = request.startTime;
  query["PageSize"] = request.pageSize;
  query["PageNumber"] = request.pageNumber;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDDoSEvents',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDDoSEvents(request: DescribeDDoSEventsRequest): DescribeDDoSEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDoSEventsWithOptions(request, runtime);
}

model DescribeDDosEventSrcIpRequest {
  eventType?: string(name='EventType'),
  startTime?: long(name='StartTime'),
  ip?: string(name='Ip'),
  range?: long(name='Range'),
}

model DescribeDDosEventSrcIpResponseBody = {
  requestId?: string(name='RequestId'),
  ips?: [ 
    {
      srcIp?: string(name='SrcIp'),
      areaId?: string(name='AreaId'),
      isp?: string(name='Isp'),
    }
  ](name='Ips'),
}

model DescribeDDosEventSrcIpResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDDosEventSrcIpResponseBody(name='body'),
}

async function describeDDosEventSrcIpWithOptions(request: DescribeDDosEventSrcIpRequest, runtime: Util.RuntimeOptions): DescribeDDosEventSrcIpResponse {
  Util.validateModel(request);
  var query = {};
  query["EventType"] = request.eventType;
  query["StartTime"] = request.startTime;
  query["Ip"] = request.ip;
  query["Range"] = request.range;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDDosEventSrcIp',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDDosEventSrcIp(request: DescribeDDosEventSrcIpRequest): DescribeDDosEventSrcIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDDosEventSrcIpWithOptions(request, runtime);
}

model DescribeDefenseCountStatisticsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeDefenseCountStatisticsResponseBody = {
  requestId?: string(name='RequestId'),
  defenseCountStatistics?: {
    maxUsableDefenseCountCurrentMonth?: int32(name='MaxUsableDefenseCountCurrentMonth'),
    flowPackCountRemain?: int32(name='FlowPackCountRemain'),
    defenseCountTotalUsageOfCurrentMonth?: int32(name='DefenseCountTotalUsageOfCurrentMonth'),
  }(name='DefenseCountStatistics'),
}

model DescribeDefenseCountStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDefenseCountStatisticsResponseBody(name='body'),
}

async function describeDefenseCountStatisticsWithOptions(request: DescribeDefenseCountStatisticsRequest, runtime: Util.RuntimeOptions): DescribeDefenseCountStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefenseCountStatistics',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDefenseCountStatistics(request: DescribeDefenseCountStatisticsRequest): DescribeDefenseCountStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefenseCountStatisticsWithOptions(request, runtime);
}

model DescribeDefenseRecordsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  instanceId?: string(name='InstanceId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDefenseRecordsResponseBody = {
  totalCount?: long(name='TotalCount'),
  defenseRecords?: [ 
    {
      endTime?: long(name='EndTime'),
      status?: int32(name='Status'),
      startTime?: long(name='StartTime'),
      eventCount?: int32(name='EventCount'),
      instanceId?: string(name='InstanceId'),
      attackPeak?: long(name='AttackPeak'),
    }
  ](name='DefenseRecords'),
  requestId?: string(name='RequestId'),
}

model DescribeDefenseRecordsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDefenseRecordsResponseBody(name='body'),
}

async function describeDefenseRecordsWithOptions(request: DescribeDefenseRecordsRequest, runtime: Util.RuntimeOptions): DescribeDefenseRecordsResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["InstanceId"] = request.instanceId;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDefenseRecords',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDefenseRecords(request: DescribeDefenseRecordsRequest): DescribeDefenseRecordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDefenseRecordsWithOptions(request, runtime);
}

model DescribeDomainAttackEventsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  domain?: string(name='Domain'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDomainAttackEventsResponseBody = {
  totalCount?: long(name='TotalCount'),
  domainAttackEvents?: [ 
    {
      endTime?: long(name='EndTime'),
      startTime?: long(name='StartTime'),
      domain?: string(name='Domain'),
      maxQps?: long(name='MaxQps'),
    }
  ](name='DomainAttackEvents'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainAttackEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainAttackEventsResponseBody(name='body'),
}

async function describeDomainAttackEventsWithOptions(request: DescribeDomainAttackEventsRequest, runtime: Util.RuntimeOptions): DescribeDomainAttackEventsResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["Domain"] = request.domain;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainAttackEvents',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainAttackEvents(request: DescribeDomainAttackEventsRequest): DescribeDomainAttackEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainAttackEventsWithOptions(request, runtime);
}

model DescribeDomainOverviewRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  domain?: string(name='Domain'),
}

model DescribeDomainOverviewResponseBody = {
  requestId?: string(name='RequestId'),
  maxHttps?: long(name='MaxHttps'),
  maxHttp?: long(name='MaxHttp'),
}

model DescribeDomainOverviewResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainOverviewResponseBody(name='body'),
}

async function describeDomainOverviewWithOptions(request: DescribeDomainOverviewRequest, runtime: Util.RuntimeOptions): DescribeDomainOverviewResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["Domain"] = request.domain;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainOverview',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainOverview(request: DescribeDomainOverviewRequest): DescribeDomainOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainOverviewWithOptions(request, runtime);
}

model DescribeDomainQPSListRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  interval?: long(name='Interval'),
  domain?: string(name='Domain'),
}

model DescribeDomainQPSListResponseBody = {
  domainQPSList?: [ 
    {
      index?: long(name='Index'),
      time?: long(name='Time'),
      maxAttackQps?: long(name='MaxAttackQps'),
      attackQps?: long(name='AttackQps'),
      maxQps?: long(name='MaxQps'),
      maxNormalQps?: long(name='MaxNormalQps'),
      totalQps?: long(name='TotalQps'),
      totalCount?: long(name='TotalCount'),
      cacheHits?: long(name='CacheHits'),
    }
  ](name='DomainQPSList'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainQPSListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainQPSListResponseBody(name='body'),
}

async function describeDomainQPSListWithOptions(request: DescribeDomainQPSListRequest, runtime: Util.RuntimeOptions): DescribeDomainQPSListResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["Interval"] = request.interval;
  query["Domain"] = request.domain;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainQPSList',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainQPSList(request: DescribeDomainQPSListRequest): DescribeDomainQPSListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainQPSListWithOptions(request, runtime);
}

model DescribeDomainQpsWithCacheRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model DescribeDomainQpsWithCacheResponseBody = {
  ipBlockQps?: [ string ](name='IpBlockQps'),
  ccJsQps?: [ string ](name='CcJsQps'),
  blocks?: [ string ](name='Blocks'),
  preciseBlocks?: [ string ](name='PreciseBlocks'),
  requestId?: string(name='RequestId'),
  preciseJsQps?: [ string ](name='PreciseJsQps'),
  totals?: [ string ](name='Totals'),
  startTime?: long(name='StartTime'),
  ccBlockQps?: [ string ](name='CcBlockQps'),
  interval?: int32(name='Interval'),
  regionBlocks?: [ string ](name='RegionBlocks'),
  cacheHits?: [ string ](name='CacheHits'),
}

model DescribeDomainQpsWithCacheResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainQpsWithCacheResponseBody(name='body'),
}

async function describeDomainQpsWithCacheWithOptions(request: DescribeDomainQpsWithCacheRequest, runtime: Util.RuntimeOptions): DescribeDomainQpsWithCacheResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainQpsWithCache',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainQpsWithCache(request: DescribeDomainQpsWithCacheRequest): DescribeDomainQpsWithCacheResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainQpsWithCacheWithOptions(request, runtime);
}

model DescribeDomainsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribeDomainsResponseBody = {
  domains?: [ string ](name='Domains'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainsResponseBody(name='body'),
}

async function describeDomainsWithOptions(request: DescribeDomainsRequest, runtime: Util.RuntimeOptions): DescribeDomainsResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomains',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomains(request: DescribeDomainsRequest): DescribeDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsWithOptions(request, runtime);
}

model DescribeDomainStatusCodeCountRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  domain?: string(name='Domain'),
}

model DescribeDomainStatusCodeCountResponseBody = {
  requestId?: string(name='RequestId'),
  status501?: long(name='Status501'),
  status502?: long(name='Status502'),
  status403?: long(name='Status403'),
  status503?: long(name='Status503'),
  status404?: long(name='Status404'),
  status405?: long(name='Status405'),
  status504?: long(name='Status504'),
  status2XX?: long(name='Status2XX'),
  status200?: long(name='Status200'),
  status3XX?: long(name='Status3XX'),
  status4XX?: long(name='Status4XX'),
  status5XX?: long(name='Status5XX'),
}

model DescribeDomainStatusCodeCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainStatusCodeCountResponseBody(name='body'),
}

async function describeDomainStatusCodeCountWithOptions(request: DescribeDomainStatusCodeCountRequest, runtime: Util.RuntimeOptions): DescribeDomainStatusCodeCountResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["Domain"] = request.domain;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainStatusCodeCount',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainStatusCodeCount(request: DescribeDomainStatusCodeCountRequest): DescribeDomainStatusCodeCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainStatusCodeCountWithOptions(request, runtime);
}

model DescribeDomainStatusCodeListRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  interval?: long(name='Interval'),
  domain?: string(name='Domain'),
  queryType?: string(name='QueryType'),
}

model DescribeDomainStatusCodeListResponseBody = {
  requestId?: string(name='RequestId'),
  statusCodeList?: [ 
    {
      status502?: long(name='Status502'),
      index?: int32(name='Index'),
      time?: long(name='Time'),
      status405?: long(name='Status405'),
      status3XX?: long(name='Status3XX'),
      status503?: long(name='Status503'),
      status4XX?: long(name='Status4XX'),
      status2XX?: long(name='Status2XX'),
      status5XX?: long(name='Status5XX'),
      status504?: long(name='Status504'),
      status403?: long(name='Status403'),
      status200?: long(name='Status200'),
      status404?: long(name='Status404'),
      status501?: long(name='Status501'),
    }
  ](name='StatusCodeList'),
}

model DescribeDomainStatusCodeListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainStatusCodeListResponseBody(name='body'),
}

async function describeDomainStatusCodeListWithOptions(request: DescribeDomainStatusCodeListRequest, runtime: Util.RuntimeOptions): DescribeDomainStatusCodeListResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["Interval"] = request.interval;
  query["Domain"] = request.domain;
  query["QueryType"] = request.queryType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainStatusCodeList',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainStatusCodeList(request: DescribeDomainStatusCodeListRequest): DescribeDomainStatusCodeListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainStatusCodeListWithOptions(request, runtime);
}

model DescribeDomainTopAttackListRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model DescribeDomainTopAttackListResponseBody = {
  attackList?: [ 
    {
      attack?: long(name='Attack'),
      domain?: string(name='Domain'),
      count?: long(name='Count'),
    }
  ](name='AttackList'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainTopAttackListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainTopAttackListResponseBody(name='body'),
}

async function describeDomainTopAttackListWithOptions(request: DescribeDomainTopAttackListRequest, runtime: Util.RuntimeOptions): DescribeDomainTopAttackListResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainTopAttackList',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainTopAttackList(request: DescribeDomainTopAttackListRequest): DescribeDomainTopAttackListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainTopAttackListWithOptions(request, runtime);
}

model DescribeDomainViewSourceCountriesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  domain?: string(name='Domain'),
}

model DescribeDomainViewSourceCountriesResponseBody = {
  requestId?: string(name='RequestId'),
  sourceCountrys?: [ 
    {
      countryId?: string(name='CountryId'),
      count?: long(name='Count'),
    }
  ](name='SourceCountrys'),
}

model DescribeDomainViewSourceCountriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainViewSourceCountriesResponseBody(name='body'),
}

async function describeDomainViewSourceCountriesWithOptions(request: DescribeDomainViewSourceCountriesRequest, runtime: Util.RuntimeOptions): DescribeDomainViewSourceCountriesResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["Domain"] = request.domain;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainViewSourceCountries',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainViewSourceCountries(request: DescribeDomainViewSourceCountriesRequest): DescribeDomainViewSourceCountriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainViewSourceCountriesWithOptions(request, runtime);
}

model DescribeDomainViewSourceProvincesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  domain?: string(name='Domain'),
}

model DescribeDomainViewSourceProvincesResponseBody = {
  sourceProvinces?: [ 
    {
      provinceId?: string(name='ProvinceId'),
      count?: long(name='Count'),
    }
  ](name='SourceProvinces'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainViewSourceProvincesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainViewSourceProvincesResponseBody(name='body'),
}

async function describeDomainViewSourceProvincesWithOptions(request: DescribeDomainViewSourceProvincesRequest, runtime: Util.RuntimeOptions): DescribeDomainViewSourceProvincesResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["Domain"] = request.domain;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainViewSourceProvinces',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainViewSourceProvinces(request: DescribeDomainViewSourceProvincesRequest): DescribeDomainViewSourceProvincesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainViewSourceProvincesWithOptions(request, runtime);
}

model DescribeDomainViewTopCostTimeRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  domain?: string(name='Domain'),
  top?: int32(name='Top'),
}

model DescribeDomainViewTopCostTimeResponseBody = {
  requestId?: string(name='RequestId'),
  urlList?: [ 
    {
      domain?: string(name='Domain'),
      costTime?: float(name='CostTime'),
      url?: string(name='Url'),
    }
  ](name='UrlList'),
}

model DescribeDomainViewTopCostTimeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainViewTopCostTimeResponseBody(name='body'),
}

async function describeDomainViewTopCostTimeWithOptions(request: DescribeDomainViewTopCostTimeRequest, runtime: Util.RuntimeOptions): DescribeDomainViewTopCostTimeResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["Domain"] = request.domain;
  query["Top"] = request.top;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainViewTopCostTime',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainViewTopCostTime(request: DescribeDomainViewTopCostTimeRequest): DescribeDomainViewTopCostTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainViewTopCostTimeWithOptions(request, runtime);
}

model DescribeDomainViewTopUrlRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  domain?: string(name='Domain'),
  top?: int32(name='Top'),
}

model DescribeDomainViewTopUrlResponseBody = {
  requestId?: string(name='RequestId'),
  urlList?: [ 
    {
      domain?: string(name='Domain'),
      url?: string(name='Url'),
      count?: long(name='Count'),
    }
  ](name='UrlList'),
}

model DescribeDomainViewTopUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainViewTopUrlResponseBody(name='body'),
}

async function describeDomainViewTopUrlWithOptions(request: DescribeDomainViewTopUrlRequest, runtime: Util.RuntimeOptions): DescribeDomainViewTopUrlResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["Domain"] = request.domain;
  query["Top"] = request.top;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainViewTopUrl',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainViewTopUrl(request: DescribeDomainViewTopUrlRequest): DescribeDomainViewTopUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainViewTopUrlWithOptions(request, runtime);
}

model DescribeElasticBandwidthSpecRequest {
  instanceId?: string(name='InstanceId'),
}

model DescribeElasticBandwidthSpecResponseBody = {
  requestId?: string(name='RequestId'),
  elasticBandwidthSpec?: [ string ](name='ElasticBandwidthSpec'),
}

model DescribeElasticBandwidthSpecResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeElasticBandwidthSpecResponseBody(name='body'),
}

async function describeElasticBandwidthSpecWithOptions(request: DescribeElasticBandwidthSpecRequest, runtime: Util.RuntimeOptions): DescribeElasticBandwidthSpecResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeElasticBandwidthSpec',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeElasticBandwidthSpec(request: DescribeElasticBandwidthSpecRequest): DescribeElasticBandwidthSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeElasticBandwidthSpecWithOptions(request, runtime);
}

model DescribeHealthCheckListRequest {
  networkRules?: string(name='NetworkRules'),
}

model DescribeHealthCheckListResponseBody = {
  requestId?: string(name='RequestId'),
  healthCheckList?: [ 
    {
      frontendPort?: int32(name='FrontendPort'),
      protocol?: string(name='Protocol'),
      instanceId?: string(name='InstanceId'),
      healthCheck?: {
        timeout?: int32(name='Timeout'),
        type?: string(name='Type'),
        domain?: string(name='Domain'),
        interval?: int32(name='Interval'),
        up?: int32(name='Up'),
        down?: int32(name='Down'),
        port?: int32(name='Port'),
        uri?: string(name='Uri'),
      }(name='HealthCheck'),
    }
  ](name='HealthCheckList'),
}

model DescribeHealthCheckListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHealthCheckListResponseBody(name='body'),
}

async function describeHealthCheckListWithOptions(request: DescribeHealthCheckListRequest, runtime: Util.RuntimeOptions): DescribeHealthCheckListResponse {
  Util.validateModel(request);
  var query = {};
  query["NetworkRules"] = request.networkRules;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHealthCheckList',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHealthCheckList(request: DescribeHealthCheckListRequest): DescribeHealthCheckListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHealthCheckListWithOptions(request, runtime);
}

model DescribeHealthCheckStatusRequest {
  networkRules?: string(name='NetworkRules'),
}

model DescribeHealthCheckStatusResponseBody = {
  requestId?: string(name='RequestId'),
  healthCheckStatus?: [ 
    {
      status?: string(name='Status'),
      frontendPort?: int32(name='FrontendPort'),
      protocol?: string(name='Protocol'),
      instanceId?: string(name='InstanceId'),
      realServerStatusList?: [ 
        {
          status?: string(name='Status'),
          address?: string(name='Address'),
        }
      ](name='RealServerStatusList'),
    }
  ](name='HealthCheckStatus'),
}

model DescribeHealthCheckStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHealthCheckStatusResponseBody(name='body'),
}

async function describeHealthCheckStatusWithOptions(request: DescribeHealthCheckStatusRequest, runtime: Util.RuntimeOptions): DescribeHealthCheckStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["NetworkRules"] = request.networkRules;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHealthCheckStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHealthCheckStatus(request: DescribeHealthCheckStatusRequest): DescribeHealthCheckStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHealthCheckStatusWithOptions(request, runtime);
}

model DescribeInstanceDetailsRequest {
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribeInstanceDetailsResponseBody = {
  instanceDetails?: [ 
    {
      line?: string(name='Line'),
      instanceId?: string(name='InstanceId'),
      eipInfos?: [ 
        {
          status?: string(name='Status'),
          eip?: string(name='Eip'),
        }
      ](name='EipInfos'),
    }
  ](name='InstanceDetails'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceDetailsResponseBody(name='body'),
}

async function describeInstanceDetailsWithOptions(request: DescribeInstanceDetailsRequest, runtime: Util.RuntimeOptions): DescribeInstanceDetailsResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceDetails',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceDetails(request: DescribeInstanceDetailsRequest): DescribeInstanceDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceDetailsWithOptions(request, runtime);
}

model DescribeInstanceIdsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  edition?: int32(name='Edition'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribeInstanceIdsResponseBody = {
  requestId?: string(name='RequestId'),
  instanceIds?: [ 
    {
      edition?: int32(name='Edition'),
      remark?: string(name='Remark'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='InstanceIds'),
}

model DescribeInstanceIdsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceIdsResponseBody(name='body'),
}

async function describeInstanceIdsWithOptions(request: DescribeInstanceIdsRequest, runtime: Util.RuntimeOptions): DescribeInstanceIdsResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Edition"] = request.edition;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceIds',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceIds(request: DescribeInstanceIdsRequest): DescribeInstanceIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceIdsWithOptions(request, runtime);
}

model DescribeInstancesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  ip?: string(name='Ip'),
  remark?: string(name='Remark'),
  edition?: int32(name='Edition'),
  enabled?: int32(name='Enabled'),
  expireStartTime?: long(name='ExpireStartTime'),
  expireEndTime?: long(name='ExpireEndTime'),
  instanceIds?: [ string ](name='InstanceIds'),
  status?: [ integer ](name='Status'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeInstancesResponseBody = {
  instances?: [ 
    {
      status?: int32(name='Status'),
      debtStatus?: int32(name='DebtStatus'),
      edition?: int32(name='Edition'),
      expireTime?: long(name='ExpireTime'),
      remark?: string(name='Remark'),
      createTime?: long(name='CreateTime'),
      enabled?: int32(name='Enabled'),
      instanceId?: string(name='InstanceId'),
      connInstanceId?: string(name='ConnInstanceId'),
    }
  ](name='Instances'),
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
}

model DescribeInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstancesResponseBody(name='body'),
}

async function describeInstancesWithOptions(request: DescribeInstancesRequest, runtime: Util.RuntimeOptions): DescribeInstancesResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["Ip"] = request.ip;
  query["Remark"] = request.remark;
  query["Edition"] = request.edition;
  query["Enabled"] = request.enabled;
  query["ExpireStartTime"] = request.expireStartTime;
  query["ExpireEndTime"] = request.expireEndTime;
  query["InstanceIds"] = request.instanceIds;
  query["Status"] = request.status;
  query["Tag"] = request.tag;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstances',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstances(request: DescribeInstancesRequest): DescribeInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstancesWithOptions(request, runtime);
}

model DescribeInstanceSpecsRequest {
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribeInstanceSpecsResponseBody = {
  requestId?: string(name='RequestId'),
  instanceSpecs?: [ 
    {
      baseBandwidth?: int32(name='BaseBandwidth'),
      qpsLimit?: int32(name='QpsLimit'),
      bandwidthMbps?: int32(name='BandwidthMbps'),
      defenseCount?: int32(name='DefenseCount'),
      siteLimit?: int32(name='SiteLimit'),
      portLimit?: int32(name='PortLimit'),
      elasticBandwidth?: int32(name='ElasticBandwidth'),
      functionVersion?: string(name='FunctionVersion'),
      instanceId?: string(name='InstanceId'),
      domainLimit?: int32(name='DomainLimit'),
    }
  ](name='InstanceSpecs'),
}

model DescribeInstanceSpecsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSpecsResponseBody(name='body'),
}

async function describeInstanceSpecsWithOptions(request: DescribeInstanceSpecsRequest, runtime: Util.RuntimeOptions): DescribeInstanceSpecsResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceSpecs',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceSpecs(request: DescribeInstanceSpecsRequest): DescribeInstanceSpecsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSpecsWithOptions(request, runtime);
}

model DescribeInstanceStatisticsRequest {
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribeInstanceStatisticsResponseBody = {
  instanceStatistics?: [ 
    {
      domainUsage?: int32(name='DomainUsage'),
      defenseCountUsage?: int32(name='DefenseCountUsage'),
      instanceId?: string(name='InstanceId'),
      siteUsage?: int32(name='SiteUsage'),
      portUsage?: int32(name='PortUsage'),
    }
  ](name='InstanceStatistics'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceStatisticsResponseBody(name='body'),
}

async function describeInstanceStatisticsWithOptions(request: DescribeInstanceStatisticsRequest, runtime: Util.RuntimeOptions): DescribeInstanceStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceStatistics',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceStatistics(request: DescribeInstanceStatisticsRequest): DescribeInstanceStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceStatisticsWithOptions(request, runtime);
}

model DescribeInstanceStatusRequest {
  instanceId?: string(name='InstanceId'),
  productType?: int32(name='ProductType'),
}

model DescribeInstanceStatusResponseBody = {
  requestId?: string(name='RequestId'),
  instanceId?: string(name='InstanceId'),
  instanceStatus?: int32(name='InstanceStatus'),
}

model DescribeInstanceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceStatusResponseBody(name='body'),
}

async function describeInstanceStatusWithOptions(request: DescribeInstanceStatusRequest, runtime: Util.RuntimeOptions): DescribeInstanceStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  query["ProductType"] = request.productType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceStatus(request: DescribeInstanceStatusRequest): DescribeInstanceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceStatusWithOptions(request, runtime);
}

model DescribeL7RsPolicyRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  realServers?: [ string ](name='RealServers'),
}

model DescribeL7RsPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  attributes?: [ 
    {
      rsType?: int32(name='RsType'),
      attribute?: {
        weight?: int32(name='Weight'),
      }(name='Attribute'),
      realServer?: string(name='RealServer'),
    }
  ](name='Attributes'),
  proxyMode?: string(name='ProxyMode'),
}

model DescribeL7RsPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeL7RsPolicyResponseBody(name='body'),
}

async function describeL7RsPolicyWithOptions(request: DescribeL7RsPolicyRequest, runtime: Util.RuntimeOptions): DescribeL7RsPolicyResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["RealServers"] = request.realServers;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeL7RsPolicy',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeL7RsPolicy(request: DescribeL7RsPolicyRequest): DescribeL7RsPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeL7RsPolicyWithOptions(request, runtime);
}

model DescribeLogStoreExistStatusRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeLogStoreExistStatusResponseBody = {
  requestId?: string(name='RequestId'),
  existStatus?: boolean(name='ExistStatus'),
}

model DescribeLogStoreExistStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeLogStoreExistStatusResponseBody(name='body'),
}

async function describeLogStoreExistStatusWithOptions(request: DescribeLogStoreExistStatusRequest, runtime: Util.RuntimeOptions): DescribeLogStoreExistStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeLogStoreExistStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeLogStoreExistStatus(request: DescribeLogStoreExistStatusRequest): DescribeLogStoreExistStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeLogStoreExistStatusWithOptions(request, runtime);
}

model DescribeNetworkRegionBlockRequest {
  instanceId?: string(name='InstanceId'),
}

model DescribeNetworkRegionBlockResponseBody = {
  requestId?: string(name='RequestId'),
  config?: {
    regionBlockSwitch?: string(name='RegionBlockSwitch'),
    provinces?: [ string ](name='Provinces'),
    countries?: [ string ](name='Countries'),
  }(name='Config'),
}

model DescribeNetworkRegionBlockResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkRegionBlockResponseBody(name='body'),
}

async function describeNetworkRegionBlockWithOptions(request: DescribeNetworkRegionBlockRequest, runtime: Util.RuntimeOptions): DescribeNetworkRegionBlockResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkRegionBlock',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNetworkRegionBlock(request: DescribeNetworkRegionBlockRequest): DescribeNetworkRegionBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkRegionBlockWithOptions(request, runtime);
}

model DescribeNetworkRuleAttributesRequest {
  networkRules?: string(name='NetworkRules'),
}

model DescribeNetworkRuleAttributesResponseBody = {
  networkRuleAttributes?: [ 
    {
      frontendPort?: int32(name='FrontendPort'),
      protocol?: string(name='Protocol'),
      instanceId?: string(name='InstanceId'),
      config?: {
        cc?: {
          sblack?: [ 
            {
              type?: int32(name='Type'),
              expires?: int32(name='Expires'),
              during?: int32(name='During'),
              cnt?: int32(name='Cnt'),
            }
          ](name='Sblack'),
        }(name='Cc'),
        payloadLen?: {
          max?: int32(name='Max'),
          min?: int32(name='Min'),
        }(name='PayloadLen'),
        persistenceTimeout?: int32(name='PersistenceTimeout'),
        sla?: {
          maxconnEnable?: int32(name='MaxconnEnable'),
          cpsEnable?: int32(name='CpsEnable'),
          cps?: int32(name='Cps'),
          maxconn?: int32(name='Maxconn'),
        }(name='Sla'),
        slimit?: {
          maxconnEnable?: int32(name='MaxconnEnable'),
          cpsEnable?: int32(name='CpsEnable'),
          cps?: int32(name='Cps'),
          pps?: long(name='Pps'),
          bps?: long(name='Bps'),
          maxconn?: int32(name='Maxconn'),
          cpsMode?: int32(name='CpsMode'),
        }(name='Slimit'),
        nodataConn?: string(name='NodataConn'),
        synproxy?: string(name='Synproxy'),
      }(name='Config'),
    }
  ](name='NetworkRuleAttributes'),
  requestId?: string(name='RequestId'),
}

model DescribeNetworkRuleAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkRuleAttributesResponseBody(name='body'),
}

async function describeNetworkRuleAttributesWithOptions(request: DescribeNetworkRuleAttributesRequest, runtime: Util.RuntimeOptions): DescribeNetworkRuleAttributesResponse {
  Util.validateModel(request);
  var query = {};
  query["NetworkRules"] = request.networkRules;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkRuleAttributes',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNetworkRuleAttributes(request: DescribeNetworkRuleAttributesRequest): DescribeNetworkRuleAttributesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkRuleAttributesWithOptions(request, runtime);
}

model DescribeNetworkRulesRequest {
  instanceId?: string(name='InstanceId'),
  forwardProtocol?: string(name='ForwardProtocol'),
  frontendPort?: int32(name='FrontendPort'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeNetworkRulesResponseBody = {
  totalCount?: long(name='TotalCount'),
  networkRules?: [ 
    {
      frontendPort?: int32(name='FrontendPort'),
      isAutoCreate?: boolean(name='IsAutoCreate'),
      protocol?: string(name='Protocol'),
      realServers?: [ string ](name='RealServers'),
      instanceId?: string(name='InstanceId'),
      backendPort?: int32(name='BackendPort'),
    }
  ](name='NetworkRules'),
  requestId?: string(name='RequestId'),
}

model DescribeNetworkRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkRulesResponseBody(name='body'),
}

async function describeNetworkRulesWithOptions(request: DescribeNetworkRulesRequest, runtime: Util.RuntimeOptions): DescribeNetworkRulesResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  query["ForwardProtocol"] = request.forwardProtocol;
  query["FrontendPort"] = request.frontendPort;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeNetworkRules',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeNetworkRules(request: DescribeNetworkRulesRequest): DescribeNetworkRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkRulesWithOptions(request, runtime);
}

model DescribeOpEntitiesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  entityType?: int32(name='EntityType'),
  entityObject?: string(name='EntityObject'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeOpEntitiesResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  opEntities?: [ 
    {
      entityType?: int32(name='EntityType'),
      entityObject?: string(name='EntityObject'),
      gmtCreate?: long(name='GmtCreate'),
      opAction?: int32(name='OpAction'),
      opAccount?: string(name='OpAccount'),
      opDesc?: string(name='OpDesc'),
    }
  ](name='OpEntities'),
}

model DescribeOpEntitiesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOpEntitiesResponseBody(name='body'),
}

async function describeOpEntitiesWithOptions(request: DescribeOpEntitiesRequest, runtime: Util.RuntimeOptions): DescribeOpEntitiesResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["EntityType"] = request.entityType;
  query["EntityObject"] = request.entityObject;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOpEntities',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOpEntities(request: DescribeOpEntitiesRequest): DescribeOpEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOpEntitiesWithOptions(request, runtime);
}

model DescribePortAttackMaxFlowRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  endTime?: long(name='EndTime'),
  startTime?: long(name='StartTime'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribePortAttackMaxFlowResponseBody = {
  pps?: long(name='Pps'),
  requestId?: string(name='RequestId'),
  bps?: long(name='Bps'),
}

model DescribePortAttackMaxFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortAttackMaxFlowResponseBody(name='body'),
}

async function describePortAttackMaxFlowWithOptions(request: DescribePortAttackMaxFlowRequest, runtime: Util.RuntimeOptions): DescribePortAttackMaxFlowResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["EndTime"] = request.endTime;
  query["StartTime"] = request.startTime;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribePortAttackMaxFlow',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePortAttackMaxFlow(request: DescribePortAttackMaxFlowRequest): DescribePortAttackMaxFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePortAttackMaxFlowWithOptions(request, runtime);
}

model DescribePortAutoCcStatusRequest {
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribePortAutoCcStatusResponseBody = {
  requestId?: string(name='RequestId'),
  portAutoCcStatus?: [ 
    {
      switch?: string(name='Switch'),
      mode?: string(name='Mode'),
      webSwitch?: string(name='WebSwitch'),
      webMode?: string(name='WebMode'),
    }
  ](name='PortAutoCcStatus'),
}

model DescribePortAutoCcStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortAutoCcStatusResponseBody(name='body'),
}

async function describePortAutoCcStatusWithOptions(request: DescribePortAutoCcStatusRequest, runtime: Util.RuntimeOptions): DescribePortAutoCcStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribePortAutoCcStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePortAutoCcStatus(request: DescribePortAutoCcStatusRequest): DescribePortAutoCcStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePortAutoCcStatusWithOptions(request, runtime);
}

model DescribePortConnsCountRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  endTime?: long(name='EndTime'),
  startTime?: long(name='StartTime'),
  port?: string(name='Port'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribePortConnsCountResponseBody = {
  conns?: long(name='Conns'),
  requestId?: string(name='RequestId'),
  cps?: long(name='Cps'),
  inActConns?: long(name='InActConns'),
  actConns?: long(name='ActConns'),
}

model DescribePortConnsCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortConnsCountResponseBody(name='body'),
}

async function describePortConnsCountWithOptions(request: DescribePortConnsCountRequest, runtime: Util.RuntimeOptions): DescribePortConnsCountResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["EndTime"] = request.endTime;
  query["StartTime"] = request.startTime;
  query["Port"] = request.port;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribePortConnsCount',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePortConnsCount(request: DescribePortConnsCountRequest): DescribePortConnsCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePortConnsCountWithOptions(request, runtime);
}

model DescribePortConnsListRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  endTime?: long(name='EndTime'),
  startTime?: long(name='StartTime'),
  interval?: int32(name='Interval'),
  port?: string(name='Port'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribePortConnsListResponseBody = {
  connsList?: [ 
    {
      actConns?: long(name='ActConns'),
      inActConns?: long(name='InActConns'),
      index?: long(name='Index'),
      time?: long(name='Time'),
      cps?: long(name='Cps'),
      conns?: long(name='Conns'),
    }
  ](name='ConnsList'),
  requestId?: string(name='RequestId'),
}

model DescribePortConnsListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortConnsListResponseBody(name='body'),
}

async function describePortConnsListWithOptions(request: DescribePortConnsListRequest, runtime: Util.RuntimeOptions): DescribePortConnsListResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["EndTime"] = request.endTime;
  query["StartTime"] = request.startTime;
  query["Interval"] = request.interval;
  query["Port"] = request.port;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribePortConnsList',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePortConnsList(request: DescribePortConnsListRequest): DescribePortConnsListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePortConnsListWithOptions(request, runtime);
}

model DescribePortFlowListRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  endTime?: long(name='EndTime'),
  startTime?: long(name='StartTime'),
  interval?: int32(name='Interval'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribePortFlowListResponseBody = {
  requestId?: string(name='RequestId'),
  portFlowList?: [ 
    {
      index?: long(name='Index'),
      time?: long(name='Time'),
      inPps?: long(name='InPps'),
      inBps?: long(name='InBps'),
      region?: string(name='Region'),
      outPps?: long(name='OutPps'),
      attackPps?: long(name='AttackPps'),
      outBps?: long(name='OutBps'),
      attackBps?: long(name='AttackBps'),
    }
  ](name='PortFlowList'),
}

model DescribePortFlowListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortFlowListResponseBody(name='body'),
}

async function describePortFlowListWithOptions(request: DescribePortFlowListRequest, runtime: Util.RuntimeOptions): DescribePortFlowListResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["EndTime"] = request.endTime;
  query["StartTime"] = request.startTime;
  query["Interval"] = request.interval;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribePortFlowList',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePortFlowList(request: DescribePortFlowListRequest): DescribePortFlowListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePortFlowListWithOptions(request, runtime);
}

model DescribePortMaxConnsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  endTime?: long(name='EndTime'),
  startTime?: long(name='StartTime'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribePortMaxConnsResponseBody = {
  portMaxConns?: [ 
    {
      cps?: long(name='Cps'),
      ip?: string(name='Ip'),
      port?: string(name='Port'),
    }
  ](name='PortMaxConns'),
  requestId?: string(name='RequestId'),
}

model DescribePortMaxConnsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortMaxConnsResponseBody(name='body'),
}

async function describePortMaxConnsWithOptions(request: DescribePortMaxConnsRequest, runtime: Util.RuntimeOptions): DescribePortMaxConnsResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["EndTime"] = request.endTime;
  query["StartTime"] = request.startTime;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribePortMaxConns',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePortMaxConns(request: DescribePortMaxConnsRequest): DescribePortMaxConnsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePortMaxConnsWithOptions(request, runtime);
}

model DescribePortViewSourceCountriesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  endTime?: long(name='EndTime'),
  startTime?: long(name='StartTime'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribePortViewSourceCountriesResponseBody = {
  requestId?: string(name='RequestId'),
  sourceCountrys?: [ 
    {
      countryId?: string(name='CountryId'),
      count?: long(name='Count'),
    }
  ](name='SourceCountrys'),
}

model DescribePortViewSourceCountriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortViewSourceCountriesResponseBody(name='body'),
}

async function describePortViewSourceCountriesWithOptions(request: DescribePortViewSourceCountriesRequest, runtime: Util.RuntimeOptions): DescribePortViewSourceCountriesResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["EndTime"] = request.endTime;
  query["StartTime"] = request.startTime;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribePortViewSourceCountries',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePortViewSourceCountries(request: DescribePortViewSourceCountriesRequest): DescribePortViewSourceCountriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePortViewSourceCountriesWithOptions(request, runtime);
}

model DescribePortViewSourceIspsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  endTime?: long(name='EndTime'),
  startTime?: long(name='StartTime'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribePortViewSourceIspsResponseBody = {
  requestId?: string(name='RequestId'),
  isps?: [ 
    {
      ispId?: string(name='IspId'),
      count?: long(name='Count'),
    }
  ](name='Isps'),
}

model DescribePortViewSourceIspsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortViewSourceIspsResponseBody(name='body'),
}

async function describePortViewSourceIspsWithOptions(request: DescribePortViewSourceIspsRequest, runtime: Util.RuntimeOptions): DescribePortViewSourceIspsResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["EndTime"] = request.endTime;
  query["StartTime"] = request.startTime;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribePortViewSourceIsps',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePortViewSourceIsps(request: DescribePortViewSourceIspsRequest): DescribePortViewSourceIspsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePortViewSourceIspsWithOptions(request, runtime);
}

model DescribePortViewSourceProvincesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  endTime?: long(name='EndTime'),
  startTime?: long(name='StartTime'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribePortViewSourceProvincesResponseBody = {
  sourceProvinces?: [ 
    {
      provinceId?: string(name='ProvinceId'),
      count?: long(name='Count'),
    }
  ](name='SourceProvinces'),
  requestId?: string(name='RequestId'),
}

model DescribePortViewSourceProvincesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePortViewSourceProvincesResponseBody(name='body'),
}

async function describePortViewSourceProvincesWithOptions(request: DescribePortViewSourceProvincesRequest, runtime: Util.RuntimeOptions): DescribePortViewSourceProvincesResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["EndTime"] = request.endTime;
  query["StartTime"] = request.startTime;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribePortViewSourceProvinces',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePortViewSourceProvinces(request: DescribePortViewSourceProvincesRequest): DescribePortViewSourceProvincesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePortViewSourceProvincesWithOptions(request, runtime);
}

model DescribeSceneDefenseObjectsRequest {
  policyId?: string(name='PolicyId'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeSceneDefenseObjectsResponseBody = {
  requestId?: string(name='RequestId'),
  objects?: [ 
    {
      domain?: string(name='Domain'),
      policyId?: string(name='PolicyId'),
      vip?: string(name='Vip'),
    }
  ](name='Objects'),
  success?: boolean(name='Success'),
}

model DescribeSceneDefenseObjectsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSceneDefenseObjectsResponseBody(name='body'),
}

async function describeSceneDefenseObjectsWithOptions(request: DescribeSceneDefenseObjectsRequest, runtime: Util.RuntimeOptions): DescribeSceneDefenseObjectsResponse {
  Util.validateModel(request);
  var query = {};
  query["PolicyId"] = request.policyId;
  query["ResourceGroupId"] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSceneDefenseObjects',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSceneDefenseObjects(request: DescribeSceneDefenseObjectsRequest): DescribeSceneDefenseObjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSceneDefenseObjectsWithOptions(request, runtime);
}

model DescribeSceneDefensePoliciesRequest {
  template?: string(name='Template'),
  status?: string(name='Status'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeSceneDefensePoliciesResponseBody = {
  policies?: [ 
    {
      done?: int32(name='Done'),
      endTime?: long(name='EndTime'),
      status?: int32(name='Status'),
      startTime?: long(name='StartTime'),
      objectCount?: int32(name='ObjectCount'),
      template?: string(name='Template'),
      policyId?: string(name='PolicyId'),
      name?: string(name='Name'),
      runtimePolicies?: [ 
        {
          status?: int32(name='Status'),
          oldValue?: string(name='oldValue'),
          newValue?: string(name='NewValue'),
          policyType?: int32(name='PolicyType'),
        }
      ](name='RuntimePolicies'),
    }
  ](name='Policies'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSceneDefensePoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSceneDefensePoliciesResponseBody(name='body'),
}

async function describeSceneDefensePoliciesWithOptions(request: DescribeSceneDefensePoliciesRequest, runtime: Util.RuntimeOptions): DescribeSceneDefensePoliciesResponse {
  Util.validateModel(request);
  var query = {};
  query["Template"] = request.template;
  query["Status"] = request.status;
  query["ResourceGroupId"] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSceneDefensePolicies',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSceneDefensePolicies(request: DescribeSceneDefensePoliciesRequest): DescribeSceneDefensePoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSceneDefensePoliciesWithOptions(request, runtime);
}

model DescribeSchedulerRulesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  ruleName?: string(name='RuleName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeSchedulerRulesResponseBody = {
  totalCount?: string(name='TotalCount'),
  requestId?: string(name='RequestId'),
  schedulerRules?: [ 
    {
      ruleType?: string(name='RuleType'),
      param?: {
        paramData?: {
          cloudInstanceId?: string(name='CloudInstanceId'),
        }(name='ParamData'),
        paramType?: string(name='ParamType'),
      }(name='Param'),
      cname?: string(name='Cname'),
      rules?: [ 
        {
          type?: string(name='Type'),
          status?: int32(name='Status'),
          value?: string(name='Value'),
          valueType?: int32(name='ValueType'),
          priority?: int32(name='Priority'),
          restoreDelay?: int32(name='RestoreDelay'),
          regionId?: string(name='RegionId'),
        }
      ](name='Rules'),
      ruleName?: string(name='RuleName'),
    }
  ](name='SchedulerRules'),
}

model DescribeSchedulerRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSchedulerRulesResponseBody(name='body'),
}

async function describeSchedulerRulesWithOptions(request: DescribeSchedulerRulesRequest, runtime: Util.RuntimeOptions): DescribeSchedulerRulesResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["RuleName"] = request.ruleName;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSchedulerRules',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSchedulerRules(request: DescribeSchedulerRulesRequest): DescribeSchedulerRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSchedulerRulesWithOptions(request, runtime);
}

model DescribeSlsAuthStatusRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeSlsAuthStatusResponseBody = {
  requestId?: string(name='RequestId'),
  slsAuthStatus?: boolean(name='SlsAuthStatus'),
}

model DescribeSlsAuthStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlsAuthStatusResponseBody(name='body'),
}

async function describeSlsAuthStatusWithOptions(request: DescribeSlsAuthStatusRequest, runtime: Util.RuntimeOptions): DescribeSlsAuthStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlsAuthStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlsAuthStatus(request: DescribeSlsAuthStatusRequest): DescribeSlsAuthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlsAuthStatusWithOptions(request, runtime);
}

model DescribeSlsLogstoreInfoRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeSlsLogstoreInfoResponseBody = {
  project?: string(name='Project'),
  requestId?: string(name='RequestId'),
  quota?: long(name='Quota'),
  logStore?: string(name='LogStore'),
  used?: long(name='Used'),
  ttl?: int32(name='Ttl'),
}

model DescribeSlsLogstoreInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlsLogstoreInfoResponseBody(name='body'),
}

async function describeSlsLogstoreInfoWithOptions(request: DescribeSlsLogstoreInfoRequest, runtime: Util.RuntimeOptions): DescribeSlsLogstoreInfoResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlsLogstoreInfo',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlsLogstoreInfo(request: DescribeSlsLogstoreInfoRequest): DescribeSlsLogstoreInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlsLogstoreInfoWithOptions(request, runtime);
}

model DescribeSlsOpenStatusRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeSlsOpenStatusResponseBody = {
  requestId?: string(name='RequestId'),
  slsOpenStatus?: boolean(name='SlsOpenStatus'),
}

model DescribeSlsOpenStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSlsOpenStatusResponseBody(name='body'),
}

async function describeSlsOpenStatusWithOptions(request: DescribeSlsOpenStatusRequest, runtime: Util.RuntimeOptions): DescribeSlsOpenStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSlsOpenStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSlsOpenStatus(request: DescribeSlsOpenStatusRequest): DescribeSlsOpenStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSlsOpenStatusWithOptions(request, runtime);
}

model DescribeStsGrantStatusRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  role?: string(name='Role'),
}

model DescribeStsGrantStatusResponseBody = {
  requestId?: string(name='RequestId'),
  stsGrant?: {
    status?: int32(name='Status'),
  }(name='StsGrant'),
}

model DescribeStsGrantStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStsGrantStatusResponseBody(name='body'),
}

async function describeStsGrantStatusWithOptions(request: DescribeStsGrantStatusRequest, runtime: Util.RuntimeOptions): DescribeStsGrantStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Role"] = request.role;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeStsGrantStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeStsGrantStatus(request: DescribeStsGrantStatusRequest): DescribeStsGrantStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeStsGrantStatusWithOptions(request, runtime);
}

model DescribeTagKeysRequest {
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceType?: string(name='ResourceType'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeTagKeysResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  tagKeys?: [ 
    {
      tagCount?: int32(name='TagCount'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagKeys'),
}

model DescribeTagKeysResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagKeysResponseBody(name='body'),
}

async function describeTagKeysWithOptions(request: DescribeTagKeysRequest, runtime: Util.RuntimeOptions): DescribeTagKeysResponse {
  Util.validateModel(request);
  var query = {};
  query["RegionId"] = request.regionId;
  query["ResourceGroupId"] = request.resourceGroupId;
  query["ResourceType"] = request.resourceType;
  query["PageSize"] = request.pageSize;
  query["PageNumber"] = request.pageNumber;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTagKeys',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTagKeys(request: DescribeTagKeysRequest): DescribeTagKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagKeysWithOptions(request, runtime);
}

model DescribeTagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceGroupId?: string(name='ResourceGroupId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  resourceIds?: [ string ](name='ResourceIds'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tags'),
}

model DescribeTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model DescribeTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTagResourcesResponseBody(name='body'),
}

async function describeTagResourcesWithOptions(request: DescribeTagResourcesRequest, runtime: Util.RuntimeOptions): DescribeTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  query["RegionId"] = request.regionId;
  query["ResourceGroupId"] = request.resourceGroupId;
  query["ResourceType"] = request.resourceType;
  query["NextToken"] = request.nextToken;
  query["ResourceIds"] = request.resourceIds;
  query["Tags"] = request.tags;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTagResources',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTagResources(request: DescribeTagResourcesRequest): DescribeTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTagResourcesWithOptions(request, runtime);
}

model DescribeUnBlackholeCountRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeUnBlackholeCountResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  remainCount?: int32(name='RemainCount'),
}

model DescribeUnBlackholeCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUnBlackholeCountResponseBody(name='body'),
}

async function describeUnBlackholeCountWithOptions(request: DescribeUnBlackholeCountRequest, runtime: Util.RuntimeOptions): DescribeUnBlackholeCountResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUnBlackholeCount',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUnBlackholeCount(request: DescribeUnBlackholeCountRequest): DescribeUnBlackholeCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUnBlackholeCountWithOptions(request, runtime);
}

model DescribeUnBlockCountRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeUnBlockCountResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  remainCount?: int32(name='RemainCount'),
}

model DescribeUnBlockCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUnBlockCountResponseBody(name='body'),
}

async function describeUnBlockCountWithOptions(request: DescribeUnBlockCountRequest, runtime: Util.RuntimeOptions): DescribeUnBlockCountResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUnBlockCount',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUnBlockCount(request: DescribeUnBlockCountRequest): DescribeUnBlockCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUnBlockCountWithOptions(request, runtime);
}

model DescribeWebAccessLogDispatchStatusRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeWebAccessLogDispatchStatusResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  slsConfigStatus?: [ 
    {
      domain?: string(name='Domain'),
      enable?: boolean(name='Enable'),
    }
  ](name='SlsConfigStatus'),
}

model DescribeWebAccessLogDispatchStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebAccessLogDispatchStatusResponseBody(name='body'),
}

async function describeWebAccessLogDispatchStatusWithOptions(request: DescribeWebAccessLogDispatchStatusRequest, runtime: Util.RuntimeOptions): DescribeWebAccessLogDispatchStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebAccessLogDispatchStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebAccessLogDispatchStatus(request: DescribeWebAccessLogDispatchStatusRequest): DescribeWebAccessLogDispatchStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebAccessLogDispatchStatusWithOptions(request, runtime);
}

model DescribeWebAccessLogEmptyCountRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeWebAccessLogEmptyCountResponseBody = {
  requestId?: string(name='RequestId'),
  availableCount?: int32(name='AvailableCount'),
}

model DescribeWebAccessLogEmptyCountResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebAccessLogEmptyCountResponseBody(name='body'),
}

async function describeWebAccessLogEmptyCountWithOptions(request: DescribeWebAccessLogEmptyCountRequest, runtime: Util.RuntimeOptions): DescribeWebAccessLogEmptyCountResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebAccessLogEmptyCount',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebAccessLogEmptyCount(request: DescribeWebAccessLogEmptyCountRequest): DescribeWebAccessLogEmptyCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebAccessLogEmptyCountWithOptions(request, runtime);
}

model DescribeWebAccessLogStatusRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
}

model DescribeWebAccessLogStatusResponseBody = {
  slsProject?: string(name='SlsProject'),
  slsStatus?: boolean(name='SlsStatus'),
  requestId?: string(name='RequestId'),
  slsLogstore?: string(name='SlsLogstore'),
}

model DescribeWebAccessLogStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebAccessLogStatusResponseBody(name='body'),
}

async function describeWebAccessLogStatusWithOptions(request: DescribeWebAccessLogStatusRequest, runtime: Util.RuntimeOptions): DescribeWebAccessLogStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebAccessLogStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebAccessLogStatus(request: DescribeWebAccessLogStatusRequest): DescribeWebAccessLogStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebAccessLogStatusWithOptions(request, runtime);
}

model DescribeWebAccessModeRequest {
  domains?: [ string ](name='Domains'),
}

model DescribeWebAccessModeResponseBody = {
  requestId?: string(name='RequestId'),
  domainModes?: [ 
    {
      accessMode?: int32(name='AccessMode'),
      domain?: string(name='Domain'),
    }
  ](name='DomainModes'),
}

model DescribeWebAccessModeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebAccessModeResponseBody(name='body'),
}

async function describeWebAccessModeWithOptions(request: DescribeWebAccessModeRequest, runtime: Util.RuntimeOptions): DescribeWebAccessModeResponse {
  Util.validateModel(request);
  var query = {};
  query["Domains"] = request.domains;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebAccessMode',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebAccessMode(request: DescribeWebAccessModeRequest): DescribeWebAccessModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebAccessModeWithOptions(request, runtime);
}

model DescribeWebAreaBlockConfigsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domains?: [ string ](name='Domains'),
}

model DescribeWebAreaBlockConfigsResponseBody = {
  areaBlockConfigs?: [ 
    {
      domain?: string(name='Domain'),
      regionList?: [ 
        {
          block?: int32(name='Block'),
          region?: string(name='Region'),
        }
      ](name='RegionList'),
    }
  ](name='AreaBlockConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeWebAreaBlockConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebAreaBlockConfigsResponseBody(name='body'),
}

async function describeWebAreaBlockConfigsWithOptions(request: DescribeWebAreaBlockConfigsRequest, runtime: Util.RuntimeOptions): DescribeWebAreaBlockConfigsResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domains"] = request.domains;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebAreaBlockConfigs',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebAreaBlockConfigs(request: DescribeWebAreaBlockConfigsRequest): DescribeWebAreaBlockConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebAreaBlockConfigsWithOptions(request, runtime);
}

model DescribeWebCacheConfigsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domains?: [ string ](name='Domains'),
}

model DescribeWebCacheConfigsResponseBody = {
  requestId?: string(name='RequestId'),
  domainCacheConfigs?: [ 
    {
      domain?: string(name='Domain'),
      customRules?: [ 
        {
          cacheTtl?: long(name='CacheTtl'),
          mode?: string(name='Mode'),
          name?: string(name='Name'),
          uri?: string(name='Uri'),
        }
      ](name='CustomRules'),
      mode?: string(name='Mode'),
      enable?: int32(name='Enable'),
    }
  ](name='DomainCacheConfigs'),
}

model DescribeWebCacheConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebCacheConfigsResponseBody(name='body'),
}

async function describeWebCacheConfigsWithOptions(request: DescribeWebCacheConfigsRequest, runtime: Util.RuntimeOptions): DescribeWebCacheConfigsResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domains"] = request.domains;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebCacheConfigs',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebCacheConfigs(request: DescribeWebCacheConfigsRequest): DescribeWebCacheConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebCacheConfigsWithOptions(request, runtime);
}

model DescribeWebCcProtectSwitchRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domains?: [ string ](name='Domains'),
}

model DescribeWebCcProtectSwitchResponseBody = {
  requestId?: string(name='RequestId'),
  protectSwitchList?: [ 
    {
      blackWhiteListEnable?: int32(name='BlackWhiteListEnable'),
      aiTemplate?: string(name='AiTemplate'),
      preciseRuleEnable?: int32(name='PreciseRuleEnable'),
      domain?: string(name='Domain'),
      aiMode?: string(name='AiMode'),
      aiRuleEnable?: int32(name='AiRuleEnable'),
      regionBlockEnable?: int32(name='RegionBlockEnable'),
      ccTemplate?: string(name='CcTemplate'),
      ccCustomRuleEnable?: int32(name='CcCustomRuleEnable'),
      ccEnable?: int32(name='CcEnable'),
    }
  ](name='ProtectSwitchList'),
}

model DescribeWebCcProtectSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebCcProtectSwitchResponseBody(name='body'),
}

async function describeWebCcProtectSwitchWithOptions(request: DescribeWebCcProtectSwitchRequest, runtime: Util.RuntimeOptions): DescribeWebCcProtectSwitchResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domains"] = request.domains;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebCcProtectSwitch',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebCcProtectSwitch(request: DescribeWebCcProtectSwitchRequest): DescribeWebCcProtectSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebCcProtectSwitchWithOptions(request, runtime);
}

model DescribeWebCCRulesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: string(name='PageSize'),
}

model DescribeWebCCRulesResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  webCCRules?: [ 
    {
      ttl?: int32(name='Ttl'),
      act?: string(name='Act'),
      interval?: int32(name='Interval'),
      mode?: string(name='Mode'),
      name?: string(name='Name'),
      uri?: string(name='Uri'),
      count?: int32(name='Count'),
    }
  ](name='WebCCRules'),
}

model DescribeWebCCRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebCCRulesResponseBody(name='body'),
}

async function describeWebCCRulesWithOptions(request: DescribeWebCCRulesRequest, runtime: Util.RuntimeOptions): DescribeWebCCRulesResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebCCRules',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebCCRules(request: DescribeWebCCRulesRequest): DescribeWebCCRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebCCRulesWithOptions(request, runtime);
}

model DescribeWebCustomPortsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model DescribeWebCustomPortsResponseBody = {
  requestId?: string(name='RequestId'),
  webCustomPorts?: [ 
    {
      proxyPorts?: [ string ](name='ProxyPorts'),
      proxyType?: string(name='ProxyType'),
    }
  ](name='WebCustomPorts'),
}

model DescribeWebCustomPortsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebCustomPortsResponseBody(name='body'),
}

async function describeWebCustomPortsWithOptions(request: DescribeWebCustomPortsRequest, runtime: Util.RuntimeOptions): DescribeWebCustomPortsResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebCustomPorts',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebCustomPorts(request: DescribeWebCustomPortsRequest): DescribeWebCustomPortsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebCustomPortsWithOptions(request, runtime);
}

model DescribeWebInstanceRelationsRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domains?: [ string ](name='Domains'),
}

model DescribeWebInstanceRelationsResponseBody = {
  requestId?: string(name='RequestId'),
  webInstanceRelations?: [ 
    {
      domain?: string(name='Domain'),
      instanceDetails?: [ 
        {
          eipList?: [ string ](name='EipList'),
          functionVersion?: string(name='FunctionVersion'),
          instanceId?: string(name='InstanceId'),
        }
      ](name='InstanceDetails'),
    }
  ](name='WebInstanceRelations'),
}

model DescribeWebInstanceRelationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebInstanceRelationsResponseBody(name='body'),
}

async function describeWebInstanceRelationsWithOptions(request: DescribeWebInstanceRelationsRequest, runtime: Util.RuntimeOptions): DescribeWebInstanceRelationsResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domains"] = request.domains;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebInstanceRelations',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebInstanceRelations(request: DescribeWebInstanceRelationsRequest): DescribeWebInstanceRelationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebInstanceRelationsWithOptions(request, runtime);
}

model DescribeWebPreciseAccessRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domains?: [ string ](name='Domains'),
}

model DescribeWebPreciseAccessRuleResponseBody = {
  preciseAccessConfigList?: [ 
    {
      domain?: string(name='Domain'),
      ruleList?: [ 
        {
          action?: string(name='Action'),
          owner?: string(name='Owner'),
          expires?: long(name='Expires'),
          name?: string(name='Name'),
          conditionList?: [ 
            {
              matchMethod?: string(name='MatchMethod'),
              field?: string(name='Field'),
              content?: string(name='Content'),
              headerName?: string(name='HeaderName'),
            }
          ](name='ConditionList'),
        }
      ](name='RuleList'),
    }
  ](name='PreciseAccessConfigList'),
  requestId?: string(name='RequestId'),
}

model DescribeWebPreciseAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebPreciseAccessRuleResponseBody(name='body'),
}

async function describeWebPreciseAccessRuleWithOptions(request: DescribeWebPreciseAccessRuleRequest, runtime: Util.RuntimeOptions): DescribeWebPreciseAccessRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domains"] = request.domains;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebPreciseAccessRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebPreciseAccessRule(request: DescribeWebPreciseAccessRuleRequest): DescribeWebPreciseAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebPreciseAccessRuleWithOptions(request, runtime);
}

model DescribeWebRulesRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  queryDomainPattern?: string(name='QueryDomainPattern'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model DescribeWebRulesResponseBody = {
  totalCount?: long(name='TotalCount'),
  webRules?: [ 
    {
      domain?: string(name='Domain'),
      http2HttpsEnable?: boolean(name='Http2HttpsEnable'),
      customCiphers?: [ string ](name='CustomCiphers'),
      blackList?: [ string ](name='BlackList'),
      whiteList?: [ string ](name='WhiteList'),
      realServers?: [ 
        {
          rsType?: int32(name='RsType'),
          realServer?: string(name='RealServer'),
        }
      ](name='RealServers'),
      proxyTypes?: [ 
        {
          proxyPorts?: [ string ](name='ProxyPorts'),
          proxyType?: string(name='ProxyType'),
        }
      ](name='ProxyTypes'),
      sslProtocols?: string(name='SslProtocols'),
      ccTemplate?: string(name='CcTemplate'),
      ccEnabled?: boolean(name='CcEnabled'),
      sslCiphers?: string(name='SslCiphers'),
      ccRuleEnabled?: boolean(name='CcRuleEnabled'),
      ssl13Enabled?: boolean(name='Ssl13Enabled'),
      proxyEnabled?: boolean(name='ProxyEnabled'),
      certName?: string(name='CertName'),
      policyMode?: string(name='PolicyMode'),
      cname?: string(name='Cname'),
      http2Enable?: boolean(name='Http2Enable'),
      https2HttpEnable?: boolean(name='Https2HttpEnable'),
    }
  ](name='WebRules'),
  requestId?: string(name='RequestId'),
}

model DescribeWebRulesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeWebRulesResponseBody(name='body'),
}

async function describeWebRulesWithOptions(request: DescribeWebRulesRequest, runtime: Util.RuntimeOptions): DescribeWebRulesResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["QueryDomainPattern"] = request.queryDomainPattern;
  query["PageNumber"] = request.pageNumber;
  query["PageSize"] = request.pageSize;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeWebRules',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeWebRules(request: DescribeWebRulesRequest): DescribeWebRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeWebRulesWithOptions(request, runtime);
}

model DetachSceneDefenseObjectRequest {
  policyId?: string(name='PolicyId'),
  objectType?: string(name='ObjectType'),
  objects?: string(name='Objects'),
}

model DetachSceneDefenseObjectResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DetachSceneDefenseObjectResponse = {
  headers: map[string]string(name='headers'),
  body: DetachSceneDefenseObjectResponseBody(name='body'),
}

async function detachSceneDefenseObjectWithOptions(request: DetachSceneDefenseObjectRequest, runtime: Util.RuntimeOptions): DetachSceneDefenseObjectResponse {
  Util.validateModel(request);
  var query = {};
  query["PolicyId"] = request.policyId;
  query["ObjectType"] = request.objectType;
  query["Objects"] = request.objects;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DetachSceneDefenseObject',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachSceneDefenseObject(request: DetachSceneDefenseObjectRequest): DetachSceneDefenseObjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachSceneDefenseObjectWithOptions(request, runtime);
}

model DisableSceneDefensePolicyRequest {
  policyId?: string(name='PolicyId'),
}

model DisableSceneDefensePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableSceneDefensePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DisableSceneDefensePolicyResponseBody(name='body'),
}

async function disableSceneDefensePolicyWithOptions(request: DisableSceneDefensePolicyRequest, runtime: Util.RuntimeOptions): DisableSceneDefensePolicyResponse {
  Util.validateModel(request);
  var query = {};
  query["PolicyId"] = request.policyId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DisableSceneDefensePolicy',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableSceneDefensePolicy(request: DisableSceneDefensePolicyRequest): DisableSceneDefensePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableSceneDefensePolicyWithOptions(request, runtime);
}

model DisableWebAccessLogConfigRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
}

model DisableWebAccessLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableWebAccessLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DisableWebAccessLogConfigResponseBody(name='body'),
}

async function disableWebAccessLogConfigWithOptions(request: DisableWebAccessLogConfigRequest, runtime: Util.RuntimeOptions): DisableWebAccessLogConfigResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DisableWebAccessLogConfig',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableWebAccessLogConfig(request: DisableWebAccessLogConfigRequest): DisableWebAccessLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableWebAccessLogConfigWithOptions(request, runtime);
}

model DisableWebCCRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
}

model DisableWebCCResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableWebCCResponse = {
  headers: map[string]string(name='headers'),
  body: DisableWebCCResponseBody(name='body'),
}

async function disableWebCCWithOptions(request: DisableWebCCRequest, runtime: Util.RuntimeOptions): DisableWebCCResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DisableWebCC',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableWebCC(request: DisableWebCCRequest): DisableWebCCResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableWebCCWithOptions(request, runtime);
}

model DisableWebCCRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
}

model DisableWebCCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableWebCCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DisableWebCCRuleResponseBody(name='body'),
}

async function disableWebCCRuleWithOptions(request: DisableWebCCRuleRequest, runtime: Util.RuntimeOptions): DisableWebCCRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DisableWebCCRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableWebCCRule(request: DisableWebCCRuleRequest): DisableWebCCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableWebCCRuleWithOptions(request, runtime);
}

model EmptyAutoCcBlacklistRequest {
  instanceId?: string(name='InstanceId'),
}

model EmptyAutoCcBlacklistResponseBody = {
  requestId?: string(name='RequestId'),
}

model EmptyAutoCcBlacklistResponse = {
  headers: map[string]string(name='headers'),
  body: EmptyAutoCcBlacklistResponseBody(name='body'),
}

async function emptyAutoCcBlacklistWithOptions(request: EmptyAutoCcBlacklistRequest, runtime: Util.RuntimeOptions): EmptyAutoCcBlacklistResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'EmptyAutoCcBlacklist',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function emptyAutoCcBlacklist(request: EmptyAutoCcBlacklistRequest): EmptyAutoCcBlacklistResponse {
  var runtime = new Util.RuntimeOptions{};
  return emptyAutoCcBlacklistWithOptions(request, runtime);
}

model EmptyAutoCcWhitelistRequest {
  instanceId?: string(name='InstanceId'),
}

model EmptyAutoCcWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model EmptyAutoCcWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: EmptyAutoCcWhitelistResponseBody(name='body'),
}

async function emptyAutoCcWhitelistWithOptions(request: EmptyAutoCcWhitelistRequest, runtime: Util.RuntimeOptions): EmptyAutoCcWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'EmptyAutoCcWhitelist',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function emptyAutoCcWhitelist(request: EmptyAutoCcWhitelistRequest): EmptyAutoCcWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return emptyAutoCcWhitelistWithOptions(request, runtime);
}

model EmptySlsLogstoreRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
}

model EmptySlsLogstoreResponseBody = {
  requestId?: string(name='RequestId'),
}

model EmptySlsLogstoreResponse = {
  headers: map[string]string(name='headers'),
  body: EmptySlsLogstoreResponseBody(name='body'),
}

async function emptySlsLogstoreWithOptions(request: EmptySlsLogstoreRequest, runtime: Util.RuntimeOptions): EmptySlsLogstoreResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'EmptySlsLogstore',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function emptySlsLogstore(request: EmptySlsLogstoreRequest): EmptySlsLogstoreResponse {
  var runtime = new Util.RuntimeOptions{};
  return emptySlsLogstoreWithOptions(request, runtime);
}

model EnableSceneDefensePolicyRequest {
  policyId?: string(name='PolicyId'),
}

model EnableSceneDefensePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableSceneDefensePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: EnableSceneDefensePolicyResponseBody(name='body'),
}

async function enableSceneDefensePolicyWithOptions(request: EnableSceneDefensePolicyRequest, runtime: Util.RuntimeOptions): EnableSceneDefensePolicyResponse {
  Util.validateModel(request);
  var query = {};
  query["PolicyId"] = request.policyId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'EnableSceneDefensePolicy',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableSceneDefensePolicy(request: EnableSceneDefensePolicyRequest): EnableSceneDefensePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableSceneDefensePolicyWithOptions(request, runtime);
}

model EnableWebAccessLogConfigRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
}

model EnableWebAccessLogConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableWebAccessLogConfigResponse = {
  headers: map[string]string(name='headers'),
  body: EnableWebAccessLogConfigResponseBody(name='body'),
}

async function enableWebAccessLogConfigWithOptions(request: EnableWebAccessLogConfigRequest, runtime: Util.RuntimeOptions): EnableWebAccessLogConfigResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'EnableWebAccessLogConfig',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableWebAccessLogConfig(request: EnableWebAccessLogConfigRequest): EnableWebAccessLogConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableWebAccessLogConfigWithOptions(request, runtime);
}

model EnableWebCCRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
}

model EnableWebCCResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableWebCCResponse = {
  headers: map[string]string(name='headers'),
  body: EnableWebCCResponseBody(name='body'),
}

async function enableWebCCWithOptions(request: EnableWebCCRequest, runtime: Util.RuntimeOptions): EnableWebCCResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'EnableWebCC',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableWebCC(request: EnableWebCCRequest): EnableWebCCResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableWebCCWithOptions(request, runtime);
}

model EnableWebCCRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
}

model EnableWebCCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableWebCCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: EnableWebCCRuleResponseBody(name='body'),
}

async function enableWebCCRuleWithOptions(request: EnableWebCCRuleRequest, runtime: Util.RuntimeOptions): EnableWebCCRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'EnableWebCCRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableWebCCRule(request: EnableWebCCRuleRequest): EnableWebCCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableWebCCRuleWithOptions(request, runtime);
}

model ModifyBlackholeStatusRequest {
  blackholeStatus?: string(name='BlackholeStatus'),
  instanceId?: string(name='InstanceId'),
}

model ModifyBlackholeStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBlackholeStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBlackholeStatusResponseBody(name='body'),
}

async function modifyBlackholeStatusWithOptions(request: ModifyBlackholeStatusRequest, runtime: Util.RuntimeOptions): ModifyBlackholeStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["BlackholeStatus"] = request.blackholeStatus;
  query["InstanceId"] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBlackholeStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBlackholeStatus(request: ModifyBlackholeStatusRequest): ModifyBlackholeStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBlackholeStatusWithOptions(request, runtime);
}

model ModifyBlockStatusRequest {
  status?: string(name='Status'),
  duration?: int32(name='Duration'),
  instanceId?: string(name='InstanceId'),
  lines?: [ string ](name='Lines'),
}

model ModifyBlockStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBlockStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBlockStatusResponseBody(name='body'),
}

async function modifyBlockStatusWithOptions(request: ModifyBlockStatusRequest, runtime: Util.RuntimeOptions): ModifyBlockStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["Status"] = request.status;
  query["Duration"] = request.duration;
  query["InstanceId"] = request.instanceId;
  query["Lines"] = request.lines;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyBlockStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyBlockStatus(request: ModifyBlockStatusRequest): ModifyBlockStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBlockStatusWithOptions(request, runtime);
}

model ModifyCnameReuseRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  cname?: string(name='Cname'),
  enable?: int32(name='Enable'),
}

model ModifyCnameReuseResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCnameReuseResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCnameReuseResponseBody(name='body'),
}

async function modifyCnameReuseWithOptions(request: ModifyCnameReuseRequest, runtime: Util.RuntimeOptions): ModifyCnameReuseResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Cname"] = request.cname;
  query["Enable"] = request.enable;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCnameReuse',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCnameReuse(request: ModifyCnameReuseRequest): ModifyCnameReuseResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCnameReuseWithOptions(request, runtime);
}

model ModifyElasticBandWidthRequest {
  elasticBandwidth?: int32(name='ElasticBandwidth'),
  instanceId?: string(name='InstanceId'),
}

model ModifyElasticBandWidthResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyElasticBandWidthResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyElasticBandWidthResponseBody(name='body'),
}

async function modifyElasticBandWidthWithOptions(request: ModifyElasticBandWidthRequest, runtime: Util.RuntimeOptions): ModifyElasticBandWidthResponse {
  Util.validateModel(request);
  var query = {};
  query["ElasticBandwidth"] = request.elasticBandwidth;
  query["InstanceId"] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyElasticBandWidth',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyElasticBandWidth(request: ModifyElasticBandWidthRequest): ModifyElasticBandWidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyElasticBandWidthWithOptions(request, runtime);
}

model ModifyFullLogTtlRequest {
  ttl?: int32(name='Ttl'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model ModifyFullLogTtlResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyFullLogTtlResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFullLogTtlResponseBody(name='body'),
}

async function modifyFullLogTtlWithOptions(request: ModifyFullLogTtlRequest, runtime: Util.RuntimeOptions): ModifyFullLogTtlResponse {
  Util.validateModel(request);
  var query = {};
  query["Ttl"] = request.ttl;
  query["ResourceGroupId"] = request.resourceGroupId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFullLogTtl',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyFullLogTtl(request: ModifyFullLogTtlRequest): ModifyFullLogTtlResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFullLogTtlWithOptions(request, runtime);
}

model ModifyHealthCheckConfigRequest {
  instanceId?: string(name='InstanceId'),
  forwardProtocol?: string(name='ForwardProtocol'),
  frontendPort?: int32(name='FrontendPort'),
  healthCheck?: string(name='HealthCheck'),
}

model ModifyHealthCheckConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHealthCheckConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHealthCheckConfigResponseBody(name='body'),
}

async function modifyHealthCheckConfigWithOptions(request: ModifyHealthCheckConfigRequest, runtime: Util.RuntimeOptions): ModifyHealthCheckConfigResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  query["ForwardProtocol"] = request.forwardProtocol;
  query["FrontendPort"] = request.frontendPort;
  query["HealthCheck"] = request.healthCheck;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyHealthCheckConfig',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyHealthCheckConfig(request: ModifyHealthCheckConfigRequest): ModifyHealthCheckConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHealthCheckConfigWithOptions(request, runtime);
}

model ModifyHttp2EnableRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  enable?: int32(name='Enable'),
}

model ModifyHttp2EnableResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyHttp2EnableResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyHttp2EnableResponseBody(name='body'),
}

async function modifyHttp2EnableWithOptions(request: ModifyHttp2EnableRequest, runtime: Util.RuntimeOptions): ModifyHttp2EnableResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Enable"] = request.enable;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyHttp2Enable',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyHttp2Enable(request: ModifyHttp2EnableRequest): ModifyHttp2EnableResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyHttp2EnableWithOptions(request, runtime);
}

model ModifyInstanceRemarkRequest {
  instanceId?: string(name='InstanceId'),
  remark?: string(name='Remark'),
}

model ModifyInstanceRemarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceRemarkResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceRemarkResponseBody(name='body'),
}

async function modifyInstanceRemarkWithOptions(request: ModifyInstanceRemarkRequest, runtime: Util.RuntimeOptions): ModifyInstanceRemarkResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  query["Remark"] = request.remark;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstanceRemark',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstanceRemark(request: ModifyInstanceRemarkRequest): ModifyInstanceRemarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceRemarkWithOptions(request, runtime);
}

model ModifyNetworkRuleAttributeRequest {
  instanceId?: string(name='InstanceId'),
  forwardProtocol?: string(name='ForwardProtocol'),
  frontendPort?: int32(name='FrontendPort'),
  config?: string(name='Config'),
}

model ModifyNetworkRuleAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyNetworkRuleAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyNetworkRuleAttributeResponseBody(name='body'),
}

async function modifyNetworkRuleAttributeWithOptions(request: ModifyNetworkRuleAttributeRequest, runtime: Util.RuntimeOptions): ModifyNetworkRuleAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  query["ForwardProtocol"] = request.forwardProtocol;
  query["FrontendPort"] = request.frontendPort;
  query["Config"] = request.config;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyNetworkRuleAttribute',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyNetworkRuleAttribute(request: ModifyNetworkRuleAttributeRequest): ModifyNetworkRuleAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyNetworkRuleAttributeWithOptions(request, runtime);
}

model ModifyPortAutoCcStatusRequest {
  instanceId?: string(name='InstanceId'),
  switch?: string(name='Switch'),
  mode?: string(name='Mode'),
}

model ModifyPortAutoCcStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyPortAutoCcStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPortAutoCcStatusResponseBody(name='body'),
}

async function modifyPortAutoCcStatusWithOptions(request: ModifyPortAutoCcStatusRequest, runtime: Util.RuntimeOptions): ModifyPortAutoCcStatusResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  query["Switch"] = request.switch;
  query["Mode"] = request.mode;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPortAutoCcStatus',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyPortAutoCcStatus(request: ModifyPortAutoCcStatusRequest): ModifyPortAutoCcStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPortAutoCcStatusWithOptions(request, runtime);
}

model ModifySceneDefensePolicyRequest {
  policyId?: string(name='PolicyId'),
  name?: string(name='Name'),
  template?: string(name='Template'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
}

model ModifySceneDefensePolicyResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifySceneDefensePolicyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySceneDefensePolicyResponseBody(name='body'),
}

async function modifySceneDefensePolicyWithOptions(request: ModifySceneDefensePolicyRequest, runtime: Util.RuntimeOptions): ModifySceneDefensePolicyResponse {
  Util.validateModel(request);
  var query = {};
  query["PolicyId"] = request.policyId;
  query["Name"] = request.name;
  query["Template"] = request.template;
  query["StartTime"] = request.startTime;
  query["EndTime"] = request.endTime;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifySceneDefensePolicy',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySceneDefensePolicy(request: ModifySceneDefensePolicyRequest): ModifySceneDefensePolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySceneDefensePolicyWithOptions(request, runtime);
}

model ModifySchedulerRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  rules?: string(name='Rules'),
  ruleName?: string(name='RuleName'),
  ruleType?: int32(name='RuleType'),
  param?: string(name='Param'),
}

model ModifySchedulerRuleResponseBody = {
  requestId?: string(name='RequestId'),
  cname?: string(name='Cname'),
  ruleName?: string(name='RuleName'),
}

model ModifySchedulerRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySchedulerRuleResponseBody(name='body'),
}

async function modifySchedulerRuleWithOptions(request: ModifySchedulerRuleRequest, runtime: Util.RuntimeOptions): ModifySchedulerRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Rules"] = request.rules;
  query["RuleName"] = request.ruleName;
  query["RuleType"] = request.ruleType;
  query["Param"] = request.param;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifySchedulerRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySchedulerRule(request: ModifySchedulerRuleRequest): ModifySchedulerRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySchedulerRuleWithOptions(request, runtime);
}

model ModifyTlsConfigRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  config?: string(name='Config'),
}

model ModifyTlsConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyTlsConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTlsConfigResponseBody(name='body'),
}

async function modifyTlsConfigWithOptions(request: ModifyTlsConfigRequest, runtime: Util.RuntimeOptions): ModifyTlsConfigResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Config"] = request.config;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTlsConfig',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTlsConfig(request: ModifyTlsConfigRequest): ModifyTlsConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTlsConfigWithOptions(request, runtime);
}

model ModifyWebAccessModeRequest {
  domain?: string(name='Domain'),
  accessMode?: int32(name='AccessMode'),
}

model ModifyWebAccessModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebAccessModeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebAccessModeResponseBody(name='body'),
}

async function modifyWebAccessModeWithOptions(request: ModifyWebAccessModeRequest, runtime: Util.RuntimeOptions): ModifyWebAccessModeResponse {
  Util.validateModel(request);
  var query = {};
  query["Domain"] = request.domain;
  query["AccessMode"] = request.accessMode;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebAccessMode',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebAccessMode(request: ModifyWebAccessModeRequest): ModifyWebAccessModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebAccessModeWithOptions(request, runtime);
}

model ModifyWebAIProtectModeRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  config?: string(name='Config'),
}

model ModifyWebAIProtectModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebAIProtectModeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebAIProtectModeResponseBody(name='body'),
}

async function modifyWebAIProtectModeWithOptions(request: ModifyWebAIProtectModeRequest, runtime: Util.RuntimeOptions): ModifyWebAIProtectModeResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Config"] = request.config;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebAIProtectMode',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebAIProtectMode(request: ModifyWebAIProtectModeRequest): ModifyWebAIProtectModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebAIProtectModeWithOptions(request, runtime);
}

model ModifyWebAIProtectSwitchRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  config?: string(name='Config'),
}

model ModifyWebAIProtectSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebAIProtectSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebAIProtectSwitchResponseBody(name='body'),
}

async function modifyWebAIProtectSwitchWithOptions(request: ModifyWebAIProtectSwitchRequest, runtime: Util.RuntimeOptions): ModifyWebAIProtectSwitchResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Config"] = request.config;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebAIProtectSwitch',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebAIProtectSwitch(request: ModifyWebAIProtectSwitchRequest): ModifyWebAIProtectSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebAIProtectSwitchWithOptions(request, runtime);
}

model ModifyWebAreaBlockRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  regions?: [ string ](name='Regions'),
}

model ModifyWebAreaBlockResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebAreaBlockResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebAreaBlockResponseBody(name='body'),
}

async function modifyWebAreaBlockWithOptions(request: ModifyWebAreaBlockRequest, runtime: Util.RuntimeOptions): ModifyWebAreaBlockResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Regions"] = request.regions;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebAreaBlock',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebAreaBlock(request: ModifyWebAreaBlockRequest): ModifyWebAreaBlockResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebAreaBlockWithOptions(request, runtime);
}

model ModifyWebAreaBlockSwitchRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  config?: string(name='Config'),
}

model ModifyWebAreaBlockSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebAreaBlockSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebAreaBlockSwitchResponseBody(name='body'),
}

async function modifyWebAreaBlockSwitchWithOptions(request: ModifyWebAreaBlockSwitchRequest, runtime: Util.RuntimeOptions): ModifyWebAreaBlockSwitchResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Config"] = request.config;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebAreaBlockSwitch',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebAreaBlockSwitch(request: ModifyWebAreaBlockSwitchRequest): ModifyWebAreaBlockSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebAreaBlockSwitchWithOptions(request, runtime);
}

model ModifyWebCacheCustomRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  rules?: string(name='Rules'),
}

model ModifyWebCacheCustomRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebCacheCustomRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebCacheCustomRuleResponseBody(name='body'),
}

async function modifyWebCacheCustomRuleWithOptions(request: ModifyWebCacheCustomRuleRequest, runtime: Util.RuntimeOptions): ModifyWebCacheCustomRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Rules"] = request.rules;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebCacheCustomRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebCacheCustomRule(request: ModifyWebCacheCustomRuleRequest): ModifyWebCacheCustomRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebCacheCustomRuleWithOptions(request, runtime);
}

model ModifyWebCacheModeRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  mode?: string(name='Mode'),
}

model ModifyWebCacheModeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebCacheModeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebCacheModeResponseBody(name='body'),
}

async function modifyWebCacheModeWithOptions(request: ModifyWebCacheModeRequest, runtime: Util.RuntimeOptions): ModifyWebCacheModeResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Mode"] = request.mode;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebCacheMode',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebCacheMode(request: ModifyWebCacheModeRequest): ModifyWebCacheModeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebCacheModeWithOptions(request, runtime);
}

model ModifyWebCacheSwitchRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  enable?: int32(name='Enable'),
}

model ModifyWebCacheSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebCacheSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebCacheSwitchResponseBody(name='body'),
}

async function modifyWebCacheSwitchWithOptions(request: ModifyWebCacheSwitchRequest, runtime: Util.RuntimeOptions): ModifyWebCacheSwitchResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Enable"] = request.enable;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebCacheSwitch',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebCacheSwitch(request: ModifyWebCacheSwitchRequest): ModifyWebCacheSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebCacheSwitchWithOptions(request, runtime);
}

model ModifyWebCCRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  name?: string(name='Name'),
  act?: string(name='Act'),
  count?: int32(name='Count'),
  interval?: int32(name='Interval'),
  mode?: string(name='Mode'),
  ttl?: int32(name='Ttl'),
  uri?: string(name='Uri'),
}

model ModifyWebCCRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebCCRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebCCRuleResponseBody(name='body'),
}

async function modifyWebCCRuleWithOptions(request: ModifyWebCCRuleRequest, runtime: Util.RuntimeOptions): ModifyWebCCRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Name"] = request.name;
  query["Act"] = request.act;
  query["Count"] = request.count;
  query["Interval"] = request.interval;
  query["Mode"] = request.mode;
  query["Ttl"] = request.ttl;
  query["Uri"] = request.uri;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebCCRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebCCRule(request: ModifyWebCCRuleRequest): ModifyWebCCRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebCCRuleWithOptions(request, runtime);
}

model ModifyWebIpSetSwitchRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  config?: string(name='Config'),
}

model ModifyWebIpSetSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebIpSetSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebIpSetSwitchResponseBody(name='body'),
}

async function modifyWebIpSetSwitchWithOptions(request: ModifyWebIpSetSwitchRequest, runtime: Util.RuntimeOptions): ModifyWebIpSetSwitchResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Config"] = request.config;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebIpSetSwitch',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebIpSetSwitch(request: ModifyWebIpSetSwitchRequest): ModifyWebIpSetSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebIpSetSwitchWithOptions(request, runtime);
}

model ModifyWebPreciseAccessRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  rules?: string(name='Rules'),
  expires?: int32(name='Expires'),
}

model ModifyWebPreciseAccessRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebPreciseAccessRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebPreciseAccessRuleResponseBody(name='body'),
}

async function modifyWebPreciseAccessRuleWithOptions(request: ModifyWebPreciseAccessRuleRequest, runtime: Util.RuntimeOptions): ModifyWebPreciseAccessRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Rules"] = request.rules;
  query["Expires"] = request.expires;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebPreciseAccessRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebPreciseAccessRule(request: ModifyWebPreciseAccessRuleRequest): ModifyWebPreciseAccessRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebPreciseAccessRuleWithOptions(request, runtime);
}

model ModifyWebPreciseAccessSwitchRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  config?: string(name='Config'),
}

model ModifyWebPreciseAccessSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebPreciseAccessSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebPreciseAccessSwitchResponseBody(name='body'),
}

async function modifyWebPreciseAccessSwitchWithOptions(request: ModifyWebPreciseAccessSwitchRequest, runtime: Util.RuntimeOptions): ModifyWebPreciseAccessSwitchResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["Config"] = request.config;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebPreciseAccessSwitch',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebPreciseAccessSwitch(request: ModifyWebPreciseAccessSwitchRequest): ModifyWebPreciseAccessSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebPreciseAccessSwitchWithOptions(request, runtime);
}

model ModifyWebRuleRequest {
  resourceGroupId?: string(name='ResourceGroupId'),
  domain?: string(name='Domain'),
  proxyTypes?: string(name='ProxyTypes'),
  rsType?: int32(name='RsType'),
  httpsExt?: string(name='HttpsExt'),
  realServers?: [ string ](name='RealServers'),
  instanceIds?: [ string ](name='InstanceIds'),
}

model ModifyWebRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyWebRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyWebRuleResponseBody(name='body'),
}

async function modifyWebRuleWithOptions(request: ModifyWebRuleRequest, runtime: Util.RuntimeOptions): ModifyWebRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["ResourceGroupId"] = request.resourceGroupId;
  query["Domain"] = request.domain;
  query["ProxyTypes"] = request.proxyTypes;
  query["RsType"] = request.rsType;
  query["HttpsExt"] = request.httpsExt;
  query["RealServers"] = request.realServers;
  query["InstanceIds"] = request.instanceIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ModifyWebRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyWebRule(request: ModifyWebRuleRequest): ModifyWebRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyWebRuleWithOptions(request, runtime);
}

model ReleaseInstanceRequest {
  instanceId?: string(name='InstanceId'),
}

model ReleaseInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstanceWithOptions(request: ReleaseInstanceRequest, runtime: Util.RuntimeOptions): ReleaseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query["InstanceId"] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstance',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceWithOptions(request, runtime);
}

model SwitchSchedulerRuleRequest {
  ruleName?: string(name='RuleName'),
  ruleType?: int32(name='RuleType'),
  switchData?: string(name='SwitchData'),
}

model SwitchSchedulerRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchSchedulerRuleResponse = {
  headers: map[string]string(name='headers'),
  body: SwitchSchedulerRuleResponseBody(name='body'),
}

async function switchSchedulerRuleWithOptions(request: SwitchSchedulerRuleRequest, runtime: Util.RuntimeOptions): SwitchSchedulerRuleResponse {
  Util.validateModel(request);
  var query = {};
  query["RuleName"] = request.ruleName;
  query["RuleType"] = request.ruleType;
  query["SwitchData"] = request.switchData;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SwitchSchedulerRule',
    version = '2020-01-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function switchSchedulerRule(request: SwitchSchedulerRuleRequest): SwitchSchedulerRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchSchedulerRuleWithOptions(request, runtime);
}

