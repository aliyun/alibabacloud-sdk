/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'imageenhan';
  @version = '2019-09-30';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model GenerateImageWithTextRequest {
  number?: int32(name='Number', example='1', position='Body'),
  resolution?: string(name='Resolution', example='1024*1024', position='Body'),
  text: string(name='Text', description='This parameter is required.', position='Body'),
}

model GenerateImageWithTextResponseBody = {
  data?: {
    imageUrls?: [ string ](name='ImageUrls'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='7574ee8f-38a3-4b1e-9280-11c33ab46e51'),
}

model GenerateImageWithTextResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateImageWithTextResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateImageWithText  GenerateImageWithTextRequest
  * @return GenerateImageWithTextResponse
 */
async function generateImageWithText(request: GenerateImageWithTextRequest): GenerateImageWithTextResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateImageWithText', 'POST', '/', 'json', true, 'form', request);
}

model GetAsyncJobResultRequest {
  jobId: string(name='JobId', description='This parameter is required.', example='11A898F7-29D7-4AB3-B639-8BBDE671BBD5', position='Body'),
}

model GetAsyncJobResultResponseBody = {
  data?: {
    errorCode?: string(name='ErrorCode', example='InvalidParameter'),
    errorMessage?: string(name='ErrorMessage', example='paramsIllegal'),
    jobId?: string(name='JobId', example='7435839A-5B92-4AA1-B2DE-5B6C98C04DDE'),
    result?: string(name='Result', example='http://viapi-cn-shanghai-dha-filter.oss-cn-shanghai.aliyuncs.com/upload/recoloring-hd-2020-06-22-19-39-25-798c9cb57f-v6pj4/2020-6-23/invi_filter_015928997797691000043_tIPX7W.jpg?Expires=1592901579&OSSAccessKeyId=LTAI4FoLmvQ9urWXgSRp****&Signature=qelgcQJBnzRogPybEPDDrDIjHd****'),
    status?: string(name='Status', example='PROCESS_SUCCESS'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='6B4B827E-1CAA-43CD-BBDF-BB572E035976'),
}

model GetAsyncJobResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAsyncJobResultResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAsyncJobResult  GetAsyncJobResultRequest
  * @return GetAsyncJobResultResponse
 */
async function getAsyncJobResult(request: GetAsyncJobResultRequest): GetAsyncJobResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAsyncJobResult', 'POST', '/', 'json', true, 'form', request);
}

