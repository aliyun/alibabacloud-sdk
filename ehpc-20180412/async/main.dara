/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'EHPC';
  @version = '2018-04-12';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddContainerAppRequest {
  containerType?: string(name='ContainerType', example='singularity', position='Query'),
  description?: string(name='Description', example='descriptionContainer', position='Query'),
  imageTag?: string(name='ImageTag', example='latest', position='Query'),
  name: string(name='Name', example='container1', position='Query'),
  repository: string(name='Repository', example='repo1', position='Query'),
}

model AddContainerAppResponseBody = {
  containerId?: {
    containerId?: [ string ](name='ContainerId')
  }(name='ContainerId'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model AddContainerAppResponse = {
  headers: map[string]string(name='headers'),
  body: AddContainerAppResponseBody(name='body'),
}

async function addContainerApp(request: AddContainerAppRequest): AddContainerAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddContainerApp', 'GET', '/', 'json', false, 'json', request);
}

model AddExistedNodesRequest {
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  imageId: string(name='ImageId', example='centos_7_06_64_20G_alibase_20190711.vhd', position='Query'),
  imageOwnerAlias: string(name='ImageOwnerAlias', example='system', position='Query'),
  instance: [ 
    {
      id: string(name='Id', example='i-bp16mxn6mt3t7ftk****'),
    }
  ](name='Instance', position='Query'),
  jobQueue?: string(name='JobQueue', example='workq', position='Query'),
}

model AddExistedNodesResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  taskId?: string(name='TaskId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model AddExistedNodesResponse = {
  headers: map[string]string(name='headers'),
  body: AddExistedNodesResponseBody(name='body'),
}

async function addExistedNodes(request: AddExistedNodesRequest): AddExistedNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddExistedNodes', 'GET', '/', 'json', false, 'json', request);
}

model AddLocalNodesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  nodes: string(name='Nodes', position='Query'),
  queue?: string(name='Queue', position='Query'),
}

model AddLocalNodesResponseBody = {
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
  requestId?: string(name='RequestId'),
}

model AddLocalNodesResponse = {
  headers: map[string]string(name='headers'),
  body: AddLocalNodesResponseBody(name='body'),
}

async function addLocalNodes(request: AddLocalNodesRequest): AddLocalNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddLocalNodes', 'GET', '/', 'json', false, 'json', request);
}

model AddNodesRequest {
  allocatePublicAddress?: boolean(name='AllocatePublicAddress', position='Query'),
  autoRenew?: string(name='AutoRenew', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  computeEnableHt?: boolean(name='ComputeEnableHt', position='Query'),
  computeSpotDuration?: int32(name='ComputeSpotDuration', description='抢占式实例的保留时长，单位为小时。取值范围：0~6。
- 保留时长2~6正在邀测中，如需开通请提交工单。
- 取值为0，则为无保护期模式。
默认值：1。', example='1', minimum=0, maximum=6, position='Query'),
  computeSpotInterruptionBehavior?: string(name='ComputeSpotInterruptionBehavior', description='抢占实例中断模式。目前仅支持Terminate（默认）直接释放实例。', example='Terminate', position='Query'),
  computeSpotPriceLimit?: string(name='ComputeSpotPriceLimit', position='Query'),
  computeSpotStrategy?: string(name='ComputeSpotStrategy', position='Query'),
  count: int32(name='Count', position='Query'),
  createMode?: string(name='CreateMode', position='Query'),
  dataDisks?: [ 
    {
      dataDiskCategory?: string(name='DataDiskCategory'),
      dataDiskDeleteWithInstance?: boolean(name='DataDiskDeleteWithInstance'),
      dataDiskEncrypted?: boolean(name='DataDiskEncrypted'),
      dataDiskKMSKeyId?: string(name='DataDiskKMSKeyId'),
      dataDiskPerformanceLevel?: string(name='DataDiskPerformanceLevel'),
      dataDiskSize?: int32(name='DataDiskSize'),
    }
  ](name='DataDisks', position='Query'),
  ecsChargeType?: string(name='EcsChargeType', position='Query'),
  hostNamePrefix?: string(name='HostNamePrefix', position='Query'),
  hostNameSuffix?: string(name='HostNameSuffix', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  internetChargeType?: string(name='InternetChargeType', position='Query'),
  internetMaxBandWidthIn?: int32(name='InternetMaxBandWidthIn', minimum=0, maximum=100, position='Query'),
  internetMaxBandWidthOut?: int32(name='InternetMaxBandWidthOut', minimum=0, maximum=100, position='Query'),
  jobQueue?: string(name='JobQueue', position='Query'),
  minCount?: int32(name='MinCount', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  sync?: boolean(name='Sync', position='Query'),
  systemDiskLevel?: string(name='SystemDiskLevel', position='Query'),
  systemDiskSize?: int32(name='SystemDiskSize', position='Query'),
  systemDiskType?: string(name='SystemDiskType', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model AddNodesResponseBody = {
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model AddNodesResponse = {
  headers: map[string]string(name='headers'),
  body: AddNodesResponseBody(name='body'),
}

async function addNodes(request: AddNodesRequest): AddNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddNodes', 'GET', '/', 'json', false, 'json', request);
}

model AddQueueRequest {
  clusterId: string(name='ClusterId', position='Query'),
  queueName: string(name='QueueName', position='Query'),
}

model AddQueueResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddQueueResponse = {
  headers: map[string]string(name='headers'),
  body: AddQueueResponseBody(name='body'),
}

async function addQueue(request: AddQueueRequest): AddQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddQueue', 'GET', '/', 'json', false, 'json', request);
}

model AddSecurityGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', position='Query'),
}

model AddSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddSecurityGroupResponseBody(name='body'),
}

async function addSecurityGroup(request: AddSecurityGroupRequest): AddSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSecurityGroup', 'GET', '/', 'json', false, 'json', request);
}

model AddUsersRequest {
  async?: boolean(name='Async', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  user: [ 
    {
      group?: string(name='Group'),
      name?: string(name='Name'),
      password?: string(name='Password'),
    }
  ](name='User', position='Query'),
}

model AddUsersResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddUsersResponse = {
  headers: map[string]string(name='headers'),
  body: AddUsersResponseBody(name='body'),
}

async function addUsers(request: AddUsersRequest): AddUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUsers', 'GET', '/', 'json', false, 'json', request);
}

model ApplyNodesRequest {
  allocatePublicAddress?: boolean(name='AllocatePublicAddress', example='false', position='Query'),
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  computeSpotPriceLimit?: float(name='ComputeSpotPriceLimit', example='0.68', position='Query'),
  computeSpotStrategy?: string(name='ComputeSpotStrategy', example='NoSpot', position='Query'),
  cores?: int32(name='Cores', example='2', position='Query'),
  hostNamePrefix?: string(name='HostNamePrefix', example='compute', position='Query'),
  hostNameSuffix?: string(name='HostNameSuffix', example='01', position='Query'),
  imageId?: string(name='ImageId', example='centos_7_06_64_20G_alibase_20190711.vhd', position='Query'),
  instanceFamilyLevel?: string(name='InstanceFamilyLevel', example='EntryLevel', position='Query'),
  instanceTypeModel?: [ 
    {
      instanceType?: string(name='InstanceType', example='ecs.n1.tiny'),
      maxPrice?: float(name='MaxPrice', example='0.034'),
      targetImageId?: string(name='TargetImageId', example='win2016_1607_x64_dtc_zh-cn_40G_alibase_20210516.vhd'),
    }
  ](name='InstanceTypeModel', position='Query'),
  internetChargeType?: string(name='InternetChargeType', example='PayByTraffic', position='Query'),
  internetMaxBandWidthIn?: int32(name='InternetMaxBandWidthIn', example='10', minimum=0, maximum=100, position='Query'),
  internetMaxBandWidthOut?: int32(name='InternetMaxBandWidthOut', example='10', minimum=0, maximum=100, position='Query'),
  interval?: int32(name='Interval', example='60', minimum=60, maximum=600, position='Query'),
  jobQueue?: string(name='JobQueue', example='workq', position='Query'),
  memory?: int32(name='Memory', example='16', position='Query'),
  priorityStrategy?: string(name='PriorityStrategy', example='LowPriceResourcePlanning', position='Query'),
  resourceAmountType?: string(name='ResourceAmountType', example='Instances', position='Query'),
  round?: int32(name='Round', example='1', minimum=1, maximum=10, position='Query'),
  strictResourceProvision?: boolean(name='StrictResourceProvision', example='false', position='Query'),
  strictSatisfiedTargetCapacity?: boolean(name='StrictSatisfiedTargetCapacity', example='true', position='Query'),
  systemDiskLevel?: string(name='SystemDiskLevel', example='PL0', position='Query'),
  systemDiskSize?: int32(name='SystemDiskSize', example='40', position='Query'),
  systemDiskType?: string(name='SystemDiskType', example='cloud_ssd', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='TestKey'),
      value?: string(name='Value', example='TestValue'),
    }
  ](name='Tag', position='Query'),
  targetCapacity: int32(name='TargetCapacity', example='20', position='Query'),
  zoneInfos: [ 
    {
      vSwitchId?: string(name='VSwitchId', example='vsw-bp1e47optm9g58zcu****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
    }
  ](name='ZoneInfos', position='Query'),
}

model ApplyNodesResponseBody = {
  detail?: string(name='Detail', example='Resources Application is satisfied. Creating...'),
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
  requestId?: string(name='RequestId', example='B745C159-3155-4B94-95D0-4B73D4D2****'),
  satisfiedAmount?: int32(name='SatisfiedAmount', example='10'),
  taskId?: string(name='TaskId', example='B745C159-3155-4B94-95D0-4B73D4D2****'),
}

model ApplyNodesResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyNodesResponseBody(name='body'),
}

async function applyNodes(request: ApplyNodesRequest): ApplyNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyNodes', 'GET', '/', 'json', false, 'json', request);
}

model CreateClusterRequest {
  ecsOrder?: {
    compute: {
        count: int32(name='Count'),
        instanceType: string(name='InstanceType'),
    }(name='Compute'),
    login: {
        count: int32(name='Count'),
        instanceType: string(name='InstanceType'),
    }(name='Login'),
    manager: {
        count?: int32(name='Count'),
        instanceType: string(name='InstanceType'),
    }(name='Manager'),
  }(name='EcsOrder', position='Query'),
  accountType?: string(name='AccountType', position='Query'),
  additionalVolumes?: [ 
    {
      jobQueue?: string(name='JobQueue'),
      localDirectory?: string(name='LocalDirectory'),
      location?: string(name='Location'),
      remoteDirectory?: string(name='RemoteDirectory'),
      roles?: [ 
        {
          name?: string(name='Name'),
        }
      ](name='Roles'),
      volumeId?: string(name='VolumeId'),
      volumeMountOption?: string(name='VolumeMountOption'),
      volumeMountpoint?: string(name='VolumeMountpoint'),
      volumeProtocol?: string(name='VolumeProtocol'),
      volumeType?: string(name='VolumeType'),
    }
  ](name='AdditionalVolumes', position='Query'),
  application?: [ 
    {
      tag?: string(name='Tag'),
    }
  ](name='Application', position='Query'),
  autoRenew?: string(name='AutoRenew', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  clientVersion?: string(name='ClientVersion', position='Query'),
  clusterVersion?: string(name='ClusterVersion', position='Query'),
  computeEnableHt?: boolean(name='ComputeEnableHt', position='Query'),
  computeSpotPriceLimit?: string(name='ComputeSpotPriceLimit', position='Query'),
  computeSpotStrategy?: string(name='ComputeSpotStrategy', position='Query'),
  deployMode?: string(name='DeployMode', position='Query'),
  description?: string(name='Description', position='Query'),
  domain?: string(name='Domain', position='Query'),
  ecsChargeType?: string(name='EcsChargeType', position='Query'),
  ehpcVersion?: string(name='EhpcVersion', position='Query'),
  haEnable?: boolean(name='HaEnable', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', position='Query'),
  inputFileUrl?: string(name='InputFileUrl', position='Query'),
  isComputeEss?: boolean(name='IsComputeEss', position='Query'),
  jobQueue?: string(name='JobQueue', position='Query'),
  keyPairName?: string(name='KeyPairName', position='Query'),
  name: string(name='Name', position='Query'),
  osTag: string(name='OsTag', position='Query'),
  password?: string(name='Password', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  plugin?: string(name='Plugin', position='Query'),
  postInstallScript?: [ 
    {
      args?: string(name='Args'),
      url?: string(name='Url'),
    }
  ](name='PostInstallScript', position='Query'),
  ramNodeTypes?: [ string ](name='RamNodeTypes', position='Query'),
  ramRoleName?: string(name='RamRoleName', example='AliyunEHPCFullAccess', position='Query'),
  remoteDirectory?: string(name='RemoteDirectory', position='Query'),
  remoteVisEnable?: string(name='RemoteVisEnable', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  sccClusterId?: string(name='SccClusterId', position='Query'),
  schedulerType?: string(name='SchedulerType', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', position='Query'),
  securityGroupName?: string(name='SecurityGroupName', position='Query'),
  systemDiskLevel?: string(name='SystemDiskLevel', position='Query'),
  systemDiskSize?: int32(name='SystemDiskSize', position='Query'),
  systemDiskType?: string(name='SystemDiskType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表，最多包含20个子项', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  volumeId?: string(name='VolumeId', position='Query'),
  volumeMountOption?: string(name='VolumeMountOption', position='Query'),
  volumeMountpoint?: string(name='VolumeMountpoint', position='Query'),
  volumeProtocol?: string(name='VolumeProtocol', position='Query'),
  volumeType?: string(name='VolumeType', position='Query'),
  vpcId?: string(name='VpcId', position='Query'),
  withoutAgent?: boolean(name='WithoutAgent', position='Query'),
  withoutElasticIp?: boolean(name='WithoutElasticIp', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterResponseBody(name='body'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'GET', '/', 'json', false, 'json', request);
}

model CreateGWSClusterRequest {
  clusterType: string(name='ClusterType', position='Query'),
  name?: string(name='Name', position='Query'),
  vSwitchId?: string(name='VSwitchId', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
}

model CreateGWSClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  requestId?: string(name='RequestId'),
}

model CreateGWSClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGWSClusterResponseBody(name='body'),
}

async function createGWSCluster(request: CreateGWSClusterRequest): CreateGWSClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGWSCluster', 'GET', '/', 'json', false, 'json', request);
}

model CreateGWSImageRequest {
  instanceId: string(name='InstanceId', position='Query'),
  name?: string(name='Name', position='Query'),
}

model CreateGWSImageResponseBody = {
  imageId?: string(name='ImageId'),
  requestId?: string(name='RequestId'),
}

model CreateGWSImageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGWSImageResponseBody(name='body'),
}

async function createGWSImage(request: CreateGWSImageRequest): CreateGWSImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGWSImage', 'GET', '/', 'json', false, 'json', request);
}

model CreateGWSInstanceRequest {
  allocatePublicAddress: boolean(name='AllocatePublicAddress', example='false', position='Query'),
  appList?: string(name='AppList', example='[{AppName: notepad},{AppArgs:c:/temp.txt}]', position='Query'),
  autoRenew?: boolean(name='AutoRenew', example='false', position='Query'),
  clusterId: string(name='ClusterId', example='gws-rhzxpazwebua****', position='Query'),
  imageId: string(name='ImageId', example='ehs-faeid-****', position='Query'),
  instanceChargeType: string(name='InstanceChargeType', example='Postpaid', position='Query'),
  instanceType: string(name='InstanceType', example='ecs.g6.large', position='Query'),
  internetChargeType?: string(name='InternetChargeType', example='PayByTraffic', position='Query'),
  internetMaxBandwidthIn?: int32(name='InternetMaxBandwidthIn', example='122', position='Query'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut', example='122', position='Query'),
  name?: string(name='Name', example='Test-ehpc', position='Query'),
  period?: string(name='Period', example='1', position='Query'),
  periodUnit?: string(name='PeriodUnit', example='Month', position='Query'),
  systemDiskCategory: string(name='SystemDiskCategory', example='cloud', position='Query'),
  systemDiskSize: int32(name='SystemDiskSize', example='20', position='Query'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp1gb5gf5546rn****', position='Query'),
  workMode: string(name='WorkMode', example='Desktop', position='Query'),
}

model CreateGWSInstanceResponseBody = {
  instanceId?: string(name='InstanceId', example='i-bp1bzqddeemudsdsdsdsdn****'),
  requestId?: string(name='RequestId', example='5198C3E8-85F5-4280-8547-687C1710FE08'),
}

model CreateGWSInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGWSInstanceResponseBody(name='body'),
}

async function createGWSInstance(request: CreateGWSInstanceRequest): CreateGWSInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGWSInstance', 'GET', '/', 'json', false, 'json', request);
}

model CreateHybridClusterRequest {
  ecsOrder?: {
    compute: {
        instanceType: string(name='InstanceType'),
    }(name='Compute'),
    manager: {
        instanceType?: string(name='InstanceType'),
    }(name='Manager'),
  }(name='EcsOrder', position='Query'),
  application?: [ 
    {
      tag?: string(name='Tag'),
    }
  ](name='Application', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  clientVersion?: string(name='ClientVersion', position='Query'),
  computeSpotPriceLimit?: float(name='ComputeSpotPriceLimit', position='Query'),
  computeSpotStrategy?: string(name='ComputeSpotStrategy', position='Query'),
  description?: string(name='Description', position='Query'),
  domain?: string(name='Domain', position='Query'),
  ehpcVersion?: string(name='EhpcVersion', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', position='Query'),
  jobQueue?: string(name='JobQueue', position='Query'),
  keyPairName?: string(name='KeyPairName', position='Query'),
  location?: string(name='Location', position='Query'),
  multiOs?: boolean(name='MultiOs', position='Query'),
  name: string(name='Name', position='Query'),
  nodes?: [ 
    {
      accountType?: string(name='AccountType'),
      dir?: string(name='Dir'),
      hostName?: string(name='HostName'),
      ipAddress?: string(name='IpAddress'),
      role?: string(name='Role'),
      schedulerType?: string(name='SchedulerType'),
    }
  ](name='Nodes', position='Query'),
  onPremiseVolumeLocalPath?: string(name='OnPremiseVolumeLocalPath', position='Query'),
  onPremiseVolumeMountPoint?: string(name='OnPremiseVolumeMountPoint', position='Query'),
  onPremiseVolumeProtocol?: string(name='OnPremiseVolumeProtocol', position='Query'),
  onPremiseVolumeRemotePath?: string(name='OnPremiseVolumeRemotePath', position='Query'),
  openldapPar?: {
    baseDn?: string(name='BaseDn'),
    ldapServerIp?: string(name='LdapServerIp'),
  }(name='OpenldapPar', position='Query'),
  osTag: string(name='OsTag', position='Query'),
  password?: string(name='Password', position='Query'),
  plugin?: string(name='Plugin', position='Query'),
  postInstallScript?: [ 
    {
      args?: string(name='Args'),
      url?: string(name='Url'),
    }
  ](name='PostInstallScript', position='Query'),
  remoteDirectory?: string(name='RemoteDirectory', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  schedulerPreInstall?: boolean(name='SchedulerPreInstall', position='Query'),
  securityGroupId?: string(name='SecurityGroupId', position='Query'),
  securityGroupName?: string(name='SecurityGroupName', position='Query'),
  vSwitchId: string(name='VSwitchId', position='Query'),
  volumeId?: string(name='VolumeId', position='Query'),
  volumeMountpoint?: string(name='VolumeMountpoint', position='Query'),
  volumeProtocol?: string(name='VolumeProtocol', position='Query'),
  volumeType?: string(name='VolumeType', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  winAdPar?: {
    adDc?: string(name='AdDc'),
    adIp?: string(name='AdIp'),
    adUser?: string(name='AdUser'),
    adUserPasswd?: string(name='AdUserPasswd'),
  }(name='WinAdPar', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model CreateHybridClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model CreateHybridClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateHybridClusterResponseBody(name='body'),
}

async function createHybridCluster(request: CreateHybridClusterRequest): CreateHybridClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateHybridCluster', 'GET', '/', 'json', false, 'json', request);
}

model CreateJobFileRequest {
  async?: boolean(name='Async', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  content: string(name='Content', position='Query'),
  runasUser: string(name='RunasUser', position='Query'),
  runasUserPassword?: string(name='RunasUserPassword', position='Query'),
  targetFile: string(name='TargetFile', position='Query'),
}

model CreateJobFileResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateJobFileResponse = {
  headers: map[string]string(name='headers'),
  body: CreateJobFileResponseBody(name='body'),
}

async function createJobFile(request: CreateJobFileRequest): CreateJobFileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateJobFile', 'GET', '/', 'json', false, 'json', request);
}

model CreateJobTemplateRequest {
  arrayRequest?: string(name='ArrayRequest', position='Query'),
  clockTime?: string(name='ClockTime', position='Query'),
  commandLine: string(name='CommandLine', position='Query'),
  gpu?: int32(name='Gpu', minimum=1, maximum=20000, position='Query'),
  inputFileUrl?: string(name='InputFileUrl', position='Query'),
  mem?: string(name='Mem', position='Query'),
  name: string(name='Name', position='Query'),
  node?: int32(name='Node', minimum=1, maximum=5000, position='Query'),
  packagePath?: string(name='PackagePath', position='Query'),
  priority?: int32(name='Priority', position='Query'),
  queue?: string(name='Queue', position='Query'),
  reRunable?: boolean(name='ReRunable', position='Query'),
  runasUser?: string(name='RunasUser', position='Query'),
  stderrRedirectPath?: string(name='StderrRedirectPath', position='Query'),
  stdoutRedirectPath?: string(name='StdoutRedirectPath', position='Query'),
  task?: int32(name='Task', minimum=1, maximum=20000, position='Query'),
  thread?: int32(name='Thread', minimum=1, maximum=20000, position='Query'),
  unzipCmd?: string(name='UnzipCmd', position='Query'),
  variables?: string(name='Variables', position='Query'),
  withUnzipCmd?: boolean(name='WithUnzipCmd', position='Query'),
}

model CreateJobTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model CreateJobTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateJobTemplateResponseBody(name='body'),
}

async function createJobTemplate(request: CreateJobTemplateRequest): CreateJobTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateJobTemplate', 'GET', '/', 'json', false, 'json', request);
}

model DeleteClusterRequest {
  clusterId: string(name='ClusterId', example='ehpc-hz-QKKVqO****', position='Query'),
  releaseInstance?: string(name='ReleaseInstance', example='true', position='Query'),
}

model DeleteClusterResponseBody = {
  requestId?: string(name='RequestId', example='F1AB6D8D-E185-4D94-859C-7CE7B8B7****'),
  taskId?: string(name='TaskId', example='F1AB6D8D-E185-4D94-859C-7CE7B8B7****'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'GET', '/', 'json', false, 'json', request);
}

model DeleteContainerAppsRequest {
  containerApp: [ 
    {
      id?: string(name='Id'),
    }
  ](name='ContainerApp', position='Query'),
}

model DeleteContainerAppsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteContainerAppsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteContainerAppsResponseBody(name='body'),
}

async function deleteContainerApps(request: DeleteContainerAppsRequest): DeleteContainerAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteContainerApps', 'GET', '/', 'json', false, 'json', request);
}

model DeleteGWSClusterRequest {
  clusterId: string(name='ClusterId', example='gws-rhz99q8rc****', position='Query'),
}

model DeleteGWSClusterResponseBody = {
  requestId?: string(name='RequestId', example='8442AF35-875B-4FC0-8B7AAFDC339335D5'),
}

model DeleteGWSClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGWSClusterResponseBody(name='body'),
}

async function deleteGWSCluster(request: DeleteGWSClusterRequest): DeleteGWSClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGWSCluster', 'GET', '/', 'json', false, 'json', request);
}

model DeleteGWSInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model DeleteGWSInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGWSInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGWSInstanceResponseBody(name='body'),
}

async function deleteGWSInstance(request: DeleteGWSInstanceRequest): DeleteGWSInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGWSInstance', 'GET', '/', 'json', false, 'json', request);
}

model DeleteImageRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', position='Query'),
  containerType?: string(name='ContainerType', position='Query'),
  imageTag?: string(name='ImageTag', position='Query'),
  repository: string(name='Repository', position='Query'),
}

model DeleteImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteImageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteImageResponseBody(name='body'),
}

async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteImage', 'GET', '/', 'json', false, 'json', request);
}

model DeleteJobTemplatesRequest {
  templates: string(name='Templates', position='Query'),
}

model DeleteJobTemplatesResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteJobTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteJobTemplatesResponseBody(name='body'),
}

async function deleteJobTemplates(request: DeleteJobTemplatesRequest): DeleteJobTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteJobTemplates', 'GET', '/', 'json', false, 'json', request);
}

model DeleteJobsRequest {
  async?: boolean(name='Async', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  jobs: string(name='Jobs', position='Query'),
}

model DeleteJobsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteJobsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteJobsResponseBody(name='body'),
}

async function deleteJobs(request: DeleteJobsRequest): DeleteJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteJobs', 'GET', '/', 'json', false, 'json', request);
}

model DeleteLocalImageRequest {
  regionId: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', position='Query'),
  containerType: string(name='ContainerType', position='Query'),
  imageName: string(name='ImageName', position='Query'),
}

model DeleteLocalImageResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model DeleteLocalImageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteLocalImageResponseBody(name='body'),
}

async function deleteLocalImage(request: DeleteLocalImageRequest): DeleteLocalImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLocalImage', 'GET', '/', 'json', false, 'json', request);
}

model DeleteNodesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  instance: [ 
    {
      id?: string(name='Id'),
    }
  ](name='Instance', position='Query'),
  releaseInstance?: boolean(name='ReleaseInstance', position='Query'),
  sync?: boolean(name='Sync', position='Query'),
}

model DeleteNodesResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model DeleteNodesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNodesResponseBody(name='body'),
}

async function deleteNodes(request: DeleteNodesRequest): DeleteNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNodes', 'GET', '/', 'json', false, 'json', request);
}

model DeleteQueueRequest {
  clusterId: string(name='ClusterId', position='Query'),
  queueName: string(name='QueueName', position='Query'),
}

model DeleteQueueResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteQueueResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteQueueResponseBody(name='body'),
}

async function deleteQueue(request: DeleteQueueRequest): DeleteQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteQueue', 'GET', '/', 'json', false, 'json', request);
}

model DeleteSecurityGroupRequest {
  clusterId: string(name='ClusterId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', position='Query'),
}

model DeleteSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSecurityGroupResponseBody(name='body'),
}

async function deleteSecurityGroup(request: DeleteSecurityGroupRequest): DeleteSecurityGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecurityGroup', 'GET', '/', 'json', false, 'json', request);
}

model DeleteUsersRequest {
  async?: boolean(name='Async', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  user: [ 
    {
      name: string(name='Name'),
    }
  ](name='User', position='Query'),
}

model DeleteUsersResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUsersResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUsersResponseBody(name='body'),
}

async function deleteUsers(request: DeleteUsersRequest): DeleteUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUsers', 'GET', '/', 'json', false, 'json', request);
}

model DescribeAutoScaleConfigRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DescribeAutoScaleConfigResponseBody = {
  clusterId?: string(name='ClusterId'),
  clusterType?: string(name='ClusterType'),
  enableAutoGrow?: boolean(name='EnableAutoGrow'),
  enableAutoShrink?: boolean(name='EnableAutoShrink'),
  excludeNodes?: string(name='ExcludeNodes'),
  extraNodesGrowRatio?: int32(name='ExtraNodesGrowRatio'),
  growIntervalInMinutes?: int32(name='GrowIntervalInMinutes'),
  growRatio?: int32(name='GrowRatio'),
  growTimeoutInMinutes?: int32(name='GrowTimeoutInMinutes'),
  maxNodesInCluster?: int32(name='MaxNodesInCluster'),
  requestId?: string(name='RequestId'),
  shrinkIdleTimes?: int32(name='ShrinkIdleTimes'),
  shrinkIntervalInMinutes?: int32(name='ShrinkIntervalInMinutes'),
  spotPriceLimit?: string(name='SpotPriceLimit'),
  spotStrategy?: string(name='SpotStrategy'),
  uid?: string(name='Uid'),
}

model DescribeAutoScaleConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAutoScaleConfigResponseBody(name='body'),
}

async function describeAutoScaleConfig(request: DescribeAutoScaleConfigRequest): DescribeAutoScaleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAutoScaleConfig', 'GET', '/', 'json', false, 'json', request);
}

model DescribeClusterRequest {
  clusterId: string(name='ClusterId', example='ehpc-hz-QKKVqO****', position='Query'),
}

model DescribeClusterResponseBody = {
  clusterInfo?: {
    accountType?: string(name='AccountType', example='nis'),
    applications?: {
      applicationInfo?: [ 
      {
        name?: string(name='Name', example='openmpi'),
        tag?: string(name='Tag', example='OpenMPI_1.8.7'),
        version?: string(name='Version', example='1.10'),
      }
    ](name='ApplicationInfo')
    }(name='Applications'),
    baseOsTag?: string(name='BaseOsTag', example='CentOS_7.2_64'),
    clientVersion?: string(name='ClientVersion', example='1.0.1'),
    createTime?: string(name='CreateTime', example='2020-12-24T03:18:23.000Z'),
    deployMode?: string(name='DeployMode', example='Simple'),
    description?: string(name='Description', example='cluster'),
    ecsChargeType?: string(name='EcsChargeType', example='PostPaid'),
    ecsInfo?: {
      compute?: {
        count?: int32(name='Count', example='1'),
        instanceType?: string(name='InstanceType', example='ecs.n1.tiny'),
      }(name='Compute'),
      login?: {
        count?: int32(name='Count', example='1'),
        instanceType?: string(name='InstanceType', example='ecs.n1.tiny'),
      }(name='Login'),
      manager?: {
        count?: int32(name='Count', example='1'),
        instanceType?: string(name='InstanceType', example='ecs.n1.tiny'),
      }(name='Manager'),
      proxyMgr?: {
        count?: int32(name='Count', example='1'),
        instanceType?: string(name='InstanceType', example='ecs.n1.tiny'),
      }(name='ProxyMgr'),
    }(name='EcsInfo'),
    haEnable?: boolean(name='HaEnable', example='false'),
    id?: string(name='Id', example='i-bp15de54eet1c43f****'),
    imageId?: string(name='ImageId', example='centos_7_02_64_20G_alibase_20170818****'),
    imageName?: string(name='ImageName', example='test_for_Image'),
    imageOwnerAlias?: string(name='ImageOwnerAlias', example='system'),
    keyPairName?: string(name='KeyPairName', example='test'),
    location?: string(name='Location', example='PublicCloud'),
    name?: string(name='Name', example='cluster'),
    onPremiseInfo?: {
      onPremiseInfo?: [ 
      {
        hostName?: string(name='HostName', example='testecs'),
        ip?: string(name='IP', example='192.168.*.*'),
        type?: string(name='Type', example='scheduler'),
      }
    ](name='OnPremiseInfo')
    }(name='OnPremiseInfo'),
    osTag?: string(name='OsTag', example='CentOS_7.2_64'),
    postInstallScripts?: {
      postInstallScriptInfo?: [ 
      {
        args?: string(name='Args', example='bash file.sh'),
        url?: string(name='Url', example='example.com'),
      }
    ](name='PostInstallScriptInfo')
    }(name='PostInstallScripts'),
    ramNodeTypes?: string(name='RamNodeTypes'),
    ramRoleName?: string(name='RamRoleName'),
    regionId?: string(name='RegionId', example='cn-hangzhou'),
    remoteDirectory?: string(name='RemoteDirectory', example='NasMountpoint:/RemoteDirectory'),
    sccClusterId?: string(name='SccClusterId', example='00b648b****'),
    schedulerType?: string(name='SchedulerType', example='pbs'),
    securityGroupId?: string(name='SecurityGroupId', example='sg-bp1asugr34gzn****'),
    status?: string(name='Status', example='creating'),
    vSwitchId?: string(name='VSwitchId', example='vsw-bp1e47optm9g58zcu****'),
    volumeId?: string(name='VolumeId', example='008b64****'),
    volumeMountpoint?: string(name='VolumeMountpoint', example='008b648bcb-s****.cn-hangzhou.nas.aliyuncs.com'),
    volumeProtocol?: string(name='VolumeProtocol', example='nfs'),
    volumeType?: string(name='VolumeType', example='NAS'),
    vpcId?: string(name='VpcId', example='vpc-bp1pxkcvmmz53ki89****'),
  }(name='ClusterInfo'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DescribeClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterResponseBody(name='body'),
}

async function describeCluster(request: DescribeClusterRequest): DescribeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCluster', 'GET', '/', 'json', false, 'json', request);
}

model DescribeContainerAppRequest {
  containerId: string(name='ContainerId', example='ehpc-container-ABDUGSkjs****', position='Query'),
}

model DescribeContainerAppResponseBody = {
  containerAppInfo?: {
    createTime?: string(name='CreateTime', example='2018-07-18T17:46:47'),
    description?: string(name='Description', example='ExampleDescription'),
    id?: string(name='Id', example='ehpc-container-ABDUGSkjs****'),
    imageTag?: string(name='ImageTag', example='latest'),
    name?: string(name='Name', example='ExampleName'),
    repository?: string(name='Repository', example='busybox'),
    type?: string(name='Type', example='singularity'),
  }(name='ContainerAppInfo'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model DescribeContainerAppResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeContainerAppResponseBody(name='body'),
}

async function describeContainerApp(request: DescribeContainerAppRequest): DescribeContainerAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContainerApp', 'GET', '/', 'json', false, 'json', request);
}

model DescribeEstackImageRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model DescribeEstackImageResponseBody = {
  imageList?: {
    imageListInfo?: [ 
    {
      imageName?: string(name='ImageName'),
      imageSize?: int32(name='ImageSize'),
      imageType?: string(name='ImageType'),
      imageUrl?: string(name='ImageUrl'),
      recentUpdateTime?: string(name='RecentUpdateTime'),
    }
  ](name='ImageListInfo')
  }(name='ImageList'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeEstackImageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEstackImageResponseBody(name='body'),
}

async function describeEstackImage(request: DescribeEstackImageRequest): DescribeEstackImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEstackImage', 'GET', '/', 'json', false, 'json', request);
}

model DescribeGWSClusterPolicyRequest {
  asyncMode?: boolean(name='AsyncMode', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  taskId?: string(name='TaskId', position='Query'),
}

model DescribeGWSClusterPolicyResponseBody = {
  clipboard?: string(name='Clipboard'),
  localDrive?: string(name='LocalDrive'),
  requestId?: string(name='RequestId'),
  usbRedirect?: string(name='UsbRedirect'),
  watermark?: string(name='Watermark'),
}

model DescribeGWSClusterPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGWSClusterPolicyResponseBody(name='body'),
}

async function describeGWSClusterPolicy(request: DescribeGWSClusterPolicyRequest): DescribeGWSClusterPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGWSClusterPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGWSClustersRequest {
  clusterId?: string(name='ClusterId', example='gws-rhz99q8rc****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', maximum=50, position='Query'),
}

model DescribeGWSClustersResponseBody = {
  callerType?: string(name='CallerType', example='sub'),
  clusters?: {
    clusterInfo?: [ 
    {
      clusterId?: string(name='ClusterId', example='gws-rhz99q8rc****'),
      createTime?: string(name='CreateTime', example='2019-05-15T06:05:40.000Z'),
      instanceCount?: int32(name='InstanceCount', example='3'),
      status?: string(name='Status', example='running'),
      vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-bp1nq8oshqudln3hy****'),
    }
  ](name='ClusterInfo')
  }(name='Clusters'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='2777461A-E45E-42F8-8E67-0EBF132E93E0'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model DescribeGWSClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGWSClustersResponseBody(name='body'),
}

async function describeGWSClusters(request: DescribeGWSClustersRequest): DescribeGWSClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGWSClusters', 'GET', '/', 'json', false, 'json', request);
}

model DescribeGWSImagesRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model DescribeGWSImagesResponseBody = {
  images?: {
    imageInfo?: [ 
    {
      createTime?: string(name='CreateTime'),
      imageId?: string(name='ImageId'),
      imageType?: string(name='ImageType'),
      name?: string(name='Name'),
      progress?: string(name='Progress'),
      size?: int32(name='Size'),
      status?: string(name='Status'),
    }
  ](name='ImageInfo')
  }(name='Images'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeGWSImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGWSImagesResponseBody(name='body'),
}

async function describeGWSImages(request: DescribeGWSImagesRequest): DescribeGWSImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGWSImages', 'GET', '/', 'json', false, 'json', request);
}

model DescribeGWSInstancesRequest {
  clusterId?: string(name='ClusterId', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  userName?: string(name='UserName', position='Query'),
  userUid?: long(name='UserUid', position='Query'),
}

model DescribeGWSInstancesResponseBody = {
  instances?: {
    instanceInfo?: [ 
    {
      appList?: {
        appInfo?: [ 
        {
          appArgs?: string(name='AppArgs'),
          appName?: string(name='AppName'),
          appPath?: string(name='AppPath'),
        }
      ](name='AppInfo')
      }(name='AppList'),
      clusterId?: string(name='ClusterId'),
      createTime?: string(name='CreateTime'),
      expireTime?: string(name='ExpireTime'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      name?: string(name='Name'),
      status?: string(name='Status'),
      userName?: string(name='UserName'),
      workMode?: string(name='WorkMode'),
    }
  ](name='InstanceInfo')
  }(name='Instances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeGWSInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGWSInstancesResponseBody(name='body'),
}

async function describeGWSInstances(request: DescribeGWSInstancesRequest): DescribeGWSInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGWSInstances', 'GET', '/', 'json', false, 'json', request);
}

model DescribeImageRequest {
  regionId: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  containerType?: string(name='ContainerType', example='singularity', position='Query'),
  imageTag?: string(name='ImageTag', example='latest', position='Query'),
  repository: string(name='Repository', example='repo1', position='Query'),
}

model DescribeImageResponseBody = {
  imageInfo?: {
    imageId?: string(name='ImageId', example='353506****'),
    repository?: string(name='Repository', example='hello-world'),
    status?: string(name='Status', example='READY'),
    system?: string(name='System', example='mycluster'),
    tag?: string(name='Tag', example='latest'),
    type?: string(name='Type', example='docker'),
    updateDateTime?: string(name='UpdateDateTime', example='2018-08-02T20:11:36'),
  }(name='ImageInfo'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model DescribeImageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageResponseBody(name='body'),
}

async function describeImage(request: DescribeImageRequest): DescribeImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImage', 'GET', '/', 'json', false, 'json', request);
}

model DescribeImageGatewayConfigRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DescribeImageGatewayConfigResponseBody = {
  imagegw?: {
    defaultImageLocation?: string(name='DefaultImageLocation'),
    imageExpirationTimeout?: string(name='ImageExpirationTimeout'),
    locations?: {
      locationInfo?: [ 
      {
        authentication?: string(name='Authentication'),
        location?: string(name='Location'),
        remoteType?: string(name='RemoteType'),
        URL?: string(name='URL'),
      }
    ](name='LocationInfo')
    }(name='Locations'),
    mongoDBURI?: string(name='MongoDBURI'),
    pullUpdateTimeout?: long(name='PullUpdateTimeout'),
    updateDateTime?: string(name='UpdateDateTime'),
  }(name='Imagegw'),
  requestId?: string(name='RequestId'),
}

model DescribeImageGatewayConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageGatewayConfigResponseBody(name='body'),
}

async function describeImageGatewayConfig(request: DescribeImageGatewayConfigRequest): DescribeImageGatewayConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImageGatewayConfig', 'GET', '/', 'json', false, 'json', request);
}

model DescribeImagePriceRequest {
  amount: int32(name='Amount', position='Query'),
  imageId: string(name='ImageId', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  period: int32(name='Period', position='Query'),
  priceUnit: string(name='PriceUnit', position='Query'),
  skuCode: string(name='SkuCode', position='Query'),
}

model DescribeImagePriceResponseBody = {
  amount?: int32(name='Amount'),
  discountPrice?: float(name='DiscountPrice'),
  imageId?: string(name='ImageId'),
  originalPrice?: float(name='OriginalPrice'),
  requestId?: string(name='RequestId'),
  tradePrice?: float(name='TradePrice'),
}

model DescribeImagePriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImagePriceResponseBody(name='body'),
}

async function describeImagePrice(request: DescribeImagePriceRequest): DescribeImagePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeImagePrice', 'GET', '/', 'json', false, 'json', request);
}

model DescribeJobRequest {
  async?: boolean(name='Async', position='Query'),
  clusterId: string(name='ClusterId', example='ehpc-hz-jeJki6****', position='Query'),
  jobId: string(name='JobId', example='1.scheduler****', position='Query'),
}

model DescribeJobResponseBody = {
  message?: {
    jobInfo?: string(name='JobInfo', example='{"2.scheduler": {"egroup": "users","Stageout_status": 1,"Keep_Files": "n","server": "scheduler","queue": "workq"}}'),
  }(name='Message'),
  requestId?: string(name='RequestId', example='9697AD8D-56FA-4C8E-B46C-00AC9***'),
}

model DescribeJobResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeJobResponseBody(name='body'),
}

async function describeJob(request: DescribeJobRequest): DescribeJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeJob', 'GET', '/', 'json', false, 'json', request);
}

model DescribeNFSClientStatusRequest {
  instanceId: string(name='InstanceId', example='i-bp1bzq4rj1emun****', position='Query'),
}

model DescribeNFSClientStatusResponseBody = {
  requestId?: string(name='RequestId', example='3EB7FCEE-D731-4948-85A3-4B2C341CA983'),
  result?: {
    exitCode?: int32(name='ExitCode', example='0'),
    invokeRecordStatus?: string(name='InvokeRecordStatus', example='Running'),
    output?: string(name='Output', example='TmV3LUlWtmOWc6XxpZW50Rm9yLi4uDQ****'),
  }(name='Result'),
  status?: string(name='Status', example='Running'),
}

model DescribeNFSClientStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNFSClientStatusResponseBody(name='body'),
}

async function describeNFSClientStatus(request: DescribeNFSClientStatusRequest): DescribeNFSClientStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNFSClientStatus', 'GET', '/', 'json', false, 'json', request);
}

model DescribePriceRequest {
  chargeType?: string(name='ChargeType', position='Query'),
  commodities: [ 
    {
      amount: int32(name='Amount'),
      dataDisks?: [ 
        {
          category?: string(name='category'),
          deleteWithInstance?: boolean(name='deleteWithInstance'),
          encrypted?: boolean(name='encrypted'),
          performanceLevel?: string(name='performanceLevel'),
          size?: int32(name='size'),
        }
      ](name='DataDisks'),
      instanceType: string(name='InstanceType'),
      internetChargeType?: string(name='InternetChargeType'),
      internetMaxBandWidthOut?: int32(name='InternetMaxBandWidthOut'),
      networkType?: string(name='NetworkType'),
      nodeType: string(name='NodeType'),
      period: int32(name='Period'),
      systemDiskCategory?: string(name='SystemDiskCategory'),
      systemDiskPerformanceLevel?: string(name='SystemDiskPerformanceLevel'),
      systemDiskSize?: int32(name='SystemDiskSize'),
    }
  ](name='Commodities', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  priceUnit: string(name='PriceUnit', position='Query'),
}

model DescribePriceResponseBody = {
  prices?: {
    priceInfo?: [ 
    {
      currency?: string(name='Currency'),
      nodeType?: string(name='NodeType'),
      originalPrice?: float(name='OriginalPrice'),
      tradePrice?: float(name='TradePrice'),
    }
  ](name='PriceInfo')
  }(name='Prices'),
  requestId?: string(name='RequestId'),
  totalTradePrice?: float(name='TotalTradePrice'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePrice', 'GET', '/', 'json', false, 'json', request);
}

model EditJobTemplateRequest {
  arrayRequest?: string(name='ArrayRequest', position='Query'),
  clockTime?: string(name='ClockTime', position='Query'),
  commandLine: string(name='CommandLine', position='Query'),
  gpu?: int32(name='Gpu', minimum=1, maximum=20000, position='Query'),
  inputFileUrl?: string(name='InputFileUrl', position='Query'),
  mem?: string(name='Mem', position='Query'),
  name: string(name='Name', position='Query'),
  node?: int32(name='Node', minimum=1, maximum=5000, position='Query'),
  packagePath?: string(name='PackagePath', position='Query'),
  priority?: int32(name='Priority', position='Query'),
  queue?: string(name='Queue', position='Query'),
  reRunable?: boolean(name='ReRunable', position='Query'),
  runasUser?: string(name='RunasUser', position='Query'),
  stderrRedirectPath?: string(name='StderrRedirectPath', position='Query'),
  stdoutRedirectPath?: string(name='StdoutRedirectPath', position='Query'),
  task?: int32(name='Task', minimum=1, maximum=20000, position='Query'),
  templateId: string(name='TemplateId', position='Query'),
  thread?: int32(name='Thread', minimum=1, maximum=20000, position='Query'),
  unzipCmd?: string(name='UnzipCmd', position='Query'),
  variables?: string(name='Variables', position='Query'),
  withUnzipCmd?: boolean(name='WithUnzipCmd', position='Query'),
}

model EditJobTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model EditJobTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: EditJobTemplateResponseBody(name='body'),
}

async function editJobTemplate(request: EditJobTemplateRequest): EditJobTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EditJobTemplate', 'GET', '/', 'json', false, 'json', request);
}

model GetAccountingReportRequest {
  clusterId: string(name='ClusterId', position='Query'),
  dim?: string(name='Dim', position='Query'),
  endTime?: int32(name='EndTime', position='Query'),
  filterValue?: string(name='FilterValue', position='Query'),
  jobId?: string(name='JobId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  reportType: string(name='ReportType', position='Query'),
  startTime?: int32(name='StartTime', position='Query'),
}

model GetAccountingReportResponseBody = {
  data?: {
    data?: [ string ](name='Data')
  }(name='Data'),
  metrics?: string(name='Metrics'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCoreTime?: int32(name='TotalCoreTime'),
  totalCount?: int32(name='TotalCount'),
}

model GetAccountingReportResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountingReportResponseBody(name='body'),
}

async function getAccountingReport(request: GetAccountingReportRequest): GetAccountingReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountingReport', 'GET', '/', 'json', false, 'json', request);
}

model GetAutoScaleConfigRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model GetAutoScaleConfigResponseBody = {
  clusterId?: string(name='ClusterId'),
  clusterType?: string(name='ClusterType'),
  enableAutoGrow?: boolean(name='EnableAutoGrow'),
  enableAutoShrink?: boolean(name='EnableAutoShrink'),
  excludeNodes?: string(name='ExcludeNodes'),
  extraNodesGrowRatio?: int32(name='ExtraNodesGrowRatio'),
  growIntervalInMinutes?: int32(name='GrowIntervalInMinutes'),
  growRatio?: int32(name='GrowRatio'),
  growTimeoutInMinutes?: int32(name='GrowTimeoutInMinutes'),
  imageId?: string(name='ImageId'),
  maxNodesInCluster?: int32(name='MaxNodesInCluster'),
  queues?: {
    queueInfo?: [ 
    {
      dataDisks?: {
        dataDisksInfo?: [ 
        {
          dataDiskCategory?: string(name='DataDiskCategory'),
          dataDiskDeleteWithInstance?: boolean(name='DataDiskDeleteWithInstance'),
          dataDiskEncrypted?: boolean(name='DataDiskEncrypted'),
          dataDiskKMSKeyId?: string(name='DataDiskKMSKeyId'),
          dataDiskPerformanceLevel?: string(name='DataDiskPerformanceLevel'),
          dataDiskSize?: int32(name='DataDiskSize'),
        }
      ](name='DataDisksInfo')
      }(name='DataDisks'),
      enableAutoGrow?: boolean(name='EnableAutoGrow'),
      enableAutoShrink?: boolean(name='EnableAutoShrink'),
      hostNamePrefix?: string(name='HostNamePrefix'),
      hostNameSuffix?: string(name='HostNameSuffix'),
      instanceType?: string(name='InstanceType'),
      instanceTypes?: {
        instanceTypeInfo?: [ 
        {
          hostNamePrefix?: string(name='HostNamePrefix'),
          instanceType?: string(name='InstanceType'),
          spotDuration?: int32(name='SpotDuration'),
          spotInterruptionBehavior?: string(name='SpotInterruptionBehavior', description='抢占实例中断模式。目前仅支持Terminate（默认）直接释放实例。'),
          spotPriceLimit?: float(name='SpotPriceLimit'),
          spotStrategy?: string(name='SpotStrategy'),
          vSwitchId?: string(name='VSwitchId'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='InstanceTypeInfo')
      }(name='InstanceTypes'),
      maxNodesInQueue?: int32(name='MaxNodesInQueue'),
      maxNodesPerCycle?: long(name='MaxNodesPerCycle'),
      minNodesInQueue?: int32(name='MinNodesInQueue'),
      minNodesPerCycle?: long(name='MinNodesPerCycle'),
      queueImageId?: string(name='QueueImageId'),
      queueName?: string(name='QueueName'),
      resourceGroupId?: string(name='ResourceGroupId'),
      spotPriceLimit?: float(name='SpotPriceLimit'),
      spotStrategy?: string(name='SpotStrategy'),
      systemDiskCategory?: string(name='SystemDiskCategory'),
      systemDiskLevel?: string(name='SystemDiskLevel'),
      systemDiskSize?: int32(name='SystemDiskSize'),
    }
  ](name='QueueInfo')
  }(name='Queues'),
  requestId?: string(name='RequestId'),
  shrinkIdleTimes?: int32(name='ShrinkIdleTimes'),
  shrinkIntervalInMinutes?: int32(name='ShrinkIntervalInMinutes'),
  spotPriceLimit?: float(name='SpotPriceLimit'),
  spotStrategy?: string(name='SpotStrategy'),
  uid?: string(name='Uid'),
}

model GetAutoScaleConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetAutoScaleConfigResponseBody(name='body'),
}

async function getAutoScaleConfig(request: GetAutoScaleConfigRequest): GetAutoScaleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAutoScaleConfig', 'GET', '/', 'json', false, 'json', request);
}

model GetCloudMetricLogsRequest {
  aggregationInterval?: int32(name='AggregationInterval', example='10', position='Query'),
  aggregationType?: string(name='AggregationType', example='avg', position='Query'),
  clusterId: string(name='ClusterId', example='ehpc-hz-jeJki6****', position='Query'),
  filter?: string(name='Filter', example='{"Hostname":"compute000"}', position='Query'),
  from: int32(name='From', example='1583907780', position='Query'),
  metricCategories?: string(name='MetricCategories', example='cpu', position='Query'),
  metricScope?: string(name='MetricScope', example='network', position='Query'),
  reverse?: boolean(name='Reverse', example='false', position='Query'),
  to: int32(name='To', example='1583907790', position='Query'),
}

model GetCloudMetricLogsResponseBody = {
  metricLogs?: {
    metricLog?: [ 
    {
      diskDevice?: string(name='DiskDevice', example='vda1'),
      hostname?: string(name='Hostname', example='compute000'),
      instanceId?: string(name='InstanceId', example='i-bp132g97g7zwnvta****'),
      metricData?: string(name='MetricData', example='{\\"process|cpusage\\":0,\\"process|cpuser\\":0,\\"process|cpusys\\":0,******}'),
      networkInterface?: string(name='NetworkInterface', example='eth1'),
      time?: int32(name='Time', example='1583907780'),
    }
  ](name='MetricLog')
  }(name='MetricLogs'),
  requestId?: string(name='RequestId', example='015C2C4D-1884-4EB7-BCD3-C5BB8D7E56DB'),
}

model GetCloudMetricLogsResponse = {
  headers: map[string]string(name='headers'),
  body: GetCloudMetricLogsResponseBody(name='body'),
}

async function getCloudMetricLogs(request: GetCloudMetricLogsRequest): GetCloudMetricLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCloudMetricLogs', 'GET', '/', 'json', false, 'json', request);
}

model GetCloudMetricProfilingRequest {
  clusterId: string(name='ClusterId', position='Query'),
  profilingId: string(name='ProfilingId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetCloudMetricProfilingResponseBody = {
  requestId?: string(name='RequestId'),
  svgUrls?: {
    svgInfo?: [ 
    {
      name?: string(name='Name'),
      size?: int32(name='Size'),
      type?: string(name='Type'),
      url?: string(name='Url'),
    }
  ](name='SvgInfo')
  }(name='SvgUrls'),
}

model GetCloudMetricProfilingResponse = {
  headers: map[string]string(name='headers'),
  body: GetCloudMetricProfilingResponseBody(name='body'),
}

async function getCloudMetricProfiling(request: GetCloudMetricProfilingRequest): GetCloudMetricProfilingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCloudMetricProfiling', 'GET', '/', 'json', false, 'json', request);
}

model GetClusterVolumesRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model GetClusterVolumesResponseBody = {
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  volumes?: {
    volumeInfo?: [ 
    {
      jobQueue?: string(name='JobQueue'),
      localDirectory?: string(name='LocalDirectory'),
      location?: string(name='Location'),
      mustKeep?: boolean(name='MustKeep'),
      remoteDirectory?: string(name='RemoteDirectory'),
      roles?: {
        roleInfo?: [ 
        {
          name?: string(name='Name'),
        }
      ](name='RoleInfo')
      }(name='Roles'),
      volumeId?: string(name='VolumeId'),
      volumeMountpoint?: string(name='VolumeMountpoint'),
      volumeProtocol?: string(name='VolumeProtocol'),
      volumeType?: string(name='VolumeType'),
    }
  ](name='VolumeInfo')
  }(name='Volumes'),
}

model GetClusterVolumesResponse = {
  headers: map[string]string(name='headers'),
  body: GetClusterVolumesResponseBody(name='body'),
}

async function getClusterVolumes(request: GetClusterVolumesRequest): GetClusterVolumesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetClusterVolumes', 'GET', '/', 'json', false, 'json', request);
}

model GetCommonImageRequest {
  clusterId?: string(name='ClusterId', position='Query'),
  containType?: string(name='ContainType', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model GetCommonImageResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetCommonImageResponse = {
  headers: map[string]string(name='headers'),
  body: GetCommonImageResponseBody(name='body'),
}

async function getCommonImage(request: GetCommonImageRequest): GetCommonImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCommonImage', 'GET', '/', 'json', false, 'json', request);
}

model GetGWSConnectTicketRequest {
  appName?: string(name='AppName', example='app-****', position='Query'),
  instanceId: string(name='InstanceId', example='i-bp1ch35z696b6b26****', position='Query'),
}

model GetGWSConnectTicketResponseBody = {
  requestId?: string(name='RequestId', example='5198C3E8-85F5-4280-8547-687C1710FE08'),
  ticket?: string(name='Ticket', example='W0VuY29kaG9ydFJlY29ubmVjdEVuY****'),
}

model GetGWSConnectTicketResponse = {
  headers: map[string]string(name='headers'),
  body: GetGWSConnectTicketResponseBody(name='body'),
}

async function getGWSConnectTicket(request: GetGWSConnectTicketRequest): GetGWSConnectTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGWSConnectTicket', 'GET', '/', 'json', false, 'json', request);
}

model GetHybridClusterConfigRequest {
  clusterId: string(name='ClusterId', position='Query'),
  node?: string(name='Node', position='Query'),
}

model GetHybridClusterConfigResponseBody = {
  clusterConfig?: string(name='ClusterConfig'),
  requestId?: string(name='RequestId'),
}

model GetHybridClusterConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetHybridClusterConfigResponseBody(name='body'),
}

async function getHybridClusterConfig(request: GetHybridClusterConfigRequest): GetHybridClusterConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetHybridClusterConfig', 'GET', '/', 'json', false, 'json', request);
}

model GetIfEcsTypeSupportHtConfigRequest {
  instanceType: string(name='InstanceType', example='ecs.g6.large', position='Query'),
}

model GetIfEcsTypeSupportHtConfigResponseBody = {
  defaultHtEnabled?: boolean(name='DefaultHtEnabled', example='true'),
  instanceType?: string(name='InstanceType', example='ecs.g6.large'),
  requestId?: string(name='RequestId', example='80CA7A93-7291-4402-B63D-86DF334E0A1F'),
  supportHtConfig?: boolean(name='SupportHtConfig', example='true'),
}

model GetIfEcsTypeSupportHtConfigResponse = {
  headers: map[string]string(name='headers'),
  body: GetIfEcsTypeSupportHtConfigResponseBody(name='body'),
}

async function getIfEcsTypeSupportHtConfig(request: GetIfEcsTypeSupportHtConfigRequest): GetIfEcsTypeSupportHtConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIfEcsTypeSupportHtConfig', 'GET', '/', 'json', false, 'json', request);
}

model GetJobLogRequest {
  clusterId: string(name='ClusterId', position='Query'),
  execHost?: string(name='ExecHost', position='Query'),
  jobId: string(name='JobId', position='Query'),
  offset?: long(name='Offset', position='Query'),
  size?: int32(name='Size', position='Query'),
}

model GetJobLogResponseBody = {
  errorLog?: string(name='ErrorLog'),
  jobId?: string(name='JobId'),
  outputLog?: string(name='OutputLog'),
  requestId?: string(name='RequestId'),
}

model GetJobLogResponse = {
  headers: map[string]string(name='headers'),
  body: GetJobLogResponseBody(name='body'),
}

async function getJobLog(request: GetJobLogRequest): GetJobLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetJobLog', 'GET', '/', 'json', false, 'json', request);
}

model GetPostScriptsRequest {
  clusterId: string(name='ClusterId', example='ehpc-sh-EnjshUxn', position='Query'),
  regionId: string(name='RegionId', example='cn-shanghai', position='Query'),
}

model GetPostScriptsResponseBody = {
  postInstallScripts?: [ 
    {
      args?: string(name='Args', example='-h'),
      url?: string(name='Url', example='https://bucket.oss-cn-shanghai.aliyuncs.com/postscript_examples.sh'),
    }
  ](name='PostInstallScripts'),
  requestId?: string(name='RequestId', description='Id of the request', example='B745C159-3155-4B94-95D0-4B73D4D2****'),
}

model GetPostScriptsResponse = {
  headers: map[string]string(name='headers'),
  body: GetPostScriptsResponseBody(name='body'),
}

async function getPostScripts(request: GetPostScriptsRequest): GetPostScriptsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPostScripts', 'GET', '/', 'json', false, 'json', request);
}

model GetSchedulerInfoRequest {
  clusterId: string(name='ClusterId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  scheduler: [ 
    {
      schedName?: string(name='SchedName'),
    }
  ](name='Scheduler', position='Query'),
}

model GetSchedulerInfoResponseBody = {
  requestId?: string(name='RequestId'),
  schedInfo?: [ 
    {
      configuration?: string(name='Configuration'),
      schedName?: string(name='SchedName'),
    }
  ](name='SchedInfo'),
}

model GetSchedulerInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetSchedulerInfoResponseBody(name='body'),
}

async function getSchedulerInfo(request: GetSchedulerInfoRequest): GetSchedulerInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSchedulerInfo', 'GET', '/', 'json', false, 'json', request);
}

model GetUserImageRequest {
  regionId: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', position='Query'),
  containerType: string(name='ContainerType', position='Query'),
  imageName: string(name='ImageName', position='Query'),
  imagePath: string(name='ImagePath', position='Query'),
  OSSBucket: string(name='OSSBucket', position='Query'),
  OSSEndPoint: string(name='OSSEndPoint', position='Query'),
}

model GetUserImageResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model GetUserImageResponse = {
  headers: map[string]string(name='headers'),
  body: GetUserImageResponseBody(name='body'),
}

async function getUserImage(request: GetUserImageRequest): GetUserImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserImage', 'GET', '/', 'json', false, 'json', request);
}

model GetVisualServiceStatusRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model GetVisualServiceStatusResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetVisualServiceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetVisualServiceStatusResponseBody(name='body'),
}

async function getVisualServiceStatus(request: GetVisualServiceStatusRequest): GetVisualServiceStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetVisualServiceStatus', 'GET', '/', 'json', false, 'json', request);
}

model InitializeEHPCRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model InitializeEHPCResponseBody = {
  requestId?: string(name='RequestId'),
}

model InitializeEHPCResponse = {
  headers: map[string]string(name='headers'),
  body: InitializeEHPCResponseBody(name='body'),
}

async function initializeEHPC(request: InitializeEHPCRequest): InitializeEHPCResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitializeEHPC', 'GET', '/', 'json', false, 'json', request);
}

model InspectImageRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId?: string(name='ClusterId', example='ehpc-hz-ibug699***', position='Query'),
  containerType?: string(name='ContainerType', example='singularity', position='Query'),
  imageName?: string(name='ImageName', example='test.sif', position='Query'),
}

model InspectImageResponseBody = {
  imageStatus?: {
    imageInspectInfo?: {
      bootStrap?: string(name='BootStrap', example='1.0'),
      buildArch?: string(name='BuildArch', example='amd64'),
      buildDate?: string(name='BuildDate', example='Tuesday_9_November_2021_19'),
      containerVersion?: string(name='ContainerVersion', example='sccIntelMPI.sif'),
      defFrom?: string(name='DefFrom', example='localimage'),
      schemaVersion?: string(name='SchemaVersion', example='3.8.3-1.el7'),
    }(name='ImageInspectInfo'),
  }(name='ImageStatus'),
  requestId?: string(name='RequestId', description='Id of the request', example='896D338C-E4F4-41EC-A154-D605E5DE****'),
}

model InspectImageResponse = {
  headers: map[string]string(name='headers'),
  body: InspectImageResponseBody(name='body'),
}

async function inspectImage(request: InspectImageRequest): InspectImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InspectImage', 'GET', '/', 'json', false, 'json', request);
}

model InstallSoftwareRequest {
  application: string(name='Application', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
}

model InstallSoftwareResponseBody = {
  requestId?: string(name='RequestId'),
}

model InstallSoftwareResponse = {
  headers: map[string]string(name='headers'),
  body: InstallSoftwareResponseBody(name='body'),
}

async function installSoftware(request: InstallSoftwareRequest): InstallSoftwareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallSoftware', 'GET', '/', 'json', false, 'json', request);
}

model InvokeShellCommandRequest {
  clusterId: string(name='ClusterId', position='Query'),
  command: string(name='Command', position='Query'),
  instance?: [ 
    {
      id?: string(name='Id'),
    }
  ](name='Instance', position='Query'),
  timeout?: int32(name='Timeout', position='Query'),
  workingDir?: string(name='WorkingDir', position='Query'),
}

model InvokeShellCommandResponseBody = {
  commandId?: string(name='CommandId'),
  instanceIds?: {
    instanceId?: [ string ](name='InstanceId')
  }(name='InstanceIds'),
  requestId?: string(name='RequestId'),
}

model InvokeShellCommandResponse = {
  headers: map[string]string(name='headers'),
  body: InvokeShellCommandResponseBody(name='body'),
}

async function invokeShellCommand(request: InvokeShellCommandRequest): InvokeShellCommandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InvokeShellCommand', 'GET', '/', 'json', false, 'json', request);
}

model ListAvailableEcsTypesRequest {
  instanceChargeType?: string(name='InstanceChargeType', position='Query'),
  showSoldOut?: boolean(name='ShowSoldOut', position='Query'),
  spotStrategy?: string(name='SpotStrategy', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model ListAvailableEcsTypesResponseBody = {
  instanceTypeFamilies?: {
    instanceTypeFamilyInfo?: [ 
    {
      generation?: string(name='Generation'),
      instanceTypeFamilyId?: string(name='InstanceTypeFamilyId'),
      types?: {
        typesInfo?: [ 
        {
          cpuCoreCount?: int32(name='CpuCoreCount'),
          eniQuantity?: int32(name='EniQuantity'),
          GPUAmount?: int32(name='GPUAmount'),
          GPUSpec?: string(name='GPUSpec'),
          instanceBandwidthRx?: int32(name='InstanceBandwidthRx'),
          instanceBandwidthTx?: int32(name='InstanceBandwidthTx'),
          instancePpsRx?: int32(name='InstancePpsRx'),
          instancePpsTx?: int32(name='InstancePpsTx'),
          instanceTypeId?: string(name='InstanceTypeId'),
          memorySize?: int32(name='MemorySize'),
          status?: string(name='Status'),
          zoneIds?: {
            zoneId?: [ string ](name='ZoneId')
          }(name='ZoneIds'),
        }
      ](name='TypesInfo')
      }(name='Types'),
    }
  ](name='InstanceTypeFamilyInfo')
  }(name='InstanceTypeFamilies'),
  requestId?: string(name='RequestId'),
  supportSpotInstance?: boolean(name='SupportSpotInstance'),
}

model ListAvailableEcsTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListAvailableEcsTypesResponseBody(name='body'),
}

async function listAvailableEcsTypes(request: ListAvailableEcsTypesRequest): ListAvailableEcsTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAvailableEcsTypes', 'GET', '/', 'json', false, 'json', request);
}

model ListCloudMetricProfilingsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model ListCloudMetricProfilingsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  profilings?: {
    profilingInfo?: [ 
    {
      duration?: int32(name='Duration'),
      freq?: int32(name='Freq'),
      hostName?: string(name='HostName'),
      instanceId?: string(name='InstanceId'),
      pid?: int32(name='Pid'),
      profilingId?: string(name='ProfilingId'),
      triggerTime?: string(name='TriggerTime'),
    }
  ](name='ProfilingInfo')
  }(name='Profilings'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListCloudMetricProfilingsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCloudMetricProfilingsResponseBody(name='body'),
}

async function listCloudMetricProfilings(request: ListCloudMetricProfilingsRequest): ListCloudMetricProfilingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCloudMetricProfilings', 'GET', '/', 'json', false, 'json', request);
}

model ListClusterLogsRequest {
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', maximum=100, position='Query'),
}

model ListClusterLogsResponseBody = {
  clusterId?: string(name='ClusterId', example='ehpc-hz-FYUr32****'),
  logs?: {
    logInfo?: [ 
    {
      createTime?: string(name='CreateTime', example='2019-09-18T13:24:13.000'),
      level?: string(name='Level', example='info'),
      message?: string(name='Message', example='Begin to create cluster'),
      operation?: string(name='Operation', example='CreateCluster'),
    }
  ](name='LogInfo')
  }(name='Logs'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='BBC2F93D-003A-49C4-850C-B826EECF6667'),
  totalCount?: int32(name='TotalCount', example='2'),
}

model ListClusterLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListClusterLogsResponseBody(name='body'),
}

async function listClusterLogs(request: ListClusterLogsRequest): ListClusterLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusterLogs', 'GET', '/', 'json', false, 'json', request);
}

model ListClustersRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model ListClustersResponseBody = {
  clusters?: {
    clusterInfoSimple?: [ 
    {
      accountType?: string(name='AccountType'),
      baseOsTag?: string(name='BaseOsTag'),
      clientVersion?: string(name='ClientVersion'),
      computeSpotPriceLimit?: float(name='ComputeSpotPriceLimit'),
      computeSpotStrategy?: string(name='ComputeSpotStrategy'),
      computes?: {
        exceptionCount?: int32(name='ExceptionCount'),
        normalCount?: int32(name='NormalCount'),
        operatingCount?: int32(name='OperatingCount'),
        stoppedCount?: int32(name='StoppedCount'),
        total?: int32(name='Total'),
      }(name='Computes'),
      count?: int32(name='Count'),
      createTime?: string(name='CreateTime'),
      deployMode?: string(name='DeployMode'),
      description?: string(name='Description'),
      ehpcVersion?: string(name='EhpcVersion'),
      hasPlugin?: boolean(name='HasPlugin'),
      id?: string(name='Id'),
      imageId?: string(name='ImageId'),
      imageOwnerAlias?: string(name='ImageOwnerAlias'),
      instanceChargeType?: string(name='InstanceChargeType'),
      instanceType?: string(name='InstanceType'),
      isComputeEss?: boolean(name='IsComputeEss'),
      location?: string(name='Location'),
      loginNodes?: string(name='LoginNodes'),
      managers?: {
        exceptionCount?: int32(name='ExceptionCount'),
        normalCount?: int32(name='NormalCount'),
        operatingCount?: int32(name='OperatingCount'),
        stoppedCount?: int32(name='StoppedCount'),
        total?: int32(name='Total'),
      }(name='Managers'),
      name?: string(name='Name'),
      nodePrefix?: string(name='NodePrefix'),
      nodeSuffix?: string(name='NodeSuffix'),
      osTag?: string(name='OsTag'),
      regionId?: string(name='RegionId'),
      schedulerType?: string(name='SchedulerType'),
      status?: string(name='Status'),
      totalResources?: {
        cpu?: int32(name='Cpu'),
        gpu?: int32(name='Gpu'),
        memory?: int32(name='Memory'),
      }(name='TotalResources'),
      usedResources?: {
        cpu?: int32(name='Cpu'),
        gpu?: int32(name='Gpu'),
        memory?: int32(name='Memory'),
      }(name='UsedResources'),
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='ClusterInfoSimple')
  }(name='Clusters'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListClustersResponse = {
  headers: map[string]string(name='headers'),
  body: ListClustersResponseBody(name='body'),
}

async function listClusters(request: ListClustersRequest): ListClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClusters', 'GET', '/', 'json', false, 'json', request);
}

model ListClustersMetaRequest {
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', maximum=100, position='Query'),
}

model ListClustersMetaResponseBody = {
  clusters?: {
    clusterInfoSimple?: [ 
    {
      accountType?: string(name='AccountType', example='nis'),
      clientVersion?: string(name='ClientVersion', example='1.0.64'),
      deployMode?: string(name='DeployMode', example='Standard'),
      description?: string(name='Description', example='clusterdescription'),
      hasPlugin?: boolean(name='HasPlugin', example='false'),
      id?: string(name='Id', example='ehpc-hz-jeJki6****'),
      isComputeEss?: boolean(name='IsComputeEss', example='false'),
      location?: string(name='Location', example='PublicCloud'),
      name?: string(name='Name', example='cluster1'),
      osTag?: string(name='OsTag', example='CentOS_7.2_64'),
      schedulerType?: string(name='SchedulerType', example='pbs'),
      status?: string(name='Status', example='running'),
      vpcId?: string(name='VpcId', description='VPC ID。', example='vpc-b3f3edefefeep0760yju****'),
    }
  ](name='ClusterInfoSimple')
  }(name='Clusters'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='DD517102-B314-4665-BDAC-A32DE7834D02'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListClustersMetaResponse = {
  headers: map[string]string(name='headers'),
  body: ListClustersMetaResponseBody(name='body'),
}

async function listClustersMeta(request: ListClustersMetaRequest): ListClustersMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListClustersMeta', 'GET', '/', 'json', false, 'json', request);
}

model ListCommandsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  commandId?: string(name='CommandId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model ListCommandsResponseBody = {
  commands?: {
    command?: [ 
    {
      commandContent?: string(name='CommandContent'),
      commandId?: string(name='CommandId'),
      timeout?: string(name='Timeout'),
      workingDir?: string(name='WorkingDir'),
    }
  ](name='Command')
  }(name='Commands'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListCommandsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCommandsResponseBody(name='body'),
}

async function listCommands(request: ListCommandsRequest): ListCommandsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCommands', 'GET', '/', 'json', false, 'json', request);
}

model ListCommunityImagesRequest {
  baseOsTag?: string(name='BaseOsTag', position='Query'),
  clusterId?: string(name='ClusterId', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
}

model ListCommunityImagesResponseBody = {
  images?: {
    imageInfo?: [ 
    {
      baseOsTag?: {
        architecture?: string(name='Architecture'),
        osTag?: string(name='OsTag'),
        platform?: string(name='Platform'),
        version?: string(name='Version'),
      }(name='BaseOsTag'),
      description?: string(name='Description'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      imageOwnerAlias?: string(name='ImageOwnerAlias'),
      osTag?: {
        architecture?: string(name='Architecture'),
        baseOsTag?: string(name='BaseOsTag'),
        osTag?: string(name='OsTag'),
        platform?: string(name='Platform'),
        version?: string(name='Version'),
      }(name='OsTag'),
      postInstallScript?: string(name='PostInstallScript'),
      pricingCycle?: string(name='PricingCycle'),
      productCode?: string(name='ProductCode'),
      size?: int32(name='Size'),
      skuCode?: string(name='SkuCode'),
      status?: string(name='Status'),
      uid?: string(name='Uid'),
    }
  ](name='ImageInfo')
  }(name='Images'),
  requestId?: string(name='RequestId'),
}

model ListCommunityImagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCommunityImagesResponseBody(name='body'),
}

async function listCommunityImages(request: ListCommunityImagesRequest): ListCommunityImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCommunityImages', 'GET', '/', 'json', false, 'json', request);
}

model ListContainerAppsRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model ListContainerAppsResponseBody = {
  containerApps?: {
    containerApps?: [ 
    {
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      id?: string(name='Id'),
      imageTag?: string(name='ImageTag'),
      name?: string(name='Name'),
      repository?: string(name='Repository'),
      type?: string(name='Type'),
    }
  ](name='ContainerApps')
  }(name='ContainerApps'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListContainerAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListContainerAppsResponseBody(name='body'),
}

async function listContainerApps(request: ListContainerAppsRequest): ListContainerAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListContainerApps', 'GET', '/', 'json', false, 'json', request);
}

model ListContainerImagesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  containerType?: string(name='ContainerType', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model ListContainerImagesResponseBody = {
  DBInfo?: string(name='DBInfo'),
  images?: {
    images?: [ 
    {
      imageId?: string(name='ImageId'),
      repository?: string(name='Repository'),
      status?: string(name='Status'),
      system?: string(name='System'),
      tag?: string(name='Tag'),
      type?: string(name='Type'),
      updateDateTime?: string(name='UpdateDateTime'),
    }
  ](name='Images')
  }(name='Images'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListContainerImagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListContainerImagesResponseBody(name='body'),
}

async function listContainerImages(request: ListContainerImagesRequest): ListContainerImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListContainerImages', 'GET', '/', 'json', false, 'json', request);
}

model ListCpfsFileSystemsRequest {
  fileSystemId?: string(name='FileSystemId', example='096751****', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', maximum=50, position='Query'),
}

model ListCpfsFileSystemsResponseBody = {
  fileSystemList?: {
    fileSystems?: [ 
    {
      capacity?: string(name='Capacity', example='5120'),
      createTime?: string(name='CreateTime', example='2018-07-26 16:36:27'),
      destription?: string(name='Destription', example='FilsDestription'),
      fileSystemId?: string(name='FileSystemId', example='096751****'),
      mountTargetList?: {
        mountTargets?: [ 
        {
          mountTargetDomain?: string(name='MountTargetDomain', example='c0967****.cn-hangzhou.cpfs.nas.aliyuncs.com'),
          networkType?: string(name='NetworkType', example='VPC'),
          status?: string(name='Status', example='Active'),
          vpcId?: string(name='VpcId', example='vpc-8vbvb34rtyh6xb3zrehs1****'),
          vswId?: string(name='VswId', example='vsw-8vb34rtyh6xb3zrehs1****'),
        }
      ](name='MountTargets')
      }(name='MountTargetList'),
      protocolType?: string(name='ProtocolType', example='NFS'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
    }
  ](name='FileSystems')
  }(name='FileSystemList'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='2B900AFE-C938-4551-86E9-97E231BBC876'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListCpfsFileSystemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListCpfsFileSystemsResponseBody(name='body'),
}

async function listCpfsFileSystems(request: ListCpfsFileSystemsRequest): ListCpfsFileSystemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCpfsFileSystems', 'GET', '/', 'json', false, 'json', request);
}

model ListCurrentClientVersionRequest {
}

model ListCurrentClientVersionResponseBody = {
  clientVersion?: string(name='ClientVersion', example='1.1.1'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model ListCurrentClientVersionResponse = {
  headers: map[string]string(name='headers'),
  body: ListCurrentClientVersionResponseBody(name='body'),
}

async function listCurrentClientVersion(request: ListCurrentClientVersionRequest): ListCurrentClientVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCurrentClientVersion', 'GET', '/', 'json', false, 'json', request);
}

model ListCustomImagesRequest {
  baseOsTag?: string(name='BaseOsTag', position='Query'),
  clusterId?: string(name='ClusterId', position='Query'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
}

model ListCustomImagesResponseBody = {
  images?: {
    imageInfo?: [ 
    {
      baseOsTag?: {
        architecture?: string(name='Architecture'),
        osTag?: string(name='OsTag'),
        platform?: string(name='Platform'),
        version?: string(name='Version'),
      }(name='BaseOsTag'),
      description?: string(name='Description'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      imageOwnerAlias?: string(name='ImageOwnerAlias'),
      osTag?: {
        architecture?: string(name='Architecture'),
        baseOsTag?: string(name='BaseOsTag'),
        osTag?: string(name='OsTag'),
        platform?: string(name='Platform'),
        version?: string(name='Version'),
      }(name='OsTag'),
      postInstallScript?: string(name='PostInstallScript'),
      pricingCycle?: string(name='PricingCycle'),
      productCode?: string(name='ProductCode'),
      size?: int32(name='Size'),
      skuCode?: string(name='SkuCode'),
      status?: string(name='Status'),
      uid?: string(name='Uid'),
    }
  ](name='ImageInfo')
  }(name='Images'),
  requestId?: string(name='RequestId'),
}

model ListCustomImagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCustomImagesResponseBody(name='body'),
}

async function listCustomImages(request: ListCustomImagesRequest): ListCustomImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCustomImages', 'GET', '/', 'json', false, 'json', request);
}

model ListFileSystemWithMountTargetsRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model ListFileSystemWithMountTargetsResponseBody = {
  fileSystemList?: {
    fileSystems?: [ 
    {
      bandWidth?: int32(name='BandWidth'),
      capacity?: int32(name='Capacity'),
      createTime?: string(name='CreateTime'),
      destription?: string(name='Destription'),
      encryptType?: int32(name='EncryptType'),
      fileSystemId?: string(name='FileSystemId'),
      fileSystemType?: string(name='FileSystemType'),
      meteredSize?: int32(name='MeteredSize'),
      mountTargetList?: {
        mountTargets?: [ 
        {
          accessGroup?: string(name='AccessGroup'),
          mountTargetDomain?: string(name='MountTargetDomain'),
          networkType?: string(name='NetworkType'),
          status?: string(name='Status'),
          vpcId?: string(name='VpcId'),
          vswId?: string(name='VswId'),
        }
      ](name='MountTargets')
      }(name='MountTargetList'),
      packageList?: {
        packages?: [ 
        {
          packageId?: string(name='PackageId'),
        }
      ](name='Packages')
      }(name='PackageList'),
      protocolType?: string(name='ProtocolType'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      storageType?: string(name='StorageType'),
      vpcId?: string(name='VpcId'),
    }
  ](name='FileSystems')
  }(name='FileSystemList'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListFileSystemWithMountTargetsResponse = {
  headers: map[string]string(name='headers'),
  body: ListFileSystemWithMountTargetsResponseBody(name='body'),
}

async function listFileSystemWithMountTargets(request: ListFileSystemWithMountTargetsRequest): ListFileSystemWithMountTargetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFileSystemWithMountTargets', 'GET', '/', 'json', false, 'json', request);
}

model ListImagesRequest {
  baseOsTag?: string(name='BaseOsTag', example='CentOS_7.2_64', position='Query'),
  instanceType?: string(name='InstanceType', example='ecs.n1.medium', position='Query'),
}

model ListImagesResponseBody = {
  osTags?: {
    osInfo?: [ 
    {
      architecture?: string(name='Architecture', example='i386'),
      baseOsTag?: string(name='BaseOsTag', example='CentOS_7.2_64'),
      imageId?: string(name='ImageId', example='m-bp1h8aoe73p71iow****'),
      osTag?: string(name='OsTag', example='CentOS_7.2_64'),
      platform?: string(name='Platform', example='CentOS'),
      version?: string(name='Version', example='7.2'),
    }
  ](name='OsInfo')
  }(name='OsTags'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model ListImagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListImagesResponseBody(name='body'),
}

async function listImages(request: ListImagesRequest): ListImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListImages', 'GET', '/', 'json', false, 'json', request);
}

model ListInstalledSoftwareRequest {
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
}

model ListInstalledSoftwareResponseBody = {
  requestId?: string(name='RequestId', example='DDCA0E7B-03E7-430D-810C-0D508539****'),
  softwareList?: {
    softwareList?: [ 
    {
      softwareId?: string(name='SoftwareId', example='MPICH_3.2'),
      softwareName?: string(name='SoftwareName', example='mpich'),
      softwareStatus?: string(name='SoftwareStatus', example='Installing'),
      softwareVersion?: string(name='SoftwareVersion', example='3.2'),
    }
  ](name='SoftwareList')
  }(name='SoftwareList'),
}

model ListInstalledSoftwareResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstalledSoftwareResponseBody(name='body'),
}

async function listInstalledSoftware(request: ListInstalledSoftwareRequest): ListInstalledSoftwareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstalledSoftware', 'GET', '/', 'json', false, 'json', request);
}

model ListInvocationResultsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  commandId: string(name='CommandId', position='Query'),
  instance?: [ 
    {
      id?: string(name='Id'),
    }
  ](name='Instance', position='Query'),
  invokeRecordStatus?: string(name='InvokeRecordStatus', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model ListInvocationResultsResponseBody = {
  invocationResults?: {
    invocationResult?: [ 
    {
      commandId?: string(name='CommandId'),
      exitCode?: int32(name='ExitCode'),
      finishedTime?: string(name='FinishedTime'),
      instanceId?: string(name='InstanceId'),
      invokeRecordStatus?: string(name='InvokeRecordStatus'),
      message?: string(name='Message'),
      success?: boolean(name='Success'),
    }
  ](name='InvocationResult')
  }(name='InvocationResults'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListInvocationResultsResponse = {
  headers: map[string]string(name='headers'),
  body: ListInvocationResultsResponseBody(name='body'),
}

async function listInvocationResults(request: ListInvocationResultsRequest): ListInvocationResultsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInvocationResults', 'GET', '/', 'json', false, 'json', request);
}

model ListInvocationStatusRequest {
  clusterId: string(name='ClusterId', position='Query'),
  commandId: string(name='CommandId', position='Query'),
}

model ListInvocationStatusResponseBody = {
  commandId?: string(name='CommandId'),
  invokeInstances?: {
    invokeInstance?: [ 
    {
      instanceId?: string(name='InstanceId'),
      instanceInvokeStatus?: string(name='InstanceInvokeStatus'),
    }
  ](name='InvokeInstance')
  }(name='InvokeInstances'),
  invokeStatus?: string(name='InvokeStatus'),
  requestId?: string(name='RequestId'),
}

model ListInvocationStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ListInvocationStatusResponseBody(name='body'),
}

async function listInvocationStatus(request: ListInvocationStatusRequest): ListInvocationStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInvocationStatus', 'GET', '/', 'json', false, 'json', request);
}

model ListJobTemplatesRequest {
  name?: string(name='Name', example='jobtemplateName', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', maximum=50, position='Query'),
}

model ListJobTemplatesResponseBody = {
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  templates?: {
    jobTemplates?: [ 
    {
      arrayRequest?: string(name='ArrayRequest', example='2-7:2'),
      clockTime?: string(name='ClockTime', example='12:00:00'),
      commandLine?: string(name='CommandLine', example='./LammpsTest/lammps.pbs'),
      gpu?: int32(name='Gpu', example='1'),
      id?: string(name='Id', example='ehpc-job-tmpl-6RxO5y****'),
      inputFileUrl?: string(name='InputFileUrl', example='https://test.oss-cn-beijing.aliyuncs.com/test.py'),
      mem?: string(name='Mem', example='1GB'),
      name?: string(name='Name', example='job1'),
      node?: int32(name='Node', example='2'),
      packagePath?: string(name='PackagePath', example='./jobfolder'),
      priority?: int32(name='Priority', example='0'),
      queue?: string(name='Queue', example='workq'),
      reRunable?: boolean(name='ReRunable', example='false'),
      runasUser?: string(name='RunasUser', example='user1'),
      stderrRedirectPath?: string(name='StderrRedirectPath', example='./LammpsTest'),
      stdoutRedirectPath?: string(name='StdoutRedirectPath', example='./Lammps'),
      task?: int32(name='Task', example='2'),
      thread?: int32(name='Thread', example='1'),
      unzipCmd?: string(name='UnzipCmd', example='tar xzf'),
      variables?: string(name='Variables', example='[{Name:,Value:},{Name:,Value:}]'),
      withUnzipCmd?: boolean(name='WithUnzipCmd', example='true'),
    }
  ](name='JobTemplates')
  }(name='Templates'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListJobTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobTemplatesResponseBody(name='body'),
}

async function listJobTemplates(request: ListJobTemplatesRequest): ListJobTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJobTemplates', 'GET', '/', 'json', false, 'json', request);
}

model ListJobsRequest {
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  owner?: string(name='Owner', example='user1', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', maximum=50, position='Query'),
  rerunable?: string(name='Rerunable', example='false', position='Query'),
  state?: string(name='State', example='finished', position='Query'),
}

model ListJobsResponseBody = {
  jobs?: {
    jobInfo?: [ 
    {
      arrayRequest?: string(name='ArrayRequest', example='1-10:2'),
      comment?: string(name='Comment', example='jobDescription'),
      id?: string(name='Id', example='0.manager'),
      lastModifyTime?: string(name='LastModifyTime', example='2018-07-18T17:46:48'),
      name?: string(name='Name', example='job1'),
      nodeList?: string(name='NodeList', example='[\\"compute2\\", \\"compute3\\"]'),
      owner?: string(name='Owner', example='user1'),
      priority?: string(name='Priority', example='0'),
      resources?: {
        cores?: int32(name='Cores', example='2'),
        nodes?: int32(name='Nodes', example='0'),
      }(name='Resources'),
      shellPath?: string(name='ShellPath', example='./Temp'),
      startTime?: string(name='StartTime', example='2018-07-18T17:46:48'),
      state?: string(name='State', example='FINISHED'),
      stderr?: string(name='Stderr', example='./Temp'),
      stdout?: string(name='Stdout', example='./Temp'),
      submitTime?: string(name='SubmitTime', example='2018-07-18T17:46:47'),
    }
  ](name='JobInfo')
  }(name='Jobs'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListJobsResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobsResponseBody(name='body'),
}

async function listJobs(request: ListJobsRequest): ListJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJobs', 'GET', '/', 'json', false, 'json', request);
}

model ListJobsWithFiltersRequest {
  async?: boolean(name='Async', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  createTimeEnd?: string(name='CreateTimeEnd', position='Query'),
  createTimeStart?: string(name='CreateTimeStart', position='Query'),
  executeOrder?: string(name='ExecuteOrder', position='Query'),
  jobName?: string(name='JobName', position='Query'),
  jobStatus?: string(name='JobStatus', position='Query'),
  nodes?: [ string ](name='Nodes', position='Query'),
  pageNumber?: long(name='PageNumber', position='Query'),
  pageSize?: long(name='PageSize', position='Query'),
  pendOrder?: string(name='PendOrder', position='Query'),
  queues?: [ string ](name='Queues', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  submitOrder?: string(name='SubmitOrder', position='Query'),
  users?: [ string ](name='Users', position='Query'),
}

model ListJobsWithFiltersResponseBody = {
  jobs?: [ 
    {
      arrayRequest?: string(name='ArrayRequest'),
      comment?: string(name='Comment'),
      id?: string(name='Id'),
      lastModifyTime?: string(name='LastModifyTime'),
      name?: string(name='Name'),
      nodeList?: string(name='NodeList'),
      owner?: string(name='Owner'),
      priority?: string(name='Priority'),
      queue?: string(name='Queue'),
      rerunable?: boolean(name='Rerunable'),
      resources?: {
        cores?: long(name='Cores'),
        nodes?: long(name='Nodes'),
      }(name='Resources'),
      shellPath?: string(name='ShellPath'),
      startTime?: string(name='StartTime'),
      state?: string(name='State'),
      stderr?: string(name='Stderr'),
      stdout?: string(name='Stdout'),
      submitTime?: string(name='SubmitTime'),
      variableList?: string(name='VariableList'),
    }
  ](name='Jobs', description='Jobs'),
  pageNumber?: long(name='PageNumber', description='PageNumber', example='1'),
  pageSize?: long(name='PageSize', description='PageSize', example='20'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: boolean(name='Success', description='Success', example='True'),
  totalCount?: int32(name='TotalCount', description='TotalCount本次请求条件下的数据总量，此参数为可选参数，默认可不返回', example='1'),
}

model ListJobsWithFiltersResponse = {
  headers: map[string]string(name='headers'),
  body: ListJobsWithFiltersResponseBody(name='body'),
}

async function listJobsWithFilters(request: ListJobsWithFiltersRequest): ListJobsWithFiltersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListJobsWithFilters', 'GET', '/', 'json', false, 'json', request);
}

model ListNodesRequest {
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  filter?: string(name='Filter', example='{"status":"running"}', position='Query'),
  hostName?: string(name='HostName', example='test-HostName', position='Query'),
  hostNamePrefix?: string(name='HostNamePrefix', example='compute', position='Query'),
  hostNameSuffix?: string(name='HostNameSuffix', example='01', position='Query'),
  pageNumber?: int32(name='PageNumber', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', maximum=100, position='Query'),
  privateIpAddress?: string(name='PrivateIpAddress', example='172.16.**.**', position='Query'),
  role?: string(name='Role', example='Manager', position='Query'),
  sequence?: string(name='Sequence', example='Forward', position='Query'),
  sortBy?: string(name='SortBy', example='AddedTime', position='Query'),
}

model ListNodesResponseBody = {
  nodes?: {
    nodeInfo?: [ 
    {
      addTime?: string(name='AddTime', example='2020-06-09T06:22:02.000Z'),
      createMode?: string(name='CreateMode', example='manual'),
      createdByEhpc?: boolean(name='CreatedByEhpc', example='true'),
      expired?: boolean(name='Expired', example='false'),
      expiredTime?: string(name='ExpiredTime', example='2020-06-09T06:22:02.000Z'),
      hostName?: string(name='HostName', example='test-HostName'),
      htEnabled?: boolean(name='HtEnabled', example='true'),
      id?: string(name='Id', example='i-bp15707mys2rsy0j****'),
      imageId?: string(name='ImageId', example='centos_7_06_64_20G_alibase_20190711.vhd'),
      imageOwnerAlias?: string(name='ImageOwnerAlias', example='system'),
      instanceType?: string(name='InstanceType', example='ecs.c5.large'),
      ipAddress?: string(name='IpAddress', example='172.16.**.**'),
      location?: string(name='Location', example='PublicCloud'),
      lockReason?: string(name='LockReason', example='financial'),
      publicIpAddress?: string(name='PublicIpAddress', example='172.16.**.**'),
      regionId?: string(name='RegionId', example='cn-hangzhou'),
      roles?: {
        role?: [ string ](name='Role')
      }(name='Roles'),
      spotStrategy?: string(name='SpotStrategy', example='NoSpot'),
      stateInSched?: string(name='StateInSched', example='active'),
      status?: string(name='Status', example='running'),
      totalResources?: {
        cpu?: int32(name='Cpu', example='1'),
        gpu?: int32(name='Gpu', example='0'),
        memory?: int32(name='Memory', example='1024'),
      }(name='TotalResources'),
      usedResources?: {
        cpu?: int32(name='Cpu', example='0'),
        gpu?: int32(name='Gpu', example='0'),
        memory?: int32(name='Memory', example='0'),
      }(name='UsedResources'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp1e47optm9g58zcu****'),
      version?: string(name='Version', example='1.0.78'),
      vpcId?: string(name='VpcId', example='vpc-bp1gnu8br4ay7beb2w****'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
    }
  ](name='NodeInfo')
  }(name='Nodes'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='1'),
  requestId?: string(name='RequestId', example='89A1AC0F-4A6C-4F3D-98F9-BEF9A823****'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListNodesResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodesResponseBody(name='body'),
}

async function listNodes(request: ListNodesRequest): ListNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodes', 'GET', '/', 'json', false, 'json', request);
}

model ListNodesByQueueRequest {
  async?: boolean(name='Async', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=100, position='Query'),
  queueName: string(name='QueueName', position='Query'),
}

model ListNodesByQueueResponseBody = {
  nodes?: {
    nodeInfo?: [ 
    {
      addTime?: string(name='AddTime'),
      createMode?: string(name='CreateMode'),
      createdByEhpc?: boolean(name='CreatedByEhpc'),
      expired?: boolean(name='Expired'),
      expiredTime?: string(name='ExpiredTime'),
      hostName?: string(name='HostName'),
      htEnabled?: boolean(name='HtEnabled'),
      id?: string(name='Id'),
      imageId?: string(name='ImageId'),
      imageOwnerAlias?: string(name='ImageOwnerAlias'),
      ipAddress?: string(name='IpAddress'),
      location?: string(name='Location'),
      lockReason?: string(name='LockReason'),
      publicIpAddress?: string(name='PublicIpAddress'),
      regionId?: string(name='RegionId'),
      spotStrategy?: string(name='SpotStrategy'),
      stateInSched?: string(name='StateInSched'),
      status?: string(name='Status'),
      totalResources?: {
        cpu?: int32(name='Cpu'),
        gpu?: int32(name='Gpu'),
        memory?: int32(name='Memory'),
      }(name='TotalResources'),
      usedResources?: {
        cpu?: int32(name='Cpu'),
        gpu?: int32(name='Gpu'),
        memory?: int32(name='Memory'),
      }(name='UsedResources'),
      vSwitchId?: string(name='VSwitchId'),
      version?: string(name='Version'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='NodeInfo')
  }(name='Nodes'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListNodesByQueueResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodesByQueueResponseBody(name='body'),
}

async function listNodesByQueue(request: ListNodesByQueueRequest): ListNodesByQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodesByQueue', 'GET', '/', 'json', false, 'json', request);
}

model ListNodesNoPagingRequest {
  clusterId: string(name='ClusterId', position='Query'),
  hostName?: string(name='HostName', position='Query'),
  role?: string(name='Role', position='Query'),
  sequence?: string(name='Sequence', position='Query'),
}

model ListNodesNoPagingResponseBody = {
  nodes?: {
    nodeInfo?: [ 
    {
      hostName?: string(name='HostName'),
      id?: string(name='Id'),
      imageId?: string(name='ImageId'),
      instanceType?: string(name='InstanceType'),
      status?: string(name='Status'),
    }
  ](name='NodeInfo')
  }(name='Nodes'),
  requestId?: string(name='RequestId'),
}

model ListNodesNoPagingResponse = {
  headers: map[string]string(name='headers'),
  body: ListNodesNoPagingResponseBody(name='body'),
}

async function listNodesNoPaging(request: ListNodesNoPagingRequest): ListNodesNoPagingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNodesNoPaging', 'GET', '/', 'json', false, 'json', request);
}

model ListPreferredEcsTypesRequest {
  instanceChargeType?: string(name='InstanceChargeType', position='Query'),
  spotStrategy?: string(name='SpotStrategy', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model ListPreferredEcsTypesResponseBody = {
  requestId?: string(name='RequestId'),
  series?: {
    seriesInfo?: [ 
    {
      roles?: {
        compute?: {
          instanceTypeId?: [ string ](name='InstanceTypeId')
        }(name='Compute'),
        login?: {
          instanceTypeId?: [ string ](name='InstanceTypeId')
        }(name='Login'),
        manager?: {
          instanceTypeId?: [ string ](name='InstanceTypeId')
        }(name='Manager'),
      }(name='Roles'),
      seriesId?: string(name='SeriesId'),
      seriesName?: string(name='SeriesName'),
    }
  ](name='SeriesInfo')
  }(name='Series'),
  supportSpotInstance?: boolean(name='SupportSpotInstance'),
}

model ListPreferredEcsTypesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPreferredEcsTypesResponseBody(name='body'),
}

async function listPreferredEcsTypes(request: ListPreferredEcsTypesRequest): ListPreferredEcsTypesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPreferredEcsTypes', 'GET', '/', 'json', false, 'json', request);
}

model ListQueuesRequest {
  async?: boolean(name='Async', example='false', position='Query'),
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
}

model ListQueuesResponseBody = {
  queues?: {
    queueInfo?: [ 
    {
      computeInstanceType?: {
        instanceType?: [ string ](name='InstanceType')
      }(name='ComputeInstanceType'),
      enableAutoGrow?: boolean(name='EnableAutoGrow', example='false'),
      hostNamePrefix?: string(name='HostNamePrefix', example='compute'),
      hostNameSuffix?: string(name='HostNameSuffix', example='01'),
      imageId?: string(name='ImageId', example='centos_7_06_64_20G_alibase_20****.vhd'),
      queueName?: string(name='QueueName', example='workq'),
      resourceGroupId?: string(name='ResourceGroupId', example='rg-acfmxp7uc24****'),
      spotInstanceTypes?: {
        instance?: [ 
        {
          instanceType?: string(name='InstanceType', example='ecs.n1.tiny'),
          spotPriceLimit?: float(name='SpotPriceLimit', example='0.062'),
        }
      ](name='Instance')
      }(name='SpotInstanceTypes'),
      spotStrategy?: string(name='SpotStrategy', example='SpotWithPriceLimit'),
      type?: string(name='Type', example='Execution'),
    }
  ](name='QueueInfo')
  }(name='Queues'),
  requestId?: string(name='RequestId', example='C6E5005C-00B0-4F27-98BB-95AB88016C22'),
}

model ListQueuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListQueuesResponseBody(name='body'),
}

async function listQueues(request: ListQueuesRequest): ListQueuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListQueues', 'GET', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
}

model ListRegionsResponseBody = {
  regions?: {
    regionInfo?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='RegionInfo')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'GET', '/', 'json', false, 'json', request);
}

model ListSecurityGroupsRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model ListSecurityGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  securityGroups?: {
    securityGroup?: [ string ](name='SecurityGroup')
  }(name='SecurityGroups'),
  totalCount?: int32(name='TotalCount'),
}

model ListSecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSecurityGroupsResponseBody(name='body'),
}

async function listSecurityGroups(request: ListSecurityGroupsRequest): ListSecurityGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSecurityGroups', 'GET', '/', 'json', false, 'json', request);
}

model ListSoftwaresRequest {
  ehpcVersion?: string(name='EhpcVersion', position='Query'),
  osTag?: string(name='OsTag', position='Query'),
}

model ListSoftwaresResponseBody = {
  requestId?: string(name='RequestId'),
  softwares?: {
    softwareInfo?: [ 
    {
      accountType?: string(name='AccountType'),
      accountVersion?: string(name='AccountVersion'),
      applications?: {
        applicationInfo?: [ 
        {
          name?: string(name='Name'),
          required?: boolean(name='Required'),
          tag?: string(name='Tag'),
          version?: string(name='Version'),
        }
      ](name='ApplicationInfo')
      }(name='Applications'),
      ehpcVersion?: string(name='EhpcVersion'),
      osTag?: string(name='OsTag'),
      schedulerType?: string(name='SchedulerType'),
      schedulerVersion?: string(name='SchedulerVersion'),
    }
  ](name='SoftwareInfo')
  }(name='Softwares'),
}

model ListSoftwaresResponse = {
  headers: map[string]string(name='headers'),
  body: ListSoftwaresResponseBody(name='body'),
}

async function listSoftwares(request: ListSoftwaresRequest): ListSoftwaresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSoftwares', 'GET', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='下一个查询开始Token', position='Query'),
  regionId: string(name='RegionId', description='地域', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='资源ID,最多 50个子项', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表，最多包含20个子项', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='下一个查询开始Token，NextToken为空说明没有下一个'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='资源ID'),
      resourceType?: string(name='ResourceType', description='资源类型'),
      tagKey?: string(name='TagKey', description='标签键'),
      tagValue?: string(name='TagValue', description='标签值'),
    }
  ](name='TagResource')
  }(name='TagResources', description='资源列表'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListTasksRequest {
  archived?: boolean(name='Archived', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, maximum=999, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  taskId?: string(name='TaskId', position='Query'),
}

model ListTasksResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  tasks?: [ 
    {
      clusterId?: string(name='ClusterId'),
      currentStep?: int32(name='CurrentStep'),
      errors?: string(name='Errors'),
      request?: string(name='Request'),
      result?: string(name='Result'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
      taskType?: string(name='TaskType'),
      totalSteps?: int32(name='TotalSteps'),
    }
  ](name='Tasks'),
  totalCount?: int32(name='TotalCount'),
}

model ListTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListTasksResponseBody(name='body'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTasks', 'GET', '/', 'json', false, 'json', request);
}

model ListUpgradeClientsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model ListUpgradeClientsResponseBody = {
  clientRecords?: [ 
    {
      newVersion?: string(name='NewVersion'),
      oldVersion?: string(name='OldVersion'),
      subUid?: string(name='SubUid'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='ClientRecords'),
  currentVersion?: string(name='CurrentVersion'),
  latestVersion?: string(name='LatestVersion'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model ListUpgradeClientsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUpgradeClientsResponseBody(name='body'),
}

async function listUpgradeClients(request: ListUpgradeClientsRequest): ListUpgradeClientsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUpgradeClients', 'GET', '/', 'json', false, 'json', request);
}

model ListUsersRequest {
  clusterId: string(name='ClusterId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model ListUsersResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  users?: {
    userInfo?: [ 
    {
      addTime?: string(name='AddTime'),
      group?: string(name='Group'),
      name?: string(name='Name'),
    }
  ](name='UserInfo')
  }(name='Users'),
}

model ListUsersResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersResponseBody(name='body'),
}

async function listUsers(request: ListUsersRequest): ListUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsers', 'GET', '/', 'json', false, 'json', request);
}

model ListUsersAsyncRequest {
  asyncId?: string(name='AsyncId', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model ListUsersAsyncResponseBody = {
  asyncId?: string(name='AsyncId'),
  asyncStatus?: string(name='AsyncStatus'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  users?: {
    userInfo?: [ 
    {
      addTime?: string(name='AddTime'),
      group?: string(name='Group'),
      groupId?: string(name='GroupId'),
      name?: string(name='Name'),
      userId?: string(name='UserId'),
    }
  ](name='UserInfo')
  }(name='Users'),
}

model ListUsersAsyncResponse = {
  headers: map[string]string(name='headers'),
  body: ListUsersAsyncResponseBody(name='body'),
}

async function listUsersAsync(request: ListUsersAsyncRequest): ListUsersAsyncResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUsersAsync', 'GET', '/', 'json', false, 'json', request);
}

model ListVolumesRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', maximum=50, position='Query'),
}

model ListVolumesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  volumes?: {
    volumeInfo?: [ 
    {
      additionalVolumes?: {
        volumeInfo?: [ 
        {
          jobQueue?: string(name='JobQueue'),
          localDirectory?: string(name='LocalDirectory'),
          location?: string(name='Location'),
          remoteDirectory?: string(name='RemoteDirectory'),
          role?: string(name='Role'),
          volumeId?: string(name='VolumeId'),
          volumeMountpoint?: string(name='VolumeMountpoint'),
          volumeProtocol?: string(name='VolumeProtocol'),
          volumeType?: string(name='VolumeType'),
        }
      ](name='VolumeInfo')
      }(name='AdditionalVolumes'),
      clusterId?: string(name='ClusterId'),
      clusterName?: string(name='ClusterName'),
      regionId?: string(name='RegionId'),
      remoteDirectory?: string(name='RemoteDirectory'),
      volumeId?: string(name='VolumeId'),
      volumeMountpoint?: string(name='VolumeMountpoint'),
      volumeProtocol?: string(name='VolumeProtocol'),
      volumeType?: string(name='VolumeType'),
    }
  ](name='VolumeInfo')
  }(name='Volumes'),
}

model ListVolumesResponse = {
  headers: map[string]string(name='headers'),
  body: ListVolumesResponseBody(name='body'),
}

async function listVolumes(request: ListVolumesRequest): ListVolumesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVolumes', 'GET', '/', 'json', false, 'json', request);
}

model ModifyClusterAttributesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  description?: string(name='Description', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', position='Query'),
  name?: string(name='Name', position='Query'),
  ramNodeTypes?: [ string ](name='RamNodeTypes', position='Query'),
  ramRoleName?: string(name='RamRoleName', example='AliyunEHPCFullAccess', position='Query'),
}

model ModifyClusterAttributesResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyClusterAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterAttributesResponseBody(name='body'),
}

async function modifyClusterAttributes(request: ModifyClusterAttributesRequest): ModifyClusterAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyClusterAttributes', 'GET', '/', 'json', false, 'json', request);
}

model ModifyContainerAppAttributesRequest {
  containerId: string(name='ContainerId', example='ehpc-container-ABDUGSkjs****', position='Query'),
  description?: string(name='Description', example='ExampleDescription', position='Query'),
}

model ModifyContainerAppAttributesResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model ModifyContainerAppAttributesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyContainerAppAttributesResponseBody(name='body'),
}

async function modifyContainerAppAttributes(request: ModifyContainerAppAttributesRequest): ModifyContainerAppAttributesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyContainerAppAttributes', 'GET', '/', 'json', false, 'json', request);
}

model ModifyImageGatewayConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  DBPassword?: string(name='DBPassword', example='13****', position='Query'),
  DBServerInfo?: string(name='DBServerInfo', example='dds-uf6628e4287716b433270.mongodb.rds.aliyuncs.com:3717/admin', position='Query'),
  DBType?: string(name='DBType', example='mongodb', position='Query'),
  DBUsername?: string(name='DBUsername', example='root', position='Query'),
  defaultRepoLocation?: string(name='DefaultRepoLocation', example='registry-1.docker.io', position='Query'),
  imageExpirationTimeout?: string(name='ImageExpirationTimeout', example='12:00:00', position='Query'),
  pullUpdateTimeout?: int32(name='PullUpdateTimeout', example='300', position='Query'),
  repo?: [ 
    {
      auth?: string(name='Auth', example='http'),
      location?: string(name='Location', example='registry.docker-cn.com'),
      URL?: string(name='URL', example='https://registry.docker-cn.com'),
    }
  ](name='Repo', position='Query'),
}

model ModifyImageGatewayConfigResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE73368'),
}

model ModifyImageGatewayConfigResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageGatewayConfigResponseBody(name='body'),
}

async function modifyImageGatewayConfig(request: ModifyImageGatewayConfigRequest): ModifyImageGatewayConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyImageGatewayConfig', 'GET', '/', 'json', false, 'json', request);
}

model ModifyUserGroupsRequest {
  async?: boolean(name='Async', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  user: [ 
    {
      group?: string(name='Group'),
      name?: string(name='Name'),
    }
  ](name='User', position='Query'),
}

model ModifyUserGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserGroupsResponseBody(name='body'),
}

async function modifyUserGroups(request: ModifyUserGroupsRequest): ModifyUserGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUserGroups', 'GET', '/', 'json', false, 'json', request);
}

model ModifyUserPasswordsRequest {
  async?: boolean(name='Async', position='Query'),
  clusterId: string(name='ClusterId', example='ehpc-hz-FYUr32****', position='Query'),
  user: [ 
    {
      name?: string(name='Name', example='user1'),
      password?: string(name='Password', example='1@a****'),
    }
  ](name='User', position='Query'),
}

model ModifyUserPasswordsResponseBody = {
  requestId?: string(name='RequestId', example='04F0F334-1335-436C-A1D7-6C044FE7****'),
}

model ModifyUserPasswordsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyUserPasswordsResponseBody(name='body'),
}

async function modifyUserPasswords(request: ModifyUserPasswordsRequest): ModifyUserPasswordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyUserPasswords', 'GET', '/', 'json', false, 'json', request);
}

model ModifyVisualServicePasswdRequest {
  clusterId: string(name='ClusterId', position='Query'),
  passwd: string(name='Passwd', position='Query'),
  runasUser: string(name='RunasUser', position='Query'),
  runasUserPassword: string(name='RunasUserPassword', position='Query'),
}

model ModifyVisualServicePasswdResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ModifyVisualServicePasswdResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyVisualServicePasswdResponseBody(name='body'),
}

async function modifyVisualServicePasswd(request: ModifyVisualServicePasswdRequest): ModifyVisualServicePasswdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyVisualServicePasswd', 'GET', '/', 'json', false, 'json', request);
}

model MountNFSRequest {
  instanceId: string(name='InstanceId', position='Query'),
  mountDir: string(name='MountDir', position='Query'),
  nfsDir: string(name='NfsDir', position='Query'),
  protocolType?: string(name='ProtocolType', position='Query'),
  remoteDir?: string(name='RemoteDir', position='Query'),
}

model MountNFSResponseBody = {
  invokeId?: string(name='InvokeId'),
  requestId?: string(name='RequestId'),
}

model MountNFSResponse = {
  headers: map[string]string(name='headers'),
  body: MountNFSResponseBody(name='body'),
}

async function mountNFS(request: MountNFSRequest): MountNFSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MountNFS', 'GET', '/', 'json', false, 'json', request);
}

model PullImageRequest {
  clusterId: string(name='ClusterId', example='ehpc-hz-nkKsP3****', position='Query'),
  containerType?: string(name='ContainerType', example='shifter', position='Query'),
  imageTag?: string(name='ImageTag', example='latest', position='Query'),
  repository: string(name='Repository', example='centos', position='Query'),
}

model PullImageResponseBody = {
  requestId?: string(name='RequestId', example='29d3d9Ee-8eCB-5013-A1c2-1CeD19C6CfFe'),
}

model PullImageResponse = {
  headers: map[string]string(name='headers'),
  body: PullImageResponseBody(name='body'),
}

async function pullImage(request: PullImageRequest): PullImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PullImage', 'GET', '/', 'json', false, 'json', request);
}

model QueryServicePackAndPriceRequest {
}

model QueryServicePackAndPriceResponseBody = {
  chargeAmount?: int32(name='ChargeAmount'),
  currency?: string(name='Currency'),
  discountPrice?: float(name='DiscountPrice'),
  originalAmount?: int32(name='OriginalAmount'),
  originalPrice?: float(name='OriginalPrice'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  servicePack?: {
    servicePackInfo?: [ 
    {
      capacity?: int32(name='Capacity'),
      endTime?: int32(name='EndTime'),
      instanceName?: string(name='InstanceName'),
      startTime?: int32(name='StartTime'),
    }
  ](name='ServicePackInfo')
  }(name='ServicePack'),
  tradePrice?: float(name='TradePrice'),
}

model QueryServicePackAndPriceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryServicePackAndPriceResponseBody(name='body'),
}

async function queryServicePackAndPrice(request: QueryServicePackAndPriceRequest): QueryServicePackAndPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryServicePackAndPrice', 'GET', '/', 'json', false, 'json', request);
}

model RecoverClusterRequest {
  accountType?: string(name='AccountType', position='Query'),
  clientVersion?: string(name='ClientVersion', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  imageOwnerAlias?: string(name='ImageOwnerAlias', position='Query'),
  osTag?: string(name='OsTag', position='Query'),
  schedulerType?: string(name='SchedulerType', position='Query'),
}

model RecoverClusterResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model RecoverClusterResponse = {
  headers: map[string]string(name='headers'),
  body: RecoverClusterResponseBody(name='body'),
}

async function recoverCluster(request: RecoverClusterRequest): RecoverClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecoverCluster', 'GET', '/', 'json', false, 'json', request);
}

model RerunJobsRequest {
  async?: boolean(name='Async', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  jobs: string(name='Jobs', position='Query'),
}

model RerunJobsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RerunJobsResponse = {
  headers: map[string]string(name='headers'),
  body: RerunJobsResponseBody(name='body'),
}

async function rerunJobs(request: RerunJobsRequest): RerunJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RerunJobs', 'GET', '/', 'json', false, 'json', request);
}

model ResetNodesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  instance: [ 
    {
      id?: string(name='Id'),
    }
  ](name='Instance', position='Query'),
}

model ResetNodesResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model ResetNodesResponse = {
  headers: map[string]string(name='headers'),
  body: ResetNodesResponseBody(name='body'),
}

async function resetNodes(request: ResetNodesRequest): ResetNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetNodes', 'GET', '/', 'json', false, 'json', request);
}

model RunCloudMetricProfilingRequest {
  clusterId: string(name='ClusterId', position='Query'),
  duration?: int32(name='Duration', position='Query'),
  freq?: int32(name='Freq', position='Query'),
  hostName: string(name='HostName', position='Query'),
  processId: int32(name='ProcessId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model RunCloudMetricProfilingResponseBody = {
  requestId?: string(name='RequestId'),
}

model RunCloudMetricProfilingResponse = {
  headers: map[string]string(name='headers'),
  body: RunCloudMetricProfilingResponseBody(name='body'),
}

async function runCloudMetricProfiling(request: RunCloudMetricProfilingRequest): RunCloudMetricProfilingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RunCloudMetricProfiling', 'GET', '/', 'json', false, 'json', request);
}

model SetAutoScaleConfigRequest {
  clusterId: string(name='ClusterId', position='Query'),
  enableAutoGrow?: boolean(name='EnableAutoGrow', position='Query'),
  enableAutoShrink?: boolean(name='EnableAutoShrink', position='Query'),
  excludeNodes?: string(name='ExcludeNodes', position='Query'),
  extraNodesGrowRatio?: int32(name='ExtraNodesGrowRatio', position='Query'),
  growIntervalInMinutes?: int32(name='GrowIntervalInMinutes', position='Query'),
  growRatio?: int32(name='GrowRatio', maximum=100, position='Query'),
  growTimeoutInMinutes?: int32(name='GrowTimeoutInMinutes', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  maxNodesInCluster: int32(name='MaxNodesInCluster', position='Query'),
  queues?: [ 
    {
      dataDisks?: [ 
        {
          dataDiskCategory?: string(name='DataDiskCategory'),
          dataDiskDeleteWithInstance?: boolean(name='DataDiskDeleteWithInstance'),
          dataDiskEncrypted?: boolean(name='DataDiskEncrypted'),
          dataDiskKMSKeyId?: string(name='DataDiskKMSKeyId'),
          dataDiskPerformanceLevel?: string(name='DataDiskPerformanceLevel'),
          dataDiskSize?: int32(name='DataDiskSize'),
        }
      ](name='DataDisks'),
      enableAutoGrow?: boolean(name='EnableAutoGrow'),
      enableAutoShrink?: boolean(name='EnableAutoShrink'),
      hostNamePrefix?: string(name='HostNamePrefix'),
      hostNameSuffix?: string(name='HostNameSuffix'),
      instanceType?: string(name='InstanceType'),
      instanceTypes?: [ 
        {
          instanceType?: string(name='InstanceType'),
          spotDuration?: int32(name='SpotDuration', description='抢占式实例的保留时长，单位为小时。取值范围：0~6。
- 保留时长2~6正在邀测中，如需开通请提交工单。
- 取值为0，则为无保护期模式。
默认值：1。'),
          spotInterruptionBehavior?: string(name='SpotInterruptionBehavior', description='抢占实例中断模式。目前仅支持Terminate（默认）直接释放实例。'),
          spotPriceLimit?: float(name='SpotPriceLimit'),
          spotStrategy?: string(name='SpotStrategy'),
          vSwitchId?: string(name='VSwitchId'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='InstanceTypes'),
      maxNodesInQueue?: int32(name='MaxNodesInQueue'),
      maxNodesPerCycle?: long(name='MaxNodesPerCycle'),
      minNodesInQueue?: int32(name='MinNodesInQueue'),
      minNodesPerCycle?: long(name='MinNodesPerCycle'),
      queueImageId?: string(name='QueueImageId'),
      queueName?: string(name='QueueName'),
      spotPriceLimit?: float(name='SpotPriceLimit'),
      spotStrategy?: string(name='SpotStrategy'),
      systemDiskCategory?: string(name='SystemDiskCategory'),
      systemDiskLevel?: string(name='SystemDiskLevel'),
      systemDiskSize?: int32(name='SystemDiskSize'),
    }
  ](name='Queues', position='Query'),
  shrinkIdleTimes?: int32(name='ShrinkIdleTimes', position='Query'),
  shrinkIntervalInMinutes?: int32(name='ShrinkIntervalInMinutes', position='Query'),
  spotPriceLimit?: float(name='SpotPriceLimit', position='Query'),
  spotStrategy?: string(name='SpotStrategy', position='Query'),
}

model SetAutoScaleConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetAutoScaleConfigResponse = {
  headers: map[string]string(name='headers'),
  body: SetAutoScaleConfigResponseBody(name='body'),
}

async function setAutoScaleConfig(request: SetAutoScaleConfigRequest): SetAutoScaleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAutoScaleConfig', 'GET', '/', 'json', false, 'json', request);
}

model SetGWSClusterPolicyRequest {
  asyncMode?: boolean(name='AsyncMode', position='Query'),
  clipboard: string(name='Clipboard', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  localDrive: string(name='LocalDrive', position='Query'),
  udpPort?: string(name='UdpPort', position='Query'),
  usbRedirect: string(name='UsbRedirect', position='Query'),
  watermark: string(name='Watermark', position='Query'),
}

model SetGWSClusterPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetGWSClusterPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: SetGWSClusterPolicyResponseBody(name='body'),
}

async function setGWSClusterPolicy(request: SetGWSClusterPolicyRequest): SetGWSClusterPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetGWSClusterPolicy', 'POST', '/', 'json', false, 'json', request);
}

model SetGWSInstanceNameRequest {
  instanceId: string(name='InstanceId', example='i-bp1bzqq4rj1eemun****', position='Query'),
  name: string(name='Name', example='c0-i01-1-g6-2c8g', position='Query'),
}

model SetGWSInstanceNameResponseBody = {
  requestId?: string(name='RequestId', example='0505220-2409-4B78-B7B6-CD5F294518C9'),
}

model SetGWSInstanceNameResponse = {
  headers: map[string]string(name='headers'),
  body: SetGWSInstanceNameResponseBody(name='body'),
}

async function setGWSInstanceName(request: SetGWSInstanceNameRequest): SetGWSInstanceNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetGWSInstanceName', 'GET', '/', 'json', false, 'json', request);
}

model SetGWSInstanceUserRequest {
  instanceId: string(name='InstanceId', position='Query'),
  userName?: string(name='UserName', position='Query'),
  userUid?: string(name='UserUid', position='Query'),
}

model SetGWSInstanceUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetGWSInstanceUserResponse = {
  headers: map[string]string(name='headers'),
  body: SetGWSInstanceUserResponseBody(name='body'),
}

async function setGWSInstanceUser(request: SetGWSInstanceUserRequest): SetGWSInstanceUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetGWSInstanceUser', 'GET', '/', 'json', false, 'json', request);
}

model SetPostScriptsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  postInstallScripts?: [ 
    {
      args?: string(name='Args'),
      url?: string(name='Url'),
    }
  ](name='PostInstallScripts', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model SetPostScriptsResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SetPostScriptsResponse = {
  headers: map[string]string(name='headers'),
  body: SetPostScriptsResponseBody(name='body'),
}

async function setPostScripts(request: SetPostScriptsRequest): SetPostScriptsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPostScripts', 'GET', '/', 'json', false, 'json', request);
}

model SetQueueRequest {
  clusterId: string(name='ClusterId', position='Query'),
  node: [ 
    {
      name?: string(name='Name'),
    }
  ](name='Node', position='Query'),
  queueName: string(name='QueueName', position='Query'),
}

model SetQueueResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetQueueResponse = {
  headers: map[string]string(name='headers'),
  body: SetQueueResponseBody(name='body'),
}

async function setQueue(request: SetQueueRequest): SetQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetQueue', 'GET', '/', 'json', false, 'json', request);
}

model SetSchedulerInfoRequest {
  clusterId: string(name='ClusterId', position='Query'),
  pbsInfo?: [ 
    {
      aclLimit?: [ 
        {
          aclUsers?: string(name='AclUsers'),
          queue?: string(name='Queue'),
        }
      ](name='AclLimit'),
      jobHistoryDuration?: int32(name='JobHistoryDuration'),
      resourceLimit?: [ 
        {
          cpus?: int32(name='Cpus'),
          maxJobs?: int32(name='MaxJobs'),
          mem?: string(name='Mem'),
          nodes?: int32(name='Nodes'),
          queue?: string(name='Queue'),
          user?: string(name='User'),
        }
      ](name='ResourceLimit'),
      schedInterval?: int32(name='SchedInterval'),
      schedMaxJobs?: int32(name='SchedMaxJobs'),
      schedMaxQueuedJobs?: int32(name='SchedMaxQueuedJobs'),
    }
  ](name='PbsInfo', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  scheduler: [ 
    {
      schedName: string(name='SchedName'),
    }
  ](name='Scheduler', position='Query'),
  slurmInfo?: [ 
    {
      backfillInterval?: int32(name='BackfillInterval'),
      schedInterval?: int32(name='SchedInterval'),
    }
  ](name='SlurmInfo', position='Query'),
}

model SetSchedulerInfoResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SetSchedulerInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SetSchedulerInfoResponseBody(name='body'),
}

async function setSchedulerInfo(request: SetSchedulerInfoRequest): SetSchedulerInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSchedulerInfo', 'GET', '/', 'json', false, 'json', request);
}

model StartClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model StartClusterResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model StartClusterResponse = {
  headers: map[string]string(name='headers'),
  body: StartClusterResponseBody(name='body'),
}

async function startCluster(request: StartClusterRequest): StartClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartCluster', 'GET', '/', 'json', false, 'json', request);
}

model StartGWSInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model StartGWSInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartGWSInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartGWSInstanceResponseBody(name='body'),
}

async function startGWSInstance(request: StartGWSInstanceRequest): StartGWSInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartGWSInstance', 'GET', '/', 'json', false, 'json', request);
}

model StartNodesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  instance: [ 
    {
      id?: string(name='Id'),
    }
  ](name='Instance', position='Query'),
  role?: string(name='Role', position='Query'),
}

model StartNodesResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model StartNodesResponse = {
  headers: map[string]string(name='headers'),
  body: StartNodesResponseBody(name='body'),
}

async function startNodes(request: StartNodesRequest): StartNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartNodes', 'GET', '/', 'json', false, 'json', request);
}

model StartVisualServiceRequest {
  cidrIp: string(name='CidrIp', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  port: int32(name='Port', maximum=65535, position='Query'),
}

model StartVisualServiceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model StartVisualServiceResponse = {
  headers: map[string]string(name='headers'),
  body: StartVisualServiceResponseBody(name='body'),
}

async function startVisualService(request: StartVisualServiceRequest): StartVisualServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartVisualService', 'GET', '/', 'json', false, 'json', request);
}

model StopClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model StopClusterResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model StopClusterResponse = {
  headers: map[string]string(name='headers'),
  body: StopClusterResponseBody(name='body'),
}

async function stopCluster(request: StopClusterRequest): StopClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopCluster', 'GET', '/', 'json', false, 'json', request);
}

model StopGWSInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model StopGWSInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopGWSInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopGWSInstanceResponseBody(name='body'),
}

async function stopGWSInstance(request: StopGWSInstanceRequest): StopGWSInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopGWSInstance', 'GET', '/', 'json', false, 'json', request);
}

model StopJobsRequest {
  async?: boolean(name='Async', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  jobs: string(name='Jobs', position='Query'),
}

model StopJobsResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopJobsResponse = {
  headers: map[string]string(name='headers'),
  body: StopJobsResponseBody(name='body'),
}

async function stopJobs(request: StopJobsRequest): StopJobsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopJobs', 'GET', '/', 'json', false, 'json', request);
}

model StopNodesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  instance: [ 
    {
      id?: string(name='Id'),
    }
  ](name='Instance', position='Query'),
  role?: string(name='Role', position='Query'),
}

model StopNodesResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model StopNodesResponse = {
  headers: map[string]string(name='headers'),
  body: StopNodesResponseBody(name='body'),
}

async function stopNodes(request: StopNodesRequest): StopNodesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopNodes', 'GET', '/', 'json', false, 'json', request);
}

model StopVisualServiceRequest {
  cidrIp: string(name='CidrIp', example='100.168.**.**', position='Query'),
  clusterId: string(name='ClusterId', example='ehpc-hz-jeJki6****', position='Query'),
  port: int32(name='Port', example='12016', maximum=65535, position='Query'),
}

model StopVisualServiceResponseBody = {
  message?: string(name='Message', example='Service stopped'),
  requestId?: string(name='RequestId', example='896D338C-E4F4-41EC-A154-D605E5DE6880'),
}

model StopVisualServiceResponse = {
  headers: map[string]string(name='headers'),
  body: StopVisualServiceResponseBody(name='body'),
}

async function stopVisualService(request: StopVisualServiceRequest): StopVisualServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopVisualService', 'GET', '/', 'json', false, 'json', request);
}

model SubmitJobRequest {
  arrayRequest?: string(name='ArrayRequest', position='Query'),
  async?: boolean(name='Async', position='Query'),
  clockTime?: string(name='ClockTime', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  commandLine: string(name='CommandLine', position='Query'),
  containerId?: string(name='ContainerId', position='Query'),
  cpu?: int32(name='Cpu', position='Query'),
  gpu?: int32(name='Gpu', position='Query'),
  inputFileUrl?: string(name='InputFileUrl', position='Query'),
  jobQueue?: string(name='JobQueue', position='Query'),
  mem?: string(name='Mem', position='Query'),
  name?: string(name='Name', position='Query'),
  node?: int32(name='Node', position='Query'),
  packagePath?: string(name='PackagePath', position='Query'),
  postCmdLine?: string(name='PostCmdLine', position='Query'),
  priority?: int32(name='Priority', position='Query'),
  reRunable?: boolean(name='ReRunable', position='Query'),
  runasUser: string(name='RunasUser', position='Query'),
  runasUserPassword?: string(name='RunasUserPassword', position='Query'),
  stderrRedirectPath?: string(name='StderrRedirectPath', position='Query'),
  stdoutRedirectPath?: string(name='StdoutRedirectPath', position='Query'),
  task?: int32(name='Task', position='Query'),
  thread?: int32(name='Thread', position='Query'),
  unzipCmd?: string(name='UnzipCmd', position='Query'),
  variables?: string(name='Variables', position='Query'),
}

model SubmitJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model SubmitJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitJobResponseBody(name='body'),
}

async function submitJob(request: SubmitJobRequest): SubmitJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitJob', 'GET', '/', 'json', false, 'json', request);
}

model SummaryImagesRequest {
  regionId: string(name='RegionId', position='Host'),
  clusterId: string(name='ClusterId', position='Query'),
  containerType: string(name='ContainerType', position='Query'),
}

model SummaryImagesResponseBody = {
  imagesName?: string(name='ImagesName'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SummaryImagesResponse = {
  headers: map[string]string(name='headers'),
  body: SummaryImagesResponseBody(name='body'),
}

async function summaryImages(request: SummaryImagesRequest): SummaryImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SummaryImages', 'GET', '/', 'json', false, 'json', request);
}

model SummaryImagesInfoRequest {
  regionId?: string(name='RegionId', position='Host'),
  clusterId?: string(name='ClusterId', position='Query'),
  containerType?: string(name='ContainerType', position='Query'),
  imageName?: string(name='ImageName', position='Query'),
}

model SummaryImagesInfoResponseBody = {
  imagesInfo?: string(name='ImagesInfo'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SummaryImagesInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SummaryImagesInfoResponseBody(name='body'),
}

async function summaryImagesInfo(request: SummaryImagesInfoRequest): SummaryImagesInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SummaryImagesInfo', 'GET', '/', 'json', false, 'json', request);
}

model SyncUsersRequest {
  clusterId: string(name='ClusterId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
}

model SyncUsersResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SyncUsersResponse = {
  headers: map[string]string(name='headers'),
  body: SyncUsersResponseBody(name='body'),
}

async function syncUsers(request: SyncUsersRequest): SyncUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SyncUsers', 'GET', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', description='地域', position='Query'),
  resourceId: [ string ](name='ResourceId', description='资源ID,最多 50个子项', position='Query'),
  resourceType: string(name='ResourceType', description='资源类型', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='标签键'),
      value?: string(name='Value', description='标签值'),
    }
  ](name='Tag', description='标签列表，最多包含20个子项', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnTagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UnTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UnTagResourcesResponseBody(name='body'),
}

async function unTagResources(request: UnTagResourcesRequest): UnTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnTagResources', 'POST', '/', 'json', false, 'json', request);
}

model UninstallSoftwareRequest {
  application: string(name='Application', example='ABYSS_2.1.5', position='Query'),
  clusterId: string(name='ClusterId', example='ehpc-hz-jeJki6****', position='Query'),
}

model UninstallSoftwareResponseBody = {
  requestId?: string(name='RequestId', example='C84FB8EF-5580-4B82-9BDE-6657814C****'),
}

model UninstallSoftwareResponse = {
  headers: map[string]string(name='headers'),
  body: UninstallSoftwareResponseBody(name='body'),
}

async function uninstallSoftware(request: UninstallSoftwareRequest): UninstallSoftwareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UninstallSoftware', 'GET', '/', 'json', false, 'json', request);
}

model UpdateClusterVolumesRequest {
  additionalVolumes?: [ 
    {
      jobQueue?: string(name='JobQueue'),
      localDirectory?: string(name='LocalDirectory'),
      location?: string(name='Location'),
      remoteDirectory?: string(name='RemoteDirectory'),
      roles?: [ 
        {
          name?: string(name='Name'),
        }
      ](name='Roles'),
      volumeId?: string(name='VolumeId'),
      volumeMountpoint?: string(name='VolumeMountpoint'),
      volumeProtocol?: string(name='VolumeProtocol'),
      volumeType?: string(name='VolumeType'),
    }
  ](name='AdditionalVolumes', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
}

model UpdateClusterVolumesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateClusterVolumesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateClusterVolumesResponseBody(name='body'),
}

async function updateClusterVolumes(request: UpdateClusterVolumesRequest): UpdateClusterVolumesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateClusterVolumes', 'GET', '/', 'json', false, 'json', request);
}

model UpdateQueueConfigRequest {
  clusterId: string(name='ClusterId', position='Query'),
  computeInstanceType?: string(name='ComputeInstanceType', position='Query'),
  queueName: string(name='QueueName', position='Query'),
  resourceGroupId: string(name='ResourceGroupId', position='Query'),
}

model UpdateQueueConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateQueueConfigResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateQueueConfigResponseBody(name='body'),
}

async function updateQueueConfig(request: UpdateQueueConfigRequest): UpdateQueueConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateQueueConfig', 'GET', '/', 'json', false, 'json', request);
}

model UpgradeClientRequest {
  clientVersion?: string(name='ClientVersion', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
}

model UpgradeClientResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeClientResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeClientResponseBody(name='body'),
}

async function upgradeClient(request: UpgradeClientRequest): UpgradeClientResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeClient', 'GET', '/', 'json', false, 'json', request);
}

