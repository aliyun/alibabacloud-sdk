/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'apigateway.cn-qingdao.aliyuncs.com',
    cn-beijing = 'apigateway.cn-beijing.aliyuncs.com',
    cn-zhangjiakou = 'apigateway.cn-zhangjiakou.aliyuncs.com',
    cn-huhehaote = 'apigateway.cn-huhehaote.aliyuncs.com',
    cn-wulanchabu = 'apigateway.cn-wulanchabu.aliyuncs.com',
    cn-hangzhou = 'apigateway.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'apigateway.cn-shanghai.aliyuncs.com',
    cn-shenzhen = 'apigateway.cn-shenzhen.aliyuncs.com',
    cn-heyuan = 'apigateway.cn-heyuan.aliyuncs.com',
    cn-guangzhou = 'apigateway.cn-guangzhou.aliyuncs.com',
    cn-chengdu = 'apigateway.cn-chengdu.aliyuncs.com',
    cn-hongkong = 'apigateway.cn-hongkong.aliyuncs.com',
    ap-northeast-1 = 'apigateway.ap-northeast-1.aliyuncs.com',
    ap-southeast-1 = 'apigateway.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'apigateway.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'apigateway.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'apigateway.ap-southeast-5.aliyuncs.com',
    ap-southeast-6 = 'apigateway.ap-southeast-6.aliyuncs.com',
    ap-southeast-7 = 'apigateway.ap-southeast-7.aliyuncs.com',
    us-east-1 = 'apigateway.us-east-1.aliyuncs.com',
    us-west-1 = 'apigateway.us-west-1.aliyuncs.com',
    eu-west-1 = 'apigateway.eu-west-1.aliyuncs.com',
    eu-central-1 = 'apigateway.eu-central-1.aliyuncs.com',
    ap-south-1 = 'apigateway.ap-south-1.aliyuncs.com',
    me-east-1 = 'apigateway.me-east-1.aliyuncs.com',
    me-central-1 = 'apigateway.me-central-1.aliyuncs.com',
    cn-hangzhou-finance = 'apigateway.cn-hangzhou-finance.aliyuncs.com',
    cn-shanghai-finance-1 = 'apigateway.cn-shanghai-finance-1.aliyuncs.com',
    cn-shenzhen-finance-1 = 'apigateway.cn-shenzhen-finance-1.aliyuncs.com',
    cn-north-2-gov-1 = 'apigateway.cn-north-2-gov-1.aliyuncs.com',
    ap-northeast-2-pop = 'apigateway.aliyuncs.com',
    cn-beijing-finance-1 = 'apigateway.cn-beijing-finance-1.aliyuncs.com',
    cn-beijing-finance-pop = 'apigateway.aliyuncs.com',
    cn-beijing-gov-1 = 'apigateway.aliyuncs.com',
    cn-beijing-nu16-b01 = 'apigateway.aliyuncs.com',
    cn-edge-1 = 'apigateway.aliyuncs.com',
    cn-fujian = 'apigateway.aliyuncs.com',
    cn-haidian-cm12-c01 = 'apigateway.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'apigateway.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'apigateway.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'apigateway.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'apigateway.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'apigateway.aliyuncs.com',
    cn-hangzhou-test-306 = 'apigateway.aliyuncs.com',
    cn-hongkong-finance-pop = 'apigateway.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'apigateway.aliyuncs.com',
    cn-qingdao-nebula = 'apigateway.aliyuncs.com',
    cn-shanghai-et15-b01 = 'apigateway.aliyuncs.com',
    cn-shanghai-et2-b01 = 'apigateway.aliyuncs.com',
    cn-shanghai-inner = 'apigateway.cn-shanghai-inner.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'apigateway.aliyuncs.com',
    cn-shenzhen-inner = 'apigateway.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'apigateway.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'apigateway.aliyuncs.com',
    cn-wuhan = 'apigateway.aliyuncs.com',
    cn-yushanfang = 'apigateway.aliyuncs.com',
    cn-zhangbei = 'apigateway.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'apigateway.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'apigateway.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'apigateway.aliyuncs.com',
    eu-west-1-oxs = 'apigateway.aliyuncs.com',
    rus-west-1-pop = 'apigateway.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cloudapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AbolishApiRequest {
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName'),
}

model AbolishApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model AbolishApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AbolishApiResponseBody(name='body'),
}

async function abolishApiWithOptions(request: AbolishApiRequest, runtime: Util.RuntimeOptions): AbolishApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AbolishApi',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function abolishApi(request: AbolishApiRequest): AbolishApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return abolishApiWithOptions(request, runtime);
}

model AbolishApiForInnerRequest {
  aliUid?: long(name='AliUid'),
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName'),
}

model AbolishApiForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model AbolishApiForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AbolishApiForInnerResponseBody(name='body'),
}

async function abolishApiForInnerWithOptions(request: AbolishApiForInnerRequest, runtime: Util.RuntimeOptions): AbolishApiForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AbolishApiForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function abolishApiForInner(request: AbolishApiForInnerRequest): AbolishApiForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return abolishApiForInnerWithOptions(request, runtime);
}

model AddBlackListRequest {
  blackContent?: string(name='BlackContent'),
  blackType?: string(name='BlackType'),
  description?: string(name='Description'),
}

model AddBlackListResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddBlackListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddBlackListResponseBody(name='body'),
}

async function addBlackListWithOptions(request: AddBlackListRequest, runtime: Util.RuntimeOptions): AddBlackListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blackContent)) {
    query['BlackContent'] = request.blackContent;
  }
  if (!Util.isUnset(request.blackType)) {
    query['BlackType'] = request.blackType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddBlackList',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addBlackList(request: AddBlackListRequest): AddBlackListResponse {
  var runtime = new Util.RuntimeOptions{};
  return addBlackListWithOptions(request, runtime);
}

model AddTrafficSpecialControlRequest {
  specialKey?: string(name='SpecialKey'),
  specialType?: string(name='SpecialType'),
  trafficControlId?: string(name='TrafficControlId'),
  trafficValue?: int32(name='TrafficValue'),
}

model AddTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddTrafficSpecialControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddTrafficSpecialControlResponseBody(name='body'),
}

async function addTrafficSpecialControlWithOptions(request: AddTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): AddTrafficSpecialControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.specialKey)) {
    query['SpecialKey'] = request.specialKey;
  }
  if (!Util.isUnset(request.specialType)) {
    query['SpecialType'] = request.specialType;
  }
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  if (!Util.isUnset(request.trafficValue)) {
    query['TrafficValue'] = request.trafficValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddTrafficSpecialControl',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addTrafficSpecialControl(request: AddTrafficSpecialControlRequest): AddTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTrafficSpecialControlWithOptions(request, runtime);
}

model CheckAccountForInnerRequest {
  aliUid?: long(name='AliUid'),
}

model CheckAccountForInnerResponseBody = {
  checkResult?: boolean(name='CheckResult'),
  requestId?: string(name='RequestId'),
}

model CheckAccountForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckAccountForInnerResponseBody(name='body'),
}

async function checkAccountForInnerWithOptions(request: CheckAccountForInnerRequest, runtime: Util.RuntimeOptions): CheckAccountForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckAccountForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkAccountForInner(request: CheckAccountForInnerRequest): CheckAccountForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkAccountForInnerWithOptions(request, runtime);
}

model CheckAoneAppAuditRequest {
  aoneAppName?: string(name='AoneAppName'),
  securityToken?: string(name='SecurityToken'),
}

model CheckAoneAppAuditResponseBody = {
  checkResult?: boolean(name='CheckResult'),
  requestId?: string(name='RequestId'),
}

model CheckAoneAppAuditResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckAoneAppAuditResponseBody(name='body'),
}

async function checkAoneAppAuditWithOptions(request: CheckAoneAppAuditRequest, runtime: Util.RuntimeOptions): CheckAoneAppAuditResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aoneAppName)) {
    query['AoneAppName'] = request.aoneAppName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckAoneAppAudit',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkAoneAppAudit(request: CheckAoneAppAuditRequest): CheckAoneAppAuditResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkAoneAppAuditWithOptions(request, runtime);
}

model CopyConsumerOpenForInnerRequest {
  copyList?: string(name='CopyList'),
}

model CopyConsumerOpenForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model CopyConsumerOpenForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopyConsumerOpenForInnerResponseBody(name='body'),
}

async function copyConsumerOpenForInnerWithOptions(request: CopyConsumerOpenForInnerRequest, runtime: Util.RuntimeOptions): CopyConsumerOpenForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.copyList)) {
    query['CopyList'] = request.copyList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CopyConsumerOpenForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function copyConsumerOpenForInner(request: CopyConsumerOpenForInnerRequest): CopyConsumerOpenForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return copyConsumerOpenForInnerWithOptions(request, runtime);
}

model CreateApiRequest {
  apiName?: string(name='ApiName'),
  authType?: string(name='AuthType'),
  bodyFormat?: string(name='BodyFormat'),
  constantParameters?: string(name='ConstantParameters'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  httpMethod?: string(name='HttpMethod'),
  httpProtocol?: string(name='HttpProtocol'),
  path?: string(name='Path'),
  pathParameters?: string(name='PathParameters'),
  postBodyDescription?: string(name='PostBodyDescription'),
  postBodyType?: string(name='PostBodyType'),
  requestBody?: string(name='RequestBody'),
  requestHeaders?: string(name='RequestHeaders'),
  requestQueries?: string(name='RequestQueries'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  serviceAddress?: string(name='ServiceAddress'),
  serviceProtocol?: string(name='ServiceProtocol'),
  serviceTimeout?: int32(name='ServiceTimeout'),
  systemParameters?: string(name='SystemParameters'),
  visibility?: string(name='Visibility'),
}

model CreateApiResponseBody = {
  apiId?: string(name='ApiId'),
  requestId?: string(name='RequestId'),
}

model CreateApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApiResponseBody(name='body'),
}

async function createApiWithOptions(request: CreateApiRequest, runtime: Util.RuntimeOptions): CreateApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.bodyFormat)) {
    query['BodyFormat'] = request.bodyFormat;
  }
  if (!Util.isUnset(request.constantParameters)) {
    query['ConstantParameters'] = request.constantParameters;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.httpMethod)) {
    query['HttpMethod'] = request.httpMethod;
  }
  if (!Util.isUnset(request.httpProtocol)) {
    query['HttpProtocol'] = request.httpProtocol;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.pathParameters)) {
    query['PathParameters'] = request.pathParameters;
  }
  if (!Util.isUnset(request.postBodyDescription)) {
    query['PostBodyDescription'] = request.postBodyDescription;
  }
  if (!Util.isUnset(request.postBodyType)) {
    query['PostBodyType'] = request.postBodyType;
  }
  if (!Util.isUnset(request.requestBody)) {
    query['RequestBody'] = request.requestBody;
  }
  if (!Util.isUnset(request.requestHeaders)) {
    query['RequestHeaders'] = request.requestHeaders;
  }
  if (!Util.isUnset(request.requestQueries)) {
    query['RequestQueries'] = request.requestQueries;
  }
  if (!Util.isUnset(request.resultSample)) {
    query['ResultSample'] = request.resultSample;
  }
  if (!Util.isUnset(request.resultType)) {
    query['ResultType'] = request.resultType;
  }
  if (!Util.isUnset(request.serviceAddress)) {
    query['ServiceAddress'] = request.serviceAddress;
  }
  if (!Util.isUnset(request.serviceProtocol)) {
    query['ServiceProtocol'] = request.serviceProtocol;
  }
  if (!Util.isUnset(request.serviceTimeout)) {
    query['ServiceTimeout'] = request.serviceTimeout;
  }
  if (!Util.isUnset(request.systemParameters)) {
    query['SystemParameters'] = request.systemParameters;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApi',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApi(request: CreateApiRequest): CreateApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiWithOptions(request, runtime);
}

model CreateApiForInnerRequest {
  aliUid?: long(name='AliUid'),
  apiName?: string(name='ApiName'),
  authType?: string(name='AuthType'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  requestConfig?: string(name='RequestConfig'),
  requestParamters?: string(name='RequestParamters'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  serviceConfig?: string(name='ServiceConfig'),
  serviceParameters?: string(name='ServiceParameters'),
  serviceParametersMap?: string(name='ServiceParametersMap'),
  visibility?: string(name='Visibility'),
}

model CreateApiForInnerResponseBody = {
  apiId?: string(name='ApiId'),
  requestId?: string(name='RequestId'),
}

model CreateApiForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApiForInnerResponseBody(name='body'),
}

async function createApiForInnerWithOptions(request: CreateApiForInnerRequest, runtime: Util.RuntimeOptions): CreateApiForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.requestConfig)) {
    query['RequestConfig'] = request.requestConfig;
  }
  if (!Util.isUnset(request.requestParamters)) {
    query['RequestParamters'] = request.requestParamters;
  }
  if (!Util.isUnset(request.resultSample)) {
    query['ResultSample'] = request.resultSample;
  }
  if (!Util.isUnset(request.resultType)) {
    query['ResultType'] = request.resultType;
  }
  if (!Util.isUnset(request.serviceConfig)) {
    query['ServiceConfig'] = request.serviceConfig;
  }
  if (!Util.isUnset(request.serviceParameters)) {
    query['ServiceParameters'] = request.serviceParameters;
  }
  if (!Util.isUnset(request.serviceParametersMap)) {
    query['ServiceParametersMap'] = request.serviceParametersMap;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApiForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApiForInner(request: CreateApiForInnerRequest): CreateApiForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiForInnerWithOptions(request, runtime);
}

model CreateApiGroupRequest {
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  securityToken?: string(name='SecurityToken'),
}

model CreateApiGroupResponseBody = {
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model CreateApiGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApiGroupResponseBody(name='body'),
}

async function createApiGroupWithOptions(request: CreateApiGroupRequest, runtime: Util.RuntimeOptions): CreateApiGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApiGroup',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApiGroup(request: CreateApiGroupRequest): CreateApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiGroupWithOptions(request, runtime);
}

model CreateApiGroupForInnerRequest {
  aliUid?: long(name='AliUid'),
  description?: string(name='Description'),
  groupName?: string(name='GroupName'),
  source?: string(name='Source'),
}

model CreateApiGroupForInnerResponseBody = {
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model CreateApiGroupForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApiGroupForInnerResponseBody(name='body'),
}

async function createApiGroupForInnerWithOptions(request: CreateApiGroupForInnerRequest, runtime: Util.RuntimeOptions): CreateApiGroupForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApiGroupForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApiGroupForInner(request: CreateApiGroupForInnerRequest): CreateApiGroupForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApiGroupForInnerWithOptions(request, runtime);
}

model CreateAppRequest {
  appName?: string(name='AppName'),
  description?: string(name='Description'),
}

model CreateAppResponseBody = {
  appId?: long(name='AppId'),
  requestId?: string(name='RequestId'),
}

model CreateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppResponseBody(name='body'),
}

async function createAppWithOptions(request: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateApp',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model CreateAppForBackendRequest {
  aliUid?: long(name='AliUid'),
  appName?: string(name='AppName'),
  description?: string(name='Description'),
  source?: string(name='Source'),
}

model CreateAppForBackendResponseBody = {
  appId?: long(name='AppId'),
  requestId?: string(name='RequestId'),
}

model CreateAppForBackendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppForBackendResponseBody(name='body'),
}

async function createAppForBackendWithOptions(request: CreateAppForBackendRequest, runtime: Util.RuntimeOptions): CreateAppForBackendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAppForBackend',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAppForBackend(request: CreateAppForBackendRequest): CreateAppForBackendResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppForBackendWithOptions(request, runtime);
}

model CreateAppForInnerRequest {
  aliUid?: long(name='AliUid'),
  appCode?: string(name='AppCode'),
  appKey?: string(name='AppKey'),
  appName?: string(name='AppName'),
  appSecret?: string(name='AppSecret'),
  description?: string(name='Description'),
  extend?: string(name='Extend'),
  source?: string(name='Source'),
}

model CreateAppForInnerResponseBody = {
  appId?: long(name='AppId'),
  requestId?: string(name='RequestId'),
}

model CreateAppForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppForInnerResponseBody(name='body'),
}

async function createAppForInnerWithOptions(request: CreateAppForInnerRequest, runtime: Util.RuntimeOptions): CreateAppForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.appCode)) {
    query['AppCode'] = request.appCode;
  }
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appSecret)) {
    query['AppSecret'] = request.appSecret;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAppForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAppForInner(request: CreateAppForInnerRequest): CreateAppForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppForInnerWithOptions(request, runtime);
}

model CreateInstanceRequest {
  accountQuantity?: long(name='AccountQuantity'),
  alarmQuota?: long(name='AlarmQuota'),
  aliUid?: long(name='AliUid'),
  appId?: long(name='AppId'),
  billingType?: string(name='BillingType'),
  cloudMarketInstanceId?: string(name='CloudMarketInstanceId'),
  expiredOn?: string(name='ExpiredOn'),
  instanceAttributes?: string(name='InstanceAttributes'),
  skuId?: string(name='SkuId'),
  token?: string(name='Token'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountQuantity)) {
    query['AccountQuantity'] = request.accountQuantity;
  }
  if (!Util.isUnset(request.alarmQuota)) {
    query['AlarmQuota'] = request.alarmQuota;
  }
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.billingType)) {
    query['BillingType'] = request.billingType;
  }
  if (!Util.isUnset(request.cloudMarketInstanceId)) {
    query['CloudMarketInstanceId'] = request.cloudMarketInstanceId;
  }
  if (!Util.isUnset(request.expiredOn)) {
    query['ExpiredOn'] = request.expiredOn;
  }
  if (!Util.isUnset(request.instanceAttributes)) {
    query['InstanceAttributes'] = request.instanceAttributes;
  }
  if (!Util.isUnset(request.skuId)) {
    query['SkuId'] = request.skuId;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateRaceWorkForInnerRequest {
  commodityCode?: string(name='CommodityCode'),
  groupId?: string(name='GroupId'),
  keywords?: string(name='Keywords'),
  logoUrl?: string(name='LogoUrl'),
  shortDescription?: string(name='ShortDescription'),
  workName?: string(name='WorkName'),
}

model CreateRaceWorkForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateRaceWorkForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRaceWorkForInnerResponseBody(name='body'),
}

async function createRaceWorkForInnerWithOptions(request: CreateRaceWorkForInnerRequest, runtime: Util.RuntimeOptions): CreateRaceWorkForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.keywords)) {
    query['Keywords'] = request.keywords;
  }
  if (!Util.isUnset(request.logoUrl)) {
    query['LogoUrl'] = request.logoUrl;
  }
  if (!Util.isUnset(request.shortDescription)) {
    query['ShortDescription'] = request.shortDescription;
  }
  if (!Util.isUnset(request.workName)) {
    query['WorkName'] = request.workName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateRaceWorkForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createRaceWorkForInner(request: CreateRaceWorkForInnerRequest): CreateRaceWorkForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRaceWorkForInnerWithOptions(request, runtime);
}

model CreateSecretKeyRequest {
  secretKey?: string(name='SecretKey'),
  secretKeyName?: string(name='SecretKeyName'),
  secretValue?: string(name='SecretValue'),
}

model CreateSecretKeyResponseBody = {
  requestId?: string(name='RequestId'),
  secretKeyId?: string(name='SecretKeyId'),
  secretKeyName?: string(name='SecretKeyName'),
}

model CreateSecretKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSecretKeyResponseBody(name='body'),
}

async function createSecretKeyWithOptions(request: CreateSecretKeyRequest, runtime: Util.RuntimeOptions): CreateSecretKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.secretKey)) {
    query['SecretKey'] = request.secretKey;
  }
  if (!Util.isUnset(request.secretKeyName)) {
    query['SecretKeyName'] = request.secretKeyName;
  }
  if (!Util.isUnset(request.secretValue)) {
    query['SecretValue'] = request.secretValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSecretKey',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSecretKey(request: CreateSecretKeyRequest): CreateSecretKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSecretKeyWithOptions(request, runtime);
}

model CreateTrafficControlRequest {
  apiDefault?: int32(name='ApiDefault'),
  appDefault?: int32(name='AppDefault'),
  description?: string(name='Description'),
  trafficControlName?: string(name='TrafficControlName'),
  trafficControlUnit?: string(name='TrafficControlUnit'),
  userDefault?: int32(name='UserDefault'),
}

model CreateTrafficControlResponseBody = {
  requestId?: string(name='RequestId'),
  trafficControlId?: string(name='TrafficControlId'),
}

model CreateTrafficControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTrafficControlResponseBody(name='body'),
}

async function createTrafficControlWithOptions(request: CreateTrafficControlRequest, runtime: Util.RuntimeOptions): CreateTrafficControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiDefault)) {
    query['ApiDefault'] = request.apiDefault;
  }
  if (!Util.isUnset(request.appDefault)) {
    query['AppDefault'] = request.appDefault;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.trafficControlName)) {
    query['TrafficControlName'] = request.trafficControlName;
  }
  if (!Util.isUnset(request.trafficControlUnit)) {
    query['TrafficControlUnit'] = request.trafficControlUnit;
  }
  if (!Util.isUnset(request.userDefault)) {
    query['UserDefault'] = request.userDefault;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTrafficControl',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTrafficControl(request: CreateTrafficControlRequest): CreateTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTrafficControlWithOptions(request, runtime);
}

model CreateUserWhiteListRequest {
  aoneId?: string(name='AoneId'),
  description?: string(name='Description'),
  entityId?: string(name='EntityId'),
  limitCount?: int32(name='LimitCount'),
  type?: string(name='Type'),
  uid?: long(name='Uid'),
  value?: string(name='Value'),
}

model CreateUserWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateUserWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserWhiteListResponseBody(name='body'),
}

async function createUserWhiteListWithOptions(request: CreateUserWhiteListRequest, runtime: Util.RuntimeOptions): CreateUserWhiteListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aoneId)) {
    query['AoneId'] = request.aoneId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.limitCount)) {
    query['LimitCount'] = request.limitCount;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateUserWhiteList',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUserWhiteList(request: CreateUserWhiteListRequest): CreateUserWhiteListResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserWhiteListWithOptions(request, runtime);
}

model DeleteAllTrafficSpecialControlRequest {
  trafficControlId?: string(name='TrafficControlId'),
}

model DeleteAllTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAllTrafficSpecialControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAllTrafficSpecialControlResponseBody(name='body'),
}

async function deleteAllTrafficSpecialControlWithOptions(request: DeleteAllTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): DeleteAllTrafficSpecialControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAllTrafficSpecialControl',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAllTrafficSpecialControl(request: DeleteAllTrafficSpecialControlRequest): DeleteAllTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAllTrafficSpecialControlWithOptions(request, runtime);
}

model DeleteApiRequest {
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
}

model DeleteApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApiResponseBody(name='body'),
}

async function deleteApiWithOptions(request: DeleteApiRequest, runtime: Util.RuntimeOptions): DeleteApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApi',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApi(request: DeleteApiRequest): DeleteApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiWithOptions(request, runtime);
}

model DeleteApiForInnerRequest {
  aliUid?: long(name='AliUid'),
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
}

model DeleteApiForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApiForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApiForInnerResponseBody(name='body'),
}

async function deleteApiForInnerWithOptions(request: DeleteApiForInnerRequest, runtime: Util.RuntimeOptions): DeleteApiForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApiForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApiForInner(request: DeleteApiForInnerRequest): DeleteApiForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiForInnerWithOptions(request, runtime);
}

model DeleteApiGroupRequest {
  groupId?: string(name='GroupId'),
}

model DeleteApiGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApiGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApiGroupResponseBody(name='body'),
}

async function deleteApiGroupWithOptions(request: DeleteApiGroupRequest, runtime: Util.RuntimeOptions): DeleteApiGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApiGroup',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApiGroup(request: DeleteApiGroupRequest): DeleteApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApiGroupWithOptions(request, runtime);
}

model DeleteAppRequest {
  appId?: long(name='AppId'),
}

model DeleteAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppResponseBody(name='body'),
}

async function deleteAppWithOptions(request: DeleteAppRequest, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteApp',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppWithOptions(request, runtime);
}

model DeleteAppForInnerRequest {
  aliUid?: long(name='AliUid'),
  appId?: long(name='AppId'),
}

model DeleteAppForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAppForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppForInnerResponseBody(name='body'),
}

async function deleteAppForInnerWithOptions(request: DeleteAppForInnerRequest, runtime: Util.RuntimeOptions): DeleteAppForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteAppForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteAppForInner(request: DeleteAppForInnerRequest): DeleteAppForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppForInnerWithOptions(request, runtime);
}

model DeleteDomainRequest {
  domainName?: string(name='DomainName'),
  groupId?: string(name='GroupId'),
}

model DeleteDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDomainResponseBody(name='body'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDomain',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model DeleteDomainCertificateRequest {
  certificateId?: string(name='CertificateId'),
  domainName?: string(name='DomainName'),
  groupId?: string(name='GroupId'),
}

model DeleteDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDomainCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDomainCertificateResponseBody(name='body'),
}

async function deleteDomainCertificateWithOptions(request: DeleteDomainCertificateRequest, runtime: Util.RuntimeOptions): DeleteDomainCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificateId)) {
    query['CertificateId'] = request.certificateId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDomainCertificate',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDomainCertificate(request: DeleteDomainCertificateRequest): DeleteDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainCertificateWithOptions(request, runtime);
}

model DeleteSecretKeyRequest {
  secretKeyId?: string(name='SecretKeyId'),
}

model DeleteSecretKeyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSecretKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSecretKeyResponseBody(name='body'),
}

async function deleteSecretKeyWithOptions(request: DeleteSecretKeyRequest, runtime: Util.RuntimeOptions): DeleteSecretKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.secretKeyId)) {
    query['SecretKeyId'] = request.secretKeyId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteSecretKey',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteSecretKey(request: DeleteSecretKeyRequest): DeleteSecretKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecretKeyWithOptions(request, runtime);
}

model DeleteTrafficControlRequest {
  trafficControlId?: string(name='TrafficControlId'),
}

model DeleteTrafficControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrafficControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTrafficControlResponseBody(name='body'),
}

async function deleteTrafficControlWithOptions(request: DeleteTrafficControlRequest, runtime: Util.RuntimeOptions): DeleteTrafficControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTrafficControl',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTrafficControl(request: DeleteTrafficControlRequest): DeleteTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrafficControlWithOptions(request, runtime);
}

model DeleteTrafficSpecialControlRequest {
  specialKey?: string(name='SpecialKey'),
  specialType?: string(name='SpecialType'),
  trafficControlId?: string(name='TrafficControlId'),
}

model DeleteTrafficSpecialControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrafficSpecialControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTrafficSpecialControlResponseBody(name='body'),
}

async function deleteTrafficSpecialControlWithOptions(request: DeleteTrafficSpecialControlRequest, runtime: Util.RuntimeOptions): DeleteTrafficSpecialControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.specialKey)) {
    query['SpecialKey'] = request.specialKey;
  }
  if (!Util.isUnset(request.specialType)) {
    query['SpecialType'] = request.specialType;
  }
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTrafficSpecialControl',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTrafficSpecialControl(request: DeleteTrafficSpecialControlRequest): DeleteTrafficSpecialControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrafficSpecialControlWithOptions(request, runtime);
}

model DeleteUserWhiteListByTypeRequest {
  entityId?: string(name='EntityId'),
  type?: string(name='Type'),
  uid?: long(name='Uid'),
}

model DeleteUserWhiteListByTypeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUserWhiteListByTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserWhiteListByTypeResponseBody(name='body'),
}

async function deleteUserWhiteListByTypeWithOptions(request: DeleteUserWhiteListByTypeRequest, runtime: Util.RuntimeOptions): DeleteUserWhiteListByTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserWhiteListByType',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUserWhiteListByType(request: DeleteUserWhiteListByTypeRequest): DeleteUserWhiteListByTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserWhiteListByTypeWithOptions(request, runtime);
}

model DeployApiRequest {
  apiId?: string(name='ApiId'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
}

model DeployApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeployApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployApiResponseBody(name='body'),
}

async function deployApiWithOptions(request: DeployApiRequest, runtime: Util.RuntimeOptions): DeployApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeployApi',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployApi(request: DeployApiRequest): DeployApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployApiWithOptions(request, runtime);
}

model DeployApiForInnerRequest {
  aliUid?: long(name='AliUid'),
  apiId?: string(name='ApiId'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
}

model DeployApiForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeployApiForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployApiForInnerResponseBody(name='body'),
}

async function deployApiForInnerWithOptions(request: DeployApiForInnerRequest, runtime: Util.RuntimeOptions): DeployApiForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeployApiForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deployApiForInner(request: DeployApiForInnerRequest): DeployApiForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return deployApiForInnerWithOptions(request, runtime);
}

model DescribeApiRequest {
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
}

model DescribeApiResponseBody = {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  authType?: string(name='AuthType'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters'),
  createdTime?: string(name='CreatedTime'),
  customSystemParameters?: {
    customSystemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='CustomSystemParameter')
  }(name='CustomSystemParameters'),
  deployedInfos?: {
    deployedInfo?: [ 
    {
      deployedStatus?: string(name='DeployedStatus'),
      effectiveVersion?: string(name='EffectiveVersion'),
      stageName?: string(name='StageName'),
    }
  ](name='DeployedInfo')
  }(name='DeployedInfos'),
  description?: string(name='Description'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      message?: string(name='Message'),
      model?: string(name='Model'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  failResultSample?: string(name='FailResultSample'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  mock?: string(name='Mock'),
  mockResult?: string(name='MockResult'),
  modifiedTime?: string(name='ModifiedTime'),
  openIdConnectConfig?: {
    idTokenParamName?: string(name='IdTokenParamName'),
    openIdApiType?: string(name='OpenIdApiType'),
    publicKey?: string(name='PublicKey'),
    publicKeyId?: string(name='PublicKeyId'),
  }(name='OpenIdConnectConfig'),
  originResultDescription?: string(name='OriginResultDescription'),
  parametersMapObject?: {
    serviceParameterMap?: [ 
    {
      requestParameterName?: string(name='RequestParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ServiceParameterMap')
  }(name='ParametersMapObject'),
  regionId?: string(name='RegionId'),
  requestConfig?: {
    bodyFormat?: string(name='BodyFormat'),
    postBodyDescription?: string(name='PostBodyDescription'),
    requestHttpMethod?: string(name='RequestHttpMethod'),
    requestPath?: string(name='RequestPath'),
    requestProtocol?: string(name='RequestProtocol'),
  }(name='RequestConfig'),
  requestId?: string(name='RequestId'),
  requestParametersObject?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      location?: string(name='Location'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestParametersObject'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  serviceConfig?: {
    contentTypeCatagory?: string(name='ContentTypeCatagory'),
    contentTypeValue?: string(name='ContentTypeValue'),
    functionComputeConfig?: {
      fcRegionId?: string(name='FcRegionId'),
      functionName?: string(name='FunctionName'),
      roleArn?: string(name='RoleArn'),
      serviceName?: string(name='ServiceName'),
    }(name='FunctionComputeConfig'),
    mock?: string(name='Mock'),
    mockResult?: string(name='MockResult'),
    serviceAddress?: string(name='ServiceAddress'),
    serviceHttpMethod?: string(name='ServiceHttpMethod'),
    servicePath?: string(name='ServicePath'),
    serviceProtocol?: string(name='ServiceProtocol'),
    serviceTimeout?: string(name='ServiceTimeout'),
    serviceVpcEnable?: string(name='ServiceVpcEnable'),
    vpcConfig?: {
      id?: string(name='Id'),
      instanceId?: string(name='InstanceId'),
      name?: string(name='Name'),
      port?: int32(name='Port'),
      vpcId?: string(name='VpcId'),
    }(name='VpcConfig'),
  }(name='ServiceConfig'),
  serviceParametersObject?: {
    serviceParam?: [ 
    {
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
      type?: string(name='Type'),
    }
  ](name='ServiceParam')
  }(name='ServiceParametersObject'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
  visibility?: string(name='Visibility'),
}

model DescribeApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiResponseBody(name='body'),
}

async function describeApiWithOptions(request: DescribeApiRequest, runtime: Util.RuntimeOptions): DescribeApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApi',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApi(request: DescribeApiRequest): DescribeApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiWithOptions(request, runtime);
}

model DescribeApiDocRequest {
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName'),
}

model DescribeApiDocResponseBody = {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  bodyFormat?: string(name='BodyFormat'),
  deployedTime?: string(name='DeployedTime'),
  description?: string(name='Description'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      message?: string(name='Message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  failResultSample?: string(name='FailResultSample'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  httpMethod?: string(name='HttpMethod'),
  httpProtocol?: string(name='HttpProtocol'),
  path?: string(name='Path'),
  pathParameters?: {
    pathParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
    }
  ](name='PathParameter')
  }(name='PathParameters'),
  postBodyDescription?: string(name='PostBodyDescription'),
  postBodyType?: string(name='PostBodyType'),
  regionId?: string(name='RegionId'),
  requestBody?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestBody'),
  requestHeaders?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestHeaders'),
  requestId?: string(name='RequestId'),
  requestQueries?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestQueries'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      description?: string(name='Description'),
      hasChild?: boolean(name='HasChild'),
      id?: string(name='Id'),
      key?: string(name='Key'),
      mandatory?: boolean(name='Mandatory'),
      name?: string(name='Name'),
      pid?: string(name='Pid'),
      type?: string(name='Type'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  sdkDemos?: {
    sdkDemo?: [ 
    {
      callDemo?: string(name='CallDemo'),
      ideKey?: string(name='IdeKey'),
    }
  ](name='SdkDemo')
  }(name='SdkDemos'),
  serviceTimeout?: int32(name='ServiceTimeout'),
  stageName?: string(name='StageName'),
}

model DescribeApiDocResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiDocResponseBody(name='body'),
}

async function describeApiDocWithOptions(request: DescribeApiDocRequest, runtime: Util.RuntimeOptions): DescribeApiDocResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiDoc',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiDoc(request: DescribeApiDocRequest): DescribeApiDocResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiDocWithOptions(request, runtime);
}

model DescribeApiDocsRequest {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  groupId?: string(name='GroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  stageName?: string(name='StageName'),
}

model DescribeApiDocsResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      deployedTime?: string(name='DeployedTime'),
      description?: string(name='Description'),
      groupDescription?: string(name='GroupDescription'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiDocsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiDocsResponseBody(name='body'),
}

async function describeApiDocsWithOptions(request: DescribeApiDocsRequest, runtime: Util.RuntimeOptions): DescribeApiDocsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiDocs',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiDocs(request: DescribeApiDocsRequest): DescribeApiDocsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiDocsWithOptions(request, runtime);
}

model DescribeApiDocsForBackendRequest {
  aliUid?: long(name='AliUid'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  groupId?: string(name='GroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  stageName?: string(name='StageName'),
}

model DescribeApiDocsForBackendResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      deployedTime?: string(name='DeployedTime'),
      description?: string(name='Description'),
      groupDescription?: string(name='GroupDescription'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiDocsForBackendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiDocsForBackendResponseBody(name='body'),
}

async function describeApiDocsForBackendWithOptions(request: DescribeApiDocsForBackendRequest, runtime: Util.RuntimeOptions): DescribeApiDocsForBackendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiDocsForBackend',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiDocsForBackend(request: DescribeApiDocsForBackendRequest): DescribeApiDocsForBackendResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiDocsForBackendWithOptions(request, runtime);
}

model DescribeApiErrorRequest {
  apiId?: string(name='ApiId'),
  endTime?: string(name='EndTime'),
  groupId?: string(name='GroupId'),
  startTime?: string(name='StartTime'),
}

model DescribeApiErrorResponseBody = {
  clientErrors?: {
    clientError?: [ 
    {
      time?: string(name='Time'),
      value?: string(name='Value'),
    }
  ](name='ClientError')
  }(name='ClientErrors'),
  requestId?: string(name='RequestId'),
  serverErrors?: {
    serverError?: [ 
    {
      time?: string(name='Time'),
      value?: string(name='Value'),
    }
  ](name='ServerError')
  }(name='ServerErrors'),
}

model DescribeApiErrorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiErrorResponseBody(name='body'),
}

async function describeApiErrorWithOptions(request: DescribeApiErrorRequest, runtime: Util.RuntimeOptions): DescribeApiErrorResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiError',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiError(request: DescribeApiErrorRequest): DescribeApiErrorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiErrorWithOptions(request, runtime);
}

model DescribeApiGroupDetailRequest {
  groupId?: string(name='GroupId'),
}

model DescribeApiGroupDetailResponseBody = {
  billingStatus?: string(name='BillingStatus'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  domainItems?: {
    domainItem?: [ 
    {
      certificateId?: string(name='CertificateId'),
      certificateName?: string(name='CertificateName'),
      domainName?: string(name='DomainName'),
      domainNameResolution?: string(name='DomainNameResolution'),
      domainStatus?: string(name='DomainStatus'),
    }
  ](name='DomainItem')
  }(name='DomainItems'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  illegalStatus?: string(name='IllegalStatus'),
  modifiedTime?: string(name='ModifiedTime'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  subDomain?: string(name='SubDomain'),
  trafficLimit?: int32(name='TrafficLimit'),
}

model DescribeApiGroupDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiGroupDetailResponseBody(name='body'),
}

async function describeApiGroupDetailWithOptions(request: DescribeApiGroupDetailRequest, runtime: Util.RuntimeOptions): DescribeApiGroupDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiGroupDetail',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiGroupDetail(request: DescribeApiGroupDetailRequest): DescribeApiGroupDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGroupDetailWithOptions(request, runtime);
}

model DescribeApiGroupsRequest {
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeApiGroupsResponseBody = {
  apiGroupAttributes?: {
    apiGroupAttribute?: [ 
    {
      billingStatus?: string(name='BillingStatus'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      illegalStatus?: string(name='IllegalStatus'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      subDomain?: string(name='SubDomain'),
      trafficLimit?: int32(name='TrafficLimit'),
    }
  ](name='ApiGroupAttribute')
  }(name='ApiGroupAttributes'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiGroupsResponseBody(name='body'),
}

async function describeApiGroupsWithOptions(request: DescribeApiGroupsRequest, runtime: Util.RuntimeOptions): DescribeApiGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiGroups',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiGroups(request: DescribeApiGroupsRequest): DescribeApiGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiGroupsWithOptions(request, runtime);
}

model DescribeApiLatencyRequest {
  apiId?: string(name='ApiId'),
  endTime?: string(name='EndTime'),
  groupId?: string(name='GroupId'),
  startTime?: string(name='StartTime'),
}

model DescribeApiLatencyResponseBody = {
  latencys?: {
    latency?: [ 
    {
      time?: string(name='Time'),
      value?: string(name='Value'),
    }
  ](name='Latency')
  }(name='Latencys'),
  requestId?: string(name='RequestId'),
}

model DescribeApiLatencyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiLatencyResponseBody(name='body'),
}

async function describeApiLatencyWithOptions(request: DescribeApiLatencyRequest, runtime: Util.RuntimeOptions): DescribeApiLatencyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiLatency',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiLatency(request: DescribeApiLatencyRequest): DescribeApiLatencyResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiLatencyWithOptions(request, runtime);
}

model DescribeApiMarketInstanceRequest {
  aliUid?: string(name='AliUid'),
  groupId?: string(name='GroupId'),
}

model DescribeApiMarketInstanceResponseBody = {
  instanceAttributes?: string(name='InstanceAttributes'),
  requestId?: string(name='RequestId'),
}

model DescribeApiMarketInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiMarketInstanceResponseBody(name='body'),
}

async function describeApiMarketInstanceWithOptions(request: DescribeApiMarketInstanceRequest, runtime: Util.RuntimeOptions): DescribeApiMarketInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiMarketInstance',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiMarketInstance(request: DescribeApiMarketInstanceRequest): DescribeApiMarketInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiMarketInstanceWithOptions(request, runtime);
}

model DescribeApiQpsRequest {
  apiId?: string(name='ApiId'),
  endTime?: string(name='EndTime'),
  groupId?: string(name='GroupId'),
  startTime?: string(name='StartTime'),
}

model DescribeApiQpsResponseBody = {
  fails?: {
    fail?: [ 
    {
      time?: string(name='Time'),
      value?: string(name='Value'),
    }
  ](name='Fail')
  }(name='Fails'),
  requestId?: string(name='RequestId'),
  successes?: {
    success?: [ 
    {
      time?: string(name='Time'),
      value?: string(name='Value'),
    }
  ](name='Success')
  }(name='Successes'),
}

model DescribeApiQpsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiQpsResponseBody(name='body'),
}

async function describeApiQpsWithOptions(request: DescribeApiQpsRequest, runtime: Util.RuntimeOptions): DescribeApiQpsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiQps',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiQps(request: DescribeApiQpsRequest): DescribeApiQpsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiQpsWithOptions(request, runtime);
}

model DescribeApiRulesRequest {
  apiIds?: string(name='ApiIds'),
  groupId?: string(name='GroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ruleType?: string(name='RuleType'),
  stageName?: string(name='StageName'),
}

model DescribeApiRulesResponseBody = {
  apiRules?: {
    apiRule?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      createdTime?: string(name='CreatedTime'),
      ruleId?: string(name='RuleId'),
      ruleName?: string(name='RuleName'),
      ruleType?: string(name='RuleType'),
    }
  ](name='ApiRule')
  }(name='ApiRules'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiRulesResponseBody(name='body'),
}

async function describeApiRulesWithOptions(request: DescribeApiRulesRequest, runtime: Util.RuntimeOptions): DescribeApiRulesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiRules',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiRules(request: DescribeApiRulesRequest): DescribeApiRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiRulesWithOptions(request, runtime);
}

model DescribeApiTrafficRequest {
  apiId?: string(name='ApiId'),
  endTime?: string(name='EndTime'),
  groupId?: string(name='GroupId'),
  startTime?: string(name='StartTime'),
}

model DescribeApiTrafficResponseBody = {
  downloads?: {
    download?: [ 
    {
      time?: string(name='Time'),
      value?: string(name='Value'),
    }
  ](name='Download')
  }(name='Downloads'),
  requestId?: string(name='RequestId'),
  uploads?: {
    upload?: [ 
    {
      time?: string(name='Time'),
      value?: string(name='Value'),
    }
  ](name='Upload')
  }(name='Uploads'),
}

model DescribeApiTrafficResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiTrafficResponseBody(name='body'),
}

async function describeApiTrafficWithOptions(request: DescribeApiTrafficRequest, runtime: Util.RuntimeOptions): DescribeApiTrafficResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApiTraffic',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApiTraffic(request: DescribeApiTrafficRequest): DescribeApiTrafficResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApiTrafficWithOptions(request, runtime);
}

model DescribeApisRequest {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  groupId?: string(name='GroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  visibility?: string(name='Visibility'),
}

model DescribeApisResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisResponseBody(name='body'),
}

async function describeApisWithOptions(request: DescribeApisRequest, runtime: Util.RuntimeOptions): DescribeApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApis',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApis(request: DescribeApisRequest): DescribeApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisWithOptions(request, runtime);
}

model DescribeApisByAppRequest {
  appId?: long(name='AppId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeApisByAppResponseBody = {
  appApiRelationInfos?: {
    appApiRelationInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      authorizationSource?: string(name='AuthorizationSource'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      operator?: string(name='Operator'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
    }
  ](name='AppApiRelationInfo')
  }(name='AppApiRelationInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisByAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisByAppResponseBody(name='body'),
}

async function describeApisByAppWithOptions(request: DescribeApisByAppRequest, runtime: Util.RuntimeOptions): DescribeApisByAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApisByApp',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApisByApp(request: DescribeApisByAppRequest): DescribeApisByAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByAppWithOptions(request, runtime);
}

model DescribeApisByRuleRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ruleId?: string(name='RuleId'),
  ruleType?: string(name='RuleType'),
}

model DescribeApisByRuleResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisByRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisByRuleResponseBody(name='body'),
}

async function describeApisByRuleWithOptions(request: DescribeApisByRuleRequest, runtime: Util.RuntimeOptions): DescribeApisByRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApisByRule',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApisByRule(request: DescribeApisByRuleRequest): DescribeApisByRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisByRuleWithOptions(request, runtime);
}

model DescribeApisForConsoleRequest {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  groupId?: string(name='GroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  stageName?: string(name='StageName'),
  visibility?: string(name='Visibility'),
}

model DescribeApisForConsoleResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      createdTime?: string(name='CreatedTime'),
      deployedInfos?: {
        deployedInfo?: [ 
        {
          deployedStatus?: string(name='DeployedStatus'),
          effectiveVersion?: string(name='EffectiveVersion'),
          stageName?: string(name='StageName'),
        }
      ](name='DeployedInfo')
      }(name='DeployedInfos'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisForConsoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisForConsoleResponseBody(name='body'),
}

async function describeApisForConsoleWithOptions(request: DescribeApisForConsoleRequest, runtime: Util.RuntimeOptions): DescribeApisForConsoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApisForConsole',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApisForConsole(request: DescribeApisForConsoleRequest): DescribeApisForConsoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApisForConsoleWithOptions(request, runtime);
}

model DescribeAppRequest {
  appId?: long(name='AppId'),
}

model DescribeAppResponseBody = {
  appId?: long(name='AppId'),
  appName?: string(name='AppName'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  modifiedTime?: string(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
}

model DescribeAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppResponseBody(name='body'),
}

async function describeAppWithOptions(request: DescribeAppRequest, runtime: Util.RuntimeOptions): DescribeAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApp',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApp(request: DescribeAppRequest): DescribeAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppWithOptions(request, runtime);
}

model DescribeAppSecuritiesRequest {
  appId?: long(name='AppId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeAppSecuritiesResponseBody = {
  appSecuritys?: {
    appSecurity?: [ 
    {
      appCode?: string(name='AppCode'),
      appKey?: string(name='AppKey'),
      appSecret?: string(name='AppSecret'),
      createdTime?: string(name='CreatedTime'),
      modifiedTime?: string(name='ModifiedTime'),
    }
  ](name='AppSecurity')
  }(name='AppSecuritys'),
  requestId?: string(name='RequestId'),
}

model DescribeAppSecuritiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppSecuritiesResponseBody(name='body'),
}

async function describeAppSecuritiesWithOptions(request: DescribeAppSecuritiesRequest, runtime: Util.RuntimeOptions): DescribeAppSecuritiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppSecurities',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAppSecurities(request: DescribeAppSecuritiesRequest): DescribeAppSecuritiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppSecuritiesWithOptions(request, runtime);
}

model DescribeAppSecurityRequest {
  appKey?: string(name='AppKey'),
}

model DescribeAppSecurityResponseBody = {
  appKey?: string(name='AppKey'),
  appSecret?: string(name='AppSecret'),
  createdTime?: string(name='CreatedTime'),
  modifiedTime?: string(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
}

model DescribeAppSecurityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppSecurityResponseBody(name='body'),
}

async function describeAppSecurityWithOptions(request: DescribeAppSecurityRequest, runtime: Util.RuntimeOptions): DescribeAppSecurityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppSecurity',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAppSecurity(request: DescribeAppSecurityRequest): DescribeAppSecurityResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppSecurityWithOptions(request, runtime);
}

model DescribeAppSecurityForInnerRequest {
  aliUid?: long(name='AliUid'),
  appId?: long(name='AppId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeAppSecurityForInnerResponseBody = {
  appCode?: string(name='AppCode'),
  appKey?: string(name='AppKey'),
  appSecret?: string(name='AppSecret'),
  createdTime?: string(name='CreatedTime'),
  modifiedTime?: string(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
}

model DescribeAppSecurityForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppSecurityForInnerResponseBody(name='body'),
}

async function describeAppSecurityForInnerWithOptions(request: DescribeAppSecurityForInnerRequest, runtime: Util.RuntimeOptions): DescribeAppSecurityForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppSecurityForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAppSecurityForInner(request: DescribeAppSecurityForInnerRequest): DescribeAppSecurityForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppSecurityForInnerWithOptions(request, runtime);
}

model DescribeAppsRequest {
  appId?: long(name='AppId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAppsResponseBody = {
  apps?: {
    app?: [ 
    {
      appId?: long(name='AppId'),
      appName?: string(name='AppName'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
    }
  ](name='App')
  }(name='Apps'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppsResponseBody(name='body'),
}

async function describeAppsWithOptions(request: DescribeAppsRequest, runtime: Util.RuntimeOptions): DescribeAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeApps',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppsWithOptions(request, runtime);
}

model DescribeAppsByApiRequest {
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  stageName?: string(name='StageName'),
}

model DescribeAppsByApiResponseBody = {
  appApiRelationInfos?: {
    appApiRelationInfo?: [ 
    {
      appId?: string(name='AppId'),
      appName?: string(name='AppName'),
      authorizationSource?: string(name='AuthorizationSource'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      operator?: string(name='Operator'),
      stageName?: string(name='StageName'),
    }
  ](name='AppApiRelationInfo')
  }(name='AppApiRelationInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAppsByApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppsByApiResponseBody(name='body'),
}

async function describeAppsByApiWithOptions(request: DescribeAppsByApiRequest, runtime: Util.RuntimeOptions): DescribeAppsByApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppsByApi',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAppsByApi(request: DescribeAppsByApiRequest): DescribeAppsByApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppsByApiWithOptions(request, runtime);
}

model DescribeAppsForProviderRequest {
  appId?: long(name='AppId'),
  appOwner?: string(name='AppOwner'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeAppsForProviderResponseBody = {
  apps?: {
    app?: [ 
    {
      appId?: long(name='AppId'),
      appName?: string(name='AppName'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
    }
  ](name='App')
  }(name='Apps'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAppsForProviderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppsForProviderResponseBody(name='body'),
}

async function describeAppsForProviderWithOptions(request: DescribeAppsForProviderRequest, runtime: Util.RuntimeOptions): DescribeAppsForProviderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appOwner)) {
    query['AppOwner'] = request.appOwner;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAppsForProvider',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAppsForProvider(request: DescribeAppsForProviderRequest): DescribeAppsForProviderResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAppsForProviderWithOptions(request, runtime);
}

model DescribeAvailableVipsRequest {
  vip?: string(name='Vip'),
}

model DescribeAvailableVipsResponseBody = {
  availableVips?: {
    availableVip?: [ string ](name='AvailableVip')
  }(name='AvailableVips'),
}

model DescribeAvailableVipsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAvailableVipsResponseBody(name='body'),
}

async function describeAvailableVipsWithOptions(request: DescribeAvailableVipsRequest, runtime: Util.RuntimeOptions): DescribeAvailableVipsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.vip)) {
    query['Vip'] = request.vip;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeAvailableVips',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeAvailableVips(request: DescribeAvailableVipsRequest): DescribeAvailableVipsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableVipsWithOptions(request, runtime);
}

model DescribeBidByUserIdForInnerRequest {
  aliUid?: long(name='AliUid'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeBidByUserIdForInnerResponseBody = {
  bid?: string(name='Bid'),
  requestId?: string(name='RequestId'),
}

model DescribeBidByUserIdForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBidByUserIdForInnerResponseBody(name='body'),
}

async function describeBidByUserIdForInnerWithOptions(request: DescribeBidByUserIdForInnerRequest, runtime: Util.RuntimeOptions): DescribeBidByUserIdForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBidByUserIdForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBidByUserIdForInner(request: DescribeBidByUserIdForInnerRequest): DescribeBidByUserIdForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBidByUserIdForInnerWithOptions(request, runtime);
}

model DescribeBlackListsRequest {
  blackType?: string(name='BlackType'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeBlackListsResponseBody = {
  blackLists?: {
    blackList?: [ 
    {
      blackContent?: string(name='BlackContent'),
      blackType?: string(name='BlackType'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
    }
  ](name='BlackList')
  }(name='BlackLists'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeBlackListsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBlackListsResponseBody(name='body'),
}

async function describeBlackListsWithOptions(request: DescribeBlackListsRequest, runtime: Util.RuntimeOptions): DescribeBlackListsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blackType)) {
    query['BlackType'] = request.blackType;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBlackLists',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBlackLists(request: DescribeBlackListsRequest): DescribeBlackListsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBlackListsWithOptions(request, runtime);
}

model DescribeDeployedApiRequest {
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
}

model DescribeDeployedApiResponseBody = {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  authType?: string(name='AuthType'),
  bodyFormat?: string(name='BodyFormat'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters'),
  deployedTime?: string(name='DeployedTime'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      message?: string(name='Message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  functionComputeConfig?: {
    fcRegionId?: string(name='FcRegionId'),
    functionName?: string(name='FunctionName'),
    roleArn?: string(name='RoleArn'),
    serviceName?: string(name='ServiceName'),
  }(name='FunctionComputeConfig'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  httpMethod?: string(name='HttpMethod'),
  httpProtocol?: string(name='HttpProtocol'),
  path?: string(name='Path'),
  pathParameters?: {
    pathParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='PathParameter')
  }(name='PathParameters'),
  postBodyDescription?: string(name='PostBodyDescription'),
  postBodyType?: string(name='PostBodyType'),
  regionId?: string(name='RegionId'),
  requestBody?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='RequestParam')
  }(name='RequestBody'),
  requestHeaders?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='RequestParam')
  }(name='RequestHeaders'),
  requestId?: string(name='RequestId'),
  requestQueries?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='RequestParam')
  }(name='RequestQueries'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  serviceAddress?: string(name='ServiceAddress'),
  serviceFCEnable?: string(name='ServiceFCEnable'),
  serviceProtocol?: string(name='ServiceProtocol'),
  serviceTimeout?: int32(name='ServiceTimeout'),
  serviceVpcEnable?: string(name='ServiceVpcEnable'),
  stageName?: string(name='StageName'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
  visibility?: string(name='Visibility'),
  vpcName?: string(name='VpcName'),
}

model DescribeDeployedApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeployedApiResponseBody(name='body'),
}

async function describeDeployedApiWithOptions(request: DescribeDeployedApiRequest, runtime: Util.RuntimeOptions): DescribeDeployedApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDeployedApi',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDeployedApi(request: DescribeDeployedApiRequest): DescribeDeployedApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeployedApiWithOptions(request, runtime);
}

model DescribeDeployedApisRequest {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  groupId?: string(name='GroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  stageName?: string(name='StageName'),
}

model DescribeDeployedApisResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      deployedTime?: string(name='DeployedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDeployedApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeployedApisResponseBody(name='body'),
}

async function describeDeployedApisWithOptions(request: DescribeDeployedApisRequest, runtime: Util.RuntimeOptions): DescribeDeployedApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDeployedApis',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDeployedApis(request: DescribeDeployedApisRequest): DescribeDeployedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeployedApisWithOptions(request, runtime);
}

model DescribeDomainRequest {
  domainName?: string(name='DomainName'),
  groupId?: string(name='GroupId'),
}

model DescribeDomainResponseBody = {
  certificateBody?: string(name='CertificateBody'),
  certificateId?: string(name='CertificateId'),
  certificateName?: string(name='CertificateName'),
  domainName?: string(name='DomainName'),
  domainNameResolution?: string(name='DomainNameResolution'),
  domainStatus?: string(name='DomainStatus'),
  groupId?: string(name='GroupId'),
  privateKey?: string(name='PrivateKey'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model DescribeDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDomainResponseBody(name='body'),
}

async function describeDomainWithOptions(request: DescribeDomainRequest, runtime: Util.RuntimeOptions): DescribeDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomain',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomain(request: DescribeDomainRequest): DescribeDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainWithOptions(request, runtime);
}

model DescribeDomainResolutionRequest {
  domainNames?: string(name='DomainNames'),
  groupId?: string(name='GroupId'),
}

model DescribeDomainResolutionResponseBody = {
  domainResolutions?: {
    domainResolution?: [ 
    {
      domainName?: string(name='DomainName'),
      domainNameResolution?: string(name='DomainNameResolution'),
    }
  ](name='DomainResolution')
  }(name='DomainResolutions'),
  groupId?: string(name='GroupId'),
  requestId?: string(name='RequestId'),
}

model DescribeDomainResolutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDomainResolutionResponseBody(name='body'),
}

async function describeDomainResolutionWithOptions(request: DescribeDomainResolutionRequest, runtime: Util.RuntimeOptions): DescribeDomainResolutionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainNames)) {
    query['DomainNames'] = request.domainNames;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomainResolution',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomainResolution(request: DescribeDomainResolutionRequest): DescribeDomainResolutionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainResolutionWithOptions(request, runtime);
}

model DescribeHistoryApiRequest {
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  historyVersion?: string(name='HistoryVersion'),
  stageName?: string(name='StageName'),
}

model DescribeHistoryApiResponseBody = {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  authType?: string(name='AuthType'),
  bodyFormat?: string(name='BodyFormat'),
  constantParameters?: {
    constantParameter?: [ 
    {
      constantValue?: string(name='ConstantValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='ConstantParameter')
  }(name='ConstantParameters'),
  deployedTime?: string(name='DeployedTime'),
  description?: string(name='Description'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      message?: string(name='Message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  functionComputeConfig?: {
    fcRegionId?: string(name='FcRegionId'),
    functionName?: string(name='FunctionName'),
    roleArn?: string(name='RoleArn'),
    serviceName?: string(name='ServiceName'),
  }(name='FunctionComputeConfig'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  historyVersion?: string(name='HistoryVersion'),
  httpMethod?: string(name='HttpMethod'),
  httpProtocol?: string(name='HttpProtocol'),
  mock?: string(name='Mock'),
  mockResult?: string(name='MockResult'),
  originResultDescription?: string(name='OriginResultDescription'),
  path?: string(name='Path'),
  pathParameters?: {
    pathParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='PathParameter')
  }(name='PathParameters'),
  postBodyDescription?: string(name='PostBodyDescription'),
  postBodyType?: string(name='PostBodyType'),
  regionId?: string(name='RegionId'),
  requestBody?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='RequestParam')
  }(name='RequestBody'),
  requestHeaders?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='RequestParam')
  }(name='RequestHeaders'),
  requestId?: string(name='RequestId'),
  requestQueries?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='RequestParam')
  }(name='RequestQueries'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  serviceAddress?: string(name='ServiceAddress'),
  serviceFCEnable?: string(name='ServiceFCEnable'),
  serviceProtocol?: string(name='ServiceProtocol'),
  serviceTimeout?: int32(name='ServiceTimeout'),
  serviceVpcEnable?: string(name='ServiceVpcEnable'),
  status?: string(name='Status'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      location?: string(name='Location'),
      parameterName?: string(name='ParameterName'),
      serviceParameterName?: string(name='ServiceParameterName'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
  visibility?: string(name='Visibility'),
  vpcName?: string(name='VpcName'),
}

model DescribeHistoryApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHistoryApiResponseBody(name='body'),
}

async function describeHistoryApiWithOptions(request: DescribeHistoryApiRequest, runtime: Util.RuntimeOptions): DescribeHistoryApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.historyVersion)) {
    query['HistoryVersion'] = request.historyVersion;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHistoryApi',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHistoryApi(request: DescribeHistoryApiRequest): DescribeHistoryApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHistoryApiWithOptions(request, runtime);
}

model DescribeHistoryApisRequest {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  groupId?: string(name='GroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  stageName?: string(name='StageName'),
}

model DescribeHistoryApisResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      deployedTime?: string(name='DeployedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      historyVersion?: string(name='HistoryVersion'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      status?: string(name='Status'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeHistoryApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeHistoryApisResponseBody(name='body'),
}

async function describeHistoryApisWithOptions(request: DescribeHistoryApisRequest, runtime: Util.RuntimeOptions): DescribeHistoryApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHistoryApis',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHistoryApis(request: DescribeHistoryApisRequest): DescribeHistoryApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHistoryApisWithOptions(request, runtime);
}

model DescribeModelsForInnerRequest {
  aliUid?: long(name='AliUid'),
  groupId?: string(name='GroupId'),
  modelId?: string(name='ModelId'),
  modelName?: string(name='ModelName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeModelsForInnerResponseBody = {
  modelDetails?: {
    modelDetail?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      modelName?: string(name='ModelName'),
      modelRef?: string(name='ModelRef'),
      modifiedTime?: string(name='ModifiedTime'),
      schema?: string(name='Schema'),
    }
  ](name='ModelDetail')
  }(name='ModelDetails'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeModelsForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeModelsForInnerResponseBody(name='body'),
}

async function describeModelsForInnerWithOptions(request: DescribeModelsForInnerRequest, runtime: Util.RuntimeOptions): DescribeModelsForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.modelId)) {
    query['ModelId'] = request.modelId;
  }
  if (!Util.isUnset(request.modelName)) {
    query['ModelName'] = request.modelName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeModelsForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeModelsForInner(request: DescribeModelsForInnerRequest): DescribeModelsForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeModelsForInnerWithOptions(request, runtime);
}

model DescribePurchasedApiRequest {
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
}

model DescribePurchasedApiResponseBody = {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  bodyFormat?: string(name='BodyFormat'),
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  httpMethod?: string(name='HttpMethod'),
  httpProtocol?: string(name='HttpProtocol'),
  mock?: string(name='Mock'),
  mockResult?: string(name='MockResult'),
  modifiedTime?: string(name='ModifiedTime'),
  path?: string(name='Path'),
  pathParameters?: {
    pathParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
    }
  ](name='PathParameter')
  }(name='PathParameters'),
  postBodyDescription?: string(name='PostBodyDescription'),
  postBodyType?: string(name='PostBodyType'),
  regionId?: string(name='RegionId'),
  requestBody?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: string(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: string(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestBody'),
  requestHeaders?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestHeaders'),
  requestId?: string(name='RequestId'),
  requestQueries?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      docOrder?: string(name='DocOrder'),
      docShow?: string(name='DocShow'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: string(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: string(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestQueries'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  visibility?: string(name='Visibility'),
}

model DescribePurchasedApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePurchasedApiResponseBody(name='body'),
}

async function describePurchasedApiWithOptions(request: DescribePurchasedApiRequest, runtime: Util.RuntimeOptions): DescribePurchasedApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePurchasedApi',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePurchasedApi(request: DescribePurchasedApiRequest): DescribePurchasedApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApiWithOptions(request, runtime);
}

model DescribePurchasedApiGroupDetailRequest {
  groupId?: string(name='GroupId'),
}

model DescribePurchasedApiGroupDetailResponseBody = {
  createdTime?: string(name='CreatedTime'),
  description?: string(name='Description'),
  domainItems?: {
    domainItem?: [ 
    {
      domainName?: string(name='DomainName'),
    }
  ](name='DomainItem')
  }(name='DomainItems'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  modifiedTime?: string(name='ModifiedTime'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribePurchasedApiGroupDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePurchasedApiGroupDetailResponseBody(name='body'),
}

async function describePurchasedApiGroupDetailWithOptions(request: DescribePurchasedApiGroupDetailRequest, runtime: Util.RuntimeOptions): DescribePurchasedApiGroupDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePurchasedApiGroupDetail',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePurchasedApiGroupDetail(request: DescribePurchasedApiGroupDetailRequest): DescribePurchasedApiGroupDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApiGroupDetailWithOptions(request, runtime);
}

model DescribePurchasedApiGroupsRequest {
  groupIds?: string(name='GroupIds'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
}

model DescribePurchasedApiGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  purchasedApiGroupAttributes?: {
    purchasedApiGroupAttribute?: [ 
    {
      billingType?: string(name='BillingType'),
      createdTime?: string(name='CreatedTime'),
      expireTime?: string(name='ExpireTime'),
      groupDescription?: string(name='GroupDescription'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      invokeTimesMax?: long(name='InvokeTimesMax'),
      invokeTimesNow?: long(name='InvokeTimesNow'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
    }
  ](name='PurchasedApiGroupAttribute')
  }(name='PurchasedApiGroupAttributes'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePurchasedApiGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePurchasedApiGroupsResponseBody(name='body'),
}

async function describePurchasedApiGroupsWithOptions(request: DescribePurchasedApiGroupsRequest, runtime: Util.RuntimeOptions): DescribePurchasedApiGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupIds)) {
    query['GroupIds'] = request.groupIds;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePurchasedApiGroups',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePurchasedApiGroups(request: DescribePurchasedApiGroupsRequest): DescribePurchasedApiGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApiGroupsWithOptions(request, runtime);
}

model DescribePurchasedApisRequest {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  groupId?: string(name='GroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  stageName?: string(name='StageName'),
  visibility?: string(name='Visibility'),
}

model DescribePurchasedApisResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePurchasedApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePurchasedApisResponseBody(name='body'),
}

async function describePurchasedApisWithOptions(request: DescribePurchasedApisRequest, runtime: Util.RuntimeOptions): DescribePurchasedApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePurchasedApis',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePurchasedApis(request: DescribePurchasedApisRequest): DescribePurchasedApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePurchasedApisWithOptions(request, runtime);
}

model DescribeRaceWorkForInnerRequest {
  groupId?: string(name='GroupId'),
}

model DescribeRaceWorkForInnerResponseBody = {
  commodityCode?: string(name='CommodityCode'),
  createTime?: string(name='CreateTime'),
  groupId?: string(name='GroupId'),
  keywords?: string(name='Keywords'),
  logoUrl?: string(name='LogoUrl'),
  modifiedTime?: string(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
  shortDescription?: string(name='ShortDescription'),
  workName?: string(name='WorkName'),
}

model DescribeRaceWorkForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRaceWorkForInnerResponseBody(name='body'),
}

async function describeRaceWorkForInnerWithOptions(request: DescribeRaceWorkForInnerRequest, runtime: Util.RuntimeOptions): DescribeRaceWorkForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRaceWorkForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRaceWorkForInner(request: DescribeRaceWorkForInnerRequest): DescribeRaceWorkForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRaceWorkForInnerWithOptions(request, runtime);
}

model DescribeRaceWorksForInnerRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeRaceWorksForInnerResponseBody = {
  apiWorks?: {
    apiWork?: [ 
    {
      commodityCode?: string(name='CommodityCode'),
      createTime?: string(name='CreateTime'),
      groupId?: string(name='GroupId'),
      keywords?: string(name='Keywords'),
      logoUrl?: string(name='LogoUrl'),
      modifiedTime?: string(name='ModifiedTime'),
      shortDescription?: string(name='ShortDescription'),
      workName?: string(name='WorkName'),
    }
  ](name='ApiWork')
  }(name='ApiWorks'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRaceWorksForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRaceWorksForInnerResponseBody(name='body'),
}

async function describeRaceWorksForInnerWithOptions(request: DescribeRaceWorksForInnerRequest, runtime: Util.RuntimeOptions): DescribeRaceWorksForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRaceWorksForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRaceWorksForInner(request: DescribeRaceWorksForInnerRequest): DescribeRaceWorksForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRaceWorksForInnerWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  language?: string(name='Language'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      endPoint?: string(name='EndPoint'),
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeRulesByApiRequest {
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
}

model DescribeRulesByApiResponseBody = {
  requestId?: string(name='RequestId'),
  rules?: {
    rule?: [ 
    {
      createdTime?: int32(name='CreatedTime'),
      ruleId?: string(name='RuleId'),
      ruleName?: string(name='RuleName'),
      ruleType?: string(name='RuleType'),
    }
  ](name='Rule')
  }(name='Rules'),
}

model DescribeRulesByApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRulesByApiResponseBody(name='body'),
}

async function describeRulesByApiWithOptions(request: DescribeRulesByApiRequest, runtime: Util.RuntimeOptions): DescribeRulesByApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRulesByApi',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRulesByApi(request: DescribeRulesByApiRequest): DescribeRulesByApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRulesByApiWithOptions(request, runtime);
}

model DescribeSecretKeysRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  secretKeyId?: string(name='SecretKeyId'),
  secretKeyName?: string(name='SecretKeyName'),
}

model DescribeSecretKeysResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  secretKeys?: {
    secretKey?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      secretKey?: string(name='SecretKey'),
      secretKeyId?: string(name='SecretKeyId'),
      secretKeyName?: string(name='SecretKeyName'),
      secretKeyValue?: string(name='SecretKeyValue'),
    }
  ](name='SecretKey')
  }(name='SecretKeys'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSecretKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSecretKeysResponseBody(name='body'),
}

async function describeSecretKeysWithOptions(request: DescribeSecretKeysRequest, runtime: Util.RuntimeOptions): DescribeSecretKeysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.secretKeyId)) {
    query['SecretKeyId'] = request.secretKeyId;
  }
  if (!Util.isUnset(request.secretKeyName)) {
    query['SecretKeyName'] = request.secretKeyName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSecretKeys',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSecretKeys(request: DescribeSecretKeysRequest): DescribeSecretKeysResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecretKeysWithOptions(request, runtime);
}

model DescribeSystemParametersRequest {
  securityToken?: string(name='SecurityToken'),
}

model DescribeSystemParametersResponseBody = {
  requestId?: string(name='RequestId'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      paramName?: string(name='ParamName'),
      paramType?: string(name='ParamType'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
}

model DescribeSystemParametersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSystemParametersResponseBody(name='body'),
}

async function describeSystemParametersWithOptions(request: DescribeSystemParametersRequest, runtime: Util.RuntimeOptions): DescribeSystemParametersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSystemParameters',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSystemParameters(request: DescribeSystemParametersRequest): DescribeSystemParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSystemParametersWithOptions(request, runtime);
}

model DescribeSystemParamsRequest {
  securityToken?: string(name='SecurityToken'),
}

model DescribeSystemParamsResponseBody = {
  requestId?: string(name='RequestId'),
  systemParams?: {
    systemParam?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      paramName?: string(name='ParamName'),
      paramType?: string(name='ParamType'),
    }
  ](name='SystemParam')
  }(name='SystemParams'),
}

model DescribeSystemParamsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSystemParamsResponseBody(name='body'),
}

async function describeSystemParamsWithOptions(request: DescribeSystemParamsRequest, runtime: Util.RuntimeOptions): DescribeSystemParamsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSystemParams',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSystemParams(request: DescribeSystemParamsRequest): DescribeSystemParamsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSystemParamsWithOptions(request, runtime);
}

model DescribeTrafficControlsRequest {
  apiUid?: string(name='ApiUid'),
  groupId?: string(name='GroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  stageName?: string(name='StageName'),
  trafficControlId?: string(name='TrafficControlId'),
  trafficControlName?: string(name='TrafficControlName'),
}

model DescribeTrafficControlsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  trafficControls?: {
    trafficControl?: [ 
    {
      apiDefault?: int32(name='ApiDefault'),
      appDefault?: int32(name='AppDefault'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
      specialPolicies?: {
        specialPolicy?: [ 
        {
          specialType?: string(name='SpecialType'),
          specials?: {
            special?: [ 
            {
              specialKey?: string(name='SpecialKey'),
              trafficValue?: int32(name='TrafficValue'),
            }
          ](name='Special')
          }(name='Specials'),
        }
      ](name='SpecialPolicy')
      }(name='SpecialPolicies'),
      trafficControlId?: string(name='TrafficControlId'),
      trafficControlName?: string(name='TrafficControlName'),
      trafficControlUnit?: string(name='TrafficControlUnit'),
      userDefault?: int32(name='UserDefault'),
    }
  ](name='TrafficControl')
  }(name='TrafficControls'),
}

model DescribeTrafficControlsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTrafficControlsResponseBody(name='body'),
}

async function describeTrafficControlsWithOptions(request: DescribeTrafficControlsRequest, runtime: Util.RuntimeOptions): DescribeTrafficControlsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiUid)) {
    query['ApiUid'] = request.apiUid;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  if (!Util.isUnset(request.trafficControlName)) {
    query['TrafficControlName'] = request.trafficControlName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeTrafficControls',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeTrafficControls(request: DescribeTrafficControlsRequest): DescribeTrafficControlsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeTrafficControlsWithOptions(request, runtime);
}

model DescribeUserWhiteListsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  type?: string(name='Type'),
  uid?: long(name='Uid'),
}

model DescribeUserWhiteListsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  userWhiteListInfos?: {
    userWhiteListInfo?: [ 
    {
      aoneId?: string(name='AoneId'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      id?: long(name='Id'),
      modifiedTime?: string(name='ModifiedTime'),
      type?: string(name='Type'),
      uid?: long(name='Uid'),
      value?: string(name='Value'),
    }
  ](name='UserWhiteListInfo')
  }(name='UserWhiteListInfos'),
}

model DescribeUserWhiteListsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserWhiteListsResponseBody(name='body'),
}

async function describeUserWhiteListsWithOptions(request: DescribeUserWhiteListsRequest, runtime: Util.RuntimeOptions): DescribeUserWhiteListsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserWhiteLists',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserWhiteLists(request: DescribeUserWhiteListsRequest): DescribeUserWhiteListsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserWhiteListsWithOptions(request, runtime);
}

model IsIncludedByUserWhitelistRequest {
  type?: string(name='Type'),
}

model IsIncludedByUserWhitelistResponseBody = {
  isIncluded?: boolean(name='IsIncluded'),
  requestId?: string(name='RequestId'),
}

model IsIncludedByUserWhitelistResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IsIncludedByUserWhitelistResponseBody(name='body'),
}

async function isIncludedByUserWhitelistWithOptions(request: IsIncludedByUserWhitelistRequest, runtime: Util.RuntimeOptions): IsIncludedByUserWhitelistResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IsIncludedByUserWhitelist',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function isIncludedByUserWhitelist(request: IsIncludedByUserWhitelistRequest): IsIncludedByUserWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return isIncludedByUserWhitelistWithOptions(request, runtime);
}

model ModifyApiRequest {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  authType?: string(name='AuthType'),
  bodyFormat?: string(name='BodyFormat'),
  constantParameters?: string(name='ConstantParameters'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  httpMethod?: string(name='HttpMethod'),
  httpProtocol?: string(name='HttpProtocol'),
  path?: string(name='Path'),
  pathParameters?: string(name='PathParameters'),
  postBodyDescription?: string(name='PostBodyDescription'),
  postBodyType?: string(name='PostBodyType'),
  requestBody?: string(name='RequestBody'),
  requestHeaders?: string(name='RequestHeaders'),
  requestQueries?: string(name='RequestQueries'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  serviceAddress?: string(name='ServiceAddress'),
  serviceProtocol?: string(name='ServiceProtocol'),
  serviceTimeout?: int32(name='ServiceTimeout'),
  systemParameters?: string(name='SystemParameters'),
  visibility?: string(name='Visibility'),
}

model ModifyApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyApiResponseBody(name='body'),
}

async function modifyApiWithOptions(request: ModifyApiRequest, runtime: Util.RuntimeOptions): ModifyApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.bodyFormat)) {
    query['BodyFormat'] = request.bodyFormat;
  }
  if (!Util.isUnset(request.constantParameters)) {
    query['ConstantParameters'] = request.constantParameters;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.httpMethod)) {
    query['HttpMethod'] = request.httpMethod;
  }
  if (!Util.isUnset(request.httpProtocol)) {
    query['HttpProtocol'] = request.httpProtocol;
  }
  if (!Util.isUnset(request.path)) {
    query['Path'] = request.path;
  }
  if (!Util.isUnset(request.pathParameters)) {
    query['PathParameters'] = request.pathParameters;
  }
  if (!Util.isUnset(request.postBodyDescription)) {
    query['PostBodyDescription'] = request.postBodyDescription;
  }
  if (!Util.isUnset(request.postBodyType)) {
    query['PostBodyType'] = request.postBodyType;
  }
  if (!Util.isUnset(request.requestBody)) {
    query['RequestBody'] = request.requestBody;
  }
  if (!Util.isUnset(request.requestHeaders)) {
    query['RequestHeaders'] = request.requestHeaders;
  }
  if (!Util.isUnset(request.requestQueries)) {
    query['RequestQueries'] = request.requestQueries;
  }
  if (!Util.isUnset(request.resultSample)) {
    query['ResultSample'] = request.resultSample;
  }
  if (!Util.isUnset(request.resultType)) {
    query['ResultType'] = request.resultType;
  }
  if (!Util.isUnset(request.serviceAddress)) {
    query['ServiceAddress'] = request.serviceAddress;
  }
  if (!Util.isUnset(request.serviceProtocol)) {
    query['ServiceProtocol'] = request.serviceProtocol;
  }
  if (!Util.isUnset(request.serviceTimeout)) {
    query['ServiceTimeout'] = request.serviceTimeout;
  }
  if (!Util.isUnset(request.systemParameters)) {
    query['SystemParameters'] = request.systemParameters;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApi',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyApi(request: ModifyApiRequest): ModifyApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiWithOptions(request, runtime);
}

model ModifyApiForInnerRequest {
  aliUid?: long(name='AliUid'),
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  authType?: string(name='AuthType'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  requestConfig?: string(name='RequestConfig'),
  requestParamters?: string(name='RequestParamters'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  serviceConfig?: string(name='ServiceConfig'),
  serviceParameters?: string(name='ServiceParameters'),
  serviceParametersMap?: string(name='ServiceParametersMap'),
  visibility?: string(name='Visibility'),
}

model ModifyApiForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyApiForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyApiForInnerResponseBody(name='body'),
}

async function modifyApiForInnerWithOptions(request: ModifyApiForInnerRequest, runtime: Util.RuntimeOptions): ModifyApiForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.apiName)) {
    query['ApiName'] = request.apiName;
  }
  if (!Util.isUnset(request.authType)) {
    query['AuthType'] = request.authType;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.requestConfig)) {
    query['RequestConfig'] = request.requestConfig;
  }
  if (!Util.isUnset(request.requestParamters)) {
    query['RequestParamters'] = request.requestParamters;
  }
  if (!Util.isUnset(request.resultSample)) {
    query['ResultSample'] = request.resultSample;
  }
  if (!Util.isUnset(request.resultType)) {
    query['ResultType'] = request.resultType;
  }
  if (!Util.isUnset(request.serviceConfig)) {
    query['ServiceConfig'] = request.serviceConfig;
  }
  if (!Util.isUnset(request.serviceParameters)) {
    query['ServiceParameters'] = request.serviceParameters;
  }
  if (!Util.isUnset(request.serviceParametersMap)) {
    query['ServiceParametersMap'] = request.serviceParametersMap;
  }
  if (!Util.isUnset(request.visibility)) {
    query['Visibility'] = request.visibility;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApiForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyApiForInner(request: ModifyApiForInnerRequest): ModifyApiForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiForInnerWithOptions(request, runtime);
}

model ModifyApiGroupRequest {
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
}

model ModifyApiGroupResponseBody = {
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model ModifyApiGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyApiGroupResponseBody(name='body'),
}

async function modifyApiGroupWithOptions(request: ModifyApiGroupRequest, runtime: Util.RuntimeOptions): ModifyApiGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.groupName)) {
    query['GroupName'] = request.groupName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApiGroup',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyApiGroup(request: ModifyApiGroupRequest): ModifyApiGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiGroupWithOptions(request, runtime);
}

model ModifyApiMarketInstanceAttributeRequest {
  aliUid?: string(name='AliUid'),
  groupId?: string(name='GroupId'),
  instanceAttributes?: string(name='InstanceAttributes'),
}

model ModifyApiMarketInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyApiMarketInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyApiMarketInstanceAttributeResponseBody(name='body'),
}

async function modifyApiMarketInstanceAttributeWithOptions(request: ModifyApiMarketInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyApiMarketInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceAttributes)) {
    query['InstanceAttributes'] = request.instanceAttributes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApiMarketInstanceAttribute',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyApiMarketInstanceAttribute(request: ModifyApiMarketInstanceAttributeRequest): ModifyApiMarketInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyApiMarketInstanceAttributeWithOptions(request, runtime);
}

model ModifyAppRequest {
  appId?: long(name='AppId'),
  appName?: string(name='AppName'),
  description?: string(name='Description'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppResponseBody(name='body'),
}

async function modifyAppWithOptions(request: ModifyAppRequest, runtime: Util.RuntimeOptions): ModifyAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyApp',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppWithOptions(request, runtime);
}

model ModifyAppForInnerRequest {
  aliUid?: long(name='AliUid'),
  appId?: long(name='AppId'),
  appName?: string(name='AppName'),
  description?: string(name='Description'),
  extend?: string(name='Extend'),
}

model ModifyAppForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAppForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppForInnerResponseBody(name='body'),
}

async function modifyAppForInnerWithOptions(request: ModifyAppForInnerRequest, runtime: Util.RuntimeOptions): ModifyAppForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.extend)) {
    query['Extend'] = request.extend;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAppForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAppForInner(request: ModifyAppForInnerRequest): ModifyAppForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAppForInnerWithOptions(request, runtime);
}

model ModifyGroupAuthAppCodeForBackendRequest {
  aliUid?: long(name='AliUid'),
  authAppCode?: string(name='AuthAppCode'),
  groupId?: string(name='GroupId'),
}

model ModifyGroupAuthAppCodeForBackendResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyGroupAuthAppCodeForBackendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyGroupAuthAppCodeForBackendResponseBody(name='body'),
}

async function modifyGroupAuthAppCodeForBackendWithOptions(request: ModifyGroupAuthAppCodeForBackendRequest, runtime: Util.RuntimeOptions): ModifyGroupAuthAppCodeForBackendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.authAppCode)) {
    query['AuthAppCode'] = request.authAppCode;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyGroupAuthAppCodeForBackend',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyGroupAuthAppCodeForBackend(request: ModifyGroupAuthAppCodeForBackendRequest): ModifyGroupAuthAppCodeForBackendResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyGroupAuthAppCodeForBackendWithOptions(request, runtime);
}

model ModifySecretKeyRequest {
  secretKey?: string(name='SecretKey'),
  secretKeyId?: string(name='SecretKeyId'),
  secretKeyName?: string(name='SecretKeyName'),
  secretValue?: string(name='SecretValue'),
}

model ModifySecretKeyResponseBody = {
  requestId?: string(name='RequestId'),
  secretKeyId?: string(name='SecretKeyId'),
  secretKeyName?: string(name='SecretKeyName'),
}

model ModifySecretKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifySecretKeyResponseBody(name='body'),
}

async function modifySecretKeyWithOptions(request: ModifySecretKeyRequest, runtime: Util.RuntimeOptions): ModifySecretKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.secretKey)) {
    query['SecretKey'] = request.secretKey;
  }
  if (!Util.isUnset(request.secretKeyId)) {
    query['SecretKeyId'] = request.secretKeyId;
  }
  if (!Util.isUnset(request.secretKeyName)) {
    query['SecretKeyName'] = request.secretKeyName;
  }
  if (!Util.isUnset(request.secretValue)) {
    query['SecretValue'] = request.secretValue;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifySecretKey',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifySecretKey(request: ModifySecretKeyRequest): ModifySecretKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecretKeyWithOptions(request, runtime);
}

model ModifyTrafficControlRequest {
  apiDefault?: int32(name='ApiDefault'),
  appDefault?: int32(name='AppDefault'),
  description?: string(name='Description'),
  trafficControlId?: string(name='TrafficControlId'),
  trafficControlName?: string(name='TrafficControlName'),
  trafficControlUnit?: string(name='TrafficControlUnit'),
  userDefault?: int32(name='UserDefault'),
}

model ModifyTrafficControlResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyTrafficControlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyTrafficControlResponseBody(name='body'),
}

async function modifyTrafficControlWithOptions(request: ModifyTrafficControlRequest, runtime: Util.RuntimeOptions): ModifyTrafficControlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiDefault)) {
    query['ApiDefault'] = request.apiDefault;
  }
  if (!Util.isUnset(request.appDefault)) {
    query['AppDefault'] = request.appDefault;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.trafficControlId)) {
    query['TrafficControlId'] = request.trafficControlId;
  }
  if (!Util.isUnset(request.trafficControlName)) {
    query['TrafficControlName'] = request.trafficControlName;
  }
  if (!Util.isUnset(request.trafficControlUnit)) {
    query['TrafficControlUnit'] = request.trafficControlUnit;
  }
  if (!Util.isUnset(request.userDefault)) {
    query['UserDefault'] = request.userDefault;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyTrafficControl',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyTrafficControl(request: ModifyTrafficControlRequest): ModifyTrafficControlResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTrafficControlWithOptions(request, runtime);
}

model ModifyUserWhiteListValueByTypeRequest {
  description?: string(name='Description'),
  type?: string(name='Type'),
  uid?: long(name='Uid'),
  value?: string(name='Value'),
}

model ModifyUserWhiteListValueByTypeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyUserWhiteListValueByTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyUserWhiteListValueByTypeResponseBody(name='body'),
}

async function modifyUserWhiteListValueByTypeWithOptions(request: ModifyUserWhiteListValueByTypeRequest, runtime: Util.RuntimeOptions): ModifyUserWhiteListValueByTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  if (!Util.isUnset(request.value)) {
    query['Value'] = request.value;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyUserWhiteListValueByType',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyUserWhiteListValueByType(request: ModifyUserWhiteListValueByTypeRequest): ModifyUserWhiteListValueByTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyUserWhiteListValueByTypeWithOptions(request, runtime);
}

model ReactivateDomainForBackendRequest {
  aliuid?: long(name='Aliuid'),
  domainName?: string(name='DomainName'),
  groupId?: string(name='GroupId'),
}

model ReactivateDomainForBackendResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReactivateDomainForBackendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReactivateDomainForBackendResponseBody(name='body'),
}

async function reactivateDomainForBackendWithOptions(request: ReactivateDomainForBackendRequest, runtime: Util.RuntimeOptions): ReactivateDomainForBackendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliuid)) {
    query['Aliuid'] = request.aliuid;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReactivateDomainForBackend',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function reactivateDomainForBackend(request: ReactivateDomainForBackendRequest): ReactivateDomainForBackendResponse {
  var runtime = new Util.RuntimeOptions{};
  return reactivateDomainForBackendWithOptions(request, runtime);
}

model RecoverApiFromHistoricalRequest {
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  historyVersion?: string(name='HistoryVersion'),
  stageName?: string(name='StageName'),
}

model RecoverApiFromHistoricalResponseBody = {
  requestId?: string(name='RequestId'),
}

model RecoverApiFromHistoricalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoverApiFromHistoricalResponseBody(name='body'),
}

async function recoverApiFromHistoricalWithOptions(request: RecoverApiFromHistoricalRequest, runtime: Util.RuntimeOptions): RecoverApiFromHistoricalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.historyVersion)) {
    query['HistoryVersion'] = request.historyVersion;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RecoverApiFromHistorical',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recoverApiFromHistorical(request: RecoverApiFromHistoricalRequest): RecoverApiFromHistoricalResponse {
  var runtime = new Util.RuntimeOptions{};
  return recoverApiFromHistoricalWithOptions(request, runtime);
}

model RecoveryApiDefineFromHistoricalRequest {
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  historyVersion?: string(name='HistoryVersion'),
  stageName?: string(name='StageName'),
}

model RecoveryApiDefineFromHistoricalResponseBody = {
  requestId?: string(name='RequestId'),
}

model RecoveryApiDefineFromHistoricalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoveryApiDefineFromHistoricalResponseBody(name='body'),
}

async function recoveryApiDefineFromHistoricalWithOptions(request: RecoveryApiDefineFromHistoricalRequest, runtime: Util.RuntimeOptions): RecoveryApiDefineFromHistoricalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.historyVersion)) {
    query['HistoryVersion'] = request.historyVersion;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RecoveryApiDefineFromHistorical',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recoveryApiDefineFromHistorical(request: RecoveryApiDefineFromHistoricalRequest): RecoveryApiDefineFromHistoricalResponse {
  var runtime = new Util.RuntimeOptions{};
  return recoveryApiDefineFromHistoricalWithOptions(request, runtime);
}

model RecoveryApiFromHistoricalRequest {
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  historyVersion?: string(name='HistoryVersion'),
  stageName?: string(name='StageName'),
}

model RecoveryApiFromHistoricalResponseBody = {
  requestId?: string(name='RequestId'),
}

model RecoveryApiFromHistoricalResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecoveryApiFromHistoricalResponseBody(name='body'),
}

async function recoveryApiFromHistoricalWithOptions(request: RecoveryApiFromHistoricalRequest, runtime: Util.RuntimeOptions): RecoveryApiFromHistoricalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.historyVersion)) {
    query['HistoryVersion'] = request.historyVersion;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RecoveryApiFromHistorical',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function recoveryApiFromHistorical(request: RecoveryApiFromHistoricalRequest): RecoveryApiFromHistoricalResponse {
  var runtime = new Util.RuntimeOptions{};
  return recoveryApiFromHistoricalWithOptions(request, runtime);
}

model RefreshDomainRequest {
  domainName?: string(name='DomainName'),
  groupId?: string(name='GroupId'),
}

model RefreshDomainResponseBody = {
  certificateId?: string(name='CertificateId'),
  certificateName?: string(name='CertificateName'),
  domainName?: string(name='DomainName'),
  domainNameResolution?: string(name='DomainNameResolution'),
  domainStatus?: string(name='DomainStatus'),
  groupId?: string(name='GroupId'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model RefreshDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshDomainResponseBody(name='body'),
}

async function refreshDomainWithOptions(request: RefreshDomainRequest, runtime: Util.RuntimeOptions): RefreshDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshDomain',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refreshDomain(request: RefreshDomainRequest): RefreshDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshDomainWithOptions(request, runtime);
}

model RemoveAccessPermissionByApisRequest {
  apiIds?: string(name='ApiIds'),
  appId?: long(name='AppId'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
}

model RemoveAccessPermissionByApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveAccessPermissionByApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveAccessPermissionByApisResponseBody(name='body'),
}

async function removeAccessPermissionByApisWithOptions(request: RemoveAccessPermissionByApisRequest, runtime: Util.RuntimeOptions): RemoveAccessPermissionByApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveAccessPermissionByApis',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeAccessPermissionByApis(request: RemoveAccessPermissionByApisRequest): RemoveAccessPermissionByApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAccessPermissionByApisWithOptions(request, runtime);
}

model RemoveAccessPermissionByAppsRequest {
  apiId?: string(name='ApiId'),
  appIds?: string(name='AppIds'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
}

model RemoveAccessPermissionByAppsResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveAccessPermissionByAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveAccessPermissionByAppsResponseBody(name='body'),
}

async function removeAccessPermissionByAppsWithOptions(request: RemoveAccessPermissionByAppsRequest, runtime: Util.RuntimeOptions): RemoveAccessPermissionByAppsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.appIds)) {
    query['AppIds'] = request.appIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveAccessPermissionByApps',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeAccessPermissionByApps(request: RemoveAccessPermissionByAppsRequest): RemoveAccessPermissionByAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAccessPermissionByAppsWithOptions(request, runtime);
}

model RemoveAccessPermissionByAppsForInnerRequest {
  aliUid?: long(name='AliUid'),
  apiId?: string(name='ApiId'),
  appIds?: string(name='AppIds'),
  groupId?: string(name='GroupId'),
  source?: string(name='Source'),
  stageName?: string(name='StageName'),
}

model RemoveAccessPermissionByAppsForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveAccessPermissionByAppsForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveAccessPermissionByAppsForInnerResponseBody(name='body'),
}

async function removeAccessPermissionByAppsForInnerWithOptions(request: RemoveAccessPermissionByAppsForInnerRequest, runtime: Util.RuntimeOptions): RemoveAccessPermissionByAppsForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.appIds)) {
    query['AppIds'] = request.appIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveAccessPermissionByAppsForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeAccessPermissionByAppsForInner(request: RemoveAccessPermissionByAppsForInnerRequest): RemoveAccessPermissionByAppsForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAccessPermissionByAppsForInnerWithOptions(request, runtime);
}

model RemoveAllBlackListRequest {
  blackType?: string(name='BlackType'),
}

model RemoveAllBlackListResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveAllBlackListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveAllBlackListResponseBody(name='body'),
}

async function removeAllBlackListWithOptions(request: RemoveAllBlackListRequest, runtime: Util.RuntimeOptions): RemoveAllBlackListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blackType)) {
    query['BlackType'] = request.blackType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveAllBlackList',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeAllBlackList(request: RemoveAllBlackListRequest): RemoveAllBlackListResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAllBlackListWithOptions(request, runtime);
}

model RemoveApiRuleRequest {
  apiIds?: string(name='ApiIds'),
  groupId?: string(name='GroupId'),
  ruleId?: string(name='RuleId'),
  ruleType?: string(name='RuleType'),
  stageName?: string(name='StageName'),
}

model RemoveApiRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveApiRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveApiRuleResponseBody(name='body'),
}

async function removeApiRuleWithOptions(request: RemoveApiRuleRequest, runtime: Util.RuntimeOptions): RemoveApiRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveApiRule',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeApiRule(request: RemoveApiRuleRequest): RemoveApiRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeApiRuleWithOptions(request, runtime);
}

model RemoveAppsFromApiRequest {
  apiId?: string(name='ApiId'),
  appIds?: string(name='AppIds'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
}

model RemoveAppsFromApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveAppsFromApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveAppsFromApiResponseBody(name='body'),
}

async function removeAppsFromApiWithOptions(request: RemoveAppsFromApiRequest, runtime: Util.RuntimeOptions): RemoveAppsFromApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.appIds)) {
    query['AppIds'] = request.appIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveAppsFromApi',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeAppsFromApi(request: RemoveAppsFromApiRequest): RemoveAppsFromApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeAppsFromApiWithOptions(request, runtime);
}

model RemoveBlackListRequest {
  blackContent?: string(name='BlackContent'),
  blackType?: string(name='BlackType'),
}

model RemoveBlackListResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveBlackListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveBlackListResponseBody(name='body'),
}

async function removeBlackListWithOptions(request: RemoveBlackListRequest, runtime: Util.RuntimeOptions): RemoveBlackListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.blackContent)) {
    query['BlackContent'] = request.blackContent;
  }
  if (!Util.isUnset(request.blackType)) {
    query['BlackType'] = request.blackType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveBlackList',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeBlackList(request: RemoveBlackListRequest): RemoveBlackListResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeBlackListWithOptions(request, runtime);
}

model ResetAppCodeRequest {
  appCode?: string(name='AppCode'),
}

model ResetAppCodeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAppCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAppCodeResponseBody(name='body'),
}

async function resetAppCodeWithOptions(request: ResetAppCodeRequest, runtime: Util.RuntimeOptions): ResetAppCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appCode)) {
    query['AppCode'] = request.appCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAppCode',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAppCode(request: ResetAppCodeRequest): ResetAppCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAppCodeWithOptions(request, runtime);
}

model ResetAppCodeForInnerRequest {
  aliUid?: long(name='AliUid'),
  appCode?: string(name='AppCode'),
  newAppCode?: string(name='NewAppCode'),
}

model ResetAppCodeForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAppCodeForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAppCodeForInnerResponseBody(name='body'),
}

async function resetAppCodeForInnerWithOptions(request: ResetAppCodeForInnerRequest, runtime: Util.RuntimeOptions): ResetAppCodeForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.appCode)) {
    query['AppCode'] = request.appCode;
  }
  if (!Util.isUnset(request.newAppCode)) {
    query['NewAppCode'] = request.newAppCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAppCodeForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAppCodeForInner(request: ResetAppCodeForInnerRequest): ResetAppCodeForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAppCodeForInnerWithOptions(request, runtime);
}

model ResetAppKeySecretRequest {
  appKey?: string(name='AppKey'),
}

model ResetAppKeySecretResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAppKeySecretResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAppKeySecretResponseBody(name='body'),
}

async function resetAppKeySecretWithOptions(request: ResetAppKeySecretRequest, runtime: Util.RuntimeOptions): ResetAppKeySecretResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetAppKeySecret',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetAppKeySecret(request: ResetAppKeySecretRequest): ResetAppKeySecretResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetAppKeySecretWithOptions(request, runtime);
}

model ResetSecretByAppKeyForInnerRequest {
  aliUid?: long(name='AliUid'),
  appKey?: string(name='AppKey'),
  newAppKey?: string(name='NewAppKey'),
  newAppSecret?: string(name='NewAppSecret'),
}

model ResetSecretByAppKeyForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetSecretByAppKeyForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetSecretByAppKeyForInnerResponseBody(name='body'),
}

async function resetSecretByAppKeyForInnerWithOptions(request: ResetSecretByAppKeyForInnerRequest, runtime: Util.RuntimeOptions): ResetSecretByAppKeyForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.newAppKey)) {
    query['NewAppKey'] = request.newAppKey;
  }
  if (!Util.isUnset(request.newAppSecret)) {
    query['NewAppSecret'] = request.newAppSecret;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResetSecretByAppKeyForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resetSecretByAppKeyForInner(request: ResetSecretByAppKeyForInnerRequest): ResetSecretByAppKeyForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return resetSecretByAppKeyForInnerWithOptions(request, runtime);
}

model SetAccessPermissionByApisRequest {
  apiIds?: string(name='ApiIds'),
  appId?: long(name='AppId'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
}

model SetAccessPermissionByApisResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetAccessPermissionByApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetAccessPermissionByApisResponseBody(name='body'),
}

async function setAccessPermissionByApisWithOptions(request: SetAccessPermissionByApisRequest, runtime: Util.RuntimeOptions): SetAccessPermissionByApisResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetAccessPermissionByApis',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setAccessPermissionByApis(request: SetAccessPermissionByApisRequest): SetAccessPermissionByApisResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAccessPermissionByApisWithOptions(request, runtime);
}

model SetAccessPermissionByGroupForBackendRequest {
  appId?: long(name='AppId'),
  groupId?: string(name='GroupId'),
}

model SetAccessPermissionByGroupForBackendResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model SetAccessPermissionByGroupForBackendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetAccessPermissionByGroupForBackendResponseBody(name='body'),
}

async function setAccessPermissionByGroupForBackendWithOptions(request: SetAccessPermissionByGroupForBackendRequest, runtime: Util.RuntimeOptions): SetAccessPermissionByGroupForBackendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetAccessPermissionByGroupForBackend',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setAccessPermissionByGroupForBackend(request: SetAccessPermissionByGroupForBackendRequest): SetAccessPermissionByGroupForBackendResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAccessPermissionByGroupForBackendWithOptions(request, runtime);
}

model SetAccessPermissionsRequest {
  apiId?: string(name='ApiId'),
  appIds?: string(name='AppIds'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  stageName?: string(name='StageName'),
}

model SetAccessPermissionsResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetAccessPermissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetAccessPermissionsResponseBody(name='body'),
}

async function setAccessPermissionsWithOptions(request: SetAccessPermissionsRequest, runtime: Util.RuntimeOptions): SetAccessPermissionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.appIds)) {
    query['AppIds'] = request.appIds;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetAccessPermissions',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setAccessPermissions(request: SetAccessPermissionsRequest): SetAccessPermissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAccessPermissionsWithOptions(request, runtime);
}

model SetAccessPermissionsForInnerRequest {
  aliUid?: long(name='AliUid'),
  apiId?: string(name='ApiId'),
  appIds?: string(name='AppIds'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  source?: string(name='Source'),
  stageName?: string(name='StageName'),
}

model SetAccessPermissionsForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetAccessPermissionsForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetAccessPermissionsForInnerResponseBody(name='body'),
}

async function setAccessPermissionsForInnerWithOptions(request: SetAccessPermissionsForInnerRequest, runtime: Util.RuntimeOptions): SetAccessPermissionsForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.appIds)) {
    query['AppIds'] = request.appIds;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetAccessPermissionsForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setAccessPermissionsForInner(request: SetAccessPermissionsForInnerRequest): SetAccessPermissionsForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAccessPermissionsForInnerWithOptions(request, runtime);
}

model SetApiRuleRequest {
  apiIds?: string(name='ApiIds'),
  groupId?: string(name='GroupId'),
  ruleId?: string(name='RuleId'),
  ruleType?: string(name='RuleType'),
  stageName?: string(name='StageName'),
}

model SetApiRuleResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetApiRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetApiRuleResponseBody(name='body'),
}

async function setApiRuleWithOptions(request: SetApiRuleRequest, runtime: Util.RuntimeOptions): SetApiRuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiIds)) {
    query['ApiIds'] = request.apiIds;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ruleId)) {
    query['RuleId'] = request.ruleId;
  }
  if (!Util.isUnset(request.ruleType)) {
    query['RuleType'] = request.ruleType;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetApiRule',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setApiRule(request: SetApiRuleRequest): SetApiRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return setApiRuleWithOptions(request, runtime);
}

model SetDomainRequest {
  certificateBody?: string(name='CertificateBody'),
  certificateName?: string(name='CertificateName'),
  domainName?: string(name='DomainName'),
  groupId?: string(name='GroupId'),
  privateKey?: string(name='PrivateKey'),
}

model SetDomainResponseBody = {
  domainName?: string(name='DomainName'),
  domainStatus?: string(name='DomainStatus'),
  groupId?: string(name='GroupId'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model SetDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDomainResponseBody(name='body'),
}

async function setDomainWithOptions(request: SetDomainRequest, runtime: Util.RuntimeOptions): SetDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificateBody)) {
    query['CertificateBody'] = request.certificateBody;
  }
  if (!Util.isUnset(request.certificateName)) {
    query['CertificateName'] = request.certificateName;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.privateKey)) {
    query['PrivateKey'] = request.privateKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDomain',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDomain(request: SetDomainRequest): SetDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainWithOptions(request, runtime);
}

model SetDomainCertificateRequest {
  certificateBody?: string(name='CertificateBody'),
  certificateName?: string(name='CertificateName'),
  domainName?: string(name='DomainName'),
  groupId?: string(name='GroupId'),
  privateKey?: string(name='PrivateKey'),
}

model SetDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDomainCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDomainCertificateResponseBody(name='body'),
}

async function setDomainCertificateWithOptions(request: SetDomainCertificateRequest, runtime: Util.RuntimeOptions): SetDomainCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificateBody)) {
    query['CertificateBody'] = request.certificateBody;
  }
  if (!Util.isUnset(request.certificateName)) {
    query['CertificateName'] = request.certificateName;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.privateKey)) {
    query['PrivateKey'] = request.privateKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDomainCertificate',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDomainCertificate(request: SetDomainCertificateRequest): SetDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainCertificateWithOptions(request, runtime);
}

model SetDomainForBackendRequest {
  certificateBody?: string(name='CertificateBody'),
  certificateName?: string(name='CertificateName'),
  certificatePrivateKey?: string(name='CertificatePrivateKey'),
  domainName?: string(name='DomainName'),
  groupId?: string(name='GroupId'),
}

model SetDomainForBackendResponseBody = {
  domainBindingStatus?: string(name='DomainBindingStatus'),
  domainName?: string(name='DomainName'),
  groupId?: string(name='GroupId'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model SetDomainForBackendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDomainForBackendResponseBody(name='body'),
}

async function setDomainForBackendWithOptions(request: SetDomainForBackendRequest, runtime: Util.RuntimeOptions): SetDomainForBackendResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.certificateBody)) {
    query['CertificateBody'] = request.certificateBody;
  }
  if (!Util.isUnset(request.certificateName)) {
    query['CertificateName'] = request.certificateName;
  }
  if (!Util.isUnset(request.certificatePrivateKey)) {
    query['CertificatePrivateKey'] = request.certificatePrivateKey;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetDomainForBackend',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setDomainForBackend(request: SetDomainForBackendRequest): SetDomainForBackendResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDomainForBackendWithOptions(request, runtime);
}

model SetMockIntegrationRequest {
  apiId?: string(name='ApiId'),
  groupId?: string(name='GroupId'),
  mock?: string(name='Mock'),
  mockResult?: string(name='MockResult'),
}

model SetMockIntegrationResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetMockIntegrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetMockIntegrationResponseBody(name='body'),
}

async function setMockIntegrationWithOptions(request: SetMockIntegrationRequest, runtime: Util.RuntimeOptions): SetMockIntegrationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.mock)) {
    query['Mock'] = request.mock;
  }
  if (!Util.isUnset(request.mockResult)) {
    query['MockResult'] = request.mockResult;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetMockIntegration',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setMockIntegration(request: SetMockIntegrationRequest): SetMockIntegrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return setMockIntegrationWithOptions(request, runtime);
}

model SetPurchasedApiGroupStatusRequest {
  aliUid?: long(name='AliUid'),
  billingStatus?: string(name='BillingStatus'),
  closeOrder?: boolean(name='CloseOrder'),
  groupId?: string(name='GroupId'),
}

model SetPurchasedApiGroupStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetPurchasedApiGroupStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPurchasedApiGroupStatusResponseBody(name='body'),
}

async function setPurchasedApiGroupStatusWithOptions(request: SetPurchasedApiGroupStatusRequest, runtime: Util.RuntimeOptions): SetPurchasedApiGroupStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.billingStatus)) {
    query['BillingStatus'] = request.billingStatus;
  }
  if (!Util.isUnset(request.closeOrder)) {
    query['CloseOrder'] = request.closeOrder;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetPurchasedApiGroupStatus',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setPurchasedApiGroupStatus(request: SetPurchasedApiGroupStatusRequest): SetPurchasedApiGroupStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setPurchasedApiGroupStatusWithOptions(request, runtime);
}

model SwitchApiRequest {
  apiId?: string(name='ApiId'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  historyVersion?: string(name='HistoryVersion'),
  stageName?: string(name='StageName'),
}

model SwitchApiResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchApiResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchApiResponseBody(name='body'),
}

async function switchApiWithOptions(request: SwitchApiRequest, runtime: Util.RuntimeOptions): SwitchApiResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.historyVersion)) {
    query['HistoryVersion'] = request.historyVersion;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchApi',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function switchApi(request: SwitchApiRequest): SwitchApiResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchApiWithOptions(request, runtime);
}

model SwitchApiForInnerRequest {
  apiId?: string(name='ApiId'),
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  historyVersion?: string(name='HistoryVersion'),
  stageName?: string(name='StageName'),
}

model SwitchApiForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model SwitchApiForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SwitchApiForInnerResponseBody(name='body'),
}

async function switchApiForInnerWithOptions(request: SwitchApiForInnerRequest, runtime: Util.RuntimeOptions): SwitchApiForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.apiId)) {
    query['ApiId'] = request.apiId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.historyVersion)) {
    query['HistoryVersion'] = request.historyVersion;
  }
  if (!Util.isUnset(request.stageName)) {
    query['StageName'] = request.stageName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SwitchApiForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function switchApiForInner(request: SwitchApiForInnerRequest): SwitchApiForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return switchApiForInnerWithOptions(request, runtime);
}

model SynCreateAppForInnerRequest {
  aliUid?: long(name='AliUid'),
  appKey?: long(name='AppKey'),
  appName?: string(name='AppName'),
  appSecret?: string(name='AppSecret'),
  description?: string(name='Description'),
  source?: string(name='Source'),
}

model SynCreateAppForInnerResponseBody = {
  appId?: long(name='AppId'),
  requestId?: string(name='RequestId'),
}

model SynCreateAppForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SynCreateAppForInnerResponseBody(name='body'),
}

async function synCreateAppForInnerWithOptions(request: SynCreateAppForInnerRequest, runtime: Util.RuntimeOptions): SynCreateAppForInnerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.aliUid)) {
    query['AliUid'] = request.aliUid;
  }
  if (!Util.isUnset(request.appKey)) {
    query['AppKey'] = request.appKey;
  }
  if (!Util.isUnset(request.appName)) {
    query['AppName'] = request.appName;
  }
  if (!Util.isUnset(request.appSecret)) {
    query['AppSecret'] = request.appSecret;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SynCreateAppForInner',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function synCreateAppForInner(request: SynCreateAppForInnerRequest): SynCreateAppForInnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return synCreateAppForInnerWithOptions(request, runtime);
}

model TagResourcesSystemTagsRequest {
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  scope?: string(name='Scope'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
  tagOwnerBid?: string(name='TagOwnerBid'),
  tagOwnerUid?: long(name='TagOwnerUid'),
}

model TagResourcesSystemTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesSystemTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesSystemTagsResponseBody(name='body'),
}

async function tagResourcesSystemTagsWithOptions(request: TagResourcesSystemTagsRequest, runtime: Util.RuntimeOptions): TagResourcesSystemTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.scope)) {
    query['Scope'] = request.scope;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.tagOwnerBid)) {
    query['TagOwnerBid'] = request.tagOwnerBid;
  }
  if (!Util.isUnset(request.tagOwnerUid)) {
    query['TagOwnerUid'] = request.tagOwnerUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResourcesSystemTags',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResourcesSystemTags(request: TagResourcesSystemTagsRequest): TagResourcesSystemTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesSystemTagsWithOptions(request, runtime);
}

model UntagResourcesSystemTagsRequest {
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  securityToken?: string(name='SecurityToken'),
  tagKey?: [ string ](name='TagKey'),
  tagOwnerBid?: string(name='TagOwnerBid'),
  tagOwnerUid?: long(name='TagOwnerUid'),
}

model UntagResourcesSystemTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesSystemTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesSystemTagsResponseBody(name='body'),
}

async function untagResourcesSystemTagsWithOptions(request: UntagResourcesSystemTagsRequest, runtime: Util.RuntimeOptions): UntagResourcesSystemTagsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.securityToken)) {
    query['SecurityToken'] = request.securityToken;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  if (!Util.isUnset(request.tagOwnerBid)) {
    query['TagOwnerBid'] = request.tagOwnerBid;
  }
  if (!Util.isUnset(request.tagOwnerUid)) {
    query['TagOwnerUid'] = request.tagOwnerUid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResourcesSystemTags',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResourcesSystemTags(request: UntagResourcesSystemTagsRequest): UntagResourcesSystemTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesSystemTagsWithOptions(request, runtime);
}

model VipMigrationRequest {
  newVip?: string(name='NewVip'),
  originalVip?: string(name='OriginalVip'),
}

model VipMigrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

async function vipMigrationWithOptions(request: VipMigrationRequest, runtime: Util.RuntimeOptions): VipMigrationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newVip)) {
    query['NewVip'] = request.newVip;
  }
  if (!Util.isUnset(request.originalVip)) {
    query['OriginalVip'] = request.originalVip;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VipMigration',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

async function vipMigration(request: VipMigrationRequest): VipMigrationResponse {
  var runtime = new Util.RuntimeOptions{};
  return vipMigrationWithOptions(request, runtime);
}

model VipMigrationByUidRequest {
  newVip?: string(name='NewVip'),
  originalVip?: string(name='OriginalVip'),
}

model VipMigrationByUidResponseBody = {
  requestId?: string(name='RequestId'),
}

model VipMigrationByUidResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VipMigrationByUidResponseBody(name='body'),
}

async function vipMigrationByUidWithOptions(request: VipMigrationByUidRequest, runtime: Util.RuntimeOptions): VipMigrationByUidResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.newVip)) {
    query['NewVip'] = request.newVip;
  }
  if (!Util.isUnset(request.originalVip)) {
    query['OriginalVip'] = request.originalVip;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VipMigrationByUid',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function vipMigrationByUid(request: VipMigrationByUidRequest): VipMigrationByUidResponse {
  var runtime = new Util.RuntimeOptions{};
  return vipMigrationByUidWithOptions(request, runtime);
}

model VpcAddAppServerRequest {
  addressPoolId?: string(name='AddressPoolId'),
  appId?: string(name='AppId'),
  serverIp?: string(name='ServerIp'),
  token?: string(name='Token'),
}

model VpcAddAppServerResponseBody = {
  requestId?: string(name='RequestId'),
}

model VpcAddAppServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VpcAddAppServerResponseBody(name='body'),
}

async function vpcAddAppServerWithOptions(request: VpcAddAppServerRequest, runtime: Util.RuntimeOptions): VpcAddAppServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressPoolId)) {
    query['AddressPoolId'] = request.addressPoolId;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.serverIp)) {
    query['ServerIp'] = request.serverIp;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VpcAddAppServer',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function vpcAddAppServer(request: VpcAddAppServerRequest): VpcAddAppServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return vpcAddAppServerWithOptions(request, runtime);
}

model VpcCreateAddressPoolRequest {
  appId?: string(name='AppId'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  token?: string(name='Token'),
}

model VpcCreateAddressPoolResponseBody = {
  addressPoolId?: string(name='AddressPoolId'),
  requestId?: string(name='RequestId'),
}

model VpcCreateAddressPoolResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VpcCreateAddressPoolResponseBody(name='body'),
}

async function vpcCreateAddressPoolWithOptions(request: VpcCreateAddressPoolRequest, runtime: Util.RuntimeOptions): VpcCreateAddressPoolResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VpcCreateAddressPool',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function vpcCreateAddressPool(request: VpcCreateAddressPoolRequest): VpcCreateAddressPoolResponse {
  var runtime = new Util.RuntimeOptions{};
  return vpcCreateAddressPoolWithOptions(request, runtime);
}

model VpcQueryAppServersRequest {
  addressPoolId?: string(name='AddressPoolId'),
  appId?: string(name='AppId'),
  serverIp?: string(name='ServerIp'),
}

model VpcQueryAppServersResponseBody = {
  appServerInfos?: {
    appServerInfo?: [ 
    {
      addressPoolId?: string(name='AddressPoolId'),
      appId?: string(name='AppId'),
      serverIp?: string(name='ServerIp'),
      serverMappingIp?: string(name='ServerMappingIp'),
      serverType?: string(name='ServerType'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
    }
  ](name='AppServerInfo')
  }(name='AppServerInfos'),
  requestId?: string(name='RequestId'),
}

model VpcQueryAppServersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VpcQueryAppServersResponseBody(name='body'),
}

async function vpcQueryAppServersWithOptions(request: VpcQueryAppServersRequest, runtime: Util.RuntimeOptions): VpcQueryAppServersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressPoolId)) {
    query['AddressPoolId'] = request.addressPoolId;
  }
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.serverIp)) {
    query['ServerIp'] = request.serverIp;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VpcQueryAppServers',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function vpcQueryAppServers(request: VpcQueryAppServersRequest): VpcQueryAppServersResponse {
  var runtime = new Util.RuntimeOptions{};
  return vpcQueryAppServersWithOptions(request, runtime);
}

model VpcRegisterAppRequest {
  appId?: string(name='AppId'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  token?: string(name='Token'),
}

model VpcRegisterAppResponseBody = {
  appId?: string(name='AppId'),
  requestId?: string(name='RequestId'),
}

model VpcRegisterAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VpcRegisterAppResponseBody(name='body'),
}

async function vpcRegisterAppWithOptions(request: VpcRegisterAppRequest, runtime: Util.RuntimeOptions): VpcRegisterAppResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VpcRegisterApp',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function vpcRegisterApp(request: VpcRegisterAppRequest): VpcRegisterAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return vpcRegisterAppWithOptions(request, runtime);
}

model VpcRemoveAppServerRequest {
  appId?: string(name='AppId'),
  serverIp?: string(name='ServerIp'),
  token?: string(name='Token'),
}

model VpcRemoveAppServerResponseBody = {
  requestId?: string(name='RequestId'),
}

model VpcRemoveAppServerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VpcRemoveAppServerResponseBody(name='body'),
}

async function vpcRemoveAppServerWithOptions(request: VpcRemoveAppServerRequest, runtime: Util.RuntimeOptions): VpcRemoveAppServerResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.appId)) {
    query['AppId'] = request.appId;
  }
  if (!Util.isUnset(request.serverIp)) {
    query['ServerIp'] = request.serverIp;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'VpcRemoveAppServer',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function vpcRemoveAppServer(request: VpcRemoveAppServerRequest): VpcRemoveAppServerResponse {
  var runtime = new Util.RuntimeOptions{};
  return vpcRemoveAppServerWithOptions(request, runtime);
}

