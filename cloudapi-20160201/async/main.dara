/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'CloudAPI';
  @version = '2016-02-01';
  @endpointRule = 'regional';
  @endpointMap = {
    'cn-qingdao' = 'apigateway.cn-qingdao.aliyuncs.com',
    'cn-beijing' = 'apigateway.cn-beijing.aliyuncs.com',
    'cn-zhangjiakou' = 'apigateway.cn-zhangjiakou.aliyuncs.com',
    'cn-huhehaote' = 'apigateway.cn-huhehaote.aliyuncs.com',
    'cn-wulanchabu' = 'apigateway.cn-wulanchabu.aliyuncs.com',
    'cn-hangzhou' = 'apigateway.cn-hangzhou.aliyuncs.com',
    'cn-shanghai' = 'apigateway.cn-shanghai.aliyuncs.com',
    'cn-shenzhen' = 'apigateway.cn-shenzhen.aliyuncs.com',
    'cn-heyuan' = 'apigateway.cn-heyuan.aliyuncs.com',
    'cn-guangzhou' = 'apigateway.cn-guangzhou.aliyuncs.com',
    'cn-chengdu' = 'apigateway.cn-chengdu.aliyuncs.com',
    'cn-hongkong' = 'apigateway.cn-hongkong.aliyuncs.com',
    'ap-northeast-1' = 'apigateway.ap-northeast-1.aliyuncs.com',
    'ap-southeast-1' = 'apigateway.ap-southeast-1.aliyuncs.com',
    'ap-southeast-2' = 'apigateway.ap-southeast-2.aliyuncs.com',
    'ap-southeast-3' = 'apigateway.ap-southeast-3.aliyuncs.com',
    'ap-southeast-5' = 'apigateway.ap-southeast-5.aliyuncs.com',
    'ap-southeast-6' = 'apigateway.ap-southeast-6.aliyuncs.com',
    'ap-southeast-7' = 'apigateway.ap-southeast-7.aliyuncs.com',
    'us-east-1' = 'apigateway.us-east-1.aliyuncs.com',
    'us-west-1' = 'apigateway.us-west-1.aliyuncs.com',
    'eu-west-1' = 'apigateway.eu-west-1.aliyuncs.com',
    'eu-central-1' = 'apigateway.eu-central-1.aliyuncs.com',
    'ap-south-1' = 'apigateway.ap-south-1.aliyuncs.com',
    'me-east-1' = 'apigateway.me-east-1.aliyuncs.com',
    'me-central-1' = 'apigateway.me-central-1.aliyuncs.com',
    'cn-hangzhou-finance' = 'apigateway.cn-hangzhou-finance.aliyuncs.com',
    'cn-shanghai-finance-1' = 'apigateway.cn-shanghai-finance-1.aliyuncs.com',
    'cn-shenzhen-finance-1' = 'apigateway.cn-shenzhen-finance-1.aliyuncs.com',
    'cn-north-2-gov-1' = 'apigateway.cn-north-2-gov-1.aliyuncs.com',
    'ap-northeast-2-pop' = 'apigateway.aliyuncs.com',
    'cn-beijing-finance-1' = 'apigateway.cn-beijing-finance-1.aliyuncs.com',
    'cn-beijing-finance-pop' = 'apigateway.aliyuncs.com',
    'cn-beijing-gov-1' = 'apigateway.aliyuncs.com',
    'cn-beijing-nu16-b01' = 'apigateway.aliyuncs.com',
    'cn-edge-1' = 'apigateway.aliyuncs.com',
    'cn-fujian' = 'apigateway.aliyuncs.com',
    'cn-haidian-cm12-c01' = 'apigateway.aliyuncs.com',
    'cn-hangzhou-bj-b01' = 'apigateway.aliyuncs.com',
    'cn-hangzhou-internal-prod-1' = 'apigateway.aliyuncs.com',
    'cn-hangzhou-internal-test-1' = 'apigateway.aliyuncs.com',
    'cn-hangzhou-internal-test-2' = 'apigateway.aliyuncs.com',
    'cn-hangzhou-internal-test-3' = 'apigateway.aliyuncs.com',
    'cn-hangzhou-test-306' = 'apigateway.aliyuncs.com',
    'cn-hongkong-finance-pop' = 'apigateway.aliyuncs.com',
    'cn-huhehaote-nebula-1' = 'apigateway.aliyuncs.com',
    'cn-qingdao-nebula' = 'apigateway.aliyuncs.com',
    'cn-shanghai-et15-b01' = 'apigateway.aliyuncs.com',
    'cn-shanghai-et2-b01' = 'apigateway.aliyuncs.com',
    'cn-shanghai-inner' = 'apigateway.cn-shanghai-inner.aliyuncs.com',
    'cn-shanghai-internal-test-1' = 'apigateway.aliyuncs.com',
    'cn-shenzhen-inner' = 'apigateway.aliyuncs.com',
    'cn-shenzhen-st4-d01' = 'apigateway.aliyuncs.com',
    'cn-shenzhen-su18-b01' = 'apigateway.aliyuncs.com',
    'cn-wuhan' = 'apigateway.aliyuncs.com',
    'cn-yushanfang' = 'apigateway.aliyuncs.com',
    'cn-zhangbei' = 'apigateway.aliyuncs.com',
    'cn-zhangbei-na61-b01' = 'apigateway.aliyuncs.com',
    'cn-zhangjiakou-na62-a01' = 'apigateway.aliyuncs.com',
    'cn-zhengzhou-nebula-1' = 'apigateway.aliyuncs.com',
    'eu-west-1-oxs' = 'apigateway.aliyuncs.com',
    'rus-west-1-pop' = 'apigateway.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CheckAoneAppAuditRequest {
  aoneAppName: string(name='AoneAppName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CheckAoneAppAuditResponseBody = {
  checkResult?: boolean(name='CheckResult'),
  requestId?: string(name='RequestId'),
}

model CheckAoneAppAuditResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckAoneAppAuditResponseBody(name='body'),
}

async function checkAoneAppAudit(request: CheckAoneAppAuditRequest): CheckAoneAppAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckAoneAppAudit', 'POST', '/', 'json', false, 'json', request);
}

model CreateApiGroupRequest {
  description: string(name='Description', position='Query'),
  groupName: string(name='GroupName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model CreateApiGroupResponseBody = {
  description?: string(name='Description'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  requestId?: string(name='RequestId'),
  subDomain?: string(name='SubDomain'),
}

model CreateApiGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApiGroupResponseBody(name='body'),
}

async function createApiGroup(request: CreateApiGroupRequest): CreateApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppForBackendRequest {
  aliUid: long(name='AliUid', position='Query'),
  appName: string(name='AppName', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  source?: string(name='Source', position='Query'),
}

model CreateAppForBackendResponseBody = {
  appId?: long(name='AppId'),
  requestId?: string(name='RequestId'),
}

model CreateAppForBackendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppForBackendResponseBody(name='body'),
}

async function createAppForBackend(request: CreateAppForBackendRequest): CreateAppForBackendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppForBackend', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppForInnerRequest {
  aliUid: long(name='AliUid', position='Query'),
  appCode?: string(name='AppCode', position='Query'),
  appKey?: string(name='AppKey', position='Query'),
  appName: string(name='AppName', position='Query'),
  appSecret?: string(name='AppSecret', position='Query'),
  description?: string(name='Description', position='Query'),
  extend?: string(name='Extend', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  source?: string(name='Source', position='Query'),
}

model CreateAppForInnerResponseBody = {
  appId?: long(name='AppId'),
  requestId?: string(name='RequestId'),
}

model CreateAppForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppForInnerResponseBody(name='body'),
}

async function createAppForInner(request: CreateAppForInnerRequest): CreateAppForInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAppForInner', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  accountQuantity: long(name='AccountQuantity', position='Query'),
  alarmQuota?: long(name='AlarmQuota', position='Query'),
  aliUid: long(name='AliUid', position='Query'),
  appId?: long(name='AppId', position='Query'),
  billingType?: string(name='BillingType', position='Query'),
  cloudMarketInstanceId?: string(name='CloudMarketInstanceId', position='Query'),
  expiredOn: string(name='ExpiredOn', position='Query'),
  instanceAttributes?: string(name='InstanceAttributes', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  skuId: string(name='SkuId', position='Query'),
  token: string(name='Token', position='Query'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserWhiteListRequest {
  aoneId?: string(name='AoneId', position='Query'),
  description?: string(name='Description', position='Query'),
  entityId?: string(name='EntityId', position='Query'),
  limitCount?: int32(name='LimitCount', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  type: string(name='Type', position='Query'),
  uid: long(name='Uid', position='Query'),
  value?: string(name='Value', position='Query'),
}

model CreateUserWhiteListResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateUserWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserWhiteListResponseBody(name='body'),
}

async function createUserWhiteList(request: CreateUserWhiteListRequest): CreateUserWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApiGroupRequest {
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteApiGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApiGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApiGroupResponseBody(name='body'),
}

async function deleteApiGroup(request: DeleteApiGroupRequest): DeleteApiGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApiGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppForInnerRequest {
  aliUid: long(name='AliUid', position='Query'),
  appId: long(name='AppId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteAppForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAppForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppForInnerResponseBody(name='body'),
}

async function deleteAppForInner(request: DeleteAppForInnerRequest): DeleteAppForInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteAppForInner', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSecretKeyRequest {
  secretKeyId: string(name='SecretKeyId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DeleteSecretKeyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSecretKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSecretKeyResponseBody(name='body'),
}

async function deleteSecretKey(request: DeleteSecretKeyRequest): DeleteSecretKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecretKey', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserWhiteListByTypeRequest {
  entityId?: string(name='EntityId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  type: string(name='Type', position='Query'),
  uid: long(name='Uid', position='Query'),
}

model DeleteUserWhiteListByTypeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUserWhiteListByTypeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserWhiteListByTypeResponseBody(name='body'),
}

async function deleteUserWhiteListByType(request: DeleteUserWhiteListByTypeRequest): DeleteUserWhiteListByTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserWhiteListByType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiDocRequest {
  apiId: string(name='ApiId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName: string(name='StageName', position='Query'),
}

model DescribeApiDocResponseBody = {
  apiId?: string(name='ApiId'),
  apiName?: string(name='ApiName'),
  bodyFormat?: string(name='BodyFormat'),
  deployedTime?: string(name='DeployedTime'),
  description?: string(name='Description'),
  errorCodeSamples?: {
    errorCodeSample?: [ 
    {
      code?: string(name='Code'),
      description?: string(name='Description'),
      message?: string(name='Message'),
    }
  ](name='ErrorCodeSample')
  }(name='ErrorCodeSamples'),
  failResultSample?: string(name='FailResultSample'),
  groupId?: string(name='GroupId'),
  groupName?: string(name='GroupName'),
  httpMethod?: string(name='HttpMethod'),
  httpProtocol?: string(name='HttpProtocol'),
  path?: string(name='Path'),
  pathParameters?: {
    pathParameter?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
    }
  ](name='PathParameter')
  }(name='PathParameters'),
  postBodyDescription?: string(name='PostBodyDescription'),
  postBodyType?: string(name='PostBodyType'),
  regionId?: string(name='RegionId'),
  requestBody?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestBody'),
  requestHeaders?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestHeaders'),
  requestId?: string(name='RequestId'),
  requestQueries?: {
    requestParam?: [ 
    {
      apiParameterName?: string(name='ApiParameterName'),
      defaultValue?: string(name='DefaultValue'),
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      enumValue?: string(name='EnumValue'),
      jsonScheme?: string(name='JsonScheme'),
      maxLength?: long(name='MaxLength'),
      maxValue?: long(name='MaxValue'),
      minLength?: long(name='MinLength'),
      minValue?: long(name='MinValue'),
      parameterType?: string(name='ParameterType'),
      regularExpression?: string(name='RegularExpression'),
      required?: string(name='Required'),
    }
  ](name='RequestParam')
  }(name='RequestQueries'),
  resultDescriptions?: {
    resultDescription?: [ 
    {
      description?: string(name='Description'),
      hasChild?: boolean(name='HasChild'),
      id?: string(name='Id'),
      key?: string(name='Key'),
      mandatory?: boolean(name='Mandatory'),
      name?: string(name='Name'),
      pid?: string(name='Pid'),
      type?: string(name='Type'),
    }
  ](name='ResultDescription')
  }(name='ResultDescriptions'),
  resultSample?: string(name='ResultSample'),
  resultType?: string(name='ResultType'),
  sdkDemos?: {
    sdkDemo?: [ 
    {
      callDemo?: string(name='CallDemo'),
      ideKey?: string(name='IdeKey'),
    }
  ](name='SdkDemo')
  }(name='SdkDemos'),
  serviceTimeout?: int32(name='ServiceTimeout'),
  stageName?: string(name='StageName'),
}

model DescribeApiDocResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiDocResponseBody(name='body'),
}

async function describeApiDoc(request: DescribeApiDocRequest): DescribeApiDocResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiDoc', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiDocsRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model DescribeApiDocsResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      deployedTime?: string(name='DeployedTime'),
      description?: string(name='Description'),
      groupDescription?: string(name='GroupDescription'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiDocsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiDocsResponseBody(name='body'),
}

async function describeApiDocs(request: DescribeApiDocsRequest): DescribeApiDocsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiDocs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiGroupsRequest {
  groupId?: string(name='GroupId', position='Query'),
  groupName?: string(name='GroupName', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApiGroupsResponseBody = {
  apiGroupAttributes?: {
    apiGroupAttribute?: [ 
    {
      billingStatus?: string(name='BillingStatus'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      illegalStatus?: string(name='IllegalStatus'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      subDomain?: string(name='SubDomain'),
      trafficLimit?: int32(name='TrafficLimit'),
    }
  ](name='ApiGroupAttribute')
  }(name='ApiGroupAttributes'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApiGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiGroupsResponseBody(name='body'),
}

async function describeApiGroups(request: DescribeApiGroupsRequest): DescribeApiGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApiMarketInstanceRequest {
  aliUid: string(name='AliUid', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeApiMarketInstanceResponseBody = {
  instanceAttributes?: string(name='InstanceAttributes'),
  requestId?: string(name='RequestId'),
}

model DescribeApiMarketInstanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApiMarketInstanceResponseBody(name='body'),
}

async function describeApiMarketInstance(request: DescribeApiMarketInstanceRequest): DescribeApiMarketInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApiMarketInstance', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  visibility?: string(name='Visibility', position='Query'),
}

model DescribeApisResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisResponseBody(name='body'),
}

async function describeApis(request: DescribeApisRequest): DescribeApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApisForConsoleRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
  visibility?: string(name='Visibility', position='Query'),
}

model DescribeApisForConsoleResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      createdTime?: string(name='CreatedTime'),
      deployedInfos?: {
        deployedInfo?: [ 
        {
          deployedStatus?: string(name='DeployedStatus'),
          effectiveVersion?: string(name='EffectiveVersion'),
          stageName?: string(name='StageName'),
        }
      ](name='DeployedInfo')
      }(name='DeployedInfos'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApisForConsoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApisForConsoleResponseBody(name='body'),
}

async function describeApisForConsole(request: DescribeApisForConsoleRequest): DescribeApisForConsoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApisForConsole', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppSecuritiesRequest {
  appId: long(name='AppId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAppSecuritiesResponseBody = {
  appSecuritys?: {
    appSecurity?: [ 
    {
      appCode?: string(name='AppCode'),
      appKey?: string(name='AppKey'),
      appSecret?: string(name='AppSecret'),
      createdTime?: string(name='CreatedTime'),
      modifiedTime?: string(name='ModifiedTime'),
    }
  ](name='AppSecurity')
  }(name='AppSecuritys'),
  requestId?: string(name='RequestId'),
}

model DescribeAppSecuritiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppSecuritiesResponseBody(name='body'),
}

async function describeAppSecurities(request: DescribeAppSecuritiesRequest): DescribeAppSecuritiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppSecurities', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppSecurityForInnerRequest {
  aliUid: long(name='AliUid', position='Query'),
  appId: long(name='AppId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAppSecurityForInnerResponseBody = {
  appCode?: string(name='AppCode'),
  appKey?: string(name='AppKey'),
  appSecret?: string(name='AppSecret'),
  createdTime?: string(name='CreatedTime'),
  modifiedTime?: string(name='ModifiedTime'),
  requestId?: string(name='RequestId'),
}

model DescribeAppSecurityForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppSecurityForInnerResponseBody(name='body'),
}

async function describeAppSecurityForInner(request: DescribeAppSecurityForInnerRequest): DescribeAppSecurityForInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAppSecurityForInner', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAppsRequest {
  appId?: long(name='AppId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeAppsResponseBody = {
  apps?: {
    app?: [ 
    {
      appId?: long(name='AppId'),
      appName?: string(name='AppName'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
    }
  ](name='App')
  }(name='Apps'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAppsResponseBody(name='body'),
}

async function describeApps(request: DescribeAppsRequest): DescribeAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAvailableVipsRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
  vip: string(name='Vip', position='Query'),
}

model DescribeAvailableVipsResponseBody = {
  availableVips?: {
    availableVip?: [ string ](name='AvailableVip')
  }(name='AvailableVips'),
}

model DescribeAvailableVipsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeAvailableVipsResponseBody(name='body'),
}

async function describeAvailableVips(request: DescribeAvailableVipsRequest): DescribeAvailableVipsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAvailableVips', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBidByUserIdForInnerRequest {
  aliUid: long(name='AliUid', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeBidByUserIdForInnerResponseBody = {
  bid?: string(name='Bid'),
  requestId?: string(name='RequestId'),
}

model DescribeBidByUserIdForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeBidByUserIdForInnerResponseBody(name='body'),
}

async function describeBidByUserIdForInner(request: DescribeBidByUserIdForInnerRequest): DescribeBidByUserIdForInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBidByUserIdForInner', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeployedApisRequest {
  apiId?: string(name='ApiId', position='Query'),
  apiName?: string(name='ApiName', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
}

model DescribeDeployedApisResponseBody = {
  apiInfos?: {
    apiInfo?: [ 
    {
      apiId?: string(name='ApiId'),
      apiName?: string(name='ApiName'),
      deployedTime?: string(name='DeployedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      regionId?: string(name='RegionId'),
      stageName?: string(name='StageName'),
      visibility?: string(name='Visibility'),
    }
  ](name='ApiInfo')
  }(name='ApiInfos'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDeployedApisResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeDeployedApisResponseBody(name='body'),
}

async function describeDeployedApis(request: DescribeDeployedApisRequest): DescribeDeployedApisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeployedApis', 'POST', '/', 'json', false, 'json', request);
}

model DescribeModelsForInnerRequest {
  aliUid: long(name='AliUid', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  modelId?: string(name='ModelId', position='Query'),
  modelName?: string(name='ModelName', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeModelsForInnerResponseBody = {
  modelDetails?: {
    modelDetail?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      groupId?: string(name='GroupId'),
      modelName?: string(name='ModelName'),
      modelRef?: string(name='ModelRef'),
      modifiedTime?: string(name='ModifiedTime'),
      schema?: string(name='Schema'),
    }
  ](name='ModelDetail')
  }(name='ModelDetails'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeModelsForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeModelsForInnerResponseBody(name='body'),
}

async function describeModelsForInner(request: DescribeModelsForInnerRequest): DescribeModelsForInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeModelsForInner', 'POST', '/', 'json', false, 'json', request);
}

model DescribePurchasedApiGroupsRequest {
  groupIds?: string(name='GroupIds', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribePurchasedApiGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  purchasedApiGroupAttributes?: {
    purchasedApiGroupAttribute?: [ 
    {
      billingType?: string(name='BillingType'),
      createdTime?: string(name='CreatedTime'),
      expireTime?: string(name='ExpireTime'),
      groupDescription?: string(name='GroupDescription'),
      groupId?: string(name='GroupId'),
      groupName?: string(name='GroupName'),
      invokeTimesMax?: long(name='InvokeTimesMax'),
      invokeTimesNow?: long(name='InvokeTimesNow'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
    }
  ](name='PurchasedApiGroupAttribute')
  }(name='PurchasedApiGroupAttributes'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePurchasedApiGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribePurchasedApiGroupsResponseBody(name='body'),
}

async function describePurchasedApiGroups(request: DescribePurchasedApiGroupsRequest): DescribePurchasedApiGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePurchasedApiGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  language?: string(name='Language', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      endPoint?: string(name='EndPoint'),
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecretKeysRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  secretKeyId?: string(name='SecretKeyId', position='Query'),
  secretKeyName?: string(name='SecretKeyName', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeSecretKeysResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  secretKeys?: {
    secretKey?: [ 
    {
      createdTime?: string(name='CreatedTime'),
      modifiedTime?: string(name='ModifiedTime'),
      regionId?: string(name='RegionId'),
      secretKey?: string(name='SecretKey'),
      secretKeyId?: string(name='SecretKeyId'),
      secretKeyName?: string(name='SecretKeyName'),
      secretKeyValue?: string(name='SecretKeyValue'),
    }
  ](name='SecretKey')
  }(name='SecretKeys'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSecretKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSecretKeysResponseBody(name='body'),
}

async function describeSecretKeys(request: DescribeSecretKeysRequest): DescribeSecretKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecretKeys', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSystemParametersRequest {
  securityToken?: string(name='SecurityToken', position='Query'),
}

model DescribeSystemParametersResponseBody = {
  requestId?: string(name='RequestId'),
  systemParameters?: {
    systemParameter?: [ 
    {
      demoValue?: string(name='DemoValue'),
      description?: string(name='Description'),
      paramName?: string(name='ParamName'),
      paramType?: string(name='ParamType'),
    }
  ](name='SystemParameter')
  }(name='SystemParameters'),
}

model DescribeSystemParametersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeSystemParametersResponseBody(name='body'),
}

async function describeSystemParameters(request: DescribeSystemParametersRequest): DescribeSystemParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSystemParameters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTrafficControlsRequest {
  apiUid?: string(name='ApiUid', position='Query'),
  groupId?: string(name='GroupId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  stageName?: string(name='StageName', position='Query'),
  trafficControlId?: string(name='TrafficControlId', position='Query'),
  trafficControlName?: string(name='TrafficControlName', position='Query'),
}

model DescribeTrafficControlsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  trafficControls?: {
    trafficControl?: [ 
    {
      apiDefault?: int32(name='ApiDefault'),
      appDefault?: int32(name='AppDefault'),
      createdTime?: string(name='CreatedTime'),
      description?: string(name='Description'),
      modifiedTime?: string(name='ModifiedTime'),
      specialPolicies?: {
        specialPolicy?: [ 
        {
          specialType?: string(name='SpecialType'),
          specials?: {
            special?: [ 
            {
              specialKey?: string(name='SpecialKey'),
              trafficValue?: int32(name='TrafficValue'),
            }
          ](name='Special')
          }(name='Specials'),
        }
      ](name='SpecialPolicy')
      }(name='SpecialPolicies'),
      trafficControlId?: string(name='TrafficControlId'),
      trafficControlName?: string(name='TrafficControlName'),
      trafficControlUnit?: string(name='TrafficControlUnit'),
      userDefault?: int32(name='UserDefault'),
    }
  ](name='TrafficControl')
  }(name='TrafficControls'),
}

model DescribeTrafficControlsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeTrafficControlsResponseBody(name='body'),
}

async function describeTrafficControls(request: DescribeTrafficControlsRequest): DescribeTrafficControlsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTrafficControls', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserWhiteListsRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  type?: string(name='Type', position='Query'),
  uid?: long(name='Uid', position='Query'),
}

model DescribeUserWhiteListsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  userWhiteListInfos?: {
    userWhiteListInfo?: [ 
    {
      aoneId?: string(name='AoneId'),
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      id?: long(name='Id'),
      modifiedTime?: string(name='ModifiedTime'),
      type?: string(name='Type'),
      uid?: long(name='Uid'),
      value?: string(name='Value'),
    }
  ](name='UserWhiteListInfo')
  }(name='UserWhiteListInfos'),
}

model DescribeUserWhiteListsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeUserWhiteListsResponseBody(name='body'),
}

async function describeUserWhiteLists(request: DescribeUserWhiteListsRequest): DescribeUserWhiteListsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserWhiteLists', 'POST', '/', 'json', false, 'json', request);
}

model ModifyApiMarketInstanceAttributeRequest {
  aliUid: string(name='AliUid', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  instanceAttributes: string(name='InstanceAttributes', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyApiMarketInstanceAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyApiMarketInstanceAttributeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyApiMarketInstanceAttributeResponseBody(name='body'),
}

async function modifyApiMarketInstanceAttribute(request: ModifyApiMarketInstanceAttributeRequest): ModifyApiMarketInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApiMarketInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppRequest {
  appId: long(name='AppId', position='Query'),
  appName?: string(name='AppName', position='Query'),
  description?: string(name='Description', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyAppResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppResponseBody(name='body'),
}

async function modifyApp(request: ModifyAppRequest): ModifyAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApp', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAppForInnerRequest {
  aliUid: long(name='AliUid', position='Query'),
  appId: long(name='AppId', position='Query'),
  appName: string(name='AppName', position='Query'),
  description?: string(name='Description', position='Query'),
  extend?: string(name='Extend', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyAppForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAppForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyAppForInnerResponseBody(name='body'),
}

async function modifyAppForInner(request: ModifyAppForInnerRequest): ModifyAppForInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAppForInner', 'POST', '/', 'json', false, 'json', request);
}

model ModifyGroupAuthAppCodeForBackendRequest {
  aliUid: long(name='AliUid', position='Query'),
  authAppCode: string(name='AuthAppCode', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ModifyGroupAuthAppCodeForBackendResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyGroupAuthAppCodeForBackendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyGroupAuthAppCodeForBackendResponseBody(name='body'),
}

async function modifyGroupAuthAppCodeForBackend(request: ModifyGroupAuthAppCodeForBackendRequest): ModifyGroupAuthAppCodeForBackendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyGroupAuthAppCodeForBackend', 'POST', '/', 'json', false, 'json', request);
}

model ResetAppCodeForInnerRequest {
  aliUid: long(name='AliUid', position='Query'),
  appCode: string(name='AppCode', position='Query'),
  newAppCode?: string(name='NewAppCode', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ResetAppCodeForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetAppCodeForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetAppCodeForInnerResponseBody(name='body'),
}

async function resetAppCodeForInner(request: ResetAppCodeForInnerRequest): ResetAppCodeForInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetAppCodeForInner', 'POST', '/', 'json', false, 'json', request);
}

model ResetSecretByAppKeyForInnerRequest {
  aliUid: long(name='AliUid', position='Query'),
  appKey: string(name='AppKey', position='Query'),
  newAppKey?: string(name='NewAppKey', position='Query'),
  newAppSecret?: string(name='NewAppSecret', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model ResetSecretByAppKeyForInnerResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResetSecretByAppKeyForInnerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetSecretByAppKeyForInnerResponseBody(name='body'),
}

async function resetSecretByAppKeyForInner(request: ResetSecretByAppKeyForInnerRequest): ResetSecretByAppKeyForInnerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetSecretByAppKeyForInner', 'POST', '/', 'json', false, 'json', request);
}

model SetAccessPermissionByGroupForBackendRequest {
  appId: long(name='AppId', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetAccessPermissionByGroupForBackendResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model SetAccessPermissionByGroupForBackendResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetAccessPermissionByGroupForBackendResponseBody(name='body'),
}

async function setAccessPermissionByGroupForBackend(request: SetAccessPermissionByGroupForBackendRequest): SetAccessPermissionByGroupForBackendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAccessPermissionByGroupForBackend', 'POST', '/', 'json', false, 'json', request);
}

model SetPurchasedApiGroupStatusRequest {
  aliUid?: long(name='AliUid', position='Query'),
  billingStatus?: string(name='BillingStatus', position='Query'),
  closeOrder?: boolean(name='CloseOrder', position='Query'),
  groupId: string(name='GroupId', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model SetPurchasedApiGroupStatusResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetPurchasedApiGroupStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetPurchasedApiGroupStatusResponseBody(name='body'),
}

async function setPurchasedApiGroupStatus(request: SetPurchasedApiGroupStatusRequest): SetPurchasedApiGroupStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetPurchasedApiGroupStatus', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesSystemTagsRequest {
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  scope?: string(name='Scope', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
  tag: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag', position='Query'),
  tagOwnerBid?: string(name='TagOwnerBid', position='Query'),
  tagOwnerUid: long(name='TagOwnerUid', position='Query'),
}

model TagResourcesSystemTagsResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesSystemTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesSystemTagsResponseBody(name='body'),
}

async function tagResourcesSystemTags(request: TagResourcesSystemTagsRequest): TagResourcesSystemTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResourcesSystemTags', 'POST', '/', 'json', false, 'json', request);
}

model VipMigrationRequest {
  newVip: string(name='NewVip', position='Query'),
  originalVip: string(name='OriginalVip', position='Query'),
  securityToken?: string(name='SecurityToken', position='Query'),
}

model VipMigrationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

async function vipMigration(request: VipMigrationRequest): VipMigrationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VipMigration', 'POST', '/', 'none', false, 'json', request);
}

