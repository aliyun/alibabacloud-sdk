/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Airec';
  @version = '2018-10-12';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AttachDatasetRequest {
  instanceId: string(name='InstanceId', position='Path'),
  versionId: string(name='VersionId', position='Path'),
}

model AttachDatasetResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    instanceId?: string(name='InstanceId'),
    state?: string(name='State'),
    versionId?: string(name='VersionId'),
  }(name='Result'),
}

model AttachDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: AttachDatasetResponseBody(name='body'),
}

async function attachDataset(request: AttachDatasetRequest): AttachDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AttachDataset', 'POST', '/openapi/instances/{InstanceId}/dataSets/{VersionId}/actions/current', 'json', false, 'json', request);
}

model CreateDiversifyRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model CreateDiversifyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    name?: string(name='Name'),
    parameter?: {
      categoryIndex?: int32(name='CategoryIndex'),
      window?: int32(name='Window'),
    }(name='Parameter'),
  }(name='Result'),
}

model CreateDiversifyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDiversifyResponseBody(name='body'),
}

async function createDiversify(request: CreateDiversifyRequest): CreateDiversifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateDiversify', 'POST', '/openapi/instances/{InstanceId}/diversifies', 'json', false, 'json', request);
}

model CreateInstanceRequest {
}

model CreateInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    instanceId?: string(name='InstanceId'),
  }(name='Result'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateInstance', 'POST', '/openapi/instances', 'json', false, 'json', request);
}

model CreateMixRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model CreateMixResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    name?: string(name='Name'),
    parameter?: {
      settings?: [ 
        {
          name?: string(name='Name'),
          value?: int32(name='Value'),
        }
      ](name='Settings'),
    }(name='Parameter'),
  }(name='Result'),
}

model CreateMixResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMixResponseBody(name='body'),
}

async function createMix(request: CreateMixRequest): CreateMixResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMix', 'POST', '/openapi/instances/{InstanceId}/mixes', 'json', false, 'json', request);
}

model CreateRuleRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model CreateRuleResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    ruleId?: string(name='RuleId'),
    status?: string(name='Status'),
  }(name='Result'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleResponseBody(name='body'),
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRule', 'POST', '/openapi/instances/{InstanceId}/rules', 'json', false, 'json', request);
}

model CreateSceneRequest {
  instanceId: string(name='InstanceId', position='Path'),
  dryRun?: boolean(name='DryRun', position='Query'),
}

model CreateSceneResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    sceneId?: string(name='SceneId'),
    status?: string(name='Status'),
  }(name='Result'),
}

model CreateSceneResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSceneResponseBody(name='body'),
}

async function createScene(request: CreateSceneRequest): CreateSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateScene', 'POST', '/openapi/instances/{InstanceId}/scenes', 'json', false, 'json', request);
}

model DeleteDataSetRequest {
  instanceId: string(name='InstanceId', position='Path'),
  versionId: string(name='VersionId', position='Path'),
}

model DeleteDataSetResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    instanceId?: string(name='InstanceId'),
    state?: string(name='State'),
    versionId?: string(name='VersionId'),
  }(name='Result'),
}

model DeleteDataSetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataSetResponseBody(name='body'),
}

async function deleteDataSet(request: DeleteDataSetRequest): DeleteDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDataSet', 'DELETE', '/openapi/instances/{InstanceId}/dataSets/{VersionId}', 'json', false, 'json', request);
}

model DeleteDiversifyRequest {
  instanceId: string(name='InstanceId', position='Path'),
  name: string(name='Name', position='Path'),
}

model DeleteDiversifyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    name?: string(name='Name'),
    parameter?: {
      categoryIndex?: int32(name='CategoryIndex'),
      window?: int32(name='Window'),
    }(name='Parameter'),
  }(name='Result'),
}

model DeleteDiversifyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDiversifyResponseBody(name='body'),
}

async function deleteDiversify(request: DeleteDiversifyRequest): DeleteDiversifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteDiversify', 'DELETE', '/openapi/instances/{InstanceId}/diversifies/{Name}', 'json', false, 'json', request);
}

model DeleteMixRequest {
  instanceId: string(name='InstanceId', position='Path'),
  name: string(name='Name', position='Path'),
}

model DeleteMixResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    name?: string(name='Name'),
    parameter?: {
      settings?: [ 
        {
          name?: string(name='Name'),
          value?: string(name='Value'),
        }
      ](name='Settings'),
    }(name='Parameter'),
  }(name='Result'),
}

model DeleteMixResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMixResponseBody(name='body'),
}

async function deleteMix(request: DeleteMixRequest): DeleteMixResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMix', 'DELETE', '/openapi/instances/{InstanceId}/mixes/{Name}', 'json', false, 'json', request);
}

model DeleteSceneRequest {
  instanceId: string(name='InstanceId', position='Path'),
  sceneId: string(name='SceneId', position='Path'),
}

model DeleteSceneResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    sceneId?: string(name='SceneId'),
  }(name='Result'),
}

model DeleteSceneResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSceneResponseBody(name='body'),
}

async function deleteScene(request: DeleteSceneRequest): DeleteSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteScene', 'DELETE', '/openapi/instances/{InstanceId}/scenes/{SceneId}', 'json', false, 'json', request);
}

model DescribeDataSetMessageRequest {
  instanceId: string(name='InstanceId', position='Path'),
  versionId: string(name='VersionId', position='Path'),
}

model DescribeDataSetMessageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      errorLevel?: string(name='ErrorLevel'),
      errorType?: string(name='ErrorType'),
      message?: string(name='Message'),
      timestamp?: string(name='Timestamp'),
    }
  ](name='Result'),
}

model DescribeDataSetMessageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataSetMessageResponseBody(name='body'),
}

async function describeDataSetMessage(request: DescribeDataSetMessageRequest): DescribeDataSetMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeDataSetMessage', 'GET', '/openapi/instances/{InstanceId}/dataSets/{VersionId}/messages', 'json', false, 'json', request);
}

model DescribeDataSetReportRequest {
  instanceId: string(name='InstanceId', position='Path'),
  versionId: string(name='VersionId', position='Path'),
}

model DescribeDataSetReportResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    detail?: [ 
      {
        activeItem?: long(name='ActiveItem'),
        bizDate?: long(name='BizDate'),
        click?: long(name='Click'),
        clickUser?: long(name='ClickUser'),
        ctr?: float(name='Ctr'),
        perUvBhv?: float(name='PerUvBhv'),
        perUvClick?: float(name='PerUvClick'),
        pv?: long(name='Pv'),
        uv?: long(name='Uv'),
        uvCtr?: float(name='UvCtr'),
      }
    ](name='Detail'),
    overall?: {
      bhvCount?: int32(name='BhvCount'),
      bhvLegalRate?: float(name='BhvLegalRate'),
      itemCompleteRate?: float(name='ItemCompleteRate'),
      itemItemCount?: int32(name='ItemItemCount'),
      itemLegalRate?: float(name='ItemLegalRate'),
      itemLoginRate?: float(name='ItemLoginRate'),
      itemRepetitiveRate?: float(name='ItemRepetitiveRate'),
      userCompleteRate?: float(name='UserCompleteRate'),
      userLegalRate?: float(name='UserLegalRate'),
      userLoginRate?: float(name='UserLoginRate'),
      userRepetitiveRate?: float(name='UserRepetitiveRate'),
      userUserCount?: int32(name='UserUserCount'),
    }(name='Overall'),
  }(name='Result'),
}

model DescribeDataSetReportResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataSetReportResponseBody(name='body'),
}

async function describeDataSetReport(request: DescribeDataSetReportRequest): DescribeDataSetReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeDataSetReport', 'GET', '/openapi/instances/{InstanceId}/dataSets/{VersionId}/report', 'json', false, 'json', request);
}

model DescribeDiversifyRequest {
  instanceId: string(name='InstanceId', position='Path'),
  name: string(name='Name', position='Path'),
}

model DescribeDiversifyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    name?: string(name='Name'),
    parameter?: {
      categoryIndex?: int32(name='CategoryIndex'),
      window?: int32(name='Window'),
    }(name='Parameter'),
  }(name='Result'),
}

model DescribeDiversifyResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDiversifyResponseBody(name='body'),
}

async function describeDiversify(request: DescribeDiversifyRequest): DescribeDiversifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeDiversify', 'GET', '/openapi/instances/{InstanceId}/diversifies/{Name}', 'json', false, 'json', request);
}

model DescribeExposureSettingsRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model DescribeExposureSettingsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    durationSeconds?: int32(name='DurationSeconds'),
    scenarioBased?: boolean(name='ScenarioBased'),
  }(name='Result'),
}

model DescribeExposureSettingsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExposureSettingsResponseBody(name='body'),
}

async function describeExposureSettings(request: DescribeExposureSettingsRequest): DescribeExposureSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeExposureSettings', 'GET', '/openapi/instances/{InstanceId}/exposure-settings', 'json', false, 'json', request);
}

model DescribeInstanceRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model DescribeInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    chargeType?: string(name='ChargeType'),
    commodityCode?: string(name='CommodityCode'),
    dataSetVersion?: string(name='DataSetVersion'),
    expiredTime?: string(name='ExpiredTime'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    industry?: string(name='Industry'),
    instanceId?: string(name='InstanceId'),
    lockMode?: string(name='LockMode'),
    name?: string(name='Name'),
    regionId?: string(name='RegionId'),
    scene?: string(name='Scene'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Result'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeInstance', 'GET', '/openapi/instances/{InstanceId}', 'json', false, 'json', request);
}

model DescribeMixRequest {
  instanceId: string(name='InstanceId', position='Path'),
  name: string(name='Name', position='Path'),
}

model DescribeMixResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    name?: string(name='Name'),
    parameter?: {
      settings?: [ 
        {
          name?: string(name='Name'),
          value?: int32(name='Value'),
        }
      ](name='Settings'),
    }(name='Parameter'),
  }(name='Result'),
}

model DescribeMixResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMixResponseBody(name='body'),
}

async function describeMix(request: DescribeMixRequest): DescribeMixResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeMix', 'GET', '/openapi/instances/{InstanceId}/mixes/{Name}', 'json', false, 'json', request);
}

model DescribeQuotaRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model DescribeQuotaResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    currentQps?: int32(name='CurrentQps'),
    itemCount?: long(name='ItemCount'),
    itemCountUsed?: long(name='ItemCountUsed'),
    qps?: int32(name='Qps'),
    userCount?: long(name='UserCount'),
    userCountUsed?: long(name='UserCountUsed'),
  }(name='Result'),
}

model DescribeQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeQuotaResponseBody(name='body'),
}

async function describeQuota(request: DescribeQuotaRequest): DescribeQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeQuota', 'GET', '/openapi/instances/{InstanceId}/quota', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
}

model DescribeRegionsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      consoleUrl?: string(name='ConsoleUrl'),
      endpoint?: string(name='Endpoint'),
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
    }
  ](name='Result'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRegions', 'GET', '/openapi/configurations/regions', 'json', false, 'json', request);
}

model DescribeRuleRequest {
  instanceId: string(name='InstanceId', position='Path'),
  ruleId: string(name='RuleId', position='Path'),
  ruleType: string(name='RuleType', position='Query'),
  sceneId: string(name='SceneId', position='Query'),
}

model DescribeRuleResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    ruleId?: string(name='RuleId'),
    status?: string(name='Status'),
  }(name='Result'),
}

model DescribeRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRuleResponseBody(name='body'),
}

async function describeRule(request: DescribeRuleRequest): DescribeRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeRule', 'GET', '/openapi/instances/{InstanceId}/rules/{RuleId}', 'json', false, 'json', request);
}

model DescribeSceneRequest {
  instanceId: string(name='InstanceId', position='Path'),
  sceneId: string(name='SceneId', position='Path'),
}

model DescribeSceneResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    sceneId?: string(name='SceneId'),
    status?: string(name='Status'),
  }(name='Result'),
}

model DescribeSceneResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSceneResponseBody(name='body'),
}

async function describeScene(request: DescribeSceneRequest): DescribeSceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeScene', 'GET', '/openapi/instances/{InstanceId}/scenes/{SceneId}', 'json', false, 'json', request);
}

model DescribeSceneThroughputRequest {
  instanceId: string(name='InstanceId', position='Path'),
  sceneId: string(name='SceneId', position='Path'),
}

model DescribeSceneThroughputResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    pvCount?: long(name='PvCount'),
  }(name='Result'),
}

model DescribeSceneThroughputResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSceneThroughputResponseBody(name='body'),
}

async function describeSceneThroughput(request: DescribeSceneThroughputRequest): DescribeSceneThroughputResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSceneThroughput', 'GET', '/openapi/instances/{InstanceId}/scenes/{SceneId}/throughput', 'json', false, 'json', request);
}

model DescribeSyncReportDetailRequest {
  instanceId: string(name='InstanceId', position='Path'),
  endTime: long(name='EndTime', position='Query'),
  levelType: string(name='LevelType', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  type: string(name='Type', position='Query'),
}

model DescribeSyncReportDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      defaultDisplay?: boolean(name='DefaultDisplay'),
      errorCount?: int32(name='ErrorCount'),
      errorPercent?: float(name='ErrorPercent'),
      historyData?: [ 
        {
          endTime?: long(name='EndTime'),
          errorPercent?: float(name='ErrorPercent'),
          startTime?: long(name='StartTime'),
        }
      ](name='HistoryData'),
      sampleDisplay?: boolean(name='SampleDisplay'),
      type?: string(name='Type'),
    }
  ](name='Result'),
}

model DescribeSyncReportDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSyncReportDetailResponseBody(name='body'),
}

async function describeSyncReportDetail(request: DescribeSyncReportDetailRequest): DescribeSyncReportDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSyncReportDetail', 'GET', '/openapi/instances/{InstanceId}/sync-reports/detail', 'json', false, 'json', request);
}

model DescribeSyncReportOutliersRequest {
  instanceId: string(name='InstanceId', position='Path'),
  endTime: long(name='EndTime', position='Query'),
  key: string(name='Key', position='Query'),
  levelType: string(name='LevelType', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  type: string(name='Type', position='Query'),
}

model DescribeSyncReportOutliersResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='Result'),
}

model DescribeSyncReportOutliersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSyncReportOutliersResponseBody(name='body'),
}

async function describeSyncReportOutliers(request: DescribeSyncReportOutliersRequest): DescribeSyncReportOutliersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeSyncReportOutliers', 'GET', '/openapi/instances/{InstanceId}/sync-reports/outliers', 'json', false, 'json', request);
}

model DescribeUserMetricsRequest {
  instanceId: string(name='InstanceId', position='Path'),
  endTime: long(name='EndTime', position='Query'),
  metricType: string(name='MetricType', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model DescribeUserMetricsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      dataPoints?: [ 
        {
          endTime?: long(name='EndTime'),
          startTime?: long(name='StartTime'),
          val?: float(name='Val'),
        }
      ](name='DataPoints'),
      sceneId?: string(name='SceneId'),
    }
  ](name='Result'),
}

model DescribeUserMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserMetricsResponseBody(name='body'),
}

async function describeUserMetrics(request: DescribeUserMetricsRequest): DescribeUserMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeUserMetrics', 'GET', '/openapi/instances/{InstanceId}/metrics', 'json', false, 'json', request);
}

model DowngradeInstanceRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model DowngradeInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    instanceId?: string(name='InstanceId'),
  }(name='Result'),
}

model DowngradeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DowngradeInstanceResponseBody(name='body'),
}

async function downgradeInstance(request: DowngradeInstanceRequest): DowngradeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DowngradeInstance', 'POST', '/openapi/instances/{InstanceId}/actions/downgrade', 'json', false, 'json', request);
}

model ListDashboardRequest {
  instanceId: string(name='InstanceId', position='Path'),
  endDate: long(name='EndDate', position='Query'),
  page?: int32(name='Page', position='Query'),
  sceneId: string(name='SceneId', position='Query'),
  size?: int32(name='Size', position='Query'),
  startDate: long(name='StartDate', position='Query'),
  traceId: string(name='TraceId', position='Query'),
}

model ListDashboardResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    list?: [ 
      {
        activeItem?: long(name='ActiveItem'),
        bizDate?: long(name='BizDate'),
        click?: long(name='Click'),
        clickUser?: long(name='ClickUser'),
        ctr?: float(name='Ctr'),
        perUvBhv?: float(name='PerUvBhv'),
        perUvClick?: float(name='PerUvClick'),
        pv?: long(name='Pv'),
        sceneId?: string(name='SceneId'),
        traceId?: string(name='TraceId'),
        uv?: long(name='Uv'),
        uvCtr?: float(name='UvCtr'),
      }
    ](name='List'),
    num?: int32(name='Num'),
  }(name='Result'),
}

model ListDashboardResponse = {
  headers: map[string]string(name='headers'),
  body: ListDashboardResponseBody(name='body'),
}

async function listDashboard(request: ListDashboardRequest): ListDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDashboard', 'GET', '/openapi/instances/{InstanceId}/dashboard/statistics', 'json', false, 'json', request);
}

model ListDashboardDetailsRequest {
  instanceId: string(name='InstanceId', position='Path'),
  endTime: long(name='EndTime', position='Query'),
  metricType: string(name='MetricType', position='Query'),
  sceneIds: string(name='SceneIds', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  traceIds: string(name='TraceIds', position='Query'),
}

model ListDashboardDetailsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      metricRes?: {
        detail?: map[string]any(name='Detail'),
        total?: map[string]any(name='Total'),
      }(name='MetricRes'),
      sceneId?: string(name='SceneId'),
      traceId?: string(name='TraceId'),
    }
  ](name='Result'),
}

model ListDashboardDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDashboardDetailsResponseBody(name='body'),
}

async function listDashboardDetails(request: ListDashboardDetailsRequest): ListDashboardDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDashboardDetails', 'GET', '/openapi/instances/{InstanceId}/dashboard/details', 'json', false, 'json', request);
}

model ListDashboardDetailsFlowsRequest {
  instanceId: string(name='InstanceId', position='Path'),
  endTime: long(name='EndTime', position='Query'),
  metricType: string(name='MetricType', position='Query'),
  sceneIds: string(name='SceneIds', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  traceIds: string(name='TraceIds', position='Query'),
}

model ListDashboardDetailsFlowsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    metricData?: [ 
      {
        metricRes?: map[string]any(name='MetricRes'),
        sceneId?: string(name='SceneId'),
        traceId?: string(name='TraceId'),
      }
    ](name='MetricData'),
    metricType?: string(name='MetricType'),
  }(name='Result'),
}

model ListDashboardDetailsFlowsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDashboardDetailsFlowsResponseBody(name='body'),
}

async function listDashboardDetailsFlows(request: ListDashboardDetailsFlowsRequest): ListDashboardDetailsFlowsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDashboardDetailsFlows', 'GET', '/openapi/instances/{InstanceId}/dashboard/details/flows', 'json', false, 'json', request);
}

model ListDashboardMetricsRequest {
  instanceId: string(name='InstanceId', position='Path'),
  endTime: long(name='EndTime', position='Query'),
  metricType: string(name='MetricType', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model ListDashboardMetricsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      detail?: [ 
        {
          endTime?: string(name='EndTime'),
          startTime?: string(name='StartTime'),
          val?: string(name='Val'),
        }
      ](name='Detail'),
      total?: map[string]any(name='Total'),
    }
  ](name='Result'),
}

model ListDashboardMetricsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDashboardMetricsResponseBody(name='body'),
}

async function listDashboardMetrics(request: ListDashboardMetricsRequest): ListDashboardMetricsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDashboardMetrics', 'GET', '/openapi/instances/{InstanceId}/dashboard/metrics', 'json', false, 'json', request);
}

model ListDashboardMetricsFlowsRequest {
  instanceId: string(name='InstanceId', position='Path'),
  endTime: long(name='EndTime', position='Query'),
  metricType: string(name='MetricType', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model ListDashboardMetricsFlowsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      metricData?: map[string]any(name='MetricData'),
      metricType?: string(name='MetricType'),
    }
  ](name='Result'),
}

model ListDashboardMetricsFlowsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDashboardMetricsFlowsResponseBody(name='body'),
}

async function listDashboardMetricsFlows(request: ListDashboardMetricsFlowsRequest): ListDashboardMetricsFlowsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDashboardMetricsFlows', 'GET', '/openapi/instances/{InstanceId}/dashboard/metrics/flows', 'json', false, 'json', request);
}

model ListDashboardParametersRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model ListDashboardParametersResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    sceneId?: [ string ](name='SceneId'),
    traceId?: [ string ](name='TraceId'),
  }(name='Result'),
}

model ListDashboardParametersResponse = {
  headers: map[string]string(name='headers'),
  body: ListDashboardParametersResponseBody(name='body'),
}

async function listDashboardParameters(request: ListDashboardParametersRequest): ListDashboardParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDashboardParameters', 'GET', '/openapi/instances/{InstanceId}/dashboard/parameters', 'json', false, 'json', request);
}

model ListDashboardUidRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model ListDashboardUidResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    num?: int32(name='Num'),
    uid?: [ string ](name='Uid'),
  }(name='Result'),
}

model ListDashboardUidResponse = {
  headers: map[string]string(name='headers'),
  body: ListDashboardUidResponseBody(name='body'),
}

async function listDashboardUid(request: ListDashboardUidRequest): ListDashboardUidResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDashboardUid', 'GET', '/openapi/instances/{InstanceId}/dashboard/uid', 'json', false, 'json', request);
}

model ListDataSetRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model ListDataSetResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      gmtCreate?: long(name='GmtCreate'),
      gmtModified?: long(name='GmtModified'),
      instanceId?: string(name='InstanceId'),
      state?: string(name='State'),
      versionId?: string(name='VersionId'),
    }
  ](name='Result'),
}

model ListDataSetResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataSetResponseBody(name='body'),
}

async function listDataSet(request: ListDataSetRequest): ListDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSet', 'GET', '/openapi/instances/{InstanceId}/dataSets', 'json', false, 'json', request);
}

model ListDataSourceRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model ListDataSourceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      meta?: {
        accessKeyId?: string(name='AccessKeyId'),
        bucketName?: string(name='BucketName'),
        partition?: string(name='Partition'),
        path?: string(name='Path'),
        projectName?: string(name='ProjectName'),
        tableName?: string(name='TableName'),
        timestamp?: long(name='Timestamp'),
        type?: string(name='Type'),
      }(name='Meta'),
      tableName?: string(name='TableName'),
    }
  ](name='Result'),
}

model ListDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: ListDataSourceResponseBody(name='body'),
}

async function listDataSource(request: ListDataSourceRequest): ListDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDataSource', 'GET', '/openapi/instances/{InstanceId}/dataSources', 'json', false, 'json', request);
}

model ListDiversifyRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model ListDiversifyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      name?: string(name='Name'),
      parameter?: {
        categoryIndex?: int32(name='CategoryIndex'),
        window?: int32(name='Window'),
      }(name='Parameter'),
    }
  ](name='Result'),
}

model ListDiversifyResponse = {
  headers: map[string]string(name='headers'),
  body: ListDiversifyResponseBody(name='body'),
}

async function listDiversify(request: ListDiversifyRequest): ListDiversifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDiversify', 'GET', '/openapi/instances/{InstanceId}/diversifies', 'json', false, 'json', request);
}

model ListInstanceRequest {
  expiredTime?: string(name='ExpiredTime', position='Query'),
  name?: string(name='Name', position='Query'),
  status?: string(name='Status', position='Query'),
  page?: int32(name='page', position='Query'),
  size?: int32(name='size', position='Query'),
}

model ListInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      chargeType?: string(name='ChargeType'),
      commodityCode?: string(name='CommodityCode'),
      dataSetVersion?: string(name='DataSetVersion'),
      expiredTime?: string(name='ExpiredTime'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      industry?: string(name='Industry'),
      instanceId?: string(name='InstanceId'),
      lockMode?: string(name='LockMode'),
      name?: string(name='Name'),
      regionId?: string(name='RegionId'),
      scene?: string(name='Scene'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='Result'),
}

model ListInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceResponseBody(name='body'),
}

async function listInstance(request: ListInstanceRequest): ListInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstance', 'GET', '/openapi/instances', 'json', false, 'json', request);
}

model ListInstanceTaskRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model ListInstanceTaskResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      name?: string(name='Name'),
      subProgressInfos?: [ 
        {
          detail?: string(name='Detail'),
          finishedNum?: int32(name='FinishedNum'),
          progress?: int32(name='Progress'),
          totalNum?: int32(name='TotalNum'),
          type?: string(name='Type'),
        }
      ](name='SubProgressInfos'),
      totalProgress?: int32(name='TotalProgress'),
    }
  ](name='Result'),
}

model ListInstanceTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListInstanceTaskResponseBody(name='body'),
}

async function listInstanceTask(request: ListInstanceTaskRequest): ListInstanceTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceTask', 'GET', '/openapi/instances/{InstanceId}/tasks', 'json', false, 'json', request);
}

model ListItemsRequest {
  instanceId: string(name='InstanceId', position='Path'),
  page?: int32(name='Page', minimum=1, maximum=2147483647, position='Query'),
  size?: int32(name='Size', minimum=1, maximum=1000, position='Query'),
}

model ListItemsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    detail?: [ 
      {
        author?: string(name='Author'),
        brandId?: string(name='BrandId'),
        categoryPath?: string(name='CategoryPath'),
        channel?: string(name='Channel'),
        duration?: string(name='Duration'),
        expireTime?: string(name='ExpireTime'),
        itemId?: string(name='ItemId'),
        itemType?: string(name='ItemType'),
        pubTime?: string(name='PubTime'),
        shopId?: string(name='ShopId'),
        status?: string(name='Status'),
        title?: string(name='Title'),
      }
    ](name='Detail'),
    total?: {
      instanceRecommendItem?: long(name='InstanceRecommendItem'),
      queryCount?: long(name='QueryCount'),
      sceneRecommendItem?: long(name='SceneRecommendItem'),
      sceneWeightItem?: long(name='SceneWeightItem'),
      totalCount?: long(name='TotalCount'),
      weightItem?: long(name='WeightItem'),
    }(name='Total'),
  }(name='Result'),
}

model ListItemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListItemsResponseBody(name='body'),
}

async function listItems(request: ListItemsRequest): ListItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListItems', 'POST', '/openapi/instances/{InstanceId}/items/actions/list', 'json', false, 'json', request);
}

model ListLogsRequest {
  instanceId: string(name='InstanceId', position='Path'),
  endTime: int32(name='EndTime', minimum=1565193600, maximum=2147483647, position='Query'),
  page?: int32(name='Page', minimum=1, maximum=2147483647, position='Query'),
  queryParams?: string(name='QueryParams', position='Query'),
  size?: int32(name='Size', minimum=1, maximum=1000, position='Query'),
  startTime: int32(name='StartTime', minimum=1565193600, maximum=2147483647, position='Query'),
}

model ListLogsResponseBody = {
  headers?: {
    xTotalCount?: int32(name='X-Total-Count'),
  }(name='Headers'),
  requestId?: string(name='RequestId'),
  result?: [  map[string]any ](name='Result'),
}

model ListLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListLogsResponseBody(name='body'),
}

async function listLogs(request: ListLogsRequest): ListLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLogs', 'GET', '/openapi/instances/{InstanceId}/logs', 'json', false, 'json', request);
}

model ListMixRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model ListMixResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      name?: string(name='Name'),
      parameter?: {
        settings?: [ 
          {
            name?: string(name='Name'),
            value?: int32(name='Value'),
          }
        ](name='Settings'),
      }(name='Parameter'),
    }
  ](name='Result'),
}

model ListMixResponse = {
  headers: map[string]string(name='headers'),
  body: ListMixResponseBody(name='body'),
}

async function listMix(request: ListMixRequest): ListMixResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMix', 'GET', '/openapi/instances/{InstanceId}/mixes', 'json', false, 'json', request);
}

model ListRuleConditionsRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model ListRuleConditionsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      selectType?: string(name='SelectType'),
      selectValue?: string(name='SelectValue'),
      selectionOperation?: string(name='SelectionOperation'),
    }
  ](name='Result'),
}

model ListRuleConditionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRuleConditionsResponseBody(name='body'),
}

async function listRuleConditions(request: ListRuleConditionsRequest): ListRuleConditionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRuleConditions', 'GET', '/openapi/instances/{InstanceId}/rule-conditions', 'json', false, 'json', request);
}

model ListRuleTasksRequest {
  instanceId: string(name='InstanceId', position='Path'),
  sceneId: string(name='SceneId', position='Query'),
}

model ListRuleTasksResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    finishRate?: int32(name='FinishRate'),
    finishTime?: int32(name='FinishTime'),
  }(name='Result'),
}

model ListRuleTasksResponse = {
  headers: map[string]string(name='headers'),
  body: ListRuleTasksResponseBody(name='body'),
}

async function listRuleTasks(request: ListRuleTasksRequest): ListRuleTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRuleTasks', 'GET', '/openapi/instances/{InstanceId}/rule-tasks', 'json', false, 'json', request);
}

model ListRulesRequest {
  instanceId: string(name='InstanceId', position='Path'),
  endTime?: long(name='EndTime', position='Query'),
  ruleType: string(name='RuleType', position='Query'),
  sceneId: string(name='SceneId', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
  status?: string(name='Status', position='Query'),
  page?: int32(name='page', position='Query'),
  size?: int32(name='size', position='Query'),
}

model ListRulesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      ruleId?: string(name='RuleId'),
      status?: string(name='Status'),
    }
  ](name='Result'),
}

model ListRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ListRulesResponseBody(name='body'),
}

async function listRules(request: ListRulesRequest): ListRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRules', 'GET', '/openapi/instances/{InstanceId}/rules', 'json', false, 'json', request);
}

model ListSceneItemsRequest {
  instanceId: string(name='InstanceId', position='Path'),
  sceneId: string(name='SceneId', position='Path'),
  operationRuleId?: string(name='OperationRuleId', position='Query'),
  page?: int32(name='Page', position='Query'),
  previewType?: string(name='PreviewType', position='Query'),
  queryCount?: int32(name='QueryCount', position='Query'),
  selectionRuleId?: string(name='SelectionRuleId', position='Query'),
  size?: int32(name='Size', position='Query'),
}

model ListSceneItemsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    detail?: [ 
      {
        author?: string(name='Author'),
        brandId?: string(name='BrandId'),
        categoryPath?: string(name='CategoryPath'),
        channel?: string(name='Channel'),
        duration?: string(name='Duration'),
        expireTime?: string(name='ExpireTime'),
        itemId?: string(name='ItemId'),
        itemType?: string(name='ItemType'),
        pubTime?: string(name='PubTime'),
        shopId?: string(name='ShopId'),
        status?: string(name='Status'),
        title?: string(name='Title'),
      }
    ](name='Detail'),
    total?: {
      instanceRecommendItem?: long(name='InstanceRecommendItem'),
      sceneRecommendItem?: long(name='SceneRecommendItem'),
      sceneWeightItem?: long(name='SceneWeightItem'),
      totalCount?: long(name='TotalCount'),
      weightItem?: long(name='WeightItem'),
    }(name='Total'),
  }(name='Result'),
}

model ListSceneItemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSceneItemsResponseBody(name='body'),
}

async function listSceneItems(request: ListSceneItemsRequest): ListSceneItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSceneItems', 'GET', '/openapi/instances/{InstanceId}/scenes/{SceneId}/items', 'json', false, 'json', request);
}

model ListScenesRequest {
  instanceId: string(name='InstanceId', position='Path'),
  status?: string(name='Status', position='Query'),
}

model ListScenesResponseBody = {
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      sceneId?: string(name='SceneId'),
      status?: string(name='Status'),
    }
  ](name='Result'),
}

model ListScenesResponse = {
  headers: map[string]string(name='headers'),
  body: ListScenesResponseBody(name='body'),
}

async function listScenes(request: ListScenesRequest): ListScenesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListScenes', 'GET', '/openapi/instances/{InstanceId}/scenes', 'json', false, 'json', request);
}

model ListUmengAppkeysRequest {
}

model ListUmengAppkeysResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      appkey?: string(name='Appkey'),
      name?: string(name='Name'),
      platform?: string(name='Platform'),
    }
  ](name='Result'),
}

model ListUmengAppkeysResponse = {
  headers: map[string]string(name='headers'),
  body: ListUmengAppkeysResponseBody(name='body'),
}

async function listUmengAppkeys(request: ListUmengAppkeysRequest): ListUmengAppkeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListUmengAppkeys', 'GET', '/openapi/umeng/appkeys', 'json', false, 'json', request);
}

model ModifyDataSourceRequest {
  instanceId: string(name='InstanceId', position='Path'),
  tableName?: string(name='TableName', position='Path'),
}

model ModifyDataSourceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    meta?: {
      accessKeyId?: string(name='AccessKeyId'),
      bucketName?: string(name='BucketName'),
      partition?: string(name='Partition'),
      path?: string(name='Path'),
      projectName?: string(name='ProjectName'),
      tableName?: string(name='TableName'),
      timestamp?: long(name='Timestamp'),
      type?: string(name='Type'),
    }(name='Meta'),
    tableName?: string(name='TableName'),
  }(name='Result'),
}

model ModifyDataSourceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDataSourceResponseBody(name='body'),
}

async function modifyDataSource(request: ModifyDataSourceRequest): ModifyDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyDataSource', 'PUT', '/openapi/instances/{InstanceId}/dataSources/{TableName}', 'json', false, 'json', request);
}

model ModifyDiversifyRequest {
  instanceId: string(name='InstanceId', position='Path'),
  name: string(name='Name', position='Path'),
}

model ModifyDiversifyResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    name?: string(name='Name'),
    parameter?: {
      categoryIndex?: int32(name='CategoryIndex'),
      window?: int32(name='Window'),
    }(name='Parameter'),
  }(name='Result'),
}

model ModifyDiversifyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDiversifyResponseBody(name='body'),
}

async function modifyDiversify(request: ModifyDiversifyRequest): ModifyDiversifyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyDiversify', 'PUT', '/openapi/instances/{InstanceId}/diversifies/{Name}', 'json', false, 'json', request);
}

model ModifyExposureSettingsRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model ModifyExposureSettingsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    durationSeconds?: int32(name='DurationSeconds'),
    scenarioBased?: boolean(name='ScenarioBased'),
  }(name='Result'),
}

model ModifyExposureSettingsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyExposureSettingsResponseBody(name='body'),
}

async function modifyExposureSettings(request: ModifyExposureSettingsRequest): ModifyExposureSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyExposureSettings', 'PUT', '/openapi/instances/{InstanceId}/exposure-settings', 'json', false, 'json', request);
}

model ModifyInstanceRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model ModifyInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    chargeType?: string(name='ChargeType'),
    commodityCode?: string(name='CommodityCode'),
    dataSetVersion?: string(name='DataSetVersion'),
    expiredTime?: string(name='ExpiredTime'),
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    industry?: string(name='Industry'),
    instanceId?: string(name='InstanceId'),
    lockMode?: string(name='LockMode'),
    name?: string(name='Name'),
    regionId?: string(name='RegionId'),
    scene?: string(name='Scene'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='Result'),
}

model ModifyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceResponseBody(name='body'),
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyInstance', 'PUT', '/openapi/instances/{InstanceId}', 'json', false, 'json', request);
}

model ModifyItemsRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model ModifyItemsResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model ModifyItemsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyItemsResponseBody(name='body'),
}

async function modifyItems(request: ModifyItemsRequest): ModifyItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyItems', 'POST', '/openapi/instances/{InstanceId}/items', 'json', false, 'json', request);
}

model ModifyMixRequest {
  instanceId: string(name='InstanceId', position='Path'),
  name: string(name='Name', position='Path'),
}

model ModifyMixResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    name?: string(name='Name'),
    parameter?: {
      settings?: [ 
        {
          name?: string(name='Name'),
          value?: int32(name='Value'),
        }
      ](name='Settings'),
    }(name='Parameter'),
  }(name='Result'),
}

model ModifyMixResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMixResponseBody(name='body'),
}

async function modifyMix(request: ModifyMixRequest): ModifyMixResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyMix', 'PUT', '/openapi/instances/{InstanceId}/mixes/{Name}', 'json', false, 'json', request);
}

model ModifyRuleRequest {
  instanceId: string(name='InstanceId', position='Path'),
  ruleId: string(name='RuleId', position='Path'),
}

model ModifyRuleResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    ruleId?: string(name='RuleId'),
    ruleMeta?: map[string]any(name='RuleMeta'),
    status?: string(name='Status'),
  }(name='Result'),
}

model ModifyRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRuleResponseBody(name='body'),
}

async function modifyRule(request: ModifyRuleRequest): ModifyRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyRule', 'PUT', '/openapi/instances/{InstanceId}/rules/{RuleId}', 'json', false, 'json', request);
}

model ModifySceneRequest {
  instanceId: string(name='InstanceId', position='Path'),
  sceneId: string(name='SceneId', position='Path'),
}

model ModifySceneResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: string(name='GmtCreate'),
    gmtModified?: string(name='GmtModified'),
    sceneId?: string(name='SceneId'),
    status?: string(name='Status'),
  }(name='Result'),
}

model ModifySceneResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySceneResponseBody(name='body'),
}

async function modifyScene(request: ModifySceneRequest): ModifySceneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ModifyScene', 'PUT', '/openapi/instances/{InstanceId}/scenes/{SceneId}', 'json', false, 'json', request);
}

model PublishRuleRequest {
  instanceId: string(name='InstanceId', position='Path'),
  ruleId: string(name='RuleId', position='Path'),
  ruleType: string(name='RuleType', position='Query'),
  sceneId: string(name='SceneId', position='Query'),
}

model PublishRuleResponseBody = {
  requestId?: string(name='RequestId'),
  result?: {
    ruleId?: string(name='RuleId'),
  }(name='Result'),
}

model PublishRuleResponse = {
  headers: map[string]string(name='headers'),
  body: PublishRuleResponseBody(name='body'),
}

async function publishRule(request: PublishRuleRequest): PublishRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishRule', 'PUT', '/openapi/instances/{InstanceId}/rules/{RuleId}/actions/publish', 'json', false, 'json', request);
}

model PushDocumentRequest {
  instanceId: string(name='InstanceId', position='Path'),
  tableName: string(name='TableName', position='Path'),
}

model PushDocumentResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model PushDocumentResponse = {
  headers: map[string]string(name='headers'),
  body: PushDocumentResponseBody(name='body'),
}

async function pushDocument(request: PushDocumentRequest): PushDocumentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushDocument', 'POST', '/openapi/instances/{InstanceId}/tables/{TableName}/actions/bulk', 'json', false, 'json', request);
}

model PushInterventionRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model PushInterventionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model PushInterventionResponse = {
  headers: map[string]string(name='headers'),
  body: PushInterventionResponseBody(name='body'),
}

async function pushIntervention(request: PushInterventionRequest): PushInterventionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushIntervention', 'POST', '/openapi/instances/{InstanceId}/actions/intervene', 'json', false, 'json', request);
}

model QueryDataMessageRequest {
  instanceId: string(name='InstanceId', position='Path'),
  table: string(name='Table', position='Path'),
  bhvType?: string(name='BhvType', position='Query'),
  cmdType?: string(name='CmdType', position='Query'),
  endTime: long(name='EndTime', position='Query'),
  itemId?: string(name='ItemId', position='Query'),
  itemType?: string(name='ItemType', position='Query'),
  messageSource?: string(name='MessageSource', position='Query'),
  page?: int32(name='Page', position='Query'),
  sceneId?: string(name='SceneId', position='Query'),
  size?: int32(name='Size', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  traceId?: string(name='TraceId', position='Query'),
  userId?: string(name='UserId', position='Query'),
  userType?: string(name='UserType', position='Query'),
}

model QueryDataMessageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='Result'),
}

model QueryDataMessageResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDataMessageResponseBody(name='body'),
}

async function queryDataMessage(request: QueryDataMessageRequest): QueryDataMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryDataMessage', 'GET', '/openapi/instances/{InstanceId}/tables/{Table}/data-message', 'json', false, 'json', request);
}

model QueryDataMessageStatisticsRequest {
  instanceId: string(name='InstanceId', position='Path'),
  table: string(name='Table', position='Path'),
  bhvType?: string(name='BhvType', position='Query'),
  cmdType?: string(name='CmdType', position='Query'),
  endTime: long(name='EndTime', minimum=946656000, maximum=4102416000, position='Query'),
  itemId?: string(name='ItemId', position='Query'),
  itemType?: string(name='ItemType', position='Query'),
  messageSource?: string(name='MessageSource', position='Query'),
  sceneId?: string(name='SceneId', position='Query'),
  startTime: long(name='StartTime', minimum=946656000, maximum=4102416000, position='Query'),
  traceId?: string(name='TraceId', position='Query'),
  userId?: string(name='UserId', position='Query'),
  userType?: string(name='UserType', position='Query'),
}

model QueryDataMessageStatisticsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='Result'),
}

model QueryDataMessageStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDataMessageStatisticsResponseBody(name='body'),
}

async function queryDataMessageStatistics(request: QueryDataMessageStatisticsRequest): QueryDataMessageStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryDataMessageStatistics', 'GET', '/openapi/instances/{InstanceId}/tables/{Table}/data-message-statistics', 'json', false, 'json', request);
}

model QueryExceptionHistoryRequest {
  instanceId: string(name='InstanceId', position='Path'),
  endTime: long(name='EndTime', position='Query'),
  startTime: long(name='StartTime', position='Query'),
  type: string(name='Type', position='Query'),
}

model QueryExceptionHistoryResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='Result'),
}

model QueryExceptionHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: QueryExceptionHistoryResponseBody(name='body'),
}

async function queryExceptionHistory(request: QueryExceptionHistoryRequest): QueryExceptionHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryExceptionHistory', 'GET', '/openapi/instances/{InstanceId}/sync-reports/exception-history', 'json', false, 'json', request);
}

model QueryRawDataRequest {
  instanceId: string(name='InstanceId', position='Path'),
  table: string(name='Table', position='Path'),
  itemId?: string(name='ItemId', position='Query'),
  itemType?: string(name='ItemType', position='Query'),
  userId?: string(name='UserId', position='Query'),
  userType?: string(name='UserType', position='Query'),
}

model QueryRawDataResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='Result'),
}

model QueryRawDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRawDataResponseBody(name='body'),
}

async function queryRawData(request: QueryRawDataRequest): QueryRawDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryRawData', 'GET', '/openapi/instances/{InstanceId}/tables/{Table}/raw-data', 'json', false, 'json', request);
}

model QuerySingleAggregationReportRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model QuerySingleAggregationReportResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='Result'),
}

model QuerySingleAggregationReportResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySingleAggregationReportResponseBody(name='body'),
}

async function querySingleAggregationReport(request: QuerySingleAggregationReportRequest): QuerySingleAggregationReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QuerySingleAggregationReport', 'GET', '/openapi/instances/{InstanceId}/sync-reports/single-aggregation-report', 'json', false, 'json', request);
}

model QuerySingleReportRequest {
  instanceId: string(name='InstanceId', position='Path'),
  reportType?: string(name='ReportType', position='Query'),
}

model QuerySingleReportResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='Result'),
}

model QuerySingleReportResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySingleReportResponseBody(name='body'),
}

async function querySingleReport(request: QuerySingleReportRequest): QuerySingleReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QuerySingleReport', 'GET', '/openapi/instances/{InstanceId}/sync-reports/single-report', 'json', false, 'json', request);
}

model QuerySyncReportAggregationRequest {
  instanceId: string(name='InstanceId', position='Path'),
  endTime: long(name='EndTime', position='Query'),
  startTime: long(name='StartTime', position='Query'),
}

model QuerySyncReportAggregationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: map[string]any(name='Result'),
}

model QuerySyncReportAggregationResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySyncReportAggregationResponseBody(name='body'),
}

async function querySyncReportAggregation(request: QuerySyncReportAggregationRequest): QuerySyncReportAggregationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QuerySyncReportAggregation', 'GET', '/openapi/instances/{InstanceId}/sync-reports/aggregation', 'json', false, 'json', request);
}

model RecommendRequest {
  instanceId: string(name='InstanceId', position='Path'),
  imei?: string(name='Imei', position='Query'),
  ip?: string(name='Ip', position='Query'),
  items?: string(name='Items', position='Query'),
  regionId?: string(name='RegionId', position='Header'),
  returnCount: int32(name='ReturnCount', position='Query'),
  sceneId?: string(name='SceneId', position='Query'),
  userId?: string(name='UserId', position='Query'),
}

model RecommendResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: [ 
    {
      itemId?: string(name='ItemId'),
      itemType?: string(name='ItemType'),
      matchInfo?: string(name='MatchInfo'),
      position?: int32(name='Position'),
      traceId?: string(name='TraceId'),
      traceInfo?: string(name='TraceInfo'),
      weight?: float(name='Weight'),
    }
  ](name='Result'),
}

model RecommendResponse = {
  headers: map[string]string(name='headers'),
  body: RecommendResponseBody(name='body'),
}

async function recommend(request: RecommendRequest): RecommendResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Recommend', 'GET', '/openapi/instances/{InstanceId}/actions/recommend', 'json', false, 'json', request);
}

model RunInstanceRequest {
  instanceId?: string(name='InstanceId', position='Path'),
}

model RunInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model RunInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RunInstanceResponseBody(name='body'),
}

async function runInstance(request: RunInstanceRequest): RunInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RunInstance', 'POST', '/openapi/instances/{InstanceId}/actions/import', 'json', false, 'json', request);
}

model StopDataSetRequest {
  instanceId: string(name='InstanceId', position='Path'),
  versionId: string(name='VersionId', position='Path'),
}

model StopDataSetResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    gmtCreate?: long(name='GmtCreate'),
    gmtModified?: long(name='GmtModified'),
    instanceId?: string(name='InstanceId'),
    state?: string(name='State'),
    versionId?: string(name='VersionId'),
  }(name='Result'),
}

model StopDataSetResponse = {
  headers: map[string]string(name='headers'),
  body: StopDataSetResponseBody(name='body'),
}

async function stopDataSet(request: StopDataSetRequest): StopDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopDataSet', 'POST', '/openapi/instances/{InstanceId}/dataSets/{VersionId}/actions/stop', 'json', false, 'json', request);
}

model UpgradeInstanceRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model UpgradeInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    instanceId?: string(name='InstanceId'),
  }(name='Result'),
}

model UpgradeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeInstanceResponseBody(name='body'),
}

async function upgradeInstance(request: UpgradeInstanceRequest): UpgradeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpgradeInstance', 'POST', '/openapi/instances/{InstanceId}/actions/upgrade', 'json', false, 'json', request);
}

model ValidateInstanceRequest {
  instanceId: string(name='InstanceId', position='Path'),
}

model ValidateInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model ValidateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateInstanceResponseBody(name='body'),
}

async function validateInstance(request: ValidateInstanceRequest): ValidateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ValidateInstance', 'POST', '/openapi/instances/{InstanceId}/actions/validate', 'json', false, 'json', request);
}

