/**
 *
 */
import Util;
import GatewayClient;
import OpenApi;
import OpenApiUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  var gatewayClient = new GatewayClient();
  @spi = gatewayClient;
  @endpointRule = '';
  }

model AddressDetail {
  accessId?: string(name='AccessId', description='This parameter is required.', example='test_access_id'),
  accessSecret?: string(name='AccessSecret', description='This parameter is required.', example='test_secret_key'),
  addressType?: string(name='AddressType', description='This parameter is required.', example='ossinv'),
  agentList?: string(name='AgentList'),
  bucket?: string(name='Bucket', description='This parameter is required.', example='test_bucket'),
  domain?: string(name='Domain', description='This parameter is required.', example='test_domain'),
  invAccessId?: string(name='InvAccessId', example='test_inv_access_id'),
  invAccessSecret?: string(name='InvAccessSecret', example='test_inv_secret_key'),
  invBucket?: string(name='InvBucket', example='test_inv_bucket'),
  invDomain?: string(name='InvDomain', example='test_inv_domain'),
  invLocation?: string(name='InvLocation', example='oss'),
  invPath?: string(name='InvPath', example='manifest.json'),
  invRegionId?: string(name='InvRegionId', example='test_inv_region_id'),
  invRole?: string(name='InvRole', example='test_inv_role'),
  prefix?: string(name='Prefix', example='test_prefix'),
  regionId?: string(name='RegionId', example='test_region_id'),
  role?: string(name='Role', example='test_role'),
}

model Audit {
  logMode?: string(name='LogMode', example='off'),
}

model CreateAddressInfo {
  addressDetail?: AddressDetail(name='AddressDetail', description='This parameter is required.'),
  name?: string(name='Name', description='This parameter is required.', example='test_name'),
  tags?: string(name='Tags', example='K1:V1,K2:V2'),
}

model CreateAgentInfo {
  agentEndpoint?: string(name='AgentEndpoint', description='This parameter is required.', example='vpc'),
  deployMethod?: string(name='DeployMethod', description='This parameter is required.', example='default'),
  name?: string(name='Name', description='This parameter is required.', example='test_name'),
  tags?: string(name='Tags', example='K1:V1,K2:V2'),
  tunnelId?: string(name='TunnelId', description='This parameter is required.', example='test_tunnel_id'),
}

model CreateJobInfo {
  audit?: Audit(name='Audit'),
  convertSymlinkTarget?: boolean(name='ConvertSymlinkTarget', example='false'),
  createReport?: boolean(name='CreateReport'),
  destAddress?: string(name='DestAddress', description='This parameter is required.', example='test_dest_address'),
  enableMultiVersioning?: boolean(name='EnableMultiVersioning'),
  filterRule?: FilterRule(name='FilterRule'),
  importQos?: ImportQos(name='ImportQos'),
  name?: string(name='Name', description='This parameter is required.', example='test_name'),
  overwriteMode?: string(name='OverwriteMode', description='This parameter is required.', example='always'),
  parentVersion?: string(name='ParentVersion'),
  scheduleRule?: ScheduleRule(name='ScheduleRule'),
  srcAddress?: string(name='SrcAddress', description='This parameter is required.', example='test_src_address'),
  tags?: string(name='Tags', example='K1:V1,K2:V2'),
  transferMode?: string(name='TransferMode', description='This parameter is required.', example='all'),
}

model CreateReportInfo {
  jobName?: string(name='JobName', example='test_job_name'),
  runtimeId?: int32(name='RuntimeId', example='1'),
  version?: string(name='Version', example='test_job_id'),
}

model CreateTunnelInfo {
  tags?: string(name='Tags', example='K1:V1,K2:V2'),
  tunnelQos?: TunnelQos(name='TunnelQos'),
}

model FileTypeFilters {
  excludeDir?: boolean(name='ExcludeDir', example='fasle'),
  excludeSymlink?: boolean(name='ExcludeSymlink', example='fasle'),
}

model FilterRule {
  fileTypeFilters?: FileTypeFilters(name='FileTypeFilters'),
  keyFilters?: KeyFilters(name='KeyFilters'),
  lastModifiedFilters?: LastModifiedFilters(name='LastModifiedFilters'),
}

model GetAddressResp {
  addressDetail?: AddressDetail(name='AddressDetail'),
  createTime?: string(name='CreateTime', example='2024-05-01 12:00:00'),
  modifyTime?: string(name='ModifyTime', example='2024-05-01 12:00:00'),
  name?: string(name='Name', example='test_name'),
  owner?: string(name='Owner', example='test_owner'),
  status?: string(name='Status', example='avaliable'),
  tags?: string(name='Tags', example='K1:V1,K2:V2'),
  verifyResult?: VerifyResp(name='VerifyResult'),
  verifyTime?: string(name='VerifyTime', example='2024-05-01 12:00:00'),
  version?: string(name='Version', example='test_id'),
}

model GetAgentResp {
  activationKey?: string(name='ActivationKey'),
  agentEndpoint?: string(name='AgentEndpoint', example='vpc'),
  createTime?: string(name='CreateTime', example='2024-05-01 12:00:00'),
  deployMethod?: string(name='DeployMethod', example='default'),
  modifyTime?: string(name='ModifyTime', example='2024-05-01 12:00:00'),
  name?: string(name='Name', example='test_name'),
  owner?: string(name='Owner', example='test_owner'),
  tags?: string(name='Tags', example='K1:V1,K2:V2'),
  tunnelId?: string(name='TunnelId', example='test_tunnel_id'),
  version?: string(name='Version', example='test_agent_id'),
}

model GetAgentStatusResp {
  status?: string(name='Status', example='OK'),
}

model GetJobResp {
  audit?: Audit(name='Audit'),
  convertSymlinkTarget?: boolean(name='ConvertSymlinkTarget', example='false'),
  createReport?: boolean(name='CreateReport', example='false'),
  createTime?: string(name='CreateTime', example='2024-05-01 12:00:00'),
  destAddress?: string(name='DestAddress', example='test_dest_address'),
  enableMultiVersioning?: boolean(name='EnableMultiVersioning', example='false'),
  filterRule?: FilterRule(name='FilterRule'),
  importQos?: ImportQos(name='ImportQos'),
  modifyTime?: string(name='ModifyTime', example='2024-05-01 12:00:00'),
  name?: string(name='Name', example='test_name'),
  overwriteMode?: string(name='OverwriteMode', example='always'),
  owner?: string(name='Owner'),
  parentName?: string(name='ParentName'),
  parentVersion?: string(name='ParentVersion'),
  scheduleRule?: ScheduleRule(name='ScheduleRule'),
  srcAddress?: string(name='SrcAddress', example='test_src_address'),
  status?: string(name='Status', example='IMPORT_JOB_DOING'),
  tags?: string(name='Tags', example='K1:V1,K2:V2'),
  transferMode?: string(name='TransferMode', example='all'),
  version?: string(name='Version', example='test_id'),
}

model GetJobResultResp {
  addressType?: string(name='AddressType', example='ossinv'),
  copiedObjectCount?: long(name='CopiedObjectCount', example='800'),
  copiedObjectSize?: long(name='CopiedObjectSize', example='800'),
  failedObjectCount?: long(name='FailedObjectCount', example='200'),
  invAccessId?: string(name='InvAccessId', example='test_access_id'),
  invAccessSecret?: string(name='InvAccessSecret', example='test_secret_key'),
  invBucket?: string(name='InvBucket', example='test_sys_bucket'),
  invDomain?: string(name='InvDomain', example='test_domain'),
  invLocation?: string(name='InvLocation', example='oss'),
  invPath?: string(name='InvPath', example='mainfest.json'),
  invRegionId?: string(name='InvRegionId', example='test_region_id'),
  readyRetry?: string(name='ReadyRetry', example='Ready'),
  totalObjectCount?: long(name='TotalObjectCount', example='1000'),
  totalObjectSize?: long(name='TotalObjectSize', example='1000'),
  version?: string(name='Version', example='test_job_id'),
}

model GetReportResp {
  copiedCount?: long(name='CopiedCount', example='800'),
  errorMessage?: string(name='ErrorMessage'),
  failedCount?: long(name='FailedCount', example='100'),
  failedListPrefix?: string(name='FailedListPrefix', example='test_failed_prefix/'),
  jobCreateTime?: string(name='JobCreateTime', example='2024-05-01 12:00:00'),
  jobEndTime?: string(name='JobEndTime', example='2024-05-01 12:00:00'),
  jobExecuteTime?: string(name='JobExecuteTime', example='1000'),
  reportCreateTime?: string(name='ReportCreateTime', example='2024-05-01 12:00:00'),
  reportEndTime?: string(name='ReportEndTime', example='2024-05-01 12:00:00'),
  skippedCount?: long(name='SkippedCount', example='100'),
  skippedListPrefix?: string(name='SkippedListPrefix', example='test_skipped_prefix/'),
  status?: string(name='Status', example='Running'),
  totalCount?: long(name='TotalCount', example='1000'),
  totalListPrefix?: string(name='TotalListPrefix', example='test_total_prefix/'),
}

model GetTunnelResp {
  createTime?: string(name='CreateTime', example='2024-05-01 12:00:00'),
  modifyTime?: string(name='ModifyTime', example='2024-05-01 12:00:00'),
  owner?: string(name='Owner', example='test_owner'),
  tags?: string(name='Tags', example='K1:V1,K2:V2'),
  tunnelId?: string(name='TunnelId', example='test_tunnel_id'),
  tunnelQos?: TunnelQos(name='TunnelQos'),
}

model ImportQos {
  maxBandWidth?: long(name='MaxBandWidth', example='1073741824'),
  maxImportTaskQps?: long(name='MaxImportTaskQps', example='1000'),
}

model JobHistory {
  commitId?: string(name='CommitId', example='2'),
  copiedCount?: long(name='CopiedCount', example='900'),
  copiedSize?: long(name='CopiedSize', example='1000'),
  endTime?: string(name='EndTime', example='2024-05-01 12:00:00'),
  failedCount?: long(name='FailedCount', example='100'),
  jobVersion?: string(name='JobVersion', example='test_id'),
  listStatus?: string(name='ListStatus', example='Listing'),
  message?: string(name='Message'),
  name?: string(name='Name', example='test_name'),
  operator?: string(name='Operator', example='user'),
  runtimeId?: string(name='RuntimeId', example='1'),
  runtimeState?: string(name='RuntimeState', example='Normal'),
  startTime?: string(name='StartTime', example='2024-05-01 12:00:00'),
  status?: string(name='Status', example='IMPORT_JOB_DOING'),
  totalCount?: long(name='TotalCount', example='1000'),
  totalSize?: long(name='TotalSize', example='1000'),
}

model KeyFilterItem {
  regex?: [ string ](name='Regex'),
}

model KeyFilters {
  excludes?: KeyFilterItem(name='Excludes'),
  includes?: KeyFilterItem(name='Includes'),
}

model LastModifiedFilters {
  excludes?: LastModifyFilterItem(name='Excludes'),
  includes?: LastModifyFilterItem(name='Includes'),
}

model LastModifyFilterItem {
  timeFilter?: [
    TimeFilter
  ](name='TimeFilter'),
}

model ListAddressResp {
  importAddress?: [
    GetAddressResp
  ](name='ImportAddress'),
  nextMarker?: string(name='NextMarker', example='test_marker'),
  truncated?: boolean(name='Truncated', example='true'),
}

model ListAgentResp {
  importAgent?: [
    GetAgentResp
  ](name='ImportAgent'),
  nextMarker?: string(name='NextMarker', example='test_next_marker'),
  truncated?: boolean(name='Truncated', example='true'),
}

model ListJobHistoryResp {
  jobHistory?: [
    JobHistory
  ](name='JobHistory'),
  nextMarker?: string(name='NextMarker', example='test_next_marker'),
  truncated?: string(name='Truncated', example='true'),
}

model ListJobInfo {
  importJob?: [
    CreateJobInfo
  ](name='ImportJob'),
  nextMarker?: string(name='NextMarker', example='test_next_marker'),
  truncated?: boolean(name='Truncated', example='true'),
}

model ListJobResp {
  importJob?: [
    GetJobResp
  ](name='ImportJob'),
  nextMarker?: string(name='NextMarker'),
  truncated?: boolean(name='Truncated'),
}

model ListTunnelResp {
  importTunnel?: [
    GetTunnelResp
  ](name='ImportTunnel'),
  nextMarker?: string(name='NextMarker'),
  truncated?: boolean(name='Truncated'),
}

model ScheduleRule {
  maxScheduleCount?: long(name='MaxScheduleCount'),
  startCronExpression?: string(name='StartCronExpression'),
  suspendCronExpression?: string(name='SuspendCronExpression'),
}

model TimeFilter {
  endTime?: string(name='EndTime'),
  startTime?: string(name='StartTime'),
}

model TunnelQos {
  maxBandwidth?: long(name='MaxBandwidth', example='1073741824'),
  maxQps?: int32(name='MaxQps', example='100'),
}

model UpdateAddressInfo {
  agentList?: string(name='AgentList'),
}

model UpdateJobInfo {
  importQos?: ImportQos(name='ImportQos'),
  status?: string(name='Status', example='IMPORT_JOB_LAUNCHING'),
}

model UpdateTunnelInfo {
  tags?: string(name='Tags'),
  tunnelQos?: TunnelQos(name='TunnelQos'),
}

model VerifyAddressResp {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  status?: string(name='Status', example='avaliable'),
  verifyTime?: string(name='VerifyTime', example='2024-05-01 12:00:00'),
}

model VerifyResp {
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  httpCode?: string(name='HttpCode', example='200'),
}

model CreateAddressRequest {
  importAddress?: CreateAddressInfo(name='ImportAddress'),
}

model CreateAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建数据地址。
 *
 * @param request CreateAddressRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAddressResponse
 */
async function createAddressWithOptions(userid: string, request: CreateAddressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAddressResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var body : map[string]any = {};
  if (!Util.isUnset(request.importAddress)) {
    body['ImportAddress'] = request.importAddress;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAddress',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/address`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',
  };
  return execute(params, req, runtime);
}

/**
 * @summary 创建数据地址。
 *
 * @param request CreateAddressRequest
 * @return CreateAddressResponse
 */
async function createAddress(userid: string, request: CreateAddressRequest): CreateAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createAddressWithOptions(userid, request, headers, runtime);
}

model CreateAgentRequest {
  importAgent?: CreateAgentInfo(name='ImportAgent'),
}

model CreateAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建代理。
 *
 * @param request CreateAgentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAgentResponse
 */
async function createAgentWithOptions(userid: string, request: CreateAgentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAgentResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var body : map[string]any = {};
  if (!Util.isUnset(request.importAgent)) {
    body['ImportAgent'] = request.importAgent;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAgent',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/agent`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',
  };
  return execute(params, req, runtime);
}

/**
 * @summary 创建代理。
 *
 * @param request CreateAgentRequest
 * @return CreateAgentResponse
 */
async function createAgent(userid: string, request: CreateAgentRequest): CreateAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createAgentWithOptions(userid, request, headers, runtime);
}

model CreateJobRequest {
  importJob?: CreateJobInfo(name='ImportJob', description='This parameter is required.'),
}

model CreateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建迁移任务。
 *
 * @param request CreateJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateJobResponse
 */
async function createJobWithOptions(userid: string, request: CreateJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateJobResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var body : map[string]any = {};
  if (!Util.isUnset(request.importJob)) {
    body['ImportJob'] = request.importJob;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateJob',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/job`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',
  };
  return execute(params, req, runtime);
}

/**
 * @summary 创建迁移任务。
 *
 * @param request CreateJobRequest
 * @return CreateJobResponse
 */
async function createJob(userid: string, request: CreateJobRequest): CreateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createJobWithOptions(userid, request, headers, runtime);
}

model CreateReportRequest {
  createReport?: CreateReportInfo(name='CreateReport'),
}

model CreateReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建迁移报告。
 *
 * @param request CreateReportRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateReportResponse
 */
async function createReportWithOptions(userid: string, request: CreateReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateReportResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var body : map[string]any = {};
  if (!Util.isUnset(request.createReport)) {
    body['CreateReport'] = request.createReport;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateReport',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/report`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',
  };
  return execute(params, req, runtime);
}

/**
 * @summary 创建迁移报告。
 *
 * @param request CreateReportRequest
 * @return CreateReportResponse
 */
async function createReport(userid: string, request: CreateReportRequest): CreateReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createReportWithOptions(userid, request, headers, runtime);
}

model CreateTunnelRequest {
  importTunnel?: CreateTunnelInfo(name='ImportTunnel'),
}

model CreateTunnelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 创建通道。
 *
 * @param request CreateTunnelRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTunnelResponse
 */
async function createTunnelWithOptions(userid: string, request: CreateTunnelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTunnelResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var body : map[string]any = {};
  if (!Util.isUnset(request.importTunnel)) {
    body['ImportTunnel'] = request.importTunnel;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTunnel',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/tunnel`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',
  };
  return execute(params, req, runtime);
}

/**
 * @summary 创建通道。
 *
 * @param request CreateTunnelRequest
 * @return CreateTunnelResponse
 */
async function createTunnel(userid: string, request: CreateTunnelRequest): CreateTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTunnelWithOptions(userid, request, headers, runtime);
}

model DeleteAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 删除数据地址。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAddressResponse
 */
async function deleteAddressWithOptions(userid: string, addressName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAddressResponse {
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteAddress',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/address/${addressName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',
  };
  return execute(params, req, runtime);
}

/**
 * @summary 删除数据地址。
 *
 * @return DeleteAddressResponse
 */
async function deleteAddress(userid: string, addressName: string): DeleteAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteAddressWithOptions(userid, addressName, headers, runtime);
}

model DeleteAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 删除代理。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAgentResponse
 */
async function deleteAgentWithOptions(userid: string, agentName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAgentResponse {
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteAgent',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/agent/${agentName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',
  };
  return execute(params, req, runtime);
}

/**
 * @summary 删除代理。
 *
 * @return DeleteAgentResponse
 */
async function deleteAgent(userid: string, agentName: string): DeleteAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteAgentWithOptions(userid, agentName, headers, runtime);
}

model DeleteJobRequest {
  forceDelete?: boolean(name='forceDelete', example='true'),
}

model DeleteJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 删除迁移任务。
 *
 * @param request DeleteJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteJobResponse
 */
async function deleteJobWithOptions(userid: string, jobName: string, request: DeleteJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteJobResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var query : map[string]any = {};
  if (!Util.isUnset(request.forceDelete)) {
    query['forceDelete'] = request.forceDelete;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteJob',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/job/${jobName}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',
  };
  return execute(params, req, runtime);
}

/**
 * @summary 删除迁移任务。
 *
 * @param request DeleteJobRequest
 * @return DeleteJobResponse
 */
async function deleteJob(userid: string, jobName: string, request: DeleteJobRequest): DeleteJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteJobWithOptions(userid, jobName, request, headers, runtime);
}

model DeleteTunnelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 删除通道。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteTunnelResponse
 */
async function deleteTunnelWithOptions(userid: string, tunnelId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTunnelResponse {
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteTunnel',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/tunnel/${tunnelId}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',
  };
  return execute(params, req, runtime);
}

/**
 * @summary 删除通道。
 *
 * @return DeleteTunnelResponse
 */
async function deleteTunnel(userid: string, tunnelId: string): DeleteTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTunnelWithOptions(userid, tunnelId, headers, runtime);
}

model GetAddressResponseBody = {
  importAddress?: GetAddressResp(name='ImportAddress', description='222'),
}

model GetAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAddressResponseBody(name='body'),
}

/**
 * @summary 获取数据地址信息。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAddressResponse
 */
async function getAddressWithOptions(userid: string, addressName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetAddressResponse {
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetAddress',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/address/${addressName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',  };
  return execute(params, req, runtime);
}

/**
 * @summary 获取数据地址信息。
 *
 * @return GetAddressResponse
 */
async function getAddress(userid: string, addressName: string): GetAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAddressWithOptions(userid, addressName, headers, runtime);
}

model GetAgentResponseBody = {
  importAgent?: GetAgentResp(name='ImportAgent', description='2'),
}

model GetAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAgentResponseBody(name='body'),
}

/**
 * @summary 获取代理信息。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAgentResponse
 */
async function getAgentWithOptions(userid: string, agentName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetAgentResponse {
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetAgent',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/agent/${agentName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',  };
  return execute(params, req, runtime);
}

/**
 * @summary 获取代理信息。
 *
 * @return GetAgentResponse
 */
async function getAgent(userid: string, agentName: string): GetAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAgentWithOptions(userid, agentName, headers, runtime);
}

model GetAgentStatusResponseBody = {
  importAgentStatus?: GetAgentStatusResp(name='ImportAgentStatus', description='2'),
}

model GetAgentStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAgentStatusResponseBody(name='body'),
}

/**
 * @summary 获取代理状态。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAgentStatusResponse
 */
async function getAgentStatusWithOptions(userid: string, agentName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetAgentStatusResponse {
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetAgentStatus',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/agent/${agentName}?status`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',  };
  return execute(params, req, runtime);
}

/**
 * @summary 获取代理状态。
 *
 * @return GetAgentStatusResponse
 */
async function getAgentStatus(userid: string, agentName: string): GetAgentStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAgentStatusWithOptions(userid, agentName, headers, runtime);
}

model GetJobRequest {
  byVersion?: string(name='byVersion', example='false'),
}

model GetJobResponseBody = {
  importJob?: GetJobResp(name='ImportJob'),
}

model GetJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobResponseBody(name='body'),
}

/**
 * @summary 获取迁移任务信息。
 *
 * @param request GetJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetJobResponse
 */
async function getJobWithOptions(userid: string, jobName: string, request: GetJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var query : map[string]any = {};
  if (!Util.isUnset(request.byVersion)) {
    query['byVersion'] = request.byVersion;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJob',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/job/${jobName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',  };
  return execute(params, req, runtime);
}

/**
 * @summary 获取迁移任务信息。
 *
 * @param request GetJobRequest
 * @return GetJobResponse
 */
async function getJob(userid: string, jobName: string, request: GetJobRequest): GetJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobWithOptions(userid, jobName, request, headers, runtime);
}

model GetJobResultRequest {
  runtimeId?: int32(name='runtimeId', description='This parameter is required.', example='2'),
}

model GetJobResultResponseBody = {
  importJobResult?: GetJobResultResp(name='ImportJobResult', description='1'),
}

model GetJobResultResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetJobResultResponseBody(name='body'),
}

/**
 * @summary 获取迁移任务失败文件清单信息。
 *
 * @param request GetJobResultRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetJobResultResponse
 */
async function getJobResultWithOptions(userid: string, jobName: string, request: GetJobResultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetJobResultResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var query : map[string]any = {};
  if (!Util.isUnset(request.runtimeId)) {
    query['runtimeId'] = request.runtimeId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetJobResult',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/job/${jobName}?jobResult`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',  };
  return execute(params, req, runtime);
}

/**
 * @summary 获取迁移任务失败文件清单信息。
 *
 * @param request GetJobResultRequest
 * @return GetJobResultResponse
 */
async function getJobResult(userid: string, jobName: string, request: GetJobResultRequest): GetJobResultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getJobResultWithOptions(userid, jobName, request, headers, runtime);
}

model GetReportRequest {
  runtimeId?: int32(name='runtimeId', example='1'),
  version?: string(name='version', description='This parameter is required.', example='test_job_id'),
}

model GetReportResponseBody = {
  getReportResponse?: GetReportResp(name='GetReportResponse'),
}

model GetReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetReportResponseBody(name='body'),
}

/**
 * @summary 获取迁移报告。
 *
 * @param request GetReportRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetReportResponse
 */
async function getReportWithOptions(userid: string, request: GetReportRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetReportResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var query : map[string]any = {};
  if (!Util.isUnset(request.runtimeId)) {
    query['runtimeId'] = request.runtimeId;
  }
  if (!Util.isUnset(request.version)) {
    query['version'] = request.version;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetReport',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/report`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',  };
  return execute(params, req, runtime);
}

/**
 * @summary 获取迁移报告。
 *
 * @param request GetReportRequest
 * @return GetReportResponse
 */
async function getReport(userid: string, request: GetReportRequest): GetReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getReportWithOptions(userid, request, headers, runtime);
}

model GetTunnelResponseBody = {
  importTunnel?: GetTunnelResp(name='ImportTunnel'),
}

model GetTunnelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTunnelResponseBody(name='body'),
}

/**
 * @summary 获取通道信息。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTunnelResponse
 */
async function getTunnelWithOptions(userid: string, tunnelId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTunnelResponse {
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTunnel',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/tunnel/${tunnelId}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',  };
  return execute(params, req, runtime);
}

/**
 * @summary 获取通道信息。
 *
 * @return GetTunnelResponse
 */
async function getTunnel(userid: string, tunnelId: string): GetTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTunnelWithOptions(userid, tunnelId, headers, runtime);
}

model ListAddressRequest {
  count?: int32(name='count', example='100'),
  marker?: string(name='marker', example='test_marker'),
}

model ListAddressResponseBody = {
  importAddressList?: ListAddressResp(name='ImportAddressList'),
}

model ListAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAddressResponseBody(name='body'),
}

/**
 * @summary 列举数据地址。
 *
 * @param request ListAddressRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAddressResponse
 */
async function listAddressWithOptions(userid: string, request: ListAddressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAddressResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var query : map[string]any = {};
  if (!Util.isUnset(request.count)) {
    query['count'] = request.count;
  }
  if (!Util.isUnset(request.marker)) {
    query['marker'] = request.marker;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAddress',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/addresslist`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',  };
  return execute(params, req, runtime);
}

/**
 * @summary 列举数据地址。
 *
 * @param request ListAddressRequest
 * @return ListAddressResponse
 */
async function listAddress(userid: string, request: ListAddressRequest): ListAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAddressWithOptions(userid, request, headers, runtime);
}

model ListAgentRequest {
  count?: int32(name='count', example='100'),
  marker?: string(name='marker', example='test_agent'),
}

model ListAgentResponseBody = {
  importAgentList?: ListAgentResp(name='ImportAgentList'),
}

model ListAgentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAgentResponseBody(name='body'),
}

/**
 * @summary 列举代理。
 *
 * @param request ListAgentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAgentResponse
 */
async function listAgentWithOptions(userid: string, request: ListAgentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAgentResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var query : map[string]any = {};
  if (!Util.isUnset(request.count)) {
    query['count'] = request.count;
  }
  if (!Util.isUnset(request.marker)) {
    query['marker'] = request.marker;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAgent',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/agentlist`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',  };
  return execute(params, req, runtime);
}

/**
 * @summary 列举代理。
 *
 * @param request ListAgentRequest
 * @return ListAgentResponse
 */
async function listAgent(userid: string, request: ListAgentRequest): ListAgentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAgentWithOptions(userid, request, headers, runtime);
}

model ListJobRequest {
  all?: boolean(name='all', example='true'),
  count?: int32(name='count', example='1000'),
  marker?: string(name='marker', example='test_marker'),
  parentName?: string(name='parentName', example='test_parent_job_name'),
}

model ListJobResponseBody = {
  importJobList?: ListJobResp(name='ImportJobList'),
}

model ListJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobResponseBody(name='body'),
}

/**
 * @summary 列举迁移任务。
 *
 * @param request ListJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListJobResponse
 */
async function listJobWithOptions(userid: string, request: ListJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListJobResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var query : map[string]any = {};
  if (!Util.isUnset(request.all)) {
    query['all'] = request.all;
  }
  if (!Util.isUnset(request.count)) {
    query['count'] = request.count;
  }
  if (!Util.isUnset(request.marker)) {
    query['marker'] = request.marker;
  }
  if (!Util.isUnset(request.parentName)) {
    query['parentName'] = request.parentName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListJob',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/joblist`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',  };
  return execute(params, req, runtime);
}

/**
 * @summary 列举迁移任务。
 *
 * @param request ListJobRequest
 * @return ListJobResponse
 */
async function listJob(userid: string, request: ListJobRequest): ListJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listJobWithOptions(userid, request, headers, runtime);
}

model ListJobHistoryRequest {
  count?: int32(name='count', example='100'),
  marker?: string(name='marker'),
  runtimeId?: int32(name='runtimeId', example='1'),
}

model ListJobHistoryResponseBody = {
  jobHistoryList?: ListJobHistoryResp(name='JobHistoryList'),
}

model ListJobHistoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListJobHistoryResponseBody(name='body'),
}

/**
 * @summary 列举迁移任务运行历史。
 *
 * @param request ListJobHistoryRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListJobHistoryResponse
 */
async function listJobHistoryWithOptions(userid: string, jobName: string, request: ListJobHistoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListJobHistoryResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var query : map[string]any = {};
  if (!Util.isUnset(request.count)) {
    query['count'] = request.count;
  }
  if (!Util.isUnset(request.marker)) {
    query['marker'] = request.marker;
  }
  if (!Util.isUnset(request.runtimeId)) {
    query['runtimeId'] = request.runtimeId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListJobHistory',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/jobhistory/${jobName}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',  };
  return execute(params, req, runtime);
}

/**
 * @summary 列举迁移任务运行历史。
 *
 * @param request ListJobHistoryRequest
 * @return ListJobHistoryResponse
 */
async function listJobHistory(userid: string, jobName: string, request: ListJobHistoryRequest): ListJobHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listJobHistoryWithOptions(userid, jobName, request, headers, runtime);
}

model ListTunnelRequest {
  count?: int32(name='count', example='2'),
  marker?: string(name='marker', example='1'),
}

model ListTunnelResponseBody = {
  importTunnelList?: ListTunnelResp(name='ImportTunnelList', description='2'),
}

model ListTunnelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTunnelResponseBody(name='body'),
}

/**
 * @summary 列举通道。
 *
 * @param request ListTunnelRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTunnelResponse
 */
async function listTunnelWithOptions(userid: string, request: ListTunnelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTunnelResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var query : map[string]any = {};
  if (!Util.isUnset(request.count)) {
    query['count'] = request.count;
  }
  if (!Util.isUnset(request.marker)) {
    query['marker'] = request.marker;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTunnel',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/tunnellist`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',  };
  return execute(params, req, runtime);
}

/**
 * @summary 列举通道。
 *
 * @param request ListTunnelRequest
 * @return ListTunnelResponse
 */
async function listTunnel(userid: string, request: ListTunnelRequest): ListTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTunnelWithOptions(userid, request, headers, runtime);
}

model UpdateAddressRequest {
  importAddress?: UpdateAddressInfo(name='ImportAddress'),
}

model UpdateAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 更新数据地址。
 *
 * @param request UpdateAddressRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAddressResponse
 */
async function updateAddressWithOptions(userid: string, addressName: string, request: UpdateAddressRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAddressResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var body : map[string]any = {};
  if (!Util.isUnset(request.importAddress)) {
    body['ImportAddress'] = request.importAddress;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAddress',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/address/${addressName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',
  };
  return execute(params, req, runtime);
}

/**
 * @summary 更新数据地址。
 *
 * @param request UpdateAddressRequest
 * @return UpdateAddressResponse
 */
async function updateAddress(userid: string, addressName: string, request: UpdateAddressRequest): UpdateAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateAddressWithOptions(userid, addressName, request, headers, runtime);
}

model UpdateJobRequest {
  importJob?: UpdateJobInfo(name='ImportJob'),
}

model UpdateJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 更新迁移任务。
 *
 * @param request UpdateJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateJobResponse
 */
async function updateJobWithOptions(userid: string, jobName: string, request: UpdateJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateJobResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var body : map[string]any = {};
  if (!Util.isUnset(request.importJob)) {
    body['ImportJob'] = request.importJob;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateJob',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/job/${jobName}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',
  };
  return execute(params, req, runtime);
}

/**
 * @summary 更新迁移任务。
 *
 * @param request UpdateJobRequest
 * @return UpdateJobResponse
 */
async function updateJob(userid: string, jobName: string, request: UpdateJobRequest): UpdateJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateJobWithOptions(userid, jobName, request, headers, runtime);
}

model UpdateTunnelRequest {
  importTunnel?: UpdateTunnelInfo(name='ImportTunnel'),
}

model UpdateTunnelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 更新通道。
 *
 * @param request UpdateTunnelRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateTunnelResponse
 */
async function updateTunnelWithOptions(userid: string, tunnelId: string, request: UpdateTunnelRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateTunnelResponse {
  Util.validateModel(request);
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var body : map[string]any = {};
  if (!Util.isUnset(request.importTunnel)) {
    body['ImportTunnel'] = request.importTunnel;
  }

  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTunnel',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/tunnel/${tunnelId}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',
  };
  return execute(params, req, runtime);
}

/**
 * @summary 更新通道。
 *
 * @param request UpdateTunnelRequest
 * @return UpdateTunnelResponse
 */
async function updateTunnel(userid: string, tunnelId: string, request: UpdateTunnelRequest): UpdateTunnelResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateTunnelWithOptions(userid, tunnelId, request, headers, runtime);
}

model VerifyAddressResponseBody = {
  verifyAddressResponse?: VerifyAddressResp(name='VerifyAddressResponse', description='1'),
}

model VerifyAddressResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VerifyAddressResponseBody(name='body'),
}

/**
 * @summary 校验数据地址是否可用。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return VerifyAddressResponse
 */
async function verifyAddressWithOptions(userid: string, addressName: string, headers: map[string]string, runtime: Util.RuntimeOptions): VerifyAddressResponse {
  var hostMap : map[string]string = {};
  hostMap['userid'] = userid;
  var req = new OpenApi.OpenApiRequest{ 
    hostMap = hostMap,
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'VerifyAddress',
    version = '2024-06-26',
    protocol = 'HTTPS',
    pathname = `/address/${addressName}?verify`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'xml',
    bodyType = 'xml',  };
  return execute(params, req, runtime);
}

/**
 * @summary 校验数据地址是否可用。
 *
 * @return VerifyAddressResponse
 */
async function verifyAddress(userid: string, addressName: string): VerifyAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return verifyAddressWithOptions(userid, addressName, headers, runtime);
}

