/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('chatbot', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Children {
  areaCode?: string(name='AreaCode', description='地区代号'),
  categoryId?: long(name='CategoryId', description='分类Id'),
  childrens?: [
    Children
  ](name='Childrens', description='子元素'),
  name?: string(name='Name', description='名称'),
  parentCategoryId?: long(name='ParentCategoryId', description='父分类Id'),
}

model IntentCreateDTO {
  intentId?: long(name='IntentId', description='IntentId'),
  name?: string(name='Name', description='Name'),
  ruleCheck?: [
    RuleMtopDTO
  ](name='RuleCheck', description='RuleCheck'),
  slot?: [
    SlotrecordMtopDTO
  ](name='Slot'),
  userSay?: [
    UsersayMtopDTO
  ](name='UserSay', description='UserSay'),
}

model PaasButtonDTO {
  name?: string(name='Name', description='Name'),
  text?: string(name='Text', description='Text'),
  type?: string(name='Type', description='Type'),
}

model PaasButtonListDTO {
  button?: [
    PaasButtonDTO
  ](name='Button', description='Button'),
  intro?: string(name='Intro', description='Intro'),
}

model PaasConditionEntryDTO {
  id?: string(name='Id', description='Id'),
  name?: string(name='Name', description='Name'),
  term?: string(name='Term', description='Term'),
  type?: string(name='Type', description='Type'),
  value?: string(name='Value', description='Value'),
}

model PaasConditionSetDTO {
  conditionEntries?: [
    PaasConditionEntryDTO
  ](name='ConditionEntries', description='ConditionEntries'),
}

model PaasEdgeDTO {
  id?: string(name='Id', description='Id'),
  label?: string(name='Label', description='Label'),
  source?: string(name='Source', description='Source'),
  target?: string(name='Target', description='Target'),
}

model PaasEntryDTO {
  pluginFieldDataEntry?: PaasEntryPluginFieldDataDTO(name='PluginFieldDataEntry', description='PluginFieldDataEntry'),
}

model PaasEntryPluginFieldDataDTO {
  contentEntry?: [
    PaasConditionSetDTO
  ](name='ContentEntry', description='ContentEntry'),
  lifeSpan?: long(name='LifeSpan', description='LifeSpan'),
  name?: string(name='Name', description='Name'),
}

model PaasFunctionDTO {
  pluginFieldDataFunction?: PaasFunctionPluginFieldDataDTO(name='PluginFieldDataFunction', description='PluginFieldDataFunction'),
}

model PaasFunctionPluginFieldDataDTO {
  aliyunFunction?: string(name='AliyunFunction', description='AliyunFunction'),
  aliyunService?: string(name='AliyunService', description='AliyunService'),
  code?: string(name='Code', description='Code'),
  description?: string(name='Description', description='Description'),
  endPoint?: string(name='EndPoint', description='EndPoint'),
  function?: string(name='Function', description='Function'),
  name?: string(name='Name', description='Name'),
  params?: map[string]any(name='Params', description='Params'),
  switch?: [
    PaasSwitchCaseDTO
  ](name='Switch', description='Switch'),
  type?: string(name='Type', description='Type'),
}

model PaasFunctionPluginParams {
  body?: string(name='Body', description='Body'),
  header?: map[string]string(name='Header', description='Header'),
  method?: string(name='Method', description='Method'),
  query?: map[string]string(name='Query', description='Query'),
  url?: string(name='Url', description='Url'),
}

model PaasNodeDTO {
  code?: string(name='Code', description='Code'),
  id?: string(name='Id', description='Id'),
  label?: string(name='Label', description='Label'),
  pluginData?: PaasPluginDataDTO(name='PluginData', description='PluginData'),
  xx?: double(name='Xx', description='Xx'),
  yy?: double(name='Yy', description='Yy'),
}

model PaasPluginDataDTO {
  entry?: PaasEntryDTO(name='Entry'),
  function?: PaasFunctionDTO(name='Function'),
  response?: PaasResponseDTO(name='Response'),
  slot?: PaasSlotDTO(name='Slot'),
}

model PaasProcessData {
  edges?: [
    PaasEdgeDTO
  ](name='Edges', description='Edges'),
  nodes?: [
    PaasNodeDTO
  ](name='Nodes', description='Nodes'),
}

model PaasResponseDTO {
  pluginFieldDataResponse?: PaasResponsePluginFieldDataDTO(name='PluginFieldDataResponse'),
}

model PaasResponseNodeContentDTO {
  buttonList?: PaasButtonListDTO(name='ButtonList', description='ButtonList'),
  image?: string(name='Image', description='Image'),
  text?: string(name='Text', description='Text'),
  type?: string(name='Type', description='Type'),
}

model PaasResponsePluginFieldDataDTO {
  contentResponse?: PaasResponseNodeContentDTO(name='ContentResponse', description='ContentResponse'),
  name?: string(name='Name', description='Name'),
}

model PaasSlotConfigDTO {
  isArray?: boolean(name='IsArray', description='IsArray'),
  isNecessary?: boolean(name='IsNecessary', description='IsNecessary'),
  lifeSpan?: int32(name='LifeSpan', description='LifeSpan'),
  name?: string(name='Name', description='Name'),
  question?: [ string ](name='Question', description='Question'),
  value?: string(name='Value', description='Value'),
}

model PaasSlotDTO {
  pluginFieldDataSlot?: PaasSlotPluginFieldDataDTO(name='PluginFieldDataSlot'),
}

model PaasSlotPluginFieldDataDTO {
  contentSlot?: [
    PaasSlotConfigDTO
  ](name='ContentSlot', description='ContentSlot'),
  intentId?: string(name='IntentId', description='IntentId'),
  intentName?: string(name='IntentName', description='IntentName'),
  isSysIntent?: boolean(name='IsSysIntent', description='IsSysIntent'),
  name?: string(name='Name', description='Name'),
}

model PaasSwitchCaseDTO {
  id?: string(name='Id', description='Id'),
  label?: string(name='Label', description='Label'),
  type?: string(name='Type', description='Type'),
  value?: string(name='Value', description='Value'),
  variableName?: string(name='VariableName', description='VariableName'),
}

model RuleMtopDTO {
  error?: [ string ](name='Error', description='Error'),
  strict?: boolean(name='Strict', description='Strict'),
  text?: string(name='Text', description='Text'),
  warning?: [ string ](name='Warning', description='Warning'),
}

model SectionMtopDTO {
  slotId?: string(name='SlotId', description='SlotId'),
  text?: string(name='Text', description='Text'),
}

model SlotrecordMtopDTO {
  id?: string(name='Id', description='Id'),
  isArray?: boolean(name='IsArray', description='IsArray'),
  isNecessary?: boolean(name='IsNecessary', description='IsNecessary'),
  lifeSpan?: int32(name='LifeSpan', description='LifeSpan'),
  name?: string(name='Name', description='Name'),
  question?: [ string ](name='Question', description='Question'),
  tags?: [
    TagMtopDTO
  ](name='Tags', description='Tags'),
  value?: string(name='Value', description='Value'),
}

model TagMtopDTO {
  userSayId?: string(name='UserSayId', description='UserSayId'),
  value?: string(name='Value', description='Value'),
}

model UpdateDialogFlowModuleDefinition {
  edges?: [
    PaasEdgeDTO
  ](name='Edges', description='Edges'),
  nodes?: [
    PaasNodeDTO
  ](name='Nodes', description='Nodes'),
}

model UsersayMtopDTO {
  data?: [
    SectionMtopDTO
  ](name='Data', description='Data'),
  id?: string(name='Id', description='Id'),
  strict?: boolean(name='Strict', description='Strict'),
}

model ActivatePerspectiveRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  perspectiveId?: string(name='PerspectiveId'),
}

model ActivatePerspectiveResponseBody = {
  requestId?: string(name='RequestId'),
}

model ActivatePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ActivatePerspectiveResponseBody(name='body'),
}

async function activatePerspectiveWithOptions(request: ActivatePerspectiveRequest, runtime: Util.RuntimeOptions): ActivatePerspectiveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.perspectiveId)) {
    query['PerspectiveId'] = request.perspectiveId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActivatePerspective',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activatePerspective(request: ActivatePerspectiveRequest): ActivatePerspectiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return activatePerspectiveWithOptions(request, runtime);
}

model AddSynonymRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  coreWordName?: string(name='CoreWordName'),
  synonym?: string(name='Synonym'),
}

model AddSynonymResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddSynonymResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddSynonymResponseBody(name='body'),
}

async function addSynonymWithOptions(request: AddSynonymRequest, runtime: Util.RuntimeOptions): AddSynonymResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.coreWordName)) {
    query['CoreWordName'] = request.coreWordName;
  }
  if (!Util.isUnset(request.synonym)) {
    query['Synonym'] = request.synonym;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddSynonym',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addSynonym(request: AddSynonymRequest): AddSynonymResponse {
  var runtime = new Util.RuntimeOptions{};
  return addSynonymWithOptions(request, runtime);
}

model AppendEntityMemberRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  applyType?: string(name='ApplyType'),
  entityId?: long(name='EntityId'),
  member?: {
    memberName?: string(name='MemberName'),
    synonyms?: [ string ](name='Synonyms'),
  }(name='Member'),
}

model AppendEntityMemberShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  applyType?: string(name='ApplyType'),
  entityId?: long(name='EntityId'),
  memberShrink?: string(name='Member'),
}

model AppendEntityMemberResponseBody = {
  entityId?: long(name='EntityId'),
  requestId?: string(name='RequestId'),
}

model AppendEntityMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AppendEntityMemberResponseBody(name='body'),
}

async function appendEntityMemberWithOptions(tmpReq: AppendEntityMemberRequest, runtime: Util.RuntimeOptions): AppendEntityMemberResponse {
  Util.validateModel(tmpReq);
  var request = new AppendEntityMemberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.member)) {
    request.memberShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.member, 'Member', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.applyType)) {
    query['ApplyType'] = request.applyType;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.memberShrink)) {
    query['Member'] = request.memberShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AppendEntityMember',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function appendEntityMember(request: AppendEntityMemberRequest): AppendEntityMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return appendEntityMemberWithOptions(request, runtime);
}

model AssociateRequest {
  agentKey?: string(name='AgentKey'),
  instanceId?: string(name='InstanceId'),
  perspective?: [ string ](name='Perspective'),
  recommendNum?: int32(name='RecommendNum'),
  sessionId?: string(name='SessionId'),
  utterance?: string(name='Utterance'),
}

model AssociateResponseBody = {
  associate?: [ 
    {
      title?: string(name='Title'),
    }
  ](name='Associate'),
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
  sessionId?: string(name='SessionId'),
}

model AssociateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AssociateResponseBody(name='body'),
}

async function associateWithOptions(request: AssociateRequest, runtime: Util.RuntimeOptions): AssociateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.perspective)) {
    query['Perspective'] = request.perspective;
  }
  if (!Util.isUnset(request.recommendNum)) {
    query['RecommendNum'] = request.recommendNum;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.utterance)) {
    query['Utterance'] = request.utterance;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Associate',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associate(request: AssociateRequest): AssociateResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateWithOptions(request, runtime);
}

model ChatRequest {
  agentKey?: string(name='AgentKey'),
  instanceId?: string(name='InstanceId'),
  intentName?: string(name='IntentName'),
  knowledgeId?: string(name='KnowledgeId'),
  perspective?: [ string ](name='Perspective'),
  senderId?: string(name='SenderId'),
  senderNick?: string(name='SenderNick'),
  sessionId?: string(name='SessionId'),
  tag?: string(name='Tag'),
  utterance?: string(name='Utterance'),
  vendorParam?: string(name='VendorParam'),
}

model ChatResponseBody = {
  messageId?: string(name='MessageId'),
  messages?: [ 
    {
      answerSource?: string(name='AnswerSource'),
      answerType?: string(name='AnswerType'),
      knowledge?: {
        answerSource?: string(name='AnswerSource'),
        category?: string(name='Category'),
        content?: string(name='Content'),
        contentType?: string(name='ContentType'),
        hitStatement?: string(name='HitStatement'),
        id?: string(name='Id'),
        relatedKnowledges?: [ 
          {
            knowledgeId?: string(name='KnowledgeId'),
            title?: string(name='Title'),
          }
        ](name='RelatedKnowledges'),
        score?: double(name='Score'),
        summary?: string(name='Summary'),
        title?: string(name='Title'),
      }(name='Knowledge'),
      recommends?: [ 
        {
          answerSource?: string(name='AnswerSource'),
          knowledgeId?: string(name='KnowledgeId'),
          score?: double(name='Score'),
          title?: string(name='Title'),
        }
      ](name='Recommends'),
      text?: {
        answerSource?: string(name='AnswerSource'),
        articleTitle?: string(name='ArticleTitle'),
        commands?: map[string]any(name='Commands'),
        content?: string(name='Content'),
        contentType?: string(name='ContentType'),
        dialogName?: string(name='DialogName'),
        ext?: map[string]any(name='Ext'),
        externalFlags?: map[string]any(name='ExternalFlags'),
        hitStatement?: string(name='HitStatement'),
        intentName?: string(name='IntentName'),
        metaData?: string(name='MetaData'),
        nodeId?: string(name='NodeId'),
        nodeName?: string(name='NodeName'),
        score?: double(name='Score'),
        slots?: [ 
          {
            isHit?: boolean(name='IsHit'),
            name?: string(name='Name'),
            origin?: string(name='Origin'),
            value?: string(name='Value'),
          }
        ](name='Slots'),
        userDefinedChatTitle?: string(name='UserDefinedChatTitle'),
      }(name='Text'),
      title?: string(name='Title', description='在线场景，反问标题'),
      type?: string(name='Type'),
      voiceTitle?: string(name='VoiceTitle', description='语音场景，澄清内容'),
    }
  ](name='Messages'),
  requestId?: string(name='RequestId'),
  sessionId?: string(name='SessionId'),
  tag?: string(name='Tag'),
}

model ChatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatResponseBody(name='body'),
}

async function chatWithOptions(request: ChatRequest, runtime: Util.RuntimeOptions): ChatResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.intentName)) {
    query['IntentName'] = request.intentName;
  }
  if (!Util.isUnset(request.knowledgeId)) {
    query['KnowledgeId'] = request.knowledgeId;
  }
  if (!Util.isUnset(request.perspective)) {
    query['Perspective'] = request.perspective;
  }
  if (!Util.isUnset(request.senderId)) {
    query['SenderId'] = request.senderId;
  }
  if (!Util.isUnset(request.senderNick)) {
    query['SenderNick'] = request.senderNick;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.utterance)) {
    query['Utterance'] = request.utterance;
  }
  if (!Util.isUnset(request.vendorParam)) {
    query['VendorParam'] = request.vendorParam;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Chat',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function chat(request: ChatRequest): ChatResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatWithOptions(request, runtime);
}

model CreateBotRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  avatar?: string(name='Avatar'),
  introduction?: string(name='Introduction'),
  languageCode?: string(name='LanguageCode'),
  name?: string(name='Name'),
  robotType?: string(name='RobotType'),
}

model CreateBotResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateBotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateBotResponseBody(name='body'),
}

async function createBotWithOptions(request: CreateBotRequest, runtime: Util.RuntimeOptions): CreateBotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.avatar)) {
    query['Avatar'] = request.avatar;
  }
  if (!Util.isUnset(request.introduction)) {
    query['Introduction'] = request.introduction;
  }
  if (!Util.isUnset(request.languageCode)) {
    query['LanguageCode'] = request.languageCode;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.robotType)) {
    query['RobotType'] = request.robotType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateBot',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createBot(request: CreateBotRequest): CreateBotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBotWithOptions(request, runtime);
}

model CreateCategoryRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  bizCode?: string(name='BizCode'),
  knowledgeType?: int32(name='KnowledgeType'),
  name?: string(name='Name'),
  parentCategoryId?: long(name='ParentCategoryId'),
}

model CreateCategoryResponseBody = {
  categoryId?: long(name='CategoryId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCategoryResponseBody(name='body'),
}

async function createCategoryWithOptions(request: CreateCategoryRequest, runtime: Util.RuntimeOptions): CreateCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.knowledgeType)) {
    query['KnowledgeType'] = request.knowledgeType;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.parentCategoryId)) {
    query['ParentCategoryId'] = request.parentCategoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCategory',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCategory(request: CreateCategoryRequest): CreateCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCategoryWithOptions(request, runtime);
}

model CreateCoreWordRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  coreWordName?: string(name='CoreWordName'),
}

model CreateCoreWordResponseBody = {
  coreWordCode?: string(name='CoreWordCode'),
  requestId?: string(name='RequestId'),
}

model CreateCoreWordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCoreWordResponseBody(name='body'),
}

async function createCoreWordWithOptions(request: CreateCoreWordRequest, runtime: Util.RuntimeOptions): CreateCoreWordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.coreWordName)) {
    query['CoreWordName'] = request.coreWordName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCoreWord',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCoreWord(request: CreateCoreWordRequest): CreateCoreWordResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCoreWordWithOptions(request, runtime);
}

model CreateDialogRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  description?: string(name='Description'),
  dialogName?: string(name='DialogName'),
  instanceId?: string(name='InstanceId'),
}

model CreateDialogResponseBody = {
  dialogId?: long(name='DialogId'),
  requestId?: string(name='RequestId'),
}

model CreateDialogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDialogResponseBody(name='body'),
}

async function createDialogWithOptions(request: CreateDialogRequest, runtime: Util.RuntimeOptions): CreateDialogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dialogName)) {
    query['DialogName'] = request.dialogName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDialog',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDialog(request: CreateDialogRequest): CreateDialogResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDialogWithOptions(request, runtime);
}

model CreateEntityRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogId?: long(name='DialogId'),
  entityName?: string(name='EntityName'),
  entityType?: string(name='EntityType'),
  members?: [ 
    {
      memberName?: string(name='MemberName'),
      synonyms?: [ string ](name='Synonyms'),
    }
  ](name='Members'),
  regex?: string(name='Regex'),
}

model CreateEntityShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogId?: long(name='DialogId'),
  entityName?: string(name='EntityName'),
  entityType?: string(name='EntityType'),
  membersShrink?: string(name='Members'),
  regex?: string(name='Regex'),
}

model CreateEntityResponseBody = {
  entityId?: long(name='EntityId'),
  requestId?: string(name='RequestId'),
}

model CreateEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateEntityResponseBody(name='body'),
}

async function createEntityWithOptions(tmpReq: CreateEntityRequest, runtime: Util.RuntimeOptions): CreateEntityResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEntityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dialogId)) {
    query['DialogId'] = request.dialogId;
  }
  if (!Util.isUnset(request.entityName)) {
    query['EntityName'] = request.entityName;
  }
  if (!Util.isUnset(request.entityType)) {
    query['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.membersShrink)) {
    query['Members'] = request.membersShrink;
  }
  if (!Util.isUnset(request.regex)) {
    query['Regex'] = request.regex;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateEntity',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createEntity(request: CreateEntityRequest): CreateEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEntityWithOptions(request, runtime);
}

model CreateIntentRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogId?: long(name='DialogId'),
  intentDefinition?: IntentCreateDTO(name='IntentDefinition'),
}

model CreateIntentShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogId?: long(name='DialogId'),
  intentDefinitionShrink?: string(name='IntentDefinition'),
}

model CreateIntentResponseBody = {
  intentId?: long(name='IntentId'),
  requestId?: string(name='RequestId'),
}

model CreateIntentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateIntentResponseBody(name='body'),
}

async function createIntentWithOptions(tmpReq: CreateIntentRequest, runtime: Util.RuntimeOptions): CreateIntentResponse {
  Util.validateModel(tmpReq);
  var request = new CreateIntentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.intentDefinition)) {
    request.intentDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.intentDefinition, 'IntentDefinition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dialogId)) {
    query['DialogId'] = request.dialogId;
  }
  if (!Util.isUnset(request.intentDefinitionShrink)) {
    query['IntentDefinition'] = request.intentDefinitionShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateIntent',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createIntent(request: CreateIntentRequest): CreateIntentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createIntentWithOptions(request, runtime);
}

model CreateKnowledgeRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  knowledge?: {
    categoryId?: long(name='CategoryId'),
    endDate?: string(name='EndDate'),
    knowledgeTitle?: string(name='KnowledgeTitle'),
    knowledgeType?: int32(name='KnowledgeType'),
    outlines?: [ 
      {
        knowledgeId?: long(name='KnowledgeId'),
        outlineId?: long(name='OutlineId'),
        title?: string(name='Title'),
      }
    ](name='Outlines'),
    simQuestions?: [ 
      {
        title?: string(name='Title'),
      }
    ](name='SimQuestions'),
    solutions?: [ 
      {
        content?: string(name='Content'),
        perspectiveIds?: [ string ](name='PerspectiveIds'),
        plainText?: string(name='PlainText'),
      }
    ](name='Solutions'),
    startDate?: string(name='StartDate'),
  }(name='Knowledge'),
}

model CreateKnowledgeShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  knowledgeShrink?: string(name='Knowledge'),
}

model CreateKnowledgeResponseBody = {
  knowledgeId?: long(name='KnowledgeId'),
  requestId?: string(name='RequestId'),
}

model CreateKnowledgeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateKnowledgeResponseBody(name='body'),
}

async function createKnowledgeWithOptions(tmpReq: CreateKnowledgeRequest, runtime: Util.RuntimeOptions): CreateKnowledgeResponse {
  Util.validateModel(tmpReq);
  var request = new CreateKnowledgeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.knowledge)) {
    request.knowledgeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.knowledge, 'Knowledge', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.knowledgeShrink)) {
    body['Knowledge'] = request.knowledgeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateKnowledge',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createKnowledge(request: CreateKnowledgeRequest): CreateKnowledgeResponse {
  var runtime = new Util.RuntimeOptions{};
  return createKnowledgeWithOptions(request, runtime);
}

model CreatePerspectiveRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  name?: string(name='Name'),
}

model CreatePerspectiveResponseBody = {
  perspectiveId?: string(name='PerspectiveId'),
  requestId?: string(name='RequestId'),
}

model CreatePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreatePerspectiveResponseBody(name='body'),
}

async function createPerspectiveWithOptions(request: CreatePerspectiveRequest, runtime: Util.RuntimeOptions): CreatePerspectiveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePerspective',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createPerspective(request: CreatePerspectiveRequest): CreatePerspectiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPerspectiveWithOptions(request, runtime);
}

model DeleteBotRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId'),
}

model DeleteBotResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteBotResponseBody(name='body'),
}

async function deleteBotWithOptions(request: DeleteBotRequest, runtime: Util.RuntimeOptions): DeleteBotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteBot',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteBot(request: DeleteBotRequest): DeleteBotResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBotWithOptions(request, runtime);
}

model DeleteCategoryRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  categoryId?: long(name='CategoryId'),
}

model DeleteCategoryResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCategoryResponseBody(name='body'),
}

async function deleteCategoryWithOptions(request: DeleteCategoryRequest, runtime: Util.RuntimeOptions): DeleteCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCategory',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCategory(request: DeleteCategoryRequest): DeleteCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCategoryWithOptions(request, runtime);
}

model DeleteCoreWordRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  coreWordName?: string(name='CoreWordName'),
}

model DeleteCoreWordResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteCoreWordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCoreWordResponseBody(name='body'),
}

async function deleteCoreWordWithOptions(request: DeleteCoreWordRequest, runtime: Util.RuntimeOptions): DeleteCoreWordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.coreWordName)) {
    query['CoreWordName'] = request.coreWordName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCoreWord',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCoreWord(request: DeleteCoreWordRequest): DeleteCoreWordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCoreWordWithOptions(request, runtime);
}

model DeleteDialogRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogId?: long(name='DialogId'),
}

model DeleteDialogResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDialogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDialogResponseBody(name='body'),
}

async function deleteDialogWithOptions(request: DeleteDialogRequest, runtime: Util.RuntimeOptions): DeleteDialogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dialogId)) {
    query['DialogId'] = request.dialogId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDialog',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDialog(request: DeleteDialogRequest): DeleteDialogResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDialogWithOptions(request, runtime);
}

model DeleteEntityRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  entityId?: long(name='EntityId'),
}

model DeleteEntityResponseBody = {
  entityId?: long(name='EntityId'),
  requestId?: string(name='RequestId'),
}

model DeleteEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteEntityResponseBody(name='body'),
}

async function deleteEntityWithOptions(request: DeleteEntityRequest, runtime: Util.RuntimeOptions): DeleteEntityResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteEntity',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteEntity(request: DeleteEntityRequest): DeleteEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEntityWithOptions(request, runtime);
}

model DeleteIntentRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  intentId?: long(name='IntentId'),
}

model DeleteIntentResponseBody = {
  intentId?: long(name='IntentId'),
  requestId?: string(name='RequestId'),
}

model DeleteIntentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteIntentResponseBody(name='body'),
}

async function deleteIntentWithOptions(request: DeleteIntentRequest, runtime: Util.RuntimeOptions): DeleteIntentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.intentId)) {
    query['IntentId'] = request.intentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteIntent',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteIntent(request: DeleteIntentRequest): DeleteIntentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteIntentWithOptions(request, runtime);
}

model DeleteKnowledgeRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  knowledgeId?: long(name='KnowledgeId'),
}

model DeleteKnowledgeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteKnowledgeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteKnowledgeResponseBody(name='body'),
}

async function deleteKnowledgeWithOptions(request: DeleteKnowledgeRequest, runtime: Util.RuntimeOptions): DeleteKnowledgeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.knowledgeId)) {
    query['KnowledgeId'] = request.knowledgeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteKnowledge',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteKnowledge(request: DeleteKnowledgeRequest): DeleteKnowledgeResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteKnowledgeWithOptions(request, runtime);
}

model DeletePerspectiveRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  perspectiveId?: string(name='PerspectiveId'),
}

model DeletePerspectiveResponseBody = {
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
}

model DeletePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeletePerspectiveResponseBody(name='body'),
}

async function deletePerspectiveWithOptions(request: DeletePerspectiveRequest, runtime: Util.RuntimeOptions): DeletePerspectiveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.perspectiveId)) {
    query['PerspectiveId'] = request.perspectiveId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePerspective',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deletePerspective(request: DeletePerspectiveRequest): DeletePerspectiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePerspectiveWithOptions(request, runtime);
}

model DescribeBotRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  instanceId?: string(name='InstanceId'),
}

model DescribeBotResponseBody = {
  avatar?: string(name='Avatar'),
  categories?: [ 
    {
      categoryId?: long(name='CategoryId'),
      name?: string(name='Name'),
      parentCategoryId?: long(name='ParentCategoryId'),
    }
  ](name='Categories'),
  createTime?: string(name='CreateTime'),
  instanceId?: string(name='InstanceId'),
  introduction?: string(name='Introduction'),
  languageCode?: string(name='LanguageCode'),
  logo?: string(name='Logo'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  timeZone?: string(name='TimeZone'),
}

model DescribeBotResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeBotResponseBody(name='body'),
}

async function describeBotWithOptions(request: DescribeBotRequest, runtime: Util.RuntimeOptions): DescribeBotResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeBot',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeBot(request: DescribeBotRequest): DescribeBotResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBotWithOptions(request, runtime);
}

model DescribeCategoryRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  categoryId?: long(name='CategoryId'),
}

model DescribeCategoryResponseBody = {
  categoryId?: long(name='CategoryId'),
  name?: string(name='Name'),
  parentCategoryId?: long(name='ParentCategoryId'),
  requestId?: string(name='RequestId'),
}

model DescribeCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCategoryResponseBody(name='body'),
}

async function describeCategoryWithOptions(request: DescribeCategoryRequest, runtime: Util.RuntimeOptions): DescribeCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCategory',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCategory(request: DescribeCategoryRequest): DescribeCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCategoryWithOptions(request, runtime);
}

model DescribeCoreWordRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  coreWordName?: string(name='CoreWordName'),
}

model DescribeCoreWordResponseBody = {
  coreWordCode?: string(name='CoreWordCode'),
  coreWordName?: string(name='CoreWordName'),
  createTime?: string(name='CreateTime'),
  modifyTime?: string(name='ModifyTime'),
  requestId?: string(name='RequestId'),
  synonyms?: [ string ](name='Synonyms'),
}

model DescribeCoreWordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCoreWordResponseBody(name='body'),
}

async function describeCoreWordWithOptions(request: DescribeCoreWordRequest, runtime: Util.RuntimeOptions): DescribeCoreWordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.coreWordName)) {
    query['CoreWordName'] = request.coreWordName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCoreWord',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCoreWord(request: DescribeCoreWordRequest): DescribeCoreWordResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCoreWordWithOptions(request, runtime);
}

model DescribeDialogRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogId?: long(name='DialogId'),
}

model DescribeDialogResponseBody = {
  createTime?: string(name='CreateTime'),
  createUserId?: string(name='CreateUserId'),
  createUserName?: string(name='CreateUserName'),
  description?: string(name='Description'),
  dialogId?: long(name='DialogId'),
  dialogName?: string(name='DialogName'),
  isOnline?: boolean(name='IsOnline'),
  isSampleDialog?: boolean(name='IsSampleDialog'),
  modifyTime?: string(name='ModifyTime'),
  modifyUserId?: string(name='ModifyUserId'),
  modifyUserName?: string(name='ModifyUserName'),
  requestId?: string(name='RequestId'),
  status?: int32(name='Status'),
}

model DescribeDialogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDialogResponseBody(name='body'),
}

async function describeDialogWithOptions(request: DescribeDialogRequest, runtime: Util.RuntimeOptions): DescribeDialogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dialogId)) {
    query['DialogId'] = request.dialogId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDialog',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDialog(request: DescribeDialogRequest): DescribeDialogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDialogWithOptions(request, runtime);
}

model DescribeDialogFlowRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogId?: long(name='DialogId'),
}

model DescribeDialogFlowResponseBody = {
  accountId?: string(name='AccountId'),
  createTime?: string(name='CreateTime'),
  createUserId?: string(name='CreateUserId'),
  createUserName?: string(name='CreateUserName'),
  dialogId?: long(name='DialogId'),
  dialogName?: string(name='DialogName'),
  globalVars?: map[string]any(name='GlobalVars'),
  instanceId?: string(name='InstanceId'),
  modifyTime?: string(name='ModifyTime'),
  modifyUserId?: string(name='ModifyUserId'),
  modifyUserName?: string(name='ModifyUserName'),
  moduleDefinition?: PaasProcessData(name='ModuleDefinition'),
  moduleId?: long(name='ModuleId'),
  moduleName?: string(name='ModuleName'),
  requestId?: string(name='RequestId'),
  status?: int32(name='Status'),
  tags?: string(name='Tags'),
  templates?: string(name='Templates'),
}

model DescribeDialogFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDialogFlowResponseBody(name='body'),
}

async function describeDialogFlowWithOptions(request: DescribeDialogFlowRequest, runtime: Util.RuntimeOptions): DescribeDialogFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dialogId)) {
    query['DialogId'] = request.dialogId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDialogFlow',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDialogFlow(request: DescribeDialogFlowRequest): DescribeDialogFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDialogFlowWithOptions(request, runtime);
}

model DescribeEntitiesRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  entityId?: long(name='EntityId'),
}

model DescribeEntitiesResponseBody = {
  createTime?: string(name='CreateTime'),
  createUserId?: string(name='CreateUserId'),
  createUserName?: string(name='CreateUserName'),
  entityId?: long(name='EntityId'),
  entityName?: string(name='EntityName'),
  entityType?: string(name='EntityType'),
  members?: [ 
    {
      memberName?: string(name='MemberName'),
      synonyms?: [ string ](name='Synonyms'),
    }
  ](name='Members'),
  modifyTime?: string(name='ModifyTime'),
  modifyUserId?: string(name='ModifyUserId'),
  modifyUserName?: string(name='ModifyUserName'),
  regex?: string(name='Regex'),
  requestId?: string(name='RequestId'),
}

model DescribeEntitiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeEntitiesResponseBody(name='body'),
}

async function describeEntitiesWithOptions(request: DescribeEntitiesRequest, runtime: Util.RuntimeOptions): DescribeEntitiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeEntities',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeEntities(request: DescribeEntitiesRequest): DescribeEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEntitiesWithOptions(request, runtime);
}

model DescribeIntentRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  intentId?: long(name='IntentId'),
}

model DescribeIntentResponseBody = {
  createTime?: string(name='CreateTime'),
  createUserId?: string(name='CreateUserId'),
  createUserName?: string(name='CreateUserName'),
  dialogId?: long(name='DialogId'),
  intentId?: long(name='IntentId'),
  modifyTime?: string(name='ModifyTime'),
  modifyUserId?: string(name='ModifyUserId'),
  modifyUserName?: string(name='ModifyUserName'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  ruleCheck?: [ 
    {
      error?: [ string ](name='Error'),
      strict?: boolean(name='Strict'),
      text?: string(name='Text'),
      warning?: [ string ](name='Warning'),
    }
  ](name='RuleCheck'),
  slot?: [ 
    {
      isArray?: boolean(name='IsArray'),
      isNecessary?: boolean(name='IsNecessary'),
      lifeSpan?: int32(name='LifeSpan'),
      name?: string(name='Name'),
      question?: [ string ](name='Question'),
      slotId?: string(name='SlotId'),
      tags?: [ 
        {
          userSayId?: string(name='UserSayId'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      value?: string(name='Value'),
    }
  ](name='Slot'),
  type?: string(name='Type'),
  userSay?: [ 
    {
      data?: [ 
        {
          slotId?: string(name='SlotId'),
          text?: string(name='Text'),
        }
      ](name='Data'),
      strict?: boolean(name='Strict'),
      userSayId?: string(name='UserSayId'),
    }
  ](name='UserSay'),
}

model DescribeIntentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeIntentResponseBody(name='body'),
}

async function describeIntentWithOptions(request: DescribeIntentRequest, runtime: Util.RuntimeOptions): DescribeIntentResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.intentId)) {
    query['IntentId'] = request.intentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeIntent',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeIntent(request: DescribeIntentRequest): DescribeIntentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIntentWithOptions(request, runtime);
}

model DescribeKnowledgeRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  knowledgeId?: long(name='KnowledgeId'),
}

model DescribeKnowledgeResponseBody = {
  categoryId?: long(name='CategoryId'),
  coreWords?: [ string ](name='CoreWords'),
  createTime?: string(name='CreateTime'),
  createUserName?: string(name='CreateUserName'),
  endDate?: string(name='EndDate'),
  keyWords?: [ string ](name='KeyWords'),
  knowledgeId?: long(name='KnowledgeId'),
  knowledgeStatus?: int32(name='KnowledgeStatus'),
  knowledgeTitle?: string(name='KnowledgeTitle'),
  knowledgeType?: int32(name='KnowledgeType'),
  modifyTime?: string(name='ModifyTime'),
  modifyUserName?: string(name='ModifyUserName'),
  outlines?: [ 
    {
      knowledgeId?: long(name='KnowledgeId'),
      outlineId?: long(name='OutlineId'),
      title?: string(name='Title'),
    }
  ](name='Outlines'),
  requestId?: string(name='RequestId'),
  simQuestions?: [ 
    {
      createTime?: string(name='CreateTime'),
      modifyTime?: string(name='ModifyTime'),
      simQuestionId?: long(name='SimQuestionId'),
      title?: string(name='Title'),
    }
  ](name='SimQuestions'),
  solutions?: [ 
    {
      content?: string(name='Content'),
      createTime?: string(name='CreateTime'),
      modifyTime?: string(name='ModifyTime'),
      perspectiveIds?: [ string ](name='PerspectiveIds'),
      plainText?: string(name='PlainText'),
      solutionId?: long(name='SolutionId'),
      summary?: string(name='Summary'),
    }
  ](name='Solutions'),
  startDate?: string(name='StartDate'),
  version?: int32(name='Version'),
}

model DescribeKnowledgeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeKnowledgeResponseBody(name='body'),
}

async function describeKnowledgeWithOptions(request: DescribeKnowledgeRequest, runtime: Util.RuntimeOptions): DescribeKnowledgeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.knowledgeId)) {
    query['KnowledgeId'] = request.knowledgeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeKnowledge',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeKnowledge(request: DescribeKnowledgeRequest): DescribeKnowledgeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKnowledgeWithOptions(request, runtime);
}

model DescribePerspectiveRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  perspectiveId?: string(name='PerspectiveId'),
}

model DescribePerspectiveResponseBody = {
  createTime?: string(name='CreateTime'),
  createUserName?: string(name='CreateUserName'),
  modifyTime?: string(name='ModifyTime'),
  modifyUserName?: string(name='ModifyUserName'),
  name?: string(name='Name'),
  perspectiveCode?: string(name='PerspectiveCode'),
  perspectiveId?: string(name='PerspectiveId'),
  requestId?: string(name='RequestId'),
  selfDefine?: boolean(name='SelfDefine'),
  status?: int32(name='Status'),
}

model DescribePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePerspectiveResponseBody(name='body'),
}

async function describePerspectiveWithOptions(request: DescribePerspectiveRequest, runtime: Util.RuntimeOptions): DescribePerspectiveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.perspectiveId)) {
    query['PerspectiveId'] = request.perspectiveId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePerspective',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePerspective(request: DescribePerspectiveRequest): DescribePerspectiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePerspectiveWithOptions(request, runtime);
}

model DisableDialogFlowRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogId?: long(name='DialogId'),
}

model DisableDialogFlowResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableDialogFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableDialogFlowResponseBody(name='body'),
}

async function disableDialogFlowWithOptions(request: DisableDialogFlowRequest, runtime: Util.RuntimeOptions): DisableDialogFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dialogId)) {
    query['DialogId'] = request.dialogId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableDialogFlow',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableDialogFlow(request: DisableDialogFlowRequest): DisableDialogFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableDialogFlowWithOptions(request, runtime);
}

model DisableKnowledgeRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  knowledgeId?: long(name='KnowledgeId'),
}

model DisableKnowledgeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableKnowledgeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DisableKnowledgeResponseBody(name='body'),
}

async function disableKnowledgeWithOptions(request: DisableKnowledgeRequest, runtime: Util.RuntimeOptions): DisableKnowledgeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.knowledgeId)) {
    query['KnowledgeId'] = request.knowledgeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableKnowledge',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableKnowledge(request: DisableKnowledgeRequest): DisableKnowledgeResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableKnowledgeWithOptions(request, runtime);
}

model FeedbackRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  feedback?: string(name='Feedback'),
  instanceId?: string(name='InstanceId'),
  messageId?: string(name='MessageId'),
  sessionId?: string(name='SessionId'),
}

model FeedbackResponseBody = {
  feedback?: string(name='Feedback'),
  httpStatus?: long(name='HttpStatus'),
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model FeedbackResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FeedbackResponseBody(name='body'),
}

async function feedbackWithOptions(request: FeedbackRequest, runtime: Util.RuntimeOptions): FeedbackResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.feedback)) {
    query['Feedback'] = request.feedback;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.messageId)) {
    query['MessageId'] = request.messageId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Feedback',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function feedback(request: FeedbackRequest): FeedbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return feedbackWithOptions(request, runtime);
}

model GetAsyncResultRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  taskId?: string(name='TaskId'),
}

model GetAsyncResultResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAsyncResultResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAsyncResultResponseBody(name='body'),
}

async function getAsyncResultWithOptions(request: GetAsyncResultRequest, runtime: Util.RuntimeOptions): GetAsyncResultResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.taskId)) {
    query['TaskId'] = request.taskId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAsyncResult',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAsyncResult(request: GetAsyncResultRequest): GetAsyncResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAsyncResultWithOptions(request, runtime);
}

model GetBotChatDataRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  endTime?: string(name='EndTime'),
  robotInstanceId?: string(name='RobotInstanceId'),
  startTime?: string(name='StartTime'),
}

model GetBotChatDataResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model GetBotChatDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBotChatDataResponseBody(name='body'),
}

async function getBotChatDataWithOptions(request: GetBotChatDataRequest, runtime: Util.RuntimeOptions): GetBotChatDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.robotInstanceId)) {
    query['RobotInstanceId'] = request.robotInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBotChatData',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBotChatData(request: GetBotChatDataRequest): GetBotChatDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBotChatDataWithOptions(request, runtime);
}

model GetBotDsStatDataRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  endTime?: string(name='EndTime'),
  robotInstanceId?: string(name='RobotInstanceId'),
  startTime?: string(name='StartTime'),
}

model GetBotDsStatDataResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model GetBotDsStatDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBotDsStatDataResponseBody(name='body'),
}

async function getBotDsStatDataWithOptions(request: GetBotDsStatDataRequest, runtime: Util.RuntimeOptions): GetBotDsStatDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.robotInstanceId)) {
    query['RobotInstanceId'] = request.robotInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBotDsStatData',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBotDsStatData(request: GetBotDsStatDataRequest): GetBotDsStatDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBotDsStatDataWithOptions(request, runtime);
}

model GetBotKnowledgeStatDataRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  endTime?: string(name='EndTime'),
  robotInstanceId?: string(name='RobotInstanceId'),
  startTime?: string(name='StartTime'),
}

model GetBotKnowledgeStatDataResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model GetBotKnowledgeStatDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBotKnowledgeStatDataResponseBody(name='body'),
}

async function getBotKnowledgeStatDataWithOptions(request: GetBotKnowledgeStatDataRequest, runtime: Util.RuntimeOptions): GetBotKnowledgeStatDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.robotInstanceId)) {
    query['RobotInstanceId'] = request.robotInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBotKnowledgeStatData',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBotKnowledgeStatData(request: GetBotKnowledgeStatDataRequest): GetBotKnowledgeStatDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBotKnowledgeStatDataWithOptions(request, runtime);
}

model GetBotSessionDataRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  endTime?: string(name='EndTime'),
  robotInstanceId?: string(name='RobotInstanceId'),
  startTime?: string(name='StartTime'),
}

model GetBotSessionDataResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model GetBotSessionDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetBotSessionDataResponseBody(name='body'),
}

async function getBotSessionDataWithOptions(request: GetBotSessionDataRequest, runtime: Util.RuntimeOptions): GetBotSessionDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.robotInstanceId)) {
    query['RobotInstanceId'] = request.robotInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetBotSessionData',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getBotSessionData(request: GetBotSessionDataRequest): GetBotSessionDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return getBotSessionDataWithOptions(request, runtime);
}

model GetConversationListRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  endDate?: string(name='EndDate'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  senderId?: string(name='SenderId'),
  sessionId?: string(name='SessionId'),
  startDate?: string(name='StartDate'),
}

model GetConversationListResponseBody = {
  messages?: [  map[string]any ](name='Messages'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCounts?: long(name='TotalCounts'),
}

model GetConversationListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetConversationListResponseBody(name='body'),
}

async function getConversationListWithOptions(request: GetConversationListRequest, runtime: Util.RuntimeOptions): GetConversationListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.endDate)) {
    query['EndDate'] = request.endDate;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.senderId)) {
    query['SenderId'] = request.senderId;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.startDate)) {
    query['StartDate'] = request.startDate;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConversationList',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getConversationList(request: GetConversationListRequest): GetConversationListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConversationListWithOptions(request, runtime);
}

model ListBotChatHistorysRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  endTime?: string(name='EndTime'),
  limit?: int32(name='Limit'),
  robotInstanceId?: string(name='RobotInstanceId'),
  startTime?: string(name='StartTime'),
}

model ListBotChatHistorysResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotChatHistorysResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBotChatHistorysResponseBody(name='body'),
}

async function listBotChatHistorysWithOptions(request: ListBotChatHistorysRequest, runtime: Util.RuntimeOptions): ListBotChatHistorysResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.robotInstanceId)) {
    query['RobotInstanceId'] = request.robotInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBotChatHistorys',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBotChatHistorys(request: ListBotChatHistorysRequest): ListBotChatHistorysResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBotChatHistorysWithOptions(request, runtime);
}

model ListBotColdDsDatasRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  endTime?: string(name='EndTime'),
  limit?: int32(name='Limit'),
  robotInstanceId?: string(name='RobotInstanceId'),
  startTime?: string(name='StartTime'),
}

model ListBotColdDsDatasResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotColdDsDatasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBotColdDsDatasResponseBody(name='body'),
}

async function listBotColdDsDatasWithOptions(request: ListBotColdDsDatasRequest, runtime: Util.RuntimeOptions): ListBotColdDsDatasResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.robotInstanceId)) {
    query['RobotInstanceId'] = request.robotInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBotColdDsDatas',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBotColdDsDatas(request: ListBotColdDsDatasRequest): ListBotColdDsDatasResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBotColdDsDatasWithOptions(request, runtime);
}

model ListBotColdKnowledgesRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  endTime?: string(name='EndTime'),
  limit?: int32(name='Limit'),
  robotInstanceId?: string(name='RobotInstanceId'),
  startTime?: string(name='StartTime'),
}

model ListBotColdKnowledgesResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotColdKnowledgesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBotColdKnowledgesResponseBody(name='body'),
}

async function listBotColdKnowledgesWithOptions(request: ListBotColdKnowledgesRequest, runtime: Util.RuntimeOptions): ListBotColdKnowledgesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.robotInstanceId)) {
    query['RobotInstanceId'] = request.robotInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBotColdKnowledges',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBotColdKnowledges(request: ListBotColdKnowledgesRequest): ListBotColdKnowledgesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBotColdKnowledgesWithOptions(request, runtime);
}

model ListBotDsDetailsRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  endTime?: string(name='EndTime'),
  limit?: int32(name='Limit'),
  robotInstanceId?: string(name='RobotInstanceId'),
  startTime?: string(name='StartTime'),
}

model ListBotDsDetailsResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotDsDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBotDsDetailsResponseBody(name='body'),
}

async function listBotDsDetailsWithOptions(request: ListBotDsDetailsRequest, runtime: Util.RuntimeOptions): ListBotDsDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.robotInstanceId)) {
    query['RobotInstanceId'] = request.robotInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBotDsDetails',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBotDsDetails(request: ListBotDsDetailsRequest): ListBotDsDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBotDsDetailsWithOptions(request, runtime);
}

model ListBotHotDsDatasRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  endTime?: string(name='EndTime'),
  limit?: int32(name='Limit'),
  robotInstanceId?: string(name='RobotInstanceId'),
  startTime?: string(name='StartTime'),
}

model ListBotHotDsDatasResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotHotDsDatasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBotHotDsDatasResponseBody(name='body'),
}

async function listBotHotDsDatasWithOptions(request: ListBotHotDsDatasRequest, runtime: Util.RuntimeOptions): ListBotHotDsDatasResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.robotInstanceId)) {
    query['RobotInstanceId'] = request.robotInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBotHotDsDatas',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBotHotDsDatas(request: ListBotHotDsDatasRequest): ListBotHotDsDatasResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBotHotDsDatasWithOptions(request, runtime);
}

model ListBotHotKnowledgesRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  endTime?: string(name='EndTime'),
  limit?: int32(name='Limit'),
  robotInstanceId?: string(name='RobotInstanceId'),
  startTime?: string(name='StartTime'),
}

model ListBotHotKnowledgesResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotHotKnowledgesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBotHotKnowledgesResponseBody(name='body'),
}

async function listBotHotKnowledgesWithOptions(request: ListBotHotKnowledgesRequest, runtime: Util.RuntimeOptions): ListBotHotKnowledgesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.robotInstanceId)) {
    query['RobotInstanceId'] = request.robotInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBotHotKnowledges',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBotHotKnowledges(request: ListBotHotKnowledgesRequest): ListBotHotKnowledgesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBotHotKnowledgesWithOptions(request, runtime);
}

model ListBotKnowledgeDetailsRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  endTime?: string(name='EndTime'),
  limit?: string(name='Limit'),
  robotInstanceId?: string(name='RobotInstanceId'),
  startTime?: string(name='StartTime'),
}

model ListBotKnowledgeDetailsResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotKnowledgeDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBotKnowledgeDetailsResponseBody(name='body'),
}

async function listBotKnowledgeDetailsWithOptions(request: ListBotKnowledgeDetailsRequest, runtime: Util.RuntimeOptions): ListBotKnowledgeDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.robotInstanceId)) {
    query['RobotInstanceId'] = request.robotInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBotKnowledgeDetails',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBotKnowledgeDetails(request: ListBotKnowledgeDetailsRequest): ListBotKnowledgeDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBotKnowledgeDetailsWithOptions(request, runtime);
}

model ListBotReceptionDetailDatasRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  endTime?: string(name='EndTime'),
  robotInstanceId?: string(name='RobotInstanceId'),
  startTime?: string(name='StartTime'),
}

model ListBotReceptionDetailDatasResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotReceptionDetailDatasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListBotReceptionDetailDatasResponseBody(name='body'),
}

async function listBotReceptionDetailDatasWithOptions(request: ListBotReceptionDetailDatasRequest, runtime: Util.RuntimeOptions): ListBotReceptionDetailDatasResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.robotInstanceId)) {
    query['RobotInstanceId'] = request.robotInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBotReceptionDetailDatas',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listBotReceptionDetailDatas(request: ListBotReceptionDetailDatasRequest): ListBotReceptionDetailDatasResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBotReceptionDetailDatasWithOptions(request, runtime);
}

model ListConversationLogsRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  sessionId?: string(name='SessionId'),
}

model ListConversationLogsResponseBody = {
  chatLogs?: [  map[string]any ](name='ChatLogs'),
  requestId?: string(name='RequestId'),
  rounds?: long(name='Rounds'),
}

model ListConversationLogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListConversationLogsResponseBody(name='body'),
}

async function listConversationLogsWithOptions(request: ListConversationLogsRequest, runtime: Util.RuntimeOptions): ListConversationLogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.sessionId)) {
    query['SessionId'] = request.sessionId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConversationLogs',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listConversationLogs(request: ListConversationLogsRequest): ListConversationLogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listConversationLogsWithOptions(request, runtime);
}

model MoveKnowledgeCategoryRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  categoryId?: long(name='CategoryId'),
  knowledgeId?: long(name='KnowledgeId'),
}

model MoveKnowledgeCategoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveKnowledgeCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: MoveKnowledgeCategoryResponseBody(name='body'),
}

async function moveKnowledgeCategoryWithOptions(request: MoveKnowledgeCategoryRequest, runtime: Util.RuntimeOptions): MoveKnowledgeCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.knowledgeId)) {
    query['KnowledgeId'] = request.knowledgeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveKnowledgeCategory',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveKnowledgeCategory(request: MoveKnowledgeCategoryRequest): MoveKnowledgeCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveKnowledgeCategoryWithOptions(request, runtime);
}

model PublishDialogFlowRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogId?: long(name='DialogId'),
}

model PublishDialogFlowResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishDialogFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishDialogFlowResponseBody(name='body'),
}

async function publishDialogFlowWithOptions(request: PublishDialogFlowRequest, runtime: Util.RuntimeOptions): PublishDialogFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dialogId)) {
    query['DialogId'] = request.dialogId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishDialogFlow',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishDialogFlow(request: PublishDialogFlowRequest): PublishDialogFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishDialogFlowWithOptions(request, runtime);
}

model PublishKnowledgeRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  async?: boolean(name='Async'),
  knowledgeId?: long(name='KnowledgeId'),
}

model PublishKnowledgeResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishKnowledgeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishKnowledgeResponseBody(name='body'),
}

async function publishKnowledgeWithOptions(request: PublishKnowledgeRequest, runtime: Util.RuntimeOptions): PublishKnowledgeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.async)) {
    query['Async'] = request.async;
  }
  if (!Util.isUnset(request.knowledgeId)) {
    query['KnowledgeId'] = request.knowledgeId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishKnowledge',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishKnowledge(request: PublishKnowledgeRequest): PublishKnowledgeResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishKnowledgeWithOptions(request, runtime);
}

model QueryBotsRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model QueryBotsResponseBody = {
  bots?: [ 
    {
      avatar?: string(name='Avatar'),
      createTime?: string(name='CreateTime'),
      instanceId?: string(name='InstanceId'),
      introduction?: string(name='Introduction'),
      languageCode?: string(name='LanguageCode'),
      name?: string(name='Name'),
      timeZone?: string(name='TimeZone'),
    }
  ](name='Bots'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model QueryBotsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBotsResponseBody(name='body'),
}

async function queryBotsWithOptions(request: QueryBotsRequest, runtime: Util.RuntimeOptions): QueryBotsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryBots',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBots(request: QueryBotsRequest): QueryBotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBotsWithOptions(request, runtime);
}

model QueryCategoriesRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  knowledgeType?: long(name='KnowledgeType'),
  parentCategoryId?: long(name='ParentCategoryId'),
  showChildrens?: boolean(name='ShowChildrens'),
}

model QueryCategoriesResponseBody = {
  categories?: [
    Children
  ](name='Categories'),
  requestId?: string(name='RequestId'),
}

model QueryCategoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCategoriesResponseBody(name='body'),
}

async function queryCategoriesWithOptions(request: QueryCategoriesRequest, runtime: Util.RuntimeOptions): QueryCategoriesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.knowledgeType)) {
    query['KnowledgeType'] = request.knowledgeType;
  }
  if (!Util.isUnset(request.parentCategoryId)) {
    query['ParentCategoryId'] = request.parentCategoryId;
  }
  if (!Util.isUnset(request.showChildrens)) {
    query['ShowChildrens'] = request.showChildrens;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCategories',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCategories(request: QueryCategoriesRequest): QueryCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCategoriesWithOptions(request, runtime);
}

model QueryCoreWordsRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  coreWordName?: string(name='CoreWordName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  synonym?: string(name='Synonym'),
}

model QueryCoreWordsResponseBody = {
  coreWords?: [ 
    {
      coreWordCode?: string(name='CoreWordCode'),
      coreWordName?: string(name='CoreWordName'),
      createTime?: string(name='CreateTime'),
      modifyTime?: string(name='ModifyTime'),
      synonyms?: [ string ](name='Synonyms'),
    }
  ](name='CoreWords'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model QueryCoreWordsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCoreWordsResponseBody(name='body'),
}

async function queryCoreWordsWithOptions(request: QueryCoreWordsRequest, runtime: Util.RuntimeOptions): QueryCoreWordsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.coreWordName)) {
    query['CoreWordName'] = request.coreWordName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.synonym)) {
    query['Synonym'] = request.synonym;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCoreWords',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCoreWords(request: QueryCoreWordsRequest): QueryCoreWordsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCoreWordsWithOptions(request, runtime);
}

model QueryDialogsRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogName?: string(name='DialogName'),
  instanceId?: string(name='InstanceId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model QueryDialogsResponseBody = {
  dialogs?: [ 
    {
      createTime?: string(name='CreateTime'),
      createUserId?: string(name='CreateUserId'),
      createUserName?: string(name='CreateUserName'),
      description?: string(name='Description'),
      dialogId?: long(name='DialogId'),
      dialogName?: string(name='DialogName'),
      isOnline?: boolean(name='IsOnline'),
      isSampleDialog?: boolean(name='IsSampleDialog'),
      modifyTime?: string(name='ModifyTime'),
      modifyUserId?: string(name='ModifyUserId'),
      modifyUserName?: string(name='ModifyUserName'),
      status?: int32(name='Status'),
    }
  ](name='Dialogs'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model QueryDialogsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDialogsResponseBody(name='body'),
}

async function queryDialogsWithOptions(request: QueryDialogsRequest, runtime: Util.RuntimeOptions): QueryDialogsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dialogName)) {
    query['DialogName'] = request.dialogName;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDialogs',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDialogs(request: QueryDialogsRequest): QueryDialogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDialogsWithOptions(request, runtime);
}

model QueryEntitiesRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogId?: long(name='DialogId'),
  entityName?: string(name='EntityName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model QueryEntitiesResponseBody = {
  entities?: [ 
    {
      createTime?: string(name='CreateTime'),
      createUserId?: string(name='CreateUserId'),
      createUserName?: string(name='CreateUserName'),
      entityId?: long(name='EntityId'),
      entityName?: string(name='EntityName'),
      entityType?: string(name='EntityType'),
      members?: [ 
        {
          memberName?: string(name='MemberName'),
          synonyms?: [ string ](name='Synonyms'),
        }
      ](name='Members'),
      modifyTime?: string(name='ModifyTime'),
      modifyUserId?: string(name='ModifyUserId'),
      modifyUserName?: string(name='ModifyUserName'),
      regex?: string(name='Regex'),
    }
  ](name='Entities'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model QueryEntitiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEntitiesResponseBody(name='body'),
}

async function queryEntitiesWithOptions(request: QueryEntitiesRequest, runtime: Util.RuntimeOptions): QueryEntitiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dialogId)) {
    query['DialogId'] = request.dialogId;
  }
  if (!Util.isUnset(request.entityName)) {
    query['EntityName'] = request.entityName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEntities',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEntities(request: QueryEntitiesRequest): QueryEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEntitiesWithOptions(request, runtime);
}

model QueryIntentsRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogId?: long(name='DialogId'),
  instanceId?: string(name='InstanceId', description='机器人实例 ID'),
  intentName?: string(name='IntentName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model QueryIntentsResponseBody = {
  intents?: [ 
    {
      createTime?: string(name='CreateTime'),
      createUserId?: string(name='CreateUserId'),
      createUserName?: string(name='CreateUserName'),
      intentId?: long(name='IntentId'),
      modifyTime?: string(name='ModifyTime'),
      modifyUserId?: string(name='ModifyUserId'),
      modifyUserName?: string(name='ModifyUserName'),
      name?: string(name='Name'),
      ruleCheck?: [ 
        {
          error?: [ string ](name='Error'),
          strict?: boolean(name='Strict'),
          text?: string(name='Text'),
          warning?: [ string ](name='Warning'),
        }
      ](name='RuleCheck'),
      slot?: [ 
        {
          isArray?: boolean(name='IsArray'),
          isNecessary?: boolean(name='IsNecessary'),
          lifeSpan?: int32(name='LifeSpan'),
          name?: string(name='Name'),
          question?: [ string ](name='Question'),
          slotId?: string(name='SlotId'),
          tags?: [ 
            {
              userSayId?: string(name='UserSayId'),
              value?: string(name='Value'),
            }
          ](name='Tags'),
          value?: string(name='Value'),
        }
      ](name='Slot'),
      userSay?: [ 
        {
          data?: [ 
            {
              slotId?: string(name='SlotId'),
              text?: string(name='Text'),
            }
          ](name='Data'),
          strict?: boolean(name='Strict'),
          userSayId?: string(name='UserSayId'),
        }
      ](name='UserSay'),
    }
  ](name='Intents'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model QueryIntentsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryIntentsResponseBody(name='body'),
}

async function queryIntentsWithOptions(request: QueryIntentsRequest, runtime: Util.RuntimeOptions): QueryIntentsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dialogId)) {
    query['DialogId'] = request.dialogId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.intentName)) {
    query['IntentName'] = request.intentName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryIntents',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryIntents(request: QueryIntentsRequest): QueryIntentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryIntentsWithOptions(request, runtime);
}

model QueryKnowledgesRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  categoryId?: long(name='CategoryId'),
  coreWordName?: string(name='CoreWordName'),
  knowledgeTitle?: string(name='KnowledgeTitle'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model QueryKnowledgesResponseBody = {
  knowledges?: [ 
    {
      categoryId?: long(name='CategoryId'),
      coreWords?: [ string ](name='CoreWords'),
      createTime?: string(name='CreateTime'),
      createUserName?: string(name='CreateUserName'),
      endDate?: string(name='EndDate'),
      knowledgeId?: long(name='KnowledgeId'),
      knowledgeStatus?: int32(name='KnowledgeStatus'),
      knowledgeTitle?: string(name='KnowledgeTitle'),
      modifyTime?: string(name='ModifyTime'),
      modifyUserName?: string(name='ModifyUserName'),
      startDate?: string(name='StartDate'),
      version?: string(name='Version'),
    }
  ](name='Knowledges'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model QueryKnowledgesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryKnowledgesResponseBody(name='body'),
}

async function queryKnowledgesWithOptions(request: QueryKnowledgesRequest, runtime: Util.RuntimeOptions): QueryKnowledgesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.coreWordName)) {
    query['CoreWordName'] = request.coreWordName;
  }
  if (!Util.isUnset(request.knowledgeTitle)) {
    query['KnowledgeTitle'] = request.knowledgeTitle;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryKnowledges',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryKnowledges(request: QueryKnowledgesRequest): QueryKnowledgesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryKnowledgesWithOptions(request, runtime);
}

model QueryPerspectivesRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
}

model QueryPerspectivesResponseBody = {
  perspectives?: [ 
    {
      createTime?: string(name='CreateTime'),
      createUserName?: string(name='CreateUserName'),
      modifyTime?: string(name='ModifyTime'),
      modifyUserName?: string(name='ModifyUserName'),
      name?: string(name='Name'),
      perspectiveCode?: string(name='PerspectiveCode'),
      perspectiveId?: string(name='PerspectiveId'),
      selfDefine?: boolean(name='SelfDefine'),
      status?: int32(name='Status'),
    }
  ](name='Perspectives'),
  requestId?: string(name='RequestId'),
}

model QueryPerspectivesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPerspectivesResponseBody(name='body'),
}

async function queryPerspectivesWithOptions(request: QueryPerspectivesRequest, runtime: Util.RuntimeOptions): QueryPerspectivesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPerspectives',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPerspectives(request: QueryPerspectivesRequest): QueryPerspectivesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPerspectivesWithOptions(request, runtime);
}

model QuerySystemEntitiesRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  entityName?: string(name='EntityName'),
}

model QuerySystemEntitiesResponseBody = {
  requestId?: string(name='RequestId'),
  systemEntities?: [ 
    {
      defaultQuestion?: string(name='DefaultQuestion'),
      entityCode?: string(name='EntityCode'),
      entityName?: string(name='EntityName'),
    }
  ](name='SystemEntities'),
}

model QuerySystemEntitiesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySystemEntitiesResponseBody(name='body'),
}

async function querySystemEntitiesWithOptions(request: QuerySystemEntitiesRequest, runtime: Util.RuntimeOptions): QuerySystemEntitiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.entityName)) {
    query['EntityName'] = request.entityName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySystemEntities',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySystemEntities(request: QuerySystemEntitiesRequest): QuerySystemEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySystemEntitiesWithOptions(request, runtime);
}

model RemoveEntityMemberRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  entityId?: long(name='EntityId'),
  member?: {
    memberName?: string(name='MemberName'),
    synonyms?: [ string ](name='Synonyms'),
  }(name='Member'),
  removeType?: string(name='RemoveType'),
}

model RemoveEntityMemberShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  entityId?: long(name='EntityId'),
  memberShrink?: string(name='Member'),
  removeType?: string(name='RemoveType'),
}

model RemoveEntityMemberResponseBody = {
  entityId?: long(name='EntityId'),
  requestId?: string(name='RequestId'),
}

model RemoveEntityMemberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveEntityMemberResponseBody(name='body'),
}

async function removeEntityMemberWithOptions(tmpReq: RemoveEntityMemberRequest, runtime: Util.RuntimeOptions): RemoveEntityMemberResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveEntityMemberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.member)) {
    request.memberShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.member, 'Member', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.memberShrink)) {
    query['Member'] = request.memberShrink;
  }
  if (!Util.isUnset(request.removeType)) {
    query['RemoveType'] = request.removeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveEntityMember',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeEntityMember(request: RemoveEntityMemberRequest): RemoveEntityMemberResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeEntityMemberWithOptions(request, runtime);
}

model RemoveSynonymRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  coreWordName?: string(name='CoreWordName'),
  synonym?: string(name='Synonym'),
}

model RemoveSynonymResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveSynonymResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveSynonymResponseBody(name='body'),
}

async function removeSynonymWithOptions(request: RemoveSynonymRequest, runtime: Util.RuntimeOptions): RemoveSynonymResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.coreWordName)) {
    query['CoreWordName'] = request.coreWordName;
  }
  if (!Util.isUnset(request.synonym)) {
    query['Synonym'] = request.synonym;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveSynonym',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeSynonym(request: RemoveSynonymRequest): RemoveSynonymResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeSynonymWithOptions(request, runtime);
}

model TestDialogFlowRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogId?: long(name='DialogId'),
}

model TestDialogFlowResponseBody = {
  requestId?: string(name='RequestId'),
}

model TestDialogFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TestDialogFlowResponseBody(name='body'),
}

async function testDialogFlowWithOptions(request: TestDialogFlowRequest, runtime: Util.RuntimeOptions): TestDialogFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dialogId)) {
    query['DialogId'] = request.dialogId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TestDialogFlow',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function testDialogFlow(request: TestDialogFlowRequest): TestDialogFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return testDialogFlowWithOptions(request, runtime);
}

model UpdateCategoryRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  categoryId?: long(name='CategoryId'),
  name?: string(name='Name'),
}

model UpdateCategoryResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateCategoryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCategoryResponseBody(name='body'),
}

async function updateCategoryWithOptions(request: UpdateCategoryRequest, runtime: Util.RuntimeOptions): UpdateCategoryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.categoryId)) {
    query['CategoryId'] = request.categoryId;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCategory',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCategory(request: UpdateCategoryRequest): UpdateCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCategoryWithOptions(request, runtime);
}

model UpdateCoreWordRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  coreWordCode?: string(name='CoreWordCode'),
  coreWordName?: string(name='CoreWordName'),
}

model UpdateCoreWordResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateCoreWordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCoreWordResponseBody(name='body'),
}

async function updateCoreWordWithOptions(request: UpdateCoreWordRequest, runtime: Util.RuntimeOptions): UpdateCoreWordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.coreWordCode)) {
    query['CoreWordCode'] = request.coreWordCode;
  }
  if (!Util.isUnset(request.coreWordName)) {
    query['CoreWordName'] = request.coreWordName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCoreWord',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCoreWord(request: UpdateCoreWordRequest): UpdateCoreWordResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCoreWordWithOptions(request, runtime);
}

model UpdateDialogRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  description?: string(name='Description'),
  dialogId?: long(name='DialogId'),
  dialogName?: string(name='DialogName'),
}

model UpdateDialogResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDialogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDialogResponseBody(name='body'),
}

async function updateDialogWithOptions(request: UpdateDialogRequest, runtime: Util.RuntimeOptions): UpdateDialogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.dialogId)) {
    query['DialogId'] = request.dialogId;
  }
  if (!Util.isUnset(request.dialogName)) {
    query['DialogName'] = request.dialogName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDialog',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDialog(request: UpdateDialogRequest): UpdateDialogResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDialogWithOptions(request, runtime);
}

model UpdateDialogFlowRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogId?: long(name='DialogId'),
  moduleDefinition?: {
    globalVars?: map[string]any(name='GlobalVars'),
    moduleDefinition?: PaasProcessData(name='ModuleDefinition'),
  }(name='ModuleDefinition'),
}

model UpdateDialogFlowShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  dialogId?: long(name='DialogId'),
  moduleDefinitionShrink?: string(name='ModuleDefinition'),
}

model UpdateDialogFlowResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDialogFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateDialogFlowResponseBody(name='body'),
}

async function updateDialogFlowWithOptions(tmpReq: UpdateDialogFlowRequest, runtime: Util.RuntimeOptions): UpdateDialogFlowResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateDialogFlowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.moduleDefinition)) {
    request.moduleDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.moduleDefinition, 'ModuleDefinition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.dialogId)) {
    query['DialogId'] = request.dialogId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.moduleDefinitionShrink)) {
    body['ModuleDefinition'] = request.moduleDefinitionShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateDialogFlow',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateDialogFlow(request: UpdateDialogFlowRequest): UpdateDialogFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDialogFlowWithOptions(request, runtime);
}

model UpdateEntityRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  entityId?: long(name='EntityId'),
  entityName?: string(name='EntityName'),
  entityType?: string(name='EntityType'),
  members?: [ 
    {
      memberName?: string(name='MemberName'),
      synonyms?: [ string ](name='Synonyms'),
    }
  ](name='Members'),
  regex?: string(name='Regex'),
}

model UpdateEntityShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  entityId?: long(name='EntityId'),
  entityName?: string(name='EntityName'),
  entityType?: string(name='EntityType'),
  membersShrink?: string(name='Members'),
  regex?: string(name='Regex'),
}

model UpdateEntityResponseBody = {
  entityId?: long(name='EntityId'),
  requestId?: string(name='RequestId'),
}

model UpdateEntityResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateEntityResponseBody(name='body'),
}

async function updateEntityWithOptions(tmpReq: UpdateEntityRequest, runtime: Util.RuntimeOptions): UpdateEntityResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateEntityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.members)) {
    request.membersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.members, 'Members', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.entityId)) {
    query['EntityId'] = request.entityId;
  }
  if (!Util.isUnset(request.entityName)) {
    query['EntityName'] = request.entityName;
  }
  if (!Util.isUnset(request.entityType)) {
    query['EntityType'] = request.entityType;
  }
  if (!Util.isUnset(request.regex)) {
    query['Regex'] = request.regex;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.membersShrink)) {
    body['Members'] = request.membersShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEntity',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateEntity(request: UpdateEntityRequest): UpdateEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEntityWithOptions(request, runtime);
}

model UpdateIntentRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  intentDefinition?: IntentCreateDTO(name='IntentDefinition'),
  intentId?: long(name='IntentId'),
}

model UpdateIntentShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  intentDefinitionShrink?: string(name='IntentDefinition'),
  intentId?: long(name='IntentId'),
}

model UpdateIntentResponseBody = {
  intentId?: long(name='IntentId'),
  requestId?: string(name='RequestId'),
}

model UpdateIntentResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateIntentResponseBody(name='body'),
}

async function updateIntentWithOptions(tmpReq: UpdateIntentRequest, runtime: Util.RuntimeOptions): UpdateIntentResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateIntentShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.intentDefinition)) {
    request.intentDefinitionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.intentDefinition, 'IntentDefinition', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.intentDefinitionShrink)) {
    query['IntentDefinition'] = request.intentDefinitionShrink;
  }
  if (!Util.isUnset(request.intentId)) {
    query['IntentId'] = request.intentId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateIntent',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateIntent(request: UpdateIntentRequest): UpdateIntentResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateIntentWithOptions(request, runtime);
}

model UpdateKnowledgeRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  knowledge?: {
    categoryId?: long(name='CategoryId'),
    endDate?: string(name='EndDate'),
    knowledgeId?: long(name='KnowledgeId'),
    knowledgeTitle?: string(name='KnowledgeTitle'),
    knowledgeType?: int32(name='KnowledgeType'),
    outlines?: [ 
      {
        action?: string(name='Action'),
        knowledgeId?: long(name='KnowledgeId'),
        outlineId?: long(name='OutlineId'),
        title?: string(name='Title'),
      }
    ](name='Outlines'),
    simQuestions?: [ 
      {
        action?: string(name='Action'),
        simQuestionId?: long(name='SimQuestionId'),
        title?: string(name='Title'),
      }
    ](name='SimQuestions'),
    solutions?: [ 
      {
        action?: string(name='Action'),
        content?: string(name='Content'),
        perspectiveIds?: [ string ](name='PerspectiveIds'),
        plainText?: string(name='PlainText'),
        solutionId?: long(name='SolutionId'),
      }
    ](name='Solutions'),
    startDate?: string(name='StartDate'),
  }(name='Knowledge'),
}

model UpdateKnowledgeShrinkRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  knowledgeShrink?: string(name='Knowledge'),
}

model UpdateKnowledgeResponseBody = {
  knowledgeId?: long(name='KnowledgeId'),
  requestId?: string(name='RequestId'),
}

model UpdateKnowledgeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateKnowledgeResponseBody(name='body'),
}

async function updateKnowledgeWithOptions(tmpReq: UpdateKnowledgeRequest, runtime: Util.RuntimeOptions): UpdateKnowledgeResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateKnowledgeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.knowledge)) {
    request.knowledgeShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.knowledge, 'Knowledge', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.knowledgeShrink)) {
    body['Knowledge'] = request.knowledgeShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateKnowledge',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateKnowledge(request: UpdateKnowledgeRequest): UpdateKnowledgeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateKnowledgeWithOptions(request, runtime);
}

model UpdatePerspectiveRequest {
  agentKey?: string(name='AgentKey', description='业务空间key,不设置则访问默认业务空间，key值在主账号业务管理页面获取'),
  name?: string(name='Name'),
  perspectiveId?: string(name='PerspectiveId'),
}

model UpdatePerspectiveResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdatePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePerspectiveResponseBody(name='body'),
}

async function updatePerspectiveWithOptions(request: UpdatePerspectiveRequest, runtime: Util.RuntimeOptions): UpdatePerspectiveResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.agentKey)) {
    query['AgentKey'] = request.agentKey;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.perspectiveId)) {
    query['PerspectiveId'] = request.perspectiveId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePerspective',
    version = '2017-10-11',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updatePerspective(request: UpdatePerspectiveRequest): UpdatePerspectiveResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePerspectiveWithOptions(request, runtime);
}

