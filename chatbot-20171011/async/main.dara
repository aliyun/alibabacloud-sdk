/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Chatbot';
  @version = '2017-10-11';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model Children {
  areaCode?: string(name='AreaCode', description='地区代号'),
  categoryId?: long(name='CategoryId', description='分类Id'),
  childrens?: [
    Children
  ](name='Childrens', description='子元素'),
  name?: string(name='Name', description='名称'),
  parentCategoryId?: long(name='ParentCategoryId', description='父分类Id'),
}

model IntentCreateDTO {
  intentId?: long(name='IntentId', description='IntentId'),
  name?: string(name='Name', description='Name'),
  ruleCheck?: [
    RuleMtopDTO
  ](name='RuleCheck', description='RuleCheck'),
  slot?: [
    SlotrecordMtopDTO
  ](name='Slot'),
  userSay?: [
    UsersayMtopDTO
  ](name='UserSay', description='UserSay'),
}

model PaasButtonDTO {
  name?: string(name='Name', description='Name'),
  text?: string(name='Text', description='Text'),
  type?: string(name='Type', description='Type'),
}

model PaasButtonListDTO {
  button?: [
    PaasButtonDTO
  ](name='Button', description='Button'),
  intro?: string(name='Intro', description='Intro'),
}

model PaasConditionEntryDTO {
  id?: string(name='Id', description='Id'),
  name?: string(name='Name', description='Name'),
  term?: string(name='Term', description='Term'),
  type?: string(name='Type', description='Type'),
  value?: string(name='Value', description='Value'),
}

model PaasConditionSetDTO {
  conditionEntries?: [
    PaasConditionEntryDTO
  ](name='ConditionEntries', description='ConditionEntries'),
}

model PaasEdgeDTO {
  id?: string(name='Id', description='Id'),
  label?: string(name='Label', description='Label'),
  source?: string(name='Source', description='Source'),
  target?: string(name='Target', description='Target'),
}

model PaasEntryDTO {
  pluginFieldDataEntry?: PaasEntryPluginFieldDataDTO(name='PluginFieldDataEntry', description='PluginFieldDataEntry'),
}

model PaasEntryPluginFieldDataDTO {
  contentEntry?: [
    PaasConditionSetDTO
  ](name='ContentEntry', description='ContentEntry'),
  lifeSpan?: long(name='LifeSpan', description='LifeSpan'),
  name?: string(name='Name', description='Name'),
}

model PaasFunctionDTO {
  pluginFieldDataFunction?: PaasFunctionPluginFieldDataDTO(name='PluginFieldDataFunction', description='PluginFieldDataFunction'),
}

model PaasFunctionPluginFieldDataDTO {
  aliyunFunction?: string(name='AliyunFunction', description='AliyunFunction'),
  aliyunService?: string(name='AliyunService', description='AliyunService'),
  code?: string(name='Code', description='Code'),
  description?: string(name='Description', description='Description'),
  endPoint?: string(name='EndPoint', description='EndPoint'),
  function?: string(name='Function', description='Function'),
  name?: string(name='Name', description='Name'),
  params?: map[string]any(name='Params', description='Params'),
  switch?: [
    PaasSwitchCaseDTO
  ](name='Switch', description='Switch'),
  type?: string(name='Type', description='Type'),
}

model PaasNodeDTO {
  code?: string(name='Code', description='Code'),
  id?: string(name='Id', description='Id'),
  label?: string(name='Label', description='Label'),
  pluginData?: PaasPluginDataDTO(name='PluginData', description='PluginData'),
  xx?: double(name='Xx', description='Xx'),
  yy?: double(name='Yy', description='Yy'),
}

model PaasPluginDataDTO {
  entry?: PaasEntryDTO(name='Entry'),
  function?: PaasFunctionDTO(name='Function'),
  response?: PaasResponseDTO(name='Response'),
  slot?: PaasSlotDTO(name='Slot'),
}

model PaasProcessData {
  edges?: [
    PaasEdgeDTO
  ](name='Edges', description='Edges'),
  nodes?: [
    PaasNodeDTO
  ](name='Nodes', description='Nodes'),
}

model PaasResponseDTO {
  pluginFieldDataResponse?: PaasResponsePluginFieldDataDTO(name='PluginFieldDataResponse'),
}

model PaasResponseNodeContentDTO {
  buttonList?: PaasButtonListDTO(name='ButtonList', description='ButtonList'),
  image?: string(name='Image', description='Image'),
  text?: string(name='Text', description='Text'),
  type?: string(name='Type', description='Type'),
}

model PaasResponsePluginFieldDataDTO {
  contentResponse?: PaasResponseNodeContentDTO(name='ContentResponse', description='ContentResponse'),
  name?: string(name='Name', description='Name'),
}

model PaasSlotConfigDTO {
  isArray?: boolean(name='IsArray', description='IsArray'),
  isNecessary?: boolean(name='IsNecessary', description='IsNecessary'),
  lifeSpan?: int32(name='LifeSpan', description='LifeSpan'),
  name?: string(name='Name', description='Name'),
  question?: [ string ](name='Question', description='Question'),
  value?: string(name='Value', description='Value'),
}

model PaasSlotDTO {
  pluginFieldDataSlot?: PaasSlotPluginFieldDataDTO(name='PluginFieldDataSlot'),
}

model PaasSlotPluginFieldDataDTO {
  contentSlot?: [
    PaasSlotConfigDTO
  ](name='ContentSlot', description='ContentSlot'),
  intentId?: string(name='IntentId', description='IntentId'),
  intentName?: string(name='IntentName', description='IntentName'),
  isSysIntent?: boolean(name='IsSysIntent', description='IsSysIntent'),
  name?: string(name='Name', description='Name'),
}

model PaasSwitchCaseDTO {
  id?: string(name='Id', description='Id'),
  label?: string(name='Label', description='Label'),
  type?: string(name='Type', description='Type'),
  value?: string(name='Value', description='Value'),
  variableName?: string(name='VariableName', description='VariableName'),
}

model RuleMtopDTO {
  error?: [ string ](name='Error', description='Error'),
  strict?: boolean(name='Strict', description='Strict'),
  text?: string(name='Text', description='Text'),
  warning?: [ string ](name='Warning', description='Warning'),
}

model SectionMtopDTO {
  slotId?: string(name='SlotId', description='SlotId'),
  text?: string(name='Text', description='Text'),
}

model SlotrecordMtopDTO {
  id?: string(name='Id', description='Id'),
  isArray?: boolean(name='IsArray', description='IsArray'),
  isNecessary?: boolean(name='IsNecessary', description='IsNecessary'),
  lifeSpan?: int32(name='LifeSpan', description='LifeSpan'),
  name?: string(name='Name', description='Name'),
  question?: [ string ](name='Question', description='Question'),
  tags?: [
    TagMtopDTO
  ](name='Tags', description='Tags'),
  value?: string(name='Value', description='Value'),
}

model TagMtopDTO {
  userSayId?: string(name='UserSayId', description='UserSayId'),
  value?: string(name='Value', description='Value'),
}

model UsersayMtopDTO {
  data?: [
    SectionMtopDTO
  ](name='Data', description='Data'),
  id?: string(name='Id', description='Id'),
  strict?: boolean(name='Strict', description='Strict'),
}

model ActivatePerspectiveRequest {
  perspectiveId: string(name='PerspectiveId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ActivatePerspectiveResponseBody = {
  requestId?: string(name='RequestId'),
}

model ActivatePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  body: ActivatePerspectiveResponseBody(name='body'),
}

async function activatePerspective(request: ActivatePerspectiveRequest): ActivatePerspectiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActivatePerspective', 'POST', '/', 'json', false, 'json', request);
}

model AddSynonymRequest {
  coreWordName: string(name='CoreWordName', position='Query'),
  synonym: string(name='Synonym', position='Query'),
}

model AddSynonymResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddSynonymResponse = {
  headers: map[string]string(name='headers'),
  body: AddSynonymResponseBody(name='body'),
}

async function addSynonym(request: AddSynonymRequest): AddSynonymResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddSynonym', 'POST', '/', 'json', false, 'json', request);
}

model AppendEntityMemberRequest {
  applyType: string(name='ApplyType', position='Query'),
  entityId: long(name='EntityId', position='Query'),
  member: {
    memberName: string(name='MemberName'),
    synonyms: [ string ](name='Synonyms'),
  }(name='Member', position='Query'),
}

model AppendEntityMemberResponseBody = {
  entityId?: long(name='EntityId'),
  requestId?: string(name='RequestId'),
}

model AppendEntityMemberResponse = {
  headers: map[string]string(name='headers'),
  body: AppendEntityMemberResponseBody(name='body'),
}

async function appendEntityMember(request: AppendEntityMemberRequest): AppendEntityMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AppendEntityMember', 'POST', '/', 'json', false, 'json', request);
}

model AssociateRequest {
  instanceId: string(name='InstanceId', position='Query'),
  perspective?: [ string ](name='Perspective', position='Query'),
  recommendNum?: int32(name='RecommendNum', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  sessionId?: string(name='SessionId', position='Query'),
  utterance: string(name='Utterance', position='Query'),
}

model AssociateResponseBody = {
  associate?: [ 
    {
      title?: string(name='Title'),
    }
  ](name='Associate'),
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
  sessionId?: string(name='SessionId'),
}

model AssociateResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateResponseBody(name='body'),
}

async function associate(request: AssociateRequest): AssociateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Associate', 'POST', '/', 'json', false, 'json', request);
}

model ChatRequest {
  instanceId: string(name='InstanceId', position='Query'),
  intentName?: string(name='IntentName', position='Query'),
  knowledgeId?: string(name='KnowledgeId', position='Query'),
  perspective?: [ string ](name='Perspective', position='Query'),
  recommend?: boolean(name='Recommend', position='Query'),
  senderId?: string(name='SenderId', position='Query'),
  senderNick?: string(name='SenderNick', position='Query'),
  sessionId?: string(name='SessionId', position='Query'),
  tag?: string(name='Tag', position='Query'),
  utterance: string(name='Utterance', position='Query'),
  vendorParam?: string(name='VendorParam', position='Query'),
}

model ChatResponseBody = {
  messageId?: string(name='MessageId'),
  messages?: [ 
    {
      answerSource?: string(name='AnswerSource'),
      answerType?: string(name='AnswerType'),
      knowledge?: {
        answerSource?: string(name='AnswerSource'),
        category?: string(name='Category'),
        content?: string(name='Content'),
        contentType?: string(name='ContentType'),
        hitStatement?: string(name='HitStatement'),
        id?: string(name='Id'),
        relatedKnowledges?: [ 
          {
            knowledgeId?: string(name='KnowledgeId'),
            title?: string(name='Title'),
          }
        ](name='RelatedKnowledges'),
        score?: double(name='Score'),
        summary?: string(name='Summary'),
        title?: string(name='Title'),
      }(name='Knowledge'),
      recommends?: [ 
        {
          answerSource?: string(name='AnswerSource'),
          category?: string(name='Category'),
          content?: string(name='Content'),
          knowledgeId?: string(name='KnowledgeId'),
          score?: double(name='Score'),
          summary?: string(name='Summary'),
          title?: string(name='Title'),
        }
      ](name='Recommends'),
      text?: {
        answerSource?: string(name='AnswerSource'),
        articleTitle?: string(name='ArticleTitle'),
        content?: string(name='Content'),
        contentType?: string(name='ContentType'),
        dialogName?: string(name='DialogName'),
        ext?: map[string]any(name='Ext'),
        externalFlags?: map[string]any(name='ExternalFlags'),
        hitStatement?: string(name='HitStatement'),
        intentName?: string(name='IntentName'),
        metaData?: string(name='MetaData'),
        nodeId?: string(name='NodeId'),
        nodeName?: string(name='NodeName'),
        score?: double(name='Score'),
        slots?: [ 
          {
            isHit?: boolean(name='IsHit'),
            name?: string(name='Name'),
            origin?: string(name='Origin'),
            value?: string(name='Value'),
          }
        ](name='Slots'),
        userDefinedChatTitle?: string(name='UserDefinedChatTitle'),
      }(name='Text'),
      type?: string(name='Type'),
    }
  ](name='Messages'),
  requestId?: string(name='RequestId'),
  sessionId?: string(name='SessionId'),
  tag?: string(name='Tag'),
}

model ChatResponse = {
  headers: map[string]string(name='headers'),
  body: ChatResponseBody(name='body'),
}

async function chat(request: ChatRequest): ChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Chat', 'POST', '/', 'json', false, 'json', request);
}

model CreateBizDataRangeRequest {
  dataType: string(name='DataType', position='Query'),
  manageCode: string(name='ManageCode', position='Query'),
  name: string(name='Name', position='Query'),
  parentBizDataRangeId?: long(name='ParentBizDataRangeId', position='Query'),
}

model CreateBizDataRangeResponseBody = {
  bizDataRangeId?: long(name='BizDataRangeId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateBizDataRangeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBizDataRangeResponseBody(name='body'),
}

async function createBizDataRange(request: CreateBizDataRangeRequest): CreateBizDataRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBizDataRange', 'POST', '/', 'json', false, 'json', request);
}

model CreateBotRequest {
  avatar?: string(name='Avatar', position='Query'),
  introduction?: string(name='Introduction', position='Query'),
  languageCode: string(name='LanguageCode', position='Query'),
  name: string(name='Name', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  robotType?: string(name='RobotType', position='Query'),
}

model CreateBotResponseBody = {
  instanceId?: string(name='InstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateBotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBotResponseBody(name='body'),
}

async function createBot(request: CreateBotRequest): CreateBotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBot', 'POST', '/', 'json', false, 'json', request);
}

model CreateCategoryRequest {
  bizCode?: string(name='BizCode', position='Query'),
  knowledgeType?: int32(name='KnowledgeType', position='Query'),
  name: string(name='Name', position='Query'),
  parentCategoryId?: long(name='ParentCategoryId', position='Query'),
}

model CreateCategoryResponseBody = {
  categoryId?: long(name='CategoryId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCategoryResponseBody(name='body'),
}

async function createCategory(request: CreateCategoryRequest): CreateCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCategory', 'POST', '/', 'json', false, 'json', request);
}

model CreateClusterLoopRequest {
  params: string(name='Params', position='Query'),
  title: string(name='Title', position='Query'),
}

model CreateClusterLoopResponseBody = {
  data?: long(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
}

model CreateClusterLoopResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterLoopResponseBody(name='body'),
}

async function createClusterLoop(request: CreateClusterLoopRequest): CreateClusterLoopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateClusterLoop', 'POST', '/', 'json', false, 'json', request);
}

model CreateCoreWordRequest {
  coreWordName: string(name='CoreWordName', position='Query'),
}

model CreateCoreWordResponseBody = {
  coreWordCode?: string(name='CoreWordCode'),
  requestId?: string(name='RequestId'),
}

model CreateCoreWordResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCoreWordResponseBody(name='body'),
}

async function createCoreWord(request: CreateCoreWordRequest): CreateCoreWordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCoreWord', 'POST', '/', 'json', false, 'json', request);
}

model CreateDialogRequest {
  description?: string(name='Description', position='Query'),
  dialogName: string(name='DialogName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
}

model CreateDialogResponseBody = {
  dialogId?: long(name='DialogId'),
  requestId?: string(name='RequestId'),
}

model CreateDialogResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDialogResponseBody(name='body'),
}

async function createDialog(request: CreateDialogRequest): CreateDialogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDialog', 'POST', '/', 'json', false, 'json', request);
}

model CreateEntityRequest {
  dialogId: long(name='DialogId', position='Query'),
  entityName: string(name='EntityName', position='Query'),
  entityType: string(name='EntityType', position='Query'),
  members?: [ 
    {
      memberName?: string(name='MemberName'),
      synonyms?: [ string ](name='Synonyms'),
    }
  ](name='Members', position='Query'),
  regex?: string(name='Regex', position='Query'),
}

model CreateEntityResponseBody = {
  entityId?: long(name='EntityId'),
  requestId?: string(name='RequestId'),
}

model CreateEntityResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEntityResponseBody(name='body'),
}

async function createEntity(request: CreateEntityRequest): CreateEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEntity', 'POST', '/', 'json', false, 'json', request);
}

model CreateIntentRequest {
  dialogId: long(name='DialogId', position='Query'),
  intentDefinition: IntentCreateDTO(name='IntentDefinition', position='Query'),
}

model CreateIntentResponseBody = {
  intentId?: long(name='IntentId'),
  requestId?: string(name='RequestId'),
}

model CreateIntentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIntentResponseBody(name='body'),
}

async function createIntent(request: CreateIntentRequest): CreateIntentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIntent', 'POST', '/', 'json', false, 'json', request);
}

model CreateKnowledgeRequest {
  knowledge: {
    categoryId: long(name='CategoryId'),
    endDate?: string(name='EndDate'),
    knowledgeTitle: string(name='KnowledgeTitle'),
    knowledgeType?: int32(name='KnowledgeType'),
    outlines?: [ 
      {
        knowledgeId?: long(name='KnowledgeId'),
        title?: string(name='Title'),
      }
    ](name='Outlines'),
    simQuestions?: [ 
      {
        title: string(name='Title'),
      }
    ](name='SimQuestions'),
    solutions: [ 
      {
        content: string(name='Content'),
        perspectiveIds?: [ string ](name='PerspectiveIds'),
        plainText: string(name='PlainText'),
      }
    ](name='Solutions'),
    startDate?: string(name='StartDate'),
  }(name='Knowledge', position='Body'),
}

model CreateKnowledgeResponseBody = {
  knowledgeId?: long(name='KnowledgeId'),
  requestId?: string(name='RequestId'),
}

model CreateKnowledgeResponse = {
  headers: map[string]string(name='headers'),
  body: CreateKnowledgeResponseBody(name='body'),
}

async function createKnowledge(request: CreateKnowledgeRequest): CreateKnowledgeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateKnowledge', 'POST', '/', 'json', true, 'form', request);
}

model CreatePerspectiveRequest {
  name: string(name='Name', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreatePerspectiveResponseBody = {
  perspectiveId?: string(name='PerspectiveId'),
  requestId?: string(name='RequestId'),
}

model CreatePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePerspectiveResponseBody(name='body'),
}

async function createPerspective(request: CreatePerspectiveRequest): CreatePerspectiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePerspective', 'POST', '/', 'json', false, 'json', request);
}

model CreateSimilarityLoopRequest {
  multiParams: string(name='MultiParams', position='Query'),
  params: string(name='Params', position='Query'),
  title: string(name='Title', position='Query'),
}

model CreateSimilarityLoopResponseBody = {
  data?: long(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
}

model CreateSimilarityLoopResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSimilarityLoopResponseBody(name='body'),
}

async function createSimilarityLoop(request: CreateSimilarityLoopRequest): CreateSimilarityLoopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSimilarityLoop', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBizDataRangeRequest {
  bizDataRangeId: long(name='BizDataRangeId', position='Query'),
}

model DeleteBizDataRangeResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteBizDataRangeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBizDataRangeResponseBody(name='body'),
}

async function deleteBizDataRange(request: DeleteBizDataRangeRequest): DeleteBizDataRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBizDataRange', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBotRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DeleteBotResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBotResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBotResponseBody(name='body'),
}

async function deleteBot(request: DeleteBotRequest): DeleteBotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBot', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCategoryRequest {
  categoryId: long(name='CategoryId', position='Query'),
}

model DeleteCategoryResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCategoryResponseBody(name='body'),
}

async function deleteCategory(request: DeleteCategoryRequest): DeleteCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCategory', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCoreWordRequest {
  coreWordName: string(name='CoreWordName', position='Query'),
}

model DeleteCoreWordResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteCoreWordResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCoreWordResponseBody(name='body'),
}

async function deleteCoreWord(request: DeleteCoreWordRequest): DeleteCoreWordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCoreWord', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDialogRequest {
  dialogId: long(name='DialogId', position='Query'),
}

model DeleteDialogResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDialogResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDialogResponseBody(name='body'),
}

async function deleteDialog(request: DeleteDialogRequest): DeleteDialogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDialog', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEntityRequest {
  entityId: long(name='EntityId', position='Query'),
}

model DeleteEntityResponseBody = {
  entityId?: long(name='EntityId'),
  requestId?: string(name='RequestId'),
}

model DeleteEntityResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEntityResponseBody(name='body'),
}

async function deleteEntity(request: DeleteEntityRequest): DeleteEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEntity', 'POST', '/', 'json', false, 'json', request);
}

model DeleteIntentRequest {
  intentId: long(name='IntentId', position='Query'),
}

model DeleteIntentResponseBody = {
  intentId?: long(name='IntentId'),
  requestId?: string(name='RequestId'),
}

model DeleteIntentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteIntentResponseBody(name='body'),
}

async function deleteIntent(request: DeleteIntentRequest): DeleteIntentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteIntent', 'POST', '/', 'json', false, 'json', request);
}

model DeleteKnowledgeRequest {
  knowledgeId: long(name='KnowledgeId', position='Query'),
}

model DeleteKnowledgeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteKnowledgeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteKnowledgeResponseBody(name='body'),
}

async function deleteKnowledge(request: DeleteKnowledgeRequest): DeleteKnowledgeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteKnowledge', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBizDataRangeRequest {
  bizDataRangeId: long(name='BizDataRangeId', position='Query'),
}

model DescribeBizDataRangeResponseBody = {
  bizDataRangeId?: long(name='BizDataRangeId'),
  dataType?: int32(name='DataType'),
  manageCode?: string(name='ManageCode'),
  name?: string(name='Name'),
  parentBizDataRangeId?: long(name='ParentBizDataRangeId'),
  requestId?: string(name='RequestId'),
}

model DescribeBizDataRangeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBizDataRangeResponseBody(name='body'),
}

async function describeBizDataRange(request: DescribeBizDataRangeRequest): DescribeBizDataRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBizDataRange', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBotRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeBotResponseBody = {
  avatar?: string(name='Avatar'),
  categories?: [ 
    {
      categoryId?: long(name='CategoryId'),
      name?: string(name='Name'),
      parentCategoryId?: long(name='ParentCategoryId'),
    }
  ](name='Categories'),
  createTime?: string(name='CreateTime'),
  instanceId?: string(name='InstanceId'),
  introduction?: string(name='Introduction'),
  languageCode?: string(name='LanguageCode'),
  logo?: string(name='Logo'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  timeZone?: string(name='TimeZone'),
}

model DescribeBotResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBotResponseBody(name='body'),
}

async function describeBot(request: DescribeBotRequest): DescribeBotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBot', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCategoryRequest {
  categoryId: long(name='CategoryId', position='Query'),
}

model DescribeCategoryResponseBody = {
  categoryId?: long(name='CategoryId'),
  name?: string(name='Name'),
  parentCategoryId?: long(name='ParentCategoryId'),
  requestId?: string(name='RequestId'),
}

model DescribeCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCategoryResponseBody(name='body'),
}

async function describeCategory(request: DescribeCategoryRequest): DescribeCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCategory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCoreWordRequest {
  coreWordName: string(name='CoreWordName', position='Query'),
}

model DescribeCoreWordResponseBody = {
  coreWordCode?: string(name='CoreWordCode'),
  coreWordName?: string(name='CoreWordName'),
  createTime?: string(name='CreateTime'),
  modifyTime?: string(name='ModifyTime'),
  requestId?: string(name='RequestId'),
  synonyms?: [ string ](name='Synonyms'),
}

model DescribeCoreWordResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCoreWordResponseBody(name='body'),
}

async function describeCoreWord(request: DescribeCoreWordRequest): DescribeCoreWordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCoreWord', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDialogRequest {
  dialogId: long(name='DialogId', position='Query'),
}

model DescribeDialogResponseBody = {
  createTime?: string(name='CreateTime'),
  createUserId?: string(name='CreateUserId'),
  createUserName?: string(name='CreateUserName'),
  description?: string(name='Description'),
  dialogId?: long(name='DialogId'),
  dialogName?: string(name='DialogName'),
  isOnline?: boolean(name='IsOnline'),
  isSampleDialog?: boolean(name='IsSampleDialog'),
  modifyTime?: string(name='ModifyTime'),
  modifyUserId?: string(name='ModifyUserId'),
  modifyUserName?: string(name='ModifyUserName'),
  requestId?: string(name='RequestId'),
  status?: int32(name='Status'),
}

model DescribeDialogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDialogResponseBody(name='body'),
}

async function describeDialog(request: DescribeDialogRequest): DescribeDialogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDialog', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDialogFlowRequest {
  dialogId: long(name='DialogId', position='Query'),
}

model DescribeDialogFlowResponseBody = {
  accountId?: string(name='AccountId'),
  createTime?: string(name='CreateTime'),
  createUserId?: string(name='CreateUserId'),
  createUserName?: string(name='CreateUserName'),
  dialogId?: long(name='DialogId'),
  dialogName?: string(name='DialogName'),
  globalVars?: map[string]any(name='GlobalVars'),
  instanceId?: string(name='InstanceId'),
  modifyTime?: string(name='ModifyTime'),
  modifyUserId?: string(name='ModifyUserId'),
  modifyUserName?: string(name='ModifyUserName'),
  moduleDefinition?: PaasProcessData(name='ModuleDefinition'),
  moduleId?: long(name='ModuleId'),
  moduleName?: string(name='ModuleName'),
  requestId?: string(name='RequestId'),
  status?: int32(name='Status'),
  tags?: string(name='Tags'),
  templates?: string(name='Templates'),
}

model DescribeDialogFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDialogFlowResponseBody(name='body'),
}

async function describeDialogFlow(request: DescribeDialogFlowRequest): DescribeDialogFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDialogFlow', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEntitiesRequest {
  entityId: long(name='EntityId', position='Query'),
}

model DescribeEntitiesResponseBody = {
  createTime?: string(name='CreateTime'),
  createUserId?: string(name='CreateUserId'),
  createUserName?: string(name='CreateUserName'),
  entityId?: long(name='EntityId'),
  entityName?: string(name='EntityName'),
  entityType?: string(name='EntityType'),
  members?: [ 
    {
      memberName?: string(name='MemberName'),
      synonyms?: [ string ](name='Synonyms'),
    }
  ](name='Members'),
  modifyTime?: string(name='ModifyTime'),
  modifyUserId?: string(name='ModifyUserId'),
  modifyUserName?: string(name='ModifyUserName'),
  regex?: string(name='Regex'),
  requestId?: string(name='RequestId'),
}

model DescribeEntitiesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEntitiesResponseBody(name='body'),
}

async function describeEntities(request: DescribeEntitiesRequest): DescribeEntitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEntities', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIntentRequest {
  intentId: long(name='IntentId', position='Query'),
}

model DescribeIntentResponseBody = {
  createTime?: string(name='CreateTime'),
  createUserId?: string(name='CreateUserId'),
  createUserName?: string(name='CreateUserName'),
  dialogId?: long(name='DialogId'),
  intentId?: long(name='IntentId'),
  modifyTime?: string(name='ModifyTime'),
  modifyUserId?: string(name='ModifyUserId'),
  modifyUserName?: string(name='ModifyUserName'),
  name?: string(name='Name'),
  requestId?: string(name='RequestId'),
  ruleCheck?: [ 
    {
      error?: [ string ](name='Error'),
      strict?: boolean(name='Strict'),
      text?: string(name='Text'),
      warning?: [ string ](name='Warning'),
    }
  ](name='RuleCheck'),
  slot?: [ 
    {
      isArray?: boolean(name='IsArray'),
      isNecessary?: boolean(name='IsNecessary'),
      lifeSpan?: int32(name='LifeSpan'),
      name?: string(name='Name'),
      question?: [ string ](name='Question'),
      slotId?: string(name='SlotId'),
      tags?: [ 
        {
          userSayId?: string(name='UserSayId'),
          value?: string(name='Value'),
        }
      ](name='Tags'),
      value?: string(name='Value'),
    }
  ](name='Slot'),
  type?: string(name='Type'),
  userSay?: [ 
    {
      data?: [ 
        {
          slotId?: string(name='SlotId'),
          text?: string(name='Text'),
        }
      ](name='Data'),
      strict?: boolean(name='Strict'),
      userSayId?: string(name='UserSayId'),
    }
  ](name='UserSay'),
}

model DescribeIntentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIntentResponseBody(name='body'),
}

async function describeIntent(request: DescribeIntentRequest): DescribeIntentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIntent', 'POST', '/', 'json', false, 'json', request);
}

model DescribeKnowledgeRequest {
  knowledgeId: long(name='KnowledgeId', position='Query'),
}

model DescribeKnowledgeResponseBody = {
  categoryId?: long(name='CategoryId'),
  coreWords?: [ string ](name='CoreWords'),
  createTime?: string(name='CreateTime'),
  createUserName?: string(name='CreateUserName'),
  endDate?: string(name='EndDate'),
  keyWords?: [ string ](name='KeyWords'),
  knowledgeId?: long(name='KnowledgeId'),
  knowledgeStatus?: int32(name='KnowledgeStatus'),
  knowledgeTitle?: string(name='KnowledgeTitle'),
  knowledgeType?: int32(name='KnowledgeType'),
  modifyTime?: string(name='ModifyTime'),
  modifyUserName?: string(name='ModifyUserName'),
  outlines?: [ 
    {
      knowledgeId?: long(name='KnowledgeId'),
      outlineId?: long(name='OutlineId'),
      title?: string(name='Title'),
    }
  ](name='Outlines'),
  requestId?: string(name='RequestId'),
  simQuestions?: [ 
    {
      createTime?: string(name='CreateTime'),
      modifyTime?: string(name='ModifyTime'),
      simQuestionId?: long(name='SimQuestionId'),
      title?: string(name='Title'),
    }
  ](name='SimQuestions'),
  solutions?: [ 
    {
      content?: string(name='Content'),
      createTime?: string(name='CreateTime'),
      modifyTime?: string(name='ModifyTime'),
      perspectiveIds?: [ string ](name='PerspectiveIds'),
      plainText?: string(name='PlainText'),
      solutionId?: long(name='SolutionId'),
      summary?: string(name='Summary'),
    }
  ](name='Solutions'),
  startDate?: string(name='StartDate'),
  version?: int32(name='Version'),
}

model DescribeKnowledgeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeKnowledgeResponseBody(name='body'),
}

async function describeKnowledge(request: DescribeKnowledgeRequest): DescribeKnowledgeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeKnowledge', 'POST', '/', 'json', false, 'json', request);
}

model DescribePerspectiveRequest {
  perspectiveId: string(name='PerspectiveId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribePerspectiveResponseBody = {
  createTime?: string(name='CreateTime'),
  createUserName?: string(name='CreateUserName'),
  modifyTime?: string(name='ModifyTime'),
  modifyUserName?: string(name='ModifyUserName'),
  name?: string(name='Name'),
  perspectiveCode?: string(name='PerspectiveCode'),
  perspectiveId?: string(name='PerspectiveId'),
  requestId?: string(name='RequestId'),
  selfDefine?: boolean(name='SelfDefine'),
  status?: int32(name='Status'),
}

model DescribePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePerspectiveResponseBody(name='body'),
}

async function describePerspective(request: DescribePerspectiveRequest): DescribePerspectiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePerspective', 'POST', '/', 'json', false, 'json', request);
}

model DisableDialogFlowRequest {
  dialogId: long(name='DialogId', position='Query'),
}

model DisableDialogFlowResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableDialogFlowResponse = {
  headers: map[string]string(name='headers'),
  body: DisableDialogFlowResponseBody(name='body'),
}

async function disableDialogFlow(request: DisableDialogFlowRequest): DisableDialogFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableDialogFlow', 'POST', '/', 'json', false, 'json', request);
}

model DisableKnowledgeRequest {
  knowledgeId: long(name='KnowledgeId', position='Query'),
}

model DisableKnowledgeResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableKnowledgeResponse = {
  headers: map[string]string(name='headers'),
  body: DisableKnowledgeResponseBody(name='body'),
}

async function disableKnowledge(request: DisableKnowledgeRequest): DisableKnowledgeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableKnowledge', 'POST', '/', 'json', false, 'json', request);
}

model FeedbackRequest {
  feedback: string(name='Feedback', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  messageId: string(name='MessageId', position='Query'),
  sessionId?: string(name='SessionId', position='Query'),
}

model FeedbackResponseBody = {
  feedback?: string(name='Feedback'),
  httpStatus?: long(name='HttpStatus'),
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model FeedbackResponse = {
  headers: map[string]string(name='headers'),
  body: FeedbackResponseBody(name='body'),
}

async function feedback(request: FeedbackRequest): FeedbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'Feedback', 'POST', '/', 'json', false, 'json', request);
}

model GetAsyncResultRequest {
  regionId?: string(name='RegionId', position='Host'),
  taskId: string(name='TaskId', minimum=0, maximum=100000000, position='Query'),
}

model GetAsyncResultResponseBody = {
  code?: int32(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetAsyncResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetAsyncResultResponseBody(name='body'),
}

async function getAsyncResult(request: GetAsyncResultRequest): GetAsyncResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAsyncResult', 'POST', '/', 'json', false, 'json', request);
}

model GetBotChatDataRequest {
  endTime: string(name='EndTime', position='Query'),
  robotInstanceId: string(name='RobotInstanceId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model GetBotChatDataResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model GetBotChatDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetBotChatDataResponseBody(name='body'),
}

async function getBotChatData(request: GetBotChatDataRequest): GetBotChatDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBotChatData', 'POST', '/', 'json', false, 'json', request);
}

model GetBotDsStatDataRequest {
  endTime: string(name='EndTime', position='Query'),
  robotInstanceId: string(name='RobotInstanceId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model GetBotDsStatDataResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model GetBotDsStatDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetBotDsStatDataResponseBody(name='body'),
}

async function getBotDsStatData(request: GetBotDsStatDataRequest): GetBotDsStatDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBotDsStatData', 'POST', '/', 'json', false, 'json', request);
}

model GetBotKnowledgeStatDataRequest {
  endTime: string(name='EndTime', position='Query'),
  robotInstanceId: string(name='RobotInstanceId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model GetBotKnowledgeStatDataResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model GetBotKnowledgeStatDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetBotKnowledgeStatDataResponseBody(name='body'),
}

async function getBotKnowledgeStatData(request: GetBotKnowledgeStatDataRequest): GetBotKnowledgeStatDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBotKnowledgeStatData', 'POST', '/', 'json', false, 'json', request);
}

model GetBotSessionDataRequest {
  endTime: string(name='EndTime', position='Query'),
  robotInstanceId: string(name='RobotInstanceId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model GetBotSessionDataResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model GetBotSessionDataResponse = {
  headers: map[string]string(name='headers'),
  body: GetBotSessionDataResponseBody(name='body'),
}

async function getBotSessionData(request: GetBotSessionDataRequest): GetBotSessionDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetBotSessionData', 'POST', '/', 'json', false, 'json', request);
}

model GetConversationListRequest {
  endDate?: string(name='EndDate', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageNumber?: string(name='PageNumber', position='Query'),
  pageSize?: string(name='PageSize', position='Query'),
  senderId?: string(name='SenderId', position='Query'),
  sessionId?: string(name='SessionId', position='Query'),
  startDate?: string(name='StartDate', position='Query'),
}

model GetConversationListResponseBody = {
  messages?: [  map[string]any ](name='Messages'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCounts?: long(name='TotalCounts'),
}

model GetConversationListResponse = {
  headers: map[string]string(name='headers'),
  body: GetConversationListResponseBody(name='body'),
}

async function getConversationList(request: GetConversationListRequest): GetConversationListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConversationList', 'POST', '/', 'json', false, 'json', request);
}

model ListBotChatHistorysRequest {
  endTime: string(name='EndTime', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  robotInstanceId: string(name='RobotInstanceId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model ListBotChatHistorysResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotChatHistorysResponse = {
  headers: map[string]string(name='headers'),
  body: ListBotChatHistorysResponseBody(name='body'),
}

async function listBotChatHistorys(request: ListBotChatHistorysRequest): ListBotChatHistorysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBotChatHistorys', 'POST', '/', 'json', false, 'json', request);
}

model ListBotColdDsDatasRequest {
  endTime: string(name='EndTime', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  robotInstanceId: string(name='RobotInstanceId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model ListBotColdDsDatasResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotColdDsDatasResponse = {
  headers: map[string]string(name='headers'),
  body: ListBotColdDsDatasResponseBody(name='body'),
}

async function listBotColdDsDatas(request: ListBotColdDsDatasRequest): ListBotColdDsDatasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBotColdDsDatas', 'POST', '/', 'json', false, 'json', request);
}

model ListBotColdKnowledgesRequest {
  endTime: string(name='EndTime', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  robotInstanceId: string(name='RobotInstanceId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model ListBotColdKnowledgesResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotColdKnowledgesResponse = {
  headers: map[string]string(name='headers'),
  body: ListBotColdKnowledgesResponseBody(name='body'),
}

async function listBotColdKnowledges(request: ListBotColdKnowledgesRequest): ListBotColdKnowledgesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBotColdKnowledges', 'POST', '/', 'json', false, 'json', request);
}

model ListBotDsDetailsRequest {
  endTime: string(name='EndTime', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  robotInstanceId: string(name='RobotInstanceId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model ListBotDsDetailsResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotDsDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListBotDsDetailsResponseBody(name='body'),
}

async function listBotDsDetails(request: ListBotDsDetailsRequest): ListBotDsDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBotDsDetails', 'POST', '/', 'json', false, 'json', request);
}

model ListBotHotDsDatasRequest {
  endTime: string(name='EndTime', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  robotInstanceId: string(name='RobotInstanceId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model ListBotHotDsDatasResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotHotDsDatasResponse = {
  headers: map[string]string(name='headers'),
  body: ListBotHotDsDatasResponseBody(name='body'),
}

async function listBotHotDsDatas(request: ListBotHotDsDatasRequest): ListBotHotDsDatasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBotHotDsDatas', 'POST', '/', 'json', false, 'json', request);
}

model ListBotHotKnowledgesRequest {
  endTime: string(name='EndTime', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  robotInstanceId: string(name='RobotInstanceId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model ListBotHotKnowledgesResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotHotKnowledgesResponse = {
  headers: map[string]string(name='headers'),
  body: ListBotHotKnowledgesResponseBody(name='body'),
}

async function listBotHotKnowledges(request: ListBotHotKnowledgesRequest): ListBotHotKnowledgesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBotHotKnowledges', 'POST', '/', 'json', false, 'json', request);
}

model ListBotKnowledgeDetailsRequest {
  endTime: string(name='EndTime', position='Query'),
  limit?: string(name='Limit', position='Query'),
  robotInstanceId: string(name='RobotInstanceId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model ListBotKnowledgeDetailsResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotKnowledgeDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: ListBotKnowledgeDetailsResponseBody(name='body'),
}

async function listBotKnowledgeDetails(request: ListBotKnowledgeDetailsRequest): ListBotKnowledgeDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBotKnowledgeDetails', 'POST', '/', 'json', false, 'json', request);
}

model ListBotReceptionDetailDatasRequest {
  endTime: string(name='EndTime', position='Query'),
  robotInstanceId: string(name='RobotInstanceId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model ListBotReceptionDetailDatasResponseBody = {
  costTime?: string(name='CostTime'),
  datas?: [  map[string]any ](name='Datas'),
  requestId?: string(name='RequestId'),
}

model ListBotReceptionDetailDatasResponse = {
  headers: map[string]string(name='headers'),
  body: ListBotReceptionDetailDatasResponseBody(name='body'),
}

async function listBotReceptionDetailDatas(request: ListBotReceptionDetailDatasRequest): ListBotReceptionDetailDatasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBotReceptionDetailDatas', 'POST', '/', 'json', false, 'json', request);
}

model ListConversationLogsRequest {
  sessionId?: string(name='SessionId', position='Query'),
}

model ListConversationLogsResponseBody = {
  chatLogs?: [  map[string]any ](name='ChatLogs'),
  requestId?: string(name='RequestId'),
  rounds?: long(name='Rounds'),
}

model ListConversationLogsResponse = {
  headers: map[string]string(name='headers'),
  body: ListConversationLogsResponseBody(name='body'),
}

async function listConversationLogs(request: ListConversationLogsRequest): ListConversationLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListConversationLogs', 'POST', '/', 'json', false, 'json', request);
}

model MoveKnowledgeCategoryRequest {
  categoryId: long(name='CategoryId', position='Query'),
  knowledgeId: long(name='KnowledgeId', position='Query'),
}

model MoveKnowledgeCategoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveKnowledgeCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: MoveKnowledgeCategoryResponseBody(name='body'),
}

async function moveKnowledgeCategory(request: MoveKnowledgeCategoryRequest): MoveKnowledgeCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveKnowledgeCategory', 'POST', '/', 'json', false, 'json', request);
}

model PublishDialogFlowRequest {
  dialogId: long(name='DialogId', position='Query'),
}

model PublishDialogFlowResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishDialogFlowResponse = {
  headers: map[string]string(name='headers'),
  body: PublishDialogFlowResponseBody(name='body'),
}

async function publishDialogFlow(request: PublishDialogFlowRequest): PublishDialogFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishDialogFlow', 'POST', '/', 'json', false, 'json', request);
}

model PublishKnowledgeRequest {
  async?: boolean(name='Async', position='Query'),
  knowledgeId: long(name='KnowledgeId', position='Query'),
}

model PublishKnowledgeResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishKnowledgeResponse = {
  headers: map[string]string(name='headers'),
  body: PublishKnowledgeResponseBody(name='body'),
}

async function publishKnowledge(request: PublishKnowledgeRequest): PublishKnowledgeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishKnowledge', 'POST', '/', 'json', false, 'json', request);
}

model QueryBizDataRangesRequest {
  dataType?: string(name='DataType', position='Query'),
  manageCode?: string(name='ManageCode', position='Query'),
  name?: string(name='Name', position='Query'),
  parentBizDataRangeId?: long(name='ParentBizDataRangeId', position='Query'),
}

model QueryBizDataRangesResponseBody = {
  bizDataRanges?: [ 
    {
      bizDataRangeId?: long(name='BizDataRangeId'),
      dataType?: int32(name='DataType'),
      manageCode?: string(name='ManageCode'),
      name?: string(name='Name'),
      parentBizDataRangeId?: long(name='ParentBizDataRangeId'),
    }
  ](name='BizDataRanges'),
  requestId?: string(name='RequestId'),
}

model QueryBizDataRangesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBizDataRangesResponseBody(name='body'),
}

async function queryBizDataRanges(request: QueryBizDataRangesRequest): QueryBizDataRangesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBizDataRanges', 'POST', '/', 'json', false, 'json', request);
}

model QueryBotsRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model QueryBotsResponseBody = {
  bots?: [ 
    {
      avatar?: string(name='Avatar'),
      createTime?: string(name='CreateTime'),
      instanceId?: string(name='InstanceId'),
      introduction?: string(name='Introduction'),
      languageCode?: string(name='LanguageCode'),
      name?: string(name='Name'),
      timeZone?: string(name='TimeZone'),
    }
  ](name='Bots'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model QueryBotsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBotsResponseBody(name='body'),
}

async function queryBots(request: QueryBotsRequest): QueryBotsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBots', 'POST', '/', 'json', false, 'json', request);
}

model QueryCategoriesRequest {
  knowledgeType?: long(name='KnowledgeType', position='Query'),
  parentCategoryId?: long(name='ParentCategoryId', position='Query'),
  showChildrens?: boolean(name='ShowChildrens', position='Query'),
}

model QueryCategoriesResponseBody = {
  categories?: [
    Children
  ](name='Categories'),
  requestId?: string(name='RequestId'),
}

model QueryCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCategoriesResponseBody(name='body'),
}

async function queryCategories(request: QueryCategoriesRequest): QueryCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCategories', 'POST', '/', 'json', false, 'json', request);
}

model QueryCoreWordsRequest {
  coreWordName?: string(name='CoreWordName', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  synonym?: string(name='Synonym', position='Query'),
}

model QueryCoreWordsResponseBody = {
  coreWords?: [ 
    {
      coreWordCode?: string(name='CoreWordCode'),
      coreWordName?: string(name='CoreWordName'),
      createTime?: string(name='CreateTime'),
      modifyTime?: string(name='ModifyTime'),
      synonyms?: [ string ](name='Synonyms'),
    }
  ](name='CoreWords'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model QueryCoreWordsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCoreWordsResponseBody(name='body'),
}

async function queryCoreWords(request: QueryCoreWordsRequest): QueryCoreWordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCoreWords', 'POST', '/', 'json', false, 'json', request);
}

model QueryDialogsRequest {
  dialogName?: string(name='DialogName', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model QueryDialogsResponseBody = {
  dialogs?: [ 
    {
      createTime?: string(name='CreateTime'),
      createUserId?: string(name='CreateUserId'),
      createUserName?: string(name='CreateUserName'),
      description?: string(name='Description'),
      dialogId?: long(name='DialogId'),
      dialogName?: string(name='DialogName'),
      isOnline?: boolean(name='IsOnline'),
      isSampleDialog?: boolean(name='IsSampleDialog'),
      modifyTime?: string(name='ModifyTime'),
      modifyUserId?: string(name='ModifyUserId'),
      modifyUserName?: string(name='ModifyUserName'),
      status?: int32(name='Status'),
    }
  ](name='Dialogs'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model QueryDialogsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDialogsResponseBody(name='body'),
}

async function queryDialogs(request: QueryDialogsRequest): QueryDialogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDialogs', 'POST', '/', 'json', false, 'json', request);
}

model QueryEntitiesRequest {
  dialogId: long(name='DialogId', position='Query'),
  entityName?: string(name='EntityName', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model QueryEntitiesResponseBody = {
  entities?: [ 
    {
      createTime?: string(name='CreateTime'),
      createUserId?: string(name='CreateUserId'),
      createUserName?: string(name='CreateUserName'),
      entityId?: long(name='EntityId'),
      entityName?: string(name='EntityName'),
      entityType?: string(name='EntityType'),
      members?: [ 
        {
          memberName?: string(name='MemberName'),
          synonyms?: [ string ](name='Synonyms'),
        }
      ](name='Members'),
      modifyTime?: string(name='ModifyTime'),
      modifyUserId?: string(name='ModifyUserId'),
      modifyUserName?: string(name='ModifyUserName'),
      regex?: string(name='Regex'),
    }
  ](name='Entities'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model QueryEntitiesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEntitiesResponseBody(name='body'),
}

async function queryEntities(request: QueryEntitiesRequest): QueryEntitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEntities', 'POST', '/', 'json', false, 'json', request);
}

model QueryIntentsRequest {
  dialogId: long(name='DialogId', position='Query'),
  intentName?: string(name='IntentName', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model QueryIntentsResponseBody = {
  intents?: [ 
    {
      createTime?: string(name='CreateTime'),
      createUserId?: string(name='CreateUserId'),
      createUserName?: string(name='CreateUserName'),
      intentId?: long(name='IntentId'),
      modifyTime?: string(name='ModifyTime'),
      modifyUserId?: string(name='ModifyUserId'),
      modifyUserName?: string(name='ModifyUserName'),
      name?: string(name='Name'),
      ruleCheck?: [ 
        {
          error?: [ string ](name='Error'),
          strict?: boolean(name='Strict'),
          text?: string(name='Text'),
          warning?: [ string ](name='Warning'),
        }
      ](name='RuleCheck'),
      slot?: [ 
        {
          isArray?: boolean(name='IsArray'),
          isNecessary?: boolean(name='IsNecessary'),
          lifeSpan?: int32(name='LifeSpan'),
          name?: string(name='Name'),
          question?: [ string ](name='Question'),
          slotId?: string(name='SlotId'),
          tags?: [ 
            {
              userSayId?: string(name='UserSayId'),
              value?: string(name='Value'),
            }
          ](name='Tags'),
          value?: string(name='Value'),
        }
      ](name='Slot'),
      userSay?: [ 
        {
          data?: [ 
            {
              slotId?: string(name='SlotId'),
              text?: string(name='Text'),
            }
          ](name='Data'),
          strict?: boolean(name='Strict'),
          userSayId?: string(name='UserSayId'),
        }
      ](name='UserSay'),
    }
  ](name='Intents'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model QueryIntentsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryIntentsResponseBody(name='body'),
}

async function queryIntents(request: QueryIntentsRequest): QueryIntentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryIntents', 'POST', '/', 'json', false, 'json', request);
}

model QueryKnowledgesRequest {
  categoryId?: long(name='CategoryId', position='Query'),
  coreWordName?: string(name='CoreWordName', position='Query'),
  knowledgeTitle?: string(name='KnowledgeTitle', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model QueryKnowledgesResponseBody = {
  knowledges?: [ 
    {
      categoryId?: long(name='CategoryId'),
      coreWords?: [ string ](name='CoreWords'),
      createTime?: string(name='CreateTime'),
      createUserName?: string(name='CreateUserName'),
      endDate?: string(name='EndDate'),
      knowledgeId?: long(name='KnowledgeId'),
      knowledgeStatus?: int32(name='KnowledgeStatus'),
      knowledgeTitle?: string(name='KnowledgeTitle'),
      modifyTime?: string(name='ModifyTime'),
      modifyUserName?: string(name='ModifyUserName'),
      startDate?: string(name='StartDate'),
      version?: string(name='Version'),
    }
  ](name='Knowledges'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model QueryKnowledgesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryKnowledgesResponseBody(name='body'),
}

async function queryKnowledges(request: QueryKnowledgesRequest): QueryKnowledgesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryKnowledges', 'POST', '/', 'json', false, 'json', request);
}

model QueryLoopListRequest {
}

model QueryLoopListResponseBody = {
  data?: string(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
}

model QueryLoopListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryLoopListResponseBody(name='body'),
}

async function queryLoopList(request: QueryLoopListRequest): QueryLoopListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryLoopList', 'POST', '/', 'json', false, 'json', request);
}

model QueryLoopResultRequest {
  loopId: long(name='LoopId', position='Query'),
}

model QueryLoopResultResponseBody = {
  data?: string(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
}

model QueryLoopResultResponse = {
  headers: map[string]string(name='headers'),
  body: QueryLoopResultResponseBody(name='body'),
}

async function queryLoopResult(request: QueryLoopResultRequest): QueryLoopResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryLoopResult', 'POST', '/', 'json', false, 'json', request);
}

model QueryLoopStatusRequest {
  loopId: long(name='LoopId', position='Query'),
}

model QueryLoopStatusResponseBody = {
  data?: string(name='Data'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
}

model QueryLoopStatusResponse = {
  headers: map[string]string(name='headers'),
  body: QueryLoopStatusResponseBody(name='body'),
}

async function queryLoopStatus(request: QueryLoopStatusRequest): QueryLoopStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryLoopStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryPerspectivesRequest {
  regionId?: string(name='RegionId', position='Host'),
}

model QueryPerspectivesResponseBody = {
  perspectives?: [ 
    {
      createTime?: string(name='CreateTime'),
      createUserName?: string(name='CreateUserName'),
      modifyTime?: string(name='ModifyTime'),
      modifyUserName?: string(name='ModifyUserName'),
      name?: string(name='Name'),
      perspectiveCode?: string(name='PerspectiveCode'),
      perspectiveId?: string(name='PerspectiveId'),
      selfDefine?: boolean(name='SelfDefine'),
      status?: int32(name='Status'),
    }
  ](name='Perspectives'),
  requestId?: string(name='RequestId'),
}

model QueryPerspectivesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPerspectivesResponseBody(name='body'),
}

async function queryPerspectives(request: QueryPerspectivesRequest): QueryPerspectivesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPerspectives', 'POST', '/', 'json', false, 'json', request);
}

model QuerySystemEntitiesRequest {
  entityName?: string(name='EntityName', position='Query'),
}

model QuerySystemEntitiesResponseBody = {
  requestId?: string(name='RequestId'),
  systemEntities?: [ 
    {
      defaultQuestion?: string(name='DefaultQuestion'),
      entityCode?: string(name='EntityCode'),
      entityName?: string(name='EntityName'),
    }
  ](name='SystemEntities'),
}

model QuerySystemEntitiesResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySystemEntitiesResponseBody(name='body'),
}

async function querySystemEntities(request: QuerySystemEntitiesRequest): QuerySystemEntitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySystemEntities', 'POST', '/', 'json', false, 'json', request);
}

model RemoveEntityMemberRequest {
  entityId: long(name='EntityId', position='Query'),
  member: {
    memberName?: string(name='MemberName'),
    synonyms?: [ string ](name='Synonyms'),
  }(name='Member', position='Query'),
  removeType: string(name='RemoveType', position='Query'),
}

model RemoveEntityMemberResponseBody = {
  entityId?: long(name='EntityId'),
  requestId?: string(name='RequestId'),
}

model RemoveEntityMemberResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveEntityMemberResponseBody(name='body'),
}

async function removeEntityMember(request: RemoveEntityMemberRequest): RemoveEntityMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveEntityMember', 'POST', '/', 'json', false, 'json', request);
}

model RemoveSynonymRequest {
  coreWordName: string(name='CoreWordName', position='Query'),
  synonym: string(name='Synonym', position='Query'),
}

model RemoveSynonymResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveSynonymResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveSynonymResponseBody(name='body'),
}

async function removeSynonym(request: RemoveSynonymRequest): RemoveSynonymResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveSynonym', 'POST', '/', 'json', false, 'json', request);
}

model SearchQaRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  userQuerys?: string(name='UserQuerys', position='Query'),
}

model SearchQaResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  questionList?: [ 
    {
      categoryPath?: string(name='CategoryPath'),
      createUserName?: string(name='CreateUserName'),
      gmtCreate?: string(name='GmtCreate'),
      gmtModified?: string(name='GmtModified'),
      modifiedUserName?: string(name='ModifiedUserName'),
      questionId?: long(name='QuestionId'),
      questionType?: int32(name='QuestionType'),
      status?: int32(name='Status'),
      title?: string(name='Title'),
    }
  ](name='QuestionList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model SearchQaResponse = {
  headers: map[string]string(name='headers'),
  body: SearchQaResponseBody(name='body'),
}

async function searchQa(request: SearchQaRequest): SearchQaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchQa', 'POST', '/', 'json', false, 'json', request);
}

model TestDialogFlowRequest {
  dialogId: long(name='DialogId', position='Query'),
}

model TestDialogFlowResponseBody = {
  requestId?: string(name='RequestId'),
}

model TestDialogFlowResponse = {
  headers: map[string]string(name='headers'),
  body: TestDialogFlowResponseBody(name='body'),
}

async function testDialogFlow(request: TestDialogFlowRequest): TestDialogFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TestDialogFlow', 'POST', '/', 'json', false, 'json', request);
}

model TestGrayRequest {
  name: string(name='Name', position='Query'),
}

model TestGrayResponseBody = {
  requestId?: string(name='RequestId'),
}

model TestGrayResponse = {
  headers: map[string]string(name='headers'),
  body: TestGrayResponseBody(name='body'),
}

async function testGray(request: TestGrayRequest): TestGrayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TestGray', 'POST', '/', 'json', false, 'json', request);
}

model UpdateBizDataRangeRequest {
  bizDataRangeId: long(name='BizDataRangeId', position='Query'),
  dataType?: string(name='DataType', position='Query'),
  manageCode?: string(name='ManageCode', position='Query'),
  name?: string(name='Name', position='Query'),
  parentBizDataRangeId?: long(name='ParentBizDataRangeId', position='Query'),
}

model UpdateBizDataRangeResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateBizDataRangeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateBizDataRangeResponseBody(name='body'),
}

async function updateBizDataRange(request: UpdateBizDataRangeRequest): UpdateBizDataRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateBizDataRange', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCategoryRequest {
  categoryId: long(name='CategoryId', position='Query'),
  name?: string(name='Name', position='Query'),
}

model UpdateCategoryResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCategoryResponseBody(name='body'),
}

async function updateCategory(request: UpdateCategoryRequest): UpdateCategoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCategory', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCoreWordRequest {
  coreWordCode: string(name='CoreWordCode', position='Query'),
  coreWordName: string(name='CoreWordName', position='Query'),
}

model UpdateCoreWordResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateCoreWordResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCoreWordResponseBody(name='body'),
}

async function updateCoreWord(request: UpdateCoreWordRequest): UpdateCoreWordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCoreWord', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDialogRequest {
  description?: string(name='Description', position='Query'),
  dialogId: long(name='DialogId', position='Query'),
  dialogName: string(name='DialogName', position='Query'),
}

model UpdateDialogResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDialogResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDialogResponseBody(name='body'),
}

async function updateDialog(request: UpdateDialogRequest): UpdateDialogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDialog', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDialogFlowRequest {
  dialogId: long(name='DialogId', position='Query'),
  moduleDefinition: {
    globalVars?: map[string]any(name='GlobalVars'),
    moduleDefinition?: PaasProcessData(name='ModuleDefinition'),
  }(name='ModuleDefinition', position='Body'),
}

model UpdateDialogFlowResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateDialogFlowResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDialogFlowResponseBody(name='body'),
}

async function updateDialogFlow(request: UpdateDialogFlowRequest): UpdateDialogFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDialogFlow', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEntityRequest {
  entityId: long(name='EntityId', position='Query'),
  entityName: string(name='EntityName', position='Query'),
  entityType: string(name='EntityType', position='Query'),
  members?: [ 
    {
      memberName?: string(name='MemberName'),
      synonyms?: [ string ](name='Synonyms'),
    }
  ](name='Members', position='Body'),
  regex?: string(name='Regex', position='Query'),
}

model UpdateEntityResponseBody = {
  entityId?: long(name='EntityId'),
  requestId?: string(name='RequestId'),
}

model UpdateEntityResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEntityResponseBody(name='body'),
}

async function updateEntity(request: UpdateEntityRequest): UpdateEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEntity', 'POST', '/', 'json', true, 'form', request);
}

model UpdateIntentRequest {
  intentDefinition: IntentCreateDTO(name='IntentDefinition', position='Query'),
  intentId: long(name='IntentId', position='Query'),
}

model UpdateIntentResponseBody = {
  intentId?: long(name='IntentId'),
  requestId?: string(name='RequestId'),
}

model UpdateIntentResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateIntentResponseBody(name='body'),
}

async function updateIntent(request: UpdateIntentRequest): UpdateIntentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateIntent', 'POST', '/', 'json', false, 'json', request);
}

model UpdateKnowledgeRequest {
  knowledge: {
    categoryId?: long(name='CategoryId'),
    endDate?: string(name='EndDate'),
    knowledgeId: long(name='KnowledgeId'),
    knowledgeTitle: string(name='KnowledgeTitle'),
    knowledgeType?: int32(name='KnowledgeType'),
    outlines?: [ 
      {
        action: string(name='Action'),
        knowledgeId: long(name='KnowledgeId'),
        outlineId?: long(name='OutlineId'),
        title: string(name='Title'),
      }
    ](name='Outlines'),
    simQuestions?: [ 
      {
        action: string(name='Action'),
        simQuestionId?: long(name='SimQuestionId'),
        title: string(name='Title'),
      }
    ](name='SimQuestions'),
    solutions: [ 
      {
        action: string(name='Action'),
        content: string(name='Content'),
        perspectiveIds: [ string ](name='PerspectiveIds'),
        plainText: string(name='PlainText'),
        solutionId?: long(name='SolutionId'),
      }
    ](name='Solutions'),
    startDate?: string(name='StartDate'),
  }(name='Knowledge', position='Body'),
}

model UpdateKnowledgeResponseBody = {
  knowledgeId?: long(name='KnowledgeId'),
  requestId?: string(name='RequestId'),
}

model UpdateKnowledgeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateKnowledgeResponseBody(name='body'),
}

async function updateKnowledge(request: UpdateKnowledgeRequest): UpdateKnowledgeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateKnowledge', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePerspectiveRequest {
  name: string(name='Name', position='Query'),
  perspectiveId: string(name='PerspectiveId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpdatePerspectiveResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdatePerspectiveResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePerspectiveResponseBody(name='body'),
}

async function updatePerspective(request: UpdatePerspectiveRequest): UpdatePerspectiveResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePerspective', 'POST', '/', 'json', false, 'json', request);
}

