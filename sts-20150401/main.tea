/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'sts.aliyuncs.com',
    cn-beijing-finance-1 = 'sts.aliyuncs.com',
    cn-beijing-finance-pop = 'sts.aliyuncs.com',
    cn-beijing-gov-1 = 'sts.aliyuncs.com',
    cn-beijing-nu16-b01 = 'sts.aliyuncs.com',
    cn-edge-1 = 'sts.aliyuncs.com',
    cn-fujian = 'sts.aliyuncs.com',
    cn-haidian-cm12-c01 = 'sts.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'sts.aliyuncs.com',
    cn-hangzhou-finance = 'sts.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'sts.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'sts.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'sts.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'sts.aliyuncs.com',
    cn-hangzhou-test-306 = 'sts.aliyuncs.com',
    cn-hongkong-finance-pop = 'sts.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'sts.aliyuncs.com',
    cn-north-2-gov-1 = 'sts-vpc.cn-north-2-gov-1.aliyuncs.com',
    cn-qingdao-nebula = 'sts.aliyuncs.com',
    cn-shanghai-et15-b01 = 'sts.aliyuncs.com',
    cn-shanghai-et2-b01 = 'sts.aliyuncs.com',
    cn-shanghai-inner = 'sts.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'sts.aliyuncs.com',
    cn-shenzhen-finance-1 = 'sts-vpc.cn-shenzhen-finance-1.aliyuncs.com',
    cn-shenzhen-inner = 'sts.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'sts.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'sts.aliyuncs.com',
    cn-wuhan = 'sts.aliyuncs.com',
    cn-yushanfang = 'sts.aliyuncs.com',
    cn-zhangbei = 'sts.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'sts.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'sts.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'sts.aliyuncs.com',
    eu-west-1-oxs = 'sts.aliyuncs.com',
    rus-west-1-pop = 'sts.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('sts', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AssumeRoleRequest {
  durationSeconds?: long(name='DurationSeconds'),
  policy?: string(name='Policy'),
  roleArn?: string(name='RoleArn'),
  roleSessionName?: string(name='RoleSessionName'),
}

model AssumeRoleResponseBody = {
  assumedRoleUser?: {
    arn?: string(name='Arn'),
    assumedRoleId?: string(name='AssumedRoleId'),
  }(name='AssumedRoleUser'),
  credentials?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    expiration?: string(name='Expiration'),
    securityToken?: string(name='SecurityToken'),
  }(name='Credentials'),
  requestId?: string(name='RequestId'),
}

model AssumeRoleResponse = {
  headers: map[string]string(name='headers'),
  body: AssumeRoleResponseBody(name='body'),
}

async function assumeRoleWithOptions(request: AssumeRoleRequest, runtime: Util.RuntimeOptions): AssumeRoleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.durationSeconds)) {
    query['DurationSeconds'] = request.durationSeconds;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.roleArn)) {
    query['RoleArn'] = request.roleArn;
  }
  if (!Util.isUnset(request.roleSessionName)) {
    query['RoleSessionName'] = request.roleSessionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssumeRole',
    version = '2015-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function assumeRole(request: AssumeRoleRequest): AssumeRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return assumeRoleWithOptions(request, runtime);
}

model AssumeRoleWithOIDCRequest {
  durationSeconds?: long(name='DurationSeconds', description='Session过期时间，单位为秒。'),
  OIDCProviderArn?: string(name='OIDCProviderArn', description='OIDC Provider的ARN'),
  OIDCToken?: string(name='OIDCToken', description='OIDC的ID Token，需输入原始Token，无需Base64解码'),
  policy?: string(name='Policy', description='权限策略。 生成STS Token时可以指定一个额外的权限策略，以进一步限制STS Token的权限。若不指定则返回的Token拥有指定角色的所有权限。'),
  roleArn?: string(name='RoleArn', description='需要扮演的角色的ARN'),
  roleSessionName?: string(name='RoleSessionName', description='用户自定义参数。此参数用来区分不同的令牌，可用于用户级别的访问审计。'),
}

model AssumeRoleWithOIDCResponseBody = {
  assumedRoleUser?: {
    arn?: string(name='Arn'),
    assumedRoleId?: string(name='AssumedRoleId'),
  }(name='AssumedRoleUser'),
  credentials?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    expiration?: string(name='Expiration'),
    securityToken?: string(name='SecurityToken'),
  }(name='Credentials'),
  OIDCTokenInfo?: {
    clientIds?: string(name='ClientIds'),
    issuer?: string(name='Issuer'),
    subject?: string(name='Subject'),
  }(name='OIDCTokenInfo'),
  requestId?: string(name='RequestId'),
}

model AssumeRoleWithOIDCResponse = {
  headers: map[string]string(name='headers'),
  body: AssumeRoleWithOIDCResponseBody(name='body'),
}

async function assumeRoleWithOIDCWithOptions(request: AssumeRoleWithOIDCRequest, runtime: Util.RuntimeOptions): AssumeRoleWithOIDCResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.durationSeconds)) {
    query['DurationSeconds'] = request.durationSeconds;
  }
  if (!Util.isUnset(request.OIDCProviderArn)) {
    query['OIDCProviderArn'] = request.OIDCProviderArn;
  }
  if (!Util.isUnset(request.OIDCToken)) {
    query['OIDCToken'] = request.OIDCToken;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.roleArn)) {
    query['RoleArn'] = request.roleArn;
  }
  if (!Util.isUnset(request.roleSessionName)) {
    query['RoleSessionName'] = request.roleSessionName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssumeRoleWithOIDC',
    version = '2015-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function assumeRoleWithOIDC(request: AssumeRoleWithOIDCRequest): AssumeRoleWithOIDCResponse {
  var runtime = new Util.RuntimeOptions{};
  return assumeRoleWithOIDCWithOptions(request, runtime);
}

model AssumeRoleWithSAMLRequest {
  durationSeconds?: long(name='DurationSeconds'),
  policy?: string(name='Policy'),
  roleArn?: string(name='RoleArn'),
  SAMLAssertion?: string(name='SAMLAssertion'),
  SAMLProviderArn?: string(name='SAMLProviderArn'),
}

model AssumeRoleWithSAMLResponseBody = {
  assumedRoleUser?: {
    arn?: string(name='Arn'),
    assumedRoleId?: string(name='AssumedRoleId'),
  }(name='AssumedRoleUser'),
  credentials?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    expiration?: string(name='Expiration'),
    securityToken?: string(name='SecurityToken'),
  }(name='Credentials'),
  requestId?: string(name='RequestId'),
  SAMLAssertionInfo?: {
    issuer?: string(name='Issuer'),
    recipient?: string(name='Recipient'),
    subject?: string(name='Subject'),
    subjectType?: string(name='SubjectType'),
  }(name='SAMLAssertionInfo'),
}

model AssumeRoleWithSAMLResponse = {
  headers: map[string]string(name='headers'),
  body: AssumeRoleWithSAMLResponseBody(name='body'),
}

async function assumeRoleWithSAMLWithOptions(request: AssumeRoleWithSAMLRequest, runtime: Util.RuntimeOptions): AssumeRoleWithSAMLResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.durationSeconds)) {
    query['DurationSeconds'] = request.durationSeconds;
  }
  if (!Util.isUnset(request.policy)) {
    query['Policy'] = request.policy;
  }
  if (!Util.isUnset(request.roleArn)) {
    query['RoleArn'] = request.roleArn;
  }
  if (!Util.isUnset(request.SAMLAssertion)) {
    query['SAMLAssertion'] = request.SAMLAssertion;
  }
  if (!Util.isUnset(request.SAMLProviderArn)) {
    query['SAMLProviderArn'] = request.SAMLProviderArn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssumeRoleWithSAML',
    version = '2015-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'Anonymous',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function assumeRoleWithSAML(request: AssumeRoleWithSAMLRequest): AssumeRoleWithSAMLResponse {
  var runtime = new Util.RuntimeOptions{};
  return assumeRoleWithSAMLWithOptions(request, runtime);
}

model GetCallerIdentityResponseBody = {
  accountId?: string(name='AccountId'),
  arn?: string(name='Arn'),
  identityType?: string(name='IdentityType'),
  principalId?: string(name='PrincipalId'),
  requestId?: string(name='RequestId'),
  roleId?: string(name='RoleId'),
  userId?: string(name='UserId'),
}

model GetCallerIdentityResponse = {
  headers: map[string]string(name='headers'),
  body: GetCallerIdentityResponseBody(name='body'),
}

async function getCallerIdentityWithOptions(runtime: Util.RuntimeOptions): GetCallerIdentityResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetCallerIdentity',
    version = '2015-04-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCallerIdentity(): GetCallerIdentityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCallerIdentityWithOptions(runtime);
}

