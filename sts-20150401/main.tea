/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-2-pop = 'sts.aliyuncs.com',
    cn-beijing-finance-1 = 'sts.aliyuncs.com',
    cn-beijing-finance-pop = 'sts.aliyuncs.com',
    cn-beijing-gov-1 = 'sts.aliyuncs.com',
    cn-beijing-nu16-b01 = 'sts.aliyuncs.com',
    cn-edge-1 = 'sts.aliyuncs.com',
    cn-fujian = 'sts.aliyuncs.com',
    cn-haidian-cm12-c01 = 'sts.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'sts.aliyuncs.com',
    cn-hangzhou-finance = 'sts.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'sts.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'sts.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'sts.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'sts.aliyuncs.com',
    cn-hangzhou-test-306 = 'sts.aliyuncs.com',
    cn-hongkong-finance-pop = 'sts.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'sts.aliyuncs.com',
    cn-north-2-gov-1 = 'sts-vpc.cn-north-2-gov-1.aliyuncs.com',
    cn-qingdao-nebula = 'sts.aliyuncs.com',
    cn-shanghai-et15-b01 = 'sts.aliyuncs.com',
    cn-shanghai-et2-b01 = 'sts.aliyuncs.com',
    cn-shanghai-inner = 'sts.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'sts.aliyuncs.com',
    cn-shenzhen-finance-1 = 'sts.aliyuncs.com',
    cn-shenzhen-inner = 'sts.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'sts.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'sts.aliyuncs.com',
    cn-wuhan = 'sts.aliyuncs.com',
    cn-yushanfang = 'sts.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'sts.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'sts.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'sts.aliyuncs.com',
    eu-west-1-oxs = 'sts.aliyuncs.com',
    rus-west-1-pop = 'sts.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('sts', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AssumeRoleRequest {
  durationSeconds?: long(name='DurationSeconds'),
  policy?: string(name='Policy'),
  roleArn?: string(name='RoleArn'),
  roleSessionName?: string(name='RoleSessionName'),
}

model AssumeRoleResponseBody = {
  requestId?: string(name='RequestId'),
  assumedRoleUser?: {
    assumedRoleId?: string(name='AssumedRoleId'),
    arn?: string(name='Arn'),
  }(name='AssumedRoleUser'),
  credentials?: {
    securityToken?: string(name='SecurityToken'),
    expiration?: string(name='Expiration'),
    accessKeySecret?: string(name='AccessKeySecret'),
    accessKeyId?: string(name='AccessKeyId'),
  }(name='Credentials'),
}

model AssumeRoleResponse = {
  headers: map[string]string(name='headers'),
  body: AssumeRoleResponseBody(name='body'),
}

async function assumeRoleWithOptions(request: AssumeRoleRequest, runtime: Util.RuntimeOptions): AssumeRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssumeRole', '2015-04-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function assumeRole(request: AssumeRoleRequest): AssumeRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return assumeRoleWithOptions(request, runtime);
}

model AssumeRoleWithSAMLRequest {
  SAMLProviderArn?: string(name='SAMLProviderArn'),
  roleArn?: string(name='RoleArn'),
  SAMLAssertion?: string(name='SAMLAssertion'),
  policy?: string(name='Policy'),
  durationSeconds?: long(name='DurationSeconds'),
}

model AssumeRoleWithSAMLResponseBody = {
  requestId?: string(name='RequestId'),
  SAMLAssertionInfo?: {
    subjectType?: string(name='SubjectType'),
    subject?: string(name='Subject'),
    issuer?: string(name='Issuer'),
    recipient?: string(name='Recipient'),
  }(name='SAMLAssertionInfo'),
  assumedRoleUser?: {
    assumedRoleId?: string(name='AssumedRoleId'),
    arn?: string(name='Arn'),
  }(name='AssumedRoleUser'),
  credentials?: {
    securityToken?: string(name='SecurityToken'),
    expiration?: string(name='Expiration'),
    accessKeySecret?: string(name='AccessKeySecret'),
    accessKeyId?: string(name='AccessKeyId'),
  }(name='Credentials'),
}

model AssumeRoleWithSAMLResponse = {
  headers: map[string]string(name='headers'),
  body: AssumeRoleWithSAMLResponseBody(name='body'),
}

async function assumeRoleWithSAMLWithOptions(request: AssumeRoleWithSAMLRequest, runtime: Util.RuntimeOptions): AssumeRoleWithSAMLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssumeRoleWithSAML', '2015-04-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function assumeRoleWithSAML(request: AssumeRoleWithSAMLRequest): AssumeRoleWithSAMLResponse {
  var runtime = new Util.RuntimeOptions{};
  return assumeRoleWithSAMLWithOptions(request, runtime);
}

model GetCallerIdentityResponseBody = {
  identityType?: string(name='IdentityType'),
  accountId?: string(name='AccountId'),
  requestId?: string(name='RequestId'),
  principalId?: string(name='PrincipalId'),
  userId?: string(name='UserId'),
  arn?: string(name='Arn'),
  roleId?: string(name='RoleId'),
}

model GetCallerIdentityResponse = {
  headers: map[string]string(name='headers'),
  body: GetCallerIdentityResponseBody(name='body'),
}

async function getCallerIdentityWithOptions(runtime: Util.RuntimeOptions): GetCallerIdentityResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetCallerIdentity', '2015-04-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCallerIdentity(): GetCallerIdentityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCallerIdentityWithOptions(runtime);
}

