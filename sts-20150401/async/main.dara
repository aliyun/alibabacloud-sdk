/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Sts';
  @version = '2015-04-01';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-2-pop = 'sts.aliyuncs.com',
    cn-beijing-finance-1 = 'sts.aliyuncs.com',
    cn-beijing-finance-pop = 'sts.aliyuncs.com',
    cn-beijing-gov-1 = 'sts.aliyuncs.com',
    cn-beijing-nu16-b01 = 'sts.aliyuncs.com',
    cn-edge-1 = 'sts.aliyuncs.com',
    cn-fujian = 'sts.aliyuncs.com',
    cn-haidian-cm12-c01 = 'sts.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'sts.aliyuncs.com',
    cn-hangzhou-finance = 'sts.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'sts.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'sts.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'sts.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'sts.aliyuncs.com',
    cn-hangzhou-test-306 = 'sts.aliyuncs.com',
    cn-hongkong-finance-pop = 'sts.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'sts.aliyuncs.com',
    cn-north-2-gov-1 = 'sts-vpc.cn-north-2-gov-1.aliyuncs.com',
    cn-qingdao-nebula = 'sts.aliyuncs.com',
    cn-shanghai-et15-b01 = 'sts.aliyuncs.com',
    cn-shanghai-et2-b01 = 'sts.aliyuncs.com',
    cn-shanghai-inner = 'sts.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'sts.aliyuncs.com',
    cn-shenzhen-finance-1 = 'sts-vpc.cn-shenzhen-finance-1.aliyuncs.com',
    cn-shenzhen-inner = 'sts.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'sts.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'sts.aliyuncs.com',
    cn-wuhan = 'sts.aliyuncs.com',
    cn-yushanfang = 'sts.aliyuncs.com',
    cn-zhangbei = 'sts.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'sts.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'sts.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'sts.aliyuncs.com',
    eu-west-1-oxs = 'sts.aliyuncs.com',
    rus-west-1-pop = 'sts.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AssumeRoleRequest {
  durationSeconds?: long(name='DurationSeconds', position='Query'),
  policy?: string(name='Policy', position='Query'),
  roleArn: string(name='RoleArn', position='Query'),
  roleSessionName: string(name='RoleSessionName', position='Query'),
}

model AssumeRoleResponseBody = {
  assumedRoleUser?: {
    arn?: string(name='Arn'),
    assumedRoleId?: string(name='AssumedRoleId'),
  }(name='AssumedRoleUser'),
  credentials?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    expiration?: string(name='Expiration'),
    securityToken?: string(name='SecurityToken'),
  }(name='Credentials'),
  requestId?: string(name='RequestId'),
}

model AssumeRoleResponse = {
  headers: map[string]string(name='headers'),
  body: AssumeRoleResponseBody(name='body'),
}

async function assumeRole(request: AssumeRoleRequest): AssumeRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssumeRole', 'POST', '/', 'json', false, 'json', request);
}

model AssumeRoleWithOIDCRequest {
  durationSeconds?: long(name='DurationSeconds', description='Session过期时间，单位为秒。', position='Query'),
  OIDCProviderArn?: string(name='OIDCProviderArn', description='OIDC Provider的ARN', position='Query'),
  OIDCToken?: string(name='OIDCToken', description='OIDC的ID Token，需输入原始Token，无需Base64解码', position='Query'),
  policy?: string(name='Policy', description='权限策略。 生成STS Token时可以指定一个额外的权限策略，以进一步限制STS Token的权限。若不指定则返回的Token拥有指定角色的所有权限。', position='Query'),
  roleArn?: string(name='RoleArn', description='需要扮演的角色的ARN', position='Query'),
  roleSessionName?: string(name='RoleSessionName', description='用户自定义参数。此参数用来区分不同的令牌，可用于用户级别的访问审计。', position='Query'),
}

model AssumeRoleWithOIDCResponseBody = {
  assumedRoleUser?: {
    arn?: string(name='Arn'),
    assumedRoleId?: string(name='AssumedRoleId'),
  }(name='AssumedRoleUser'),
  credentials?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    expiration?: string(name='Expiration'),
    securityToken?: string(name='SecurityToken'),
  }(name='Credentials'),
  OIDCTokenInfo?: {
    clientIds?: string(name='ClientIds'),
    issuer?: string(name='Issuer'),
    subject?: string(name='Subject'),
  }(name='OIDCTokenInfo'),
  requestId?: string(name='RequestId'),
}

model AssumeRoleWithOIDCResponse = {
  headers: map[string]string(name='headers'),
  body: AssumeRoleWithOIDCResponseBody(name='body'),
}

async function assumeRoleWithOIDC(request: AssumeRoleWithOIDCRequest): AssumeRoleWithOIDCResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssumeRoleWithOIDC', 'POST', '/', 'json', false, 'json', request);
}

model AssumeRoleWithSAMLRequest {
  durationSeconds?: long(name='DurationSeconds', position='Query'),
  policy?: string(name='Policy', position='Query'),
  roleArn?: string(name='RoleArn', position='Query'),
  SAMLAssertion?: string(name='SAMLAssertion', position='Query'),
  SAMLProviderArn?: string(name='SAMLProviderArn', position='Query'),
}

model AssumeRoleWithSAMLResponseBody = {
  assumedRoleUser?: {
    arn?: string(name='Arn'),
    assumedRoleId?: string(name='AssumedRoleId'),
  }(name='AssumedRoleUser'),
  credentials?: {
    accessKeyId?: string(name='AccessKeyId'),
    accessKeySecret?: string(name='AccessKeySecret'),
    expiration?: string(name='Expiration'),
    securityToken?: string(name='SecurityToken'),
  }(name='Credentials'),
  requestId?: string(name='RequestId'),
  SAMLAssertionInfo?: {
    issuer?: string(name='Issuer'),
    recipient?: string(name='Recipient'),
    subject?: string(name='Subject'),
    subjectType?: string(name='SubjectType'),
  }(name='SAMLAssertionInfo'),
}

model AssumeRoleWithSAMLResponse = {
  headers: map[string]string(name='headers'),
  body: AssumeRoleWithSAMLResponseBody(name='body'),
}

async function assumeRoleWithSAML(request: AssumeRoleWithSAMLRequest): AssumeRoleWithSAMLResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssumeRoleWithSAML', 'POST', '/', 'json', false, 'json', request);
}

model GetCallerIdentityRequest {
}

model GetCallerIdentityResponseBody = {
  accountId?: string(name='AccountId'),
  arn?: string(name='Arn'),
  identityType?: string(name='IdentityType'),
  principalId?: string(name='PrincipalId'),
  requestId?: string(name='RequestId'),
  roleId?: string(name='RoleId'),
  userId?: string(name='UserId'),
}

model GetCallerIdentityResponse = {
  headers: map[string]string(name='headers'),
  body: GetCallerIdentityResponseBody(name='body'),
}

async function getCallerIdentity(request: GetCallerIdentityRequest): GetCallerIdentityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCallerIdentity', 'POST', '/', 'json', false, 'json', request);
}

