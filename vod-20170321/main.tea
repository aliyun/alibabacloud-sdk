/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-2-pop = 'vod.aliyuncs.com',
    ap-southeast-2 = 'vod.aliyuncs.com',
    ap-southeast-3 = 'vod.aliyuncs.com',
    cn-beijing-finance-1 = 'vod.aliyuncs.com',
    cn-beijing-finance-pop = 'vod.aliyuncs.com',
    cn-beijing-gov-1 = 'vod.aliyuncs.com',
    cn-beijing-nu16-b01 = 'vod.aliyuncs.com',
    cn-chengdu = 'vod.aliyuncs.com',
    cn-edge-1 = 'vod.aliyuncs.com',
    cn-fujian = 'vod.aliyuncs.com',
    cn-haidian-cm12-c01 = 'vod.aliyuncs.com',
    cn-hangzhou = 'vod.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'vod.aliyuncs.com',
    cn-hangzhou-finance = 'vod.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'vod.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'vod.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'vod.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'vod.aliyuncs.com',
    cn-hangzhou-test-306 = 'vod.aliyuncs.com',
    cn-hongkong = 'vod.aliyuncs.com',
    cn-hongkong-finance-pop = 'vod.aliyuncs.com',
    cn-huhehaote = 'vod.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'vod.aliyuncs.com',
    cn-qingdao = 'vod.aliyuncs.com',
    cn-qingdao-nebula = 'vod.aliyuncs.com',
    cn-shanghai-et15-b01 = 'vod.aliyuncs.com',
    cn-shanghai-et2-b01 = 'vod.aliyuncs.com',
    cn-shanghai-finance-1 = 'vod.aliyuncs.com',
    cn-shanghai-inner = 'vod.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'vod.aliyuncs.com',
    cn-shenzhen-finance-1 = 'vod.aliyuncs.com',
    cn-shenzhen-inner = 'vod.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'vod.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'vod.aliyuncs.com',
    cn-wuhan = 'vod.aliyuncs.com',
    cn-wulanchabu = 'vod.aliyuncs.com',
    cn-yushanfang = 'vod.aliyuncs.com',
    cn-zhangbei = 'vod.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'vod.aliyuncs.com',
    cn-zhangjiakou = 'vod.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'vod.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'vod.aliyuncs.com',
    eu-west-1 = 'vod.aliyuncs.com',
    eu-west-1-oxs = 'vod.aliyuncs.com',
    me-east-1 = 'vod.aliyuncs.com',
    rus-west-1-pop = 'vod.aliyuncs.com',
    us-east-1 = 'vod.aliyuncs.com',
    us-west-1 = 'vod.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('vod', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddAITemplateRequest {
  templateConfig?: string(name='TemplateConfig'),
  templateName?: string(name='TemplateName'),
  templateType?: string(name='TemplateType'),
}

model AddAITemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model AddAITemplateResponse = {
  headers: map[string]string(name='headers'),
  body: AddAITemplateResponseBody(name='body'),
}

async function addAITemplateWithOptions(request: AddAITemplateRequest, runtime: Util.RuntimeOptions): AddAITemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddAITemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addAITemplate(request: AddAITemplateRequest): AddAITemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAITemplateWithOptions(request, runtime);
}

model AddCategoryRequest {
  cateName?: string(name='CateName'),
  parentId?: long(name='ParentId'),
  type?: string(name='Type'),
}

model AddCategoryResponseBody = {
  category?: {
    cateId?: long(name='CateId'),
    cateName?: string(name='CateName'),
    level?: long(name='Level'),
    parentId?: long(name='ParentId'),
    type?: string(name='Type'),
  }(name='Category'),
  requestId?: string(name='RequestId'),
}

model AddCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: AddCategoryResponseBody(name='body'),
}

async function addCategoryWithOptions(request: AddCategoryRequest, runtime: Util.RuntimeOptions): AddCategoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddCategory', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addCategory(request: AddCategoryRequest): AddCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return addCategoryWithOptions(request, runtime);
}

model AddEditingProjectRequest {
  coverURL?: string(name='CoverURL'),
  description?: string(name='Description'),
  division?: string(name='Division'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
  timeline?: string(name='Timeline'),
  title?: string(name='Title'),
}

model AddEditingProjectResponseBody = {
  project?: {
    creationTime?: string(name='CreationTime'),
    description?: string(name='Description'),
    modifiedTime?: string(name='ModifiedTime'),
    projectId?: string(name='ProjectId'),
    status?: string(name='Status'),
    title?: string(name='Title'),
  }(name='Project'),
  requestId?: string(name='RequestId'),
}

model AddEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: AddEditingProjectResponseBody(name='body'),
}

async function addEditingProjectWithOptions(request: AddEditingProjectRequest, runtime: Util.RuntimeOptions): AddEditingProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddEditingProject', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addEditingProject(request: AddEditingProjectRequest): AddEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return addEditingProjectWithOptions(request, runtime);
}

model AddTranscodeTemplateGroupRequest {
  appId?: string(name='AppId'),
  name?: string(name='Name'),
  transcodeTemplateGroupId?: string(name='TranscodeTemplateGroupId'),
  transcodeTemplateList?: string(name='TranscodeTemplateList'),
}

model AddTranscodeTemplateGroupResponseBody = {
  requestId?: string(name='RequestId'),
  transcodeTemplateGroupId?: string(name='TranscodeTemplateGroupId'),
}

model AddTranscodeTemplateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddTranscodeTemplateGroupResponseBody(name='body'),
}

async function addTranscodeTemplateGroupWithOptions(request: AddTranscodeTemplateGroupRequest, runtime: Util.RuntimeOptions): AddTranscodeTemplateGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddTranscodeTemplateGroup', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addTranscodeTemplateGroup(request: AddTranscodeTemplateGroupRequest): AddTranscodeTemplateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTranscodeTemplateGroupWithOptions(request, runtime);
}

model AddVodDomainRequest {
  checkUrl?: string(name='CheckUrl'),
  domainName?: string(name='DomainName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  scope?: string(name='Scope'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model AddVodDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddVodDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddVodDomainResponseBody(name='body'),
}

async function addVodDomainWithOptions(request: AddVodDomainRequest, runtime: Util.RuntimeOptions): AddVodDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddVodDomain', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addVodDomain(request: AddVodDomainRequest): AddVodDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addVodDomainWithOptions(request, runtime);
}

model AddVodTemplateRequest {
  appId?: string(name='AppId'),
  name?: string(name='Name'),
  templateConfig?: string(name='TemplateConfig'),
  templateType?: string(name='TemplateType'),
}

model AddVodTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  vodTemplateId?: string(name='VodTemplateId'),
}

model AddVodTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: AddVodTemplateResponseBody(name='body'),
}

async function addVodTemplateWithOptions(request: AddVodTemplateRequest, runtime: Util.RuntimeOptions): AddVodTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddVodTemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addVodTemplate(request: AddVodTemplateRequest): AddVodTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return addVodTemplateWithOptions(request, runtime);
}

model AddWatermarkRequest {
  appId?: string(name='AppId'),
  fileUrl?: string(name='FileUrl'),
  name?: string(name='Name'),
  type?: string(name='Type'),
  watermarkConfig?: string(name='WatermarkConfig'),
}

model AddWatermarkResponseBody = {
  requestId?: string(name='RequestId'),
  watermarkInfo?: {
    creationTime?: string(name='CreationTime'),
    fileUrl?: string(name='FileUrl'),
    isDefault?: string(name='IsDefault'),
    name?: string(name='Name'),
    type?: string(name='Type'),
    watermarkConfig?: string(name='WatermarkConfig'),
    watermarkId?: string(name='WatermarkId'),
  }(name='WatermarkInfo'),
}

model AddWatermarkResponse = {
  headers: map[string]string(name='headers'),
  body: AddWatermarkResponseBody(name='body'),
}

async function addWatermarkWithOptions(request: AddWatermarkRequest, runtime: Util.RuntimeOptions): AddWatermarkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddWatermark', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addWatermark(request: AddWatermarkRequest): AddWatermarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return addWatermarkWithOptions(request, runtime);
}

model AttachAppPolicyToIdentityRequest {
  appId?: string(name='AppId'),
  identityName?: string(name='IdentityName'),
  identityType?: string(name='IdentityType'),
  policyNames?: string(name='PolicyNames'),
}

model AttachAppPolicyToIdentityResponseBody = {
  failedPolicyNames?: [ string ](name='FailedPolicyNames'),
  nonExistPolicyNames?: [ string ](name='NonExistPolicyNames'),
  requestId?: string(name='RequestId'),
}

model AttachAppPolicyToIdentityResponse = {
  headers: map[string]string(name='headers'),
  body: AttachAppPolicyToIdentityResponseBody(name='body'),
}

async function attachAppPolicyToIdentityWithOptions(request: AttachAppPolicyToIdentityRequest, runtime: Util.RuntimeOptions): AttachAppPolicyToIdentityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachAppPolicyToIdentity', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachAppPolicyToIdentity(request: AttachAppPolicyToIdentityRequest): AttachAppPolicyToIdentityResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachAppPolicyToIdentityWithOptions(request, runtime);
}

model BatchSetVodDomainConfigsRequest {
  domainNames?: string(name='DomainNames'),
  functions?: string(name='Functions'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchSetVodDomainConfigsResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchSetVodDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchSetVodDomainConfigsResponseBody(name='body'),
}

async function batchSetVodDomainConfigsWithOptions(request: BatchSetVodDomainConfigsRequest, runtime: Util.RuntimeOptions): BatchSetVodDomainConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchSetVodDomainConfigs', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchSetVodDomainConfigs(request: BatchSetVodDomainConfigsRequest): BatchSetVodDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchSetVodDomainConfigsWithOptions(request, runtime);
}

model BatchStartVodDomainRequest {
  domainNames?: string(name='DomainNames'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchStartVodDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStartVodDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStartVodDomainResponseBody(name='body'),
}

async function batchStartVodDomainWithOptions(request: BatchStartVodDomainRequest, runtime: Util.RuntimeOptions): BatchStartVodDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchStartVodDomain', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchStartVodDomain(request: BatchStartVodDomainRequest): BatchStartVodDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStartVodDomainWithOptions(request, runtime);
}

model BatchStopVodDomainRequest {
  domainNames?: string(name='DomainNames'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model BatchStopVodDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model BatchStopVodDomainResponse = {
  headers: map[string]string(name='headers'),
  body: BatchStopVodDomainResponseBody(name='body'),
}

async function batchStopVodDomainWithOptions(request: BatchStopVodDomainRequest, runtime: Util.RuntimeOptions): BatchStopVodDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('BatchStopVodDomain', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function batchStopVodDomain(request: BatchStopVodDomainRequest): BatchStopVodDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchStopVodDomainWithOptions(request, runtime);
}

model CancelUrlUploadJobsRequest {
  jobIds?: string(name='JobIds'),
  uploadUrls?: string(name='UploadUrls'),
}

model CancelUrlUploadJobsResponseBody = {
  canceledJobs?: [ string ](name='CanceledJobs'),
  nonExists?: [ string ](name='NonExists'),
  requestId?: string(name='RequestId'),
}

model CancelUrlUploadJobsResponse = {
  headers: map[string]string(name='headers'),
  body: CancelUrlUploadJobsResponseBody(name='body'),
}

async function cancelUrlUploadJobsWithOptions(request: CancelUrlUploadJobsRequest, runtime: Util.RuntimeOptions): CancelUrlUploadJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelUrlUploadJobs', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelUrlUploadJobs(request: CancelUrlUploadJobsRequest): CancelUrlUploadJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelUrlUploadJobsWithOptions(request, runtime);
}

model CreateAppInfoRequest {
  appName?: string(name='AppName'),
  description?: string(name='Description'),
}

model CreateAppInfoResponseBody = {
  appId?: string(name='AppId'),
  requestId?: string(name='RequestId'),
}

model CreateAppInfoResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppInfoResponseBody(name='body'),
}

async function createAppInfoWithOptions(request: CreateAppInfoRequest, runtime: Util.RuntimeOptions): CreateAppInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAppInfo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAppInfo(request: CreateAppInfoRequest): CreateAppInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppInfoWithOptions(request, runtime);
}

model CreateAuditRequest {
  auditContent?: string(name='AuditContent'),
}

model CreateAuditResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateAuditResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAuditResponseBody(name='body'),
}

async function createAuditWithOptions(request: CreateAuditRequest, runtime: Util.RuntimeOptions): CreateAuditResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAudit', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAudit(request: CreateAuditRequest): CreateAuditResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAuditWithOptions(request, runtime);
}

model CreateDetectionTemplateRequest {
  period?: string(name='Period'),
  platform?: string(name='Platform'),
  templateName?: string(name='TemplateName'),
}

model CreateDetectionTemplateResponseBody = {
  detectionTemplate?: {
    createTime?: string(name='CreateTime'),
    modifyTime?: string(name='ModifyTime'),
    period?: string(name='Period'),
    platform?: string(name='Platform'),
    templateId?: string(name='TemplateId'),
    templateName?: string(name='TemplateName'),
    userId?: long(name='UserId'),
  }(name='DetectionTemplate'),
  requestId?: string(name='RequestId'),
}

model CreateDetectionTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDetectionTemplateResponseBody(name='body'),
}

async function createDetectionTemplateWithOptions(request: CreateDetectionTemplateRequest, runtime: Util.RuntimeOptions): CreateDetectionTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDetectionTemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDetectionTemplate(request: CreateDetectionTemplateRequest): CreateDetectionTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDetectionTemplateWithOptions(request, runtime);
}

model CreateUploadAttachedMediaRequest {
  appId?: string(name='AppId'),
  businessType?: string(name='BusinessType'),
  cateIds?: string(name='CateIds'),
  description?: string(name='Description'),
  fileName?: string(name='FileName'),
  fileSize?: string(name='FileSize'),
  mediaExt?: string(name='MediaExt'),
  storageLocation?: string(name='StorageLocation'),
  tags?: string(name='Tags'),
  title?: string(name='Title'),
  userData?: string(name='UserData'),
}

model CreateUploadAttachedMediaResponseBody = {
  fileURL?: string(name='FileURL'),
  mediaId?: string(name='MediaId'),
  mediaURL?: string(name='MediaURL'),
  requestId?: string(name='RequestId'),
  uploadAddress?: string(name='UploadAddress'),
  uploadAuth?: string(name='UploadAuth'),
}

model CreateUploadAttachedMediaResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUploadAttachedMediaResponseBody(name='body'),
}

async function createUploadAttachedMediaWithOptions(request: CreateUploadAttachedMediaRequest, runtime: Util.RuntimeOptions): CreateUploadAttachedMediaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUploadAttachedMedia', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUploadAttachedMedia(request: CreateUploadAttachedMediaRequest): CreateUploadAttachedMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUploadAttachedMediaWithOptions(request, runtime);
}

model CreateUploadImageRequest {
  appId?: string(name='AppId'),
  cateId?: long(name='CateId'),
  description?: string(name='Description'),
  imageExt?: string(name='ImageExt'),
  imageType?: string(name='ImageType'),
  storageLocation?: string(name='StorageLocation'),
  tags?: string(name='Tags'),
  title?: string(name='Title'),
  userData?: string(name='UserData'),
}

model CreateUploadImageResponseBody = {
  fileURL?: string(name='FileURL'),
  imageId?: string(name='ImageId'),
  imageURL?: string(name='ImageURL'),
  requestId?: string(name='RequestId'),
  uploadAddress?: string(name='UploadAddress'),
  uploadAuth?: string(name='UploadAuth'),
}

model CreateUploadImageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUploadImageResponseBody(name='body'),
}

async function createUploadImageWithOptions(request: CreateUploadImageRequest, runtime: Util.RuntimeOptions): CreateUploadImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUploadImage', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUploadImage(request: CreateUploadImageRequest): CreateUploadImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUploadImageWithOptions(request, runtime);
}

model CreateUploadVideoRequest {
  appId?: string(name='AppId'),
  cateId?: long(name='CateId'),
  coverURL?: string(name='CoverURL'),
  description?: string(name='Description'),
  fileName?: string(name='FileName'),
  fileSize?: long(name='FileSize'),
  storageLocation?: string(name='StorageLocation'),
  tags?: string(name='Tags'),
  templateGroupId?: string(name='TemplateGroupId'),
  title?: string(name='Title'),
  userData?: string(name='UserData'),
  workflowId?: string(name='WorkflowId'),
}

model CreateUploadVideoResponseBody = {
  requestId?: string(name='RequestId'),
  uploadAddress?: string(name='UploadAddress'),
  uploadAuth?: string(name='UploadAuth'),
  videoId?: string(name='VideoId'),
}

model CreateUploadVideoResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUploadVideoResponseBody(name='body'),
}

async function createUploadVideoWithOptions(request: CreateUploadVideoRequest, runtime: Util.RuntimeOptions): CreateUploadVideoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUploadVideo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUploadVideo(request: CreateUploadVideoRequest): CreateUploadVideoResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUploadVideoWithOptions(request, runtime);
}

model CreateVodRealTimeLogDeliveryRequest {
  domainName?: string(name='DomainName'),
  logstore?: string(name='Logstore'),
  ownerId?: long(name='OwnerId'),
  project?: string(name='Project'),
  region?: string(name='Region'),
}

model CreateVodRealTimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateVodRealTimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVodRealTimeLogDeliveryResponseBody(name='body'),
}

async function createVodRealTimeLogDeliveryWithOptions(request: CreateVodRealTimeLogDeliveryRequest, runtime: Util.RuntimeOptions): CreateVodRealTimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('CreateVodRealTimeLogDelivery', '2017-03-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function createVodRealTimeLogDelivery(request: CreateVodRealTimeLogDeliveryRequest): CreateVodRealTimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVodRealTimeLogDeliveryWithOptions(request, runtime);
}

model DeleteAIImageInfosRequest {
  AIImageInfoIds?: string(name='AIImageInfoIds'),
}

model DeleteAIImageInfosResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAIImageInfosResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAIImageInfosResponseBody(name='body'),
}

async function deleteAIImageInfosWithOptions(request: DeleteAIImageInfosRequest, runtime: Util.RuntimeOptions): DeleteAIImageInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAIImageInfos', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAIImageInfos(request: DeleteAIImageInfosRequest): DeleteAIImageInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAIImageInfosWithOptions(request, runtime);
}

model DeleteAITemplateRequest {
  templateId?: string(name='TemplateId'),
}

model DeleteAITemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model DeleteAITemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAITemplateResponseBody(name='body'),
}

async function deleteAITemplateWithOptions(request: DeleteAITemplateRequest, runtime: Util.RuntimeOptions): DeleteAITemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAITemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAITemplate(request: DeleteAITemplateRequest): DeleteAITemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAITemplateWithOptions(request, runtime);
}

model DeleteAppInfoRequest {
  appId?: string(name='AppId'),
}

model DeleteAppInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteAppInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAppInfoResponseBody(name='body'),
}

async function deleteAppInfoWithOptions(request: DeleteAppInfoRequest, runtime: Util.RuntimeOptions): DeleteAppInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAppInfo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAppInfo(request: DeleteAppInfoRequest): DeleteAppInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppInfoWithOptions(request, runtime);
}

model DeleteAttachedMediaRequest {
  mediaIds?: string(name='MediaIds'),
}

model DeleteAttachedMediaResponseBody = {
  nonExistMediaIds?: [ string ](name='NonExistMediaIds'),
  requestId?: string(name='RequestId'),
}

model DeleteAttachedMediaResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAttachedMediaResponseBody(name='body'),
}

async function deleteAttachedMediaWithOptions(request: DeleteAttachedMediaRequest, runtime: Util.RuntimeOptions): DeleteAttachedMediaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteAttachedMedia', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteAttachedMedia(request: DeleteAttachedMediaRequest): DeleteAttachedMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAttachedMediaWithOptions(request, runtime);
}

model DeleteCategoryRequest {
  cateId?: long(name='CateId'),
}

model DeleteCategoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCategoryResponseBody(name='body'),
}

async function deleteCategoryWithOptions(request: DeleteCategoryRequest, runtime: Util.RuntimeOptions): DeleteCategoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCategory', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCategory(request: DeleteCategoryRequest): DeleteCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCategoryWithOptions(request, runtime);
}

model DeleteDetectionTemplateRequest {
  templateId?: string(name='TemplateId'),
}

model DeleteDetectionTemplateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDetectionTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDetectionTemplateResponseBody(name='body'),
}

async function deleteDetectionTemplateWithOptions(request: DeleteDetectionTemplateRequest, runtime: Util.RuntimeOptions): DeleteDetectionTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDetectionTemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDetectionTemplate(request: DeleteDetectionTemplateRequest): DeleteDetectionTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDetectionTemplateWithOptions(request, runtime);
}

model DeleteDynamicImageRequest {
  dynamicImageIds?: string(name='DynamicImageIds'),
  videoId?: string(name='VideoId'),
}

model DeleteDynamicImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDynamicImageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDynamicImageResponseBody(name='body'),
}

async function deleteDynamicImageWithOptions(request: DeleteDynamicImageRequest, runtime: Util.RuntimeOptions): DeleteDynamicImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDynamicImage', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDynamicImage(request: DeleteDynamicImageRequest): DeleteDynamicImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDynamicImageWithOptions(request, runtime);
}

model DeleteEditingProjectRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  projectIds?: string(name='ProjectIds'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
}

model DeleteEditingProjectResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEditingProjectResponseBody(name='body'),
}

async function deleteEditingProjectWithOptions(request: DeleteEditingProjectRequest, runtime: Util.RuntimeOptions): DeleteEditingProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteEditingProject', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteEditingProject(request: DeleteEditingProjectRequest): DeleteEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEditingProjectWithOptions(request, runtime);
}

model DeleteImageRequest {
  deleteImageType?: string(name='DeleteImageType'),
  imageIds?: string(name='ImageIds'),
  imageType?: string(name='ImageType'),
  imageURLs?: string(name='ImageURLs'),
  videoId?: string(name='VideoId'),
}

model DeleteImageResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteImageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteImageResponseBody(name='body'),
}

async function deleteImageWithOptions(request: DeleteImageRequest, runtime: Util.RuntimeOptions): DeleteImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteImage', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteImage(request: DeleteImageRequest): DeleteImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteImageWithOptions(request, runtime);
}

model DeleteMessageCallbackRequest {
  appId?: string(name='AppId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteMessageCallbackResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMessageCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMessageCallbackResponseBody(name='body'),
}

async function deleteMessageCallbackWithOptions(request: DeleteMessageCallbackRequest, runtime: Util.RuntimeOptions): DeleteMessageCallbackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteMessageCallback', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteMessageCallback(request: DeleteMessageCallbackRequest): DeleteMessageCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMessageCallbackWithOptions(request, runtime);
}

model DeleteMezzaninesRequest {
  force?: boolean(name='Force'),
  videoIds?: string(name='VideoIds'),
}

model DeleteMezzaninesResponseBody = {
  nonExistVideoIds?: [ string ](name='NonExistVideoIds'),
  requestId?: string(name='RequestId'),
  unRemoveableVideoIds?: [ string ](name='UnRemoveableVideoIds'),
}

model DeleteMezzaninesResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMezzaninesResponseBody(name='body'),
}

async function deleteMezzaninesWithOptions(request: DeleteMezzaninesRequest, runtime: Util.RuntimeOptions): DeleteMezzaninesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteMezzanines', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteMezzanines(request: DeleteMezzaninesRequest): DeleteMezzaninesResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMezzaninesWithOptions(request, runtime);
}

model DeleteMultipartUploadRequest {
  mediaId?: string(name='MediaId'),
  mediaType?: string(name='MediaType'),
  ownerAccount?: string(name='OwnerAccount'),
}

model DeleteMultipartUploadResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteMultipartUploadResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteMultipartUploadResponseBody(name='body'),
}

async function deleteMultipartUploadWithOptions(request: DeleteMultipartUploadRequest, runtime: Util.RuntimeOptions): DeleteMultipartUploadResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteMultipartUpload', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteMultipartUpload(request: DeleteMultipartUploadRequest): DeleteMultipartUploadResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteMultipartUploadWithOptions(request, runtime);
}

model DeleteStreamRequest {
  jobIds?: string(name='JobIds'),
  videoId?: string(name='VideoId'),
}

model DeleteStreamResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteStreamResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteStreamResponseBody(name='body'),
}

async function deleteStreamWithOptions(request: DeleteStreamRequest, runtime: Util.RuntimeOptions): DeleteStreamResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteStream', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteStream(request: DeleteStreamRequest): DeleteStreamResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteStreamWithOptions(request, runtime);
}

model DeleteTranscodeTemplateGroupRequest {
  forceDelGroup?: string(name='ForceDelGroup'),
  transcodeTemplateGroupId?: string(name='TranscodeTemplateGroupId'),
  transcodeTemplateIds?: string(name='TranscodeTemplateIds'),
}

model DeleteTranscodeTemplateGroupResponseBody = {
  nonExistTranscodeTemplateIds?: [ string ](name='NonExistTranscodeTemplateIds'),
  requestId?: string(name='RequestId'),
}

model DeleteTranscodeTemplateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTranscodeTemplateGroupResponseBody(name='body'),
}

async function deleteTranscodeTemplateGroupWithOptions(request: DeleteTranscodeTemplateGroupRequest, runtime: Util.RuntimeOptions): DeleteTranscodeTemplateGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTranscodeTemplateGroup', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTranscodeTemplateGroup(request: DeleteTranscodeTemplateGroupRequest): DeleteTranscodeTemplateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTranscodeTemplateGroupWithOptions(request, runtime);
}

model DeleteVideoRequest {
  videoIds?: string(name='VideoIds'),
}

model DeleteVideoResponseBody = {
  forbiddenVideoIds?: [ string ](name='ForbiddenVideoIds'),
  nonExistVideoIds?: [ string ](name='NonExistVideoIds'),
  requestId?: string(name='RequestId'),
}

model DeleteVideoResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVideoResponseBody(name='body'),
}

async function deleteVideoWithOptions(request: DeleteVideoRequest, runtime: Util.RuntimeOptions): DeleteVideoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVideo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVideo(request: DeleteVideoRequest): DeleteVideoResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVideoWithOptions(request, runtime);
}

model DeleteVodDomainRequest {
  domainName?: string(name='DomainName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteVodDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVodDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVodDomainResponseBody(name='body'),
}

async function deleteVodDomainWithOptions(request: DeleteVodDomainRequest, runtime: Util.RuntimeOptions): DeleteVodDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVodDomain', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVodDomain(request: DeleteVodDomainRequest): DeleteVodDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVodDomainWithOptions(request, runtime);
}

model DeleteVodRealtimeLogDeliveryRequest {
  domainName?: string(name='DomainName'),
  logstore?: string(name='Logstore'),
  ownerId?: long(name='OwnerId'),
  project?: string(name='Project'),
  region?: string(name='Region'),
}

model DeleteVodRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVodRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVodRealtimeLogDeliveryResponseBody(name='body'),
}

async function deleteVodRealtimeLogDeliveryWithOptions(request: DeleteVodRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DeleteVodRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DeleteVodRealtimeLogDelivery', '2017-03-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function deleteVodRealtimeLogDelivery(request: DeleteVodRealtimeLogDeliveryRequest): DeleteVodRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVodRealtimeLogDeliveryWithOptions(request, runtime);
}

model DeleteVodSpecificConfigRequest {
  configId?: string(name='ConfigId'),
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DeleteVodSpecificConfigResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVodSpecificConfigResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVodSpecificConfigResponseBody(name='body'),
}

async function deleteVodSpecificConfigWithOptions(request: DeleteVodSpecificConfigRequest, runtime: Util.RuntimeOptions): DeleteVodSpecificConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVodSpecificConfig', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVodSpecificConfig(request: DeleteVodSpecificConfigRequest): DeleteVodSpecificConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVodSpecificConfigWithOptions(request, runtime);
}

model DeleteVodTemplateRequest {
  vodTemplateId?: string(name='VodTemplateId'),
}

model DeleteVodTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  vodTemplateId?: string(name='VodTemplateId'),
}

model DeleteVodTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVodTemplateResponseBody(name='body'),
}

async function deleteVodTemplateWithOptions(request: DeleteVodTemplateRequest, runtime: Util.RuntimeOptions): DeleteVodTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVodTemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVodTemplate(request: DeleteVodTemplateRequest): DeleteVodTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVodTemplateWithOptions(request, runtime);
}

model DeleteWatermarkRequest {
  watermarkId?: string(name='WatermarkId'),
}

model DeleteWatermarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteWatermarkResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWatermarkResponseBody(name='body'),
}

async function deleteWatermarkWithOptions(request: DeleteWatermarkRequest, runtime: Util.RuntimeOptions): DeleteWatermarkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteWatermark', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteWatermark(request: DeleteWatermarkRequest): DeleteWatermarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWatermarkWithOptions(request, runtime);
}

model DescribePlayTopVideosRequest {
  bizDate?: string(name='BizDate'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
}

model DescribePlayTopVideosResponseBody = {
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  topPlayVideos?: {
    topPlayVideoStatis?: [ 
    {
      playDuration?: string(name='PlayDuration'),
      title?: string(name='Title'),
      UV?: string(name='UV'),
      VV?: string(name='VV'),
      videoId?: string(name='VideoId'),
    }
  ](name='TopPlayVideoStatis')
  }(name='TopPlayVideos'),
  totalNum?: long(name='TotalNum'),
}

model DescribePlayTopVideosResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlayTopVideosResponseBody(name='body'),
}

async function describePlayTopVideosWithOptions(request: DescribePlayTopVideosRequest, runtime: Util.RuntimeOptions): DescribePlayTopVideosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePlayTopVideos', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePlayTopVideos(request: DescribePlayTopVideosRequest): DescribePlayTopVideosResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePlayTopVideosWithOptions(request, runtime);
}

model DescribePlayUserAvgRequest {
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribePlayUserAvgResponseBody = {
  requestId?: string(name='RequestId'),
  userPlayStatisAvgs?: {
    userPlayStatisAvg?: [ 
    {
      avgPlayCount?: string(name='AvgPlayCount'),
      avgPlayDuration?: string(name='AvgPlayDuration'),
      date?: string(name='Date'),
    }
  ](name='UserPlayStatisAvg')
  }(name='UserPlayStatisAvgs'),
}

model DescribePlayUserAvgResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlayUserAvgResponseBody(name='body'),
}

async function describePlayUserAvgWithOptions(request: DescribePlayUserAvgRequest, runtime: Util.RuntimeOptions): DescribePlayUserAvgResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePlayUserAvg', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePlayUserAvg(request: DescribePlayUserAvgRequest): DescribePlayUserAvgResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePlayUserAvgWithOptions(request, runtime);
}

model DescribePlayUserTotalRequest {
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribePlayUserTotalResponseBody = {
  requestId?: string(name='RequestId'),
  userPlayStatisTotals?: {
    userPlayStatisTotal?: [ 
    {
      date?: string(name='Date'),
      playDuration?: string(name='PlayDuration'),
      playRange?: string(name='PlayRange'),
      UV?: {
        android?: string(name='Android'),
        flash?: string(name='Flash'),
        HTML5?: string(name='HTML5'),
        iOS?: string(name='iOS'),
      }(name='UV'),
      VV?: {
        android?: string(name='Android'),
        flash?: string(name='Flash'),
        HTML5?: string(name='HTML5'),
        iOS?: string(name='iOS'),
      }(name='VV'),
    }
  ](name='UserPlayStatisTotal')
  }(name='UserPlayStatisTotals'),
}

model DescribePlayUserTotalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlayUserTotalResponseBody(name='body'),
}

async function describePlayUserTotalWithOptions(request: DescribePlayUserTotalRequest, runtime: Util.RuntimeOptions): DescribePlayUserTotalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePlayUserTotal', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePlayUserTotal(request: DescribePlayUserTotalRequest): DescribePlayUserTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePlayUserTotalWithOptions(request, runtime);
}

model DescribePlayVideoStatisRequest {
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  videoId?: string(name='VideoId'),
}

model DescribePlayVideoStatisResponseBody = {
  requestId?: string(name='RequestId'),
  videoPlayStatisDetails?: {
    videoPlayStatisDetail?: [ 
    {
      date?: string(name='Date'),
      playDuration?: string(name='PlayDuration'),
      playRange?: string(name='PlayRange'),
      title?: string(name='Title'),
      UV?: string(name='UV'),
      VV?: string(name='VV'),
    }
  ](name='VideoPlayStatisDetail')
  }(name='VideoPlayStatisDetails'),
}

model DescribePlayVideoStatisResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePlayVideoStatisResponseBody(name='body'),
}

async function describePlayVideoStatisWithOptions(request: DescribePlayVideoStatisRequest, runtime: Util.RuntimeOptions): DescribePlayVideoStatisResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePlayVideoStatis', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePlayVideoStatis(request: DescribePlayVideoStatisRequest): DescribePlayVideoStatisResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePlayVideoStatisWithOptions(request, runtime);
}

model DescribeVodAIDataRequest {
  AIType?: string(name='AIType'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region'),
  startTime?: string(name='StartTime'),
}

model DescribeVodAIDataResponseBody = {
  AIData?: {
    AIDataItem?: [ 
    {
      data?: {
        dataItem?: [ 
        {
          name?: string(name='Name'),
          value?: string(name='Value'),
        }
      ](name='DataItem')
      }(name='Data'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='AIDataItem')
  }(name='AIData'),
  dataInterval?: string(name='DataInterval'),
  requestId?: string(name='RequestId'),
}

model DescribeVodAIDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodAIDataResponseBody(name='body'),
}

async function describeVodAIDataWithOptions(request: DescribeVodAIDataRequest, runtime: Util.RuntimeOptions): DescribeVodAIDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodAIData', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodAIData(request: DescribeVodAIDataRequest): DescribeVodAIDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodAIDataWithOptions(request, runtime);
}

model DescribeVodCertificateListRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeVodCertificateListResponseBody = {
  certificateListModel?: {
    certList?: {
      cert?: [ 
      {
        certId?: long(name='CertId'),
        certName?: string(name='CertName'),
        common?: string(name='Common'),
        fingerprint?: string(name='Fingerprint'),
        issuer?: string(name='Issuer'),
        lastTime?: long(name='LastTime'),
      }
    ](name='Cert')
    }(name='CertList'),
    count?: int32(name='Count'),
  }(name='CertificateListModel'),
  requestId?: string(name='RequestId'),
}

model DescribeVodCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodCertificateListResponseBody(name='body'),
}

async function describeVodCertificateListWithOptions(request: DescribeVodCertificateListRequest, runtime: Util.RuntimeOptions): DescribeVodCertificateListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodCertificateList', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodCertificateList(request: DescribeVodCertificateListRequest): DescribeVodCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodCertificateListWithOptions(request, runtime);
}

model DescribeVodDomainBpsDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeVodDomainBpsDataResponseBody = {
  bpsDataPerInterval?: {
    dataModule?: [ 
    {
      domesticValue?: string(name='DomesticValue'),
      httpsDomesticValue?: string(name='HttpsDomesticValue'),
      httpsOverseasValue?: string(name='HttpsOverseasValue'),
      httpsValue?: string(name='HttpsValue'),
      overseasValue?: string(name='OverseasValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='BpsDataPerInterval'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
}

model DescribeVodDomainBpsDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodDomainBpsDataResponseBody(name='body'),
}

async function describeVodDomainBpsDataWithOptions(request: DescribeVodDomainBpsDataRequest, runtime: Util.RuntimeOptions): DescribeVodDomainBpsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodDomainBpsData', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodDomainBpsData(request: DescribeVodDomainBpsDataRequest): DescribeVodDomainBpsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodDomainBpsDataWithOptions(request, runtime);
}

model DescribeVodDomainCertificateInfoRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeVodDomainCertificateInfoResponseBody = {
  certInfos?: {
    certInfo?: [ 
    {
      certDomainName?: string(name='CertDomainName'),
      certExpireTime?: string(name='CertExpireTime'),
      certLife?: string(name='CertLife'),
      certName?: string(name='CertName'),
      certOrg?: string(name='CertOrg'),
      certType?: string(name='CertType'),
      domainName?: string(name='DomainName'),
      serverCertificateStatus?: string(name='ServerCertificateStatus'),
      status?: string(name='Status'),
    }
  ](name='CertInfo')
  }(name='CertInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeVodDomainCertificateInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodDomainCertificateInfoResponseBody(name='body'),
}

async function describeVodDomainCertificateInfoWithOptions(request: DescribeVodDomainCertificateInfoRequest, runtime: Util.RuntimeOptions): DescribeVodDomainCertificateInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodDomainCertificateInfo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodDomainCertificateInfo(request: DescribeVodDomainCertificateInfoRequest): DescribeVodDomainCertificateInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodDomainCertificateInfoWithOptions(request, runtime);
}

model DescribeVodDomainConfigsRequest {
  domainName?: string(name='DomainName'),
  functionNames?: string(name='FunctionNames'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeVodDomainConfigsResponseBody = {
  domainConfigs?: {
    domainConfig?: [ 
    {
      configId?: string(name='ConfigId'),
      functionArgs?: {
        functionArg?: [ 
        {
          argName?: string(name='ArgName'),
          argValue?: string(name='ArgValue'),
        }
      ](name='FunctionArg')
      }(name='FunctionArgs'),
      functionName?: string(name='FunctionName'),
      status?: string(name='Status'),
    }
  ](name='DomainConfig')
  }(name='DomainConfigs'),
  requestId?: string(name='RequestId'),
}

model DescribeVodDomainConfigsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodDomainConfigsResponseBody(name='body'),
}

async function describeVodDomainConfigsWithOptions(request: DescribeVodDomainConfigsRequest, runtime: Util.RuntimeOptions): DescribeVodDomainConfigsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodDomainConfigs', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodDomainConfigs(request: DescribeVodDomainConfigsRequest): DescribeVodDomainConfigsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodDomainConfigsWithOptions(request, runtime);
}

model DescribeVodDomainDetailRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeVodDomainDetailResponseBody = {
  domainDetail?: {
    certName?: string(name='CertName'),
    cname?: string(name='Cname'),
    description?: string(name='Description'),
    domainName?: string(name='DomainName'),
    domainStatus?: string(name='DomainStatus'),
    gmtCreated?: string(name='GmtCreated'),
    gmtModified?: string(name='GmtModified'),
    SSLProtocol?: string(name='SSLProtocol'),
    SSLPub?: string(name='SSLPub'),
    scope?: string(name='Scope'),
    sources?: {
      source?: [ 
      {
        content?: string(name='Content'),
        enabled?: string(name='Enabled'),
        port?: int32(name='Port'),
        priority?: string(name='Priority'),
        type?: string(name='Type'),
      }
    ](name='Source')
    }(name='Sources'),
    weight?: string(name='Weight'),
  }(name='DomainDetail'),
  requestId?: string(name='RequestId'),
}

model DescribeVodDomainDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodDomainDetailResponseBody(name='body'),
}

async function describeVodDomainDetailWithOptions(request: DescribeVodDomainDetailRequest, runtime: Util.RuntimeOptions): DescribeVodDomainDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodDomainDetail', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodDomainDetail(request: DescribeVodDomainDetailRequest): DescribeVodDomainDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodDomainDetailWithOptions(request, runtime);
}

model DescribeVodDomainLogRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  startTime?: string(name='StartTime'),
}

model DescribeVodDomainLogResponseBody = {
  domainLogDetails?: {
    domainLogDetail?: [ 
    {
      domainName?: string(name='DomainName'),
      logCount?: long(name='LogCount'),
      logInfos?: {
        logInfoDetail?: [ 
        {
          endTime?: string(name='EndTime'),
          logName?: string(name='LogName'),
          logPath?: string(name='LogPath'),
          logSize?: long(name='LogSize'),
          startTime?: string(name='StartTime'),
        }
      ](name='LogInfoDetail')
      }(name='LogInfos'),
      pageInfos?: {
        pageNumber?: long(name='PageNumber'),
        pageSize?: long(name='PageSize'),
        total?: long(name='Total'),
      }(name='PageInfos'),
    }
  ](name='DomainLogDetail')
  }(name='DomainLogDetails'),
  requestId?: string(name='RequestId'),
}

model DescribeVodDomainLogResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodDomainLogResponseBody(name='body'),
}

async function describeVodDomainLogWithOptions(request: DescribeVodDomainLogRequest, runtime: Util.RuntimeOptions): DescribeVodDomainLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodDomainLog', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodDomainLog(request: DescribeVodDomainLogRequest): DescribeVodDomainLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodDomainLogWithOptions(request, runtime);
}

model DescribeVodDomainRealtimeLogDeliveryRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeVodDomainRealtimeLogDeliveryResponseBody = {
  logstore?: string(name='Logstore'),
  project?: string(name='Project'),
  region?: string(name='Region'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeVodDomainRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodDomainRealtimeLogDeliveryResponseBody(name='body'),
}

async function describeVodDomainRealtimeLogDeliveryWithOptions(request: DescribeVodDomainRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DescribeVodDomainRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DescribeVodDomainRealtimeLogDelivery', '2017-03-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function describeVodDomainRealtimeLogDelivery(request: DescribeVodDomainRealtimeLogDeliveryRequest): DescribeVodDomainRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodDomainRealtimeLogDeliveryWithOptions(request, runtime);
}

model DescribeVodDomainTrafficDataRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ispNameEn?: string(name='IspNameEn'),
  locationNameEn?: string(name='LocationNameEn'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
}

model DescribeVodDomainTrafficDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  trafficDataPerInterval?: {
    dataModule?: [ 
    {
      domesticValue?: string(name='DomesticValue'),
      httpsDomesticValue?: string(name='HttpsDomesticValue'),
      httpsOverseasValue?: string(name='HttpsOverseasValue'),
      httpsValue?: string(name='HttpsValue'),
      overseasValue?: string(name='OverseasValue'),
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='TrafficDataPerInterval'),
}

model DescribeVodDomainTrafficDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodDomainTrafficDataResponseBody(name='body'),
}

async function describeVodDomainTrafficDataWithOptions(request: DescribeVodDomainTrafficDataRequest, runtime: Util.RuntimeOptions): DescribeVodDomainTrafficDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodDomainTrafficData', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodDomainTrafficData(request: DescribeVodDomainTrafficDataRequest): DescribeVodDomainTrafficDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodDomainTrafficDataWithOptions(request, runtime);
}

model DescribeVodDomainUsageDataRequest {
  area?: string(name='Area'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  field?: string(name='Field'),
  ownerId?: long(name='OwnerId'),
  startTime?: string(name='StartTime'),
  type?: string(name='Type'),
}

model DescribeVodDomainUsageDataResponseBody = {
  area?: string(name='Area'),
  dataInterval?: string(name='DataInterval'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  requestId?: string(name='RequestId'),
  startTime?: string(name='StartTime'),
  type?: string(name='Type'),
  usageDataPerInterval?: {
    dataModule?: [ 
    {
      timeStamp?: string(name='TimeStamp'),
      value?: string(name='Value'),
    }
  ](name='DataModule')
  }(name='UsageDataPerInterval'),
}

model DescribeVodDomainUsageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodDomainUsageDataResponseBody(name='body'),
}

async function describeVodDomainUsageDataWithOptions(request: DescribeVodDomainUsageDataRequest, runtime: Util.RuntimeOptions): DescribeVodDomainUsageDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodDomainUsageData', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodDomainUsageData(request: DescribeVodDomainUsageDataRequest): DescribeVodDomainUsageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodDomainUsageDataWithOptions(request, runtime);
}

model DescribeVodRefreshQuotaRequest {
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model DescribeVodRefreshQuotaResponseBody = {
  blockQuota?: string(name='BlockQuota'),
  dirQuota?: string(name='DirQuota'),
  dirRemain?: string(name='DirRemain'),
  preloadQuota?: string(name='PreloadQuota'),
  preloadRemain?: string(name='PreloadRemain'),
  requestId?: string(name='RequestId'),
  urlQuota?: string(name='UrlQuota'),
  urlRemain?: string(name='UrlRemain'),
  blockRemain?: string(name='blockRemain'),
}

model DescribeVodRefreshQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodRefreshQuotaResponseBody(name='body'),
}

async function describeVodRefreshQuotaWithOptions(request: DescribeVodRefreshQuotaRequest, runtime: Util.RuntimeOptions): DescribeVodRefreshQuotaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodRefreshQuota', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodRefreshQuota(request: DescribeVodRefreshQuotaRequest): DescribeVodRefreshQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodRefreshQuotaWithOptions(request, runtime);
}

model DescribeVodRefreshTasksRequest {
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  objectPath?: string(name='ObjectPath'),
  objectType?: string(name='ObjectType'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
  taskId?: string(name='TaskId'),
}

model DescribeVodRefreshTasksResponseBody = {
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  tasks?: {
    task?: [ 
    {
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      objectPath?: string(name='ObjectPath'),
      objectType?: string(name='ObjectType'),
      process?: string(name='Process'),
      status?: string(name='Status'),
      taskId?: string(name='TaskId'),
    }
  ](name='Task')
  }(name='Tasks'),
  totalCount?: long(name='TotalCount'),
}

model DescribeVodRefreshTasksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodRefreshTasksResponseBody(name='body'),
}

async function describeVodRefreshTasksWithOptions(request: DescribeVodRefreshTasksRequest, runtime: Util.RuntimeOptions): DescribeVodRefreshTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodRefreshTasks', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodRefreshTasks(request: DescribeVodRefreshTasksRequest): DescribeVodRefreshTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodRefreshTasksWithOptions(request, runtime);
}

model DescribeVodStorageDataRequest {
  endTime?: string(name='EndTime'),
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region'),
  startTime?: string(name='StartTime'),
  storage?: string(name='Storage'),
  storageType?: string(name='StorageType'),
}

model DescribeVodStorageDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  requestId?: string(name='RequestId'),
  storageData?: {
    storageDataItem?: [ 
    {
      networkOut?: string(name='NetworkOut'),
      storageUtilization?: string(name='StorageUtilization'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='StorageDataItem')
  }(name='StorageData'),
}

model DescribeVodStorageDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodStorageDataResponseBody(name='body'),
}

async function describeVodStorageDataWithOptions(request: DescribeVodStorageDataRequest, runtime: Util.RuntimeOptions): DescribeVodStorageDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodStorageData', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodStorageData(request: DescribeVodStorageDataRequest): DescribeVodStorageDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodStorageDataWithOptions(request, runtime);
}

model DescribeVodTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeVodTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag'),
    }
  ](name='TagResources'),
}

model DescribeVodTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodTagResourcesResponseBody(name='body'),
}

async function describeVodTagResourcesWithOptions(request: DescribeVodTagResourcesRequest, runtime: Util.RuntimeOptions): DescribeVodTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodTagResources', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodTagResources(request: DescribeVodTagResourcesRequest): DescribeVodTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodTagResourcesWithOptions(request, runtime);
}

model DescribeVodTranscodeDataRequest {
  endTime?: string(name='EndTime'),
  interval?: string(name='Interval'),
  ownerId?: long(name='OwnerId'),
  region?: string(name='Region'),
  specification?: string(name='Specification'),
  startTime?: string(name='StartTime'),
  storage?: string(name='Storage'),
}

model DescribeVodTranscodeDataResponseBody = {
  dataInterval?: string(name='DataInterval'),
  requestId?: string(name='RequestId'),
  transcodeData?: {
    transcodeDataItem?: [ 
    {
      data?: {
        dataItem?: [ 
        {
          name?: string(name='Name'),
          value?: string(name='Value'),
        }
      ](name='DataItem')
      }(name='Data'),
      timeStamp?: string(name='TimeStamp'),
    }
  ](name='TranscodeDataItem')
  }(name='TranscodeData'),
}

model DescribeVodTranscodeDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodTranscodeDataResponseBody(name='body'),
}

async function describeVodTranscodeDataWithOptions(request: DescribeVodTranscodeDataRequest, runtime: Util.RuntimeOptions): DescribeVodTranscodeDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodTranscodeData', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodTranscodeData(request: DescribeVodTranscodeDataRequest): DescribeVodTranscodeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodTranscodeDataWithOptions(request, runtime);
}

model DescribeVodUserDomainsRequest {
  domainName?: string(name='DomainName'),
  domainSearchType?: string(name='DomainSearchType'),
  domainStatus?: string(name='DomainStatus'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityToken?: string(name='SecurityToken'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeVodUserDomainsResponseBody = {
  domains?: {
    pageData?: [ 
    {
      cname?: string(name='Cname'),
      description?: string(name='Description'),
      domainName?: string(name='DomainName'),
      domainStatus?: string(name='DomainStatus'),
      gmtCreated?: string(name='GmtCreated'),
      gmtModified?: string(name='GmtModified'),
      sandbox?: string(name='Sandbox'),
      sources?: {
        source?: [ 
        {
          content?: string(name='Content'),
          port?: int32(name='Port'),
          priority?: string(name='Priority'),
          type?: string(name='Type'),
        }
      ](name='Source')
      }(name='Sources'),
      sslProtocol?: string(name='SslProtocol'),
    }
  ](name='PageData')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeVodUserDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodUserDomainsResponseBody(name='body'),
}

async function describeVodUserDomainsWithOptions(request: DescribeVodUserDomainsRequest, runtime: Util.RuntimeOptions): DescribeVodUserDomainsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodUserDomains', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodUserDomains(request: DescribeVodUserDomainsRequest): DescribeVodUserDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodUserDomainsWithOptions(request, runtime);
}

model DescribeVodUserTagsRequest {
  ownerId?: long(name='OwnerId'),
}

model DescribeVodUserTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tags?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Tags'),
}

model DescribeVodUserTagsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodUserTagsResponseBody(name='body'),
}

async function describeVodUserTagsWithOptions(request: DescribeVodUserTagsRequest, runtime: Util.RuntimeOptions): DescribeVodUserTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodUserTags', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodUserTags(request: DescribeVodUserTagsRequest): DescribeVodUserTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodUserTagsWithOptions(request, runtime);
}

model DescribeVodVerifyContentRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DescribeVodVerifyContentResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model DescribeVodVerifyContentResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVodVerifyContentResponseBody(name='body'),
}

async function describeVodVerifyContentWithOptions(request: DescribeVodVerifyContentRequest, runtime: Util.RuntimeOptions): DescribeVodVerifyContentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVodVerifyContent', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVodVerifyContent(request: DescribeVodVerifyContentRequest): DescribeVodVerifyContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVodVerifyContentWithOptions(request, runtime);
}

model DetachAppPolicyFromIdentityRequest {
  appId?: string(name='AppId'),
  identityName?: string(name='IdentityName'),
  identityType?: string(name='IdentityType'),
  policyNames?: string(name='PolicyNames'),
}

model DetachAppPolicyFromIdentityResponseBody = {
  failedPolicyNames?: [ string ](name='FailedPolicyNames'),
  nonExistPolicyNames?: [ string ](name='NonExistPolicyNames'),
  requestId?: string(name='RequestId'),
}

model DetachAppPolicyFromIdentityResponse = {
  headers: map[string]string(name='headers'),
  body: DetachAppPolicyFromIdentityResponseBody(name='body'),
}

async function detachAppPolicyFromIdentityWithOptions(request: DetachAppPolicyFromIdentityRequest, runtime: Util.RuntimeOptions): DetachAppPolicyFromIdentityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachAppPolicyFromIdentity', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachAppPolicyFromIdentity(request: DetachAppPolicyFromIdentityRequest): DetachAppPolicyFromIdentityResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachAppPolicyFromIdentityWithOptions(request, runtime);
}

model DisableVodRealtimeLogDeliveryRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model DisableVodRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableVodRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: DisableVodRealtimeLogDeliveryResponseBody(name='body'),
}

async function disableVodRealtimeLogDeliveryWithOptions(request: DisableVodRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): DisableVodRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('DisableVodRealtimeLogDelivery', '2017-03-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function disableVodRealtimeLogDelivery(request: DisableVodRealtimeLogDeliveryRequest): DisableVodRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableVodRealtimeLogDeliveryWithOptions(request, runtime);
}

model EnableVodRealtimeLogDeliveryRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
}

model EnableVodRealtimeLogDeliveryResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableVodRealtimeLogDeliveryResponse = {
  headers: map[string]string(name='headers'),
  body: EnableVodRealtimeLogDeliveryResponseBody(name='body'),
}

async function enableVodRealtimeLogDeliveryWithOptions(request: EnableVodRealtimeLogDeliveryRequest, runtime: Util.RuntimeOptions): EnableVodRealtimeLogDeliveryResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('EnableVodRealtimeLogDelivery', '2017-03-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function enableVodRealtimeLogDelivery(request: EnableVodRealtimeLogDeliveryRequest): EnableVodRealtimeLogDeliveryResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableVodRealtimeLogDeliveryWithOptions(request, runtime);
}

model GetAICaptionExtractionJobsRequest {
  jobIds?: string(name='JobIds'),
}

model GetAICaptionExtractionJobsResponseBody = {
  AICaptionExtractionJobList?: [ 
    {
      AICaptionExtractionResult?: string(name='AICaptionExtractionResult'),
      code?: string(name='Code'),
      creationTime?: string(name='CreationTime'),
      jobId?: string(name='JobId'),
      message?: string(name='Message'),
      status?: string(name='Status'),
      templateConfig?: string(name='TemplateConfig'),
      userData?: string(name='UserData'),
      videoId?: string(name='VideoId'),
    }
  ](name='AICaptionExtractionJobList'),
  requestId?: string(name='RequestId'),
}

model GetAICaptionExtractionJobsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAICaptionExtractionJobsResponseBody(name='body'),
}

async function getAICaptionExtractionJobsWithOptions(request: GetAICaptionExtractionJobsRequest, runtime: Util.RuntimeOptions): GetAICaptionExtractionJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAICaptionExtractionJobs', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAICaptionExtractionJobs(request: GetAICaptionExtractionJobsRequest): GetAICaptionExtractionJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAICaptionExtractionJobsWithOptions(request, runtime);
}

model GetAIImageJobsRequest {
  jobIds?: string(name='JobIds'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
}

model GetAIImageJobsResponseBody = {
  AIImageJobList?: [ 
    {
      AIImageResult?: string(name='AIImageResult'),
      code?: string(name='Code'),
      creationTime?: string(name='CreationTime'),
      jobId?: string(name='JobId'),
      message?: string(name='Message'),
      status?: string(name='Status'),
      templateConfig?: string(name='TemplateConfig'),
      templateId?: string(name='TemplateId'),
      userData?: string(name='UserData'),
      videoId?: string(name='VideoId'),
    }
  ](name='AIImageJobList'),
  requestId?: string(name='RequestId'),
}

model GetAIImageJobsResponse = {
  headers: map[string]string(name='headers'),
  body: GetAIImageJobsResponseBody(name='body'),
}

async function getAIImageJobsWithOptions(request: GetAIImageJobsRequest, runtime: Util.RuntimeOptions): GetAIImageJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAIImageJobs', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAIImageJobs(request: GetAIImageJobsRequest): GetAIImageJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAIImageJobsWithOptions(request, runtime);
}

model GetAIMediaAuditJobRequest {
  jobId?: string(name='JobId'),
}

model GetAIMediaAuditJobResponseBody = {
  mediaAuditJob?: {
    code?: string(name='Code'),
    completeTime?: string(name='CompleteTime'),
    creationTime?: string(name='CreationTime'),
    data?: {
      abnormalModules?: string(name='AbnormalModules'),
      audioResult?: [ 
        {
          label?: string(name='Label'),
          scene?: string(name='Scene'),
          score?: string(name='Score'),
          suggestion?: string(name='Suggestion'),
        }
      ](name='AudioResult'),
      imageResult?: [ 
        {
          label?: string(name='Label'),
          result?: [ 
            {
              label?: string(name='Label'),
              scene?: string(name='Scene'),
              score?: string(name='Score'),
              suggestion?: string(name='Suggestion'),
            }
          ](name='Result'),
          suggestion?: string(name='Suggestion'),
          type?: string(name='Type'),
          url?: string(name='Url'),
        }
      ](name='ImageResult'),
      label?: string(name='Label'),
      suggestion?: string(name='Suggestion'),
      textResult?: [ 
        {
          content?: string(name='Content'),
          label?: string(name='Label'),
          scene?: string(name='Scene'),
          score?: string(name='Score'),
          suggestion?: string(name='Suggestion'),
          type?: string(name='Type'),
        }
      ](name='TextResult'),
      videoResult?: {
        adResult?: {
          averageScore?: string(name='AverageScore'),
          counterList?: [ 
            {
              count?: int32(name='Count'),
              label?: string(name='Label'),
            }
          ](name='CounterList'),
          label?: string(name='Label'),
          maxScore?: string(name='MaxScore'),
          suggestion?: string(name='Suggestion'),
          topList?: [ 
            {
              label?: string(name='Label'),
              score?: string(name='Score'),
              timestamp?: string(name='Timestamp'),
              url?: string(name='Url'),
            }
          ](name='TopList'),
        }(name='AdResult'),
        label?: string(name='Label'),
        liveResult?: {
          averageScore?: string(name='AverageScore'),
          counterList?: [ 
            {
              count?: int32(name='Count'),
              label?: string(name='Label'),
            }
          ](name='CounterList'),
          label?: string(name='Label'),
          maxScore?: string(name='MaxScore'),
          suggestion?: string(name='Suggestion'),
          topList?: [ 
            {
              label?: string(name='Label'),
              score?: string(name='Score'),
              timestamp?: string(name='Timestamp'),
              url?: string(name='Url'),
            }
          ](name='TopList'),
        }(name='LiveResult'),
        logoResult?: {
          averageScore?: string(name='AverageScore'),
          counterList?: [ 
            {
              count?: int32(name='Count'),
              label?: string(name='Label'),
            }
          ](name='CounterList'),
          label?: string(name='Label'),
          maxScore?: string(name='MaxScore'),
          suggestion?: string(name='Suggestion'),
          topList?: [ 
            {
              label?: string(name='Label'),
              score?: string(name='Score'),
              timestamp?: string(name='Timestamp'),
              url?: string(name='Url'),
            }
          ](name='TopList'),
        }(name='LogoResult'),
        pornResult?: {
          averageScore?: string(name='AverageScore'),
          counterList?: [ 
            {
              count?: int32(name='Count'),
              label?: string(name='Label'),
            }
          ](name='CounterList'),
          label?: string(name='Label'),
          maxScore?: string(name='MaxScore'),
          suggestion?: string(name='Suggestion'),
          topList?: [ 
            {
              label?: string(name='Label'),
              score?: string(name='Score'),
              timestamp?: string(name='Timestamp'),
              url?: string(name='Url'),
            }
          ](name='TopList'),
        }(name='PornResult'),
        suggestion?: string(name='Suggestion'),
        terrorismResult?: {
          averageScore?: string(name='AverageScore'),
          counterList?: [ 
            {
              count?: int32(name='Count'),
              label?: string(name='Label'),
            }
          ](name='CounterList'),
          label?: string(name='Label'),
          maxScore?: string(name='MaxScore'),
          suggestion?: string(name='Suggestion'),
          topList?: [ 
            {
              label?: string(name='Label'),
              score?: string(name='Score'),
              timestamp?: string(name='Timestamp'),
              url?: string(name='Url'),
            }
          ](name='TopList'),
        }(name='TerrorismResult'),
      }(name='VideoResult'),
    }(name='Data'),
    jobId?: string(name='JobId'),
    mediaId?: string(name='MediaId'),
    message?: string(name='Message'),
    status?: string(name='Status'),
    type?: string(name='Type'),
  }(name='MediaAuditJob'),
  requestId?: string(name='RequestId'),
}

model GetAIMediaAuditJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetAIMediaAuditJobResponseBody(name='body'),
}

async function getAIMediaAuditJobWithOptions(request: GetAIMediaAuditJobRequest, runtime: Util.RuntimeOptions): GetAIMediaAuditJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAIMediaAuditJob', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAIMediaAuditJob(request: GetAIMediaAuditJobRequest): GetAIMediaAuditJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAIMediaAuditJobWithOptions(request, runtime);
}

model GetAITemplateRequest {
  templateId?: string(name='TemplateId'),
}

model GetAITemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateInfo?: {
    creationTime?: string(name='CreationTime'),
    isDefault?: string(name='IsDefault'),
    modifyTime?: string(name='ModifyTime'),
    source?: string(name='Source'),
    templateConfig?: string(name='TemplateConfig'),
    templateId?: string(name='TemplateId'),
    templateName?: string(name='TemplateName'),
    templateType?: string(name='TemplateType'),
  }(name='TemplateInfo'),
}

model GetAITemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetAITemplateResponseBody(name='body'),
}

async function getAITemplateWithOptions(request: GetAITemplateRequest, runtime: Util.RuntimeOptions): GetAITemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAITemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAITemplate(request: GetAITemplateRequest): GetAITemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAITemplateWithOptions(request, runtime);
}

model GetAIVideoTagResultRequest {
  mediaId?: string(name='MediaId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
}

model GetAIVideoTagResultResponseBody = {
  requestId?: string(name='RequestId'),
  videoTagResult?: {
    category?: [ 
      {
        tag?: string(name='Tag'),
      }
    ](name='Category'),
    keyword?: [ 
      {
        tag?: string(name='Tag'),
        times?: [ string ](name='Times'),
      }
    ](name='Keyword'),
    location?: [ 
      {
        tag?: string(name='Tag'),
        times?: [ string ](name='Times'),
      }
    ](name='Location'),
    person?: [ 
      {
        faceUrl?: string(name='FaceUrl'),
        tag?: string(name='Tag'),
        times?: [ string ](name='Times'),
      }
    ](name='Person'),
    time?: [ 
      {
        tag?: string(name='Tag'),
        times?: [ string ](name='Times'),
      }
    ](name='Time'),
  }(name='VideoTagResult'),
}

model GetAIVideoTagResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetAIVideoTagResultResponseBody(name='body'),
}

async function getAIVideoTagResultWithOptions(request: GetAIVideoTagResultRequest, runtime: Util.RuntimeOptions): GetAIVideoTagResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAIVideoTagResult', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAIVideoTagResult(request: GetAIVideoTagResultRequest): GetAIVideoTagResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAIVideoTagResultWithOptions(request, runtime);
}

model GetAppInfosRequest {
  appIds?: string(name='AppIds'),
}

model GetAppInfosResponseBody = {
  appInfoList?: [ 
    {
      appId?: string(name='AppId'),
      appName?: string(name='AppName'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      modificationTime?: string(name='ModificationTime'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='AppInfoList'),
  nonExistAppIds?: [ string ](name='NonExistAppIds'),
  requestId?: string(name='RequestId'),
}

model GetAppInfosResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppInfosResponseBody(name='body'),
}

async function getAppInfosWithOptions(request: GetAppInfosRequest, runtime: Util.RuntimeOptions): GetAppInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAppInfos', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAppInfos(request: GetAppInfosRequest): GetAppInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppInfosWithOptions(request, runtime);
}

model GetAttachedMediaInfoRequest {
  authTimeout?: long(name='AuthTimeout'),
  mediaIds?: string(name='MediaIds'),
  outputType?: string(name='OutputType'),
}

model GetAttachedMediaInfoResponseBody = {
  attachedMediaList?: [ 
    {
      appId?: string(name='AppId'),
      categories?: [ 
        {
          cateId?: long(name='CateId'),
          cateName?: string(name='CateName'),
          level?: long(name='Level'),
          parentId?: long(name='ParentId'),
        }
      ](name='Categories'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      mediaId?: string(name='MediaId'),
      modificationTime?: string(name='ModificationTime'),
      status?: string(name='Status'),
      storageLocation?: string(name='StorageLocation'),
      tags?: string(name='Tags'),
      title?: string(name='Title'),
      type?: string(name='Type'),
      URL?: string(name='URL'),
    }
  ](name='AttachedMediaList'),
  nonExistMediaIds?: [ string ](name='NonExistMediaIds'),
  requestId?: string(name='RequestId'),
}

model GetAttachedMediaInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetAttachedMediaInfoResponseBody(name='body'),
}

async function getAttachedMediaInfoWithOptions(request: GetAttachedMediaInfoRequest, runtime: Util.RuntimeOptions): GetAttachedMediaInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAttachedMediaInfo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAttachedMediaInfo(request: GetAttachedMediaInfoRequest): GetAttachedMediaInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAttachedMediaInfoWithOptions(request, runtime);
}

model GetAuditHistoryRequest {
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  sortBy?: string(name='SortBy'),
  videoId?: string(name='VideoId'),
}

model GetAuditHistoryResponseBody = {
  histories?: [ 
    {
      auditor?: string(name='Auditor'),
      comment?: string(name='Comment'),
      creationTime?: string(name='CreationTime'),
      reason?: string(name='Reason'),
      status?: string(name='Status'),
    }
  ](name='Histories'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  total?: long(name='Total'),
}

model GetAuditHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: GetAuditHistoryResponseBody(name='body'),
}

async function getAuditHistoryWithOptions(request: GetAuditHistoryRequest, runtime: Util.RuntimeOptions): GetAuditHistoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetAuditHistory', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getAuditHistory(request: GetAuditHistoryRequest): GetAuditHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAuditHistoryWithOptions(request, runtime);
}

model GetCategoriesRequest {
  cateId?: long(name='CateId'),
  pageNo?: long(name='PageNo'),
  pageSize?: long(name='PageSize'),
  sortBy?: string(name='SortBy'),
  type?: string(name='Type'),
}

model GetCategoriesResponseBody = {
  category?: {
    cateId?: long(name='CateId'),
    cateName?: string(name='CateName'),
    level?: long(name='Level'),
    parentId?: long(name='ParentId'),
    type?: string(name='Type'),
  }(name='Category'),
  requestId?: string(name='RequestId'),
  subCategories?: {
    category?: [ 
    {
      cateId?: long(name='CateId'),
      cateName?: string(name='CateName'),
      level?: long(name='Level'),
      parentId?: long(name='ParentId'),
      subTotal?: long(name='SubTotal'),
      type?: string(name='Type'),
    }
  ](name='Category')
  }(name='SubCategories'),
  subTotal?: long(name='SubTotal'),
}

model GetCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: GetCategoriesResponseBody(name='body'),
}

async function getCategoriesWithOptions(request: GetCategoriesRequest, runtime: Util.RuntimeOptions): GetCategoriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCategories', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCategories(request: GetCategoriesRequest): GetCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCategoriesWithOptions(request, runtime);
}

model GetDefaultAITemplateRequest {
  templateType?: string(name='TemplateType'),
}

model GetDefaultAITemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateInfo?: {
    creationTime?: string(name='CreationTime'),
    isDefault?: string(name='IsDefault'),
    modifyTime?: string(name='ModifyTime'),
    source?: string(name='Source'),
    templateConfig?: string(name='TemplateConfig'),
    templateId?: string(name='TemplateId'),
    templateName?: string(name='TemplateName'),
    templateType?: string(name='TemplateType'),
  }(name='TemplateInfo'),
}

model GetDefaultAITemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetDefaultAITemplateResponseBody(name='body'),
}

async function getDefaultAITemplateWithOptions(request: GetDefaultAITemplateRequest, runtime: Util.RuntimeOptions): GetDefaultAITemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetDefaultAITemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getDefaultAITemplate(request: GetDefaultAITemplateRequest): GetDefaultAITemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDefaultAITemplateWithOptions(request, runtime);
}

model GetDetectionJobRequest {
  jobId?: string(name='JobId'),
}

model GetDetectionJobResponseBody = {
  detectionJob?: {
    beginTime?: string(name='BeginTime'),
    copyrightBeginTime?: string(name='CopyrightBeginTime'),
    copyrightEndTime?: string(name='CopyrightEndTime'),
    copyrightFile?: string(name='CopyrightFile'),
    copyrightStatus?: string(name='CopyrightStatus'),
    createTime?: string(name='CreateTime'),
    endTime?: string(name='EndTime'),
    jobId?: string(name='JobId'),
    modifyTime?: string(name='ModifyTime'),
    templateId?: string(name='TemplateId'),
    videoId?: string(name='VideoId'),
    whitelistUrls?: string(name='WhitelistUrls'),
  }(name='DetectionJob'),
  requestId?: string(name='RequestId'),
}

model GetDetectionJobResponse = {
  headers: map[string]string(name='headers'),
  body: GetDetectionJobResponseBody(name='body'),
}

async function getDetectionJobWithOptions(request: GetDetectionJobRequest, runtime: Util.RuntimeOptions): GetDetectionJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDetectionJob', '2017-03-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDetectionJob(request: GetDetectionJobRequest): GetDetectionJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDetectionJobWithOptions(request, runtime);
}

model GetDetectionResultRequest {
  countByPage?: long(name='CountByPage'),
  desensitization?: boolean(name='Desensitization'),
  jobId?: string(name='JobId'),
  page?: long(name='Page'),
  status?: string(name='Status'),
}

model GetDetectionResultResponseBody = {
  detectionResultList?: [ 
    {
      collectionTitle?: string(name='CollectionTitle'),
      collectionUrl?: string(name='CollectionUrl'),
      contentType?: string(name='ContentType'),
      createTime?: string(name='CreateTime'),
      modifyTime?: string(name='ModifyTime'),
      platform?: string(name='Platform'),
      status?: string(name='Status'),
      uploader?: string(name='Uploader'),
    }
  ](name='DetectionResultList'),
  requestId?: string(name='RequestId'),
}

model GetDetectionResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetDetectionResultResponseBody(name='body'),
}

async function getDetectionResultWithOptions(request: GetDetectionResultRequest, runtime: Util.RuntimeOptions): GetDetectionResultResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDetectionResult', '2017-03-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDetectionResult(request: GetDetectionResultRequest): GetDetectionResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDetectionResultWithOptions(request, runtime);
}

model GetDetectionTemplateRequest {
  templateId?: string(name='TemplateId'),
}

model GetDetectionTemplateResponseBody = {
  detectionTemplate?: {
    createTime?: string(name='CreateTime'),
    modifyTime?: string(name='ModifyTime'),
    period?: string(name='Period'),
    platform?: string(name='Platform'),
    templateId?: string(name='TemplateId'),
    templateName?: string(name='TemplateName'),
    userId?: long(name='UserId'),
  }(name='DetectionTemplate'),
  requestId?: string(name='RequestId'),
}

model GetDetectionTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetDetectionTemplateResponseBody(name='body'),
}

async function getDetectionTemplateWithOptions(request: GetDetectionTemplateRequest, runtime: Util.RuntimeOptions): GetDetectionTemplateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetDetectionTemplate', '2017-03-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getDetectionTemplate(request: GetDetectionTemplateRequest): GetDetectionTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDetectionTemplateWithOptions(request, runtime);
}

model GetEditingProjectRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  projectId?: string(name='ProjectId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
}

model GetEditingProjectResponseBody = {
  project?: {
    coverURL?: string(name='CoverURL'),
    creationTime?: string(name='CreationTime'),
    description?: string(name='Description'),
    modifiedTime?: string(name='ModifiedTime'),
    projectId?: string(name='ProjectId'),
    regionId?: string(name='RegionId'),
    status?: string(name='Status'),
    storageLocation?: string(name='StorageLocation'),
    timeline?: string(name='Timeline'),
    title?: string(name='Title'),
  }(name='Project'),
  requestId?: string(name='RequestId'),
}

model GetEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: GetEditingProjectResponseBody(name='body'),
}

async function getEditingProjectWithOptions(request: GetEditingProjectRequest, runtime: Util.RuntimeOptions): GetEditingProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEditingProject', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEditingProject(request: GetEditingProjectRequest): GetEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEditingProjectWithOptions(request, runtime);
}

model GetEditingProjectMaterialsRequest {
  materialType?: string(name='MaterialType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  projectId?: string(name='ProjectId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
  type?: string(name='Type'),
}

model GetEditingProjectMaterialsResponseBody = {
  materialList?: {
    material?: [ 
    {
      cateId?: int32(name='CateId'),
      cateName?: string(name='CateName'),
      coverURL?: string(name='CoverURL'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      duration?: float(name='Duration'),
      materialId?: string(name='MaterialId'),
      materialType?: string(name='MaterialType'),
      modifiedTime?: string(name='ModifiedTime'),
      size?: long(name='Size'),
      snapshots?: {
        snapshot?: [ string ](name='Snapshot')
      }(name='Snapshots'),
      source?: string(name='Source'),
      spriteConfig?: string(name='SpriteConfig'),
      sprites?: {
        sprite?: [ string ](name='Sprite')
      }(name='Sprites'),
      status?: string(name='Status'),
      tags?: string(name='Tags'),
      title?: string(name='Title'),
    }
  ](name='Material')
  }(name='MaterialList'),
  requestId?: string(name='RequestId'),
}

model GetEditingProjectMaterialsResponse = {
  headers: map[string]string(name='headers'),
  body: GetEditingProjectMaterialsResponseBody(name='body'),
}

async function getEditingProjectMaterialsWithOptions(request: GetEditingProjectMaterialsRequest, runtime: Util.RuntimeOptions): GetEditingProjectMaterialsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEditingProjectMaterials', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEditingProjectMaterials(request: GetEditingProjectMaterialsRequest): GetEditingProjectMaterialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEditingProjectMaterialsWithOptions(request, runtime);
}

model GetImageInfoRequest {
  authTimeout?: long(name='AuthTimeout'),
  imageId?: string(name='ImageId'),
  outputType?: string(name='OutputType'),
}

model GetImageInfoResponseBody = {
  imageInfo?: {
    appId?: string(name='AppId'),
    cateId?: long(name='CateId'),
    cateName?: string(name='CateName'),
    creationTime?: string(name='CreationTime'),
    description?: string(name='Description'),
    imageId?: string(name='ImageId'),
    imageType?: string(name='ImageType'),
    mezzanine?: {
      fileSize?: string(name='FileSize'),
      fileURL?: string(name='FileURL'),
      height?: int32(name='Height'),
      originalFileName?: string(name='OriginalFileName'),
      width?: int32(name='Width'),
    }(name='Mezzanine'),
    status?: string(name='Status'),
    storageLocation?: string(name='StorageLocation'),
    tags?: string(name='Tags'),
    title?: string(name='Title'),
    URL?: string(name='URL'),
  }(name='ImageInfo'),
  requestId?: string(name='RequestId'),
}

model GetImageInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetImageInfoResponseBody(name='body'),
}

async function getImageInfoWithOptions(request: GetImageInfoRequest, runtime: Util.RuntimeOptions): GetImageInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetImageInfo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getImageInfo(request: GetImageInfoRequest): GetImageInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getImageInfoWithOptions(request, runtime);
}

model GetMediaAuditAudioResultDetailRequest {
  mediaId?: string(name='MediaId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
}

model GetMediaAuditAudioResultDetailResponseBody = {
  mediaAuditAudioResultDetail?: {
    list?: [ 
      {
        endTime?: long(name='EndTime'),
        label?: string(name='Label'),
        startTime?: long(name='StartTime'),
        text?: string(name='Text'),
      }
    ](name='List'),
    pageTotal?: int32(name='PageTotal'),
    total?: int32(name='Total'),
  }(name='MediaAuditAudioResultDetail'),
  requestId?: string(name='RequestId'),
}

model GetMediaAuditAudioResultDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaAuditAudioResultDetailResponseBody(name='body'),
}

async function getMediaAuditAudioResultDetailWithOptions(request: GetMediaAuditAudioResultDetailRequest, runtime: Util.RuntimeOptions): GetMediaAuditAudioResultDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMediaAuditAudioResultDetail', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMediaAuditAudioResultDetail(request: GetMediaAuditAudioResultDetailRequest): GetMediaAuditAudioResultDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaAuditAudioResultDetailWithOptions(request, runtime);
}

model GetMediaAuditResultRequest {
  mediaId?: string(name='MediaId'),
}

model GetMediaAuditResultResponseBody = {
  mediaAuditResult?: {
    abnormalModules?: string(name='AbnormalModules'),
    audioResult?: [ 
      {
        label?: string(name='Label'),
        scene?: string(name='Scene'),
        score?: string(name='Score'),
        suggestion?: string(name='Suggestion'),
      }
    ](name='AudioResult'),
    imageResult?: [ 
      {
        label?: string(name='Label'),
        result?: [ 
          {
            label?: string(name='Label'),
            scene?: string(name='Scene'),
            score?: string(name='Score'),
            suggestion?: string(name='Suggestion'),
          }
        ](name='Result'),
        suggestion?: string(name='Suggestion'),
        type?: string(name='Type'),
        url?: string(name='Url'),
      }
    ](name='ImageResult'),
    label?: string(name='Label'),
    suggestion?: string(name='Suggestion'),
    textResult?: [ 
      {
        content?: string(name='Content'),
        label?: string(name='Label'),
        scene?: string(name='Scene'),
        score?: string(name='Score'),
        suggestion?: string(name='Suggestion'),
        type?: string(name='Type'),
      }
    ](name='TextResult'),
    videoResult?: {
      adResult?: {
        averageScore?: string(name='AverageScore'),
        counterList?: [ 
          {
            count?: int32(name='Count'),
            label?: string(name='Label'),
          }
        ](name='CounterList'),
        label?: string(name='Label'),
        maxScore?: string(name='MaxScore'),
        suggestion?: string(name='Suggestion'),
        topList?: [ 
          {
            label?: string(name='Label'),
            score?: string(name='Score'),
            timestamp?: string(name='Timestamp'),
            url?: string(name='Url'),
          }
        ](name='TopList'),
      }(name='AdResult'),
      label?: string(name='Label'),
      liveResult?: {
        averageScore?: string(name='AverageScore'),
        counterList?: [ 
          {
            count?: int32(name='Count'),
            label?: string(name='Label'),
          }
        ](name='CounterList'),
        label?: string(name='Label'),
        maxScore?: string(name='MaxScore'),
        suggestion?: string(name='Suggestion'),
        topList?: [ 
          {
            label?: string(name='Label'),
            score?: string(name='Score'),
            timestamp?: string(name='Timestamp'),
            url?: string(name='Url'),
          }
        ](name='TopList'),
      }(name='LiveResult'),
      logoResult?: {
        averageScore?: string(name='AverageScore'),
        counterList?: [ 
          {
            count?: int32(name='Count'),
            label?: string(name='Label'),
          }
        ](name='CounterList'),
        label?: string(name='Label'),
        maxScore?: string(name='MaxScore'),
        suggestion?: string(name='Suggestion'),
        topList?: [ 
          {
            label?: string(name='Label'),
            score?: string(name='Score'),
            timestamp?: string(name='Timestamp'),
            url?: string(name='Url'),
          }
        ](name='TopList'),
      }(name='LogoResult'),
      pornResult?: {
        averageScore?: string(name='AverageScore'),
        counterList?: [ 
          {
            count?: int32(name='Count'),
            label?: string(name='Label'),
          }
        ](name='CounterList'),
        label?: string(name='Label'),
        maxScore?: string(name='MaxScore'),
        suggestion?: string(name='Suggestion'),
        topList?: [ 
          {
            label?: string(name='Label'),
            score?: string(name='Score'),
            timestamp?: string(name='Timestamp'),
            url?: string(name='Url'),
          }
        ](name='TopList'),
      }(name='PornResult'),
      suggestion?: string(name='Suggestion'),
      terrorismResult?: {
        averageScore?: string(name='AverageScore'),
        counterList?: [ 
          {
            count?: int32(name='Count'),
            label?: string(name='Label'),
          }
        ](name='CounterList'),
        label?: string(name='Label'),
        maxScore?: string(name='MaxScore'),
        suggestion?: string(name='Suggestion'),
        topList?: [ 
          {
            label?: string(name='Label'),
            score?: string(name='Score'),
            timestamp?: string(name='Timestamp'),
            url?: string(name='Url'),
          }
        ](name='TopList'),
      }(name='TerrorismResult'),
    }(name='VideoResult'),
  }(name='MediaAuditResult'),
  requestId?: string(name='RequestId'),
}

model GetMediaAuditResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaAuditResultResponseBody(name='body'),
}

async function getMediaAuditResultWithOptions(request: GetMediaAuditResultRequest, runtime: Util.RuntimeOptions): GetMediaAuditResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMediaAuditResult', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMediaAuditResult(request: GetMediaAuditResultRequest): GetMediaAuditResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaAuditResultWithOptions(request, runtime);
}

model GetMediaAuditResultDetailRequest {
  mediaId?: string(name='MediaId'),
  pageNo?: int32(name='PageNo'),
}

model GetMediaAuditResultDetailResponseBody = {
  mediaAuditResultDetail?: {
    list?: [ 
      {
        adLabel?: string(name='AdLabel'),
        adScore?: string(name='AdScore'),
        liveLabel?: string(name='LiveLabel'),
        liveScore?: string(name='LiveScore'),
        logoLabel?: string(name='LogoLabel'),
        logoScore?: string(name='LogoScore'),
        pornLabel?: string(name='PornLabel'),
        pornScore?: string(name='PornScore'),
        terrorismLabel?: string(name='TerrorismLabel'),
        terrorismScore?: string(name='TerrorismScore'),
        timestamp?: string(name='Timestamp'),
        url?: string(name='Url'),
      }
    ](name='List'),
    total?: int32(name='Total'),
  }(name='MediaAuditResultDetail'),
  requestId?: string(name='RequestId'),
}

model GetMediaAuditResultDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaAuditResultDetailResponseBody(name='body'),
}

async function getMediaAuditResultDetailWithOptions(request: GetMediaAuditResultDetailRequest, runtime: Util.RuntimeOptions): GetMediaAuditResultDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMediaAuditResultDetail', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMediaAuditResultDetail(request: GetMediaAuditResultDetailRequest): GetMediaAuditResultDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaAuditResultDetailWithOptions(request, runtime);
}

model GetMediaAuditResultTimelineRequest {
  mediaId?: string(name='MediaId'),
}

model GetMediaAuditResultTimelineResponseBody = {
  mediaAuditResultTimeline?: {
    ad?: [ 
      {
        label?: string(name='Label'),
        score?: string(name='Score'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='Ad'),
    live?: [ 
      {
        label?: string(name='Label'),
        score?: string(name='Score'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='Live'),
    logo?: [ 
      {
        label?: string(name='Label'),
        score?: string(name='Score'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='Logo'),
    porn?: [ 
      {
        label?: string(name='Label'),
        score?: string(name='Score'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='Porn'),
    terrorism?: [ 
      {
        label?: string(name='Label'),
        score?: string(name='Score'),
        timestamp?: string(name='Timestamp'),
      }
    ](name='Terrorism'),
  }(name='MediaAuditResultTimeline'),
  requestId?: string(name='RequestId'),
}

model GetMediaAuditResultTimelineResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaAuditResultTimelineResponseBody(name='body'),
}

async function getMediaAuditResultTimelineWithOptions(request: GetMediaAuditResultTimelineRequest, runtime: Util.RuntimeOptions): GetMediaAuditResultTimelineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMediaAuditResultTimeline', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMediaAuditResultTimeline(request: GetMediaAuditResultTimelineRequest): GetMediaAuditResultTimelineResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaAuditResultTimelineWithOptions(request, runtime);
}

model GetMediaDNAResultRequest {
  mediaId?: string(name='MediaId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
}

model GetMediaDNAResultResponseBody = {
  DNAResult?: {
    videoDNA?: [ 
      {
        detail?: [ 
          {
            duplication?: {
              duration?: string(name='Duration'),
              start?: string(name='Start'),
            }(name='Duplication'),
            input?: {
              duration?: string(name='Duration'),
              start?: string(name='Start'),
            }(name='Input'),
          }
        ](name='Detail'),
        primaryKey?: string(name='PrimaryKey'),
        similarity?: string(name='Similarity'),
      }
    ](name='VideoDNA'),
  }(name='DNAResult'),
  requestId?: string(name='RequestId'),
}

model GetMediaDNAResultResponse = {
  headers: map[string]string(name='headers'),
  body: GetMediaDNAResultResponseBody(name='body'),
}

async function getMediaDNAResultWithOptions(request: GetMediaDNAResultRequest, runtime: Util.RuntimeOptions): GetMediaDNAResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMediaDNAResult', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMediaDNAResult(request: GetMediaDNAResultRequest): GetMediaDNAResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMediaDNAResultWithOptions(request, runtime);
}

model GetMessageCallbackRequest {
  appId?: string(name='AppId'),
  ownerAccount?: string(name='OwnerAccount'),
}

model GetMessageCallbackResponseBody = {
  messageCallback?: {
    appId?: string(name='AppId'),
    authKey?: string(name='AuthKey'),
    authSwitch?: string(name='AuthSwitch'),
    callbackType?: string(name='CallbackType'),
    callbackURL?: string(name='CallbackURL'),
    eventTypeList?: string(name='EventTypeList'),
    mnsEndpoint?: string(name='MnsEndpoint'),
    mnsQueueName?: string(name='MnsQueueName'),
  }(name='MessageCallback'),
  requestId?: string(name='RequestId'),
}

model GetMessageCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: GetMessageCallbackResponseBody(name='body'),
}

async function getMessageCallbackWithOptions(request: GetMessageCallbackRequest, runtime: Util.RuntimeOptions): GetMessageCallbackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMessageCallback', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMessageCallback(request: GetMessageCallbackRequest): GetMessageCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMessageCallbackWithOptions(request, runtime);
}

model GetMezzanineInfoRequest {
  additionType?: string(name='AdditionType'),
  authTimeout?: long(name='AuthTimeout'),
  outputType?: string(name='OutputType'),
  videoId?: string(name='VideoId'),
}

model GetMezzanineInfoResponseBody = {
  mezzanine?: {
    audioStreamList?: [ 
      {
        bitrate?: string(name='Bitrate'),
        channelLayout?: string(name='ChannelLayout'),
        channels?: string(name='Channels'),
        codecLongName?: string(name='CodecLongName'),
        codecName?: string(name='CodecName'),
        codecTag?: string(name='CodecTag'),
        codecTagString?: string(name='CodecTagString'),
        codecTimeBase?: string(name='CodecTimeBase'),
        duration?: string(name='Duration'),
        index?: string(name='Index'),
        lang?: string(name='Lang'),
        numFrames?: string(name='NumFrames'),
        sampleFmt?: string(name='SampleFmt'),
        sampleRate?: string(name='SampleRate'),
        startTime?: string(name='StartTime'),
        timebase?: string(name='Timebase'),
      }
    ](name='AudioStreamList'),
    bitrate?: string(name='Bitrate'),
    creationTime?: string(name='CreationTime'),
    duration?: string(name='Duration'),
    fileName?: string(name='FileName'),
    fileURL?: string(name='FileURL'),
    fps?: string(name='Fps'),
    height?: long(name='Height'),
    outputType?: string(name='OutputType'),
    size?: long(name='Size'),
    status?: string(name='Status'),
    videoId?: string(name='VideoId'),
    videoStreamList?: [ 
      {
        avgFPS?: string(name='AvgFPS'),
        bitrate?: string(name='Bitrate'),
        codecLongName?: string(name='CodecLongName'),
        codecName?: string(name='CodecName'),
        codecTag?: string(name='CodecTag'),
        codecTagString?: string(name='CodecTagString'),
        codecTimeBase?: string(name='CodecTimeBase'),
        dar?: string(name='Dar'),
        duration?: string(name='Duration'),
        fps?: string(name='Fps'),
        hasBFrames?: string(name='HasBFrames'),
        height?: string(name='Height'),
        index?: string(name='Index'),
        lang?: string(name='Lang'),
        level?: string(name='Level'),
        numFrames?: string(name='NumFrames'),
        pixFmt?: string(name='PixFmt'),
        profile?: string(name='Profile'),
        rotate?: string(name='Rotate'),
        sar?: string(name='Sar'),
        startTime?: string(name='StartTime'),
        timebase?: string(name='Timebase'),
        width?: string(name='Width'),
      }
    ](name='VideoStreamList'),
    width?: long(name='Width'),
  }(name='Mezzanine'),
  requestId?: string(name='RequestId'),
}

model GetMezzanineInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetMezzanineInfoResponseBody(name='body'),
}

async function getMezzanineInfoWithOptions(request: GetMezzanineInfoRequest, runtime: Util.RuntimeOptions): GetMezzanineInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMezzanineInfo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMezzanineInfo(request: GetMezzanineInfoRequest): GetMezzanineInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMezzanineInfoWithOptions(request, runtime);
}

model GetPlayInfoRequest {
  additionType?: string(name='AdditionType'),
  authTimeout?: long(name='AuthTimeout'),
  definition?: string(name='Definition'),
  formats?: string(name='Formats'),
  outputType?: string(name='OutputType'),
  playConfig?: string(name='PlayConfig'),
  reAuthInfo?: string(name='ReAuthInfo'),
  resultType?: string(name='ResultType'),
  streamType?: string(name='StreamType'),
  videoId?: string(name='VideoId'),
}

model GetPlayInfoResponseBody = {
  playInfoList?: {
    playInfo?: [ 
    {
      bitrate?: string(name='Bitrate'),
      creationTime?: string(name='CreationTime'),
      definition?: string(name='Definition'),
      duration?: string(name='Duration'),
      encrypt?: long(name='Encrypt'),
      encryptType?: string(name='EncryptType'),
      format?: string(name='Format'),
      fps?: string(name='Fps'),
      height?: long(name='Height'),
      jobId?: string(name='JobId'),
      modificationTime?: string(name='ModificationTime'),
      narrowBandType?: string(name='NarrowBandType'),
      playURL?: string(name='PlayURL'),
      size?: long(name='Size'),
      specification?: string(name='Specification'),
      status?: string(name='Status'),
      streamType?: string(name='StreamType'),
      watermarkId?: string(name='WatermarkId'),
      width?: long(name='Width'),
    }
  ](name='PlayInfo')
  }(name='PlayInfoList'),
  requestId?: string(name='RequestId'),
  videoBase?: {
    coverURL?: string(name='CoverURL'),
    creationTime?: string(name='CreationTime'),
    danMuURL?: string(name='DanMuURL'),
    duration?: string(name='Duration'),
    mediaType?: string(name='MediaType'),
    status?: string(name='Status'),
    title?: string(name='Title'),
    videoId?: string(name='VideoId'),
  }(name='VideoBase'),
}

model GetPlayInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetPlayInfoResponseBody(name='body'),
}

async function getPlayInfoWithOptions(request: GetPlayInfoRequest, runtime: Util.RuntimeOptions): GetPlayInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPlayInfo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPlayInfo(request: GetPlayInfoRequest): GetPlayInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPlayInfoWithOptions(request, runtime);
}

model GetTranscodeSummaryRequest {
  videoIds?: string(name='VideoIds'),
}

model GetTranscodeSummaryResponseBody = {
  nonExistVideoIds?: [ string ](name='NonExistVideoIds'),
  requestId?: string(name='RequestId'),
  transcodeSummaryList?: [ 
    {
      completeTime?: string(name='CompleteTime'),
      creationTime?: string(name='CreationTime'),
      transcodeJobInfoSummaryList?: [ 
        {
          bitrate?: string(name='Bitrate'),
          completeTime?: string(name='CompleteTime'),
          creationTime?: string(name='CreationTime'),
          duration?: string(name='Duration'),
          errorCode?: string(name='ErrorCode'),
          errorMessage?: string(name='ErrorMessage'),
          filesize?: long(name='Filesize'),
          format?: string(name='Format'),
          fps?: string(name='Fps'),
          height?: string(name='Height'),
          transcodeJobStatus?: string(name='TranscodeJobStatus'),
          transcodeProgress?: long(name='TranscodeProgress'),
          transcodeTemplateId?: string(name='TranscodeTemplateId'),
          watermarkIdList?: [ string ](name='WatermarkIdList'),
          width?: string(name='Width'),
        }
      ](name='TranscodeJobInfoSummaryList'),
      transcodeStatus?: string(name='TranscodeStatus'),
      transcodeTemplateGroupId?: string(name='TranscodeTemplateGroupId'),
      videoId?: string(name='VideoId'),
    }
  ](name='TranscodeSummaryList'),
}

model GetTranscodeSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: GetTranscodeSummaryResponseBody(name='body'),
}

async function getTranscodeSummaryWithOptions(request: GetTranscodeSummaryRequest, runtime: Util.RuntimeOptions): GetTranscodeSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTranscodeSummary', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTranscodeSummary(request: GetTranscodeSummaryRequest): GetTranscodeSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTranscodeSummaryWithOptions(request, runtime);
}

model GetTranscodeTaskRequest {
  transcodeTaskId?: string(name='TranscodeTaskId'),
}

model GetTranscodeTaskResponseBody = {
  requestId?: string(name='RequestId'),
  transcodeTask?: {
    completeTime?: string(name='CompleteTime'),
    creationTime?: string(name='CreationTime'),
    taskStatus?: string(name='TaskStatus'),
    transcodeJobInfoList?: [ 
      {
        completeTime?: string(name='CompleteTime'),
        creationTime?: string(name='CreationTime'),
        definition?: string(name='Definition'),
        errorCode?: string(name='ErrorCode'),
        errorMessage?: string(name='ErrorMessage'),
        inputFileUrl?: string(name='InputFileUrl'),
        outputFile?: {
          audioStreamList?: string(name='AudioStreamList'),
          bitrate?: string(name='Bitrate'),
          duration?: string(name='Duration'),
          encryption?: string(name='Encryption'),
          filesize?: long(name='Filesize'),
          format?: string(name='Format'),
          fps?: string(name='Fps'),
          height?: string(name='Height'),
          outputFileUrl?: string(name='OutputFileUrl'),
          subtitleStreamList?: string(name='SubtitleStreamList'),
          videoStreamList?: string(name='VideoStreamList'),
          watermarkIdList?: [ string ](name='WatermarkIdList'),
          width?: string(name='Width'),
        }(name='OutputFile'),
        priority?: string(name='Priority'),
        transcodeJobId?: string(name='TranscodeJobId'),
        transcodeJobStatus?: string(name='TranscodeJobStatus'),
        transcodeProgress?: long(name='TranscodeProgress'),
        transcodeTemplateId?: string(name='TranscodeTemplateId'),
      }
    ](name='TranscodeJobInfoList'),
    transcodeTaskId?: string(name='TranscodeTaskId'),
    transcodeTemplateGroupId?: string(name='TranscodeTemplateGroupId'),
    trigger?: string(name='Trigger'),
    videoId?: string(name='VideoId'),
  }(name='TranscodeTask'),
}

model GetTranscodeTaskResponse = {
  headers: map[string]string(name='headers'),
  body: GetTranscodeTaskResponseBody(name='body'),
}

async function getTranscodeTaskWithOptions(request: GetTranscodeTaskRequest, runtime: Util.RuntimeOptions): GetTranscodeTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTranscodeTask', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTranscodeTask(request: GetTranscodeTaskRequest): GetTranscodeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTranscodeTaskWithOptions(request, runtime);
}

model GetTranscodeTemplateGroupRequest {
  transcodeTemplateGroupId?: string(name='TranscodeTemplateGroupId'),
}

model GetTranscodeTemplateGroupResponseBody = {
  requestId?: string(name='RequestId'),
  transcodeTemplateGroup?: {
    appId?: string(name='AppId'),
    creationTime?: string(name='CreationTime'),
    isDefault?: string(name='IsDefault'),
    locked?: string(name='Locked'),
    modifyTime?: string(name='ModifyTime'),
    name?: string(name='Name'),
    transcodeTemplateGroupId?: string(name='TranscodeTemplateGroupId'),
    transcodeTemplateList?: [ 
      {
        audio?: string(name='Audio'),
        clip?: string(name='Clip'),
        container?: string(name='Container'),
        definition?: string(name='Definition'),
        encryptSetting?: string(name='EncryptSetting'),
        muxConfig?: string(name='MuxConfig'),
        packageSetting?: string(name='PackageSetting'),
        rotate?: string(name='Rotate'),
        subtitleList?: string(name='SubtitleList'),
        templateName?: string(name='TemplateName'),
        transConfig?: string(name='TransConfig'),
        transcodeFileRegular?: string(name='TranscodeFileRegular'),
        transcodeTemplateId?: string(name='TranscodeTemplateId'),
        type?: string(name='Type'),
        video?: string(name='Video'),
        watermarkIds?: [ string ](name='WatermarkIds'),
      }
    ](name='TranscodeTemplateList'),
  }(name='TranscodeTemplateGroup'),
}

model GetTranscodeTemplateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: GetTranscodeTemplateGroupResponseBody(name='body'),
}

async function getTranscodeTemplateGroupWithOptions(request: GetTranscodeTemplateGroupRequest, runtime: Util.RuntimeOptions): GetTranscodeTemplateGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTranscodeTemplateGroup', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTranscodeTemplateGroup(request: GetTranscodeTemplateGroupRequest): GetTranscodeTemplateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTranscodeTemplateGroupWithOptions(request, runtime);
}

model GetURLUploadInfosRequest {
  jobIds?: string(name='JobIds'),
  uploadURLs?: string(name='UploadURLs'),
}

model GetURLUploadInfosResponseBody = {
  nonExists?: [ string ](name='NonExists'),
  requestId?: string(name='RequestId'),
  URLUploadInfoList?: [ 
    {
      completeTime?: string(name='CompleteTime'),
      creationTime?: string(name='CreationTime'),
      errorCode?: string(name='ErrorCode'),
      errorMessage?: string(name='ErrorMessage'),
      fileSize?: string(name='FileSize'),
      jobId?: string(name='JobId'),
      mediaId?: string(name='MediaId'),
      status?: string(name='Status'),
      uploadURL?: string(name='UploadURL'),
      userData?: string(name='UserData'),
    }
  ](name='URLUploadInfoList'),
}

model GetURLUploadInfosResponse = {
  headers: map[string]string(name='headers'),
  body: GetURLUploadInfosResponseBody(name='body'),
}

async function getURLUploadInfosWithOptions(request: GetURLUploadInfosRequest, runtime: Util.RuntimeOptions): GetURLUploadInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetURLUploadInfos', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getURLUploadInfos(request: GetURLUploadInfosRequest): GetURLUploadInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return getURLUploadInfosWithOptions(request, runtime);
}

model GetUploadDetailsRequest {
  mediaIds?: string(name='MediaIds'),
  mediaType?: string(name='MediaType'),
}

model GetUploadDetailsResponseBody = {
  forbiddenMediaIds?: [ string ](name='ForbiddenMediaIds'),
  nonExistMediaIds?: [ string ](name='NonExistMediaIds'),
  requestId?: string(name='RequestId'),
  uploadDetails?: [ 
    {
      completionTime?: string(name='CompletionTime'),
      creationTime?: string(name='CreationTime'),
      deviceModel?: string(name='DeviceModel'),
      fileSize?: long(name='FileSize'),
      mediaId?: string(name='MediaId'),
      modificationTime?: string(name='ModificationTime'),
      status?: string(name='Status'),
      title?: string(name='Title'),
      uploadIP?: string(name='UploadIP'),
      uploadRatio?: float(name='UploadRatio'),
      uploadSize?: long(name='UploadSize'),
      uploadSource?: string(name='UploadSource'),
      uploadStatus?: string(name='UploadStatus'),
    }
  ](name='UploadDetails'),
}

model GetUploadDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: GetUploadDetailsResponseBody(name='body'),
}

async function getUploadDetailsWithOptions(request: GetUploadDetailsRequest, runtime: Util.RuntimeOptions): GetUploadDetailsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetUploadDetails', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUploadDetails(request: GetUploadDetailsRequest): GetUploadDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUploadDetailsWithOptions(request, runtime);
}

model GetVideoInfoRequest {
  videoId?: string(name='VideoId'),
}

model GetVideoInfoResponseBody = {
  requestId?: string(name='RequestId'),
  video?: {
    appId?: string(name='AppId'),
    auditStatus?: string(name='AuditStatus'),
    cateId?: long(name='CateId'),
    cateName?: string(name='CateName'),
    coverURL?: string(name='CoverURL'),
    creationTime?: string(name='CreationTime'),
    customMediaInfo?: string(name='CustomMediaInfo'),
    description?: string(name='Description'),
    duration?: float(name='Duration'),
    modificationTime?: string(name='ModificationTime'),
    regionId?: string(name='RegionId'),
    size?: long(name='Size'),
    snapshots?: {
      snapshot?: [ string ](name='Snapshot')
    }(name='Snapshots'),
    status?: string(name='Status'),
    storageLocation?: string(name='StorageLocation'),
    tags?: string(name='Tags'),
    templateGroupId?: string(name='TemplateGroupId'),
    title?: string(name='Title'),
    videoId?: string(name='VideoId'),
  }(name='Video'),
}

model GetVideoInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetVideoInfoResponseBody(name='body'),
}

async function getVideoInfoWithOptions(request: GetVideoInfoRequest, runtime: Util.RuntimeOptions): GetVideoInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetVideoInfo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getVideoInfo(request: GetVideoInfoRequest): GetVideoInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoInfoWithOptions(request, runtime);
}

model GetVideoInfosRequest {
  videoIds?: string(name='VideoIds'),
}

model GetVideoInfosResponseBody = {
  nonExistVideoIds?: [ string ](name='NonExistVideoIds'),
  requestId?: string(name='RequestId'),
  videoList?: [ 
    {
      appId?: string(name='AppId'),
      cateId?: long(name='CateId'),
      cateName?: string(name='CateName'),
      coverURL?: string(name='CoverURL'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      duration?: float(name='Duration'),
      modificationTime?: string(name='ModificationTime'),
      size?: long(name='Size'),
      snapshots?: [ string ](name='Snapshots'),
      status?: string(name='Status'),
      storageLocation?: string(name='StorageLocation'),
      tags?: string(name='Tags'),
      templateGroupId?: string(name='TemplateGroupId'),
      title?: string(name='Title'),
      videoId?: string(name='VideoId'),
    }
  ](name='VideoList'),
}

model GetVideoInfosResponse = {
  headers: map[string]string(name='headers'),
  body: GetVideoInfosResponseBody(name='body'),
}

async function getVideoInfosWithOptions(request: GetVideoInfosRequest, runtime: Util.RuntimeOptions): GetVideoInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetVideoInfos', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getVideoInfos(request: GetVideoInfosRequest): GetVideoInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoInfosWithOptions(request, runtime);
}

model GetVideoListRequest {
  cateId?: long(name='CateId'),
  endTime?: string(name='EndTime'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  sortBy?: string(name='SortBy'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
  storageLocation?: string(name='StorageLocation'),
}

model GetVideoListResponseBody = {
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
  videoList?: {
    video?: [ 
    {
      appId?: string(name='AppId'),
      cateId?: long(name='CateId'),
      cateName?: string(name='CateName'),
      coverURL?: string(name='CoverURL'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      duration?: float(name='Duration'),
      modificationTime?: string(name='ModificationTime'),
      size?: long(name='Size'),
      snapshots?: {
        snapshot?: [ string ](name='Snapshot')
      }(name='Snapshots'),
      status?: string(name='Status'),
      storageLocation?: string(name='StorageLocation'),
      tags?: string(name='Tags'),
      title?: string(name='Title'),
      videoId?: string(name='VideoId'),
    }
  ](name='Video')
  }(name='VideoList'),
}

model GetVideoListResponse = {
  headers: map[string]string(name='headers'),
  body: GetVideoListResponseBody(name='body'),
}

async function getVideoListWithOptions(request: GetVideoListRequest, runtime: Util.RuntimeOptions): GetVideoListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetVideoList', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getVideoList(request: GetVideoListRequest): GetVideoListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoListWithOptions(request, runtime);
}

model GetVideoPlayAuthRequest {
  authInfoTimeout?: long(name='AuthInfoTimeout'),
  videoId?: string(name='VideoId'),
}

model GetVideoPlayAuthResponseBody = {
  playAuth?: string(name='PlayAuth'),
  requestId?: string(name='RequestId'),
  videoMeta?: {
    coverURL?: string(name='CoverURL'),
    duration?: float(name='Duration'),
    status?: string(name='Status'),
    title?: string(name='Title'),
    videoId?: string(name='VideoId'),
  }(name='VideoMeta'),
}

model GetVideoPlayAuthResponse = {
  headers: map[string]string(name='headers'),
  body: GetVideoPlayAuthResponseBody(name='body'),
}

async function getVideoPlayAuthWithOptions(request: GetVideoPlayAuthRequest, runtime: Util.RuntimeOptions): GetVideoPlayAuthResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetVideoPlayAuth', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getVideoPlayAuth(request: GetVideoPlayAuthRequest): GetVideoPlayAuthResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVideoPlayAuthWithOptions(request, runtime);
}

model GetVodTemplateRequest {
  vodTemplateId?: string(name='VodTemplateId'),
}

model GetVodTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  vodTemplateInfo?: {
    creationTime?: string(name='CreationTime'),
    isDefault?: string(name='IsDefault'),
    modifyTime?: string(name='ModifyTime'),
    name?: string(name='Name'),
    templateConfig?: string(name='TemplateConfig'),
    templateType?: string(name='TemplateType'),
    vodTemplateId?: string(name='VodTemplateId'),
  }(name='VodTemplateInfo'),
}

model GetVodTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetVodTemplateResponseBody(name='body'),
}

async function getVodTemplateWithOptions(request: GetVodTemplateRequest, runtime: Util.RuntimeOptions): GetVodTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetVodTemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getVodTemplate(request: GetVodTemplateRequest): GetVodTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVodTemplateWithOptions(request, runtime);
}

model GetWatermarkRequest {
  watermarkId?: string(name='WatermarkId'),
}

model GetWatermarkResponseBody = {
  requestId?: string(name='RequestId'),
  watermarkInfo?: {
    appId?: string(name='AppId'),
    creationTime?: string(name='CreationTime'),
    fileUrl?: string(name='FileUrl'),
    isDefault?: string(name='IsDefault'),
    name?: string(name='Name'),
    type?: string(name='Type'),
    watermarkConfig?: string(name='WatermarkConfig'),
    watermarkId?: string(name='WatermarkId'),
  }(name='WatermarkInfo'),
}

model GetWatermarkResponse = {
  headers: map[string]string(name='headers'),
  body: GetWatermarkResponseBody(name='body'),
}

async function getWatermarkWithOptions(request: GetWatermarkRequest, runtime: Util.RuntimeOptions): GetWatermarkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetWatermark', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getWatermark(request: GetWatermarkRequest): GetWatermarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWatermarkWithOptions(request, runtime);
}

model ListAIImageInfoRequest {
  videoId?: string(name='VideoId'),
}

model ListAIImageInfoResponseBody = {
  AIImageInfoList?: [ 
    {
      AIImageInfoId?: string(name='AIImageInfoId'),
      creationTime?: string(name='CreationTime'),
      fileURL?: string(name='FileURL'),
      format?: string(name='Format'),
      jobId?: string(name='JobId'),
      score?: string(name='Score'),
      version?: string(name='Version'),
      videoId?: string(name='VideoId'),
    }
  ](name='AIImageInfoList'),
  requestId?: string(name='RequestId'),
}

model ListAIImageInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ListAIImageInfoResponseBody(name='body'),
}

async function listAIImageInfoWithOptions(request: ListAIImageInfoRequest, runtime: Util.RuntimeOptions): ListAIImageInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAIImageInfo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAIImageInfo(request: ListAIImageInfoRequest): ListAIImageInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAIImageInfoWithOptions(request, runtime);
}

model ListAIJobRequest {
  jobIds?: string(name='JobIds'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
}

model ListAIJobResponseBody = {
  AIJobList?: {
    AIJob?: [ 
    {
      code?: string(name='Code'),
      completeTime?: string(name='CompleteTime'),
      creationTime?: string(name='CreationTime'),
      data?: string(name='Data'),
      jobId?: string(name='JobId'),
      mediaId?: string(name='MediaId'),
      message?: string(name='Message'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='AIJob')
  }(name='AIJobList'),
  nonExistAIJobIds?: {
    string?: [ string ](name='String')
  }(name='NonExistAIJobIds'),
  requestId?: string(name='RequestId'),
}

model ListAIJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListAIJobResponseBody(name='body'),
}

async function listAIJobWithOptions(request: ListAIJobRequest, runtime: Util.RuntimeOptions): ListAIJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAIJob', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAIJob(request: ListAIJobRequest): ListAIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAIJobWithOptions(request, runtime);
}

model ListAITemplateRequest {
  templateType?: string(name='TemplateType'),
}

model ListAITemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateInfoList?: [ 
    {
      creationTime?: string(name='CreationTime'),
      isDefault?: string(name='IsDefault'),
      modifyTime?: string(name='ModifyTime'),
      source?: string(name='Source'),
      templateConfig?: string(name='TemplateConfig'),
      templateId?: string(name='TemplateId'),
      templateName?: string(name='TemplateName'),
      templateType?: string(name='TemplateType'),
    }
  ](name='TemplateInfoList'),
}

model ListAITemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ListAITemplateResponseBody(name='body'),
}

async function listAITemplateWithOptions(request: ListAITemplateRequest, runtime: Util.RuntimeOptions): ListAITemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAITemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAITemplate(request: ListAITemplateRequest): ListAITemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAITemplateWithOptions(request, runtime);
}

model ListAppInfoRequest {
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  status?: string(name='Status'),
}

model ListAppInfoResponseBody = {
  appInfoList?: [ 
    {
      appId?: string(name='AppId'),
      appName?: string(name='AppName'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      modificationTime?: string(name='ModificationTime'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='AppInfoList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model ListAppInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppInfoResponseBody(name='body'),
}

async function listAppInfoWithOptions(request: ListAppInfoRequest, runtime: Util.RuntimeOptions): ListAppInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAppInfo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAppInfo(request: ListAppInfoRequest): ListAppInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppInfoWithOptions(request, runtime);
}

model ListAppPoliciesForIdentityRequest {
  appId?: string(name='AppId'),
  identityName?: string(name='IdentityName'),
  identityType?: string(name='IdentityType'),
}

model ListAppPoliciesForIdentityResponseBody = {
  appPolicyList?: [ 
    {
      appId?: string(name='AppId'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      modificationTime?: string(name='ModificationTime'),
      policyName?: string(name='PolicyName'),
      policyType?: string(name='PolicyType'),
      policyValue?: string(name='PolicyValue'),
    }
  ](name='AppPolicyList'),
  requestId?: string(name='RequestId'),
}

model ListAppPoliciesForIdentityResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppPoliciesForIdentityResponseBody(name='body'),
}

async function listAppPoliciesForIdentityWithOptions(request: ListAppPoliciesForIdentityRequest, runtime: Util.RuntimeOptions): ListAppPoliciesForIdentityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAppPoliciesForIdentity', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAppPoliciesForIdentity(request: ListAppPoliciesForIdentityRequest): ListAppPoliciesForIdentityResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppPoliciesForIdentityWithOptions(request, runtime);
}

model ListAuditSecurityIpRequest {
  securityGroupName?: string(name='SecurityGroupName'),
}

model ListAuditSecurityIpResponseBody = {
  requestId?: string(name='RequestId'),
  securityIpList?: [ 
    {
      creationTime?: string(name='CreationTime'),
      ips?: string(name='Ips'),
      modificationTime?: string(name='ModificationTime'),
      securityGroupName?: string(name='SecurityGroupName'),
    }
  ](name='SecurityIpList'),
}

model ListAuditSecurityIpResponse = {
  headers: map[string]string(name='headers'),
  body: ListAuditSecurityIpResponseBody(name='body'),
}

async function listAuditSecurityIpWithOptions(request: ListAuditSecurityIpRequest, runtime: Util.RuntimeOptions): ListAuditSecurityIpResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListAuditSecurityIp', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listAuditSecurityIp(request: ListAuditSecurityIpRequest): ListAuditSecurityIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuditSecurityIpWithOptions(request, runtime);
}

model ListDetectionJobRequest {
  videoId?: string(name='VideoId'),
}

model ListDetectionJobResponseBody = {
  detectionJobList?: [ 
    {
      beginTime?: string(name='BeginTime'),
      copyrightBeginTime?: string(name='CopyrightBeginTime'),
      copyrightEndTime?: string(name='CopyrightEndTime'),
      copyrightFile?: string(name='CopyrightFile'),
      copyrightStatus?: string(name='CopyrightStatus'),
      createTime?: string(name='CreateTime'),
      endTime?: string(name='EndTime'),
      jobId?: string(name='JobId'),
      modifyTime?: string(name='ModifyTime'),
      templateId?: string(name='TemplateId'),
      videoId?: string(name='VideoId'),
      whitelistUrls?: string(name='WhitelistUrls'),
    }
  ](name='DetectionJobList'),
  requestId?: string(name='RequestId'),
}

model ListDetectionJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListDetectionJobResponseBody(name='body'),
}

async function listDetectionJobWithOptions(request: ListDetectionJobRequest, runtime: Util.RuntimeOptions): ListDetectionJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDetectionJob', '2017-03-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDetectionJob(request: ListDetectionJobRequest): ListDetectionJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDetectionJobWithOptions(request, runtime);
}

model ListDetectionTemplateRequest {
  period?: string(name='Period'),
  templateName?: string(name='TemplateName'),
}

model ListDetectionTemplateResponseBody = {
  detectionTemplateList?: [ 
    {
      createTime?: string(name='CreateTime'),
      modifyTime?: string(name='ModifyTime'),
      period?: string(name='Period'),
      platform?: string(name='Platform'),
      templateId?: string(name='TemplateId'),
      templateName?: string(name='TemplateName'),
      userId?: long(name='UserId'),
    }
  ](name='DetectionTemplateList'),
  requestId?: string(name='RequestId'),
}

model ListDetectionTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ListDetectionTemplateResponseBody(name='body'),
}

async function listDetectionTemplateWithOptions(request: ListDetectionTemplateRequest, runtime: Util.RuntimeOptions): ListDetectionTemplateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListDetectionTemplate', '2017-03-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listDetectionTemplate(request: ListDetectionTemplateRequest): ListDetectionTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDetectionTemplateWithOptions(request, runtime);
}

model ListDynamicImageRequest {
  videoId?: string(name='VideoId'),
}

model ListDynamicImageResponseBody = {
  dynamicImageList?: [ 
    {
      creationTime?: string(name='CreationTime'),
      duration?: string(name='Duration'),
      dynamicImageId?: string(name='DynamicImageId'),
      fileSize?: string(name='FileSize'),
      fileURL?: string(name='FileURL'),
      format?: string(name='Format'),
      fps?: string(name='Fps'),
      height?: string(name='Height'),
      jobId?: string(name='JobId'),
      videoId?: string(name='VideoId'),
      width?: string(name='Width'),
    }
  ](name='DynamicImageList'),
  requestId?: string(name='RequestId'),
}

model ListDynamicImageResponse = {
  headers: map[string]string(name='headers'),
  body: ListDynamicImageResponseBody(name='body'),
}

async function listDynamicImageWithOptions(request: ListDynamicImageRequest, runtime: Util.RuntimeOptions): ListDynamicImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListDynamicImage', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listDynamicImage(request: ListDynamicImageRequest): ListDynamicImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDynamicImageWithOptions(request, runtime);
}

model ListLetterSendJobRequest {
  detectionId?: string(name='DetectionId'),
  templateId?: string(name='TemplateId'),
  toAddress?: string(name='ToAddress'),
}

model ListLetterSendJobResponseBody = {
  letterJobList?: [ 
    {
      bccAddress?: string(name='BccAddress'),
      body?: string(name='Body'),
      ccAddress?: string(name='CcAddress'),
      createTime?: string(name='CreateTime'),
      detectionId?: string(name='DetectionId'),
      jobId?: string(name='JobId'),
      modifyTime?: string(name='ModifyTime'),
      sendTime?: string(name='SendTime'),
      templateId?: string(name='TemplateId'),
      title?: string(name='Title'),
      toAddress?: string(name='ToAddress'),
      userId?: long(name='UserId'),
    }
  ](name='LetterJobList'),
  requestId?: string(name='RequestId'),
}

model ListLetterSendJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListLetterSendJobResponseBody(name='body'),
}

async function listLetterSendJobWithOptions(request: ListLetterSendJobRequest, runtime: Util.RuntimeOptions): ListLetterSendJobResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListLetterSendJob', '2017-03-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listLetterSendJob(request: ListLetterSendJobRequest): ListLetterSendJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLetterSendJobWithOptions(request, runtime);
}

model ListLiveRecordVideoRequest {
  appName?: string(name='AppName'),
  domainName?: string(name='DomainName'),
  endTime?: string(name='EndTime'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  sortBy?: string(name='SortBy'),
  startTime?: string(name='StartTime'),
  streamName?: string(name='StreamName'),
}

model ListLiveRecordVideoResponseBody = {
  liveRecordVideoList?: {
    liveRecordVideo?: [ 
    {
      appName?: string(name='AppName'),
      domainName?: string(name='DomainName'),
      playlistId?: string(name='PlaylistId'),
      recordEndTime?: string(name='RecordEndTime'),
      recordStartTime?: string(name='RecordStartTime'),
      streamName?: string(name='StreamName'),
      video?: {
        cateId?: int32(name='CateId'),
        cateName?: string(name='CateName'),
        coverURL?: string(name='CoverURL'),
        creationTime?: string(name='CreationTime'),
        description?: string(name='Description'),
        duration?: float(name='Duration'),
        modifyTime?: string(name='ModifyTime'),
        size?: long(name='Size'),
        snapshots?: {
          snapshot?: [ string ](name='Snapshot')
        }(name='Snapshots'),
        status?: string(name='Status'),
        tags?: string(name='Tags'),
        templateGroupId?: string(name='TemplateGroupId'),
        title?: string(name='Title'),
        videoId?: string(name='VideoId'),
      }(name='Video'),
    }
  ](name='LiveRecordVideo')
  }(name='LiveRecordVideoList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model ListLiveRecordVideoResponse = {
  headers: map[string]string(name='headers'),
  body: ListLiveRecordVideoResponseBody(name='body'),
}

async function listLiveRecordVideoWithOptions(request: ListLiveRecordVideoRequest, runtime: Util.RuntimeOptions): ListLiveRecordVideoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListLiveRecordVideo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listLiveRecordVideo(request: ListLiveRecordVideoRequest): ListLiveRecordVideoResponse {
  var runtime = new Util.RuntimeOptions{};
  return listLiveRecordVideoWithOptions(request, runtime);
}

model ListMediaDNADeleteJobRequest {
  jobIds?: string(name='JobIds'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
}

model ListMediaDNADeleteJobResponseBody = {
  AIJobList?: {
    AIJob?: [ 
    {
      code?: string(name='Code'),
      fpDBId?: string(name='FpDBId'),
      jobId?: string(name='JobId'),
      mediaId?: string(name='MediaId'),
      message?: string(name='Message'),
      status?: string(name='Status'),
    }
  ](name='AIJob')
  }(name='AIJobList'),
  nonExistAIJobIds?: {
    string?: [ string ](name='String')
  }(name='NonExistAIJobIds'),
  requestId?: string(name='RequestId'),
}

model ListMediaDNADeleteJobResponse = {
  headers: map[string]string(name='headers'),
  body: ListMediaDNADeleteJobResponseBody(name='body'),
}

async function listMediaDNADeleteJobWithOptions(request: ListMediaDNADeleteJobRequest, runtime: Util.RuntimeOptions): ListMediaDNADeleteJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMediaDNADeleteJob', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMediaDNADeleteJob(request: ListMediaDNADeleteJobRequest): ListMediaDNADeleteJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMediaDNADeleteJobWithOptions(request, runtime);
}

model ListSnapshotsRequest {
  authTimeout?: string(name='AuthTimeout'),
  pageNo?: string(name='PageNo'),
  pageSize?: string(name='PageSize'),
  snapshotType?: string(name='SnapshotType'),
  videoId?: string(name='VideoId'),
}

model ListSnapshotsResponseBody = {
  mediaSnapshot?: {
    creationTime?: string(name='CreationTime'),
    jobId?: string(name='JobId'),
    regular?: string(name='Regular'),
    snapshots?: {
      snapshot?: [ 
      {
        index?: long(name='Index'),
        url?: string(name='Url'),
      }
    ](name='Snapshot')
    }(name='Snapshots'),
    total?: long(name='Total'),
  }(name='MediaSnapshot'),
  requestId?: string(name='RequestId'),
}

model ListSnapshotsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSnapshotsResponseBody(name='body'),
}

async function listSnapshotsWithOptions(request: ListSnapshotsRequest, runtime: Util.RuntimeOptions): ListSnapshotsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSnapshots', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSnapshots(request: ListSnapshotsRequest): ListSnapshotsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSnapshotsWithOptions(request, runtime);
}

model ListTranscodeTaskRequest {
  endTime?: string(name='EndTime'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
  videoId?: string(name='VideoId'),
}

model ListTranscodeTaskResponseBody = {
  requestId?: string(name='RequestId'),
  transcodeTaskList?: [ 
    {
      completeTime?: string(name='CompleteTime'),
      creationTime?: string(name='CreationTime'),
      taskStatus?: string(name='TaskStatus'),
      transcodeTaskId?: string(name='TranscodeTaskId'),
      transcodeTemplateGroupId?: string(name='TranscodeTemplateGroupId'),
      trigger?: string(name='Trigger'),
      videoId?: string(name='VideoId'),
    }
  ](name='TranscodeTaskList'),
}

model ListTranscodeTaskResponse = {
  headers: map[string]string(name='headers'),
  body: ListTranscodeTaskResponseBody(name='body'),
}

async function listTranscodeTaskWithOptions(request: ListTranscodeTaskRequest, runtime: Util.RuntimeOptions): ListTranscodeTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTranscodeTask', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTranscodeTask(request: ListTranscodeTaskRequest): ListTranscodeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTranscodeTaskWithOptions(request, runtime);
}

model ListTranscodeTemplateGroupRequest {
  appId?: string(name='AppId'),
}

model ListTranscodeTemplateGroupResponseBody = {
  requestId?: string(name='RequestId'),
  transcodeTemplateGroupList?: [ 
    {
      appId?: string(name='AppId'),
      creationTime?: string(name='CreationTime'),
      isDefault?: string(name='IsDefault'),
      locked?: string(name='Locked'),
      modifyTime?: string(name='ModifyTime'),
      name?: string(name='Name'),
      transcodeTemplateGroupId?: string(name='TranscodeTemplateGroupId'),
    }
  ](name='TranscodeTemplateGroupList'),
}

model ListTranscodeTemplateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ListTranscodeTemplateGroupResponseBody(name='body'),
}

async function listTranscodeTemplateGroupWithOptions(request: ListTranscodeTemplateGroupRequest, runtime: Util.RuntimeOptions): ListTranscodeTemplateGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTranscodeTemplateGroup', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTranscodeTemplateGroup(request: ListTranscodeTemplateGroupRequest): ListTranscodeTemplateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTranscodeTemplateGroupWithOptions(request, runtime);
}

model ListVodRealtimeLogDeliveryDomainsRequest {
  logstore?: string(name='Logstore'),
  ownerId?: long(name='OwnerId'),
  project?: string(name='Project'),
  region?: string(name='Region'),
}

model ListVodRealtimeLogDeliveryDomainsResponseBody = {
  content?: {
    domains?: [ 
    {
      domainName?: string(name='DomainName'),
      status?: string(name='Status'),
    }
  ](name='Domains')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model ListVodRealtimeLogDeliveryDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ListVodRealtimeLogDeliveryDomainsResponseBody(name='body'),
}

async function listVodRealtimeLogDeliveryDomainsWithOptions(request: ListVodRealtimeLogDeliveryDomainsRequest, runtime: Util.RuntimeOptions): ListVodRealtimeLogDeliveryDomainsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListVodRealtimeLogDeliveryDomains', '2017-03-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listVodRealtimeLogDeliveryDomains(request: ListVodRealtimeLogDeliveryDomainsRequest): ListVodRealtimeLogDeliveryDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVodRealtimeLogDeliveryDomainsWithOptions(request, runtime);
}

model ListVodRealtimeLogDeliveryInfosRequest {
  ownerId?: long(name='OwnerId'),
}

model ListVodRealtimeLogDeliveryInfosResponseBody = {
  content?: {
    realtimeLogDeliveryInfos?: [ 
    {
      logstore?: string(name='Logstore'),
      project?: string(name='Project'),
      region?: string(name='Region'),
    }
  ](name='RealtimeLogDeliveryInfos')
  }(name='Content'),
  requestId?: string(name='RequestId'),
}

model ListVodRealtimeLogDeliveryInfosResponse = {
  headers: map[string]string(name='headers'),
  body: ListVodRealtimeLogDeliveryInfosResponseBody(name='body'),
}

async function listVodRealtimeLogDeliveryInfosWithOptions(request: ListVodRealtimeLogDeliveryInfosRequest, runtime: Util.RuntimeOptions): ListVodRealtimeLogDeliveryInfosResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListVodRealtimeLogDeliveryInfos', '2017-03-21', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listVodRealtimeLogDeliveryInfos(request: ListVodRealtimeLogDeliveryInfosRequest): ListVodRealtimeLogDeliveryInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVodRealtimeLogDeliveryInfosWithOptions(request, runtime);
}

model ListVodTemplateRequest {
  appId?: string(name='AppId'),
  templateType?: string(name='TemplateType'),
}

model ListVodTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  vodTemplateInfoList?: [ 
    {
      appId?: string(name='AppId'),
      creationTime?: string(name='CreationTime'),
      isDefault?: string(name='IsDefault'),
      modifyTime?: string(name='ModifyTime'),
      name?: string(name='Name'),
      templateConfig?: string(name='TemplateConfig'),
      templateType?: string(name='TemplateType'),
      vodTemplateId?: string(name='VodTemplateId'),
    }
  ](name='VodTemplateInfoList'),
}

model ListVodTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ListVodTemplateResponseBody(name='body'),
}

async function listVodTemplateWithOptions(request: ListVodTemplateRequest, runtime: Util.RuntimeOptions): ListVodTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListVodTemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listVodTemplate(request: ListVodTemplateRequest): ListVodTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listVodTemplateWithOptions(request, runtime);
}

model ListWatermarkRequest {
  appId?: string(name='AppId'),
}

model ListWatermarkResponseBody = {
  requestId?: string(name='RequestId'),
  watermarkInfos?: [ 
    {
      appId?: string(name='AppId'),
      creationTime?: string(name='CreationTime'),
      fileUrl?: string(name='FileUrl'),
      isDefault?: string(name='IsDefault'),
      name?: string(name='Name'),
      type?: string(name='Type'),
      watermarkConfig?: string(name='WatermarkConfig'),
      watermarkId?: string(name='WatermarkId'),
    }
  ](name='WatermarkInfos'),
}

model ListWatermarkResponse = {
  headers: map[string]string(name='headers'),
  body: ListWatermarkResponseBody(name='body'),
}

async function listWatermarkWithOptions(request: ListWatermarkRequest, runtime: Util.RuntimeOptions): ListWatermarkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListWatermark', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listWatermark(request: ListWatermarkRequest): ListWatermarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWatermarkWithOptions(request, runtime);
}

model MoveAppResourceRequest {
  resourceIds?: string(name='ResourceIds'),
  resourceType?: string(name='ResourceType'),
  targetAppId?: string(name='TargetAppId'),
}

model MoveAppResourceResponseBody = {
  failedResourceIds?: [ string ](name='FailedResourceIds'),
  nonExistResourceIds?: [ string ](name='NonExistResourceIds'),
  requestId?: string(name='RequestId'),
}

model MoveAppResourceResponse = {
  headers: map[string]string(name='headers'),
  body: MoveAppResourceResponseBody(name='body'),
}

async function moveAppResourceWithOptions(request: MoveAppResourceRequest, runtime: Util.RuntimeOptions): MoveAppResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MoveAppResource', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function moveAppResource(request: MoveAppResourceRequest): MoveAppResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveAppResourceWithOptions(request, runtime);
}

model PreloadVodObjectCachesRequest {
  objectPath?: string(name='ObjectPath'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model PreloadVodObjectCachesResponseBody = {
  preloadTaskId?: string(name='PreloadTaskId'),
  requestId?: string(name='RequestId'),
}

model PreloadVodObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  body: PreloadVodObjectCachesResponseBody(name='body'),
}

async function preloadVodObjectCachesWithOptions(request: PreloadVodObjectCachesRequest, runtime: Util.RuntimeOptions): PreloadVodObjectCachesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PreloadVodObjectCaches', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function preloadVodObjectCaches(request: PreloadVodObjectCachesRequest): PreloadVodObjectCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return preloadVodObjectCachesWithOptions(request, runtime);
}

model ProduceEditingProjectVideoRequest {
  coverURL?: string(name='CoverURL'),
  description?: string(name='Description'),
  mediaMetadata?: string(name='MediaMetadata'),
  ownerId?: long(name='OwnerId'),
  produceConfig?: string(name='ProduceConfig'),
  projectId?: string(name='ProjectId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  timeline?: string(name='Timeline'),
  title?: string(name='Title'),
  userData?: string(name='UserData'),
}

model ProduceEditingProjectVideoResponseBody = {
  mediaId?: string(name='MediaId'),
  projectId?: string(name='ProjectId'),
  requestId?: string(name='RequestId'),
}

model ProduceEditingProjectVideoResponse = {
  headers: map[string]string(name='headers'),
  body: ProduceEditingProjectVideoResponseBody(name='body'),
}

async function produceEditingProjectVideoWithOptions(request: ProduceEditingProjectVideoRequest, runtime: Util.RuntimeOptions): ProduceEditingProjectVideoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ProduceEditingProjectVideo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function produceEditingProjectVideo(request: ProduceEditingProjectVideoRequest): ProduceEditingProjectVideoResponse {
  var runtime = new Util.RuntimeOptions{};
  return produceEditingProjectVideoWithOptions(request, runtime);
}

model RefreshUploadVideoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  videoId?: string(name='VideoId'),
}

model RefreshUploadVideoResponseBody = {
  requestId?: string(name='RequestId'),
  uploadAddress?: string(name='UploadAddress'),
  uploadAuth?: string(name='UploadAuth'),
  videoId?: string(name='VideoId'),
}

model RefreshUploadVideoResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshUploadVideoResponseBody(name='body'),
}

async function refreshUploadVideoWithOptions(request: RefreshUploadVideoRequest, runtime: Util.RuntimeOptions): RefreshUploadVideoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RefreshUploadVideo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function refreshUploadVideo(request: RefreshUploadVideoRequest): RefreshUploadVideoResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshUploadVideoWithOptions(request, runtime);
}

model RefreshVodObjectCachesRequest {
  objectPath?: string(name='ObjectPath'),
  objectType?: string(name='ObjectType'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
}

model RefreshVodObjectCachesResponseBody = {
  refreshTaskId?: string(name='RefreshTaskId'),
  requestId?: string(name='RequestId'),
}

model RefreshVodObjectCachesResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshVodObjectCachesResponseBody(name='body'),
}

async function refreshVodObjectCachesWithOptions(request: RefreshVodObjectCachesRequest, runtime: Util.RuntimeOptions): RefreshVodObjectCachesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RefreshVodObjectCaches', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function refreshVodObjectCaches(request: RefreshVodObjectCachesRequest): RefreshVodObjectCachesResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshVodObjectCachesWithOptions(request, runtime);
}

model RegisterMediaRequest {
  registerMetadatas?: string(name='RegisterMetadatas'),
  templateGroupId?: string(name='TemplateGroupId'),
  userData?: string(name='UserData'),
  workflowId?: string(name='WorkflowId'),
}

model RegisterMediaResponseBody = {
  failedFileURLs?: [ string ](name='FailedFileURLs'),
  registeredMediaList?: [ 
    {
      fileURL?: string(name='FileURL'),
      mediaId?: string(name='MediaId'),
      newRegister?: boolean(name='NewRegister'),
    }
  ](name='RegisteredMediaList'),
  requestId?: string(name='RequestId'),
}

model RegisterMediaResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterMediaResponseBody(name='body'),
}

async function registerMediaWithOptions(request: RegisterMediaRequest, runtime: Util.RuntimeOptions): RegisterMediaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RegisterMedia', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function registerMedia(request: RegisterMediaRequest): RegisterMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerMediaWithOptions(request, runtime);
}

model SearchEditingProjectRequest {
  endTime?: string(name='EndTime'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
  sortBy?: string(name='SortBy'),
  startTime?: string(name='StartTime'),
  status?: string(name='Status'),
  title?: string(name='Title'),
}

model SearchEditingProjectResponseBody = {
  projectList?: {
    project?: [ 
    {
      coverURL?: string(name='CoverURL'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      duration?: float(name='Duration'),
      modifiedTime?: string(name='ModifiedTime'),
      projectId?: string(name='ProjectId'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      storageLocation?: string(name='StorageLocation'),
      title?: string(name='Title'),
    }
  ](name='Project')
  }(name='ProjectList'),
  requestId?: string(name='RequestId'),
  total?: int32(name='Total'),
}

model SearchEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: SearchEditingProjectResponseBody(name='body'),
}

async function searchEditingProjectWithOptions(request: SearchEditingProjectRequest, runtime: Util.RuntimeOptions): SearchEditingProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SearchEditingProject', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function searchEditingProject(request: SearchEditingProjectRequest): SearchEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchEditingProjectWithOptions(request, runtime);
}

model SearchMediaRequest {
  fields?: string(name='Fields'),
  match?: string(name='Match'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  scrollToken?: string(name='ScrollToken'),
  searchType?: string(name='SearchType'),
  sortBy?: string(name='SortBy'),
}

model SearchMediaResponseBody = {
  mediaList?: [ 
    {
      attachedMedia?: {
        appId?: string(name='AppId'),
        businessType?: string(name='BusinessType'),
        categories?: [ 
          {
            cateId?: long(name='CateId'),
            cateName?: string(name='CateName'),
            level?: long(name='Level'),
            parentId?: long(name='ParentId'),
          }
        ](name='Categories'),
        creationTime?: string(name='CreationTime'),
        description?: string(name='Description'),
        mediaId?: string(name='MediaId'),
        modificationTime?: string(name='ModificationTime'),
        status?: string(name='Status'),
        storageLocation?: string(name='StorageLocation'),
        tags?: string(name='Tags'),
        title?: string(name='Title'),
        URL?: string(name='URL'),
      }(name='AttachedMedia'),
      audio?: {
        appId?: string(name='AppId'),
        audioId?: string(name='AudioId'),
        cateId?: long(name='CateId'),
        cateName?: string(name='CateName'),
        coverURL?: string(name='CoverURL'),
        creationTime?: string(name='CreationTime'),
        description?: string(name='Description'),
        downloadSwitch?: string(name='DownloadSwitch'),
        duration?: float(name='Duration'),
        mediaSource?: string(name='MediaSource'),
        modificationTime?: string(name='ModificationTime'),
        preprocessStatus?: string(name='PreprocessStatus'),
        size?: long(name='Size'),
        snapshots?: [ string ](name='Snapshots'),
        spriteSnapshots?: [ string ](name='SpriteSnapshots'),
        status?: string(name='Status'),
        storageLocation?: string(name='StorageLocation'),
        tags?: string(name='Tags'),
        title?: string(name='Title'),
        transcodeMode?: string(name='TranscodeMode'),
      }(name='Audio'),
      creationTime?: string(name='CreationTime'),
      image?: {
        appId?: string(name='AppId'),
        cateId?: long(name='CateId'),
        cateName?: string(name='CateName'),
        creationTime?: string(name='CreationTime'),
        description?: string(name='Description'),
        imageId?: string(name='ImageId'),
        modificationTime?: string(name='ModificationTime'),
        status?: string(name='Status'),
        storageLocation?: string(name='StorageLocation'),
        tags?: string(name='Tags'),
        title?: string(name='Title'),
        URL?: string(name='URL'),
      }(name='Image'),
      mediaId?: string(name='MediaId'),
      mediaType?: string(name='MediaType'),
      video?: {
        appId?: string(name='AppId'),
        cateId?: long(name='CateId'),
        cateName?: string(name='CateName'),
        coverURL?: string(name='CoverURL'),
        creationTime?: string(name='CreationTime'),
        description?: string(name='Description'),
        downloadSwitch?: string(name='DownloadSwitch'),
        duration?: float(name='Duration'),
        mediaSource?: string(name='MediaSource'),
        modificationTime?: string(name='ModificationTime'),
        preprocessStatus?: string(name='PreprocessStatus'),
        size?: long(name='Size'),
        snapshots?: [ string ](name='Snapshots'),
        spriteSnapshots?: [ string ](name='SpriteSnapshots'),
        status?: string(name='Status'),
        storageLocation?: string(name='StorageLocation'),
        tags?: string(name='Tags'),
        title?: string(name='Title'),
        transcodeMode?: string(name='TranscodeMode'),
        videoId?: string(name='VideoId'),
      }(name='Video'),
    }
  ](name='MediaList'),
  requestId?: string(name='RequestId'),
  scrollToken?: string(name='ScrollToken'),
  total?: long(name='Total'),
}

model SearchMediaResponse = {
  headers: map[string]string(name='headers'),
  body: SearchMediaResponseBody(name='body'),
}

async function searchMediaWithOptions(request: SearchMediaRequest, runtime: Util.RuntimeOptions): SearchMediaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SearchMedia', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function searchMedia(request: SearchMediaRequest): SearchMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchMediaWithOptions(request, runtime);
}

model SetAuditSecurityIpRequest {
  ips?: string(name='Ips'),
  operateMode?: string(name='OperateMode'),
  securityGroupName?: string(name='SecurityGroupName'),
}

model SetAuditSecurityIpResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetAuditSecurityIpResponse = {
  headers: map[string]string(name='headers'),
  body: SetAuditSecurityIpResponseBody(name='body'),
}

async function setAuditSecurityIpWithOptions(request: SetAuditSecurityIpRequest, runtime: Util.RuntimeOptions): SetAuditSecurityIpResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetAuditSecurityIp', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setAuditSecurityIp(request: SetAuditSecurityIpRequest): SetAuditSecurityIpResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAuditSecurityIpWithOptions(request, runtime);
}

model SetCrossdomainContentRequest {
  content?: string(name='Content'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
  resourceRealOwnerId?: string(name='ResourceRealOwnerId'),
  storageLocation?: string(name='StorageLocation'),
}

model SetCrossdomainContentResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCrossdomainContentResponse = {
  headers: map[string]string(name='headers'),
  body: SetCrossdomainContentResponseBody(name='body'),
}

async function setCrossdomainContentWithOptions(request: SetCrossdomainContentRequest, runtime: Util.RuntimeOptions): SetCrossdomainContentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetCrossdomainContent', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setCrossdomainContent(request: SetCrossdomainContentRequest): SetCrossdomainContentResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCrossdomainContentWithOptions(request, runtime);
}

model SetDefaultAITemplateRequest {
  templateId?: string(name='TemplateId'),
}

model SetDefaultAITemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model SetDefaultAITemplateResponse = {
  headers: map[string]string(name='headers'),
  body: SetDefaultAITemplateResponseBody(name='body'),
}

async function setDefaultAITemplateWithOptions(request: SetDefaultAITemplateRequest, runtime: Util.RuntimeOptions): SetDefaultAITemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDefaultAITemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDefaultAITemplate(request: SetDefaultAITemplateRequest): SetDefaultAITemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDefaultAITemplateWithOptions(request, runtime);
}

model SetDefaultTranscodeTemplateGroupRequest {
  transcodeTemplateGroupId?: string(name='TranscodeTemplateGroupId'),
}

model SetDefaultTranscodeTemplateGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDefaultTranscodeTemplateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: SetDefaultTranscodeTemplateGroupResponseBody(name='body'),
}

async function setDefaultTranscodeTemplateGroupWithOptions(request: SetDefaultTranscodeTemplateGroupRequest, runtime: Util.RuntimeOptions): SetDefaultTranscodeTemplateGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDefaultTranscodeTemplateGroup', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDefaultTranscodeTemplateGroup(request: SetDefaultTranscodeTemplateGroupRequest): SetDefaultTranscodeTemplateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDefaultTranscodeTemplateGroupWithOptions(request, runtime);
}

model SetDefaultWatermarkRequest {
  watermarkId?: string(name='WatermarkId'),
}

model SetDefaultWatermarkResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetDefaultWatermarkResponse = {
  headers: map[string]string(name='headers'),
  body: SetDefaultWatermarkResponseBody(name='body'),
}

async function setDefaultWatermarkWithOptions(request: SetDefaultWatermarkRequest, runtime: Util.RuntimeOptions): SetDefaultWatermarkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetDefaultWatermark', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setDefaultWatermark(request: SetDefaultWatermarkRequest): SetDefaultWatermarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return setDefaultWatermarkWithOptions(request, runtime);
}

model SetEditingProjectMaterialsRequest {
  materialIds?: string(name='MaterialIds'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  projectId?: string(name='ProjectId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
}

model SetEditingProjectMaterialsResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetEditingProjectMaterialsResponse = {
  headers: map[string]string(name='headers'),
  body: SetEditingProjectMaterialsResponseBody(name='body'),
}

async function setEditingProjectMaterialsWithOptions(request: SetEditingProjectMaterialsRequest, runtime: Util.RuntimeOptions): SetEditingProjectMaterialsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetEditingProjectMaterials', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setEditingProjectMaterials(request: SetEditingProjectMaterialsRequest): SetEditingProjectMaterialsResponse {
  var runtime = new Util.RuntimeOptions{};
  return setEditingProjectMaterialsWithOptions(request, runtime);
}

model SetMessageCallbackRequest {
  appId?: string(name='AppId'),
  authKey?: string(name='AuthKey'),
  authSwitch?: string(name='AuthSwitch'),
  callbackType?: string(name='CallbackType'),
  callbackURL?: string(name='CallbackURL'),
  eventTypeList?: string(name='EventTypeList'),
  mnsEndpoint?: string(name='MnsEndpoint'),
  mnsQueueName?: string(name='MnsQueueName'),
  ownerAccount?: string(name='OwnerAccount'),
}

model SetMessageCallbackResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetMessageCallbackResponse = {
  headers: map[string]string(name='headers'),
  body: SetMessageCallbackResponseBody(name='body'),
}

async function setMessageCallbackWithOptions(request: SetMessageCallbackRequest, runtime: Util.RuntimeOptions): SetMessageCallbackResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetMessageCallback', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setMessageCallback(request: SetMessageCallbackRequest): SetMessageCallbackResponse {
  var runtime = new Util.RuntimeOptions{};
  return setMessageCallbackWithOptions(request, runtime);
}

model SetVodDomainCertificateRequest {
  certName?: string(name='CertName'),
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  SSLPri?: string(name='SSLPri'),
  SSLProtocol?: string(name='SSLProtocol'),
  SSLPub?: string(name='SSLPub'),
  securityToken?: string(name='SecurityToken'),
}

model SetVodDomainCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetVodDomainCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: SetVodDomainCertificateResponseBody(name='body'),
}

async function setVodDomainCertificateWithOptions(request: SetVodDomainCertificateRequest, runtime: Util.RuntimeOptions): SetVodDomainCertificateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetVodDomainCertificate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setVodDomainCertificate(request: SetVodDomainCertificateRequest): SetVodDomainCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return setVodDomainCertificateWithOptions(request, runtime);
}

model SubmitAICaptionExtractionJobRequest {
  AIPipelineId?: string(name='AIPipelineId'),
  jobConfig?: string(name='JobConfig'),
  userData?: string(name='UserData'),
  videoId?: string(name='VideoId'),
}

model SubmitAICaptionExtractionJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model SubmitAICaptionExtractionJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitAICaptionExtractionJobResponseBody(name='body'),
}

async function submitAICaptionExtractionJobWithOptions(request: SubmitAICaptionExtractionJobRequest, runtime: Util.RuntimeOptions): SubmitAICaptionExtractionJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitAICaptionExtractionJob', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitAICaptionExtractionJob(request: SubmitAICaptionExtractionJobRequest): SubmitAICaptionExtractionJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitAICaptionExtractionJobWithOptions(request, runtime);
}

model SubmitAIImageAuditJobRequest {
  mediaAuditConfiguration?: string(name='MediaAuditConfiguration'),
  mediaId?: string(name='MediaId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
  templateId?: string(name='TemplateId'),
}

model SubmitAIImageAuditJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model SubmitAIImageAuditJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitAIImageAuditJobResponseBody(name='body'),
}

async function submitAIImageAuditJobWithOptions(request: SubmitAIImageAuditJobRequest, runtime: Util.RuntimeOptions): SubmitAIImageAuditJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitAIImageAuditJob', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitAIImageAuditJob(request: SubmitAIImageAuditJobRequest): SubmitAIImageAuditJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitAIImageAuditJobWithOptions(request, runtime);
}

model SubmitAIImageJobRequest {
  AIPipelineId?: string(name='AIPipelineId'),
  AITemplateId?: string(name='AITemplateId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
  userData?: string(name='UserData'),
  videoId?: string(name='VideoId'),
}

model SubmitAIImageJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model SubmitAIImageJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitAIImageJobResponseBody(name='body'),
}

async function submitAIImageJobWithOptions(request: SubmitAIImageJobRequest, runtime: Util.RuntimeOptions): SubmitAIImageJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitAIImageJob', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitAIImageJob(request: SubmitAIImageJobRequest): SubmitAIImageJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitAIImageJobWithOptions(request, runtime);
}

model SubmitAIJobRequest {
  config?: string(name='Config'),
  mediaId?: string(name='MediaId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
  types?: string(name='Types'),
  userData?: string(name='UserData'),
}

model SubmitAIJobResponseBody = {
  AIJobList?: {
    AIJob?: [ 
    {
      jobId?: string(name='JobId'),
      mediaId?: string(name='MediaId'),
      type?: string(name='Type'),
    }
  ](name='AIJob')
  }(name='AIJobList'),
  requestId?: string(name='RequestId'),
}

model SubmitAIJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitAIJobResponseBody(name='body'),
}

async function submitAIJobWithOptions(request: SubmitAIJobRequest, runtime: Util.RuntimeOptions): SubmitAIJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitAIJob', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitAIJob(request: SubmitAIJobRequest): SubmitAIJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitAIJobWithOptions(request, runtime);
}

model SubmitAIMediaAuditJobRequest {
  mediaAuditConfiguration?: string(name='MediaAuditConfiguration'),
  mediaId?: string(name='MediaId'),
  mediaType?: string(name='MediaType'),
  templateId?: string(name='TemplateId'),
  userData?: string(name='UserData'),
}

model SubmitAIMediaAuditJobResponseBody = {
  jobId?: string(name='JobId'),
  mediaId?: string(name='MediaId'),
  requestId?: string(name='RequestId'),
}

model SubmitAIMediaAuditJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitAIMediaAuditJobResponseBody(name='body'),
}

async function submitAIMediaAuditJobWithOptions(request: SubmitAIMediaAuditJobRequest, runtime: Util.RuntimeOptions): SubmitAIMediaAuditJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitAIMediaAuditJob', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitAIMediaAuditJob(request: SubmitAIMediaAuditJobRequest): SubmitAIMediaAuditJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitAIMediaAuditJobWithOptions(request, runtime);
}

model SubmitDetectionJobRequest {
  beginTime?: string(name='BeginTime'),
  copyrightBeginTime?: string(name='CopyrightBeginTime'),
  copyrightEndTime?: string(name='CopyrightEndTime'),
  copyrightFile?: string(name='CopyrightFile'),
  copyrightStatus?: string(name='CopyrightStatus'),
  duration?: int32(name='Duration'),
  shortVideo?: boolean(name='ShortVideo'),
  templateId?: string(name='TemplateId'),
  videoId?: string(name='VideoId'),
  whiteListUrls?: string(name='WhiteListUrls'),
}

model SubmitDetectionJobResponseBody = {
  detectionJob?: {
    beginTime?: string(name='BeginTime'),
    copyrightBeginTime?: string(name='CopyrightBeginTime'),
    copyrightEndTime?: string(name='CopyrightEndTime'),
    copyrightFile?: string(name='CopyrightFile'),
    copyrightStatus?: string(name='CopyrightStatus'),
    createTime?: string(name='CreateTime'),
    endTime?: string(name='EndTime'),
    jobId?: string(name='JobId'),
    modifyTime?: string(name='ModifyTime'),
    templateId?: string(name='TemplateId'),
    videoId?: string(name='VideoId'),
    whitelistUrls?: string(name='WhitelistUrls'),
  }(name='DetectionJob'),
  requestId?: string(name='RequestId'),
}

model SubmitDetectionJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitDetectionJobResponseBody(name='body'),
}

async function submitDetectionJobWithOptions(request: SubmitDetectionJobRequest, runtime: Util.RuntimeOptions): SubmitDetectionJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitDetectionJob', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitDetectionJob(request: SubmitDetectionJobRequest): SubmitDetectionJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitDetectionJobWithOptions(request, runtime);
}

model SubmitDynamicImageJobRequest {
  dynamicImageTemplateId?: string(name='DynamicImageTemplateId'),
  overrideParams?: string(name='OverrideParams'),
  videoId?: string(name='VideoId'),
}

model SubmitDynamicImageJobResponseBody = {
  dynamicImageJob?: {
    jobId?: string(name='JobId'),
  }(name='DynamicImageJob'),
  requestId?: string(name='RequestId'),
}

model SubmitDynamicImageJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitDynamicImageJobResponseBody(name='body'),
}

async function submitDynamicImageJobWithOptions(request: SubmitDynamicImageJobRequest, runtime: Util.RuntimeOptions): SubmitDynamicImageJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitDynamicImageJob', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitDynamicImageJob(request: SubmitDynamicImageJobRequest): SubmitDynamicImageJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitDynamicImageJobWithOptions(request, runtime);
}

model SubmitLiveEditingRequest {
  appName?: string(name='AppName'),
  clips?: string(name='Clips'),
  coverURL?: string(name='CoverURL'),
  description?: string(name='Description'),
  domainName?: string(name='DomainName'),
  mediaMetadata?: string(name='MediaMetadata'),
  ownerId?: long(name='OwnerId'),
  produceConfig?: string(name='ProduceConfig'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  streamName?: string(name='StreamName'),
  title?: string(name='Title'),
  userData?: string(name='UserData'),
}

model SubmitLiveEditingResponseBody = {
  mediaId?: string(name='MediaId'),
  projectId?: string(name='ProjectId'),
  requestId?: string(name='RequestId', description='Id of the request'),
}

model SubmitLiveEditingResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitLiveEditingResponseBody(name='body'),
}

async function submitLiveEditingWithOptions(request: SubmitLiveEditingRequest, runtime: Util.RuntimeOptions): SubmitLiveEditingResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitLiveEditing', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitLiveEditing(request: SubmitLiveEditingRequest): SubmitLiveEditingResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitLiveEditingWithOptions(request, runtime);
}

model SubmitMediaDNADeleteJobRequest {
  mediaId?: string(name='MediaId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
}

model SubmitMediaDNADeleteJobResponseBody = {
  jobId?: string(name='JobId'),
  requestId?: string(name='RequestId'),
}

model SubmitMediaDNADeleteJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitMediaDNADeleteJobResponseBody(name='body'),
}

async function submitMediaDNADeleteJobWithOptions(request: SubmitMediaDNADeleteJobRequest, runtime: Util.RuntimeOptions): SubmitMediaDNADeleteJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitMediaDNADeleteJob', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitMediaDNADeleteJob(request: SubmitMediaDNADeleteJobRequest): SubmitMediaDNADeleteJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitMediaDNADeleteJobWithOptions(request, runtime);
}

model SubmitPreprocessJobsRequest {
  preprocessType?: string(name='PreprocessType'),
  videoId?: string(name='VideoId'),
}

model SubmitPreprocessJobsResponseBody = {
  preprocessJobs?: {
    preprocessJob?: [ 
    {
      jobId?: string(name='JobId'),
    }
  ](name='PreprocessJob')
  }(name='PreprocessJobs'),
  requestId?: string(name='RequestId'),
}

model SubmitPreprocessJobsResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitPreprocessJobsResponseBody(name='body'),
}

async function submitPreprocessJobsWithOptions(request: SubmitPreprocessJobsRequest, runtime: Util.RuntimeOptions): SubmitPreprocessJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitPreprocessJobs', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitPreprocessJobs(request: SubmitPreprocessJobsRequest): SubmitPreprocessJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitPreprocessJobsWithOptions(request, runtime);
}

model SubmitSnapshotJobRequest {
  count?: long(name='Count'),
  height?: string(name='Height'),
  interval?: long(name='Interval'),
  snapshotTemplateId?: string(name='SnapshotTemplateId'),
  specifiedOffsetTime?: long(name='SpecifiedOffsetTime'),
  spriteSnapshotConfig?: string(name='SpriteSnapshotConfig'),
  userData?: string(name='UserData'),
  videoId?: string(name='VideoId'),
  width?: string(name='Width'),
}

model SubmitSnapshotJobResponseBody = {
  requestId?: string(name='RequestId'),
  snapshotJob?: {
    jobId?: string(name='JobId'),
  }(name='SnapshotJob'),
}

model SubmitSnapshotJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitSnapshotJobResponseBody(name='body'),
}

async function submitSnapshotJobWithOptions(request: SubmitSnapshotJobRequest, runtime: Util.RuntimeOptions): SubmitSnapshotJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitSnapshotJob', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitSnapshotJob(request: SubmitSnapshotJobRequest): SubmitSnapshotJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitSnapshotJobWithOptions(request, runtime);
}

model SubmitTranscodeJobsRequest {
  encryptConfig?: string(name='EncryptConfig'),
  overrideParams?: string(name='OverrideParams'),
  pipelineId?: string(name='PipelineId'),
  priority?: string(name='Priority'),
  templateGroupId?: string(name='TemplateGroupId'),
  userData?: string(name='UserData'),
  videoId?: string(name='VideoId'),
}

model SubmitTranscodeJobsResponseBody = {
  requestId?: string(name='RequestId'),
  transcodeJobs?: {
    transcodeJob?: [ 
    {
      jobId?: string(name='JobId'),
    }
  ](name='TranscodeJob')
  }(name='TranscodeJobs'),
  transcodeTaskId?: string(name='TranscodeTaskId'),
}

model SubmitTranscodeJobsResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitTranscodeJobsResponseBody(name='body'),
}

async function submitTranscodeJobsWithOptions(request: SubmitTranscodeJobsRequest, runtime: Util.RuntimeOptions): SubmitTranscodeJobsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitTranscodeJobs', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitTranscodeJobs(request: SubmitTranscodeJobsRequest): SubmitTranscodeJobsResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitTranscodeJobsWithOptions(request, runtime);
}

model SubmitWorkflowJobRequest {
  mediaId?: string(name='MediaId'),
  workflowId?: string(name='WorkflowId'),
}

model SubmitWorkflowJobResponseBody = {
  requestId?: string(name='RequestId'),
}

model SubmitWorkflowJobResponse = {
  headers: map[string]string(name='headers'),
  body: SubmitWorkflowJobResponseBody(name='body'),
}

async function submitWorkflowJobWithOptions(request: SubmitWorkflowJobRequest, runtime: Util.RuntimeOptions): SubmitWorkflowJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubmitWorkflowJob', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function submitWorkflowJob(request: SubmitWorkflowJobRequest): SubmitWorkflowJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitWorkflowJobWithOptions(request, runtime);
}

model TagVodResourcesRequest {
  ownerId?: long(name='OwnerId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagVodResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagVodResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagVodResourcesResponseBody(name='body'),
}

async function tagVodResourcesWithOptions(request: TagVodResourcesRequest, runtime: Util.RuntimeOptions): TagVodResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagVodResources', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagVodResources(request: TagVodResourcesRequest): TagVodResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagVodResourcesWithOptions(request, runtime);
}

model UnTagVodResourcesRequest {
  all?: boolean(name='All'),
  ownerId?: long(name='OwnerId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
}

model UnTagVodResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnTagVodResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UnTagVodResourcesResponseBody(name='body'),
}

async function unTagVodResourcesWithOptions(request: UnTagVodResourcesRequest, runtime: Util.RuntimeOptions): UnTagVodResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnTagVodResources', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unTagVodResources(request: UnTagVodResourcesRequest): UnTagVodResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unTagVodResourcesWithOptions(request, runtime);
}

model UpdateAITemplateRequest {
  templateConfig?: string(name='TemplateConfig'),
  templateId?: string(name='TemplateId'),
  templateName?: string(name='TemplateName'),
}

model UpdateAITemplateResponseBody = {
  requestId?: string(name='RequestId'),
  templateId?: string(name='TemplateId'),
}

model UpdateAITemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAITemplateResponseBody(name='body'),
}

async function updateAITemplateWithOptions(request: UpdateAITemplateRequest, runtime: Util.RuntimeOptions): UpdateAITemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAITemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAITemplate(request: UpdateAITemplateRequest): UpdateAITemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAITemplateWithOptions(request, runtime);
}

model UpdateAppInfoRequest {
  appId?: string(name='AppId'),
  appName?: string(name='AppName'),
  description?: string(name='Description'),
  status?: string(name='Status'),
}

model UpdateAppInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateAppInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppInfoResponseBody(name='body'),
}

async function updateAppInfoWithOptions(request: UpdateAppInfoRequest, runtime: Util.RuntimeOptions): UpdateAppInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAppInfo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAppInfo(request: UpdateAppInfoRequest): UpdateAppInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAppInfoWithOptions(request, runtime);
}

model UpdateAttachedMediaInfosRequest {
  updateContent?: string(name='UpdateContent'),
}

model UpdateAttachedMediaInfosResponseBody = {
  nonExistMediaIds?: [ string ](name='NonExistMediaIds'),
  requestId?: string(name='RequestId'),
}

model UpdateAttachedMediaInfosResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAttachedMediaInfosResponseBody(name='body'),
}

async function updateAttachedMediaInfosWithOptions(request: UpdateAttachedMediaInfosRequest, runtime: Util.RuntimeOptions): UpdateAttachedMediaInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateAttachedMediaInfos', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateAttachedMediaInfos(request: UpdateAttachedMediaInfosRequest): UpdateAttachedMediaInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAttachedMediaInfosWithOptions(request, runtime);
}

model UpdateCategoryRequest {
  cateId?: long(name='CateId'),
  cateName?: string(name='CateName'),
}

model UpdateCategoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCategoryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCategoryResponseBody(name='body'),
}

async function updateCategoryWithOptions(request: UpdateCategoryRequest, runtime: Util.RuntimeOptions): UpdateCategoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateCategory', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateCategory(request: UpdateCategoryRequest): UpdateCategoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCategoryWithOptions(request, runtime);
}

model UpdateDetectionJobRequest {
  beginTime?: string(name='BeginTime'),
  copyrightBeginTime?: string(name='CopyrightBeginTime'),
  copyrightEndTime?: string(name='CopyrightEndTime'),
  copyrightFile?: string(name='CopyrightFile'),
  copyrightStatus?: string(name='CopyrightStatus'),
  duration?: int32(name='Duration'),
  jobId?: string(name='JobId'),
  templateId?: string(name='TemplateId'),
  whiteListUrls?: string(name='WhiteListUrls'),
}

model UpdateDetectionJobResponseBody = {
  detectionJob?: {
    beginTime?: string(name='BeginTime'),
    copyrightBeginTime?: string(name='CopyrightBeginTime'),
    copyrightEndTime?: string(name='CopyrightEndTime'),
    copyrightFile?: string(name='CopyrightFile'),
    copyrightStatus?: string(name='CopyrightStatus'),
    createTime?: string(name='CreateTime'),
    endTime?: string(name='EndTime'),
    jobId?: string(name='JobId'),
    modifyTime?: string(name='ModifyTime'),
    templateId?: string(name='TemplateId'),
    videoId?: string(name='VideoId'),
    whitelistUrls?: string(name='WhitelistUrls'),
  }(name='DetectionJob'),
  requestId?: string(name='RequestId'),
}

model UpdateDetectionJobResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDetectionJobResponseBody(name='body'),
}

async function updateDetectionJobWithOptions(request: UpdateDetectionJobRequest, runtime: Util.RuntimeOptions): UpdateDetectionJobResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDetectionJob', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDetectionJob(request: UpdateDetectionJobRequest): UpdateDetectionJobResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDetectionJobWithOptions(request, runtime);
}

model UpdateDetectionTemplateRequest {
  period?: string(name='Period'),
  platform?: string(name='Platform'),
  templateId?: string(name='TemplateId'),
  templateName?: string(name='TemplateName'),
}

model UpdateDetectionTemplateResponseBody = {
  detectionTemplate?: {
    createTime?: string(name='CreateTime'),
    modifyTime?: string(name='ModifyTime'),
    period?: string(name='Period'),
    platform?: string(name='Platform'),
    templateId?: string(name='TemplateId'),
    templateName?: string(name='TemplateName'),
    userId?: long(name='UserId'),
  }(name='DetectionTemplate'),
  requestId?: string(name='RequestId'),
}

model UpdateDetectionTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateDetectionTemplateResponseBody(name='body'),
}

async function updateDetectionTemplateWithOptions(request: UpdateDetectionTemplateRequest, runtime: Util.RuntimeOptions): UpdateDetectionTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateDetectionTemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateDetectionTemplate(request: UpdateDetectionTemplateRequest): UpdateDetectionTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateDetectionTemplateWithOptions(request, runtime);
}

model UpdateEditingProjectRequest {
  coverURL?: string(name='CoverURL'),
  description?: string(name='Description'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: string(name='OwnerId'),
  projectId?: string(name='ProjectId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: string(name='ResourceOwnerId'),
  timeline?: string(name='Timeline'),
  title?: string(name='Title'),
}

model UpdateEditingProjectResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateEditingProjectResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEditingProjectResponseBody(name='body'),
}

async function updateEditingProjectWithOptions(request: UpdateEditingProjectRequest, runtime: Util.RuntimeOptions): UpdateEditingProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateEditingProject', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateEditingProject(request: UpdateEditingProjectRequest): UpdateEditingProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEditingProjectWithOptions(request, runtime);
}

model UpdateImageInfosRequest {
  updateContent?: string(name='UpdateContent'),
}

model UpdateImageInfosResponseBody = {
  nonExistImageIds?: {
    imageId?: [ string ](name='ImageId')
  }(name='NonExistImageIds'),
  requestId?: string(name='RequestId'),
}

model UpdateImageInfosResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateImageInfosResponseBody(name='body'),
}

async function updateImageInfosWithOptions(request: UpdateImageInfosRequest, runtime: Util.RuntimeOptions): UpdateImageInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateImageInfos', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateImageInfos(request: UpdateImageInfosRequest): UpdateImageInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateImageInfosWithOptions(request, runtime);
}

model UpdateTranscodeTemplateGroupRequest {
  locked?: string(name='Locked'),
  name?: string(name='Name'),
  transcodeTemplateGroupId?: string(name='TranscodeTemplateGroupId'),
  transcodeTemplateList?: string(name='TranscodeTemplateList'),
}

model UpdateTranscodeTemplateGroupResponseBody = {
  requestId?: string(name='RequestId'),
  transcodeTemplateGroupId?: string(name='TranscodeTemplateGroupId'),
}

model UpdateTranscodeTemplateGroupResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTranscodeTemplateGroupResponseBody(name='body'),
}

async function updateTranscodeTemplateGroupWithOptions(request: UpdateTranscodeTemplateGroupRequest, runtime: Util.RuntimeOptions): UpdateTranscodeTemplateGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateTranscodeTemplateGroup', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateTranscodeTemplateGroup(request: UpdateTranscodeTemplateGroupRequest): UpdateTranscodeTemplateGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTranscodeTemplateGroupWithOptions(request, runtime);
}

model UpdateVideoInfoRequest {
  cateId?: long(name='CateId'),
  coverURL?: string(name='CoverURL'),
  description?: string(name='Description'),
  tags?: string(name='Tags'),
  title?: string(name='Title'),
  videoId?: string(name='VideoId'),
}

model UpdateVideoInfoResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVideoInfoResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVideoInfoResponseBody(name='body'),
}

async function updateVideoInfoWithOptions(request: UpdateVideoInfoRequest, runtime: Util.RuntimeOptions): UpdateVideoInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateVideoInfo', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateVideoInfo(request: UpdateVideoInfoRequest): UpdateVideoInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVideoInfoWithOptions(request, runtime);
}

model UpdateVideoInfosRequest {
  updateContent?: string(name='UpdateContent'),
}

model UpdateVideoInfosResponseBody = {
  forbiddenVideoIds?: [ string ](name='ForbiddenVideoIds'),
  nonExistVideoIds?: [ string ](name='NonExistVideoIds'),
  requestId?: string(name='RequestId'),
}

model UpdateVideoInfosResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVideoInfosResponseBody(name='body'),
}

async function updateVideoInfosWithOptions(request: UpdateVideoInfosRequest, runtime: Util.RuntimeOptions): UpdateVideoInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateVideoInfos', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateVideoInfos(request: UpdateVideoInfosRequest): UpdateVideoInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVideoInfosWithOptions(request, runtime);
}

model UpdateVodDomainRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  securityToken?: string(name='SecurityToken'),
  sources?: string(name='Sources'),
  topLevelDomain?: string(name='TopLevelDomain'),
}

model UpdateVodDomainResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateVodDomainResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVodDomainResponseBody(name='body'),
}

async function updateVodDomainWithOptions(request: UpdateVodDomainRequest, runtime: Util.RuntimeOptions): UpdateVodDomainResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateVodDomain', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateVodDomain(request: UpdateVodDomainRequest): UpdateVodDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVodDomainWithOptions(request, runtime);
}

model UpdateVodTemplateRequest {
  name?: string(name='Name'),
  templateConfig?: string(name='TemplateConfig'),
  vodTemplateId?: string(name='VodTemplateId'),
}

model UpdateVodTemplateResponseBody = {
  requestId?: string(name='RequestId'),
  vodTemplateId?: string(name='VodTemplateId'),
}

model UpdateVodTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateVodTemplateResponseBody(name='body'),
}

async function updateVodTemplateWithOptions(request: UpdateVodTemplateRequest, runtime: Util.RuntimeOptions): UpdateVodTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateVodTemplate', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateVodTemplate(request: UpdateVodTemplateRequest): UpdateVodTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateVodTemplateWithOptions(request, runtime);
}

model UpdateWatermarkRequest {
  name?: string(name='Name'),
  watermarkConfig?: string(name='WatermarkConfig'),
  watermarkId?: string(name='WatermarkId'),
}

model UpdateWatermarkResponseBody = {
  requestId?: string(name='RequestId'),
  watermarkInfo?: {
    creationTime?: string(name='CreationTime'),
    fileUrl?: string(name='FileUrl'),
    isDefault?: string(name='IsDefault'),
    name?: string(name='Name'),
    type?: string(name='Type'),
    watermarkConfig?: string(name='WatermarkConfig'),
    watermarkId?: string(name='WatermarkId'),
  }(name='WatermarkInfo'),
}

model UpdateWatermarkResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWatermarkResponseBody(name='body'),
}

async function updateWatermarkWithOptions(request: UpdateWatermarkRequest, runtime: Util.RuntimeOptions): UpdateWatermarkResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateWatermark', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateWatermark(request: UpdateWatermarkRequest): UpdateWatermarkResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWatermarkWithOptions(request, runtime);
}

model UploadMediaByURLRequest {
  appId?: string(name='AppId'),
  storageLocation?: string(name='StorageLocation'),
  templateGroupId?: string(name='TemplateGroupId'),
  uploadMetadatas?: string(name='UploadMetadatas'),
  uploadURLs?: string(name='UploadURLs'),
  userData?: string(name='UserData'),
  workflowId?: string(name='WorkflowId'),
}

model UploadMediaByURLResponseBody = {
  requestId?: string(name='RequestId'),
  uploadJobs?: [ 
    {
      jobId?: string(name='JobId'),
      sourceURL?: string(name='SourceURL'),
    }
  ](name='UploadJobs'),
}

model UploadMediaByURLResponse = {
  headers: map[string]string(name='headers'),
  body: UploadMediaByURLResponseBody(name='body'),
}

async function uploadMediaByURLWithOptions(request: UploadMediaByURLRequest, runtime: Util.RuntimeOptions): UploadMediaByURLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UploadMediaByURL', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function uploadMediaByURL(request: UploadMediaByURLRequest): UploadMediaByURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadMediaByURLWithOptions(request, runtime);
}

model UploadStreamByURLRequest {
  definition?: string(name='Definition'),
  fileExtension?: string(name='FileExtension'),
  mediaId?: string(name='MediaId'),
  streamURL?: string(name='StreamURL'),
  userData?: string(name='UserData'),
}

model UploadStreamByURLResponseBody = {
  requestId?: string(name='RequestId'),
  streamJobId?: string(name='StreamJobId'),
}

model UploadStreamByURLResponse = {
  headers: map[string]string(name='headers'),
  body: UploadStreamByURLResponseBody(name='body'),
}

async function uploadStreamByURLWithOptions(request: UploadStreamByURLRequest, runtime: Util.RuntimeOptions): UploadStreamByURLResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UploadStreamByURL', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function uploadStreamByURL(request: UploadStreamByURLRequest): UploadStreamByURLResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadStreamByURLWithOptions(request, runtime);
}

model VerifyVodDomainOwnerRequest {
  domainName?: string(name='DomainName'),
  ownerId?: long(name='OwnerId'),
  verifyType?: string(name='VerifyType'),
}

model VerifyVodDomainOwnerResponseBody = {
  content?: string(name='Content'),
  requestId?: string(name='RequestId'),
}

model VerifyVodDomainOwnerResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyVodDomainOwnerResponseBody(name='body'),
}

async function verifyVodDomainOwnerWithOptions(request: VerifyVodDomainOwnerRequest, runtime: Util.RuntimeOptions): VerifyVodDomainOwnerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('VerifyVodDomainOwner', '2017-03-21', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function verifyVodDomainOwner(request: VerifyVodDomainOwnerRequest): VerifyVodDomainOwnerResponse {
  var runtime = new Util.RuntimeOptions{};
  return verifyVodDomainOwnerWithOptions(request, runtime);
}

