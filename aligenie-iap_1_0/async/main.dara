/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AliGenie';
  @version = 'iap_1.0';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AppUseTimeReportRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PACKAGE_NAME'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', shrink='json', position='Body'),
  payload?: {
    action: string(name='Action', description='This parameter is required.', example='start'),
    isPrivilege: int32(name='IsPrivilege', description='This parameter is required.', example='1'),
    resourceId: string(name='ResourceId', description='This parameter is required.', example='1'),
    resourceType: int32(name='ResourceType', description='This parameter is required.', example='1'),
    stepCode: string(name='StepCode', description='This parameter is required.', example='2'),
    vipType: int32(name='VipType', description='This parameter is required.', example='1'),
    originUuid?: string(name='originUuid', example='731D5F********DC3B'),
  }(name='Payload', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model AppUseTimeReportResponseBody = {
  retCode?: int32(name='RetCode', example='0'),
  retMsg?: string(name='RetMsg'),
  retValue?: boolean(name='RetValue', example='true'),
}

model AppUseTimeReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AppUseTimeReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AppUseTimeReport  AppUseTimeReportRequest
  * @return AppUseTimeReportResponse
 */
async function appUseTimeReport(request: AppUseTimeReportRequest): AppUseTimeReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AppUseTimeReport', 'POST', '/v1.0/iap/vip/use/time/report', 'json', true, 'form', request);
}

model CallBackThirdRightSendPlanRequest {
  bizGroup?: string(name='BizGroup', example='cc', position='Query'),
  bizType?: string(name='BizType', example='ailabs', position='Query'),
  cardType?: int32(name='CardType', example='1001', position='Query'),
  errorMsg?: string(name='ErrorMsg', example='领取异常', position='Query'),
  extendInfo?: map[string]any(name='ExtendInfo', example='{}', shrink='json', position='Query'),
  genieOpenId?: string(name='GenieOpenId', example='1dsds2FzCXFGVA1ADS', position='Query'),
  receiveStatus?: int32(name='ReceiveStatus', example='1', position='Query'),
  sn?: string(name='Sn', example='01000019100307010000600', position='Query'),
  supplierId?: long(name='SupplierId', example='1', position='Query'),
}

model CallBackThirdRightSendPlanResponseBody = {
  retCode?: string(name='RetCode', example='400'),
  retMsg?: string(name='RetMsg', example='系统异常'),
  retValue?: boolean(name='RetValue'),
  requestId?: string(name='requestId', example='908FA068-529C-0C20-8DB5-63B0EF7CFF1F'),
}

model CallBackThirdRightSendPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CallBackThirdRightSendPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CallBackThirdRightSendPlan  CallBackThirdRightSendPlanRequest
  * @return CallBackThirdRightSendPlanResponse
 */
async function callBackThirdRightSendPlan(request: CallBackThirdRightSendPlanRequest): CallBackThirdRightSendPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CallBackThirdRightSendPlan', 'POST', '/v1.0/iap/business/CallBackThirdRightSendPlan', 'json', false, 'json', request);
}

model CheckThirdRightSendPlanRequest {
  bizGroup?: string(name='BizGroup', example='cc', position='Query'),
  bizType?: string(name='BizType', example='ailabs', position='Query'),
  extendInfo?: map[string]any(name='ExtendInfo', example='{}', shrink='json', position='Query'),
  sn?: string(name='Sn', example='01000019100307010000600', position='Query'),
  supplierId?: long(name='SupplierId', example='1', position='Query'),
}

model CheckThirdRightSendPlanResponseBody = {
  retCode?: int32(name='RetCode', example='0'),
  retMsg?: string(name='RetMsg', example='系统异常'),
  retValue?: {
    activateDate?: string(name='ActivateDate', example='"1713262192005"'),
    cardType?: int32(name='CardType', example='1001 日卡 1002 月卡 1003 季卡 1004 年卡'),
    channelCode?: string(name='ChannelCode', example='TB'),
    channelName?: string(name='ChannelName', example='淘宝'),
    extendInfo?: map[string]any(name='ExtendInfo', example='{}'),
    requestId?: string(name='RequestId', example='908FA068-529C-0C20-8DB5-63B0EF7CFF1F'),
    rightsExpiredDate?: string(name='RightsExpiredDate', example='"1713262192005"'),
  }(name='RetValue'),
}

model CheckThirdRightSendPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckThirdRightSendPlanResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckThirdRightSendPlan  CheckThirdRightSendPlanRequest
  * @return CheckThirdRightSendPlanResponse
 */
async function checkThirdRightSendPlan(request: CheckThirdRightSendPlanRequest): CheckThirdRightSendPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CheckThirdRightSendPlan', 'POST', '/v1.0/iap/business/CheckThirdRightSendPlan', 'json', false, 'json', request);
}

model CreateReminderRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  payload: {
    content: string(name='Content', description='This parameter is required.', example='提醒内容'),
    isDebug: boolean(name='IsDebug', description='This parameter is required.', example='true'),
    recurrenceRule: {
      day?: int32(name='Day', example='25'),
      daysOfMonth?: [ int32 ](name='DaysOfMonth'),
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      endDateTime: long(name='EndDateTime', description='This parameter is required.', example='1635134700000'),
      freq: string(name='Freq', description='This parameter is required.', example='ONCE'),
      hour: int32(name='Hour', description='This parameter is required.', example='12'),
      minute?: int32(name='Minute', example='3'),
      month?: int32(name='Month', example='10'),
      second?: int32(name='Second', example='3'),
      startDateTime: long(name='StartDateTime', description='This parameter is required.', example='1635134400000'),
      year?: int32(name='Year', example='2021'),
    }(name='RecurrenceRule', description='This parameter is required.'),
  }(name='Payload', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model CreateReminderResponseBody = {
  errorCode?: string(name='ErrorCode', example='400'),
  errorMsg?: string(name='ErrorMsg', example='不能设置过去的时间。'),
  model?: long(name='Model', example='20****1'),
  success?: boolean(name='Success', example='true'),
}

model CreateReminderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateReminderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateReminder  CreateReminderRequest
  * @return CreateReminderResponse
 */
async function createReminder(request: CreateReminderRequest): CreateReminderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateReminder', 'POST', '/v1.0/iap/reminder/create', 'json', true, 'form', request);
}

model DeleteReminderRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='SKILL_ID'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  payload: {
    id: long(name='Id', description='This parameter is required.', example='20****34'),
    isDebug: boolean(name='IsDebug', description='This parameter is required.', example='true'),
  }(name='Payload', description='This parameter is required.', shrink='json', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='SKILL_ID'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model DeleteReminderResponseBody = {
  errorCode?: int32(name='ErrorCode', example='400'),
  errorMsg?: string(name='ErrorMsg', example='参数错误。'),
  success?: boolean(name='Success', example='true'),
}

model DeleteReminderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteReminderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteReminder  DeleteReminderRequest
  * @return DeleteReminderResponse
 */
async function deleteReminder(request: DeleteReminderRequest): DeleteReminderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteReminder', 'DELETE', '/v1.0/iap/reminder/delete', 'json', false, 'json', request);
}

model GetAccountForAppRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PACKAGE_NAME'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', shrink='json', position='Query'),
  payload?: {
    phone?: string(name='Phone', example='188*777'),
    originUuid?: string(name='originUuid', example='731D5F********DC3B'),
  }(name='Payload', shrink='json', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model GetAccountForAppResponseBody = {
  retCode?: int32(name='RetCode', example='0'),
  retMsg?: string(name='RetMsg'),
  retValue?: {
    isVip?: boolean(name='IsVip', example='true'),
    strVipExpire?: string(name='StrVipExpire', example='2022-05-12 15:22:18'),
    vipExpireAt?: long(name='VipExpireAt', example='1652340138347'),
  }(name='RetValue'),
}

model GetAccountForAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccountForAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAccountForApp  GetAccountForAppRequest
  * @return GetAccountForAppResponse
 */
async function getAccountForApp(request: GetAccountForAppRequest): GetAccountForAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAccountForApp', 'GET', '/v1.0/iap/vip/account/get', 'json', false, 'json', request);
}

model GetBusAppConfigRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='SKILL_ID'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', shrink='json', position='Query'),
  payload?: {
    originUuid?: string(name='originUuid', example='731D5F********DC3B'),
    phone?: string(name='phone', example='136****1111'),
  }(name='Payload', shrink='json', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='SKILL_ID'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model GetBusAppConfigResponseBody = {
  retCode?: int32(name='RetCode', example='0'),
  retMsg?: string(name='RetMsg', example='请求异常'),
  retValue?: {
    cashier?: string(name='Cashier'),
    shoppingBar?: string(name='ShoppingBar', example='https://******.com/design/******?imageId=xxxxx'),
    shoppingWindow?: string(name='ShoppingWindow', example='https://******.com/design/******?imageId=xxxxx'),
    vipLabel?: string(name='VipLabel', example='https://******.com/design/******?imageId=xxxxx'),
  }(name='RetValue'),
}

model GetBusAppConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusAppConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetBusAppConfig  GetBusAppConfigRequest
  * @return GetBusAppConfigResponse
 */
async function getBusAppConfig(request: GetBusAppConfigRequest): GetBusAppConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetBusAppConfig', 'GET', '/v1.0/iap/app/config/get', 'json', false, 'json', request);
}

model GetPhoneNumberRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model GetPhoneNumberResponseBody = {
  phoneNumber?: string(name='phoneNumber', example='137****'),
}

model GetPhoneNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhoneNumberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhoneNumber  GetPhoneNumberRequest
  * @return GetPhoneNumberResponse
 */
async function getPhoneNumber(request: GetPhoneNumberRequest): GetPhoneNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPhoneNumber', 'GET', '/v1.0/iap/profile/phoneNumber', 'json', false, 'json', request);
}

model GetReminderRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='SKILL_ID'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  payload: {
    id: long(name='Id', description='This parameter is required.', example='20****34'),
    isDebug: boolean(name='IsDebug', description='This parameter is required.', example='true'),
  }(name='Payload', description='This parameter is required.', shrink='json', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='SKILL_ID'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model GetReminderResponseBody = {
  errorCode?: int32(name='ErrorCode', example='400'),
  errorMsg?: string(name='ErrorMsg', example='参数不合法。'),
  model?: {
    remindResponses?: [ 
      {
        actionTopic?: string(name='ActionTopic', example='宝宝快去刷牙'),
        dayDesc?: string(name='DayDesc', example='每天'),
        recurrenceRule?: {
          day?: int32(name='Day', example='27'),
          daysOfMonth?: [ int32 ](name='DaysOfMonth'),
          daysOfWeek?: [ int32 ](name='DaysOfWeek'),
          endDateTime?: string(name='EndDateTime', example='1661598000000'),
          freq?: string(name='Freq', example='WEEKLY'),
          hour?: int32(name='Hour', example='18'),
          minute?: int32(name='Minute', example='0'),
          month?: int32(name='Month', example='8'),
          second?: int32(name='Second', example='0'),
          startDateTime?: string(name='StartDateTime', example='1630054800000'),
          year?: int32(name='Year', example='2021'),
        }(name='RecurrenceRule'),
        remindId?: long(name='RemindId', example='20*****1'),
        remindTime?: string(name='RemindTime', example='1629850800000'),
        repeatCount?: int32(name='RepeatCount', example='1'),
        week?: string(name='Week', example='周三'),
      }
    ](name='RemindResponses'),
  }(name='Model'),
  success?: boolean(name='Success', example='true'),
}

model GetReminderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetReminderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetReminder  GetReminderRequest
  * @return GetReminderResponse
 */
async function getReminder(request: GetReminderRequest): GetReminderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetReminder', 'GET', '/v1.0/iap/reminder/get', 'json', false, 'json', request);
}

model ListRemindersRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Query'),
  payload: {
    isDebug: boolean(name='IsDebug', description='This parameter is required.', example='true'),
  }(name='Payload', description='This parameter is required.', shrink='json', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model ListRemindersResponseBody = {
  errorCode?: int32(name='ErrorCode', example='400'),
  errorMsg?: string(name='ErrorMsg', example='参数不合法。'),
  model?: {
    remindResponses?: [ 
      {
        actionTopic?: string(name='ActionTopic', example='宝宝快去刷牙'),
        dayDesc?: string(name='DayDesc', example='每天'),
        recurrenceRule?: {
          day?: int32(name='Day', example='27'),
          daysOfMonth?: [ int32 ](name='DaysOfMonth'),
          daysOfWeek?: [ int32 ](name='DaysOfWeek'),
          endDateTime?: string(name='EndDateTime', example='1661598000000'),
          freq?: string(name='Freq', example='WEEKLY'),
          hour?: int32(name='Hour', example='18'),
          minute?: int32(name='Minute', example='0'),
          month?: int32(name='Month', example='8'),
          second?: int32(name='Second', example='0'),
          startDateTime?: string(name='StartDateTime', example='1630054800000'),
          year?: int32(name='Year', example='2021'),
        }(name='RecurrenceRule'),
        remindId?: long(name='RemindId', example='20****1'),
        remindTime?: string(name='RemindTime', example='1629850800000'),
        repeatCount?: int32(name='RepeatCount', example='1'),
        week?: string(name='Week', example='周三'),
      }
    ](name='RemindResponses'),
  }(name='Model'),
  success?: boolean(name='Success', example='true'),
}

model ListRemindersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRemindersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListReminders  ListRemindersRequest
  * @return ListRemindersResponse
 */
async function listReminders(request: ListRemindersRequest): ListRemindersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListReminders', 'GET', '/v1.0/iap/reminder/list', 'json', false, 'json', request);
}

model PullCashierRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PACKAGE_NAME'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', shrink='json', position='Query'),
  payload?: {
    originUuid?: string(name='originUuid', example='731D5F********DC3B'),
  }(name='Payload', shrink='json', position='Query'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Query'),
}

model PullCashierResponseBody = {
  retCode?: int32(name='RetCode', example='0'),
  retMsg?: string(name='RetMsg'),
  retValue?: boolean(name='RetValue', example='true'),
}

model PullCashierResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PullCashierResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PullCashier  PullCashierRequest
  * @return PullCashierResponse
 */
async function pullCashier(request: PullCashierRequest): PullCashierResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PullCashier', 'POST', '/v1.0/iap/pull/cashier/', 'json', false, 'json', request);
}

model PushNotificationsRequest {
  notificationUnicastRequest: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='apk包名'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    isDebug?: boolean(name='IsDebug', example='true'),
    messageTemplateId: string(name='MessageTemplateId', description='This parameter is required.', example='2iU81*****G9elJ'),
    organizationId?: string(name='OrganizationId', example='2'),
    placeHolder?: map[string]string(name='PlaceHolder', example='{"nick":"张三"}'),
    sendTarget: {
      targetIdentity?: string(name='TargetIdentity', example='2VpiDQ6aMjxz******Eo7r6e08oIVZ3fKrm5TyEfY='),
      targetType?: string(name='TargetType', example='DEVICE_OPEN_ID'),
    }(name='SendTarget', description='This parameter is required.'),
  }(name='NotificationUnicastRequest', description='This parameter is required.', shrink='json', position='Body'),
  tenantInfo?: {
  }(name='TenantInfo', shrink='json', position='Body'),
}

model PushNotificationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of PushNotifications  PushNotificationsRequest
  * @return PushNotificationsResponse
 */
async function pushNotifications(request: PushNotificationsRequest): PushNotificationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushNotifications', 'PUT', '/v1.0/iap/notifications', 'none', true, 'form', request);
}

model SendNotificationsRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  notificationUnicastRequest: {
    isDebug?: boolean(name='IsDebug', example='false'),
    messageTemplateId: string(name='MessageTemplateId', description='This parameter is required.', example='2iU81*****G9elJ'),
    placeHolder?: map[string]string(name='PlaceHolder', example='{"nick":"张三"}'),
    sendTarget: {
    }(name='SendTarget', description='This parameter is required.'),
  }(name='NotificationUnicastRequest', description='This parameter is required.', shrink='json', position='Body'),
  tenantInfo?: {
  }(name='TenantInfo', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model SendNotificationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of SendNotifications  SendNotificationsRequest
  * @return SendNotificationsResponse
 */
async function sendNotifications(request: SendNotificationsRequest): SendNotificationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SendNotifications', 'PUT', '/v1.0/iap/general/notifications', 'none', true, 'form', request);
}

model ThirdImmediateMsgPushRequest {
  bizType?: string(name='BizType', example='FLIGHT', position='Query'),
  changeDetail?: string(name='ChangeDetail', example='changeDetail', position='Query'),
  orderId?: string(name='OrderId', example='orderId', position='Query'),
  psgIds?: string(name='PsgIds', example='psgIds', position='Query'),
  trafficChangeType?: string(name='TrafficChangeType', example='trafficChangeType', position='Query'),
  trafficChangeTypeDesc?: string(name='TrafficChangeTypeDesc', example='trafficChangeTypeDesc', position='Query'),
  trafficJourneyIds?: string(name='TrafficJourneyIds', example='trafficJourneyIds', position='Query'),
  trafficSubOrderIds?: string(name='TrafficSubOrderIds', example='trafficSubOrderIds', position='Query'),
  userId?: string(name='UserId', example='userId', position='Query'),
}

model ThirdImmediateMsgPushResponseBody = {
  errorCode?: string(name='ErrorCode', example='500000000'),
  errorMsg?: string(name='ErrorMsg', example='服务器内部异常'),
  model?: {
    requestId?: string(name='RequestId', example='2DF6FEFE-3301-16DD-ABCC-968A9524920B'),
    success?: boolean(name='Success'),
  }(name='Model'),
  success?: boolean(name='Success'),
}

model ThirdImmediateMsgPushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ThirdImmediateMsgPushResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ThirdImmediateMsgPush  ThirdImmediateMsgPushRequest
  * @return ThirdImmediateMsgPushResponse
 */
async function thirdImmediateMsgPush(request: ThirdImmediateMsgPushRequest): ThirdImmediateMsgPushResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ThirdImmediateMsgPush', 'POST', '/v1.0/iap/thirdImmediateMsgPush', 'json', false, 'json', request);
}

model UpdateReminderRequest {
  deviceInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.', shrink='json', position='Body'),
  payload: {
    content: string(name='Content', description='This parameter is required.', example='更新提醒内容'),
    id: long(name='Id', description='This parameter is required.', example='20***34'),
    isDebug: boolean(name='IsDebug', description='This parameter is required.', example='true'),
    recurrenceRule: {
      day?: int32(name='Day', example='25'),
      daysOfMonth?: [ int32 ](name='DaysOfMonth'),
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      endDateTime: long(name='EndDateTime', description='This parameter is required.', example='1635134700000'),
      freq: string(name='Freq', description='This parameter is required.', example='ONCE'),
      hour: int32(name='Hour', description='This parameter is required.', example='12'),
      minute?: int32(name='Minute', example='3'),
      month?: int32(name='Month', example='10'),
      second?: int32(name='Second', example='3'),
      startDateTime: long(name='StartDateTime', description='This parameter is required.', example='1635134400000'),
      year?: int32(name='Year', example='2021'),
    }(name='RecurrenceRule', description='This parameter is required.'),
  }(name='Payload', description='This parameter is required.', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model UpdateReminderResponseBody = {
  errorCode?: int32(name='ErrorCode', example='400'),
  errorMsg?: string(name='ErrorMsg', example='不能设置过去的时间。'),
  model?: long(name='Model', example='20****1'),
  success?: boolean(name='Success', example='true'),
}

model UpdateReminderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateReminderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateReminder  UpdateReminderRequest
  * @return UpdateReminderResponse
 */
async function updateReminder(request: UpdateReminderRequest): UpdateReminderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateReminder', 'PUT', '/v1.0/iap/reminder/update', 'json', true, 'form', request);
}

model VideoAppReportRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PACKAGE_NAME'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', shrink='json', position='Body'),
  payload?: {
    endTime: long(name='endTime', description='This parameter is required.', example='1652337963097'),
    isLogin: boolean(name='isLogin', description='This parameter is required.', example='true'),
    isVip: boolean(name='isVip', description='This parameter is required.', example='true'),
    loginNick?: string(name='loginNick', example='test'),
    originUuid?: string(name='originUuid', example='731D5F********DC3B'),
    phone?: string(name='phone', example='188*777'),
    pkgName: string(name='pkgName', description='This parameter is required.', example='com.***.test'),
    startTime: long(name='startTime', description='This parameter is required.', example='1652337963097'),
  }(name='Payload', shrink='json', position='Body'),
  userInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.', shrink='json', position='Body'),
}

model VideoAppReportResponseBody = {
  retCode?: int32(name='RetCode', example='0'),
  retMsg?: string(name='RetMsg'),
  retValue?: boolean(name='RetValue', example='true'),
}

model VideoAppReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VideoAppReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of VideoAppReport  VideoAppReportRequest
  * @return VideoAppReportResponse
 */
async function videoAppReport(request: VideoAppReportRequest): VideoAppReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'VideoAppReport', 'POST', '/v1.0/iap/vip/use/video/report', 'json', true, 'form', request);
}

model WakeUpAppRequest {
  isDebug?: boolean(name='IsDebug', example='true', position='Body'),
  path: string(name='Path', description='This parameter is required.', example='应用拉起路径', position='Body'),
  targetInfo: {
    encodeKey: string(name='EncodeKey', description='This parameter is required.', example='apk包名'),
    encodeType: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    organizationId?: string(name='OrganizationId', example='11'),
    targetIdentity: string(name='TargetIdentity', description='This parameter is required.', example='2VpiDQ6aMjxz******Eo7r6e08oIVZ3fKrm5TyEfY='),
    targetType: string(name='TargetType', description='This parameter is required.', example='DEVICE_OPEN_ID'),
  }(name='TargetInfo', description='This parameter is required.', position='Body'),
}

model WakeUpAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of WakeUpApp  WakeUpAppRequest
  * @return WakeUpAppResponse
 */
async function wakeUpApp(request: WakeUpAppRequest): WakeUpAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'WakeUpApp', 'PUT', '/v1.0/iap/wakeup', 'none', false, 'json', request);
}

