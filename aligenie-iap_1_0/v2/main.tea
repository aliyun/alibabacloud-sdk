/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aligenie', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AppUseTimeReportHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AppUseTimeReportRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PACKAGE_NAME'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo'),
  payload?: {
    action?: string(name='Action', description='This parameter is required.', example='start'),
    isPrivilege?: int32(name='IsPrivilege', description='This parameter is required.', example='1'),
    resourceId?: string(name='ResourceId', description='This parameter is required.', example='1'),
    resourceType?: int32(name='ResourceType', description='This parameter is required.', example='1'),
    stepCode?: string(name='StepCode', description='This parameter is required.', example='2'),
    vipType?: int32(name='VipType', description='This parameter is required.', example='1'),
    originUuid?: string(name='originUuid', example='731D5F********DC3B'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id?: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.'),
}

model AppUseTimeReportShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo', description='This parameter is required.'),
}

model AppUseTimeReportResponseBody = {
  retCode?: int32(name='RetCode', example='0'),
  retMsg?: string(name='RetMsg'),
  retValue?: boolean(name='RetValue', example='true'),
}

model AppUseTimeReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AppUseTimeReportResponseBody(name='body'),
}

/**
 * @summary 应用使用时长上报
 *
 * @param tmpReq AppUseTimeReportRequest
 * @param headers AppUseTimeReportHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return AppUseTimeReportResponse
 */
@context("appUseTimeReportWithContext")
async function appUseTimeReportWithOptions(tmpReq: AppUseTimeReportRequest, headers: AppUseTimeReportHeaders, runtime: $RuntimeOptions): AppUseTimeReportResponse {
  tmpReq.validate();
  var request = new AppUseTimeReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!$isNull(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!$isNull(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!$isNull(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!$isNull(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'AppUseTimeReport',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/vip/use/time/report`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 应用使用时长上报
 *
 * @param request AppUseTimeReportRequest
 * @return AppUseTimeReportResponse
 */
async function appUseTimeReport(request: AppUseTimeReportRequest): AppUseTimeReportResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new AppUseTimeReportHeaders{};
  return appUseTimeReportWithOptions(request, headers, runtime);
}

model CallBackThirdRightSendPlanHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CallBackThirdRightSendPlanRequest {
  bizGroup?: string(name='BizGroup', example='cc'),
  bizType?: string(name='BizType', example='ailabs'),
  cardType?: int32(name='CardType', example='1001'),
  errorMsg?: string(name='ErrorMsg', example='领取异常'),
  extendInfo?: map[string]any(name='ExtendInfo', example='{}'),
  genieOpenId?: string(name='GenieOpenId', example='1dsds2FzCXFGVA1ADS'),
  receiveStatus?: int32(name='ReceiveStatus', example='1'),
  sn?: string(name='Sn', example='01000019100307010000600'),
  supplierId?: long(name='SupplierId', example='1'),
}

model CallBackThirdRightSendPlanShrinkRequest {
  bizGroup?: string(name='BizGroup', example='cc'),
  bizType?: string(name='BizType', example='ailabs'),
  cardType?: int32(name='CardType', example='1001'),
  errorMsg?: string(name='ErrorMsg', example='领取异常'),
  extendInfoShrink?: string(name='ExtendInfo', example='{}'),
  genieOpenId?: string(name='GenieOpenId', example='1dsds2FzCXFGVA1ADS'),
  receiveStatus?: int32(name='ReceiveStatus', example='1'),
  sn?: string(name='Sn', example='01000019100307010000600'),
  supplierId?: long(name='SupplierId', example='1'),
}

model CallBackThirdRightSendPlanResponseBody = {
  retCode?: string(name='RetCode', example='400'),
  retMsg?: string(name='RetMsg', example='系统异常'),
  retValue?: boolean(name='RetValue'),
  requestId?: string(name='requestId', example='908FA068-529C-0C20-8DB5-63B0EF7CFF1F'),
}

model CallBackThirdRightSendPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CallBackThirdRightSendPlanResponseBody(name='body'),
}

/**
 * @summary 三方领取回调接口
 *
 * @param tmpReq CallBackThirdRightSendPlanRequest
 * @param headers CallBackThirdRightSendPlanHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CallBackThirdRightSendPlanResponse
 */
@context("callBackThirdRightSendPlanWithContext")
async function callBackThirdRightSendPlanWithOptions(tmpReq: CallBackThirdRightSendPlanRequest, headers: CallBackThirdRightSendPlanHeaders, runtime: $RuntimeOptions): CallBackThirdRightSendPlanResponse {
  tmpReq.validate();
  var request = new CallBackThirdRightSendPlanShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.extendInfo)) {
    request.extendInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extendInfo, 'ExtendInfo', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.bizGroup)) {
    query['BizGroup'] = request.bizGroup;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.cardType)) {
    query['CardType'] = request.cardType;
  }
  if (!$isNull(request.errorMsg)) {
    query['ErrorMsg'] = request.errorMsg;
  }
  if (!$isNull(request.extendInfoShrink)) {
    query['ExtendInfo'] = request.extendInfoShrink;
  }
  if (!$isNull(request.genieOpenId)) {
    query['GenieOpenId'] = request.genieOpenId;
  }
  if (!$isNull(request.receiveStatus)) {
    query['ReceiveStatus'] = request.receiveStatus;
  }
  if (!$isNull(request.sn)) {
    query['Sn'] = request.sn;
  }
  if (!$isNull(request.supplierId)) {
    query['SupplierId'] = request.supplierId;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CallBackThirdRightSendPlan',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/business/CallBackThirdRightSendPlan`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 三方领取回调接口
 *
 * @param request CallBackThirdRightSendPlanRequest
 * @return CallBackThirdRightSendPlanResponse
 */
async function callBackThirdRightSendPlan(request: CallBackThirdRightSendPlanRequest): CallBackThirdRightSendPlanResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new CallBackThirdRightSendPlanHeaders{};
  return callBackThirdRightSendPlanWithOptions(request, headers, runtime);
}

model CheckThirdRightSendPlanHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CheckThirdRightSendPlanRequest {
  bizGroup?: string(name='BizGroup', example='cc'),
  bizType?: string(name='BizType', example='ailabs'),
  extendInfo?: map[string]any(name='ExtendInfo', example='{}'),
  sn?: string(name='Sn', example='01000019100307010000600'),
  supplierId?: long(name='SupplierId', example='1'),
}

model CheckThirdRightSendPlanShrinkRequest {
  bizGroup?: string(name='BizGroup', example='cc'),
  bizType?: string(name='BizType', example='ailabs'),
  extendInfoShrink?: string(name='ExtendInfo', example='{}'),
  sn?: string(name='Sn', example='01000019100307010000600'),
  supplierId?: long(name='SupplierId', example='1'),
}

model CheckThirdRightSendPlanResponseBody = {
  retCode?: int32(name='RetCode', example='0'),
  retMsg?: string(name='RetMsg', example='系统异常'),
  retValue?: {
    activateDate?: string(name='ActivateDate', example='"1713262192005"'),
    cardType?: int32(name='CardType', example='1001 日卡 1002 月卡 1003 季卡 1004 年卡'),
    channelCode?: string(name='ChannelCode', example='TB'),
    channelName?: string(name='ChannelName', example='淘宝'),
    extendInfo?: map[string]any(name='ExtendInfo', example='{}'),
    requestId?: string(name='RequestId', example='908FA068-529C-0C20-8DB5-63B0EF7CFF1F'),
    rightsExpiredDate?: string(name='RightsExpiredDate', example='"1713262192005"'),
  }(name='RetValue'),
}

model CheckThirdRightSendPlanResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckThirdRightSendPlanResponseBody(name='body'),
}

/**
 * @summary 商业化移动屏三方app领卡校验
 *
 * @param tmpReq CheckThirdRightSendPlanRequest
 * @param headers CheckThirdRightSendPlanHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckThirdRightSendPlanResponse
 */
@context("checkThirdRightSendPlanWithContext")
async function checkThirdRightSendPlanWithOptions(tmpReq: CheckThirdRightSendPlanRequest, headers: CheckThirdRightSendPlanHeaders, runtime: $RuntimeOptions): CheckThirdRightSendPlanResponse {
  tmpReq.validate();
  var request = new CheckThirdRightSendPlanShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.extendInfo)) {
    request.extendInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extendInfo, 'ExtendInfo', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.bizGroup)) {
    query['BizGroup'] = request.bizGroup;
  }
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.extendInfoShrink)) {
    query['ExtendInfo'] = request.extendInfoShrink;
  }
  if (!$isNull(request.sn)) {
    query['Sn'] = request.sn;
  }
  if (!$isNull(request.supplierId)) {
    query['SupplierId'] = request.supplierId;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckThirdRightSendPlan',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/business/CheckThirdRightSendPlan`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 商业化移动屏三方app领卡校验
 *
 * @param request CheckThirdRightSendPlanRequest
 * @return CheckThirdRightSendPlanResponse
 */
async function checkThirdRightSendPlan(request: CheckThirdRightSendPlanRequest): CheckThirdRightSendPlanResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new CheckThirdRightSendPlanHeaders{};
  return checkThirdRightSendPlanWithOptions(request, headers, runtime);
}

model CreateReminderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CreateReminderRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id?: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.'),
  payload?: {
    content?: string(name='Content', description='This parameter is required.', example='提醒内容'),
    isDebug?: boolean(name='IsDebug', description='This parameter is required.', example='true'),
    recurrenceRule?: {
      day?: int32(name='Day', example='25'),
      daysOfMonth?: [ int32 ](name='DaysOfMonth'),
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      endDateTime?: long(name='EndDateTime', description='This parameter is required.', example='1635134700000'),
      freq?: string(name='Freq', description='This parameter is required.', example='ONCE'),
      hour?: int32(name='Hour', description='This parameter is required.', example='12'),
      minute?: int32(name='Minute', example='3'),
      month?: int32(name='Month', example='10'),
      second?: int32(name='Second', example='3'),
      startDateTime?: long(name='StartDateTime', description='This parameter is required.', example='1635134400000'),
      year?: int32(name='Year', example='2021'),
    }(name='RecurrenceRule', description='This parameter is required.'),
  }(name='Payload', description='This parameter is required.'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id?: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.'),
}

model CreateReminderShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='This parameter is required.'),
  payloadShrink?: string(name='Payload', description='This parameter is required.'),
  userInfoShrink?: string(name='UserInfo', description='This parameter is required.'),
}

model CreateReminderResponseBody = {
  errorCode?: string(name='ErrorCode', example='400'),
  errorMsg?: string(name='ErrorMsg', example='不能设置过去的时间。'),
  model?: long(name='Model', example='20****1'),
  success?: boolean(name='Success', example='true'),
}

model CreateReminderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateReminderResponseBody(name='body'),
}

/**
 * @summary 创建提醒
 *
 * @param tmpReq CreateReminderRequest
 * @param headers CreateReminderHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateReminderResponse
 */
@context("createReminderWithContext")
async function createReminderWithOptions(tmpReq: CreateReminderRequest, headers: CreateReminderHeaders, runtime: $RuntimeOptions): CreateReminderResponse {
  tmpReq.validate();
  var request = new CreateReminderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!$isNull(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!$isNull(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!$isNull(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!$isNull(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateReminder',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/reminder/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建提醒
 *
 * @param request CreateReminderRequest
 * @return CreateReminderResponse
 */
async function createReminder(request: CreateReminderRequest): CreateReminderResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new CreateReminderHeaders{};
  return createReminderWithOptions(request, headers, runtime);
}

model DeleteReminderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteReminderRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='SKILL_ID'),
    id?: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.'),
  payload?: {
    id?: long(name='Id', description='This parameter is required.', example='20****34'),
    isDebug?: boolean(name='IsDebug', description='This parameter is required.', example='true'),
  }(name='Payload', description='This parameter is required.'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='SKILL_ID'),
    id?: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.'),
}

model DeleteReminderShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='This parameter is required.'),
  payloadShrink?: string(name='Payload', description='This parameter is required.'),
  userInfoShrink?: string(name='UserInfo', description='This parameter is required.'),
}

model DeleteReminderResponseBody = {
  errorCode?: int32(name='ErrorCode', example='400'),
  errorMsg?: string(name='ErrorMsg', example='参数错误。'),
  success?: boolean(name='Success', example='true'),
}

model DeleteReminderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteReminderResponseBody(name='body'),
}

/**
 * @summary 删除提醒
 *
 * @param tmpReq DeleteReminderRequest
 * @param headers DeleteReminderHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteReminderResponse
 */
@context("deleteReminderWithContext")
async function deleteReminderWithOptions(tmpReq: DeleteReminderRequest, headers: DeleteReminderHeaders, runtime: $RuntimeOptions): DeleteReminderResponse {
  tmpReq.validate();
  var request = new DeleteReminderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!$isNull(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!$isNull(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!$isNull(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!$isNull(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteReminder',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/reminder/delete`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除提醒
 *
 * @param request DeleteReminderRequest
 * @return DeleteReminderResponse
 */
async function deleteReminder(request: DeleteReminderRequest): DeleteReminderResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new DeleteReminderHeaders{};
  return deleteReminderWithOptions(request, headers, runtime);
}

model GetAccountForAppHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetAccountForAppRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PACKAGE_NAME'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo'),
  payload?: {
    phone?: string(name='Phone', example='188*777'),
    originUuid?: string(name='originUuid', example='731D5F********DC3B'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id?: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.'),
}

model GetAccountForAppShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo', description='This parameter is required.'),
}

model GetAccountForAppResponseBody = {
  retCode?: int32(name='RetCode', example='0'),
  retMsg?: string(name='RetMsg'),
  retValue?: {
    isVip?: boolean(name='IsVip', example='true'),
    strVipExpire?: string(name='StrVipExpire', example='2022-05-12 15:22:18'),
    vipExpireAt?: long(name='VipExpireAt', example='1652340138347'),
  }(name='RetValue'),
}

model GetAccountForAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAccountForAppResponseBody(name='body'),
}

/**
 * @summary 获取会员信息
 *
 * @param tmpReq GetAccountForAppRequest
 * @param headers GetAccountForAppHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAccountForAppResponse
 */
@context("getAccountForAppWithContext")
async function getAccountForAppWithOptions(tmpReq: GetAccountForAppRequest, headers: GetAccountForAppHeaders, runtime: $RuntimeOptions): GetAccountForAppResponse {
  tmpReq.validate();
  var request = new GetAccountForAppShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!$isNull(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!$isNull(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!$isNull(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!$isNull(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetAccountForApp',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/vip/account/get`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取会员信息
 *
 * @param request GetAccountForAppRequest
 * @return GetAccountForAppResponse
 */
async function getAccountForApp(request: GetAccountForAppRequest): GetAccountForAppResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new GetAccountForAppHeaders{};
  return getAccountForAppWithOptions(request, headers, runtime);
}

model GetBusAppConfigHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetBusAppConfigRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='SKILL_ID'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo'),
  payload?: {
    originUuid?: string(name='originUuid', example='731D5F********DC3B'),
    phone?: string(name='phone', example='136****1111'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='SKILL_ID'),
    id?: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.'),
}

model GetBusAppConfigShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo', description='This parameter is required.'),
}

model GetBusAppConfigResponseBody = {
  retCode?: int32(name='RetCode', example='0'),
  retMsg?: string(name='RetMsg', example='请求异常'),
  retValue?: {
    cashier?: string(name='Cashier'),
    shoppingBar?: string(name='ShoppingBar', example='https://******.com/design/******?imageId=xxxxx'),
    shoppingWindow?: string(name='ShoppingWindow', example='https://******.com/design/******?imageId=xxxxx'),
    vipLabel?: string(name='VipLabel', example='https://******.com/design/******?imageId=xxxxx'),
  }(name='RetValue'),
}

model GetBusAppConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetBusAppConfigResponseBody(name='body'),
}

/**
 * @summary 获取应用配置
 *
 * @param tmpReq GetBusAppConfigRequest
 * @param headers GetBusAppConfigHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetBusAppConfigResponse
 */
@context("getBusAppConfigWithContext")
async function getBusAppConfigWithOptions(tmpReq: GetBusAppConfigRequest, headers: GetBusAppConfigHeaders, runtime: $RuntimeOptions): GetBusAppConfigResponse {
  tmpReq.validate();
  var request = new GetBusAppConfigShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!$isNull(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!$isNull(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!$isNull(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!$isNull(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetBusAppConfig',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/app/config/get`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取应用配置
 *
 * @param request GetBusAppConfigRequest
 * @return GetBusAppConfigResponse
 */
async function getBusAppConfig(request: GetBusAppConfigRequest): GetBusAppConfigResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new GetBusAppConfigHeaders{};
  return getBusAppConfigWithOptions(request, headers, runtime);
}

model GetPhoneNumberHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetPhoneNumberRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id?: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id?: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.'),
}

model GetPhoneNumberShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='This parameter is required.'),
  userInfoShrink?: string(name='UserInfo', description='This parameter is required.'),
}

model GetPhoneNumberResponseBody = {
  phoneNumber?: string(name='phoneNumber', example='137****'),
}

model GetPhoneNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhoneNumberResponseBody(name='body'),
}

/**
 * @summary 用户手机号获取
 *
 * @param tmpReq GetPhoneNumberRequest
 * @param headers GetPhoneNumberHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPhoneNumberResponse
 */
@context("getPhoneNumberWithContext")
async function getPhoneNumberWithOptions(tmpReq: GetPhoneNumberRequest, headers: GetPhoneNumberHeaders, runtime: $RuntimeOptions): GetPhoneNumberResponse {
  tmpReq.validate();
  var request = new GetPhoneNumberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!$isNull(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!$isNull(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetPhoneNumber',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/profile/phoneNumber`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 用户手机号获取
 *
 * @param request GetPhoneNumberRequest
 * @return GetPhoneNumberResponse
 */
async function getPhoneNumber(request: GetPhoneNumberRequest): GetPhoneNumberResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new GetPhoneNumberHeaders{};
  return getPhoneNumberWithOptions(request, headers, runtime);
}

model GetReminderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetReminderRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='SKILL_ID'),
    id?: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.'),
  payload?: {
    id?: long(name='Id', description='This parameter is required.', example='20****34'),
    isDebug?: boolean(name='IsDebug', description='This parameter is required.', example='true'),
  }(name='Payload', description='This parameter is required.'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='SKILL_ID'),
    id?: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.'),
}

model GetReminderShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='This parameter is required.'),
  payloadShrink?: string(name='Payload', description='This parameter is required.'),
  userInfoShrink?: string(name='UserInfo', description='This parameter is required.'),
}

model GetReminderResponseBody = {
  errorCode?: int32(name='ErrorCode', example='400'),
  errorMsg?: string(name='ErrorMsg', example='参数不合法。'),
  model?: {
    remindResponses?: [ 
      {
        actionTopic?: string(name='ActionTopic', example='宝宝快去刷牙'),
        dayDesc?: string(name='DayDesc', example='每天'),
        recurrenceRule?: {
          day?: int32(name='Day', example='27'),
          daysOfMonth?: [ int32 ](name='DaysOfMonth'),
          daysOfWeek?: [ int32 ](name='DaysOfWeek'),
          endDateTime?: string(name='EndDateTime', example='1661598000000'),
          freq?: string(name='Freq', example='WEEKLY'),
          hour?: int32(name='Hour', example='18'),
          minute?: int32(name='Minute', example='0'),
          month?: int32(name='Month', example='8'),
          second?: int32(name='Second', example='0'),
          startDateTime?: string(name='StartDateTime', example='1630054800000'),
          year?: int32(name='Year', example='2021'),
        }(name='RecurrenceRule'),
        remindId?: long(name='RemindId', example='20*****1'),
        remindTime?: string(name='RemindTime', example='1629850800000'),
        repeatCount?: int32(name='RepeatCount', example='1'),
        week?: string(name='Week', example='周三'),
      }
    ](name='RemindResponses'),
  }(name='Model'),
  success?: boolean(name='Success', example='true'),
}

model GetReminderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetReminderResponseBody(name='body'),
}

/**
 * @summary 查询提醒
 *
 * @param tmpReq GetReminderRequest
 * @param headers GetReminderHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetReminderResponse
 */
@context("getReminderWithContext")
async function getReminderWithOptions(tmpReq: GetReminderRequest, headers: GetReminderHeaders, runtime: $RuntimeOptions): GetReminderResponse {
  tmpReq.validate();
  var request = new GetReminderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!$isNull(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!$isNull(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!$isNull(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!$isNull(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetReminder',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/reminder/get`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询提醒
 *
 * @param request GetReminderRequest
 * @return GetReminderResponse
 */
async function getReminder(request: GetReminderRequest): GetReminderResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new GetReminderHeaders{};
  return getReminderWithOptions(request, headers, runtime);
}

model ListRemindersHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListRemindersRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id?: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.'),
  payload?: {
    isDebug?: boolean(name='IsDebug', description='This parameter is required.', example='true'),
  }(name='Payload', description='This parameter is required.'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id?: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.'),
}

model ListRemindersShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='This parameter is required.'),
  payloadShrink?: string(name='Payload', description='This parameter is required.'),
  userInfoShrink?: string(name='UserInfo', description='This parameter is required.'),
}

model ListRemindersResponseBody = {
  errorCode?: int32(name='ErrorCode', example='400'),
  errorMsg?: string(name='ErrorMsg', example='参数不合法。'),
  model?: {
    remindResponses?: [ 
      {
        actionTopic?: string(name='ActionTopic', example='宝宝快去刷牙'),
        dayDesc?: string(name='DayDesc', example='每天'),
        recurrenceRule?: {
          day?: int32(name='Day', example='27'),
          daysOfMonth?: [ int32 ](name='DaysOfMonth'),
          daysOfWeek?: [ int32 ](name='DaysOfWeek'),
          endDateTime?: string(name='EndDateTime', example='1661598000000'),
          freq?: string(name='Freq', example='WEEKLY'),
          hour?: int32(name='Hour', example='18'),
          minute?: int32(name='Minute', example='0'),
          month?: int32(name='Month', example='8'),
          second?: int32(name='Second', example='0'),
          startDateTime?: string(name='StartDateTime', example='1630054800000'),
          year?: int32(name='Year', example='2021'),
        }(name='RecurrenceRule'),
        remindId?: long(name='RemindId', example='20****1'),
        remindTime?: string(name='RemindTime', example='1629850800000'),
        repeatCount?: int32(name='RepeatCount', example='1'),
        week?: string(name='Week', example='周三'),
      }
    ](name='RemindResponses'),
  }(name='Model'),
  success?: boolean(name='Success', example='true'),
}

model ListRemindersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRemindersResponseBody(name='body'),
}

/**
 * @summary 查询提醒列表
 *
 * @param tmpReq ListRemindersRequest
 * @param headers ListRemindersHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRemindersResponse
 */
@context("listRemindersWithContext")
async function listRemindersWithOptions(tmpReq: ListRemindersRequest, headers: ListRemindersHeaders, runtime: $RuntimeOptions): ListRemindersResponse {
  tmpReq.validate();
  var request = new ListRemindersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!$isNull(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!$isNull(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!$isNull(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!$isNull(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListReminders',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/reminder/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询提醒列表
 *
 * @param request ListRemindersRequest
 * @return ListRemindersResponse
 */
async function listReminders(request: ListRemindersRequest): ListRemindersResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new ListRemindersHeaders{};
  return listRemindersWithOptions(request, headers, runtime);
}

model PullCashierHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model PullCashierRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PACKAGE_NAME'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo'),
  payload?: {
    originUuid?: string(name='originUuid', example='731D5F********DC3B'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id?: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.'),
}

model PullCashierShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo', description='This parameter is required.'),
}

model PullCashierResponseBody = {
  retCode?: int32(name='RetCode', example='0'),
  retMsg?: string(name='RetMsg'),
  retValue?: boolean(name='RetValue', example='true'),
}

model PullCashierResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PullCashierResponseBody(name='body'),
}

/**
 * @summary 拉取收银台
 *
 * @param tmpReq PullCashierRequest
 * @param headers PullCashierHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return PullCashierResponse
 */
@context("pullCashierWithContext")
async function pullCashierWithOptions(tmpReq: PullCashierRequest, headers: PullCashierHeaders, runtime: $RuntimeOptions): PullCashierResponse {
  tmpReq.validate();
  var request = new PullCashierShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!$isNull(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!$isNull(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any = {};
  if (!$isNull(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!$isNull(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!$isNull(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'PullCashier',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/pull/cashier/`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 拉取收银台
 *
 * @param request PullCashierRequest
 * @return PullCashierResponse
 */
async function pullCashier(request: PullCashierRequest): PullCashierResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new PullCashierHeaders{};
  return pullCashierWithOptions(request, headers, runtime);
}

model PushNotificationsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model PushNotificationsRequest {
  notificationUnicastRequest?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='apk包名'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    isDebug?: boolean(name='IsDebug', example='true'),
    messageTemplateId?: string(name='MessageTemplateId', description='This parameter is required.', example='2iU81*****G9elJ'),
    organizationId?: string(name='OrganizationId', example='2'),
    placeHolder?: map[string]string(name='PlaceHolder', example='{"nick":"张三"}'),
    sendTarget?: {
      targetIdentity?: string(name='TargetIdentity', example='2VpiDQ6aMjxz******Eo7r6e08oIVZ3fKrm5TyEfY='),
      targetType?: string(name='TargetType', example='DEVICE_OPEN_ID'),
    }(name='SendTarget', description='This parameter is required.'),
  }(name='NotificationUnicastRequest', description='This parameter is required.'),
  tenantInfo?: {
  }(name='TenantInfo'),
}

model PushNotificationsShrinkRequest {
  notificationUnicastRequestShrink?: string(name='NotificationUnicastRequest', description='This parameter is required.'),
  tenantInfoShrink?: string(name='TenantInfo'),
}

model PushNotificationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 猫精系统消息推送
 *
 * @param tmpReq PushNotificationsRequest
 * @param headers PushNotificationsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return PushNotificationsResponse
 */
@context("pushNotificationsWithContext")
async function pushNotificationsWithOptions(tmpReq: PushNotificationsRequest, headers: PushNotificationsHeaders, runtime: $RuntimeOptions): PushNotificationsResponse {
  tmpReq.validate();
  var request = new PushNotificationsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.notificationUnicastRequest)) {
    request.notificationUnicastRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notificationUnicastRequest, 'NotificationUnicastRequest', 'json');
  }
  if (!$isNull(tmpReq.tenantInfo)) {
    request.tenantInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantInfo, 'TenantInfo', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.notificationUnicastRequestShrink)) {
    body['NotificationUnicastRequest'] = request.notificationUnicastRequestShrink;
  }
  if (!$isNull(request.tenantInfoShrink)) {
    body['TenantInfo'] = request.tenantInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'PushNotifications',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/notifications`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 猫精系统消息推送
 *
 * @param request PushNotificationsRequest
 * @return PushNotificationsResponse
 */
async function pushNotifications(request: PushNotificationsRequest): PushNotificationsResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new PushNotificationsHeaders{};
  return pushNotificationsWithOptions(request, headers, runtime);
}

model SendNotificationsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model SendNotificationsRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id?: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.'),
  notificationUnicastRequest?: {
    isDebug?: boolean(name='IsDebug', example='false'),
    messageTemplateId?: string(name='MessageTemplateId', description='This parameter is required.', example='2iU81*****G9elJ'),
    placeHolder?: map[string]string(name='PlaceHolder', example='{"nick":"张三"}'),
    sendTarget?: {
    }(name='SendTarget', description='This parameter is required.'),
  }(name='NotificationUnicastRequest', description='This parameter is required.'),
  tenantInfo?: {
  }(name='TenantInfo'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id?: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.'),
}

model SendNotificationsShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='This parameter is required.'),
  notificationUnicastRequestShrink?: string(name='NotificationUnicastRequest', description='This parameter is required.'),
  tenantInfoShrink?: string(name='TenantInfo'),
  userInfoShrink?: string(name='UserInfo', description='This parameter is required.'),
}

model SendNotificationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 消息推送服务（普通版）
 *
 * @param tmpReq SendNotificationsRequest
 * @param headers SendNotificationsHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendNotificationsResponse
 */
@context("sendNotificationsWithContext")
async function sendNotificationsWithOptions(tmpReq: SendNotificationsRequest, headers: SendNotificationsHeaders, runtime: $RuntimeOptions): SendNotificationsResponse {
  tmpReq.validate();
  var request = new SendNotificationsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!$isNull(tmpReq.notificationUnicastRequest)) {
    request.notificationUnicastRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notificationUnicastRequest, 'NotificationUnicastRequest', 'json');
  }
  if (!$isNull(tmpReq.tenantInfo)) {
    request.tenantInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantInfo, 'TenantInfo', 'json');
  }
  if (!$isNull(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!$isNull(request.notificationUnicastRequestShrink)) {
    body['NotificationUnicastRequest'] = request.notificationUnicastRequestShrink;
  }
  if (!$isNull(request.tenantInfoShrink)) {
    body['TenantInfo'] = request.tenantInfoShrink;
  }
  if (!$isNull(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SendNotifications',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/general/notifications`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 消息推送服务（普通版）
 *
 * @param request SendNotificationsRequest
 * @return SendNotificationsResponse
 */
async function sendNotifications(request: SendNotificationsRequest): SendNotificationsResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new SendNotificationsHeaders{};
  return sendNotificationsWithOptions(request, headers, runtime);
}

model ThirdImmediateMsgPushHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ThirdImmediateMsgPushRequest {
  bizType?: string(name='BizType', example='FLIGHT'),
  changeDetail?: string(name='ChangeDetail', example='changeDetail'),
  orderId?: string(name='OrderId', example='orderId'),
  psgIds?: string(name='PsgIds', example='psgIds'),
  trafficChangeType?: string(name='TrafficChangeType', example='trafficChangeType'),
  trafficChangeTypeDesc?: string(name='TrafficChangeTypeDesc', example='trafficChangeTypeDesc'),
  trafficJourneyIds?: string(name='TrafficJourneyIds', example='trafficJourneyIds'),
  trafficSubOrderIds?: string(name='TrafficSubOrderIds', example='trafficSubOrderIds'),
  userId?: string(name='UserId', example='userId'),
}

model ThirdImmediateMsgPushResponseBody = {
  errorCode?: string(name='ErrorCode', example='500000000'),
  errorMsg?: string(name='ErrorMsg', example='服务器内部异常'),
  model?: {
    requestId?: string(name='RequestId', example='2DF6FEFE-3301-16DD-ABCC-968A9524920B'),
    success?: boolean(name='Success'),
  }(name='Model'),
  success?: boolean(name='Success'),
}

model ThirdImmediateMsgPushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ThirdImmediateMsgPushResponseBody(name='body'),
}

/**
 * @summary 三方即时信息数据变更事件推送
 *
 * @param request ThirdImmediateMsgPushRequest
 * @param headers ThirdImmediateMsgPushHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return ThirdImmediateMsgPushResponse
 */
@context("thirdImmediateMsgPushWithContext")
async function thirdImmediateMsgPushWithOptions(request: ThirdImmediateMsgPushRequest, headers: ThirdImmediateMsgPushHeaders, runtime: $RuntimeOptions): ThirdImmediateMsgPushResponse {
  request.validate();
  var query : map[string]any = {};
  if (!$isNull(request.bizType)) {
    query['BizType'] = request.bizType;
  }
  if (!$isNull(request.changeDetail)) {
    query['ChangeDetail'] = request.changeDetail;
  }
  if (!$isNull(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!$isNull(request.psgIds)) {
    query['PsgIds'] = request.psgIds;
  }
  if (!$isNull(request.trafficChangeType)) {
    query['TrafficChangeType'] = request.trafficChangeType;
  }
  if (!$isNull(request.trafficChangeTypeDesc)) {
    query['TrafficChangeTypeDesc'] = request.trafficChangeTypeDesc;
  }
  if (!$isNull(request.trafficJourneyIds)) {
    query['TrafficJourneyIds'] = request.trafficJourneyIds;
  }
  if (!$isNull(request.trafficSubOrderIds)) {
    query['TrafficSubOrderIds'] = request.trafficSubOrderIds;
  }
  if (!$isNull(request.userId)) {
    query['UserId'] = request.userId;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApiUtil.Params{
    action = 'ThirdImmediateMsgPush',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/thirdImmediateMsgPush`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 三方即时信息数据变更事件推送
 *
 * @param request ThirdImmediateMsgPushRequest
 * @return ThirdImmediateMsgPushResponse
 */
async function thirdImmediateMsgPush(request: ThirdImmediateMsgPushRequest): ThirdImmediateMsgPushResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new ThirdImmediateMsgPushHeaders{};
  return thirdImmediateMsgPushWithOptions(request, headers, runtime);
}

model UpdateReminderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateReminderRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id?: string(name='Id', description='This parameter is required.', example='DAFE****ce3ej='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo', description='This parameter is required.'),
  payload?: {
    content?: string(name='Content', description='This parameter is required.', example='更新提醒内容'),
    id?: long(name='Id', description='This parameter is required.', example='20***34'),
    isDebug?: boolean(name='IsDebug', description='This parameter is required.', example='true'),
    recurrenceRule?: {
      day?: int32(name='Day', example='25'),
      daysOfMonth?: [ int32 ](name='DaysOfMonth'),
      daysOfWeek?: [ int32 ](name='DaysOfWeek'),
      endDateTime?: long(name='EndDateTime', description='This parameter is required.', example='1635134700000'),
      freq?: string(name='Freq', description='This parameter is required.', example='ONCE'),
      hour?: int32(name='Hour', description='This parameter is required.', example='12'),
      minute?: int32(name='Minute', example='3'),
      month?: int32(name='Month', example='10'),
      second?: int32(name='Second', example='3'),
      startDateTime?: long(name='StartDateTime', description='This parameter is required.', example='1635134400000'),
      year?: int32(name='Year', example='2021'),
    }(name='RecurrenceRule', description='This parameter is required.'),
  }(name='Payload', description='This parameter is required.'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id?: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.'),
}

model UpdateReminderShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='This parameter is required.'),
  payloadShrink?: string(name='Payload', description='This parameter is required.'),
  userInfoShrink?: string(name='UserInfo', description='This parameter is required.'),
}

model UpdateReminderResponseBody = {
  errorCode?: int32(name='ErrorCode', example='400'),
  errorMsg?: string(name='ErrorMsg', example='不能设置过去的时间。'),
  model?: long(name='Model', example='20****1'),
  success?: boolean(name='Success', example='true'),
}

model UpdateReminderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateReminderResponseBody(name='body'),
}

/**
 * @summary 更新提醒
 *
 * @param tmpReq UpdateReminderRequest
 * @param headers UpdateReminderHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateReminderResponse
 */
@context("updateReminderWithContext")
async function updateReminderWithOptions(tmpReq: UpdateReminderRequest, headers: UpdateReminderHeaders, runtime: $RuntimeOptions): UpdateReminderResponse {
  tmpReq.validate();
  var request = new UpdateReminderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!$isNull(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!$isNull(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!$isNull(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!$isNull(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateReminder',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/reminder/update`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新提醒
 *
 * @param request UpdateReminderRequest
 * @return UpdateReminderResponse
 */
async function updateReminder(request: UpdateReminderRequest): UpdateReminderResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new UpdateReminderHeaders{};
  return updateReminderWithOptions(request, headers, runtime);
}

model VideoAppReportHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model VideoAppReportRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', example='12**45'),
    encodeType?: string(name='EncodeType', example='PACKAGE_NAME'),
    id?: string(name='Id', example='DAFE****ce3ej='),
    idType?: string(name='IdType', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='DeviceInfo'),
  payload?: {
    endTime?: long(name='endTime', description='This parameter is required.', example='1652337963097'),
    isLogin?: boolean(name='isLogin', description='This parameter is required.', example='true'),
    isVip?: boolean(name='isVip', description='This parameter is required.', example='true'),
    loginNick?: string(name='loginNick', example='test'),
    originUuid?: string(name='originUuid', example='731D5F********DC3B'),
    phone?: string(name='phone', example='188*777'),
    pkgName?: string(name='pkgName', description='This parameter is required.', example='com.***.test'),
    startTime?: long(name='startTime', description='This parameter is required.', example='1652337963097'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='12**45'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    id?: string(name='Id', description='This parameter is required.', example='HOFF****my7Iw='),
    idType?: string(name='IdType', description='This parameter is required.', example='OPEN_ID'),
    organizationId?: string(name='OrganizationId', example='1**2'),
  }(name='UserInfo', description='This parameter is required.'),
}

model VideoAppReportShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo', description='This parameter is required.'),
}

model VideoAppReportResponseBody = {
  retCode?: int32(name='RetCode', example='0'),
  retMsg?: string(name='RetMsg'),
  retValue?: boolean(name='RetValue', example='true'),
}

model VideoAppReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: VideoAppReportResponseBody(name='body'),
}

/**
 * @summary 视频类应用会员信息上报
 *
 * @param tmpReq VideoAppReportRequest
 * @param headers VideoAppReportHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return VideoAppReportResponse
 */
@context("videoAppReportWithContext")
async function videoAppReportWithOptions(tmpReq: VideoAppReportRequest, headers: VideoAppReportHeaders, runtime: $RuntimeOptions): VideoAppReportResponse {
  tmpReq.validate();
  var request = new VideoAppReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!$isNull(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!$isNull(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!$isNull(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!$isNull(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'VideoAppReport',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/vip/use/video/report`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 视频类应用会员信息上报
 *
 * @param request VideoAppReportRequest
 * @return VideoAppReportResponse
 */
async function videoAppReport(request: VideoAppReportRequest): VideoAppReportResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new VideoAppReportHeaders{};
  return videoAppReportWithOptions(request, headers, runtime);
}

model WakeUpAppHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model WakeUpAppRequest {
  isDebug?: boolean(name='IsDebug', example='true'),
  path?: string(name='Path', description='This parameter is required.', example='应用拉起路径'),
  targetInfo?: {
    encodeKey?: string(name='EncodeKey', description='This parameter is required.', example='apk包名'),
    encodeType?: string(name='EncodeType', description='This parameter is required.', example='PACKAGE_NAME'),
    organizationId?: string(name='OrganizationId', example='11'),
    targetIdentity?: string(name='TargetIdentity', description='This parameter is required.', example='2VpiDQ6aMjxz******Eo7r6e08oIVZ3fKrm5TyEfY='),
    targetType?: string(name='TargetType', description='This parameter is required.', example='DEVICE_OPEN_ID'),
  }(name='TargetInfo', description='This parameter is required.'),
}

model WakeUpAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 猫精应用唤起
 *
 * @param request WakeUpAppRequest
 * @param headers WakeUpAppHeaders
 * @param runtime runtime options for this request RuntimeOptions
 * @return WakeUpAppResponse
 */
@context("wakeUpAppWithContext")
async function wakeUpAppWithOptions(request: WakeUpAppRequest, headers: WakeUpAppHeaders, runtime: $RuntimeOptions): WakeUpAppResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.isDebug)) {
    body['IsDebug'] = request.isDebug;
  }
  if (!$isNull(request.path)) {
    body['Path'] = request.path;
  }
  if (!$isNull(request.targetInfo)) {
    body['TargetInfo'] = request.targetInfo;
  }

  var realHeaders : map[string]string = {};
  if (!$isNull(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!$isNull(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = $string(headers.xAcsAligenieAccessToken);
  }
  if (!$isNull(headers.authorization)) {
    realHeaders['Authorization'] = $string(headers.authorization);
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'WakeUpApp',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/wakeup`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 猫精应用唤起
 *
 * @param request WakeUpAppRequest
 * @return WakeUpAppResponse
 */
async function wakeUpApp(request: WakeUpAppRequest): WakeUpAppResponse {
  var runtime = new $RuntimeOptions{};
  var headers = new WakeUpAppHeaders{};
  return wakeUpAppWithOptions(request, headers, runtime);
}

