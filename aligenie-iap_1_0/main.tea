/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aligenie', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AppUseTimeReportHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model AppUseTimeReportRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的设备标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='设备标识（deviceOpenId或deviceUnionId）'),
    idType?: string(name='IdType', description='设备Id的类型  - OPEN_ID：默认的设备ID标识 - UNION_ID: 组织维度的设备ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='DeviceInfo', description='设备标识信息'),
  payload?: {
    action?: string(name='Action', description='操作'),
    isPrivilege?: int32(name='IsPrivilege', description='是否会员专享权益：1-是  0-否'),
    resourceId?: string(name='ResourceId', description='资源id'),
    resourceType?: int32(name='ResourceType', description='resourceType'),
    stepCode?: string(name='StepCode', description='步进码'),
    vipType?: int32(name='VipType', description='会员类型'),
    originUuid?: string(name='originUuid'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的用户标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='用户标识（userOpenId或userUnionId）'),
    idType?: string(name='IdType', description='用户Id的类型  - OPEN_ID：默认的用户ID标识 - UNION_ID: 组织维度的用户ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='UserInfo', description='用户标识信息'),
}

model AppUseTimeReportShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='设备标识信息'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo', description='用户标识信息'),
}

model AppUseTimeReportResponseBody = {
  retCode?: int32(name='RetCode'),
  retMsg?: string(name='RetMsg'),
  retValue?: boolean(name='RetValue'),
}

model AppUseTimeReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AppUseTimeReportResponseBody(name='body'),
}

async function appUseTimeReport(request: AppUseTimeReportRequest): AppUseTimeReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new AppUseTimeReportHeaders{};
  return appUseTimeReportWithOptions(request, headers, runtime);
}

async function appUseTimeReportWithOptions(tmpReq: AppUseTimeReportRequest, headers: AppUseTimeReportHeaders, runtime: Util.RuntimeOptions): AppUseTimeReportResponse {
  Util.validateModel(tmpReq);
  var request = new AppUseTimeReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AppUseTimeReport',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/vip/use/time/report`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateReminderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model CreateReminderRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的设备标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='设备标识（deviceOpenId或deviceUnionId）'),
    idType?: string(name='IdType', description='设备Id的类型 - OPEN_ID：默认的设备ID标识 - UNION_ID: 组织维度的设备ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='DeviceInfo', description='设备标识信息'),
  payload?: {
    content?: string(name='Content', description='提醒内容'),
    isDebug?: boolean(name='IsDebug', description='调试标识'),
    recurrenceRule?: {
      day?: int32(name='Day', description='触发时间的日'),
      daysOfMonth?: [ int32 ](name='DaysOfMonth', description='月循环相关，表示每月的几号的集合,数值范围为1-31'),
      daysOfWeek?: [ int32 ](name='DaysOfWeek', description='周循环相关，表示每周几触发，数值范围为1-7'),
      endDateTime?: long(name='EndDateTime', description='结束时间，时间戳毫秒'),
      freq?: string(name='Freq', description='循环类型:支持单次ONCE、每天DAILY、每周WEEKLY、每月MONTHLY'),
      hour?: int32(name='Hour', description='触发时间的时'),
      minute?: int32(name='Minute', description='触发时间的分'),
      month?: int32(name='Month', description='触发时间的月'),
      second?: int32(name='Second', description='触发时间的秒'),
      startDateTime?: long(name='StartDateTime', description='开始时间，时间戳毫秒'),
      year?: int32(name='Year', description='触发时间的年'),
    }(name='RecurrenceRule', description='提醒调度信息'),
  }(name='Payload', description='服务请求入参'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的用户标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='用户标识（userOpenId或userUnionId）'),
    idType?: string(name='IdType', description='用户Id的类型 - OPEN_ID：默认的用户ID标识 - UNION_ID: 组织维度的用户ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='UserInfo', description='用户标识信息'),
}

model CreateReminderShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='设备标识信息'),
  payloadShrink?: string(name='Payload', description='服务请求入参'),
  userInfoShrink?: string(name='UserInfo', description='用户标识信息'),
}

model CreateReminderResponseBody = {
  errorCode?: string(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  model?: long(name='Model', description='创建的提醒id'),
  success?: boolean(name='Success', description='服务成功标识'),
}

model CreateReminderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateReminderResponseBody(name='body'),
}

async function createReminder(request: CreateReminderRequest): CreateReminderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new CreateReminderHeaders{};
  return createReminderWithOptions(request, headers, runtime);
}

async function createReminderWithOptions(tmpReq: CreateReminderRequest, headers: CreateReminderHeaders, runtime: Util.RuntimeOptions): CreateReminderResponse {
  Util.validateModel(tmpReq);
  var request = new CreateReminderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateReminder',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/reminder/create`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteReminderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model DeleteReminderRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的设备标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='设备标识（deviceOpenId或deviceUnionId）'),
    idType?: string(name='IdType', description='设备Id的类型 - OPEN_ID：默认的设备ID标识 - UNION_ID: 组织维度的设备ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='DeviceInfo', description='设备标识信息'),
  payload?: {
    id?: long(name='Id', description='提醒的唯一id'),
    isDebug?: boolean(name='IsDebug', description='调试标识'),
  }(name='Payload', description='服务请求入参'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的用户标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='用户标识（userOpenId或userUnionId）'),
    idType?: string(name='IdType', description='用户Id的类型 - OPEN_ID：默认的用户ID标识 - UNION_ID: 组织维度的用户ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='UserInfo', description='用户标识信息'),
}

model DeleteReminderShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='设备标识信息'),
  payloadShrink?: string(name='Payload', description='服务请求入参'),
  userInfoShrink?: string(name='UserInfo', description='用户标识信息'),
}

model DeleteReminderResponseBody = {
  errorCode?: int32(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  success?: boolean(name='Success', description='服务成功标识'),
}

model DeleteReminderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteReminderResponseBody(name='body'),
}

async function deleteReminder(request: DeleteReminderRequest): DeleteReminderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new DeleteReminderHeaders{};
  return deleteReminderWithOptions(request, headers, runtime);
}

async function deleteReminderWithOptions(tmpReq: DeleteReminderRequest, headers: DeleteReminderHeaders, runtime: Util.RuntimeOptions): DeleteReminderResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteReminderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteReminder',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/reminder/delete`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetAccountForAppHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetAccountForAppRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的设备标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='设备标识（deviceOpenId或deviceUnionId）'),
    idType?: string(name='IdType', description='设备Id的类型 - OPEN_ID：默认的设备ID标识 - UNION_ID: 组织维度的设备ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='DeviceInfo', description='设备标识信息'),
  payload?: {
    phone?: string(name='Phone'),
    originUuid?: string(name='originUuid'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的用户标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='用户标识（userOpenId或userUnionId）'),
    idType?: string(name='IdType', description='用户Id的类型 - OPEN_ID：默认的用户ID标识 - UNION_ID: 组织维度的用户ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='UserInfo', description='用户标识信息'),
}

model GetAccountForAppShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='设备标识信息'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo', description='用户标识信息'),
}

model GetAccountForAppResponseBody = {
  retCode?: int32(name='RetCode', description='错误码'),
  retMsg?: string(name='RetMsg', description='错误信息'),
  retValue?: {
    isVip?: boolean(name='IsVip', description='是否VIP'),
    strVipExpire?: string(name='StrVipExpire', description='日期格式，到期时间'),
    vipExpireAt?: long(name='VipExpireAt', description='若以前开通过会员，返回会员失效时间，若从未开通过会员，此字段为0'),
  }(name='RetValue', description='用户信息'),
}

model GetAccountForAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccountForAppResponseBody(name='body'),
}

async function getAccountForApp(request: GetAccountForAppRequest): GetAccountForAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetAccountForAppHeaders{};
  return getAccountForAppWithOptions(request, headers, runtime);
}

async function getAccountForAppWithOptions(tmpReq: GetAccountForAppRequest, headers: GetAccountForAppHeaders, runtime: Util.RuntimeOptions): GetAccountForAppResponse {
  Util.validateModel(tmpReq);
  var request = new GetAccountForAppShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccountForApp',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/vip/account/get`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetPhoneNumberHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetPhoneNumberRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的设备标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='设备标识（deviceOpenId或deviceUnionId）'),
    idType?: string(name='IdType', description='设备Id的类型  - OPEN_ID：默认的设备ID标识 - UNION_ID: 组织维度的设备ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='DeviceInfo', description='设备标识信息'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的用户标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='用户标识（userOpenId或userUnionId）'),
    idType?: string(name='IdType', description='用户Id的类型  - OPEN_ID：默认的用户ID标识 - UNION_ID: 组织维度的用户ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='UserInfo', description='用户标识信息'),
}

model GetPhoneNumberShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='设备标识信息'),
  userInfoShrink?: string(name='UserInfo', description='用户标识信息'),
}

model GetPhoneNumberResponseBody = {
  phoneNumber?: string(name='phoneNumber', description='用户手机号'),
}

model GetPhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPhoneNumberResponseBody(name='body'),
}

async function getPhoneNumber(request: GetPhoneNumberRequest): GetPhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetPhoneNumberHeaders{};
  return getPhoneNumberWithOptions(request, headers, runtime);
}

async function getPhoneNumberWithOptions(tmpReq: GetPhoneNumberRequest, headers: GetPhoneNumberHeaders, runtime: Util.RuntimeOptions): GetPhoneNumberResponse {
  Util.validateModel(tmpReq);
  var request = new GetPhoneNumberShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPhoneNumber',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/profile/phoneNumber`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetReminderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model GetReminderRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的设备标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='设备标识（deviceOpenId或deviceUnionId）'),
    idType?: string(name='IdType', description='设备Id的类型 - OPEN_ID：默认的设备ID标识 - UNION_ID: 组织维度的设备ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='DeviceInfo', description='设备标识信息'),
  payload?: {
    id?: long(name='Id', description='提醒的唯一id'),
    isDebug?: boolean(name='IsDebug', description='调试标识'),
  }(name='Payload', description='服务请求入参'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的用户标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='用户标识（userOpenId或userUnionId）'),
    idType?: string(name='IdType', description='用户Id的类型 - OPEN_ID：默认的用户ID标识 - UNION_ID: 组织维度的用户ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='UserInfo', description='用户标识信息'),
}

model GetReminderShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='设备标识信息'),
  payloadShrink?: string(name='Payload', description='服务请求入参'),
  userInfoShrink?: string(name='UserInfo', description='用户标识信息'),
}

model GetReminderResponseBody = {
  errorCode?: int32(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  model?: {
    remindResponses?: [ 
      {
        actionTopic?: string(name='ActionTopic', description='执行动作topic'),
        dayDesc?: string(name='DayDesc', description='触发条件描述'),
        recurrenceRule?: {
          day?: int32(name='Day', description='天'),
          daysOfMonth?: [ int32 ](name='DaysOfMonth', description='月的第几天 可用作月循环'),
          daysOfWeek?: [ int32 ](name='DaysOfWeek', description='周循环字段，取值范围：1-7'),
          endDateTime?: string(name='EndDateTime', description='调度结束时间'),
          freq?: string(name='Freq', description='调度类型'),
          hour?: int32(name='Hour', description='小时'),
          minute?: int32(name='Minute', description='分'),
          month?: int32(name='Month', description='月'),
          second?: int32(name='Second', description='秒'),
          startDateTime?: string(name='StartDateTime', description='调度开始时间'),
          year?: int32(name='Year', description='年'),
        }(name='RecurrenceRule', description='调度信息'),
        remindId?: long(name='RemindId', description='提醒id'),
        remindTime?: string(name='RemindTime', description='下次提醒时间'),
        repeatCount?: int32(name='RepeatCount', description='重复次数'),
        week?: string(name='Week', description='触发为周几'),
      }
    ](name='RemindResponses', description='提醒信息'),
  }(name='Model', description='提醒信息'),
  success?: boolean(name='Success', description='服务成功标识'),
}

model GetReminderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetReminderResponseBody(name='body'),
}

async function getReminder(request: GetReminderRequest): GetReminderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new GetReminderHeaders{};
  return getReminderWithOptions(request, headers, runtime);
}

async function getReminderWithOptions(tmpReq: GetReminderRequest, headers: GetReminderHeaders, runtime: Util.RuntimeOptions): GetReminderResponse {
  Util.validateModel(tmpReq);
  var request = new GetReminderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetReminder',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/reminder/get`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListRemindersHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model ListRemindersRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的设备标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='设备标识（deviceOpenId或deviceUnionId）'),
    idType?: string(name='IdType', description='设备Id的类型 - OPEN_ID：默认的设备ID标识 - UNION_ID: 组织维度的设备ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='DeviceInfo', description='设备标识信息'),
  payload?: {
    isDebug?: boolean(name='IsDebug', description='调试标识'),
  }(name='Payload', description='服务请求入参'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的用户标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='用户标识（userOpenId或userUnionId）'),
    idType?: string(name='IdType', description='用户Id的类型 - OPEN_ID：默认的用户ID标识 - UNION_ID: 组织维度的用户ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='UserInfo', description='用户标识信息'),
}

model ListRemindersShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='设备标识信息'),
  payloadShrink?: string(name='Payload', description='服务请求入参'),
  userInfoShrink?: string(name='UserInfo', description='用户标识信息'),
}

model ListRemindersResponseBody = {
  errorCode?: int32(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  model?: {
    remindResponses?: [ 
      {
        actionTopic?: string(name='ActionTopic', description='执行动作topic'),
        dayDesc?: string(name='DayDesc', description='触发条件描述'),
        recurrenceRule?: {
          day?: int32(name='Day', description='天'),
          daysOfMonth?: [ int32 ](name='DaysOfMonth', description='月的第几天 可用作月循环'),
          daysOfWeek?: [ int32 ](name='DaysOfWeek', description='周循环字段，取值范围：1-7'),
          endDateTime?: string(name='EndDateTime', description='调度结束时间'),
          freq?: string(name='Freq', description='调度类型'),
          hour?: int32(name='Hour', description='小时'),
          minute?: int32(name='Minute', description='分'),
          month?: int32(name='Month', description='月'),
          second?: int32(name='Second', description='秒'),
          startDateTime?: string(name='StartDateTime', description='调度开始时间'),
          year?: int32(name='Year', description='年'),
        }(name='RecurrenceRule', description='调度信息'),
        remindId?: long(name='RemindId', description='提醒id'),
        remindTime?: string(name='RemindTime', description='下次提醒时间'),
        repeatCount?: int32(name='RepeatCount', description='重复次数'),
        week?: string(name='Week', description='触发为周几'),
      }
    ](name='RemindResponses', description='提醒信息'),
  }(name='Model', description='提醒信息'),
  success?: boolean(name='Success', description='服务成功标识'),
}

model ListRemindersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListRemindersResponseBody(name='body'),
}

async function listReminders(request: ListRemindersRequest): ListRemindersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new ListRemindersHeaders{};
  return listRemindersWithOptions(request, headers, runtime);
}

async function listRemindersWithOptions(tmpReq: ListRemindersRequest, headers: ListRemindersHeaders, runtime: Util.RuntimeOptions): ListRemindersResponse {
  Util.validateModel(tmpReq);
  var request = new ListRemindersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListReminders',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/reminder/list`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PullCashierHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model PullCashierRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的设备标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='设备标识（deviceOpenId或deviceUnionId）'),
    idType?: string(name='IdType', description='设备Id的类型 - OPEN_ID：默认的设备ID标识 - UNION_ID: 组织维度的设备ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='DeviceInfo', description='设备标识信息'),
  payload?: {
    originUuid?: string(name='originUuid'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的用户标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='用户标识（userOpenId或userUnionId）'),
    idType?: string(name='IdType', description='用户Id的类型  - OPEN_ID：默认的用户ID标识 - UNION_ID: 组织维度的用户ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='UserInfo', description='用户标识信息'),
}

model PullCashierShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='设备标识信息'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo', description='用户标识信息'),
}

model PullCashierResponseBody = {
  retCode?: int32(name='RetCode', description='错误吗'),
  retMsg?: string(name='RetMsg', description='错误信息'),
  retValue?: boolean(name='RetValue'),
}

model PullCashierResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PullCashierResponseBody(name='body'),
}

async function pullCashier(request: PullCashierRequest): PullCashierResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PullCashierHeaders{};
  return pullCashierWithOptions(request, headers, runtime);
}

async function pullCashierWithOptions(tmpReq: PullCashierRequest, headers: PullCashierHeaders, runtime: Util.RuntimeOptions): PullCashierResponse {
  Util.validateModel(tmpReq);
  var request = new PullCashierShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var query : map[string]any= {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    query['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    query['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PullCashier',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/pull/cashier/`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model PushNotificationsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model PushNotificationsRequest {
  notificationUnicastRequest?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，例如：编码类型是SKILLID，其值就为webhook服务中得到的skillId；编码类似是PACKAGENAME，其值就为对应客户端app的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的设备标识的途径有多种，不同途径对应不同的编码类型： PACKAGE_NAME：apk包名 SKILL_ID：技能id'),
    isDebug?: boolean(name='IsDebug', description='调试标识'),
    messageTemplateId?: string(name='MessageTemplateId', description='消息模板，在天猫精灵应用平台中申请消息模板时得到的模板id。'),
    organizationId?: string(name='OrganizationId', description='组织标识，推送类型是XX_UNION_XX时才需要配。当存在多种途径获取猫精设备或用户标识且又需要能互通的情况下需要找平台申请组织，申请通过后由平台分配得到。'),
    placeHolder?: map[string]string(name='PlaceHolder', description='占位符信息，例如：模板是【你好，{nick}！】这里可以是：{"nick":"小甜甜"}'),
    sendTarget?: {
      targetIdentity?: string(name='TargetIdentity', description='推送目标类型对应的标识值。'),
      targetType?: string(name='TargetType', description='推送的目标类型，获取到对应设备或用户标识时的类型 - DEVICE_UNION_ID：设备unionId - DEVICE_OPEN_ID：设备openId - USER_UNION_ID：用户unionId - USER_OPEN_ID：用户openId'),
    }(name='SendTarget', description='消息推送的目标信息。'),
  }(name='NotificationUnicastRequest', description='消息推送入参对象。'),
  tenantInfo?: {
  }(name='TenantInfo', description='身份信息。'),
}

model PushNotificationsShrinkRequest {
  notificationUnicastRequestShrink?: string(name='NotificationUnicastRequest', description='消息推送入参对象。'),
  tenantInfoShrink?: string(name='TenantInfo', description='身份信息。'),
}

model PushNotificationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function pushNotifications(request: PushNotificationsRequest): PushNotificationsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new PushNotificationsHeaders{};
  return pushNotificationsWithOptions(request, headers, runtime);
}

async function pushNotificationsWithOptions(tmpReq: PushNotificationsRequest, headers: PushNotificationsHeaders, runtime: Util.RuntimeOptions): PushNotificationsResponse {
  Util.validateModel(tmpReq);
  var request = new PushNotificationsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.notificationUnicastRequest)) {
    request.notificationUnicastRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notificationUnicastRequest, 'NotificationUnicastRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantInfo)) {
    request.tenantInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantInfo, 'TenantInfo', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.notificationUnicastRequestShrink)) {
    body['NotificationUnicastRequest'] = request.notificationUnicastRequestShrink;
  }
  if (!Util.isUnset(request.tenantInfoShrink)) {
    body['TenantInfo'] = request.tenantInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PushNotifications',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/notifications`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

model SendNotificationsHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model SendNotificationsRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的设备标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='设备标识（deviceOpenId或deviceUnionId）'),
    idType?: string(name='IdType', description='设备Id的类型 - OPEN_ID：默认的设备ID标识 - UNION_ID: 组织维度的设备ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='DeviceInfo', description='设备标识信息'),
  notificationUnicastRequest?: {
    isDebug?: boolean(name='IsDebug', description='调试标识'),
    messageTemplateId?: string(name='MessageTemplateId', description='消息模板，在天猫精灵应用平台中申请消息模板时得到的模板id。'),
    placeHolder?: map[string]string(name='PlaceHolder', description='占位符信息，例如：模板是【你好，{nick}！】这里可以是：{"nick":"小甜甜"}'),
    sendTarget?: {
    }(name='SendTarget', description='消息推送的目标信息。'),
  }(name='NotificationUnicastRequest', description='消息推送入参对象。'),
  tenantInfo?: {
  }(name='TenantInfo', description='身份信息。'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的用户标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='用户标识（userOpenId或userUnionId）'),
    idType?: string(name='IdType', description='用户Id的类型 - OPEN_ID：默认的用户ID标识 - UNION_ID: 组织维度的用户ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='UserInfo', description='用户标识信息'),
}

model SendNotificationsShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='设备标识信息'),
  notificationUnicastRequestShrink?: string(name='NotificationUnicastRequest', description='消息推送入参对象。'),
  tenantInfoShrink?: string(name='TenantInfo', description='身份信息。'),
  userInfoShrink?: string(name='UserInfo', description='用户标识信息'),
}

model SendNotificationsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function sendNotifications(request: SendNotificationsRequest): SendNotificationsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new SendNotificationsHeaders{};
  return sendNotificationsWithOptions(request, headers, runtime);
}

async function sendNotificationsWithOptions(tmpReq: SendNotificationsRequest, headers: SendNotificationsHeaders, runtime: Util.RuntimeOptions): SendNotificationsResponse {
  Util.validateModel(tmpReq);
  var request = new SendNotificationsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.notificationUnicastRequest)) {
    request.notificationUnicastRequestShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.notificationUnicastRequest, 'NotificationUnicastRequest', 'json');
  }
  if (!Util.isUnset(tmpReq.tenantInfo)) {
    request.tenantInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantInfo, 'TenantInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.notificationUnicastRequestShrink)) {
    body['NotificationUnicastRequest'] = request.notificationUnicastRequestShrink;
  }
  if (!Util.isUnset(request.tenantInfoShrink)) {
    body['TenantInfo'] = request.tenantInfoShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendNotifications',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/general/notifications`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

model UpdateReminderHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model UpdateReminderRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的设备标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='设备标识（deviceOpenId或deviceUnionId）'),
    idType?: string(name='IdType', description='设备Id的类型 - OPEN_ID：默认的设备ID标识 - UNION_ID: 组织维度的设备ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='DeviceInfo', description='设备标识信息'),
  payload?: {
    content?: string(name='Content', description='提醒内容'),
    id?: long(name='Id', description='提醒id'),
    isDebug?: boolean(name='IsDebug', description='调试标识'),
    recurrenceRule?: {
      day?: int32(name='Day', description='触发时间的日'),
      daysOfMonth?: [ int32 ](name='DaysOfMonth', description='月循环相关，表示每月的几号的集合,数值范围为1-31'),
      daysOfWeek?: [ int32 ](name='DaysOfWeek', description='周循环相关，表示每周几触发，数值范围为1-7'),
      endDateTime?: long(name='EndDateTime', description='结束时间，时间戳，毫秒'),
      freq?: string(name='Freq', description='循环类型:支持单次ONCE、每天DAILY、每周WEEKLY、每月MONTHLY'),
      hour?: int32(name='Hour', description='触发时间的时'),
      minute?: int32(name='Minute', description='触发时间的分'),
      month?: int32(name='Month', description='触发时间的月'),
      second?: int32(name='Second', description='触发时间的秒'),
      startDateTime?: long(name='StartDateTime', description='开始时间，时间戳，毫秒'),
      year?: int32(name='Year', description='触发时间的年'),
    }(name='RecurrenceRule', description='提醒调度信息'),
  }(name='Payload', description='服务请求入参'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的用户标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='用户标识（userOpenId或userUnionId）'),
    idType?: string(name='IdType', description='用户Id的类型 - OPEN_ID：默认的用户ID标识 - UNION_ID: 组织维度的用户ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='UserInfo', description='用户标识信息'),
}

model UpdateReminderShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='设备标识信息'),
  payloadShrink?: string(name='Payload', description='服务请求入参'),
  userInfoShrink?: string(name='UserInfo', description='用户标识信息'),
}

model UpdateReminderResponseBody = {
  errorCode?: int32(name='ErrorCode', description='错误码'),
  errorMsg?: string(name='ErrorMsg', description='错误信息'),
  model?: long(name='Model', description='更新提醒的id'),
  success?: boolean(name='Success', description='服务成功标识'),
}

model UpdateReminderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateReminderResponseBody(name='body'),
}

async function updateReminder(request: UpdateReminderRequest): UpdateReminderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new UpdateReminderHeaders{};
  return updateReminderWithOptions(request, headers, runtime);
}

async function updateReminderWithOptions(tmpReq: UpdateReminderRequest, headers: UpdateReminderHeaders, runtime: Util.RuntimeOptions): UpdateReminderResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateReminderShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateReminder',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/reminder/update`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model VideoAppReportHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model VideoAppReportRequest {
  deviceInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的设备标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='设备标识（deviceOpenId或deviceUnionId）'),
    idType?: string(name='IdType', description='设备Id的类型  - OPEN_ID：默认的设备ID标识 - UNION_ID: 组织维度的设备ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='DeviceInfo', description='设备标识信息'),
  payload?: {
    endTime?: long(name='endTime'),
    isLogin?: boolean(name='isLogin'),
    isVip?: boolean(name='isVip'),
    loginNick?: string(name='loginNick'),
    originUuid?: string(name='originUuid'),
    phone?: string(name='phone'),
    pkgName?: string(name='pkgName'),
    startTime?: long(name='startTime'),
  }(name='Payload'),
  userInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，编码类型是SKILL_ID时，其值为应用的Skill ID； 编码类型是PACKAGE_NAME时，其值为对应客户端App的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的用户标识的途径有多种，不同途径对应不同的编码类型 - PACKAGE_NAME：apk包名，Android应用客户链路的编码类型 - SKILL_ID：技能ID，云端链路的编码类型'),
    id?: string(name='Id', description='用户标识（userOpenId或userUnionId）'),
    idType?: string(name='IdType', description='用户Id的类型  - OPEN_ID：默认的用户ID标识 - UNION_ID: 组织维度的用户ID标识，在猫精技能应用开放平台申请过组织后才会有'),
    organizationId?: string(name='OrganizationId', description='组织ID，如果IdType为UNION_ID时必填'),
  }(name='UserInfo', description='用户标识信息'),
}

model VideoAppReportShrinkRequest {
  deviceInfoShrink?: string(name='DeviceInfo', description='设备标识信息'),
  payloadShrink?: string(name='Payload'),
  userInfoShrink?: string(name='UserInfo', description='用户标识信息'),
}

model VideoAppReportResponseBody = {
  retCode?: int32(name='RetCode'),
  retMsg?: string(name='RetMsg'),
  retValue?: boolean(name='RetValue'),
}

model VideoAppReportResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: VideoAppReportResponseBody(name='body'),
}

async function videoAppReport(request: VideoAppReportRequest): VideoAppReportResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new VideoAppReportHeaders{};
  return videoAppReportWithOptions(request, headers, runtime);
}

async function videoAppReportWithOptions(tmpReq: VideoAppReportRequest, headers: VideoAppReportHeaders, runtime: Util.RuntimeOptions): VideoAppReportResponse {
  Util.validateModel(tmpReq);
  var request = new VideoAppReportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.deviceInfo)) {
    request.deviceInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.deviceInfo, 'DeviceInfo', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.userInfo)) {
    request.userInfoShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.userInfo, 'UserInfo', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.deviceInfoShrink)) {
    body['DeviceInfo'] = request.deviceInfoShrink;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    body['Payload'] = request.payloadShrink;
  }
  if (!Util.isUnset(request.userInfoShrink)) {
    body['UserInfo'] = request.userInfoShrink;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'VideoAppReport',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/vip/use/video/report`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model WakeUpAppHeaders {
  commonHeaders?: map[string]string,
  xAcsAligenieAccessToken?: string(name='x-acs-aligenie-access-token'),
  authorization?: string(name='Authorization'),
}

model WakeUpAppRequest {
  isDebug?: boolean(name='IsDebug', description='是否调试'),
  path?: string(name='Path', description='应用拉起路径，类似在技能应用控制台中填的唤起链接。'),
  targetInfo?: {
    encodeKey?: string(name='EncodeKey', description='编码类型对应的值，例如：编码类型是SKILLID，其值就为webhook服务中得到的skillId；编码类似是PACKAGENAME，其值就为对应客户端app的packageName。'),
    encodeType?: string(name='EncodeType', description='编码类型，获取猫精的设备标识的途径有多种，不同途径对应不同的编码类型：  PACKAGE_NAME：apk包名 SKILL_ID：技能id'),
    organizationId?: string(name='OrganizationId', description='组织标识，推送类型是XX_UNION_XX时才需要配。当存在多种途径获取猫精设备标识且又需要能互通的情况下需要找平台申请组织，申请通过后由平台分配得到。'),
    targetIdentity?: string(name='TargetIdentity', description='推送目标类型对应的标识值'),
    targetType?: string(name='TargetType', description='推送目标类型，获取到对应设备标识时的类型  DEVICE_UNION_ID：设备unionId； DEVICE_OPEN_ID：设备openId'),
  }(name='TargetInfo', description='要拉起的目标设备信息。'),
}

model WakeUpAppResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
}

async function wakeUpApp(request: WakeUpAppRequest): WakeUpAppResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers = new WakeUpAppHeaders{};
  return wakeUpAppWithOptions(request, headers, runtime);
}

async function wakeUpAppWithOptions(request: WakeUpAppRequest, headers: WakeUpAppHeaders, runtime: Util.RuntimeOptions): WakeUpAppResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.isDebug)) {
    body['IsDebug'] = request.isDebug;
  }
  if (!Util.isUnset(request.path)) {
    body['Path'] = request.path;
  }
  if (!Util.isUnset(request.targetInfo)) {
    body['TargetInfo'] = request.targetInfo;
  }

  var realHeaders : map[string]string = {};
  if (!Util.isUnset(headers.commonHeaders)) {
    realHeaders = headers.commonHeaders;
  }
  if (!Util.isUnset(headers.xAcsAligenieAccessToken)) {
    realHeaders['x-acs-aligenie-access-token'] = Util.toJSONString(headers.xAcsAligenieAccessToken);
  }
  if (!Util.isUnset(headers.authorization)) {
    realHeaders['Authorization'] = Util.toJSONString(headers.authorization);
  }
  var req = new OpenApi.OpenApiRequest{ 
    headers = realHeaders,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'WakeUpApp',
    version = 'iap_1.0',
    protocol = 'HTTPS',
    pathname = `/v1.0/iap/wakeup`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

