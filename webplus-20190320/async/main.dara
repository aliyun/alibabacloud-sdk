/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'WebPlus';
  @version = '2019-03-20';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-beijing = 'webplus.cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou = 'webplus.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'webplus.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'webplus.cn-hangzhou.aliyuncs.com',
    ap-northeast-1 = 'webplus.aliyuncs.com',
    ap-south-1 = 'webplus.aliyuncs.com',
    ap-southeast-1 = 'webplus.aliyuncs.com',
    ap-southeast-2 = 'webplus.aliyuncs.com',
    ap-southeast-3 = 'webplus.aliyuncs.com',
    ap-southeast-5 = 'webplus.aliyuncs.com',
    cn-chengdu = 'webplus.aliyuncs.com',
    cn-hongkong = 'webplus-vpc.cn-hongkong.aliyuncs.com',
    cn-huhehaote = 'webplus.aliyuncs.com',
    cn-qingdao = 'webplus.aliyuncs.com',
    eu-central-1 = 'webplus.aliyuncs.com',
    eu-west-1 = 'webplus.aliyuncs.com',
    me-east-1 = 'webplus.aliyuncs.com',
    us-east-1 = 'webplus.aliyuncs.com',
    us-west-1 = 'webplus.aliyuncs.com',
    cn-hangzhou-finance = 'webplus.aliyuncs.com',
    cn-shenzhen-finance-1 = 'webplus.aliyuncs.com',
    cn-shanghai-finance-1 = 'webplus.aliyuncs.com',
    cn-north-2-gov-1 = 'webplus.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AbortChangeRequest {
  changeId?: string(name='ChangeId', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
}

model AbortChangeResponseBody = {
  code?: string(name='Code'),
  envChange?: {
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    startTime?: string(name='StartTime'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model AbortChangeResponse = {
  headers: map[string]string(name='headers'),
  body: AbortChangeResponseBody(name='body'),
}

async function abortChange(request: AbortChangeRequest): AbortChangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AbortChange', 'POST', '/pop/v1/wam/change/abort', 'json', true, 'form', request);
}

model CreateAppEnvRequest {
  appId?: string(name='AppId', position='Body'),
  dryRun?: boolean(name='DryRun', position='Body'),
  envDescription?: string(name='EnvDescription', position='Body'),
  envName?: string(name='EnvName', position='Body'),
  extraProperties?: string(name='ExtraProperties', position='Body'),
  optionSettings?: string(name='OptionSettings', position='Body'),
  pkgVersionId?: string(name='PkgVersionId', position='Body'),
  profileName?: string(name='ProfileName', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
  sourceEnvId?: string(name='SourceEnvId', position='Body'),
  stackId?: string(name='StackId', position='Body'),
  templateId?: string(name='TemplateId', position='Body'),
}

model CreateAppEnvResponseBody = {
  code?: string(name='Code'),
  envChangeDetail?: {
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    operations?: {
      operation?: [ 
      {
        operationDescription?: string(name='OperationDescription'),
        operationType?: string(name='OperationType'),
      }
    ](name='Operation')
    }(name='Operations'),
    startTime?: string(name='StartTime'),
  }(name='EnvChangeDetail'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppEnvResponseBody(name='body'),
}

async function createAppEnv(request: CreateAppEnvRequest): CreateAppEnvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAppEnv', 'POST', '/pop/v1/wam/appEnv', 'json', true, 'form', request);
}

model CreateApplicationRequest {
  appDescription?: string(name='AppDescription', position='Body'),
  appName?: string(name='AppName', position='Body'),
  categoryName?: string(name='CategoryName', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
  usingSharedStorage?: boolean(name='UsingSharedStorage', position='Body'),
}

model CreateApplicationResponseBody = {
  application?: {
    appDescription?: string(name='AppDescription'),
    appId?: string(name='AppId'),
    appName?: string(name='AppName'),
    categoryName?: string(name='CategoryName'),
    createTime?: long(name='CreateTime'),
    createUsername?: string(name='CreateUsername'),
    updateTime?: long(name='UpdateTime'),
    updateUsername?: string(name='UpdateUsername'),
    usingSharedStorage?: boolean(name='UsingSharedStorage'),
  }(name='Application'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateApplication', 'POST', '/pop/v1/wam/application', 'json', true, 'form', request);
}

model CreateConfigTemplateRequest {
  appId?: string(name='AppId', position='Body'),
  optionSettings?: string(name='OptionSettings', position='Body'),
  pkgVersionId?: string(name='PkgVersionId', position='Body'),
  profileName?: string(name='ProfileName', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
  sourceEnvId?: string(name='SourceEnvId', position='Body'),
  sourceTemplateId?: string(name='SourceTemplateId', position='Body'),
  stackId?: string(name='StackId', position='Body'),
  templateDescription?: string(name='TemplateDescription', position='Body'),
  templateName?: string(name='TemplateName', position='Body'),
}

model CreateConfigTemplateResponseBody = {
  code?: string(name='Code'),
  configTemplate?: {
    appId?: string(name='AppId'),
    appName?: string(name='AppName'),
    createTime?: long(name='CreateTime'),
    pkgVersionId?: string(name='PkgVersionId'),
    pkgVersionLabel?: string(name='PkgVersionLabel'),
    stackId?: string(name='StackId'),
    stackName?: string(name='StackName'),
    templateDescription?: string(name='TemplateDescription'),
    templateId?: string(name='TemplateId'),
    templateName?: string(name='TemplateName'),
    templateType?: string(name='TemplateType'),
    updateTime?: long(name='UpdateTime'),
  }(name='ConfigTemplate'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateConfigTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConfigTemplateResponseBody(name='body'),
}

async function createConfigTemplate(request: CreateConfigTemplateRequest): CreateConfigTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConfigTemplate', 'POST', '/pop/v1/wam/configTemplate', 'json', true, 'form', request);
}

model CreateOrderRequest {
  productName?: string(name='ProductName', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
}

model CreateOrderResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  orderDetail?: {
    code?: string(name='Code'),
    data?: string(name='Data'),
    message?: string(name='Message'),
    requestId?: string(name='RequestId'),
    success?: boolean(name='Success'),
  }(name='OrderDetail'),
  requestId?: string(name='RequestId'),
}

model CreateOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrderResponseBody(name='body'),
}

async function createOrder(request: CreateOrderRequest): CreateOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateOrder', 'POST', '/pop/v1/paas/createOrder', 'json', true, 'form', request);
}

model CreatePkgVersionRequest {
  appId?: string(name='AppId', position='Body'),
  packageSource?: string(name='PackageSource', position='Body'),
  pkgVersionDescription?: string(name='PkgVersionDescription', position='Body'),
  pkgVersionLabel?: string(name='PkgVersionLabel', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
}

model CreatePkgVersionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pkgVersion?: {
    appId?: string(name='AppId'),
    appName?: string(name='AppName'),
    createTime?: long(name='CreateTime'),
    packageSource?: string(name='PackageSource'),
    pkgVersionDescription?: string(name='PkgVersionDescription'),
    pkgVersionId?: string(name='PkgVersionId'),
    pkgVersionLabel?: string(name='PkgVersionLabel'),
    updateTime?: long(name='UpdateTime'),
  }(name='PkgVersion'),
  requestId?: string(name='RequestId'),
}

model CreatePkgVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePkgVersionResponseBody(name='body'),
}

async function createPkgVersion(request: CreatePkgVersionRequest): CreatePkgVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePkgVersion', 'POST', '/pop/v1/wam/pkgVersion', 'json', true, 'form', request);
}

model CreateStorageRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model CreateStorageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  storage?: {
    bucketName?: string(name='BucketName'),
    createTime?: long(name='CreateTime'),
    updateTime?: long(name='UpdateTime'),
  }(name='Storage'),
}

model CreateStorageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStorageResponseBody(name='body'),
}

async function createStorage(request: CreateStorageRequest): CreateStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateStorage', 'POST', '/pop/v1/wam/storage', 'json', false, 'json', request);
}

model DeleteAppEnvRequest {
  envId: string(name='EnvId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteAppEnvResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAppEnvResponseBody(name='body'),
}

async function deleteAppEnv(request: DeleteAppEnvRequest): DeleteAppEnvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAppEnv', 'DELETE', '/pop/v1/wam/appEnv', 'json', false, 'json', request);
}

model DeleteApplicationRequest {
  appId: string(name='AppId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteApplicationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApplicationResponseBody(name='body'),
}

async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteApplication', 'DELETE', '/pop/v1/wam/application', 'json', false, 'json', request);
}

model DeleteChangeRequest {
  changeId: string(name='ChangeId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeleteChangeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteChangeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteChangeResponseBody(name='body'),
}

async function deleteChange(request: DeleteChangeRequest): DeleteChangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteChange', 'DELETE', '/pop/v1/wam/change', 'json', false, 'json', request);
}

model DeleteConfigTemplateRequest {
  regionId?: string(name='RegionId', position='Query'),
  templateId: string(name='TemplateId', position='Query'),
}

model DeleteConfigTemplateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteConfigTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConfigTemplateResponseBody(name='body'),
}

async function deleteConfigTemplate(request: DeleteConfigTemplateRequest): DeleteConfigTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConfigTemplate', 'DELETE', '/pop/v1/wam/configTemplate', 'json', false, 'json', request);
}

model DeletePkgVersionRequest {
  pkgVersionId: string(name='PkgVersionId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeletePkgVersionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeletePkgVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePkgVersionResponseBody(name='body'),
}

async function deletePkgVersion(request: DeletePkgVersionRequest): DeletePkgVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePkgVersion', 'DELETE', '/pop/v1/wam/pkgVersion', 'json', false, 'json', request);
}

model DeployAppEnvRequest {
  batchInterval?: int32(name='BatchInterval', position='Body'),
  batchPercent?: int32(name='BatchPercent', position='Body'),
  batchSize?: int32(name='BatchSize', position='Body'),
  envId?: string(name='EnvId', position='Body'),
  pauseBetweenBatches?: boolean(name='PauseBetweenBatches', position='Body'),
  pkgVersionId?: string(name='PkgVersionId', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
}

model DeployAppEnvResponseBody = {
  code?: string(name='Code'),
  envChange?: {
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    startTime?: string(name='StartTime'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeployAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: DeployAppEnvResponseBody(name='body'),
}

async function deployAppEnv(request: DeployAppEnvRequest): DeployAppEnvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeployAppEnv', 'POST', '/pop/v1/wam/appEnv/deploy', 'json', true, 'form', request);
}

model DescribeAppEnvInstanceHealthRequest {
  envId: string(name='EnvId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeAppEnvInstanceHealthResponseBody = {
  code?: string(name='Code'),
  envInstanceHealth?: {
    enableHealthCheck?: boolean(name='EnableHealthCheck'),
    envId?: string(name='EnvId'),
    envName?: string(name='EnvName'),
    instanceHealthList?: {
      instanceHealth?: [ 
      {
        agentStatus?: string(name='AgentStatus'),
        appStatus?: string(name='AppStatus'),
        disconnectedTime?: string(name='DisconnectedTime'),
        instanceId?: string(name='InstanceId'),
      }
    ](name='InstanceHealth')
    }(name='InstanceHealthList'),
  }(name='EnvInstanceHealth'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeAppEnvInstanceHealthResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppEnvInstanceHealthResponseBody(name='body'),
}

async function describeAppEnvInstanceHealth(request: DescribeAppEnvInstanceHealthRequest): DescribeAppEnvInstanceHealthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeAppEnvInstanceHealth', 'GET', '/pop/v1/wam/appEnv/instanceHealth', 'json', false, 'json', request);
}

model DescribeAppEnvStatusRequest {
  envId: string(name='EnvId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeAppEnvStatusResponseBody = {
  code?: string(name='Code'),
  envStatus?: {
    abortingChange?: boolean(name='AbortingChange'),
    applyingChange?: boolean(name='ApplyingChange'),
    changeBanner?: string(name='ChangeBanner'),
    envId?: string(name='EnvId'),
    envName?: string(name='EnvName'),
    envStatus?: string(name='EnvStatus'),
    instanceAgentStatus?: {
      connectedInstances?: int32(name='ConnectedInstances'),
      disconnectedInstances?: int32(name='DisconnectedInstances'),
    }(name='InstanceAgentStatus'),
    instanceAppStatus?: {
      healthyInstances?: int32(name='HealthyInstances'),
      stoppedInstances?: int32(name='StoppedInstances'),
      unhealthyInstances?: int32(name='UnhealthyInstances'),
      unknownInstances?: int32(name='UnknownInstances'),
    }(name='InstanceAppStatus'),
    lastEnvStatus?: string(name='LastEnvStatus'),
    latestChangeId?: string(name='LatestChangeId'),
  }(name='EnvStatus'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeAppEnvStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppEnvStatusResponseBody(name='body'),
}

async function describeAppEnvStatus(request: DescribeAppEnvStatusRequest): DescribeAppEnvStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeAppEnvStatus', 'GET', '/pop/v1/wam/appEnv/status', 'json', false, 'json', request);
}

model DescribeAppEnvsRequest {
  appId?: string(name='AppId', position='Query'),
  envId?: string(name='EnvId', position='Query'),
  envName?: string(name='EnvName', position='Query'),
  envSearch?: string(name='EnvSearch', position='Query'),
  includeTerminated?: boolean(name='IncludeTerminated', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  recentUpdated?: boolean(name='RecentUpdated', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  stackSearch?: string(name='StackSearch', position='Query'),
}

model DescribeAppEnvsResponseBody = {
  appEnvs?: {
    appEnv?: [ 
    {
      abortingChange?: boolean(name='AbortingChange'),
      appId?: string(name='AppId'),
      appName?: string(name='AppName'),
      applyingChange?: boolean(name='ApplyingChange'),
      categoryName?: string(name='CategoryName'),
      changeBanner?: string(name='ChangeBanner'),
      createTime?: long(name='CreateTime'),
      createUsername?: string(name='CreateUsername'),
      dataRoot?: string(name='DataRoot'),
      envDescription?: string(name='EnvDescription'),
      envId?: string(name='EnvId'),
      envName?: string(name='EnvName'),
      envStatus?: string(name='EnvStatus'),
      envType?: string(name='EnvType'),
      lastEnvStatus?: string(name='LastEnvStatus'),
      latestChangeId?: string(name='LatestChangeId'),
      logBase?: string(name='LogBase'),
      pkgVersionId?: string(name='PkgVersionId'),
      pkgVersionLabel?: string(name='PkgVersionLabel'),
      pkgVersionStorageKey?: string(name='PkgVersionStorageKey'),
      stackId?: string(name='StackId'),
      stackName?: string(name='StackName'),
      storageBase?: string(name='StorageBase'),
      totalInstances?: long(name='TotalInstances'),
      updateTime?: long(name='UpdateTime'),
      updateUsername?: string(name='UpdateUsername'),
      usingSharedStorage?: boolean(name='UsingSharedStorage'),
    }
  ](name='AppEnv')
  }(name='AppEnvs'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeAppEnvsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppEnvsResponseBody(name='body'),
}

async function describeAppEnvs(request: DescribeAppEnvsRequest): DescribeAppEnvsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeAppEnvs', 'GET', '/pop/v1/wam/appEnv', 'json', false, 'json', request);
}

model DescribeApplicationsRequest {
  appId?: string(name='AppId', position='Query'),
  appName?: string(name='AppName', position='Query'),
  appSearch?: string(name='AppSearch', position='Query'),
  categorySearch?: string(name='CategorySearch', position='Query'),
  envSearch?: string(name='EnvSearch', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  stackSearch?: string(name='StackSearch', position='Query'),
}

model DescribeApplicationsResponseBody = {
  applications?: {
    application?: [ 
    {
      appDescription?: string(name='AppDescription'),
      appId?: string(name='AppId'),
      appName?: string(name='AppName'),
      categoryName?: string(name='CategoryName'),
      createTime?: long(name='CreateTime'),
      createUsername?: string(name='CreateUsername'),
      runningEnvs?: int32(name='RunningEnvs'),
      terminatedEnvs?: int32(name='TerminatedEnvs'),
      totalEnvs?: int32(name='TotalEnvs'),
      updateTime?: long(name='UpdateTime'),
      updateUsername?: string(name='UpdateUsername'),
      usingSharedStorage?: string(name='UsingSharedStorage'),
    }
  ](name='Application')
  }(name='Applications'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeApplicationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApplicationsResponseBody(name='body'),
}

async function describeApplications(request: DescribeApplicationsRequest): DescribeApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeApplications', 'GET', '/pop/v1/wam/application', 'json', false, 'json', request);
}

model DescribeCategoriesRequest {
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeCategoriesResponseBody = {
  categories?: {
    category?: [ 
    {
      categoryDescription?: string(name='CategoryDescription'),
      categoryId?: string(name='CategoryId'),
      categoryLogo?: string(name='CategoryLogo'),
      categoryName?: string(name='CategoryName'),
      createTime?: string(name='CreateTime'),
      demoProjects?: {
        demoProject?: [ 
        {
          packageDownloadUrl?: string(name='PackageDownloadUrl'),
          packageUrl?: string(name='PackageUrl'),
          regionId?: string(name='RegionId'),
          sourceUrl?: string(name='SourceUrl'),
        }
      ](name='DemoProject')
      }(name='DemoProjects'),
      updateTime?: string(name='UpdateTime'),
    }
  ](name='Category')
  }(name='Categories'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCategoriesResponseBody(name='body'),
}

async function describeCategories(request: DescribeCategoriesRequest): DescribeCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeCategories', 'GET', '/pop/v1/wam/category', 'json', false, 'json', request);
}

model DescribeChangeRequest {
  changeId?: string(name='ChangeId', position='Query'),
  envId?: string(name='EnvId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeChangeResponseBody = {
  change?: {
    actionName?: string(name='ActionName'),
    changeAborted?: boolean(name='ChangeAborted'),
    changeDescription?: string(name='ChangeDescription'),
    changeFinished?: boolean(name='ChangeFinished'),
    changeId?: string(name='ChangeId'),
    changeMessage?: string(name='ChangeMessage'),
    changeName?: string(name='ChangeName'),
    changePaused?: boolean(name='ChangePaused'),
    changeSucceed?: boolean(name='ChangeSucceed'),
    changeTimedout?: boolean(name='ChangeTimedout'),
    createTime?: long(name='CreateTime'),
    createUsername?: string(name='CreateUsername'),
    envId?: string(name='EnvId'),
    finishTime?: long(name='FinishTime'),
    updateTime?: long(name='UpdateTime'),
  }(name='Change'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeChangeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeChangeResponseBody(name='body'),
}

async function describeChange(request: DescribeChangeRequest): DescribeChangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeChange', 'GET', '/pop/v1/wam/changeInfo', 'json', false, 'json', request);
}

model DescribeChangesRequest {
  actionName?: string(name='ActionName', position='Query'),
  envId?: string(name='EnvId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeChangesResponseBody = {
  changes?: {
    change?: [ 
    {
      actionName?: string(name='ActionName'),
      changeAborted?: boolean(name='ChangeAborted'),
      changeDescription?: string(name='ChangeDescription'),
      changeFinished?: boolean(name='ChangeFinished'),
      changeId?: string(name='ChangeId'),
      changeMessage?: string(name='ChangeMessage'),
      changeName?: string(name='ChangeName'),
      changePaused?: boolean(name='ChangePaused'),
      changeSucceed?: boolean(name='ChangeSucceed'),
      changeTimedout?: boolean(name='ChangeTimedout'),
      createTime?: long(name='CreateTime'),
      createUsername?: string(name='CreateUsername'),
      envId?: string(name='EnvId'),
      finishTime?: long(name='FinishTime'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='Change')
  }(name='Changes'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeChangesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeChangesResponseBody(name='body'),
}

async function describeChanges(request: DescribeChangesRequest): DescribeChangesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeChanges', 'GET', '/pop/v1/wam/change', 'json', false, 'json', request);
}

model DescribeConfigIndexRequest {
  envId?: string(name='EnvId', position='Query'),
  profileName?: string(name='ProfileName', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  stackId?: string(name='StackId', position='Query'),
  templateId?: string(name='TemplateId', position='Query'),
}

model DescribeConfigIndexResponseBody = {
  code?: string(name='Code'),
  configGroups?: {
    configGroup?: [ 
    {
      configPaths?: {
        configPath?: [ 
        {
          configOptions?: {
            configOption?: [ 
            {
              changeSeverity?: string(name='ChangeSeverity'),
              defaultValue?: string(name='DefaultValue'),
              editorType?: string(name='EditorType'),
              hiddenOption?: boolean(name='HiddenOption'),
              maxLength?: int32(name='MaxLength'),
              maxValue?: long(name='MaxValue'),
              minLength?: int32(name='MinLength'),
              minValue?: long(name='MinValue'),
              optionDescription?: string(name='OptionDescription'),
              optionLabel?: string(name='OptionLabel'),
              optionName?: string(name='OptionName'),
              pathName?: string(name='PathName'),
              readonlyOption?: boolean(name='ReadonlyOption'),
              regexDesc?: string(name='RegexDesc'),
              regexPattern?: string(name='RegexPattern'),
              valueOptions?: string(name='ValueOptions'),
              valueType?: string(name='ValueType'),
            }
          ](name='ConfigOption')
          }(name='ConfigOptions'),
          hiddenPath?: boolean(name='HiddenPath'),
          pathLabel?: string(name='PathLabel'),
          pathName?: string(name='PathName'),
        }
      ](name='ConfigPath')
      }(name='ConfigPaths'),
      groupLabel?: string(name='GroupLabel'),
      groupName?: string(name='GroupName'),
    }
  ](name='ConfigGroup')
  }(name='ConfigGroups'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  stackId?: string(name='StackId'),
  stackName?: string(name='StackName'),
}

model DescribeConfigIndexResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigIndexResponseBody(name='body'),
}

async function describeConfigIndex(request: DescribeConfigIndexRequest): DescribeConfigIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeConfigIndex', 'GET', '/pop/v1/wam/config/configIndex', 'json', false, 'json', request);
}

model DescribeConfigOptionsRequest {
  envId?: string(name='EnvId', position='Query'),
  profileName?: string(name='ProfileName', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  stackId?: string(name='StackId', position='Query'),
}

model DescribeConfigOptionsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  stackConfigOption?: {
    configOptions?: {
      configOption?: [ 
      {
        changeSeverity?: string(name='ChangeSeverity'),
        defaultValue?: string(name='DefaultValue'),
        editorType?: string(name='EditorType'),
        hiddenOption?: boolean(name='HiddenOption'),
        maxLength?: int32(name='MaxLength'),
        maxValue?: long(name='MaxValue'),
        minLength?: int32(name='MinLength'),
        minValue?: long(name='MinValue'),
        optionDescription?: string(name='OptionDescription'),
        optionLabel?: string(name='OptionLabel'),
        optionName?: string(name='OptionName'),
        pathName?: string(name='PathName'),
        readonlyOption?: boolean(name='ReadonlyOption'),
        regexDesc?: string(name='RegexDesc'),
        regexPattern?: string(name='RegexPattern'),
        valueOptions?: string(name='ValueOptions'),
        valueType?: string(name='ValueType'),
      }
    ](name='ConfigOption')
    }(name='ConfigOptions'),
    stackId?: string(name='StackId'),
    stackName?: string(name='StackName'),
  }(name='StackConfigOption'),
}

model DescribeConfigOptionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigOptionsResponseBody(name='body'),
}

async function describeConfigOptions(request: DescribeConfigOptionsRequest): DescribeConfigOptionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeConfigOptions', 'GET', '/pop/v1/wam/config/configOption', 'json', false, 'json', request);
}

model DescribeConfigSettingsRequest {
  envId?: string(name='EnvId', position='Query'),
  optionName?: string(name='OptionName', position='Query'),
  pathName?: string(name='PathName', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  templateId?: string(name='TemplateId', position='Query'),
}

model DescribeConfigSettingsResponseBody = {
  code?: string(name='Code'),
  configSettings?: {
    configSetting?: [ 
    {
      optionName?: string(name='OptionName'),
      pathName?: string(name='PathName'),
      settingValue?: string(name='SettingValue'),
    }
  ](name='ConfigSetting')
  }(name='ConfigSettings'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeConfigSettingsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigSettingsResponseBody(name='body'),
}

async function describeConfigSettings(request: DescribeConfigSettingsRequest): DescribeConfigSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeConfigSettings', 'GET', '/pop/v1/wam/config/configSetting', 'json', false, 'json', request);
}

model DescribeConfigTemplatesRequest {
  appId: string(name='AppId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  templateName?: string(name='TemplateName', position='Query'),
  templateSearch?: string(name='TemplateSearch', position='Query'),
}

model DescribeConfigTemplatesResponseBody = {
  code?: string(name='Code'),
  configTemplates?: {
    configTemplate?: [ 
    {
      appId?: string(name='AppId'),
      appName?: string(name='AppName'),
      createTime?: long(name='CreateTime'),
      pkgVersionId?: string(name='PkgVersionId'),
      pkgVersionLabel?: string(name='PkgVersionLabel'),
      stackId?: string(name='StackId'),
      stackName?: string(name='StackName'),
      templateDescription?: string(name='TemplateDescription'),
      templateId?: string(name='TemplateId'),
      templateName?: string(name='TemplateName'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='ConfigTemplate')
  }(name='ConfigTemplates'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeConfigTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigTemplatesResponseBody(name='body'),
}

async function describeConfigTemplates(request: DescribeConfigTemplatesRequest): DescribeConfigTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeConfigTemplates', 'GET', '/pop/v1/wam/configTemplate', 'json', false, 'json', request);
}

model DescribeEnvResourceRequest {
  envId: string(name='EnvId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeEnvResourceResponseBody = {
  code?: string(name='Code'),
  envResource?: {
    defaultSecurityGroups?: {
      securityGroup?: [ 
      {
        id?: string(name='Id'),
      }
    ](name='SecurityGroup')
    }(name='DefaultSecurityGroups'),
    domains?: {
      domain?: [ 
      {
        domainName?: string(name='DomainName'),
        hostedBy?: string(name='HostedBy'),
        isDefault?: boolean(name='IsDefault'),
        managedBy?: string(name='ManagedBy'),
        subDomain?: string(name='SubDomain'),
      }
    ](name='Domain')
    }(name='Domains'),
    envId?: string(name='EnvId'),
    envName?: string(name='EnvName'),
    instances?: {
      instance?: [ 
      {
        id?: string(name='Id'),
        imported?: boolean(name='Imported'),
      }
    ](name='Instance')
    }(name='Instances'),
    launchConfigurationId?: string(name='LaunchConfigurationId'),
    launchTemplateId?: string(name='LaunchTemplateId'),
    loadBalancers?: {
      loadBalancer?: [ 
      {
        addressType?: string(name='AddressType'),
        id?: string(name='Id'),
        imported?: boolean(name='Imported'),
        listeners?: {
          listener?: [ 
          {
            port?: int32(name='Port'),
            protocol?: string(name='Protocol'),
          }
        ](name='Listener')
        }(name='Listeners'),
        port?: int32(name='Port'),
        protocol?: string(name='Protocol'),
      }
    ](name='LoadBalancer')
    }(name='LoadBalancers'),
    monitorGroup?: {
      id?: string(name='Id'),
    }(name='MonitorGroup'),
    rdsInstances?: {
      rdsInstance?: [ 
      {
        accountName?: string(name='AccountName'),
        databaseName?: string(name='DatabaseName'),
        id?: string(name='Id'),
        imported?: boolean(name='Imported'),
      }
    ](name='RdsInstance')
    }(name='RdsInstances'),
    scalingGroup?: {
      id?: string(name='Id'),
    }(name='ScalingGroup'),
    vSwitches?: {
      vSwitch?: [ 
      {
        id?: string(name='Id'),
      }
    ](name='VSwitch')
    }(name='VSwitches'),
    vpc?: {
      id?: string(name='Id'),
    }(name='Vpc'),
  }(name='EnvResource'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeEnvResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnvResourceResponseBody(name='body'),
}

async function describeEnvResource(request: DescribeEnvResourceRequest): DescribeEnvResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeEnvResource', 'GET', '/pop/v1/wam/envResource', 'json', false, 'json', request);
}

model DescribeEventsRequest {
  changeId?: string(name='ChangeId', position='Query'),
  endTime?: long(name='EndTime', position='Query'),
  envId?: string(name='EnvId', position='Query'),
  lastChangeEvents?: boolean(name='LastChangeEvents', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  reverseByTimestamp?: boolean(name='ReverseByTimestamp', position='Query'),
  startTime?: long(name='StartTime', position='Query'),
}

model DescribeEventsResponseBody = {
  code?: string(name='Code'),
  events?: {
    event?: [ 
    {
      appId?: string(name='AppId'),
      envId?: string(name='EnvId'),
      enventName?: string(name='EnventName'),
      eventId?: string(name='EventId'),
      eventLevel?: string(name='EventLevel'),
      eventMessage?: string(name='EventMessage'),
      eventTimestamp?: long(name='EventTimestamp'),
      msgCode?: string(name='MsgCode'),
      msgParams?: {
        msgParam?: [ string ](name='MsgParam')
      }(name='MsgParams'),
      objectAttrs?: {
        objectAttr?: [ 
        {
          attributeName?: string(name='AttributeName'),
          attributeValue?: string(name='AttributeValue'),
        }
      ](name='ObjectAttr')
      }(name='ObjectAttrs'),
      objectId?: string(name='ObjectId'),
      objectName?: string(name='ObjectName'),
      objectType?: string(name='ObjectType'),
      primaryUserId?: string(name='PrimaryUserId'),
      primaryUserName?: string(name='PrimaryUserName'),
      secondUserId?: string(name='SecondUserId'),
      secondUserName?: string(name='SecondUserName'),
      traceId?: string(name='TraceId'),
    }
  ](name='Event')
  }(name='Events'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventsResponseBody(name='body'),
}

async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeEvents', 'GET', '/pop/v1/wam/event', 'json', false, 'json', request);
}

model DescribeGatherLogResultRequest {
  changeId?: string(name='ChangeId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeGatherLogResultResponseBody = {
  code?: string(name='Code'),
  gatherLogResult?: {
    change?: {
      actionName?: string(name='ActionName'),
      changeAborted?: boolean(name='ChangeAborted'),
      changeDescription?: string(name='ChangeDescription'),
      changeFinished?: boolean(name='ChangeFinished'),
      changeId?: string(name='ChangeId'),
      changeMessage?: string(name='ChangeMessage'),
      changeName?: string(name='ChangeName'),
      changePaused?: boolean(name='ChangePaused'),
      changeSucceeded?: boolean(name='ChangeSucceeded'),
      changeTimedout?: boolean(name='ChangeTimedout'),
      createTime?: long(name='CreateTime'),
      createUsername?: string(name='CreateUsername'),
      envId?: string(name='EnvId'),
      finishTime?: long(name='FinishTime'),
      updateTime?: long(name='UpdateTime'),
    }(name='Change'),
    instanceResults?: {
      instanceResult?: [ 
      {
        instanceId?: string(name='InstanceId'),
        storageKey?: string(name='StorageKey'),
        taskMessage?: string(name='TaskMessage'),
        taskSucceeded?: boolean(name='TaskSucceeded'),
      }
    ](name='InstanceResult')
    }(name='InstanceResults'),
    logPath?: string(name='LogPath'),
  }(name='GatherLogResult'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeGatherLogResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGatherLogResultResponseBody(name='body'),
}

async function describeGatherLogResult(request: DescribeGatherLogResultRequest): DescribeGatherLogResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeGatherLogResult', 'GET', '/pop/v1/wam/appEnv/gatherLog', 'json', false, 'json', request);
}

model DescribeGatherStatsResultRequest {
  changeId?: string(name='ChangeId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeGatherStatsResultResponseBody = {
  code?: string(name='Code'),
  gatherStatsResult?: {
    change?: {
      actionName?: string(name='ActionName'),
      changeAborted?: boolean(name='ChangeAborted'),
      changeDescription?: string(name='ChangeDescription'),
      changeFinished?: boolean(name='ChangeFinished'),
      changeId?: string(name='ChangeId'),
      changeMessage?: string(name='ChangeMessage'),
      changeName?: string(name='ChangeName'),
      changePaused?: boolean(name='ChangePaused'),
      changeSucceeded?: boolean(name='ChangeSucceeded'),
      changeTimedout?: boolean(name='ChangeTimedout'),
      createTime?: long(name='CreateTime'),
      createUsername?: string(name='CreateUsername'),
      envId?: string(name='EnvId'),
      finishTime?: long(name='FinishTime'),
      updateTime?: long(name='UpdateTime'),
    }(name='Change'),
    instanceResults?: {
      instanceResult?: [ 
      {
        instanceId?: string(name='InstanceId'),
        storageKey?: string(name='StorageKey'),
        taskMessage?: string(name='TaskMessage'),
        taskSucceeded?: boolean(name='TaskSucceeded'),
      }
    ](name='InstanceResult')
    }(name='InstanceResults'),
  }(name='GatherStatsResult'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeGatherStatsResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGatherStatsResultResponseBody(name='body'),
}

async function describeGatherStatsResult(request: DescribeGatherStatsResultRequest): DescribeGatherStatsResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeGatherStatsResult', 'GET', '/pop/v1/wam/appEnv/gatherStats', 'json', false, 'json', request);
}

model DescribeInstanceHealthRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeInstanceHealthResponseBody = {
  code?: string(name='Code'),
  instanceHealth?: {
    agentStatus?: string(name='AgentStatus'),
    appStatus?: string(name='AppStatus'),
    disconnectedTime?: long(name='DisconnectedTime'),
    instanceId?: string(name='InstanceId'),
  }(name='InstanceHealth'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceHealthResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceHealthResponseBody(name='body'),
}

async function describeInstanceHealth(request: DescribeInstanceHealthRequest): DescribeInstanceHealthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeInstanceHealth', 'GET', '/pop/v1/wam/instance/health', 'json', false, 'json', request);
}

model DescribePkgVersionsRequest {
  appId: string(name='AppId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  pkgVersionLabel?: string(name='PkgVersionLabel', position='Query'),
  pkgVersionSearch?: string(name='PkgVersionSearch', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribePkgVersionsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  pkgVersions?: {
    pkgVersion?: [ 
    {
      appId?: string(name='AppId'),
      appName?: string(name='AppName'),
      createTime?: long(name='CreateTime'),
      createUsername?: string(name='CreateUsername'),
      packageETag?: string(name='PackageETag'),
      packageSource?: string(name='PackageSource'),
      pkgVersionDescription?: string(name='PkgVersionDescription'),
      pkgVersionId?: string(name='PkgVersionId'),
      pkgVersionLabel?: string(name='PkgVersionLabel'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='PkgVersion')
  }(name='PkgVersions'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePkgVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePkgVersionsResponseBody(name='body'),
}

async function describePkgVersions(request: DescribePkgVersionsRequest): DescribePkgVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribePkgVersions', 'GET', '/pop/v1/wam/pkgVersion', 'json', false, 'json', request);
}

model DescribePublicConfigTemplatesRequest {
  categoryName?: string(name='CategoryName', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribePublicConfigTemplatesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  publicConfigTemplates?: {
    publicConfigTemplate?: [ 
    {
      categoryName?: string(name='CategoryName'),
      createTime?: long(name='CreateTime'),
      packageSource?: string(name='PackageSource'),
      stackId?: string(name='StackId'),
      stackName?: string(name='StackName'),
      templateDescription?: string(name='TemplateDescription'),
      templateId?: string(name='TemplateId'),
      templateLogo?: string(name='TemplateLogo'),
      templateName?: string(name='TemplateName'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='PublicConfigTemplate')
  }(name='PublicConfigTemplates'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePublicConfigTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePublicConfigTemplatesResponseBody(name='body'),
}

async function describePublicConfigTemplates(request: DescribePublicConfigTemplatesRequest): DescribePublicConfigTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribePublicConfigTemplates', 'GET', '/pop/v1/wam/publicConfigTemplate', 'json', false, 'json', request);
}

model DescribeStacksRequest {
  categoryName?: string(name='CategoryName', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  recommendedOnly?: boolean(name='RecommendedOnly', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeStacksResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  stacks?: {
    stack?: [ 
    {
      categoryName?: string(name='CategoryName'),
      createTime?: long(name='CreateTime'),
      latestStack?: boolean(name='LatestStack'),
      recommendedStack?: boolean(name='RecommendedStack'),
      stackId?: string(name='StackId'),
      stackName?: string(name='StackName'),
      updateTime?: long(name='UpdateTime'),
      versionCode?: int32(name='VersionCode'),
    }
  ](name='Stack')
  }(name='Stacks'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeStacksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStacksResponseBody(name='body'),
}

async function describeStacks(request: DescribeStacksRequest): DescribeStacksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeStacks', 'GET', '/pop/v1/wam/stack', 'json', false, 'json', request);
}

model DescribeStorageRequest {
  regionId?: string(name='RegionId', position='Query'),
  usingSharedStorage?: boolean(name='UsingSharedStorage', position='Query'),
}

model DescribeStorageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  storage?: {
    bucketName?: string(name='BucketName'),
    createTime?: long(name='CreateTime'),
    keyPrefix?: string(name='KeyPrefix'),
    pkgKeyPrefix?: string(name='PkgKeyPrefix'),
    updateTime?: long(name='UpdateTime'),
  }(name='Storage'),
}

model DescribeStorageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStorageResponseBody(name='body'),
}

async function describeStorage(request: DescribeStorageRequest): DescribeStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DescribeStorage', 'GET', '/pop/v1/wam/storage', 'json', false, 'json', request);
}

model GatherAppEnvLogRequest {
  envId?: string(name='EnvId', position='Body'),
  logPath?: string(name='LogPath', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
  targetInstances?: string(name='TargetInstances', position='Body'),
}

model GatherAppEnvLogResponseBody = {
  code?: string(name='Code'),
  envChange?: {
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    startTime?: string(name='StartTime'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GatherAppEnvLogResponse = {
  headers: map[string]string(name='headers'),
  body: GatherAppEnvLogResponseBody(name='body'),
}

async function gatherAppEnvLog(request: GatherAppEnvLogRequest): GatherAppEnvLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GatherAppEnvLog', 'POST', '/pop/v1/wam/appEnv/gatherLog', 'json', true, 'form', request);
}

model GatherAppEnvStatsRequest {
  envId?: string(name='EnvId', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
  targetInstances?: string(name='TargetInstances', position='Body'),
}

model GatherAppEnvStatsResponseBody = {
  code?: string(name='Code'),
  envChange?: {
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    startTime?: string(name='StartTime'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GatherAppEnvStatsResponse = {
  headers: map[string]string(name='headers'),
  body: GatherAppEnvStatsResponseBody(name='body'),
}

async function gatherAppEnvStats(request: GatherAppEnvStatsRequest): GatherAppEnvStatsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GatherAppEnvStats', 'POST', '/pop/v1/wam/appEnv/gatherStats', 'json', true, 'form', request);
}

model PauseChangeRequest {
  changeId?: string(name='ChangeId', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
}

model PauseChangeResponseBody = {
  code?: string(name='Code'),
  envChange?: {
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    startTime?: string(name='StartTime'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model PauseChangeResponse = {
  headers: map[string]string(name='headers'),
  body: PauseChangeResponseBody(name='body'),
}

async function pauseChange(request: PauseChangeRequest): PauseChangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PauseChange', 'POST', '/pop/v1/wam/change/pause', 'json', true, 'form', request);
}

model RebuildAppEnvRequest {
  dryRun?: boolean(name='DryRun', position='Body'),
  envId?: string(name='EnvId', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
}

model RebuildAppEnvResponseBody = {
  code?: string(name='Code'),
  envChangeDetail?: {
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    operations?: {
      operation?: [ 
      {
        operationDescription?: string(name='OperationDescription'),
        operationType?: string(name='OperationType'),
      }
    ](name='Operation')
    }(name='Operations'),
    startTime?: string(name='StartTime'),
  }(name='EnvChangeDetail'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RebuildAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: RebuildAppEnvResponseBody(name='body'),
}

async function rebuildAppEnv(request: RebuildAppEnvRequest): RebuildAppEnvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RebuildAppEnv', 'POST', '/pop/v1/wam/appEnv/rebuild', 'json', true, 'form', request);
}

model RestartAppEnvRequest {
  batchInterval?: int32(name='BatchInterval', position='Body'),
  batchPercent?: int32(name='BatchPercent', position='Body'),
  batchSize?: int32(name='BatchSize', position='Body'),
  envId?: string(name='EnvId', position='Body'),
  pauseBetweenBatches?: boolean(name='PauseBetweenBatches', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
}

model RestartAppEnvResponseBody = {
  code?: string(name='Code'),
  envChange?: {
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    startTime?: string(name='StartTime'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model RestartAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: RestartAppEnvResponseBody(name='body'),
}

async function restartAppEnv(request: RestartAppEnvRequest): RestartAppEnvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RestartAppEnv', 'POST', '/pop/v1/wam/appEnv/restart', 'json', true, 'form', request);
}

model ResumeChangeRequest {
  changeId?: string(name='ChangeId', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
}

model ResumeChangeResponseBody = {
  code?: string(name='Code'),
  envChange?: {
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    startTime?: string(name='StartTime'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ResumeChangeResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeChangeResponseBody(name='body'),
}

async function resumeChange(request: ResumeChangeRequest): ResumeChangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeChange', 'POST', '/pop/v1/wam/change/resume', 'json', true, 'form', request);
}

model StartAppEnvRequest {
  envId?: string(name='EnvId', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
}

model StartAppEnvResponseBody = {
  code?: string(name='Code'),
  envChange?: {
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    startTime?: string(name='StartTime'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model StartAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: StartAppEnvResponseBody(name='body'),
}

async function startAppEnv(request: StartAppEnvRequest): StartAppEnvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartAppEnv', 'POST', '/pop/v1/wam/appEnv/start', 'json', true, 'form', request);
}

model StopAppEnvRequest {
  envId?: string(name='EnvId', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
}

model StopAppEnvResponseBody = {
  code?: string(name='Code'),
  envChange?: {
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    startTime?: string(name='StartTime'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model StopAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: StopAppEnvResponseBody(name='body'),
}

async function stopAppEnv(request: StopAppEnvRequest): StopAppEnvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StopAppEnv', 'POST', '/pop/v1/wam/appEnv/stop', 'json', true, 'form', request);
}

model TerminateAppEnvRequest {
  dryRun?: string(name='DryRun', position='Body'),
  envId?: string(name='EnvId', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
}

model TerminateAppEnvResponseBody = {
  code?: string(name='Code'),
  envChangeDetail?: {
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    operations?: {
      operation?: [ 
      {
        operationDescription?: string(name='OperationDescription'),
        operationType?: string(name='OperationType'),
      }
    ](name='Operation')
    }(name='Operations'),
    startTime?: string(name='StartTime'),
  }(name='EnvChangeDetail'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model TerminateAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: TerminateAppEnvResponseBody(name='body'),
}

async function terminateAppEnv(request: TerminateAppEnvRequest): TerminateAppEnvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TerminateAppEnv', 'POST', '/pop/v1/wam/appEnv/terminate', 'json', true, 'form', request);
}

model UpdateAppEnvRequest {
  batchInterval?: string(name='BatchInterval', position='Body'),
  batchPercent?: string(name='BatchPercent', position='Body'),
  batchSize?: string(name='BatchSize', position='Body'),
  dryRun?: boolean(name='DryRun', position='Body'),
  envDescription?: string(name='EnvDescription', position='Body'),
  envId?: string(name='EnvId', position='Body'),
  extraProperties?: string(name='ExtraProperties', position='Body'),
  optionSettings?: string(name='OptionSettings', position='Body'),
  pauseBetweenBatches?: boolean(name='PauseBetweenBatches', position='Body'),
  pkgVersionId?: string(name='PkgVersionId', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
  stackId?: string(name='StackId', position='Body'),
}

model UpdateAppEnvResponseBody = {
  code?: string(name='Code'),
  envChangeDetail?: {
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    operations?: {
      operation?: [ 
      {
        operationDescription?: string(name='OperationDescription'),
        operationType?: string(name='OperationType'),
      }
    ](name='Operation')
    }(name='Operations'),
    startTime?: string(name='StartTime'),
  }(name='EnvChangeDetail'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppEnvResponseBody(name='body'),
}

async function updateAppEnv(request: UpdateAppEnvRequest): UpdateAppEnvResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAppEnv', 'PUT', '/pop/v1/wam/appEnv', 'json', true, 'form', request);
}

model UpdateApplicationRequest {
  appDescription?: string(name='AppDescription', position='Body'),
  appId?: string(name='AppId', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
}

model UpdateApplicationResponseBody = {
  application?: {
    appDescription?: string(name='AppDescription'),
    appId?: string(name='AppId'),
    appName?: string(name='AppName'),
    categoryName?: string(name='CategoryName'),
    createTime?: long(name='CreateTime'),
    createUsername?: string(name='CreateUsername'),
    updateTime?: long(name='UpdateTime'),
    updateUsername?: string(name='UpdateUsername'),
  }(name='Application'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateApplicationResponseBody(name='body'),
}

async function updateApplication(request: UpdateApplicationRequest): UpdateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateApplication', 'PUT', '/pop/v1/wam/application', 'json', true, 'form', request);
}

model UpdateConfigTemplateRequest {
  optionSettings?: string(name='OptionSettings', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
  templateDescription?: string(name='TemplateDescription', position='Body'),
  templateId?: string(name='TemplateId', position='Body'),
}

model UpdateConfigTemplateResponseBody = {
  code?: string(name='Code'),
  configTemplate?: {
    appId?: string(name='AppId'),
    appName?: string(name='AppName'),
    createTime?: long(name='CreateTime'),
    stackId?: string(name='StackId'),
    stackName?: string(name='StackName'),
    templateId?: string(name='TemplateId'),
    templateName?: string(name='TemplateName'),
    updateTime?: long(name='UpdateTime'),
  }(name='ConfigTemplate'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model UpdateConfigTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConfigTemplateResponseBody(name='body'),
}

async function updateConfigTemplate(request: UpdateConfigTemplateRequest): UpdateConfigTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateConfigTemplate', 'PUT', '/pop/v1/wam/configTemplate', 'json', true, 'form', request);
}

model ValidateConfigSettingRequest {
  envId?: string(name='EnvId', position='Body'),
  optionSettings?: string(name='OptionSettings', position='Body'),
  regionId?: string(name='RegionId', position='Query'),
  stackId?: string(name='StackId', position='Body'),
  templateId?: string(name='TemplateId', position='Body'),
}

model ValidateConfigSettingResponseBody = {
  code?: string(name='Code'),
  configValidationResults?: {
    configValidationResult?: [ 
    {
      configOption?: {
        changeSeverity?: string(name='ChangeSeverity'),
        defaultValue?: string(name='DefaultValue'),
        editorType?: string(name='EditorType'),
        hiddenOption?: boolean(name='HiddenOption'),
        maxLength?: int32(name='MaxLength'),
        maxValue?: long(name='MaxValue'),
        minLength?: int32(name='MinLength'),
        minValue?: long(name='MinValue'),
        optionDescription?: string(name='OptionDescription'),
        optionLabel?: string(name='OptionLabel'),
        optionName?: string(name='OptionName'),
        pathName?: string(name='PathName'),
        readonlyOption?: boolean(name='ReadonlyOption'),
        regexDesc?: string(name='RegexDesc'),
        regexPattern?: string(name='RegexPattern'),
        valueOptions?: string(name='ValueOptions'),
        valueType?: string(name='ValueType'),
      }(name='ConfigOption'),
      optionName?: string(name='OptionName'),
      pathName?: string(name='PathName'),
      resultMessage?: string(name='ResultMessage'),
      resultSeverity?: string(name='ResultSeverity'),
    }
  ](name='ConfigValidationResult')
  }(name='ConfigValidationResults'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ValidateConfigSettingResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateConfigSettingResponseBody(name='body'),
}

async function validateConfigSetting(request: ValidateConfigSettingRequest): ValidateConfigSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ValidateConfigSetting', 'POST', '/pop/v1/wam/config/configSetting/validate', 'json', true, 'form', request);
}

