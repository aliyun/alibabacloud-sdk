/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-beijing = 'webplus.cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou = 'webplus.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'webplus.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'webplus.cn-hangzhou.aliyuncs.com',
    ap-northeast-1 = 'webplus.aliyuncs.com',
    ap-south-1 = 'webplus.aliyuncs.com',
    ap-southeast-1 = 'webplus.aliyuncs.com',
    ap-southeast-2 = 'webplus.aliyuncs.com',
    ap-southeast-3 = 'webplus.aliyuncs.com',
    ap-southeast-5 = 'webplus.aliyuncs.com',
    cn-chengdu = 'webplus.aliyuncs.com',
    cn-hongkong = 'webplus-vpc.cn-hongkong.aliyuncs.com',
    cn-huhehaote = 'webplus.aliyuncs.com',
    cn-qingdao = 'webplus.aliyuncs.com',
    eu-central-1 = 'webplus.aliyuncs.com',
    eu-west-1 = 'webplus.aliyuncs.com',
    me-east-1 = 'webplus.aliyuncs.com',
    us-east-1 = 'webplus.aliyuncs.com',
    us-west-1 = 'webplus.aliyuncs.com',
    cn-hangzhou-finance = 'webplus.aliyuncs.com',
    cn-shenzhen-finance-1 = 'webplus.aliyuncs.com',
    cn-shanghai-finance-1 = 'webplus.aliyuncs.com',
    cn-north-2-gov-1 = 'webplus.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('webplus', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AbortChangeRequest {
  changeId?: string(name='ChangeId'),
  regionId?: string(name='RegionId'),
}

model AbortChangeResponseBody = {
  envChange?: {
    startTime?: string(name='StartTime'),
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model AbortChangeResponse = {
  headers: map[string]string(name='headers'),
  body: AbortChangeResponseBody(name='body'),
}

async function abortChange(request: AbortChangeRequest): AbortChangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return abortChangeWithOptions(request, headers, runtime);
}

async function abortChangeWithOptions(request: AbortChangeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AbortChangeResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.changeId)) {
    body.ChangeId = request.changeId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('AbortChange', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/change/abort`, 'json', req, runtime);
}

model CreateAppEnvRequest {
  envName?: string(name='EnvName'),
  envDescription?: string(name='EnvDescription'),
  stackId?: string(name='StackId'),
  appId?: string(name='AppId'),
  pkgVersionId?: string(name='PkgVersionId'),
  optionSettings?: string(name='OptionSettings'),
  profileName?: string(name='ProfileName'),
  sourceEnvId?: string(name='SourceEnvId'),
  templateId?: string(name='TemplateId'),
  dryRun?: boolean(name='DryRun'),
  extraProperties?: string(name='ExtraProperties'),
  regionId?: string(name='RegionId'),
}

model CreateAppEnvResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  envChangeDetail?: {
    startTime?: string(name='StartTime'),
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    operations?: {
      operation?: [ 
      {
        operationDescription?: string(name='OperationDescription'),
        operationType?: string(name='OperationType'),
      }
    ](name='Operation')
    }(name='Operations'),
  }(name='EnvChangeDetail'),
  code?: string(name='Code'),
}

model CreateAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppEnvResponseBody(name='body'),
}

async function createAppEnv(request: CreateAppEnvRequest): CreateAppEnvResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createAppEnvWithOptions(request, headers, runtime);
}

async function createAppEnvWithOptions(request: CreateAppEnvRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAppEnvResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.envName)) {
    body.EnvName = request.envName;
  }
  if (!Util.isUnset(request.envDescription)) {
    body.EnvDescription = request.envDescription;
  }
  if (!Util.isUnset(request.stackId)) {
    body.StackId = request.stackId;
  }
  if (!Util.isUnset(request.appId)) {
    body.AppId = request.appId;
  }
  if (!Util.isUnset(request.pkgVersionId)) {
    body.PkgVersionId = request.pkgVersionId;
  }
  if (!Util.isUnset(request.optionSettings)) {
    body.OptionSettings = request.optionSettings;
  }
  if (!Util.isUnset(request.profileName)) {
    body.ProfileName = request.profileName;
  }
  if (!Util.isUnset(request.sourceEnvId)) {
    body.SourceEnvId = request.sourceEnvId;
  }
  if (!Util.isUnset(request.templateId)) {
    body.TemplateId = request.templateId;
  }
  if (!Util.isUnset(request.dryRun)) {
    body.DryRun = request.dryRun;
  }
  if (!Util.isUnset(request.extraProperties)) {
    body.ExtraProperties = request.extraProperties;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('CreateAppEnv', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/appEnv`, 'json', req, runtime);
}

model CreateApplicationRequest {
  appName?: string(name='AppName'),
  appDescription?: string(name='AppDescription'),
  categoryName?: string(name='CategoryName'),
  usingSharedStorage?: boolean(name='UsingSharedStorage'),
  regionId?: string(name='RegionId'),
}

model CreateApplicationResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  application?: {
    createUsername?: string(name='CreateUsername'),
    appName?: string(name='AppName'),
    updateTime?: long(name='UpdateTime'),
    updateUsername?: string(name='UpdateUsername'),
    createTime?: long(name='CreateTime'),
    appId?: string(name='AppId'),
    categoryName?: string(name='CategoryName'),
    usingSharedStorage?: boolean(name='UsingSharedStorage'),
    appDescription?: string(name='AppDescription'),
  }(name='Application'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createApplicationWithOptions(request, headers, runtime);
}

async function createApplicationWithOptions(request: CreateApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateApplicationResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.appName)) {
    body.AppName = request.appName;
  }
  if (!Util.isUnset(request.appDescription)) {
    body.AppDescription = request.appDescription;
  }
  if (!Util.isUnset(request.categoryName)) {
    body.CategoryName = request.categoryName;
  }
  if (!Util.isUnset(request.usingSharedStorage)) {
    body.UsingSharedStorage = request.usingSharedStorage;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('CreateApplication', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/application`, 'json', req, runtime);
}

model CreateConfigTemplateRequest {
  templateName?: string(name='TemplateName'),
  templateDescription?: string(name='TemplateDescription'),
  appId?: string(name='AppId'),
  stackId?: string(name='StackId'),
  sourceTemplateId?: string(name='SourceTemplateId'),
  sourceEnvId?: string(name='SourceEnvId'),
  profileName?: string(name='ProfileName'),
  pkgVersionId?: string(name='PkgVersionId'),
  optionSettings?: string(name='OptionSettings'),
  regionId?: string(name='RegionId'),
}

model CreateConfigTemplateResponseBody = {
  configTemplate?: {
    updateTime?: long(name='UpdateTime'),
    createTime?: long(name='CreateTime'),
    templateType?: string(name='TemplateType'),
    stackName?: string(name='StackName'),
    pkgVersionId?: string(name='PkgVersionId'),
    templateName?: string(name='TemplateName'),
    templateDescription?: string(name='TemplateDescription'),
    appName?: string(name='AppName'),
    stackId?: string(name='StackId'),
    pkgVersionLabel?: string(name='PkgVersionLabel'),
    appId?: string(name='AppId'),
    templateId?: string(name='TemplateId'),
  }(name='ConfigTemplate'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model CreateConfigTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateConfigTemplateResponseBody(name='body'),
}

async function createConfigTemplate(request: CreateConfigTemplateRequest): CreateConfigTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createConfigTemplateWithOptions(request, headers, runtime);
}

async function createConfigTemplateWithOptions(request: CreateConfigTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConfigTemplateResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.templateName)) {
    body.TemplateName = request.templateName;
  }
  if (!Util.isUnset(request.templateDescription)) {
    body.TemplateDescription = request.templateDescription;
  }
  if (!Util.isUnset(request.appId)) {
    body.AppId = request.appId;
  }
  if (!Util.isUnset(request.stackId)) {
    body.StackId = request.stackId;
  }
  if (!Util.isUnset(request.sourceTemplateId)) {
    body.SourceTemplateId = request.sourceTemplateId;
  }
  if (!Util.isUnset(request.sourceEnvId)) {
    body.SourceEnvId = request.sourceEnvId;
  }
  if (!Util.isUnset(request.profileName)) {
    body.ProfileName = request.profileName;
  }
  if (!Util.isUnset(request.pkgVersionId)) {
    body.PkgVersionId = request.pkgVersionId;
  }
  if (!Util.isUnset(request.optionSettings)) {
    body.OptionSettings = request.optionSettings;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('CreateConfigTemplate', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/configTemplate`, 'json', req, runtime);
}

model CreateOrderRequest {
  productName?: string(name='ProductName'),
  regionId?: string(name='RegionId'),
}

model CreateOrderResponseBody = {
  orderDetail?: {
    data?: string(name='Data'),
    requestId?: string(name='RequestId'),
    success?: boolean(name='Success'),
    code?: string(name='Code'),
    message?: string(name='Message'),
  }(name='OrderDetail'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model CreateOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CreateOrderResponseBody(name='body'),
}

async function createOrder(request: CreateOrderRequest): CreateOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createOrderWithOptions(request, headers, runtime);
}

async function createOrderWithOptions(request: CreateOrderRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateOrderResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.productName)) {
    body.ProductName = request.productName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('CreateOrder', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/paas/createOrder`, 'json', req, runtime);
}

model CreatePkgVersionRequest {
  pkgVersionLabel?: string(name='PkgVersionLabel'),
  pkgVersionDescription?: string(name='PkgVersionDescription'),
  appId?: string(name='AppId'),
  packageSource?: string(name='PackageSource'),
  regionId?: string(name='RegionId'),
}

model CreatePkgVersionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  pkgVersion?: {
    appName?: string(name='AppName'),
    updateTime?: long(name='UpdateTime'),
    pkgVersionLabel?: string(name='PkgVersionLabel'),
    createTime?: long(name='CreateTime'),
    appId?: string(name='AppId'),
    packageSource?: string(name='PackageSource'),
    pkgVersionId?: string(name='PkgVersionId'),
    pkgVersionDescription?: string(name='PkgVersionDescription'),
  }(name='PkgVersion'),
  code?: string(name='Code'),
}

model CreatePkgVersionResponse = {
  headers: map[string]string(name='headers'),
  body: CreatePkgVersionResponseBody(name='body'),
}

async function createPkgVersion(request: CreatePkgVersionRequest): CreatePkgVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createPkgVersionWithOptions(request, headers, runtime);
}

async function createPkgVersionWithOptions(request: CreatePkgVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePkgVersionResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.pkgVersionLabel)) {
    body.PkgVersionLabel = request.pkgVersionLabel;
  }
  if (!Util.isUnset(request.pkgVersionDescription)) {
    body.PkgVersionDescription = request.pkgVersionDescription;
  }
  if (!Util.isUnset(request.appId)) {
    body.AppId = request.appId;
  }
  if (!Util.isUnset(request.packageSource)) {
    body.PackageSource = request.packageSource;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('CreatePkgVersion', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/pkgVersion`, 'json', req, runtime);
}

model CreateStorageRequest {
  regionId?: string(name='RegionId'),
}

model CreateStorageResponseBody = {
  storage?: {
    updateTime?: long(name='UpdateTime'),
    createTime?: long(name='CreateTime'),
    bucketName?: string(name='BucketName'),
  }(name='Storage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model CreateStorageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateStorageResponseBody(name='body'),
}

async function createStorage(request: CreateStorageRequest): CreateStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createStorageWithOptions(request, headers, runtime);
}

async function createStorageWithOptions(request: CreateStorageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateStorageResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('CreateStorage', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/storage`, 'json', req, runtime);
}

model DeleteAppEnvRequest {
  envId?: string(name='EnvId'),
  regionId?: string(name='RegionId'),
}

model DeleteAppEnvResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model DeleteAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAppEnvResponseBody(name='body'),
}

async function deleteAppEnv(request: DeleteAppEnvRequest): DeleteAppEnvResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteAppEnvWithOptions(request, headers, runtime);
}

async function deleteAppEnvWithOptions(request: DeleteAppEnvRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAppEnvResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    query.EnvId = request.envId;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeleteAppEnv', '2019-03-20', 'HTTPS', 'DELETE', 'AK', `/pop/v1/wam/appEnv`, 'json', req, runtime);
}

model DeleteApplicationRequest {
  appId?: string(name='AppId'),
  regionId?: string(name='RegionId'),
}

model DeleteApplicationResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApplicationResponseBody(name='body'),
}

async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteApplicationWithOptions(request, headers, runtime);
}

async function deleteApplicationWithOptions(request: DeleteApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteApplicationResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    query.AppId = request.appId;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeleteApplication', '2019-03-20', 'HTTPS', 'DELETE', 'AK', `/pop/v1/wam/application`, 'json', req, runtime);
}

model DeleteChangeRequest {
  changeId?: string(name='ChangeId'),
  regionId?: string(name='RegionId'),
}

model DeleteChangeResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model DeleteChangeResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteChangeResponseBody(name='body'),
}

async function deleteChange(request: DeleteChangeRequest): DeleteChangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteChangeWithOptions(request, headers, runtime);
}

async function deleteChangeWithOptions(request: DeleteChangeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteChangeResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.changeId)) {
    query.ChangeId = request.changeId;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeleteChange', '2019-03-20', 'HTTPS', 'DELETE', 'AK', `/pop/v1/wam/change`, 'json', req, runtime);
}

model DeleteConfigTemplateRequest {
  templateId?: string(name='TemplateId'),
  regionId?: string(name='RegionId'),
}

model DeleteConfigTemplateResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model DeleteConfigTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteConfigTemplateResponseBody(name='body'),
}

async function deleteConfigTemplate(request: DeleteConfigTemplateRequest): DeleteConfigTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteConfigTemplateWithOptions(request, headers, runtime);
}

async function deleteConfigTemplateWithOptions(request: DeleteConfigTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteConfigTemplateResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.templateId)) {
    query.TemplateId = request.templateId;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeleteConfigTemplate', '2019-03-20', 'HTTPS', 'DELETE', 'AK', `/pop/v1/wam/configTemplate`, 'json', req, runtime);
}

model DeletePkgVersionRequest {
  pkgVersionId?: string(name='PkgVersionId'),
  regionId?: string(name='RegionId'),
}

model DeletePkgVersionResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model DeletePkgVersionResponse = {
  headers: map[string]string(name='headers'),
  body: DeletePkgVersionResponseBody(name='body'),
}

async function deletePkgVersion(request: DeletePkgVersionRequest): DeletePkgVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePkgVersionWithOptions(request, headers, runtime);
}

async function deletePkgVersionWithOptions(request: DeletePkgVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePkgVersionResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.pkgVersionId)) {
    query.PkgVersionId = request.pkgVersionId;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DeletePkgVersion', '2019-03-20', 'HTTPS', 'DELETE', 'AK', `/pop/v1/wam/pkgVersion`, 'json', req, runtime);
}

model DeployAppEnvRequest {
  envId?: string(name='EnvId'),
  batchSize?: int32(name='BatchSize'),
  batchPercent?: int32(name='BatchPercent'),
  batchInterval?: int32(name='BatchInterval'),
  pauseBetweenBatches?: boolean(name='PauseBetweenBatches'),
  pkgVersionId?: string(name='PkgVersionId'),
  regionId?: string(name='RegionId'),
}

model DeployAppEnvResponseBody = {
  envChange?: {
    startTime?: string(name='StartTime'),
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model DeployAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: DeployAppEnvResponseBody(name='body'),
}

async function deployAppEnv(request: DeployAppEnvRequest): DeployAppEnvResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deployAppEnvWithOptions(request, headers, runtime);
}

async function deployAppEnvWithOptions(request: DeployAppEnvRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeployAppEnvResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    body.EnvId = request.envId;
  }
  if (!Util.isUnset(request.batchSize)) {
    body.BatchSize = request.batchSize;
  }
  if (!Util.isUnset(request.batchPercent)) {
    body.BatchPercent = request.batchPercent;
  }
  if (!Util.isUnset(request.batchInterval)) {
    body.BatchInterval = request.batchInterval;
  }
  if (!Util.isUnset(request.pauseBetweenBatches)) {
    body.PauseBetweenBatches = request.pauseBetweenBatches;
  }
  if (!Util.isUnset(request.pkgVersionId)) {
    body.PkgVersionId = request.pkgVersionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('DeployAppEnv', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/appEnv/deploy`, 'json', req, runtime);
}

model DescribeAppEnvInstanceHealthRequest {
  envId?: string(name='EnvId'),
  regionId?: string(name='RegionId'),
}

model DescribeAppEnvInstanceHealthResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  envInstanceHealth?: {
    enableHealthCheck?: boolean(name='EnableHealthCheck'),
    envName?: string(name='EnvName'),
    envId?: string(name='EnvId'),
    instanceHealthList?: {
      instanceHealth?: [ 
      {
        appStatus?: string(name='AppStatus'),
        instanceId?: string(name='InstanceId'),
        disconnectedTime?: string(name='DisconnectedTime'),
        agentStatus?: string(name='AgentStatus'),
      }
    ](name='InstanceHealth')
    }(name='InstanceHealthList'),
  }(name='EnvInstanceHealth'),
}

model DescribeAppEnvInstanceHealthResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppEnvInstanceHealthResponseBody(name='body'),
}

async function describeAppEnvInstanceHealth(request: DescribeAppEnvInstanceHealthRequest): DescribeAppEnvInstanceHealthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAppEnvInstanceHealthWithOptions(request, headers, runtime);
}

async function describeAppEnvInstanceHealthWithOptions(request: DescribeAppEnvInstanceHealthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAppEnvInstanceHealthResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    query.EnvId = request.envId;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeAppEnvInstanceHealth', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/appEnv/instanceHealth`, 'json', req, runtime);
}

model DescribeAppEnvsRequest {
  envId?: string(name='EnvId'),
  appId?: string(name='AppId'),
  includeTerminated?: boolean(name='IncludeTerminated'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  envName?: string(name='EnvName'),
  envSearch?: string(name='EnvSearch'),
  recentUpdated?: boolean(name='RecentUpdated'),
  stackSearch?: string(name='StackSearch'),
  regionId?: string(name='RegionId'),
}

model DescribeAppEnvsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  appEnvs?: {
    appEnv?: [ 
    {
      updateTime?: long(name='UpdateTime'),
      totalInstances?: long(name='TotalInstances'),
      pkgVersionStorageKey?: string(name='PkgVersionStorageKey'),
      latestChangeId?: string(name='LatestChangeId'),
      envStatus?: string(name='EnvStatus'),
      createTime?: long(name='CreateTime'),
      lastEnvStatus?: string(name='LastEnvStatus'),
      pkgVersionId?: string(name='PkgVersionId'),
      envDescription?: string(name='EnvDescription'),
      applyingChange?: boolean(name='ApplyingChange'),
      envType?: string(name='EnvType'),
      appName?: string(name='AppName'),
      createUsername?: string(name='CreateUsername'),
      appId?: string(name='AppId'),
      dataRoot?: string(name='DataRoot'),
      storageBase?: string(name='StorageBase'),
      updateUsername?: string(name='UpdateUsername'),
      envName?: string(name='EnvName'),
      logBase?: string(name='LogBase'),
      stackName?: string(name='StackName'),
      categoryName?: string(name='CategoryName'),
      usingSharedStorage?: boolean(name='UsingSharedStorage'),
      changeBanner?: string(name='ChangeBanner'),
      stackId?: string(name='StackId'),
      pkgVersionLabel?: string(name='PkgVersionLabel'),
      envId?: string(name='EnvId'),
      abortingChange?: boolean(name='AbortingChange'),
    }
  ](name='AppEnv')
  }(name='AppEnvs'),
  code?: string(name='Code'),
}

model DescribeAppEnvsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppEnvsResponseBody(name='body'),
}

async function describeAppEnvs(request: DescribeAppEnvsRequest): DescribeAppEnvsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAppEnvsWithOptions(request, headers, runtime);
}

async function describeAppEnvsWithOptions(request: DescribeAppEnvsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAppEnvsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    query.EnvId = request.envId;
  }
  if (!Util.isUnset(request.appId)) {
    query.AppId = request.appId;
  }
  if (!Util.isUnset(request.includeTerminated)) {
    query.IncludeTerminated = request.includeTerminated;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.envName)) {
    query.EnvName = request.envName;
  }
  if (!Util.isUnset(request.envSearch)) {
    query.EnvSearch = request.envSearch;
  }
  if (!Util.isUnset(request.recentUpdated)) {
    query.RecentUpdated = request.recentUpdated;
  }
  if (!Util.isUnset(request.stackSearch)) {
    query.StackSearch = request.stackSearch;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeAppEnvs', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/appEnv`, 'json', req, runtime);
}

model DescribeAppEnvStatusRequest {
  envId?: string(name='EnvId'),
  regionId?: string(name='RegionId'),
}

model DescribeAppEnvStatusResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  envStatus?: {
    changeBanner?: string(name='ChangeBanner'),
    latestChangeId?: string(name='LatestChangeId'),
    envStatus?: string(name='EnvStatus'),
    envName?: string(name='EnvName'),
    instanceAgentStatus?: {
      connectedInstances?: int32(name='ConnectedInstances'),
      disconnectedInstances?: int32(name='DisconnectedInstances'),
    }(name='InstanceAgentStatus'),
    lastEnvStatus?: string(name='LastEnvStatus'),
    instanceAppStatus?: {
      healthyInstances?: int32(name='HealthyInstances'),
      stoppedInstances?: int32(name='StoppedInstances'),
      unhealthyInstances?: int32(name='UnhealthyInstances'),
      unknownInstances?: int32(name='UnknownInstances'),
    }(name='InstanceAppStatus'),
    envId?: string(name='EnvId'),
    abortingChange?: boolean(name='AbortingChange'),
    applyingChange?: boolean(name='ApplyingChange'),
  }(name='EnvStatus'),
  code?: string(name='Code'),
}

model DescribeAppEnvStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAppEnvStatusResponseBody(name='body'),
}

async function describeAppEnvStatus(request: DescribeAppEnvStatusRequest): DescribeAppEnvStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeAppEnvStatusWithOptions(request, headers, runtime);
}

async function describeAppEnvStatusWithOptions(request: DescribeAppEnvStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeAppEnvStatusResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    query.EnvId = request.envId;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeAppEnvStatus', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/appEnv/status`, 'json', req, runtime);
}

model DescribeApplicationsRequest {
  appId?: string(name='AppId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  appName?: string(name='AppName'),
  appSearch?: string(name='AppSearch'),
  envSearch?: string(name='EnvSearch'),
  stackSearch?: string(name='StackSearch'),
  categorySearch?: string(name='CategorySearch'),
  regionId?: string(name='RegionId'),
}

model DescribeApplicationsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  applications?: {
    application?: [ 
    {
      totalEnvs?: int32(name='TotalEnvs'),
      updateTime?: long(name='UpdateTime'),
      updateUsername?: string(name='UpdateUsername'),
      runningEnvs?: int32(name='RunningEnvs'),
      createTime?: long(name='CreateTime'),
      categoryName?: string(name='CategoryName'),
      usingSharedStorage?: string(name='UsingSharedStorage'),
      createUsername?: string(name='CreateUsername'),
      appName?: string(name='AppName'),
      appId?: string(name='AppId'),
      terminatedEnvs?: int32(name='TerminatedEnvs'),
      appDescription?: string(name='AppDescription'),
    }
  ](name='Application')
  }(name='Applications'),
  pageNumber?: int32(name='PageNumber'),
  code?: string(name='Code'),
}

model DescribeApplicationsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApplicationsResponseBody(name='body'),
}

async function describeApplications(request: DescribeApplicationsRequest): DescribeApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeApplicationsWithOptions(request, headers, runtime);
}

async function describeApplicationsWithOptions(request: DescribeApplicationsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeApplicationsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    query.AppId = request.appId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.appName)) {
    query.AppName = request.appName;
  }
  if (!Util.isUnset(request.appSearch)) {
    query.AppSearch = request.appSearch;
  }
  if (!Util.isUnset(request.envSearch)) {
    query.EnvSearch = request.envSearch;
  }
  if (!Util.isUnset(request.stackSearch)) {
    query.StackSearch = request.stackSearch;
  }
  if (!Util.isUnset(request.categorySearch)) {
    query.CategorySearch = request.categorySearch;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeApplications', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/application`, 'json', req, runtime);
}

model DescribeCategoriesRequest {
  regionId?: string(name='RegionId'),
}

model DescribeCategoriesResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  categories?: {
    category?: [ 
    {
      categoryLogo?: string(name='CategoryLogo'),
      updateTime?: string(name='UpdateTime'),
      demoProjects?: {
        demoProject?: [ 
        {
          sourceUrl?: string(name='SourceUrl'),
          packageDownloadUrl?: string(name='PackageDownloadUrl'),
          packageUrl?: string(name='PackageUrl'),
          regionId?: string(name='RegionId'),
        }
      ](name='DemoProject')
      }(name='DemoProjects'),
      createTime?: string(name='CreateTime'),
      categoryId?: string(name='CategoryId'),
      categoryName?: string(name='CategoryName'),
      categoryDescription?: string(name='CategoryDescription'),
    }
  ](name='Category')
  }(name='Categories'),
  code?: string(name='Code'),
}

model DescribeCategoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCategoriesResponseBody(name='body'),
}

async function describeCategories(request: DescribeCategoriesRequest): DescribeCategoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeCategoriesWithOptions(request, headers, runtime);
}

async function describeCategoriesWithOptions(request: DescribeCategoriesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeCategoriesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeCategories', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/category`, 'json', req, runtime);
}

model DescribeChangeRequest {
  envId?: string(name='EnvId'),
  changeId?: string(name='ChangeId'),
  regionId?: string(name='RegionId'),
}

model DescribeChangeResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  change?: {
    changePaused?: boolean(name='ChangePaused'),
    changeDescription?: string(name='ChangeDescription'),
    finishTime?: long(name='FinishTime'),
    updateTime?: long(name='UpdateTime'),
    changeTimedout?: boolean(name='ChangeTimedout'),
    createTime?: long(name='CreateTime'),
    changeMessage?: string(name='ChangeMessage'),
    actionName?: string(name='ActionName'),
    changeFinished?: boolean(name='ChangeFinished'),
    createUsername?: string(name='CreateUsername'),
    changeId?: string(name='ChangeId'),
    changeAborted?: boolean(name='ChangeAborted'),
    changeSucceed?: boolean(name='ChangeSucceed'),
    envId?: string(name='EnvId'),
    changeName?: string(name='ChangeName'),
  }(name='Change'),
  code?: string(name='Code'),
}

model DescribeChangeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeChangeResponseBody(name='body'),
}

async function describeChange(request: DescribeChangeRequest): DescribeChangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeChangeWithOptions(request, headers, runtime);
}

async function describeChangeWithOptions(request: DescribeChangeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeChangeResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    query.EnvId = request.envId;
  }
  if (!Util.isUnset(request.changeId)) {
    query.ChangeId = request.changeId;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeChange', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/changeInfo`, 'json', req, runtime);
}

model DescribeChangesRequest {
  envId?: string(name='EnvId'),
  actionName?: string(name='ActionName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  regionId?: string(name='RegionId'),
}

model DescribeChangesResponseBody = {
  changes?: {
    change?: [ 
    {
      changePaused?: boolean(name='ChangePaused'),
      changeDescription?: string(name='ChangeDescription'),
      finishTime?: long(name='FinishTime'),
      updateTime?: long(name='UpdateTime'),
      changeTimedout?: boolean(name='ChangeTimedout'),
      createTime?: long(name='CreateTime'),
      changeMessage?: string(name='ChangeMessage'),
      actionName?: string(name='ActionName'),
      changeFinished?: boolean(name='ChangeFinished'),
      createUsername?: string(name='CreateUsername'),
      changeId?: string(name='ChangeId'),
      changeAborted?: boolean(name='ChangeAborted'),
      changeSucceed?: boolean(name='ChangeSucceed'),
      envId?: string(name='EnvId'),
      changeName?: string(name='ChangeName'),
    }
  ](name='Change')
  }(name='Changes'),
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  code?: string(name='Code'),
}

model DescribeChangesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeChangesResponseBody(name='body'),
}

async function describeChanges(request: DescribeChangesRequest): DescribeChangesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeChangesWithOptions(request, headers, runtime);
}

async function describeChangesWithOptions(request: DescribeChangesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeChangesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    query.EnvId = request.envId;
  }
  if (!Util.isUnset(request.actionName)) {
    query.ActionName = request.actionName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeChanges', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/change`, 'json', req, runtime);
}

model DescribeConfigIndexRequest {
  stackId?: string(name='StackId'),
  envId?: string(name='EnvId'),
  profileName?: string(name='ProfileName'),
  templateId?: string(name='TemplateId'),
  regionId?: string(name='RegionId'),
}

model DescribeConfigIndexResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  configGroups?: {
    configGroup?: [ 
    {
      configPaths?: {
        configPath?: [ 
        {
          pathName?: string(name='PathName'),
          hiddenPath?: boolean(name='HiddenPath'),
          configOptions?: {
            configOption?: [ 
            {
              regexDesc?: string(name='RegexDesc'),
              maxValue?: long(name='MaxValue'),
              editorType?: string(name='EditorType'),
              minValue?: long(name='MinValue'),
              optionLabel?: string(name='OptionLabel'),
              defaultValue?: string(name='DefaultValue'),
              maxLength?: int32(name='MaxLength'),
              regexPattern?: string(name='RegexPattern'),
              changeSeverity?: string(name='ChangeSeverity'),
              optionDescription?: string(name='OptionDescription'),
              optionName?: string(name='OptionName'),
              pathName?: string(name='PathName'),
              hiddenOption?: boolean(name='HiddenOption'),
              valueType?: string(name='ValueType'),
              minLength?: int32(name='MinLength'),
              valueOptions?: string(name='ValueOptions'),
              readonlyOption?: boolean(name='ReadonlyOption'),
            }
          ](name='ConfigOption')
          }(name='ConfigOptions'),
          pathLabel?: string(name='PathLabel'),
        }
      ](name='ConfigPath')
      }(name='ConfigPaths'),
      groupName?: string(name='GroupName'),
      groupLabel?: string(name='GroupLabel'),
    }
  ](name='ConfigGroup')
  }(name='ConfigGroups'),
  code?: string(name='Code'),
  stackName?: string(name='StackName'),
  stackId?: string(name='StackId'),
}

model DescribeConfigIndexResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigIndexResponseBody(name='body'),
}

async function describeConfigIndex(request: DescribeConfigIndexRequest): DescribeConfigIndexResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeConfigIndexWithOptions(request, headers, runtime);
}

async function describeConfigIndexWithOptions(request: DescribeConfigIndexRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeConfigIndexResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.stackId)) {
    query.StackId = request.stackId;
  }
  if (!Util.isUnset(request.envId)) {
    query.EnvId = request.envId;
  }
  if (!Util.isUnset(request.profileName)) {
    query.ProfileName = request.profileName;
  }
  if (!Util.isUnset(request.templateId)) {
    query.TemplateId = request.templateId;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeConfigIndex', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/config/configIndex`, 'json', req, runtime);
}

model DescribeConfigOptionsRequest {
  stackId?: string(name='StackId'),
  envId?: string(name='EnvId'),
  profileName?: string(name='ProfileName'),
  regionId?: string(name='RegionId'),
}

model DescribeConfigOptionsResponseBody = {
  stackConfigOption?: {
    stackId?: string(name='StackId'),
    configOptions?: {
      configOption?: [ 
      {
        regexDesc?: string(name='RegexDesc'),
        maxValue?: long(name='MaxValue'),
        editorType?: string(name='EditorType'),
        minValue?: long(name='MinValue'),
        defaultValue?: string(name='DefaultValue'),
        maxLength?: int32(name='MaxLength'),
        optionLabel?: string(name='OptionLabel'),
        regexPattern?: string(name='RegexPattern'),
        changeSeverity?: string(name='ChangeSeverity'),
        optionDescription?: string(name='OptionDescription'),
        optionName?: string(name='OptionName'),
        pathName?: string(name='PathName'),
        hiddenOption?: boolean(name='HiddenOption'),
        valueType?: string(name='ValueType'),
        minLength?: int32(name='MinLength'),
        valueOptions?: string(name='ValueOptions'),
        readonlyOption?: boolean(name='ReadonlyOption'),
      }
    ](name='ConfigOption')
    }(name='ConfigOptions'),
    stackName?: string(name='StackName'),
  }(name='StackConfigOption'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model DescribeConfigOptionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigOptionsResponseBody(name='body'),
}

async function describeConfigOptions(request: DescribeConfigOptionsRequest): DescribeConfigOptionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeConfigOptionsWithOptions(request, headers, runtime);
}

async function describeConfigOptionsWithOptions(request: DescribeConfigOptionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeConfigOptionsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.stackId)) {
    query.StackId = request.stackId;
  }
  if (!Util.isUnset(request.envId)) {
    query.EnvId = request.envId;
  }
  if (!Util.isUnset(request.profileName)) {
    query.ProfileName = request.profileName;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeConfigOptions', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/config/configOption`, 'json', req, runtime);
}

model DescribeConfigSettingsRequest {
  envId?: string(name='EnvId'),
  templateId?: string(name='TemplateId'),
  pathName?: string(name='PathName'),
  optionName?: string(name='OptionName'),
  regionId?: string(name='RegionId'),
}

model DescribeConfigSettingsResponseBody = {
  configSettings?: {
    configSetting?: [ 
    {
      optionName?: string(name='OptionName'),
      pathName?: string(name='PathName'),
      settingValue?: string(name='SettingValue'),
    }
  ](name='ConfigSetting')
  }(name='ConfigSettings'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model DescribeConfigSettingsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigSettingsResponseBody(name='body'),
}

async function describeConfigSettings(request: DescribeConfigSettingsRequest): DescribeConfigSettingsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeConfigSettingsWithOptions(request, headers, runtime);
}

async function describeConfigSettingsWithOptions(request: DescribeConfigSettingsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeConfigSettingsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    query.EnvId = request.envId;
  }
  if (!Util.isUnset(request.templateId)) {
    query.TemplateId = request.templateId;
  }
  if (!Util.isUnset(request.pathName)) {
    query.PathName = request.pathName;
  }
  if (!Util.isUnset(request.optionName)) {
    query.OptionName = request.optionName;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeConfigSettings', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/config/configSetting`, 'json', req, runtime);
}

model DescribeConfigTemplatesRequest {
  appId?: string(name='AppId'),
  templateName?: string(name='TemplateName'),
  templateSearch?: string(name='TemplateSearch'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  regionId?: string(name='RegionId'),
}

model DescribeConfigTemplatesResponseBody = {
  configTemplates?: {
    configTemplate?: [ 
    {
      templateDescription?: string(name='TemplateDescription'),
      appName?: string(name='AppName'),
      updateTime?: long(name='UpdateTime'),
      stackId?: string(name='StackId'),
      pkgVersionLabel?: string(name='PkgVersionLabel'),
      createTime?: long(name='CreateTime'),
      appId?: string(name='AppId'),
      stackName?: string(name='StackName'),
      pkgVersionId?: string(name='PkgVersionId'),
      templateName?: string(name='TemplateName'),
      templateId?: string(name='TemplateId'),
    }
  ](name='ConfigTemplate')
  }(name='ConfigTemplates'),
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  code?: string(name='Code'),
}

model DescribeConfigTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeConfigTemplatesResponseBody(name='body'),
}

async function describeConfigTemplates(request: DescribeConfigTemplatesRequest): DescribeConfigTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeConfigTemplatesWithOptions(request, headers, runtime);
}

async function describeConfigTemplatesWithOptions(request: DescribeConfigTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeConfigTemplatesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    query.AppId = request.appId;
  }
  if (!Util.isUnset(request.templateName)) {
    query.TemplateName = request.templateName;
  }
  if (!Util.isUnset(request.templateSearch)) {
    query.TemplateSearch = request.templateSearch;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeConfigTemplates', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/configTemplate`, 'json', req, runtime);
}

model DescribeEnvResourceRequest {
  envId?: string(name='EnvId'),
  regionId?: string(name='RegionId'),
}

model DescribeEnvResourceResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  envResource?: {
    launchTemplateId?: string(name='LaunchTemplateId'),
    envName?: string(name='EnvName'),
    vSwitches?: {
      vSwitch?: [ 
      {
        id?: string(name='Id'),
      }
    ](name='VSwitch')
    }(name='VSwitches'),
    vpc?: {
      id?: string(name='Id'),
    }(name='Vpc'),
    monitorGroup?: {
      id?: string(name='Id'),
    }(name='MonitorGroup'),
    launchConfigurationId?: string(name='LaunchConfigurationId'),
    loadBalancers?: {
      loadBalancer?: [ 
      {
        imported?: boolean(name='Imported'),
        protocol?: string(name='Protocol'),
        addressType?: string(name='AddressType'),
        listeners?: {
          listener?: [ 
          {
            protocol?: string(name='Protocol'),
            port?: int32(name='Port'),
          }
        ](name='Listener')
        }(name='Listeners'),
        port?: int32(name='Port'),
        id?: string(name='Id'),
      }
    ](name='LoadBalancer')
    }(name='LoadBalancers'),
    instances?: {
      instance?: [ 
      {
        imported?: boolean(name='Imported'),
        id?: string(name='Id'),
      }
    ](name='Instance')
    }(name='Instances'),
    defaultSecurityGroups?: {
      securityGroup?: [ 
      {
        id?: string(name='Id'),
      }
    ](name='SecurityGroup')
    }(name='DefaultSecurityGroups'),
    scalingGroup?: {
      id?: string(name='Id'),
    }(name='ScalingGroup'),
    domains?: {
      domain?: [ 
      {
        isDefault?: boolean(name='IsDefault'),
        hostedBy?: string(name='HostedBy'),
        subDomain?: string(name='SubDomain'),
        domainName?: string(name='DomainName'),
        managedBy?: string(name='ManagedBy'),
      }
    ](name='Domain')
    }(name='Domains'),
    rdsInstances?: {
      rdsInstance?: [ 
      {
        imported?: boolean(name='Imported'),
        databaseName?: string(name='DatabaseName'),
        id?: string(name='Id'),
        accountName?: string(name='AccountName'),
      }
    ](name='RdsInstance')
    }(name='RdsInstances'),
    envId?: string(name='EnvId'),
  }(name='EnvResource'),
}

model DescribeEnvResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnvResourceResponseBody(name='body'),
}

async function describeEnvResource(request: DescribeEnvResourceRequest): DescribeEnvResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeEnvResourceWithOptions(request, headers, runtime);
}

async function describeEnvResourceWithOptions(request: DescribeEnvResourceRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeEnvResourceResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    query.EnvId = request.envId;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeEnvResource', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/envResource`, 'json', req, runtime);
}

model DescribeEventsRequest {
  envId?: string(name='EnvId'),
  startTime?: long(name='StartTime'),
  endTime?: long(name='EndTime'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  changeId?: string(name='ChangeId'),
  lastChangeEvents?: boolean(name='LastChangeEvents'),
  reverseByTimestamp?: boolean(name='ReverseByTimestamp'),
  regionId?: string(name='RegionId'),
}

model DescribeEventsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  events?: {
    event?: [ 
    {
      primaryUserName?: string(name='PrimaryUserName'),
      objectType?: string(name='ObjectType'),
      enventName?: string(name='EnventName'),
      eventTimestamp?: long(name='EventTimestamp'),
      secondUserName?: string(name='SecondUserName'),
      msgCode?: string(name='MsgCode'),
      objectName?: string(name='ObjectName'),
      eventMessage?: string(name='EventMessage'),
      eventId?: string(name='EventId'),
      objectAttrs?: {
        objectAttr?: [ 
        {
          attributeName?: string(name='AttributeName'),
          attributeValue?: string(name='AttributeValue'),
        }
      ](name='ObjectAttr')
      }(name='ObjectAttrs'),
      appId?: string(name='AppId'),
      eventLevel?: string(name='EventLevel'),
      objectId?: string(name='ObjectId'),
      msgParams?: {
        msgParam?: [ string ](name='MsgParam')
      }(name='MsgParams'),
      primaryUserId?: string(name='PrimaryUserId'),
      envId?: string(name='EnvId'),
      traceId?: string(name='TraceId'),
      secondUserId?: string(name='SecondUserId'),
    }
  ](name='Event')
  }(name='Events'),
  code?: string(name='Code'),
}

model DescribeEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventsResponseBody(name='body'),
}

async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeEventsWithOptions(request, headers, runtime);
}

async function describeEventsWithOptions(request: DescribeEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeEventsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    query.EnvId = request.envId;
  }
  if (!Util.isUnset(request.startTime)) {
    query.StartTime = request.startTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query.EndTime = request.endTime;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.changeId)) {
    query.ChangeId = request.changeId;
  }
  if (!Util.isUnset(request.lastChangeEvents)) {
    query.LastChangeEvents = request.lastChangeEvents;
  }
  if (!Util.isUnset(request.reverseByTimestamp)) {
    query.ReverseByTimestamp = request.reverseByTimestamp;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeEvents', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/event`, 'json', req, runtime);
}

model DescribeGatherLogResultRequest {
  changeId?: string(name='ChangeId'),
  regionId?: string(name='RegionId'),
}

model DescribeGatherLogResultResponseBody = {
  gatherLogResult?: {
    logPath?: string(name='LogPath'),
    change?: {
      changePaused?: boolean(name='ChangePaused'),
      changeDescription?: string(name='ChangeDescription'),
      finishTime?: long(name='FinishTime'),
      updateTime?: long(name='UpdateTime'),
      changeTimedout?: boolean(name='ChangeTimedout'),
      createTime?: long(name='CreateTime'),
      changeMessage?: string(name='ChangeMessage'),
      actionName?: string(name='ActionName'),
      changeFinished?: boolean(name='ChangeFinished'),
      createUsername?: string(name='CreateUsername'),
      changeSucceeded?: boolean(name='ChangeSucceeded'),
      changeId?: string(name='ChangeId'),
      changeAborted?: boolean(name='ChangeAborted'),
      envId?: string(name='EnvId'),
      changeName?: string(name='ChangeName'),
    }(name='Change'),
    instanceResults?: {
      instanceResult?: [ 
      {
        taskMessage?: string(name='TaskMessage'),
        storageKey?: string(name='StorageKey'),
        instanceId?: string(name='InstanceId'),
        taskSucceeded?: boolean(name='TaskSucceeded'),
      }
    ](name='InstanceResult')
    }(name='InstanceResults'),
  }(name='GatherLogResult'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model DescribeGatherLogResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGatherLogResultResponseBody(name='body'),
}

async function describeGatherLogResult(request: DescribeGatherLogResultRequest): DescribeGatherLogResultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeGatherLogResultWithOptions(request, headers, runtime);
}

async function describeGatherLogResultWithOptions(request: DescribeGatherLogResultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeGatherLogResultResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.changeId)) {
    query.ChangeId = request.changeId;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeGatherLogResult', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/appEnv/gatherLog`, 'json', req, runtime);
}

model DescribeGatherStatsResultRequest {
  changeId?: string(name='ChangeId'),
  regionId?: string(name='RegionId'),
}

model DescribeGatherStatsResultResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  gatherStatsResult?: {
    change?: {
      changePaused?: boolean(name='ChangePaused'),
      changeDescription?: string(name='ChangeDescription'),
      finishTime?: long(name='FinishTime'),
      updateTime?: long(name='UpdateTime'),
      changeTimedout?: boolean(name='ChangeTimedout'),
      createTime?: long(name='CreateTime'),
      changeMessage?: string(name='ChangeMessage'),
      actionName?: string(name='ActionName'),
      changeFinished?: boolean(name='ChangeFinished'),
      createUsername?: string(name='CreateUsername'),
      changeSucceeded?: boolean(name='ChangeSucceeded'),
      changeId?: string(name='ChangeId'),
      changeAborted?: boolean(name='ChangeAborted'),
      envId?: string(name='EnvId'),
      changeName?: string(name='ChangeName'),
    }(name='Change'),
    instanceResults?: {
      instanceResult?: [ 
      {
        taskMessage?: string(name='TaskMessage'),
        storageKey?: string(name='StorageKey'),
        instanceId?: string(name='InstanceId'),
        taskSucceeded?: boolean(name='TaskSucceeded'),
      }
    ](name='InstanceResult')
    }(name='InstanceResults'),
  }(name='GatherStatsResult'),
  code?: string(name='Code'),
}

model DescribeGatherStatsResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGatherStatsResultResponseBody(name='body'),
}

async function describeGatherStatsResult(request: DescribeGatherStatsResultRequest): DescribeGatherStatsResultResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeGatherStatsResultWithOptions(request, headers, runtime);
}

async function describeGatherStatsResultWithOptions(request: DescribeGatherStatsResultRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeGatherStatsResultResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.changeId)) {
    query.ChangeId = request.changeId;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeGatherStatsResult', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/appEnv/gatherStats`, 'json', req, runtime);
}

model DescribeInstanceHealthRequest {
  instanceId?: string(name='InstanceId'),
  regionId?: string(name='RegionId'),
}

model DescribeInstanceHealthResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  instanceHealth?: {
    appStatus?: string(name='AppStatus'),
    instanceId?: string(name='InstanceId'),
    disconnectedTime?: long(name='DisconnectedTime'),
    agentStatus?: string(name='AgentStatus'),
  }(name='InstanceHealth'),
  code?: string(name='Code'),
}

model DescribeInstanceHealthResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceHealthResponseBody(name='body'),
}

async function describeInstanceHealth(request: DescribeInstanceHealthRequest): DescribeInstanceHealthResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeInstanceHealthWithOptions(request, headers, runtime);
}

async function describeInstanceHealthWithOptions(request: DescribeInstanceHealthRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeInstanceHealthResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.instanceId)) {
    query.InstanceId = request.instanceId;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeInstanceHealth', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/instance/health`, 'json', req, runtime);
}

model DescribePkgVersionsRequest {
  appId?: string(name='AppId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  pkgVersionLabel?: string(name='PkgVersionLabel'),
  pkgVersionSearch?: string(name='PkgVersionSearch'),
  regionId?: string(name='RegionId'),
}

model DescribePkgVersionsResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  pkgVersions?: {
    pkgVersion?: [ 
    {
      createUsername?: string(name='CreateUsername'),
      appName?: string(name='AppName'),
      updateTime?: long(name='UpdateTime'),
      pkgVersionLabel?: string(name='PkgVersionLabel'),
      createTime?: long(name='CreateTime'),
      packageSource?: string(name='PackageSource'),
      appId?: string(name='AppId'),
      packageETag?: string(name='PackageETag'),
      pkgVersionId?: string(name='PkgVersionId'),
      pkgVersionDescription?: string(name='PkgVersionDescription'),
    }
  ](name='PkgVersion')
  }(name='PkgVersions'),
  code?: string(name='Code'),
}

model DescribePkgVersionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePkgVersionsResponseBody(name='body'),
}

async function describePkgVersions(request: DescribePkgVersionsRequest): DescribePkgVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describePkgVersionsWithOptions(request, headers, runtime);
}

async function describePkgVersionsWithOptions(request: DescribePkgVersionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribePkgVersionsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    query.AppId = request.appId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.pkgVersionLabel)) {
    query.PkgVersionLabel = request.pkgVersionLabel;
  }
  if (!Util.isUnset(request.pkgVersionSearch)) {
    query.PkgVersionSearch = request.pkgVersionSearch;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribePkgVersions', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/pkgVersion`, 'json', req, runtime);
}

model DescribePublicConfigTemplatesRequest {
  categoryName?: string(name='CategoryName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  regionId?: string(name='RegionId'),
}

model DescribePublicConfigTemplatesResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  publicConfigTemplates?: {
    publicConfigTemplate?: [ 
    {
      templateDescription?: string(name='TemplateDescription'),
      updateTime?: long(name='UpdateTime'),
      stackId?: string(name='StackId'),
      templateLogo?: string(name='TemplateLogo'),
      createTime?: long(name='CreateTime'),
      packageSource?: string(name='PackageSource'),
      stackName?: string(name='StackName'),
      templateName?: string(name='TemplateName'),
      categoryName?: string(name='CategoryName'),
      templateId?: string(name='TemplateId'),
    }
  ](name='PublicConfigTemplate')
  }(name='PublicConfigTemplates'),
  code?: string(name='Code'),
}

model DescribePublicConfigTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePublicConfigTemplatesResponseBody(name='body'),
}

async function describePublicConfigTemplates(request: DescribePublicConfigTemplatesRequest): DescribePublicConfigTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describePublicConfigTemplatesWithOptions(request, headers, runtime);
}

async function describePublicConfigTemplatesWithOptions(request: DescribePublicConfigTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribePublicConfigTemplatesResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.categoryName)) {
    query.CategoryName = request.categoryName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribePublicConfigTemplates', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/publicConfigTemplate`, 'json', req, runtime);
}

model DescribeStacksRequest {
  recommendedOnly?: boolean(name='RecommendedOnly'),
  categoryName?: string(name='CategoryName'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  regionId?: string(name='RegionId'),
}

model DescribeStacksResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  stacks?: {
    stack?: [ 
    {
      updateTime?: long(name='UpdateTime'),
      stackId?: string(name='StackId'),
      createTime?: long(name='CreateTime'),
      recommendedStack?: boolean(name='RecommendedStack'),
      stackName?: string(name='StackName'),
      categoryName?: string(name='CategoryName'),
      versionCode?: int32(name='VersionCode'),
      latestStack?: boolean(name='LatestStack'),
    }
  ](name='Stack')
  }(name='Stacks'),
  code?: string(name='Code'),
}

model DescribeStacksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStacksResponseBody(name='body'),
}

async function describeStacks(request: DescribeStacksRequest): DescribeStacksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeStacksWithOptions(request, headers, runtime);
}

async function describeStacksWithOptions(request: DescribeStacksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeStacksResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.recommendedOnly)) {
    query.RecommendedOnly = request.recommendedOnly;
  }
  if (!Util.isUnset(request.categoryName)) {
    query.CategoryName = request.categoryName;
  }
  if (!Util.isUnset(request.pageSize)) {
    query.PageSize = request.pageSize;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query.PageNumber = request.pageNumber;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeStacks', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/stack`, 'json', req, runtime);
}

model DescribeStorageRequest {
  usingSharedStorage?: boolean(name='UsingSharedStorage'),
  regionId?: string(name='RegionId'),
}

model DescribeStorageResponseBody = {
  storage?: {
    updateTime?: long(name='UpdateTime'),
    keyPrefix?: string(name='KeyPrefix'),
    pkgKeyPrefix?: string(name='PkgKeyPrefix'),
    createTime?: long(name='CreateTime'),
    bucketName?: string(name='BucketName'),
  }(name='Storage'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model DescribeStorageResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeStorageResponseBody(name='body'),
}

async function describeStorage(request: DescribeStorageRequest): DescribeStorageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return describeStorageWithOptions(request, headers, runtime);
}

async function describeStorageWithOptions(request: DescribeStorageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DescribeStorageResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.usingSharedStorage)) {
    query.UsingSharedStorage = request.usingSharedStorage;
  }
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  return doROARequest('DescribeStorage', '2019-03-20', 'HTTPS', 'GET', 'AK', `/pop/v1/wam/storage`, 'json', req, runtime);
}

model GatherAppEnvLogRequest {
  envId?: string(name='EnvId'),
  targetInstances?: string(name='TargetInstances'),
  logPath?: string(name='LogPath'),
  regionId?: string(name='RegionId'),
}

model GatherAppEnvLogResponseBody = {
  envChange?: {
    startTime?: string(name='StartTime'),
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model GatherAppEnvLogResponse = {
  headers: map[string]string(name='headers'),
  body: GatherAppEnvLogResponseBody(name='body'),
}

async function gatherAppEnvLog(request: GatherAppEnvLogRequest): GatherAppEnvLogResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return gatherAppEnvLogWithOptions(request, headers, runtime);
}

async function gatherAppEnvLogWithOptions(request: GatherAppEnvLogRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GatherAppEnvLogResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    body.EnvId = request.envId;
  }
  if (!Util.isUnset(request.targetInstances)) {
    body.TargetInstances = request.targetInstances;
  }
  if (!Util.isUnset(request.logPath)) {
    body.LogPath = request.logPath;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('GatherAppEnvLog', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/appEnv/gatherLog`, 'json', req, runtime);
}

model GatherAppEnvStatsRequest {
  envId?: string(name='EnvId'),
  targetInstances?: string(name='TargetInstances'),
  regionId?: string(name='RegionId'),
}

model GatherAppEnvStatsResponseBody = {
  envChange?: {
    startTime?: string(name='StartTime'),
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model GatherAppEnvStatsResponse = {
  headers: map[string]string(name='headers'),
  body: GatherAppEnvStatsResponseBody(name='body'),
}

async function gatherAppEnvStats(request: GatherAppEnvStatsRequest): GatherAppEnvStatsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return gatherAppEnvStatsWithOptions(request, headers, runtime);
}

async function gatherAppEnvStatsWithOptions(request: GatherAppEnvStatsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GatherAppEnvStatsResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    body.EnvId = request.envId;
  }
  if (!Util.isUnset(request.targetInstances)) {
    body.TargetInstances = request.targetInstances;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('GatherAppEnvStats', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/appEnv/gatherStats`, 'json', req, runtime);
}

model PauseChangeRequest {
  changeId?: string(name='ChangeId'),
  regionId?: string(name='RegionId'),
}

model PauseChangeResponseBody = {
  envChange?: {
    startTime?: string(name='StartTime'),
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model PauseChangeResponse = {
  headers: map[string]string(name='headers'),
  body: PauseChangeResponseBody(name='body'),
}

async function pauseChange(request: PauseChangeRequest): PauseChangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return pauseChangeWithOptions(request, headers, runtime);
}

async function pauseChangeWithOptions(request: PauseChangeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PauseChangeResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.changeId)) {
    body.ChangeId = request.changeId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('PauseChange', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/change/pause`, 'json', req, runtime);
}

model RebuildAppEnvRequest {
  envId?: string(name='EnvId'),
  dryRun?: boolean(name='DryRun'),
  regionId?: string(name='RegionId'),
}

model RebuildAppEnvResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  envChangeDetail?: {
    startTime?: string(name='StartTime'),
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    operations?: {
      operation?: [ 
      {
        operationDescription?: string(name='OperationDescription'),
        operationType?: string(name='OperationType'),
      }
    ](name='Operation')
    }(name='Operations'),
  }(name='EnvChangeDetail'),
  code?: string(name='Code'),
}

model RebuildAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: RebuildAppEnvResponseBody(name='body'),
}

async function rebuildAppEnv(request: RebuildAppEnvRequest): RebuildAppEnvResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return rebuildAppEnvWithOptions(request, headers, runtime);
}

async function rebuildAppEnvWithOptions(request: RebuildAppEnvRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RebuildAppEnvResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    body.EnvId = request.envId;
  }
  if (!Util.isUnset(request.dryRun)) {
    body.DryRun = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('RebuildAppEnv', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/appEnv/rebuild`, 'json', req, runtime);
}

model RestartAppEnvRequest {
  envId?: string(name='EnvId'),
  batchSize?: int32(name='BatchSize'),
  batchPercent?: int32(name='BatchPercent'),
  batchInterval?: int32(name='BatchInterval'),
  pauseBetweenBatches?: boolean(name='PauseBetweenBatches'),
  regionId?: string(name='RegionId'),
}

model RestartAppEnvResponseBody = {
  envChange?: {
    startTime?: string(name='StartTime'),
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model RestartAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: RestartAppEnvResponseBody(name='body'),
}

async function restartAppEnv(request: RestartAppEnvRequest): RestartAppEnvResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return restartAppEnvWithOptions(request, headers, runtime);
}

async function restartAppEnvWithOptions(request: RestartAppEnvRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RestartAppEnvResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    body.EnvId = request.envId;
  }
  if (!Util.isUnset(request.batchSize)) {
    body.BatchSize = request.batchSize;
  }
  if (!Util.isUnset(request.batchPercent)) {
    body.BatchPercent = request.batchPercent;
  }
  if (!Util.isUnset(request.batchInterval)) {
    body.BatchInterval = request.batchInterval;
  }
  if (!Util.isUnset(request.pauseBetweenBatches)) {
    body.PauseBetweenBatches = request.pauseBetweenBatches;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('RestartAppEnv', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/appEnv/restart`, 'json', req, runtime);
}

model ResumeChangeRequest {
  changeId?: string(name='ChangeId'),
  regionId?: string(name='RegionId'),
}

model ResumeChangeResponseBody = {
  envChange?: {
    startTime?: string(name='StartTime'),
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model ResumeChangeResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeChangeResponseBody(name='body'),
}

async function resumeChange(request: ResumeChangeRequest): ResumeChangeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resumeChangeWithOptions(request, headers, runtime);
}

async function resumeChangeWithOptions(request: ResumeChangeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeChangeResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.changeId)) {
    body.ChangeId = request.changeId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('ResumeChange', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/change/resume`, 'json', req, runtime);
}

model StartAppEnvRequest {
  envId?: string(name='EnvId'),
  regionId?: string(name='RegionId'),
}

model StartAppEnvResponseBody = {
  envChange?: {
    startTime?: string(name='StartTime'),
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model StartAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: StartAppEnvResponseBody(name='body'),
}

async function startAppEnv(request: StartAppEnvRequest): StartAppEnvResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startAppEnvWithOptions(request, headers, runtime);
}

async function startAppEnvWithOptions(request: StartAppEnvRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StartAppEnvResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    body.EnvId = request.envId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('StartAppEnv', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/appEnv/start`, 'json', req, runtime);
}

model StopAppEnvRequest {
  envId?: string(name='EnvId'),
  regionId?: string(name='RegionId'),
}

model StopAppEnvResponseBody = {
  envChange?: {
    startTime?: string(name='StartTime'),
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
  }(name='EnvChange'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model StopAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: StopAppEnvResponseBody(name='body'),
}

async function stopAppEnv(request: StopAppEnvRequest): StopAppEnvResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return stopAppEnvWithOptions(request, headers, runtime);
}

async function stopAppEnvWithOptions(request: StopAppEnvRequest, headers: map[string]string, runtime: Util.RuntimeOptions): StopAppEnvResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    body.EnvId = request.envId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('StopAppEnv', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/appEnv/stop`, 'json', req, runtime);
}

model TerminateAppEnvRequest {
  envId?: string(name='EnvId'),
  dryRun?: string(name='DryRun'),
  regionId?: string(name='RegionId'),
}

model TerminateAppEnvResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  envChangeDetail?: {
    startTime?: string(name='StartTime'),
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    operations?: {
      operation?: [ 
      {
        operationDescription?: string(name='OperationDescription'),
        operationType?: string(name='OperationType'),
      }
    ](name='Operation')
    }(name='Operations'),
  }(name='EnvChangeDetail'),
  code?: string(name='Code'),
}

model TerminateAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: TerminateAppEnvResponseBody(name='body'),
}

async function terminateAppEnv(request: TerminateAppEnvRequest): TerminateAppEnvResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return terminateAppEnvWithOptions(request, headers, runtime);
}

async function terminateAppEnvWithOptions(request: TerminateAppEnvRequest, headers: map[string]string, runtime: Util.RuntimeOptions): TerminateAppEnvResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    body.EnvId = request.envId;
  }
  if (!Util.isUnset(request.dryRun)) {
    body.DryRun = request.dryRun;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('TerminateAppEnv', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/appEnv/terminate`, 'json', req, runtime);
}

model UpdateAppEnvRequest {
  envDescription?: string(name='EnvDescription'),
  envId?: string(name='EnvId'),
  pkgVersionId?: string(name='PkgVersionId'),
  optionSettings?: string(name='OptionSettings'),
  stackId?: string(name='StackId'),
  dryRun?: boolean(name='DryRun'),
  extraProperties?: string(name='ExtraProperties'),
  batchSize?: string(name='BatchSize'),
  batchPercent?: string(name='BatchPercent'),
  batchInterval?: string(name='BatchInterval'),
  pauseBetweenBatches?: boolean(name='PauseBetweenBatches'),
  regionId?: string(name='RegionId'),
}

model UpdateAppEnvResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  envChangeDetail?: {
    startTime?: string(name='StartTime'),
    changeId?: string(name='ChangeId'),
    envId?: string(name='EnvId'),
    operations?: {
      operation?: [ 
      {
        operationDescription?: string(name='OperationDescription'),
        operationType?: string(name='OperationType'),
      }
    ](name='Operation')
    }(name='Operations'),
  }(name='EnvChangeDetail'),
  code?: string(name='Code'),
}

model UpdateAppEnvResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAppEnvResponseBody(name='body'),
}

async function updateAppEnv(request: UpdateAppEnvRequest): UpdateAppEnvResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateAppEnvWithOptions(request, headers, runtime);
}

async function updateAppEnvWithOptions(request: UpdateAppEnvRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAppEnvResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.envDescription)) {
    body.EnvDescription = request.envDescription;
  }
  if (!Util.isUnset(request.envId)) {
    body.EnvId = request.envId;
  }
  if (!Util.isUnset(request.pkgVersionId)) {
    body.PkgVersionId = request.pkgVersionId;
  }
  if (!Util.isUnset(request.optionSettings)) {
    body.OptionSettings = request.optionSettings;
  }
  if (!Util.isUnset(request.stackId)) {
    body.StackId = request.stackId;
  }
  if (!Util.isUnset(request.dryRun)) {
    body.DryRun = request.dryRun;
  }
  if (!Util.isUnset(request.extraProperties)) {
    body.ExtraProperties = request.extraProperties;
  }
  if (!Util.isUnset(request.batchSize)) {
    body.BatchSize = request.batchSize;
  }
  if (!Util.isUnset(request.batchPercent)) {
    body.BatchPercent = request.batchPercent;
  }
  if (!Util.isUnset(request.batchInterval)) {
    body.BatchInterval = request.batchInterval;
  }
  if (!Util.isUnset(request.pauseBetweenBatches)) {
    body.PauseBetweenBatches = request.pauseBetweenBatches;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('UpdateAppEnv', '2019-03-20', 'HTTPS', 'PUT', 'AK', `/pop/v1/wam/appEnv`, 'json', req, runtime);
}

model UpdateApplicationRequest {
  appId?: string(name='AppId'),
  appDescription?: string(name='AppDescription'),
  regionId?: string(name='RegionId'),
}

model UpdateApplicationResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
  application?: {
    appName?: string(name='AppName'),
    createUsername?: string(name='CreateUsername'),
    updateTime?: long(name='UpdateTime'),
    updateUsername?: string(name='UpdateUsername'),
    createTime?: long(name='CreateTime'),
    appId?: string(name='AppId'),
    categoryName?: string(name='CategoryName'),
    appDescription?: string(name='AppDescription'),
  }(name='Application'),
}

model UpdateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateApplicationResponseBody(name='body'),
}

async function updateApplication(request: UpdateApplicationRequest): UpdateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateApplicationWithOptions(request, headers, runtime);
}

async function updateApplicationWithOptions(request: UpdateApplicationRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateApplicationResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.appId)) {
    body.AppId = request.appId;
  }
  if (!Util.isUnset(request.appDescription)) {
    body.AppDescription = request.appDescription;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('UpdateApplication', '2019-03-20', 'HTTPS', 'PUT', 'AK', `/pop/v1/wam/application`, 'json', req, runtime);
}

model UpdateConfigTemplateRequest {
  templateDescription?: string(name='TemplateDescription'),
  templateId?: string(name='TemplateId'),
  optionSettings?: string(name='OptionSettings'),
  regionId?: string(name='RegionId'),
}

model UpdateConfigTemplateResponseBody = {
  configTemplate?: {
    appName?: string(name='AppName'),
    updateTime?: long(name='UpdateTime'),
    stackId?: string(name='StackId'),
    createTime?: long(name='CreateTime'),
    appId?: string(name='AppId'),
    stackName?: string(name='StackName'),
    templateName?: string(name='TemplateName'),
    templateId?: string(name='TemplateId'),
  }(name='ConfigTemplate'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  code?: string(name='Code'),
}

model UpdateConfigTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateConfigTemplateResponseBody(name='body'),
}

async function updateConfigTemplate(request: UpdateConfigTemplateRequest): UpdateConfigTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateConfigTemplateWithOptions(request, headers, runtime);
}

async function updateConfigTemplateWithOptions(request: UpdateConfigTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateConfigTemplateResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.templateDescription)) {
    body.TemplateDescription = request.templateDescription;
  }
  if (!Util.isUnset(request.templateId)) {
    body.TemplateId = request.templateId;
  }
  if (!Util.isUnset(request.optionSettings)) {
    body.OptionSettings = request.optionSettings;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('UpdateConfigTemplate', '2019-03-20', 'HTTPS', 'PUT', 'AK', `/pop/v1/wam/configTemplate`, 'json', req, runtime);
}

model ValidateConfigSettingRequest {
  envId?: string(name='EnvId'),
  templateId?: string(name='TemplateId'),
  stackId?: string(name='StackId'),
  optionSettings?: string(name='OptionSettings'),
  regionId?: string(name='RegionId'),
}

model ValidateConfigSettingResponseBody = {
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  configValidationResults?: {
    configValidationResult?: [ 
    {
      optionName?: string(name='OptionName'),
      pathName?: string(name='PathName'),
      resultMessage?: string(name='ResultMessage'),
      resultSeverity?: string(name='ResultSeverity'),
      configOption?: {
        regexDesc?: string(name='RegexDesc'),
        maxValue?: long(name='MaxValue'),
        editorType?: string(name='EditorType'),
        minValue?: long(name='MinValue'),
        defaultValue?: string(name='DefaultValue'),
        maxLength?: int32(name='MaxLength'),
        optionLabel?: string(name='OptionLabel'),
        regexPattern?: string(name='RegexPattern'),
        changeSeverity?: string(name='ChangeSeverity'),
        optionDescription?: string(name='OptionDescription'),
        optionName?: string(name='OptionName'),
        pathName?: string(name='PathName'),
        hiddenOption?: boolean(name='HiddenOption'),
        valueType?: string(name='ValueType'),
        minLength?: int32(name='MinLength'),
        valueOptions?: string(name='ValueOptions'),
        readonlyOption?: boolean(name='ReadonlyOption'),
      }(name='ConfigOption'),
    }
  ](name='ConfigValidationResult')
  }(name='ConfigValidationResults'),
  code?: string(name='Code'),
}

model ValidateConfigSettingResponse = {
  headers: map[string]string(name='headers'),
  body: ValidateConfigSettingResponseBody(name='body'),
}

async function validateConfigSetting(request: ValidateConfigSettingRequest): ValidateConfigSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return validateConfigSettingWithOptions(request, headers, runtime);
}

async function validateConfigSettingWithOptions(request: ValidateConfigSettingRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ValidateConfigSettingResponse {
  Util.validateModel(request);
  var query : map[string]any= {};
  if (!Util.isUnset(request.regionId)) {
    query.RegionId = request.regionId;
  }

  var body : map[string]any= {};
  if (!Util.isUnset(request.envId)) {
    body.EnvId = request.envId;
  }
  if (!Util.isUnset(request.templateId)) {
    body.TemplateId = request.templateId;
  }
  if (!Util.isUnset(request.stackId)) {
    body.StackId = request.stackId;
  }
  if (!Util.isUnset(request.optionSettings)) {
    body.OptionSettings = request.optionSettings;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('ValidateConfigSetting', '2019-03-20', 'HTTPS', 'POST', 'AK', `/pop/v1/wam/config/configSetting/validate`, 'json', req, runtime);
}

