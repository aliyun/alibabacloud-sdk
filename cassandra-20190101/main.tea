/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  

  checkConfig(config);
  @endpoint = getEndpoint('cassandra', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AllocatePublicContactPointsRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
  clientToken?: string(name='ClientToken'),
}

model AllocatePublicContactPointsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocatePublicContactPointsResponse = {
  headers: map[string]string(name='headers'),
  body: AllocatePublicContactPointsResponseBody(name='body'),
}

async function allocatePublicContactPointsWithOptions(request: AllocatePublicContactPointsRequest, runtime: Util.RuntimeOptions): AllocatePublicContactPointsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocatePublicContactPoints', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocatePublicContactPoints(request: AllocatePublicContactPointsRequest): AllocatePublicContactPointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocatePublicContactPointsWithOptions(request, runtime);
}

model CreateBackupPlanRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
  backupTime?: string(name='BackupTime'),
  backupPeriod?: string(name='BackupPeriod'),
  retentionPeriod?: int32(name='RetentionPeriod'),
  active?: boolean(name='Active'),
  clientToken?: string(name='ClientToken'),
}

model CreateBackupPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupPlanResponseBody(name='body'),
}

async function createBackupPlanWithOptions(request: CreateBackupPlanRequest, runtime: Util.RuntimeOptions): CreateBackupPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateBackupPlan', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createBackupPlan(request: CreateBackupPlanRequest): CreateBackupPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return createBackupPlanWithOptions(request, runtime);
}

model CreateClusterRequest {
  payType?: string(name='PayType'),
  periodUnit?: string(name='PeriodUnit'),
  period?: int32(name='Period'),
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  clusterName?: string(name='ClusterName'),
  dataCenterName?: string(name='DataCenterName'),
  majorVersion?: string(name='MajorVersion'),
  instanceType?: string(name='InstanceType'),
  nodeCount?: int32(name='NodeCount'),
  diskType?: string(name='DiskType'),
  diskSize?: int32(name='DiskSize'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId'),
  password?: string(name='Password'),
  resourceGroupId?: string(name='ResourceGroupId'),
}

model CreateClusterResponseBody = {
  requestId?: string(name='RequestId'),
  clusterId?: string(name='ClusterId'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterResponseBody(name='body'),
}

async function createClusterWithOptions(request: CreateClusterRequest, runtime: Util.RuntimeOptions): CreateClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCluster', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createClusterWithOptions(request, runtime);
}

model CreateDataCenterRequest {
  payType?: string(name='PayType'),
  periodUnit?: string(name='PeriodUnit'),
  period?: int32(name='Period'),
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  clusterId?: string(name='ClusterId'),
  dataCenterName?: string(name='DataCenterName'),
  instanceType?: string(name='InstanceType'),
  nodeCount?: int32(name='NodeCount'),
  diskType?: string(name='DiskType'),
  diskSize?: int32(name='DiskSize'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId'),
}

model CreateDataCenterResponseBody = {
  dataCenterId?: string(name='DataCenterId'),
  requestId?: string(name='RequestId'),
}

model CreateDataCenterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataCenterResponseBody(name='body'),
}

async function createDataCenterWithOptions(request: CreateDataCenterRequest, runtime: Util.RuntimeOptions): CreateDataCenterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDataCenter', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDataCenter(request: CreateDataCenterRequest): CreateDataCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDataCenterWithOptions(request, runtime);
}

model DeleteBackupPlanRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
}

model DeleteBackupPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupPlanResponseBody(name='body'),
}

async function deleteBackupPlanWithOptions(request: DeleteBackupPlanRequest, runtime: Util.RuntimeOptions): DeleteBackupPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteBackupPlan', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteBackupPlan(request: DeleteBackupPlanRequest): DeleteBackupPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteBackupPlanWithOptions(request, runtime);
}

model DeleteClusterRequest {
  clusterId?: string(name='ClusterId'),
}

model DeleteClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteClusterWithOptions(request: DeleteClusterRequest, runtime: Util.RuntimeOptions): DeleteClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCluster', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteClusterWithOptions(request, runtime);
}

model DeleteDataCenterRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
}

model DeleteDataCenterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDataCenterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataCenterResponseBody(name='body'),
}

async function deleteDataCenterWithOptions(request: DeleteDataCenterRequest, runtime: Util.RuntimeOptions): DeleteDataCenterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDataCenter', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDataCenter(request: DeleteDataCenterRequest): DeleteDataCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDataCenterWithOptions(request, runtime);
}

model DeleteNodeToolExecutionHistoryRequest {
  clusterId?: string(name='ClusterId'),
  jobId?: string(name='JobId'),
  dataCenterId?: string(name='DataCenterId'),
}

model DeleteNodeToolExecutionHistoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNodeToolExecutionHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNodeToolExecutionHistoryResponseBody(name='body'),
}

async function deleteNodeToolExecutionHistoryWithOptions(request: DeleteNodeToolExecutionHistoryRequest, runtime: Util.RuntimeOptions): DeleteNodeToolExecutionHistoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteNodeToolExecutionHistory', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteNodeToolExecutionHistory(request: DeleteNodeToolExecutionHistoryRequest): DeleteNodeToolExecutionHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteNodeToolExecutionHistoryWithOptions(request, runtime);
}

model DescribeAccountsRequest {
  clusterId?: string(name='ClusterId'),
}

model DescribeAccountsResponseBody = {
  requestId?: string(name='RequestId'),
  accounts?: {
    account?: [ 
    {
      name?: string(name='Name'),
    }
  ](name='Account')
  }(name='Accounts'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccountsWithOptions(request: DescribeAccountsRequest, runtime: Util.RuntimeOptions): DescribeAccountsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAccounts', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAccountsWithOptions(request, runtime);
}

model DescribeBackupRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
  backupId?: string(name='BackupId'),
  backupType?: string(name='BackupType'),
}

model DescribeBackupResponseBody = {
  requestId?: string(name='RequestId'),
  backup?: {
    endTime?: string(name='EndTime'),
    status?: string(name='Status'),
    startTime?: string(name='StartTime'),
    size?: long(name='Size'),
    backupType?: string(name='BackupType'),
    backupId?: string(name='BackupId'),
    details?: string(name='Details'),
    dataCenterId?: string(name='DataCenterId'),
    clusterId?: string(name='ClusterId'),
  }(name='Backup'),
}

model DescribeBackupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupResponseBody(name='body'),
}

async function describeBackupWithOptions(request: DescribeBackupRequest, runtime: Util.RuntimeOptions): DescribeBackupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackup', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackup(request: DescribeBackupRequest): DescribeBackupResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupWithOptions(request, runtime);
}

model DescribeBackupPlanRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
}

model DescribeBackupPlanResponseBody = {
  requestId?: string(name='RequestId'),
  backupPlan?: {
    active?: boolean(name='Active'),
    backupPeriod?: string(name='BackupPeriod'),
    retentionPeriod?: int32(name='RetentionPeriod'),
    createdTime?: string(name='CreatedTime'),
    backupTime?: string(name='BackupTime'),
    clusterId?: string(name='ClusterId'),
    dataCenterId?: string(name='DataCenterId'),
  }(name='BackupPlan'),
}

model DescribeBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPlanResponseBody(name='body'),
}

async function describeBackupPlanWithOptions(request: DescribeBackupPlanRequest, runtime: Util.RuntimeOptions): DescribeBackupPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupPlan', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupPlan(request: DescribeBackupPlanRequest): DescribeBackupPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPlanWithOptions(request, runtime);
}

model DescribeBackupPlansRequest {
  clusterId?: string(name='ClusterId'),
}

model DescribeBackupPlansResponseBody = {
  requestId?: string(name='RequestId'),
  backupPlans?: {
    backupPlan?: [ 
    {
      active?: boolean(name='Active'),
      backupPeriod?: string(name='BackupPeriod'),
      retentionPeriod?: int32(name='RetentionPeriod'),
      createdTime?: string(name='CreatedTime'),
      backupTime?: string(name='BackupTime'),
      clusterId?: string(name='ClusterId'),
      dataCenterId?: string(name='DataCenterId'),
    }
  ](name='BackupPlan')
  }(name='BackupPlans'),
}

model DescribeBackupPlansResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPlansResponseBody(name='body'),
}

async function describeBackupPlansWithOptions(request: DescribeBackupPlansRequest, runtime: Util.RuntimeOptions): DescribeBackupPlansResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackupPlans', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackupPlans(request: DescribeBackupPlansRequest): DescribeBackupPlansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupPlansWithOptions(request, runtime);
}

model DescribeBackupsRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
  backupType?: string(name='BackupType'),
}

model DescribeBackupsResponseBody = {
  requestId?: string(name='RequestId'),
  backups?: {
    backup?: [ 
    {
      endTime?: string(name='EndTime'),
      status?: string(name='Status'),
      startTime?: string(name='StartTime'),
      size?: long(name='Size'),
      backupType?: string(name='BackupType'),
      backupId?: string(name='BackupId'),
      clusterId?: string(name='ClusterId'),
      dataCenterId?: string(name='DataCenterId'),
    }
  ](name='Backup')
  }(name='Backups'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupsResponseBody(name='body'),
}

async function describeBackupsWithOptions(request: DescribeBackupsRequest, runtime: Util.RuntimeOptions): DescribeBackupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBackups', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBackupsWithOptions(request, runtime);
}

model DescribeClusterRequest {
  clusterId?: string(name='ClusterId'),
}

model DescribeClusterResponseBody = {
  requestId?: string(name='RequestId'),
  cluster?: {
    status?: string(name='Status'),
    expireTime?: string(name='ExpireTime'),
    maintainStartTime?: string(name='MaintainStartTime'),
    payType?: string(name='PayType'),
    maintainEndTime?: string(name='MaintainEndTime'),
    tags?: {
      tag?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tag')
    }(name='Tags'),
    lockMode?: string(name='LockMode'),
    minorVersion?: string(name='MinorVersion'),
    autoRenewPeriod?: int32(name='AutoRenewPeriod'),
    isLatestVersion?: boolean(name='IsLatestVersion'),
    dataCenterCount?: int32(name='DataCenterCount'),
    autoRenewal?: boolean(name='AutoRenewal'),
    resourceGroupId?: string(name='ResourceGroupId'),
    clusterName?: string(name='ClusterName'),
    majorVersion?: string(name='MajorVersion'),
    createdTime?: string(name='CreatedTime'),
    clusterId?: string(name='ClusterId'),
  }(name='Cluster'),
}

model DescribeClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterResponseBody(name='body'),
}

async function describeClusterWithOptions(request: DescribeClusterRequest, runtime: Util.RuntimeOptions): DescribeClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCluster', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCluster(request: DescribeClusterRequest): DescribeClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterWithOptions(request, runtime);
}

model DescribeClusterDashboardRequest {
  clusterId?: string(name='ClusterId'),
}

model DescribeClusterDashboardResponseBody = {
  requestId?: string(name='RequestId'),
  dashboard?: {
    dataCenters?: {
      dataCenter?: [ 
      {
        nodes?: {
          node?: [ 
          {
            status?: string(name='Status'),
            address?: string(name='Address'),
            load?: string(name='Load'),
          }
        ](name='Node')
        }(name='Nodes'),
        dataCenterId?: string(name='DataCenterId'),
      }
    ](name='DataCenter')
    }(name='DataCenters'),
    clusterId?: string(name='ClusterId'),
  }(name='Dashboard'),
}

model DescribeClusterDashboardResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterDashboardResponseBody(name='body'),
}

async function describeClusterDashboardWithOptions(request: DescribeClusterDashboardRequest, runtime: Util.RuntimeOptions): DescribeClusterDashboardResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeClusterDashboard', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeClusterDashboard(request: DescribeClusterDashboardRequest): DescribeClusterDashboardResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterDashboardWithOptions(request, runtime);
}

model DescribeClustersRequest {
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  clusterName?: string(name='ClusterName'),
  resourceGroupId?: string(name='ResourceGroupId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeClustersResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  clusters?: {
    cluster?: [ 
    {
      status?: string(name='Status'),
      expireTime?: string(name='ExpireTime'),
      payType?: string(name='PayType'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      lockMode?: string(name='LockMode'),
      autoRenewPeriod?: int32(name='AutoRenewPeriod'),
      minorVersion?: string(name='MinorVersion'),
      dataCenterCount?: int32(name='DataCenterCount'),
      autoRenewal?: boolean(name='AutoRenewal'),
      resourceGroupId?: string(name='ResourceGroupId'),
      clusterName?: string(name='ClusterName'),
      majorVersion?: string(name='MajorVersion'),
      createdTime?: string(name='CreatedTime'),
      clusterId?: string(name='ClusterId'),
    }
  ](name='Cluster')
  }(name='Clusters'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClustersResponseBody(name='body'),
}

async function describeClustersWithOptions(request: DescribeClustersRequest, runtime: Util.RuntimeOptions): DescribeClustersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeClusters', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClustersWithOptions(request, runtime);
}

model DescribeClusterStatusRequest {
  clusterId?: string(name='ClusterId'),
}

model DescribeClusterStatusResponseBody = {
  status?: string(name='Status'),
  createdTime?: string(name='CreatedTime'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterStatusResponseBody(name='body'),
}

async function describeClusterStatusWithOptions(request: DescribeClusterStatusRequest, runtime: Util.RuntimeOptions): DescribeClusterStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeClusterStatus', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeClusterStatus(request: DescribeClusterStatusRequest): DescribeClusterStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeClusterStatusWithOptions(request, runtime);
}

model DescribeContactPointsRequest {
  clusterId?: string(name='ClusterId'),
}

model DescribeContactPointsResponseBody = {
  requestId?: string(name='RequestId'),
  contactPoints?: {
    contactPoint?: [ 
    {
      publicAddresses?: {
        publicAddress?: [ string ](name='PublicAddress')
      }(name='PublicAddresses'),
      port?: int32(name='Port'),
      privateAddresses?: {
        privateAddress?: [ string ](name='PrivateAddress')
      }(name='PrivateAddresses'),
      dataCenterId?: string(name='DataCenterId'),
    }
  ](name='ContactPoint')
  }(name='ContactPoints'),
}

model DescribeContactPointsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeContactPointsResponseBody(name='body'),
}

async function describeContactPointsWithOptions(request: DescribeContactPointsRequest, runtime: Util.RuntimeOptions): DescribeContactPointsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeContactPoints', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeContactPoints(request: DescribeContactPointsRequest): DescribeContactPointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeContactPointsWithOptions(request, runtime);
}

model DescribeDataCenterRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
}

model DescribeDataCenterResponseBody = {
  status?: string(name='Status'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod'),
  dataCenterId?: string(name='DataCenterId'),
  commodityInstance?: string(name='CommodityInstance'),
  createdTime?: string(name='CreatedTime'),
  requestId?: string(name='RequestId'),
  nodeCount?: int32(name='NodeCount'),
  zoneId?: string(name='ZoneId'),
  clusterId?: string(name='ClusterId'),
  payType?: string(name='PayType'),
  lockMode?: string(name='LockMode'),
  vswitchId?: string(name='VswitchId'),
  dataCenterName?: string(name='DataCenterName'),
  diskType?: string(name='DiskType'),
  vpcId?: string(name='VpcId'),
  autoRenewal?: boolean(name='AutoRenewal'),
  diskSize?: int32(name='DiskSize'),
  regionId?: string(name='RegionId'),
  expireTime?: string(name='ExpireTime'),
  instanceType?: string(name='InstanceType'),
}

model DescribeDataCenterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataCenterResponseBody(name='body'),
}

async function describeDataCenterWithOptions(request: DescribeDataCenterRequest, runtime: Util.RuntimeOptions): DescribeDataCenterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataCenter', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataCenter(request: DescribeDataCenterRequest): DescribeDataCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataCenterWithOptions(request, runtime);
}

model DescribeDataCentersRequest {
  clusterId?: string(name='ClusterId'),
}

model DescribeDataCentersResponseBody = {
  dataCenters?: {
    dataCenter?: [ 
    {
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
      vswitchId?: string(name='VswitchId'),
      expireTime?: string(name='ExpireTime'),
      diskSize?: int32(name='DiskSize'),
      payType?: string(name='PayType'),
      diskType?: string(name='DiskType'),
      instanceType?: string(name='InstanceType'),
      lockMode?: string(name='LockMode'),
      autoRenewPeriod?: int32(name='AutoRenewPeriod'),
      regionId?: string(name='RegionId'),
      autoRenewal?: boolean(name='AutoRenewal'),
      commodityInstance?: string(name='CommodityInstance'),
      nodeCount?: int32(name='NodeCount'),
      dataCenterName?: string(name='DataCenterName'),
      zoneId?: string(name='ZoneId'),
      createdTime?: string(name='CreatedTime'),
      clusterId?: string(name='ClusterId'),
      dataCenterId?: string(name='DataCenterId'),
    }
  ](name='DataCenter')
  }(name='DataCenters'),
  requestId?: string(name='RequestId'),
}

model DescribeDataCentersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataCentersResponseBody(name='body'),
}

async function describeDataCentersWithOptions(request: DescribeDataCentersRequest, runtime: Util.RuntimeOptions): DescribeDataCentersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataCenters', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataCenters(request: DescribeDataCentersRequest): DescribeDataCentersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataCentersWithOptions(request, runtime);
}

model DescribeDeletedClustersRequest {
  regionId?: string(name='RegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDeletedClustersResponseBody = {
  totalCount?: long(name='TotalCount'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  clusters?: {
    cluster?: [ 
    {
      status?: string(name='Status'),
      dataCenterCount?: int32(name='DataCenterCount'),
      expireTime?: string(name='ExpireTime'),
      payType?: string(name='PayType'),
      clusterName?: string(name='ClusterName'),
      majorVersion?: string(name='MajorVersion'),
      createdTime?: string(name='CreatedTime'),
      minorVersion?: string(name='MinorVersion'),
      clusterId?: string(name='ClusterId'),
    }
  ](name='Cluster')
  }(name='Clusters'),
}

model DescribeDeletedClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeletedClustersResponseBody(name='body'),
}

async function describeDeletedClustersWithOptions(request: DescribeDeletedClustersRequest, runtime: Util.RuntimeOptions): DescribeDeletedClustersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDeletedClusters', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDeletedClusters(request: DescribeDeletedClustersRequest): DescribeDeletedClustersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDeletedClustersWithOptions(request, runtime);
}

model DescribeInstanceTypeRequest {
  instanceType?: string(name='InstanceType'),
}

model DescribeInstanceTypeResponseBody = {
  requestId?: string(name='RequestId'),
  instanceTypeSpecList?: {
    instanceTypeSpec?: [ 
    {
      cpuSize?: long(name='CpuSize'),
      memSize?: long(name='MemSize'),
      instanceType?: string(name='InstanceType'),
    }
  ](name='InstanceTypeSpec')
  }(name='InstanceTypeSpecList'),
}

model DescribeInstanceTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTypeResponseBody(name='body'),
}

async function describeInstanceTypeWithOptions(request: DescribeInstanceTypeRequest, runtime: Util.RuntimeOptions): DescribeInstanceTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceType', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceType(request: DescribeInstanceTypeRequest): DescribeInstanceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTypeWithOptions(request, runtime);
}

model DescribeIpWhitelistRequest {
  clusterId?: string(name='ClusterId'),
}

model DescribeIpWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
  ipList?: {
    IP?: [ string ](name='IP')
  }(name='IpList'),
}

model DescribeIpWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpWhitelistResponseBody(name='body'),
}

async function describeIpWhitelistWithOptions(request: DescribeIpWhitelistRequest, runtime: Util.RuntimeOptions): DescribeIpWhitelistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeIpWhitelist', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeIpWhitelist(request: DescribeIpWhitelistRequest): DescribeIpWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpWhitelistWithOptions(request, runtime);
}

model DescribeIpWhitelistGroupsRequest {
  clusterId?: string(name='ClusterId'),
}

model DescribeIpWhitelistGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  groups?: {
    group?: [ 
    {
      ipVersion?: int32(name='IpVersion'),
      groupName?: string(name='GroupName'),
      ipList?: {
        IP?: [ string ](name='IP')
      }(name='IpList'),
    }
  ](name='Group')
  }(name='Groups'),
}

model DescribeIpWhitelistGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpWhitelistGroupsResponseBody(name='body'),
}

async function describeIpWhitelistGroupsWithOptions(request: DescribeIpWhitelistGroupsRequest, runtime: Util.RuntimeOptions): DescribeIpWhitelistGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeIpWhitelistGroups', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeIpWhitelistGroups(request: DescribeIpWhitelistGroupsRequest): DescribeIpWhitelistGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeIpWhitelistGroupsWithOptions(request, runtime);
}

model DescribeNodeToolExecutionHistoriesRequest {
  clusterId?: string(name='ClusterId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeNodeToolExecutionHistoriesResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  histories?: {
    history?: [ 
    {
      nodes?: string(name='Nodes'),
      errorMessage?: string(name='ErrorMessage'),
      isEnded?: boolean(name='IsEnded'),
      createTime?: long(name='CreateTime'),
      jobId?: string(name='JobId'),
      command?: string(name='Command'),
      dataCenterId?: string(name='DataCenterId'),
      arguments?: string(name='Arguments'),
      regionId?: string(name='RegionId'),
      modifyTime?: long(name='ModifyTime'),
    }
  ](name='History')
  }(name='Histories'),
}

model DescribeNodeToolExecutionHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNodeToolExecutionHistoriesResponseBody(name='body'),
}

async function describeNodeToolExecutionHistoriesWithOptions(request: DescribeNodeToolExecutionHistoriesRequest, runtime: Util.RuntimeOptions): DescribeNodeToolExecutionHistoriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeNodeToolExecutionHistories', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeNodeToolExecutionHistories(request: DescribeNodeToolExecutionHistoriesRequest): DescribeNodeToolExecutionHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNodeToolExecutionHistoriesWithOptions(request, runtime);
}

model DescribeNodeToolExecutionHistoryRequest {
  clusterId?: string(name='ClusterId'),
  dcId?: string(name='DcId'),
  jobId?: string(name='JobId'),
}

model DescribeNodeToolExecutionHistoryResponseBody = {
  modifyTime?: long(name='ModifyTime'),
  dataCenterId?: string(name='DataCenterId'),
  requestId?: string(name='RequestId'),
  isEnded?: boolean(name='IsEnded'),
  command?: string(name='Command'),
  createTime?: long(name='CreateTime'),
  arguments?: string(name='Arguments'),
  regionId?: string(name='RegionId'),
  errorMessage?: string(name='ErrorMessage'),
  nodes?: string(name='Nodes'),
  jobId?: string(name='JobId'),
  result?: string(name='Result'),
}

model DescribeNodeToolExecutionHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNodeToolExecutionHistoryResponseBody(name='body'),
}

async function describeNodeToolExecutionHistoryWithOptions(request: DescribeNodeToolExecutionHistoryRequest, runtime: Util.RuntimeOptions): DescribeNodeToolExecutionHistoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeNodeToolExecutionHistory', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeNodeToolExecutionHistory(request: DescribeNodeToolExecutionHistoryRequest): DescribeNodeToolExecutionHistoryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNodeToolExecutionHistoryWithOptions(request, runtime);
}

model DescribeParameterModificationHistoriesRequest {
  clusterId?: string(name='ClusterId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeParameterModificationHistoriesResponseBody = {
  totalCount?: long(name='TotalCount'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
  histories?: {
    history?: [ 
    {
      time?: long(name='Time'),
      oldValue?: string(name='OldValue'),
      name?: string(name='Name'),
      newValue?: string(name='NewValue'),
    }
  ](name='History')
  }(name='Histories'),
}

model DescribeParameterModificationHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterModificationHistoriesResponseBody(name='body'),
}

async function describeParameterModificationHistoriesWithOptions(request: DescribeParameterModificationHistoriesRequest, runtime: Util.RuntimeOptions): DescribeParameterModificationHistoriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeParameterModificationHistories', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeParameterModificationHistories(request: DescribeParameterModificationHistoriesRequest): DescribeParameterModificationHistoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParameterModificationHistoriesWithOptions(request, runtime);
}

model DescribeParametersRequest {
  clusterId?: string(name='ClusterId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeParametersResponseBody = {
  totalCount?: long(name='TotalCount'),
  parameters?: {
    parameter?: [ 
    {
      value?: string(name='Value'),
      dataType?: string(name='DataType'),
      description?: string(name='Description'),
      name?: string(name='Name'),
      defaultValue?: string(name='DefaultValue'),
      allowedValues?: string(name='AllowedValues'),
    }
  ](name='Parameter')
  }(name='Parameters'),
  requestId?: string(name='RequestId'),
  pageSize?: int32(name='PageSize'),
  pageNumber?: int32(name='PageNumber'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParametersResponseBody(name='body'),
}

async function describeParametersWithOptions(request: DescribeParametersRequest, runtime: Util.RuntimeOptions): DescribeParametersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeParameters', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeParametersWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      zones?: {
        zone?: [ 
        {
          id?: string(name='Id'),
        }
      ](name='Zone')
      }(name='Zones'),
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model DescribeSecurityGroupsRequest {
  clusterId?: string(name='ClusterId'),
}

model DescribeSecurityGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  securityGroupIds?: {
    securityGroupId?: [ string ](name='SecurityGroupId')
  }(name='SecurityGroupIds'),
}

model DescribeSecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupsResponseBody(name='body'),
}

async function describeSecurityGroupsWithOptions(request: DescribeSecurityGroupsRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityGroups', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityGroups(request: DescribeSecurityGroupsRequest): DescribeSecurityGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupsWithOptions(request, runtime);
}

model ExecuteNodeToolRequest {
  clusterId?: string(name='ClusterId'),
  command?: string(name='Command'),
  arguments?: string(name='Arguments'),
  dataCenterId?: string(name='DataCenterId'),
  executeNodes?: string(name='ExecuteNodes'),
}

model ExecuteNodeToolResponseBody = {
  requestId?: string(name='RequestId'),
}

model ExecuteNodeToolResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteNodeToolResponseBody(name='body'),
}

async function executeNodeToolWithOptions(request: ExecuteNodeToolRequest, runtime: Util.RuntimeOptions): ExecuteNodeToolResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExecuteNodeTool', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function executeNodeTool(request: ExecuteNodeToolRequest): ExecuteNodeToolResponse {
  var runtime = new Util.RuntimeOptions{};
  return executeNodeToolWithOptions(request, runtime);
}

model GetCmsUrlRequest {
  clusterId?: string(name='ClusterId'),
}

model GetCmsUrlResponseBody = {
  requestId?: string(name='RequestId'),
  url?: string(name='Url'),
}

model GetCmsUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetCmsUrlResponseBody(name='body'),
}

async function getCmsUrlWithOptions(request: GetCmsUrlRequest, runtime: Util.RuntimeOptions): GetCmsUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCmsUrl', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCmsUrl(request: GetCmsUrlRequest): GetCmsUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCmsUrlWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  regionId?: string(name='RegionId'),
  nextToken?: string(name='NextToken'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListTagsRequest {
  regionId?: string(name='RegionId'),
}

model ListTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tags?: {
    tag?: [ 
    {
      tagValue?: string(name='TagValue'),
      tagKey?: string(name='TagKey'),
    }
  ](name='Tag')
  }(name='Tags'),
}

model ListTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagsResponseBody(name='body'),
}

async function listTagsWithOptions(request: ListTagsRequest, runtime: Util.RuntimeOptions): ListTagsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTags', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTags(request: ListTagsRequest): ListTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagsWithOptions(request, runtime);
}

model ModifyAccountPasswordRequest {
  clusterId?: string(name='ClusterId'),
  account?: string(name='Account'),
  password?: string(name='Password'),
}

model ModifyAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountPasswordResponseBody(name='body'),
}

async function modifyAccountPasswordWithOptions(request: ModifyAccountPasswordRequest, runtime: Util.RuntimeOptions): ModifyAccountPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountPassword', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountPassword(request: ModifyAccountPasswordRequest): ModifyAccountPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountPasswordWithOptions(request, runtime);
}

model ModifyBackupPlanRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
  backupTime?: string(name='BackupTime'),
  backupPeriod?: string(name='BackupPeriod'),
  retentionPeriod?: int32(name='RetentionPeriod'),
  active?: boolean(name='Active'),
}

model ModifyBackupPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPlanResponseBody(name='body'),
}

async function modifyBackupPlanWithOptions(request: ModifyBackupPlanRequest, runtime: Util.RuntimeOptions): ModifyBackupPlanResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyBackupPlan', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyBackupPlan(request: ModifyBackupPlanRequest): ModifyBackupPlanResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyBackupPlanWithOptions(request, runtime);
}

model ModifyClusterRequest {
  clusterId?: string(name='ClusterId'),
  clusterName?: string(name='ClusterName'),
}

model ModifyClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterResponseBody(name='body'),
}

async function modifyClusterWithOptions(request: ModifyClusterRequest, runtime: Util.RuntimeOptions): ModifyClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCluster', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCluster(request: ModifyClusterRequest): ModifyClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyClusterWithOptions(request, runtime);
}

model ModifyDataCenterRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
  dataCenterName?: string(name='DataCenterName'),
}

model ModifyDataCenterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDataCenterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDataCenterResponseBody(name='body'),
}

async function modifyDataCenterWithOptions(request: ModifyDataCenterRequest, runtime: Util.RuntimeOptions): ModifyDataCenterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDataCenter', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDataCenter(request: ModifyDataCenterRequest): ModifyDataCenterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDataCenterWithOptions(request, runtime);
}

model ModifyInstanceMaintainTimeRequest {
  clusterId?: string(name='ClusterId'),
  maintainStartTime?: string(name='MaintainStartTime'),
  maintainEndTime?: string(name='MaintainEndTime'),
}

model ModifyInstanceMaintainTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceMaintainTimeResponseBody(name='body'),
}

async function modifyInstanceMaintainTimeWithOptions(request: ModifyInstanceMaintainTimeRequest, runtime: Util.RuntimeOptions): ModifyInstanceMaintainTimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceMaintainTime', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceMaintainTime(request: ModifyInstanceMaintainTimeRequest): ModifyInstanceMaintainTimeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceMaintainTimeWithOptions(request, runtime);
}

model ModifyInstanceTypeRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
  instanceType?: string(name='InstanceType'),
}

model ModifyInstanceTypeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceTypeResponseBody(name='body'),
}

async function modifyInstanceTypeWithOptions(request: ModifyInstanceTypeRequest, runtime: Util.RuntimeOptions): ModifyInstanceTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceType', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceType(request: ModifyInstanceTypeRequest): ModifyInstanceTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceTypeWithOptions(request, runtime);
}

model ModifyIpWhitelistRequest {
  clusterId?: string(name='ClusterId'),
  ipList?: string(name='IpList'),
}

model ModifyIpWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyIpWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIpWhitelistResponseBody(name='body'),
}

async function modifyIpWhitelistWithOptions(request: ModifyIpWhitelistRequest, runtime: Util.RuntimeOptions): ModifyIpWhitelistResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyIpWhitelist', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyIpWhitelist(request: ModifyIpWhitelistRequest): ModifyIpWhitelistResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpWhitelistWithOptions(request, runtime);
}

model ModifyIpWhitelistGroupRequest {
  clusterId?: string(name='ClusterId'),
  ipList?: string(name='IpList'),
  groupName?: string(name='GroupName'),
  ipVersion?: int32(name='IpVersion'),
}

model ModifyIpWhitelistGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyIpWhitelistGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIpWhitelistGroupResponseBody(name='body'),
}

async function modifyIpWhitelistGroupWithOptions(request: ModifyIpWhitelistGroupRequest, runtime: Util.RuntimeOptions): ModifyIpWhitelistGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyIpWhitelistGroup', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyIpWhitelistGroup(request: ModifyIpWhitelistGroupRequest): ModifyIpWhitelistGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyIpWhitelistGroupWithOptions(request, runtime);
}

model ModifyParameterRequest {
  clusterId?: string(name='ClusterId'),
  name?: string(name='Name'),
  value?: string(name='Value'),
}

model ModifyParameterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyParameterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyParameterResponseBody(name='body'),
}

async function modifyParameterWithOptions(request: ModifyParameterRequest, runtime: Util.RuntimeOptions): ModifyParameterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyParameter', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyParameter(request: ModifyParameterRequest): ModifyParameterResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyParameterWithOptions(request, runtime);
}

model ModifySecurityGroupsRequest {
  clusterId?: string(name='ClusterId'),
  securityGroupIds?: string(name='SecurityGroupIds'),
}

model ModifySecurityGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupsResponseBody(name='body'),
}

async function modifySecurityGroupsWithOptions(request: ModifySecurityGroupsRequest, runtime: Util.RuntimeOptions): ModifySecurityGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySecurityGroups', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySecurityGroups(request: ModifySecurityGroupsRequest): ModifySecurityGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySecurityGroupsWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  clusterId?: string(name='ClusterId'),
  newResourceGroupId?: string(name='NewResourceGroupId'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('MoveResourceGroup', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model PurgeClusterRequest {
  clusterId?: string(name='ClusterId'),
}

model PurgeClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model PurgeClusterResponse = {
  headers: map[string]string(name='headers'),
  body: PurgeClusterResponseBody(name='body'),
}

async function purgeClusterWithOptions(request: PurgeClusterRequest, runtime: Util.RuntimeOptions): PurgeClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PurgeCluster', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function purgeCluster(request: PurgeClusterRequest): PurgeClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return purgeClusterWithOptions(request, runtime);
}

model RebootClusterRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
}

model RebootClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model RebootClusterResponse = {
  headers: map[string]string(name='headers'),
  body: RebootClusterResponseBody(name='body'),
}

async function rebootClusterWithOptions(request: RebootClusterRequest, runtime: Util.RuntimeOptions): RebootClusterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RebootCluster', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rebootCluster(request: RebootClusterRequest): RebootClusterResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootClusterWithOptions(request, runtime);
}

model ReleasePublicContactPointsRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
}

model ReleasePublicContactPointsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleasePublicContactPointsResponse = {
  headers: map[string]string(name='headers'),
  body: ReleasePublicContactPointsResponseBody(name='body'),
}

async function releasePublicContactPointsWithOptions(request: ReleasePublicContactPointsRequest, runtime: Util.RuntimeOptions): ReleasePublicContactPointsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleasePublicContactPoints', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releasePublicContactPoints(request: ReleasePublicContactPointsRequest): ReleasePublicContactPointsResponse {
  var runtime = new Util.RuntimeOptions{};
  return releasePublicContactPointsWithOptions(request, runtime);
}

model ResizeDiskSizeRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
  diskSize?: int32(name='DiskSize'),
}

model ResizeDiskSizeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResizeDiskSizeResponse = {
  headers: map[string]string(name='headers'),
  body: ResizeDiskSizeResponseBody(name='body'),
}

async function resizeDiskSizeWithOptions(request: ResizeDiskSizeRequest, runtime: Util.RuntimeOptions): ResizeDiskSizeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResizeDiskSize', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resizeDiskSize(request: ResizeDiskSizeRequest): ResizeDiskSizeResponse {
  var runtime = new Util.RuntimeOptions{};
  return resizeDiskSizeWithOptions(request, runtime);
}

model ResizeNodeCountRequest {
  clusterId?: string(name='ClusterId'),
  dataCenterId?: string(name='DataCenterId'),
  nodeCount?: int32(name='NodeCount'),
}

model ResizeNodeCountResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResizeNodeCountResponse = {
  headers: map[string]string(name='headers'),
  body: ResizeNodeCountResponseBody(name='body'),
}

async function resizeNodeCountWithOptions(request: ResizeNodeCountRequest, runtime: Util.RuntimeOptions): ResizeNodeCountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResizeNodeCount', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resizeNodeCount(request: ResizeNodeCountRequest): ResizeNodeCountResponse {
  var runtime = new Util.RuntimeOptions{};
  return resizeNodeCountWithOptions(request, runtime);
}

model TagResourcesRequest {
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnTagResourcesRequest {
  regionId?: string(name='RegionId'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UnTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UnTagResourcesResponseBody(name='body'),
}

async function unTagResourcesWithOptions(request: UnTagResourcesRequest, runtime: Util.RuntimeOptions): UnTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnTagResources', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unTagResources(request: UnTagResourcesRequest): UnTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return unTagResourcesWithOptions(request, runtime);
}

model UpgradeClusterVersionRequest {
  clusterId?: string(name='ClusterId'),
}

model UpgradeClusterVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeClusterVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeClusterVersionResponseBody(name='body'),
}

async function upgradeClusterVersionWithOptions(request: UpgradeClusterVersionRequest, runtime: Util.RuntimeOptions): UpgradeClusterVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeClusterVersion', '2019-01-01', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeClusterVersion(request: UpgradeClusterVersionRequest): UpgradeClusterVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeClusterVersionWithOptions(request, runtime);
}

