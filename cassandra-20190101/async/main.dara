/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Cassandra';
  @version = '2019-01-01';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AllocatePublicContactPointsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
}

model AllocatePublicContactPointsResponseBody = {
  requestId?: string(name='RequestId'),
}

model AllocatePublicContactPointsResponse = {
  headers: map[string]string(name='headers'),
  body: AllocatePublicContactPointsResponseBody(name='body'),
}

async function allocatePublicContactPoints(request: AllocatePublicContactPointsRequest): AllocatePublicContactPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocatePublicContactPoints', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackupPlanRequest {
  active?: boolean(name='Active', position='Query'),
  backupPeriod?: string(name='BackupPeriod', position='Query'),
  backupTime: string(name='BackupTime', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
  retentionPeriod?: int32(name='RetentionPeriod', position='Query'),
}

model CreateBackupPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupPlanResponseBody(name='body'),
}

async function createBackupPlan(request: CreateBackupPlanRequest): CreateBackupPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackupPlan', 'POST', '/', 'json', false, 'json', request);
}

model CreateClusterRequest {
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  clusterName?: string(name='ClusterName', position='Query'),
  dataCenterName?: string(name='DataCenterName', position='Query'),
  diskSize?: int32(name='DiskSize', position='Query'),
  diskType?: string(name='DiskType', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  majorVersion: string(name='MajorVersion', position='Query'),
  nodeCount: int32(name='NodeCount', position='Query'),
  password?: string(name='Password', position='Query'),
  payType: string(name='PayType', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  vswitchId: string(name='VswitchId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model CreateClusterResponseBody = {
  clusterId?: string(name='ClusterId'),
  requestId?: string(name='RequestId'),
}

model CreateClusterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateClusterResponseBody(name='body'),
}

async function createCluster(request: CreateClusterRequest): CreateClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCluster', 'POST', '/', 'json', false, 'json', request);
}

model CreateDataCenterRequest {
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  autoRenewPeriod?: int32(name='AutoRenewPeriod', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterName?: string(name='DataCenterName', position='Query'),
  diskSize?: int32(name='DiskSize', position='Query'),
  diskType?: string(name='DiskType', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  nodeCount: int32(name='NodeCount', position='Query'),
  payType: string(name='PayType', position='Query'),
  period?: int32(name='Period', position='Query'),
  periodUnit?: string(name='PeriodUnit', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  vswitchId: string(name='VswitchId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model CreateDataCenterResponseBody = {
  dataCenterId?: string(name='DataCenterId'),
  requestId?: string(name='RequestId'),
}

model CreateDataCenterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDataCenterResponseBody(name='body'),
}

async function createDataCenter(request: CreateDataCenterRequest): CreateDataCenterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataCenter', 'POST', '/', 'json', false, 'json', request);
}

model DeleteBackupPlanRequest {
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
}

model DeleteBackupPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteBackupPlanResponseBody(name='body'),
}

async function deleteBackupPlan(request: DeleteBackupPlanRequest): DeleteBackupPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteBackupPlan', 'POST', '/', 'json', false, 'json', request);
}

model DeleteClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DeleteClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteClusterResponseBody(name='body'),
}

async function deleteCluster(request: DeleteClusterRequest): DeleteClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCluster', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataCenterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
}

model DeleteDataCenterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDataCenterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDataCenterResponseBody(name='body'),
}

async function deleteDataCenter(request: DeleteDataCenterRequest): DeleteDataCenterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataCenter', 'POST', '/', 'json', false, 'json', request);
}

model DeleteNodeToolExecutionHistoryRequest {
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model DeleteNodeToolExecutionHistoryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteNodeToolExecutionHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteNodeToolExecutionHistoryResponseBody(name='body'),
}

async function deleteNodeToolExecutionHistory(request: DeleteNodeToolExecutionHistoryRequest): DeleteNodeToolExecutionHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNodeToolExecutionHistory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeAccountsRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DescribeAccountsResponseBody = {
  accounts?: {
    account?: [ 
    {
      name?: string(name='Name'),
    }
  ](name='Account')
  }(name='Accounts'),
  requestId?: string(name='RequestId'),
}

model DescribeAccountsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAccountsResponseBody(name='body'),
}

async function describeAccounts(request: DescribeAccountsRequest): DescribeAccountsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeAccounts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupRequest {
  backupId: string(name='BackupId', position='Query'),
  backupType: string(name='BackupType', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
}

model DescribeBackupResponseBody = {
  backup?: {
    backupId?: string(name='BackupId'),
    backupType?: string(name='BackupType'),
    clusterId?: string(name='ClusterId'),
    dataCenterId?: string(name='DataCenterId'),
    details?: string(name='Details'),
    endTime?: string(name='EndTime'),
    size?: long(name='Size'),
    startTime?: string(name='StartTime'),
    status?: string(name='Status'),
  }(name='Backup'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupResponseBody(name='body'),
}

async function describeBackup(request: DescribeBackupRequest): DescribeBackupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPlanRequest {
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
}

model DescribeBackupPlanResponseBody = {
  backupPlan?: {
    active?: boolean(name='Active'),
    backupPeriod?: string(name='BackupPeriod'),
    backupTime?: string(name='BackupTime'),
    clusterId?: string(name='ClusterId'),
    createdTime?: string(name='CreatedTime'),
    dataCenterId?: string(name='DataCenterId'),
    retentionPeriod?: int32(name='RetentionPeriod'),
  }(name='BackupPlan'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPlanResponseBody(name='body'),
}

async function describeBackupPlan(request: DescribeBackupPlanRequest): DescribeBackupPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPlan', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPlansRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DescribeBackupPlansResponseBody = {
  backupPlans?: {
    backupPlan?: [ 
    {
      active?: boolean(name='Active'),
      backupPeriod?: string(name='BackupPeriod'),
      backupTime?: string(name='BackupTime'),
      clusterId?: string(name='ClusterId'),
      createdTime?: string(name='CreatedTime'),
      dataCenterId?: string(name='DataCenterId'),
      retentionPeriod?: int32(name='RetentionPeriod'),
    }
  ](name='BackupPlan')
  }(name='BackupPlans'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupPlansResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPlansResponseBody(name='body'),
}

async function describeBackupPlans(request: DescribeBackupPlansRequest): DescribeBackupPlansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPlans', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupsRequest {
  backupType: string(name='BackupType', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
}

model DescribeBackupsResponseBody = {
  backups?: {
    backup?: [ 
    {
      backupId?: string(name='BackupId'),
      backupType?: string(name='BackupType'),
      clusterId?: string(name='ClusterId'),
      dataCenterId?: string(name='DataCenterId'),
      endTime?: string(name='EndTime'),
      size?: long(name='Size'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='Backup')
  }(name='Backups'),
  requestId?: string(name='RequestId'),
}

model DescribeBackupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupsResponseBody(name='body'),
}

async function describeBackups(request: DescribeBackupsRequest): DescribeBackupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DescribeClusterResponseBody = {
  cluster?: {
    autoRenewPeriod?: int32(name='AutoRenewPeriod'),
    autoRenewal?: boolean(name='AutoRenewal'),
    clusterId?: string(name='ClusterId'),
    clusterName?: string(name='ClusterName'),
    createdTime?: string(name='CreatedTime'),
    dataCenterCount?: int32(name='DataCenterCount'),
    expireTime?: string(name='ExpireTime'),
    isLatestVersion?: boolean(name='IsLatestVersion'),
    lockMode?: string(name='LockMode'),
    maintainEndTime?: string(name='MaintainEndTime'),
    maintainStartTime?: string(name='MaintainStartTime'),
    majorVersion?: string(name='MajorVersion'),
    minorVersion?: string(name='MinorVersion'),
    payType?: string(name='PayType'),
    resourceGroupId?: string(name='ResourceGroupId'),
    status?: string(name='Status'),
    tags?: {
      tag?: [ 
      {
        key?: string(name='Key'),
        value?: string(name='Value'),
      }
    ](name='Tag')
    }(name='Tags'),
  }(name='Cluster'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterResponseBody(name='body'),
}

async function describeCluster(request: DescribeClusterRequest): DescribeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCluster', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterDashboardRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DescribeClusterDashboardResponseBody = {
  dashboard?: {
    clusterId?: string(name='ClusterId'),
    dataCenters?: {
      dataCenter?: [ 
      {
        dataCenterId?: string(name='DataCenterId'),
        nodes?: {
          node?: [ 
          {
            address?: string(name='Address'),
            load?: string(name='Load'),
            status?: string(name='Status'),
          }
        ](name='Node')
        }(name='Nodes'),
      }
    ](name='DataCenter')
    }(name='DataCenters'),
  }(name='Dashboard'),
  requestId?: string(name='RequestId'),
}

model DescribeClusterDashboardResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterDashboardResponseBody(name='body'),
}

async function describeClusterDashboard(request: DescribeClusterDashboardRequest): DescribeClusterDashboardResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterDashboard', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClusterStatusRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DescribeClusterStatusResponseBody = {
  createdTime?: string(name='CreatedTime'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeClusterStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClusterStatusResponseBody(name='body'),
}

async function describeClusterStatus(request: DescribeClusterStatusRequest): DescribeClusterStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusterStatus', 'POST', '/', 'json', false, 'json', request);
}

model DescribeClustersRequest {
  clusterName?: string(name='ClusterName', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeClustersResponseBody = {
  clusters?: {
    cluster?: [ 
    {
      autoRenewPeriod?: int32(name='AutoRenewPeriod'),
      autoRenewal?: boolean(name='AutoRenewal'),
      clusterId?: string(name='ClusterId'),
      clusterName?: string(name='ClusterName'),
      createdTime?: string(name='CreatedTime'),
      dataCenterCount?: int32(name='DataCenterCount'),
      expireTime?: string(name='ExpireTime'),
      lockMode?: string(name='LockMode'),
      majorVersion?: string(name='MajorVersion'),
      minorVersion?: string(name='MinorVersion'),
      payType?: string(name='PayType'),
      resourceGroupId?: string(name='ResourceGroupId'),
      status?: string(name='Status'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='Cluster')
  }(name='Clusters'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeClustersResponseBody(name='body'),
}

async function describeClusters(request: DescribeClustersRequest): DescribeClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeContactPointsRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DescribeContactPointsResponseBody = {
  contactPoints?: {
    contactPoint?: [ 
    {
      dataCenterId?: string(name='DataCenterId'),
      port?: int32(name='Port'),
      privateAddresses?: {
        privateAddress?: [ string ](name='PrivateAddress')
      }(name='PrivateAddresses'),
      publicAddresses?: {
        publicAddress?: [ string ](name='PublicAddress')
      }(name='PublicAddresses'),
    }
  ](name='ContactPoint')
  }(name='ContactPoints'),
  requestId?: string(name='RequestId'),
}

model DescribeContactPointsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeContactPointsResponseBody(name='body'),
}

async function describeContactPoints(request: DescribeContactPointsRequest): DescribeContactPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeContactPoints', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataCenterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
}

model DescribeDataCenterResponseBody = {
  autoRenewPeriod?: int32(name='AutoRenewPeriod'),
  autoRenewal?: boolean(name='AutoRenewal'),
  clusterId?: string(name='ClusterId'),
  commodityInstance?: string(name='CommodityInstance'),
  createdTime?: string(name='CreatedTime'),
  dataCenterId?: string(name='DataCenterId'),
  dataCenterName?: string(name='DataCenterName'),
  diskSize?: int32(name='DiskSize'),
  diskType?: string(name='DiskType'),
  expireTime?: string(name='ExpireTime'),
  instanceType?: string(name='InstanceType'),
  lockMode?: string(name='LockMode'),
  nodeCount?: int32(name='NodeCount'),
  payType?: string(name='PayType'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  vpcId?: string(name='VpcId'),
  vswitchId?: string(name='VswitchId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeDataCenterResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataCenterResponseBody(name='body'),
}

async function describeDataCenter(request: DescribeDataCenterRequest): DescribeDataCenterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataCenter', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDataCentersRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DescribeDataCentersResponseBody = {
  dataCenters?: {
    dataCenter?: [ 
    {
      autoRenewPeriod?: int32(name='AutoRenewPeriod'),
      autoRenewal?: boolean(name='AutoRenewal'),
      clusterId?: string(name='ClusterId'),
      commodityInstance?: string(name='CommodityInstance'),
      createdTime?: string(name='CreatedTime'),
      dataCenterId?: string(name='DataCenterId'),
      dataCenterName?: string(name='DataCenterName'),
      diskSize?: int32(name='DiskSize'),
      diskType?: string(name='DiskType'),
      expireTime?: string(name='ExpireTime'),
      instanceType?: string(name='InstanceType'),
      lockMode?: string(name='LockMode'),
      nodeCount?: int32(name='NodeCount'),
      payType?: string(name='PayType'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
      vswitchId?: string(name='VswitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DataCenter')
  }(name='DataCenters'),
  requestId?: string(name='RequestId'),
}

model DescribeDataCentersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataCentersResponseBody(name='body'),
}

async function describeDataCenters(request: DescribeDataCentersRequest): DescribeDataCentersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDataCenters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDeletedClustersRequest {
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
}

model DescribeDeletedClustersResponseBody = {
  clusters?: {
    cluster?: [ 
    {
      clusterId?: string(name='ClusterId'),
      clusterName?: string(name='ClusterName'),
      createdTime?: string(name='CreatedTime'),
      dataCenterCount?: int32(name='DataCenterCount'),
      expireTime?: string(name='ExpireTime'),
      majorVersion?: string(name='MajorVersion'),
      minorVersion?: string(name='MinorVersion'),
      payType?: string(name='PayType'),
      status?: string(name='Status'),
    }
  ](name='Cluster')
  }(name='Clusters'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDeletedClustersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDeletedClustersResponseBody(name='body'),
}

async function describeDeletedClusters(request: DescribeDeletedClustersRequest): DescribeDeletedClustersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDeletedClusters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceTypeRequest {
  instanceType?: string(name='InstanceType', position='Query'),
}

model DescribeInstanceTypeResponseBody = {
  instanceTypeSpecList?: {
    instanceTypeSpec?: [ 
    {
      cpuSize?: long(name='CpuSize'),
      instanceType?: string(name='InstanceType'),
      memSize?: long(name='MemSize'),
    }
  ](name='InstanceTypeSpec')
  }(name='InstanceTypeSpecList'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTypeResponseBody(name='body'),
}

async function describeInstanceType(request: DescribeInstanceTypeRequest): DescribeInstanceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceType', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpWhitelistRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DescribeIpWhitelistResponseBody = {
  ipList?: {
    IP?: [ string ](name='IP')
  }(name='IpList'),
  requestId?: string(name='RequestId'),
}

model DescribeIpWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpWhitelistResponseBody(name='body'),
}

async function describeIpWhitelist(request: DescribeIpWhitelistRequest): DescribeIpWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIpWhitelistGroupsRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DescribeIpWhitelistGroupsResponseBody = {
  groups?: {
    group?: [ 
    {
      groupName?: string(name='GroupName'),
      ipList?: {
        IP?: [ string ](name='IP')
      }(name='IpList'),
      ipVersion?: int32(name='IpVersion'),
    }
  ](name='Group')
  }(name='Groups'),
  requestId?: string(name='RequestId'),
}

model DescribeIpWhitelistGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIpWhitelistGroupsResponseBody(name='body'),
}

async function describeIpWhitelistGroups(request: DescribeIpWhitelistGroupsRequest): DescribeIpWhitelistGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIpWhitelistGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNodeToolExecutionHistoriesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeNodeToolExecutionHistoriesResponseBody = {
  histories?: {
    history?: [ 
    {
      arguments?: string(name='Arguments'),
      command?: string(name='Command'),
      createTime?: long(name='CreateTime'),
      dataCenterId?: string(name='DataCenterId'),
      errorMessage?: string(name='ErrorMessage'),
      isEnded?: boolean(name='IsEnded'),
      jobId?: string(name='JobId'),
      modifyTime?: long(name='ModifyTime'),
      nodes?: string(name='Nodes'),
      regionId?: string(name='RegionId'),
    }
  ](name='History')
  }(name='Histories'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeNodeToolExecutionHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNodeToolExecutionHistoriesResponseBody(name='body'),
}

async function describeNodeToolExecutionHistories(request: DescribeNodeToolExecutionHistoriesRequest): DescribeNodeToolExecutionHistoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNodeToolExecutionHistories', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNodeToolExecutionHistoryRequest {
  clusterId: string(name='ClusterId', position='Query'),
  dcId: string(name='DcId', position='Query'),
  jobId: string(name='JobId', position='Query'),
}

model DescribeNodeToolExecutionHistoryResponseBody = {
  arguments?: string(name='Arguments'),
  command?: string(name='Command'),
  createTime?: long(name='CreateTime'),
  dataCenterId?: string(name='DataCenterId'),
  errorMessage?: string(name='ErrorMessage'),
  isEnded?: boolean(name='IsEnded'),
  jobId?: string(name='JobId'),
  modifyTime?: long(name='ModifyTime'),
  nodes?: string(name='Nodes'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
}

model DescribeNodeToolExecutionHistoryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNodeToolExecutionHistoryResponseBody(name='body'),
}

async function describeNodeToolExecutionHistory(request: DescribeNodeToolExecutionHistoryRequest): DescribeNodeToolExecutionHistoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNodeToolExecutionHistory', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParameterModificationHistoriesRequest {
  clusterId: string(name='ClusterId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeParameterModificationHistoriesResponseBody = {
  histories?: {
    history?: [ 
    {
      name?: string(name='Name'),
      newValue?: string(name='NewValue'),
      oldValue?: string(name='OldValue'),
      time?: long(name='Time'),
    }
  ](name='History')
  }(name='Histories'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeParameterModificationHistoriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParameterModificationHistoriesResponseBody(name='body'),
}

async function describeParameterModificationHistories(request: DescribeParameterModificationHistoriesRequest): DescribeParameterModificationHistoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameterModificationHistories', 'POST', '/', 'json', false, 'json', request);
}

model DescribeParametersRequest {
  clusterId: string(name='ClusterId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model DescribeParametersResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  parameters?: {
    parameter?: [ 
    {
      allowedValues?: string(name='AllowedValues'),
      dataType?: string(name='DataType'),
      defaultValue?: string(name='DefaultValue'),
      description?: string(name='Description'),
      name?: string(name='Name'),
      value?: string(name='Value'),
    }
  ](name='Parameter')
  }(name='Parameters'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeParametersResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeParametersResponseBody(name='body'),
}

async function describeParameters(request: DescribeParametersRequest): DescribeParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeParameters', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
      zones?: {
        zone?: [ 
        {
          id?: string(name='Id'),
        }
      ](name='Zone')
      }(name='Zones'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSecurityGroupsRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model DescribeSecurityGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  securityGroupIds?: {
    securityGroupId?: [ string ](name='SecurityGroupId')
  }(name='SecurityGroupIds'),
}

model DescribeSecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupsResponseBody(name='body'),
}

async function describeSecurityGroups(request: DescribeSecurityGroupsRequest): DescribeSecurityGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSecurityGroups', 'POST', '/', 'json', false, 'json', request);
}

model ExecuteNodeToolRequest {
  arguments?: string(name='Arguments', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  command: string(name='Command', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
  executeNodes?: string(name='ExecuteNodes', position='Query'),
}

model ExecuteNodeToolResponseBody = {
  requestId?: string(name='RequestId'),
}

model ExecuteNodeToolResponse = {
  headers: map[string]string(name='headers'),
  body: ExecuteNodeToolResponseBody(name='body'),
}

async function executeNodeTool(request: ExecuteNodeToolRequest): ExecuteNodeToolResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteNodeTool', 'POST', '/', 'json', false, 'json', request);
}

model GetCmsUrlRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model GetCmsUrlResponseBody = {
  requestId?: string(name='RequestId'),
  url?: string(name='Url'),
}

model GetCmsUrlResponse = {
  headers: map[string]string(name='headers'),
  body: GetCmsUrlResponseBody(name='body'),
}

async function getCmsUrl(request: GetCmsUrlRequest): GetCmsUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCmsUrl', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListTagsRequest {
  regionId: string(name='RegionId', position='Query'),
}

model ListTagsResponseBody = {
  requestId?: string(name='RequestId'),
  tags?: {
    tag?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='Tag')
  }(name='Tags'),
}

model ListTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagsResponseBody(name='body'),
}

async function listTags(request: ListTagsRequest): ListTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTags', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountPasswordRequest {
  account: string(name='Account', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  password: string(name='Password', position='Query'),
}

model ModifyAccountPasswordResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyAccountPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountPasswordResponseBody(name='body'),
}

async function modifyAccountPassword(request: ModifyAccountPasswordRequest): ModifyAccountPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountPassword', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPlanRequest {
  active?: boolean(name='Active', position='Query'),
  backupPeriod?: string(name='BackupPeriod', position='Query'),
  backupTime?: string(name='BackupTime', position='Query'),
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
  retentionPeriod?: int32(name='RetentionPeriod', position='Query'),
}

model ModifyBackupPlanResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPlanResponseBody(name='body'),
}

async function modifyBackupPlan(request: ModifyBackupPlanRequest): ModifyBackupPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPlan', 'POST', '/', 'json', false, 'json', request);
}

model ModifyClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  clusterName?: string(name='ClusterName', position='Query'),
}

model ModifyClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyClusterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyClusterResponseBody(name='body'),
}

async function modifyCluster(request: ModifyClusterRequest): ModifyClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCluster', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDataCenterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
  dataCenterName?: string(name='DataCenterName', position='Query'),
}

model ModifyDataCenterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDataCenterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDataCenterResponseBody(name='body'),
}

async function modifyDataCenter(request: ModifyDataCenterRequest): ModifyDataCenterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDataCenter', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceMaintainTimeRequest {
  clusterId: string(name='ClusterId', position='Query'),
  maintainEndTime: string(name='MaintainEndTime', position='Query'),
  maintainStartTime: string(name='MaintainStartTime', position='Query'),
}

model ModifyInstanceMaintainTimeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceMaintainTimeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceMaintainTimeResponseBody(name='body'),
}

async function modifyInstanceMaintainTime(request: ModifyInstanceMaintainTimeRequest): ModifyInstanceMaintainTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceMaintainTime', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceTypeRequest {
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
}

model ModifyInstanceTypeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyInstanceTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceTypeResponseBody(name='body'),
}

async function modifyInstanceType(request: ModifyInstanceTypeRequest): ModifyInstanceTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstanceType', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpWhitelistRequest {
  clusterId: string(name='ClusterId', position='Query'),
  ipList: string(name='IpList', position='Query'),
}

model ModifyIpWhitelistResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyIpWhitelistResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIpWhitelistResponseBody(name='body'),
}

async function modifyIpWhitelist(request: ModifyIpWhitelistRequest): ModifyIpWhitelistResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpWhitelist', 'POST', '/', 'json', false, 'json', request);
}

model ModifyIpWhitelistGroupRequest {
  clusterId: string(name='ClusterId', position='Query'),
  groupName: string(name='GroupName', position='Query'),
  ipList?: string(name='IpList', position='Query'),
  ipVersion: int32(name='IpVersion', position='Query'),
}

model ModifyIpWhitelistGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyIpWhitelistGroupResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyIpWhitelistGroupResponseBody(name='body'),
}

async function modifyIpWhitelistGroup(request: ModifyIpWhitelistGroupRequest): ModifyIpWhitelistGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyIpWhitelistGroup', 'POST', '/', 'json', false, 'json', request);
}

model ModifyParameterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  name: string(name='Name', position='Query'),
  value: string(name='Value', position='Query'),
}

model ModifyParameterResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyParameterResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyParameterResponseBody(name='body'),
}

async function modifyParameter(request: ModifyParameterRequest): ModifyParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyParameter', 'POST', '/', 'json', false, 'json', request);
}

model ModifySecurityGroupsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  securityGroupIds: string(name='SecurityGroupIds', position='Query'),
}

model ModifySecurityGroupsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifySecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySecurityGroupsResponseBody(name='body'),
}

async function modifySecurityGroups(request: ModifySecurityGroupsRequest): ModifySecurityGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifySecurityGroups', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourceGroupRequest {
  clusterId: string(name='ClusterId', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model PurgeClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model PurgeClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model PurgeClusterResponse = {
  headers: map[string]string(name='headers'),
  body: PurgeClusterResponseBody(name='body'),
}

async function purgeCluster(request: PurgeClusterRequest): PurgeClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PurgeCluster', 'POST', '/', 'json', false, 'json', request);
}

model RebootClusterRequest {
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
}

model RebootClusterResponseBody = {
  requestId?: string(name='RequestId'),
}

model RebootClusterResponse = {
  headers: map[string]string(name='headers'),
  body: RebootClusterResponseBody(name='body'),
}

async function rebootCluster(request: RebootClusterRequest): RebootClusterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RebootCluster', 'POST', '/', 'json', false, 'json', request);
}

model ReleasePublicContactPointsRequest {
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
}

model ReleasePublicContactPointsResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleasePublicContactPointsResponse = {
  headers: map[string]string(name='headers'),
  body: ReleasePublicContactPointsResponseBody(name='body'),
}

async function releasePublicContactPoints(request: ReleasePublicContactPointsRequest): ReleasePublicContactPointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleasePublicContactPoints', 'POST', '/', 'json', false, 'json', request);
}

model ResizeDiskSizeRequest {
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
  diskSize: int32(name='DiskSize', position='Query'),
}

model ResizeDiskSizeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResizeDiskSizeResponse = {
  headers: map[string]string(name='headers'),
  body: ResizeDiskSizeResponseBody(name='body'),
}

async function resizeDiskSize(request: ResizeDiskSizeRequest): ResizeDiskSizeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResizeDiskSize', 'POST', '/', 'json', false, 'json', request);
}

model ResizeNodeCountRequest {
  clusterId: string(name='ClusterId', position='Query'),
  dataCenterId: string(name='DataCenterId', position='Query'),
  nodeCount: int32(name='NodeCount', position='Query'),
}

model ResizeNodeCountResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResizeNodeCountResponse = {
  headers: map[string]string(name='headers'),
  body: ResizeNodeCountResponseBody(name='body'),
}

async function resizeNodeCount(request: ResizeNodeCountRequest): ResizeNodeCountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResizeNodeCount', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  tag: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnTagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UnTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UnTagResourcesResponseBody(name='body'),
}

async function unTagResources(request: UnTagResourcesRequest): UnTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnTagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeClusterVersionRequest {
  clusterId: string(name='ClusterId', position='Query'),
}

model UpgradeClusterVersionResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeClusterVersionResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeClusterVersionResponseBody(name='body'),
}

async function upgradeClusterVersion(request: UpgradeClusterVersionRequest): UpgradeClusterVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeClusterVersion', 'POST', '/', 'json', false, 'json', request);
}

