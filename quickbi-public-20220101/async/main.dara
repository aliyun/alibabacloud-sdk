/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'quickbi-public';
  @version = '2022-01-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDataLevelPermissionRuleUsersRequest {
  addUserModel: string(name='AddUserModel', description='This parameter is required.', example='{"ruleId":"a5bb24da-***-a891683e14da","cubeId":"7c7223ae-***-3c744528014b","addModel":{"userGroups":["0d5fb19b-***-1248fc27ca51","3d2c23d4-***-f6390f325c2d"],"users":["4334***358","Huang***3fa822"]}}', position='Query'),
}

model AddDataLevelPermissionRuleUsersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: boolean(name='Result', description='The execution result of the interface. Valid values:\\n\\n*   true: The request was successful.\\n*   false: The request failed.\\n', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:\\n\\n*   true: The request was successful.\\n*   false: The request failed.\\n', example='true'),
}

model AddDataLevelPermissionRuleUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDataLevelPermissionRuleUsersResponseBody(name='body'),
}

/**
  * @description > : You can only Quick BI the new row-column permission model. If you are still using the old row-column permission model, migrate to the new row-column permission model before you call this operation. To migrate row-level permissions to the new row-level permission model, perform the following steps: Choose Organizations> Security Configurations> Upgrade Row-Level Permissions. On the Upgrade Row-Level Permissions page, click **Upgrade**.\\n
  * @param request  the request parameters of AddDataLevelPermissionRuleUsers  AddDataLevelPermissionRuleUsersRequest
  * @return AddDataLevelPermissionRuleUsersResponse
 */
async function addDataLevelPermissionRuleUsers(request: AddDataLevelPermissionRuleUsersRequest): AddDataLevelPermissionRuleUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDataLevelPermissionRuleUsers', 'POST', '/', 'json', false, 'json', request);
}

model AddDataLevelPermissionWhiteListRequest {
  cubeId: string(name='CubeId', description='The ID of the training dataset that you want to remove from the specified custom linguistic model.

This parameter is required.', example='7c7223ae-***-3c744528014b', position='Query'),
  operateType?: string(name='OperateType', description='Operation Type: You can set this parameter to one of the following values.

*   ADD: Add a whitelist
*   DELETE: deletes a whitelist.', example='ADD', position='Query'),
  ruleType?: string(name='RuleType', description='The type of row-level permissions.

*   ROW_LEVEL: row-level permissions,
*   COLUMN_LEVEL: column-level permissions', example='ROW_LEVEL', position='Query'),
  targetIds?: string(name='TargetIds', example='43342***435,1553a****41231', position='Query'),
  targetType?: string(name='TargetType', description='Modify the type of the whitelist:

*   1: user
*   2: user group', example='1', position='Query'),
}

model AddDataLevelPermissionWhiteListResponseBody = {
  requestId?: string(name='RequestId', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model AddDataLevelPermissionWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddDataLevelPermissionWhiteListResponseBody(name='body'),
}

/**
  * @description ROW_LEVEL
  * @param request  the request parameters of AddDataLevelPermissionWhiteList  AddDataLevelPermissionWhiteListRequest
  * @return AddDataLevelPermissionWhiteListResponse
 */
async function addDataLevelPermissionWhiteList(request: AddDataLevelPermissionWhiteListRequest): AddDataLevelPermissionWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDataLevelPermissionWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model AddShareReportRequest {
  authPoint: int32(name='AuthPoint', description='The scope of authorization. Valid values:

*   1: view only
*   3: View and export

This parameter is required.', example='3', minimum=1, maximum=3, position='Query'),
  expireDate: long(name='ExpireDate', description='The validity period of the share. The value is a timestamp in milliseconds.

This parameter is required.', example='1608202110838', position='Query'),
  shareToId?: string(name='ShareToId', description='The ID of the person to be shared, which may be the user ID of the Quick BI or the user group ID.

*   If ShareToType is 0 (user), ShareTo is the user ID.
*   When ShareToType is set to 1 (user group), ShareTo is the user group ID.
*   When ShareToType=2 (organization), ShareTo is the ID of the organization.', example='de4bc5f9429141cc8091cdd1c15b****', position='Query'),
  shareToType: int32(name='ShareToType', description='The share type of the template. Valid values:

*   0: user
*   1: user group
*   2: organization

This parameter is required.', example='0', minimum=0, maximum=2, position='Query'),
  worksId: string(name='WorksId', description='The ID of the shared work. The works here include BI portal, dashboards, spreadsheets, and self-service access.

This parameter is required.', example='6b407e50-e774-406b-9956-da2425c2****', position='Query'),
}

model AddShareReportResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='05739b8e-3de0-4204-9669-7f04f02522b9'),
  result?: boolean(name='Result', description='The execution result of the interface is returned. Valid values:

*   true: The request was successful.
*   false: The request fails.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model AddShareReportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddShareReportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddShareReport  AddShareReportRequest
  * @return AddShareReportResponse
 */
async function addShareReport(request: AddShareReportRequest): AddShareReportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddShareReport', 'POST', '/', 'json', false, 'json', request);
}

model AddUserRequest {
  accountId?: string(name='AccountId', description='Aliyun account ID.
>Warning: For versions of Quick BI released after December 31, 2024, AccountId will be a required parameter. Please modify your API before this date.

<props="china">Published only on the China site', example='191476xxxxx23754', position='Query'),
  accountName?: string(name='AccountName', description='Aliyun account name.

- Note: If it is a sub-account, the format should be \\"primary account: sub-account\\". For example: master_test@aliyun.com:subaccount
- Format check: Maximum length of 50 characters.', example='xxxxxx@163.com', deprecated='true', position='Query'),
  adminUser?: boolean(name='AdminUser', description='Whether to assign the organization administrator role. Value range: 

- true: Yes 
- false: No

<notice>This parameter is deprecated and not recommended for use. It is invalid when RoleIds is provided.</notice>', example='true', deprecated='true', position='Query'),
  authAdminUser?: boolean(name='AuthAdminUser', description='Whether to assign the organization permission administrator role. Value range: 

- true: Yes 
- false: No

<notice>This parameter is deprecated and not recommended for use. It is invalid when RoleIds is provided.</notice>', example='true', deprecated='true', position='Query'),
  nickName: string(name='NickName', description='Aliyun account nickname.

- Format check: Maximum length of 50 characters.
- Special format validation: Chinese and English characters, numbers, _ \\ / | () ] [

This parameter is required.', example='ddd', position='Query'),
  roleIds?: string(name='RoleIds', description='Preset or custom organization role IDs bound to the user, separated by commas, with a maximum of 3. Value range:
- Organization Administrator (preset role): 111111111
- Permission Administrator (preset role): 111111112
- Regular User (preset role): 111111113', example='111111111,456', position='Body'),
  userType: int32(name='UserType', description='The user type of the organization member. Value range:
- 1: Developer
- 2: Visitor
- 3: Analyst

This parameter is required.', example='1', minimum=1, maximum=10, position='Query'),
}

model AddUserResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    accountName?: string(name='AccountName', description='Aliyun account.', example='xxxxxx@163.com'),
    adminUser?: boolean(name='AdminUser', description='Whether the organization administrator role is assigned. Value range: 

- true: Yes
- false: No

<notice>This parameter is deprecated and not recommended for use. It is invalid when RoleIdList is provided.</notice>', example='true'),
    authAdminUser?: boolean(name='AuthAdminUser', description='Whether the permission administrator role is assigned. Value range: 

- true: Yes
- false: No

<notice>This parameter is deprecated and not recommended for use. It is invalid when RoleIdList is provided.</notice>', example='true'),
    nickName?: string(name='NickName', description='Aliyun account nickname.', example='ddd'),
    roleIdList?: [ long ](name='RoleIdList', description='List of organization role IDs bound to the user.'),
    userId?: string(name='UserId', description='UserID in Quick BI.', example='b5d8fd9348cc4327****afb604'),
    userType?: int32(name='UserType', description='User type of the organization member. Value range: 
- 1: Developer 
- 2: Visitor 
- 3: Analyst', example='1'),
  }(name='Result', description='Returns detailed information about the newly added Aliyun user.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: The request was successful.
- false: The request failed.', example='true'),
}

model AddUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddUser  AddUserRequest
  * @return AddUserResponse
 */
async function addUser(request: AddUserRequest): AddUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUser', 'POST', '/', 'json', true, 'form', request);
}

model AddUserGroupMemberRequest {
  userGroupId: string(name='UserGroupId', description='The ID of the user group.

This parameter is required.', example='555c4cd****', position='Query'),
  userIdList: string(name='UserIdList', description='The ID of the Quick BI user. Separate multiple IDs with commas (,). Example: abc,efg. You can enter a maximum of 1000 entries.

This parameter is required.', example='46e537a5****,3dadsu****', position='Query'),
}

model AddUserGroupMemberResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='B6141A5A-A9EF-5F16-BF34-EFB9C1CCE4F3'),
  result?: boolean(name='Result', description='The result of adding members to a user group is returned. Valid values:

*   true: The task is added.
*   false: The tag failed to be added.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model AddUserGroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserGroupMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddUserGroupMember  AddUserGroupMemberRequest
  * @return AddUserGroupMemberResponse
 */
async function addUserGroupMember(request: AddUserGroupMemberRequest): AddUserGroupMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserGroupMember', 'POST', '/', 'json', false, 'json', request);
}

model AddUserGroupMembersRequest {
  userGroupIds: string(name='UserGroupIds', description='The IDs of the user groups. Separate the IDs with commas (,). Example: aGroupId,bGroupId,cGroupIds

This parameter is required.', example='0d5fb19b-****-****-99da-1248fc27ca51', position='Query'),
  userId: string(name='UserId', description='The user ID of the Quick BI.

This parameter is required.', example='46e5****37a5', position='Query'),
}

model AddUserGroupMembersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: boolean(name='Result', description='The execution result of the interface. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model AddUserGroupMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserGroupMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddUserGroupMembers  AddUserGroupMembersRequest
  * @return AddUserGroupMembersResponse
 */
async function addUserGroupMembers(request: AddUserGroupMembersRequest): AddUserGroupMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserGroupMembers', 'POST', '/', 'json', false, 'json', request);
}

model AddUserTagMetaRequest {
  tagDescription?: string(name='TagDescription', description='Tag description. Format check: maximum length of 255 characters.', example='test', position='Query'),
  tagName: string(name='TagName', description='Tag name. Format check:
- Maximum length of 50 characters.
- Only Chinese, English, numbers, and /\\|[]() symbols are allowed.

This parameter is required.', example='test', position='Query'),
}

model AddUserTagMetaResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: string(name='Result', description='Returns the ID of the successfully added tag.', example='0822a7d9-****-****-****-f20163ab9b0d'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Value range:
- true: The request succeeded 
- false: The request failed', example='true'),
}

model AddUserTagMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserTagMetaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddUserTagMeta  AddUserTagMetaRequest
  * @return AddUserTagMetaResponse
 */
async function addUserTagMeta(request: AddUserTagMetaRequest): AddUserTagMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserTagMeta', 'POST', '/', 'json', false, 'json', request);
}

model AddUserToWorkspaceRequest {
  roleId: long(name='RoleId', description='The preset space role ID. Value range:
- 25: Space Administrator
- 26: Space Developer
- 27: Space Analyst
- 30: Space Viewer

This parameter is required.', example='25', minimum=25, maximum=30, position='Query'),
  userId: string(name='UserId', description='The ID of the Quick BI user to be added.

This parameter is required.', example='de4bc5f9429141cc8091cdd1c15b****', position='Query'),
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace.

This parameter is required.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model AddUserToWorkspaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: boolean(name='Result', description='Returns the result of the interface execution. Value range:

- true: Execution successful
- false: Execution failed', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Value range:

- true: Request successful
- false: Request failed', example='true'),
}

model AddUserToWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddUserToWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddUserToWorkspace  AddUserToWorkspaceRequest
  * @return AddUserToWorkspaceResponse
 */
async function addUserToWorkspace(request: AddUserToWorkspaceRequest): AddUserToWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddUserToWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model AddWorkspaceUsersRequest {
  roleId: long(name='RoleId', description='Preset space role ID. Value range:
- 25: Space Administrator
- 26: Space Developer
- 27: Space Analyst
- 30: Space Viewer

This parameter is required.', example='25', minimum=25, maximum=30, position='Query'),
  userIds: string(name='UserIds', description='User ID. This is the UserID for Quick BI, not the Alibaba Cloud UID.

- Supports batch parameters, with user IDs separated by commas (,).

This parameter is required.', example='de4bc5f9429141cc8091cdd1c15b****', position='Query'),
  workspaceId: string(name='WorkspaceId', description='Workspace ID.

This parameter is required.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model AddWorkspaceUsersResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='7AAB95D7-2E11-4FE2-94BC-858E4FC0C976'),
  result?: {
    failure?: int32(name='Failure', description='Number of users that failed to be added.', example='2'),
    failureDetail?: map[string]any(name='FailureDetail', description='Reasons for the failures.', example='{"2046274934845893" : "AE0150010001: This user already exists.", "1213444447906552" : "AE0150010001: This user already exists."}'),
    success?: int32(name='Success', description='Number of users that were added successfully.', example='1'),
    total?: int32(name='Total', description='Total number of users being added.', example='3'),
  }(name='Result', description='Returns the result of the API execution.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Value range:
- true: The request was successful. There may be cases where some members are added successfully and others fail. For the reasons of failure, refer to the FailureDetail in the response.
- false: The request failed, and no data will be persisted.', example='true'),
}

model AddWorkspaceUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddWorkspaceUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddWorkspaceUsers  AddWorkspaceUsersRequest
  * @return AddWorkspaceUsersResponse
 */
async function addWorkspaceUsers(request: AddWorkspaceUsersRequest): AddWorkspaceUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddWorkspaceUsers', 'POST', '/', 'json', false, 'json', request);
}

model AllotDatasetAccelerationTaskRequest {
  cubeId: string(name='CubeId', description='The dataset ID.

This parameter is required.', example='7c7223ae-****-3c744528014b', position='Query'),
}

model AllotDatasetAccelerationTaskResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: boolean(name='Result', description='Indicates whether the IP address whitelist is updated. Valid values:

*   true: The task is triggered.
*   false: The task fails to be triggered.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model AllotDatasetAccelerationTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AllotDatasetAccelerationTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AllotDatasetAccelerationTask  AllotDatasetAccelerationTaskRequest
  * @return AllotDatasetAccelerationTaskResponse
 */
async function allotDatasetAccelerationTask(request: AllotDatasetAccelerationTaskRequest): AllotDatasetAccelerationTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllotDatasetAccelerationTask', 'POST', '/', 'json', false, 'json', request);
}

model AuthorizeMenuRequest {
  authPointsValue?: int32(name='AuthPointsValue', description='Authorizes the permissions of the menu. Valid values:

*   1: view
*   3: View + Export (default)', example='3', position='Query'),
  dataPortalId: string(name='DataPortalId', description='The ID of the BI portal.

This parameter is required.', example='0d173abb53e84c8ca7495429163b****', position='Query'),
  menuIds: string(name='MenuIds', description='The menu ID of the BI portal leaf node.

*   The directory menu cannot be authorized.
*   You can upload multiple parameters at a time. Separate multiple IDs with commas (,). The maximum number of parameters that can be modified at a time is 100.

This parameter is required.', example='54kqgoa****,pg1n135****', position='Query'),
  userGroupIds?: string(name='UserGroupIds', description='The IDs of the user groups.

*   You can upload multiple parameters at a time. Separate multiple IDs with commas (,). The maximum number of parameters that can be modified at a time is 200.
*   UserGroupIds and UserIds cannot be empty at the same time', example='34fd141d-4598-4093-8c33-8e066dcb****,3d2c23d4-2b41-4af8-a1f5-f6390f32****', position='Query'),
  userIds?: string(name='UserIds', description='The IDs of the end users. The UserID of the Quick BI is used instead of the UID of Alibaba Cloud.

*   You can upload multiple parameters at a time. Separate multiple IDs with commas (,). The maximum number of parameters that can be modified at a time is 200.', example='204627493484****,121344444790****', position='Query'),
}

model AuthorizeMenuResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='188F0B12-00EF-41B3-944A-FB7EF06C9F43'),
  result?: int32(name='Result', description='The number of authorized menus.', example='2'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model AuthorizeMenuResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AuthorizeMenuResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AuthorizeMenu  AuthorizeMenuRequest
  * @return AuthorizeMenuResponse
 */
async function authorizeMenu(request: AuthorizeMenuRequest): AuthorizeMenuResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AuthorizeMenu', 'POST', '/', 'json', false, 'json', request);
}

model BatchAddFeishuUsersRequest {
  feishuUsers?: string(name='FeishuUsers', position='Query'),
  isAdmin?: boolean(name='IsAdmin', example='False', position='Query'),
  isAuthAdmin?: boolean(name='IsAuthAdmin', example='true', position='Query'),
  userGroupIds?: string(name='UserGroupIds', example='"0d5fb19b-5555-41f0-99da-1248fc27ca51,0f868dd6_68dd_4d13_8422_c5dca3bd4b61"', position='Query'),
  userType?: int32(name='UserType', example='1', position='Query'),
}

model BatchAddFeishuUsersResponseBody = {
  requestId?: string(name='RequestId', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: {
    failCount?: int32(name='FailCount', example='10'),
    failResults?: [ 
      {
        failInfos?: [ 
          {
            code?: string(name='Code', example='ACCOUNT_EXIST'),
            codeDesc?: string(name='CodeDesc'),
            input?: string(name='Input', example='20'),
          }
        ](name='FailInfos'),
      }
    ](name='FailResults'),
    okCount?: int32(name='OkCount', example='1'),
  }(name='Result', example='True'),
  success?: boolean(name='Success', example='True'),
}

model BatchAddFeishuUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchAddFeishuUsersResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI BatchAddFeishuUsers is deprecated  * @param request  the request parameters of BatchAddFeishuUsers  BatchAddFeishuUsersRequest
  * @return BatchAddFeishuUsersResponse
 */
// Deprecated
async function batchAddFeishuUsers(request: BatchAddFeishuUsersRequest): BatchAddFeishuUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchAddFeishuUsers', 'POST', '/', 'json', false, 'json', request);
}

model CancelAuthorizationMenuRequest {
  dataPortalId: string(name='DataPortalId', description='The ID of the data portal.

This parameter is required.', example='0d173abb53e84c8ca7495429163b****', position='Query'),
  menuIds: string(name='MenuIds', description='The leaf node menu IDs of the data portal.

- Supports batch parameters, with IDs separated by commas (,). The maximum number for batch modification is 100.

This parameter is required.', example='54kqgoa****,pg1n135****', position='Query'),
  userGroupIds?: string(name='UserGroupIds', description='List of user group IDs.

- Supports batch parameters, with IDs separated by commas (,). The maximum number for batch modification is 200.
- UserGroupIds and UserIds cannot both be empty.', example='34fd141d-4598-4093-8c33-8e066dcb****,3d2c23d4-2b41-4af8-a1f5-f6390f32****', position='Query'),
  userIds?: string(name='UserIds', description='List of user IDs. These are Quick BI UserIDs, not Alibaba Cloud UIDs.

- Supports batch parameters, with IDs separated by commas (,). The maximum number for batch modification is 200.', example='204627493484****,121344444790****', position='Query'),
}

model CancelAuthorizationMenuResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: int32(name='Result', description='Number of menus successfully unauthorized.', example='2'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: The request was successful.
- false: The request failed.', example='true'),
}

model CancelAuthorizationMenuResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelAuthorizationMenuResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelAuthorizationMenu  CancelAuthorizationMenuRequest
  * @return CancelAuthorizationMenuResponse
 */
async function cancelAuthorizationMenu(request: CancelAuthorizationMenuRequest): CancelAuthorizationMenuResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelAuthorizationMenu', 'POST', '/', 'json', false, 'json', request);
}

model CancelCollectionRequest {
  userId: string(name='UserId', description='The ID of the favorite user. The user ID is the UserID of the Quick BI, not the UID of Alibaba Cloud.

This parameter is required.', example='121344444790****', position='Query'),
  worksId: string(name='WorksId', description='The ID of the work to cancel the collection.

This parameter is required.', example='5d6ae4e7-cede-43cd-b4d3-d2fd442a9202', position='Query'),
}

model CancelCollectionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='7c7223ae-****-3c744528014b'),
  result?: boolean(name='Result', description='The execution result of the interface is returned. Valid values:

*   true: The request was successful.
*   false: The request fails.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model CancelCollectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelCollectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelCollection  CancelCollectionRequest
  * @return CancelCollectionResponse
 */
async function cancelCollection(request: CancelCollectionRequest): CancelCollectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCollection', 'POST', '/', 'json', false, 'json', request);
}

model CancelReportShareRequest {
  reportId: string(name='ReportId', description='The ID of the work. The works here include BI portal, dashboards, spreadsheets, and self-service access.

This parameter is required.', example='6b407e50-e774-406b-9956-da2425c2****', position='Query'),
  shareToIds: string(name='ShareToIds', description='The ID of the person to be shared, which may be the user ID of the Quick BI or the user group ID.

*   If ShareToType is 0 (user), ShareTo is the user ID.
*   When ShareToType is set to 1 (user group), ShareTo is the user group ID.
*   When ShareToType=2 (organization), ShareTo is the ID of the organization.

This parameter is required.', example='de4bc5f9429141cc8091cdd1c15b****', position='Query'),
  shareToType: int32(name='ShareToType', description='The deletion method. Valid values:

*   0: Delete by user
*   1: Delete by user group
*   2: Delete by organization

This parameter is required.', example='0', position='Query'),
}

model CancelReportShareResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC4E1E63-B337-44F8-8C22-6F00DF67E2C3'),
  result?: boolean(name='Result', description='The execution result of the interface is returned. Valid values:

*   true: The request was successful.
*   false: The request fails.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model CancelReportShareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelReportShareResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelReportShare  CancelReportShareRequest
  * @return CancelReportShareResponse
 */
async function cancelReportShare(request: CancelReportShareRequest): CancelReportShareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelReportShare', 'POST', '/', 'json', false, 'json', request);
}

model ChangeVisibilityModelRequest {
  dataPortalId: string(name='DataPortalId', description='The ID of the BI portal.

This parameter is required.', example='0d173abb53e84c8ca7495429163b****', position='Query'),
  menuIds: string(name='MenuIds', description='The menu ID of the BI portal leaf node.

*   The directory menu cannot be authorized.
*   You can upload multiple parameters at a time. Separate multiple IDs with commas (,). The maximum number of parameters that can be modified at a time is 100.

This parameter is required.', example='54kqgoa****,pg1n135****', position='Query'),
  showOnlyWithAccess: boolean(name='ShowOnlyWithAccess', description='Whether only authorization is visible. Valid values:

*   true: Only the authorization is visible.
*   false: Both are visible.

This parameter is required.', example='true', position='Query'),
}

model ChangeVisibilityModelResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: int32(name='Result', description='The number of menus that are successfully modified.', example='2'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ChangeVisibilityModelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeVisibilityModelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeVisibilityModel  ChangeVisibilityModelRequest
  * @return ChangeVisibilityModelResponse
 */
async function changeVisibilityModel(request: ChangeVisibilityModelRequest): ChangeVisibilityModelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeVisibilityModel', 'POST', '/', 'json', false, 'json', request);
}

model CheckReadableRequest {
  userId: string(name='UserId', description='The user ID of the Quick BI to be checked.

This parameter is required.', example='de4bc5f9429141cc8091cdd1c15b****', position='Query'),
  worksId: string(name='WorksId', description='The ID of the work. Resources here include BI portal, dashboards, spreadsheets, and self-service access.

This parameter is required.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model CheckReadableResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: boolean(name='Result', description='The execution result of the interface is returned. Valid values:

*   true: The request was successful.
*   false: The request fails.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model CheckReadableResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckReadableResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckReadable  CheckReadableRequest
  * @return CheckReadableResponse
 */
async function checkReadable(request: CheckReadableRequest): CheckReadableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckReadable', 'POST', '/', 'json', false, 'json', request);
}

model CreateTicketRequest {
  accountName?: string(name='AccountName', description='The user\\"s account name.

- If the user is an Alibaba Cloud primary account **wangwu**, the format is **[Primary Account]**, for example, **wangwu**.
- If the user is a RAM account **zhangsan**@aliyun.cn**, the format is **[Primary Account: Sub-Account]**, for example, **wangwu:zhangsan**.

> Only one of UserId and AccountName needs to be filled in. If neither is filled in, it will default to binding the report\\"s Owner, and the report will be accessed with that user\\"s identity. If you need to configure row-level permissions, please refer to [Row-Level Permissions](https://help.aliyun.com/document_detail/322783.html).', example='test', deprecated='true', position='Query'),
  accountType?: int32(name='AccountType', description='The type of the user\\"s account.
- 1: Alibaba Cloud account
- 3: Quick BI self-built account
- 4: DingTalk
- 5: RAM sub-account
- 9: WeCom
- 10: Feishu
> If AccountName is not empty, then AccountType must also not be empty.', example='1', deprecated='true', position='Query'),
  cmptId?: string(name='CmptId', description='Component ID. This is the ID of a component within the above-mentioned dashboard; other types of works do not support this.
Refer to [QueryWorksBloodRelationship](https://next.api.aliyun.com/api/quickbi-public/2022-01-01/QueryWorksBloodRelationship?spm=a2c4g.11186623.0.0.15615d7aWVvWAl&params={}&lang=JAVA&tab=DOC&sdkStyle=old) for the API to get the component ID.', example='0fc6a275c7f64f17b1****a306ce0f31', position='Query'),
  expireTime?: int32(name='ExpireTime', description='Expiration time
- Unit: minutes
- Default: 240', example='200', position='Query'),
  globalParam?: string(name='GlobalParam', description='Global parameters for the report filter conditions.
- A string in JsonArray format.

> If you need to use global parameter capabilities, please contact the [Quick BI Operations Manager](https://h5-alimebot.dingtalk.com/intl/index.htm?spm=a2c4g.11186623.0.0.3da14f6chrDv9e&sourceType=ding_talk&from=DEFFB9G5KBByQkwq23wneFIOmaJ).', example='[{"paramKey":"price","joinType":"and","conditionList":[{"operate":">","value":"0"}]}]', position='Query'),
  ticketNum?: int32(name='TicketNum', description='The number of tickets. Each time a ticket is used, the number of tickets decreases by 1.
- Default value: 1
- Recommended value: 1
- Maximum value: 99999', example='1', position='Query'),
  userId?: string(name='UserId', description='Quick BI\\"s UserId, which is not your Alibaba Cloud account ID.
You can call the [QueryUserInfoByAccount](https://next.api.aliyun.com/api/quickbi-public/2022-01-01/QueryUserInfoByAccount?spm=a2c4g.11186623.0.0.15615d7aWVvWAl&params={}&tab=DOC&sdkStyle=old) interface to obtain the UserId. An example of a UserId is fe67f61a35a94b7da1a34ba174a7****.

> Only one of UserId and AccountName needs to be filled in. If neither is filled in, it will default to binding the report\\"s Owner, and the report will be accessed with that user\\"s identity. If you need to configure row-level permissions, please refer to [Row-Level Permissions](https://help.aliyun.com/document_detail/322783.html).', example='46e537466****92704c8', position='Query'),
  watermarkParam?: string(name='WatermarkParam', description='Watermark parameters for the report.
- Must not exceed 50 characters.
- When the report type is a large screen, watermark parameter passing is not supported.', example='test', position='Query'),
  worksId: string(name='WorksId', description='The ID of the report to be embedded. Currently supports dashboards, spreadsheets, data screens, self-service data retrieval, ad-hoc analysis, and data entry.

This parameter is required.', example='a206f5f3-****-e9b17c835b03', position='Query'),
}

model CreateTicketResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: string(name='Result', description='The generated ticket value.', example='ccd3428c-****-****-a608-26bae29dffee'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Value range: 
- true: Request succeeded 
- false: Request failed', example='true'),
}

model CreateTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTicketResponseBody(name='body'),
}

/**
  * @description For detailed usage, please refer to [Report Embedding Data Permission Control and Parameter Passing Security Enhancement Solution](https://help.aliyun.com/document_detail/391291.html).
  * @param request  the request parameters of CreateTicket  CreateTicketRequest
  * @return CreateTicketResponse
 */
async function createTicket(request: CreateTicketRequest): CreateTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTicket', 'POST', '/', 'json', false, 'json', request);
}

model CreateTicket4CopilotRequest {
  accountName?: string(name='AccountName', description='User\\"s account name.
<notice>Note: Only one of userId and accountName needs to be filled in. If neither is provided, it will default to the report owner, and the report will be accessed with that user\\"s identity.</notice>', example='Test user', position='Query'),
  accountType?: int32(name='AccountType', description='User\\"s account type:

- 1: Alibaba Cloud Primary Account

- 3: Quick BI Self-built Account

- 4: DingTalk

- 5: Alibaba Cloud RAM Account

- 6: Third-party Account (SAML, OAuth, etc.)

- 9: WeCom

- 10: Feishu

<notice>Note: If accountName is not empty, then accountType must also be provided.</notice>', example='1', position='Query'),
  copilotId: string(name='CopilotId', description='ID of the Smart Q module to be embedded.

This parameter is required.', example='ccd3*********ae29dffee', position='Query'),
  expireTime?: int32(name='ExpireTime', description='Expiration time.

- Unit: minutes, maximum 240 (4 hours).

- Default: 240.', example='200', position='Query'),
  ticketNum?: int32(name='TicketNum', description='Range of ticket quantity:

- Default value is 1.

- Recommended value is 1.

- Maximum value is 99999.

Each time a ticket is used, the ticket count decreases by 1.', example='1', position='Query'),
  userId?: string(name='UserId', description='Quick BI\\"s UserId.

- You can obtain this by calling [3.1.7 Get User Details Based on Third-Party Account] or other relevant APIs.

<notice>Note: Only one of userId and accountName needs to be filled in. If neither is provided, it will default to the report owner, and the report will be accessed with that user\\"s identity.</notice>', example='9c-asd*****asd-asdasd', position='Query'),
}

model CreateTicket4CopilotResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787************05DF8D885'),
  result?: string(name='Result', description='ID of the Smart Q module to be embedded.', example='f5eeb52e-d9c2-4a8b-80e3-47ab55c2****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:
- true: The request succeeded
- false: The request failed', example='true'),
}

model CreateTicket4CopilotResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTicket4CopilotResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTicket4Copilot  CreateTicket4CopilotRequest
  * @return CreateTicket4CopilotResponse
 */
async function createTicket4Copilot(request: CreateTicket4CopilotRequest): CreateTicket4CopilotResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTicket4Copilot', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserGroupRequest {
  parentUserGroupId: string(name='ParentUserGroupId', description='The ID of the parent user group. You can add new user groups to this group:

*   If you enter the ID of a parent user group, the new user group is added to the user group with the ID.
*   If you enter -1, the new user group is added to the root directory.

This parameter is required.', example='3d2c23d4-2b41-4af8-a1f5-f6390f32****', position='Query'),
  userGroupDescription?: string(name='UserGroupDescription', description='The description of the user group.

*   Format verification: Maximum length 255
*   Special format verification: Chinese and English digits_ \\ / | () ] [', example='User group description', position='Query'),
  userGroupId?: string(name='UserGroupId', description='The unique ID of the user group.

*   If you specify the UserGroupId parameter, the system automatically generates the UserGroupId parameter. If you specify the UserGroupId parameter, the user ID is used as the user group ID. You must ensure that the user ID is unique within the organization.
*   Format verification: Maximum length 64, cannot be -1,', example='pop0001', position='Query'),
  userGroupName: string(name='UserGroupName', description='The name of the RAM user group.

*   Format verification: Maximum length 255
*   Special format verification: Chinese and English digits_ \\ / | () ] [

This parameter is required.', example='Hangzhou Financial Report', position='Query'),
}

model CreateUserGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='36829379-0C38-5BC0-830A-92665BF77D4F'),
  result?: string(name='Result', description='The ID of the added user group is returned. An empty string \\"\\" is returned if the add fails.', example='f5eeb52e-d9c2-4a8b-80e3-47ab55c2****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model CreateUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateUserGroup  CreateUserGroupRequest
  * @return CreateUserGroupResponse
 */
async function createUserGroup(request: CreateUserGroupRequest): CreateUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model DataInterpretationRequest {
  data: string(name='Data', description='This parameter is required.', position='Query'),
  modelCode?: string(name='ModelCode', position='Query'),
  promptForceOverride?: boolean(name='PromptForceOverride', position='Query'),
  userPrompt?: string(name='UserPrompt', position='Query'),
  userQuestion?: string(name='UserQuestion', position='Query'),
}

model DataInterpretationResponseBody = {
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model DataInterpretationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DataInterpretationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DataInterpretation  DataInterpretationRequest
  * @return DataInterpretationResponse
 */
async function dataInterpretation(request: DataInterpretationRequest): DataInterpretationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DataInterpretation', 'POST', '/', 'json', false, 'json', request);
}

model DataSetBloodRequest {
  dataSetIds: string(name='DataSetIds', description='List of dataset IDs, separated by English commas.

This parameter is required.', example='234235234,234235235,234235235', position='Query'),
  userId?: string(name='UserId', description='Specify the owner of the report, which is the userId.', example='dasasgaj342351', position='Query'),
  worksType?: string(name='WorksType', description='Specify the type of report:
- REPORT: Workbooks
- dashboardOfflineQuery: Downloads
- DASHBOARD: Dashboard
- ANALYSIS: Ad Hoc Analysis
- SCREEN: Visualization Screen
- PAGE: Old dashboard', example='PAGE', position='Query'),
}

model DataSetBloodResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='46e537a5****,3dadsu****'),
  result?: [ 
    {
      worksId?: string(name='WorksId', description='Work ID.', example='ccd3428c-****-****-a608-26bae29dffee'),
      worksType?: string(name='WorksType', description='Work types: - REPORT: 
- REPORT: Workbooks
- dashboardOfflineQuery: Downloads
- DASHBOARD: Dashboard
- ANALYSIS: Ad Hoc Analysis
- SCREEN: Visualization Screen
- PAGE: Old dashboard', example='PAGE'),
    }
  ](name='Result', description='Array of works.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: Request succeeded
- false: Request failed', example='true'),
}

model DataSetBloodResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DataSetBloodResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DataSetBlood  DataSetBloodRequest
  * @return DataSetBloodResponse
 */
async function dataSetBlood(request: DataSetBloodRequest): DataSetBloodResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DataSetBlood', 'POST', '/', 'json', false, 'json', request);
}

model DataSourceBloodRequest {
  dataSourceId: string(name='DataSourceId', description='Data source ID.

This parameter is required.', example='44051300991327000048', position='Query'),
}

model DataSourceBloodResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='46e537a5****,3dadsu****'),
  result?: [ string ](name='Result', description='Array of dataset IDs.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:
- true: The request was successful
- false: The request failed', example='true'),
}

model DataSourceBloodResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DataSourceBloodResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DataSourceBlood  DataSourceBloodRequest
  * @return DataSourceBloodResponse
 */
async function dataSourceBlood(request: DataSourceBloodRequest): DataSourceBloodResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DataSourceBlood', 'POST', '/', 'json', false, 'json', request);
}

model DelayTicketExpireTimeRequest {
  expireTime: int32(name='ExpireTime', description='The time to postpone.

*   Unit: minutes. Valid values: 0 to 240. Unit: minutes. Valid values: 4 hours.
*   Expired bills cannot be extended.

This parameter is required.', example='200', position='Query'),
  ticket: string(name='Ticket', description='The value of the third-party embedded ticket, that is, the accessTicket value in the URL.

This parameter is required.', example='040e6f79d33444838e*****c7206c070', position='Query'),
}

model DelayTicketExpireTimeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: boolean(name='Result', description='Whether the extension is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model DelayTicketExpireTimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DelayTicketExpireTimeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DelayTicketExpireTime  DelayTicketExpireTimeRequest
  * @return DelayTicketExpireTimeResponse
 */
async function delayTicketExpireTime(request: DelayTicketExpireTimeRequest): DelayTicketExpireTimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DelayTicketExpireTime', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataLevelPermissionRuleUsersRequest {
  deleteUserModel: string(name='DeleteUserModel', description='This parameter is required.', example='{"ruleId":"a5bb24da-***-a891683e14da","cubeId":"7c7223ae-***-3c744528014b","delModel":{"userGroups":["0d5fb19b-***-1248fc27ca51","3d2c23d4-***-f6390f325c2d"],"users":["4334***358","Huang***3fa822"]}}', position='Query'),
}

model DeleteDataLevelPermissionRuleUsersResponseBody = {
  requestId?: string(name='RequestId', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataLevelPermissionRuleUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataLevelPermissionRuleUsersResponseBody(name='body'),
}

/**
  * @description {"ruleId":"a5bb24da-***-a891683e14da","cubeId":"7c7223ae-***-3c744528014b","delModel":{"userGroups":["0d5fb19b-***-1248fc27ca51","3d2c23d4-***-f6390f325c2d"],"users":["4334***358","Huang***3fa822"]}}
  * @param request  the request parameters of DeleteDataLevelPermissionRuleUsers  DeleteDataLevelPermissionRuleUsersRequest
  * @return DeleteDataLevelPermissionRuleUsersResponse
 */
async function deleteDataLevelPermissionRuleUsers(request: DeleteDataLevelPermissionRuleUsersRequest): DeleteDataLevelPermissionRuleUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataLevelPermissionRuleUsers', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDataLevelRuleConfigRequest {
  cubeId: string(name='CubeId', description='This parameter is required.', example='7c7223ae-****-3c744528014b', position='Query'),
  ruleId: string(name='RuleId', description='This parameter is required.', example='a5bb24da-****-a891683e14da', position='Query'),
}

model DeleteDataLevelRuleConfigResponseBody = {
  requestId?: string(name='RequestId', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model DeleteDataLevelRuleConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataLevelRuleConfigResponseBody(name='body'),
}

/**
  * @description The ID of the training dataset that you want to remove from the specified custom linguistic model.
  * @param request  the request parameters of DeleteDataLevelRuleConfig  DeleteDataLevelRuleConfigRequest
  * @return DeleteDataLevelRuleConfigResponse
 */
async function deleteDataLevelRuleConfig(request: DeleteDataLevelRuleConfigRequest): DeleteDataLevelRuleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataLevelRuleConfig', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTicketRequest {
  ticket: string(name='Ticket', description='The value of the third-party embedded ticket, which is the `accessTicket` in the URL.

This parameter is required.', example='040e6f79d****7d283c7206c070', position='Query'),
}

model DeleteTicketResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: boolean(name='Result', description='Indicates whether the deletion was successful. Possible values:
- true: The request was successful
- false: The request failed', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:
- true: The request was successful
- false: The request failed', example='true'),
}

model DeleteTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTicket  DeleteTicketRequest
  * @return DeleteTicketResponse
 */
async function deleteTicket(request: DeleteTicketRequest): DeleteTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTicket', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserRequest {
  transferUserId?: string(name='TransferUserId', description='The ID of the successor. If not empty, the report resources in the workspace of the deleted user will be transferred to the successor; otherwise, they will be transferred to the space owner.
- The successor cannot be an organization visitor
- The permissions of the successor in the workspace must not be less than those of the deleted user, with management permissions > development permissions > sharing permissions > viewing permissions
- If the successor is not in the workspace, they will be automatically added to the workspace', example='f5****afccd9e434a274', position='Query'),
  userId: string(name='UserId', description='The ID of the user to be deleted. This user ID is the Quick BI UserID, not the Alibaba Cloud UID.

This parameter is required.', example='fe67f61a35a94b7da1a34ba174a7****', position='Query'),
}

model DeleteUserResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='DC4E1E63-B337-44F8-8C22-6F00DF67E2C3'),
  result?: boolean(name='Result', description='Returns the execution result of the interface. Possible values:

- true: Execution succeeded
- false: Execution failed', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:
- true: The request was successful - false: The request failed', example='true'),
}

model DeleteUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUser  DeleteUserRequest
  * @return DeleteUserResponse
 */
async function deleteUser(request: DeleteUserRequest): DeleteUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUser', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserFromWorkspaceRequest {
  userId: string(name='UserId', description='The ID of the user to be deleted. Note that this UserID is for Quick BI, not the Alibaba Cloud UID.

This parameter is required.', example='de4bc5f9429141cc8091cdd1c15b****', position='Query'),
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace.

This parameter is required.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model DeleteUserFromWorkspaceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DC4E1E63-B337-44F8-8C22-6F00DF67E2C3'),
  result?: boolean(name='Result', description='Returns the result of the API execution. Possible values:

- true: Execution succeeded
- false: Execution failed', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Value range:
- true: The request succeeded - false: The request failed', example='true'),
}

model DeleteUserFromWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserFromWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserFromWorkspace  DeleteUserFromWorkspaceRequest
  * @return DeleteUserFromWorkspaceResponse
 */
async function deleteUserFromWorkspace(request: DeleteUserFromWorkspaceRequest): DeleteUserFromWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserFromWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserGroupRequest {
  userGroupId: string(name='UserGroupId', description='The ID of the user group.

This parameter is required.', example='f5eeb52e-d9c2-4a8b-80e3-47ab55c2****', position='Query'),
}

model DeleteUserGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F2775AB6-DE99-5FA6-86A4-72EA0A8AFEE3'),
  result?: boolean(name='Result', description='The execution result of the interface is returned. Valid values:

*   true: The request was successful.
*   false: The request fails.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model DeleteUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserGroup  DeleteUserGroupRequest
  * @return DeleteUserGroupResponse
 */
async function deleteUserGroup(request: DeleteUserGroupRequest): DeleteUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserGroupMemberRequest {
  userGroupId: string(name='UserGroupId', description='The ID of the user group.

This parameter is required.', example='46e537****', position='Query'),
  userId: string(name='UserId', description='The user ID of the Quick BI.

This parameter is required.', example='2fe4fbd8****', position='Query'),
}

model DeleteUserGroupMemberResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC4E1E63-B337-44F8-8C22-6F00DF67E2C3'),
  result?: boolean(name='Result', description='Returns the result of deleting a user group member. Valid values:

*   true: The task is deleted.
*   false: The deletion failed.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model DeleteUserGroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserGroupMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserGroupMember  DeleteUserGroupMemberRequest
  * @return DeleteUserGroupMemberResponse
 */
async function deleteUserGroupMember(request: DeleteUserGroupMemberRequest): DeleteUserGroupMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserGroupMember', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserGroupMembersRequest {
  userGroupIds: string(name='UserGroupIds', description='The ID of the user group(s) to exit.

- Supports batch parameters, separate IDs with a comma (,).

This parameter is required.', example='34fd141d-4598-4093-8c33-8e066dcb****,3d2c23d4-2b41-4af8-a1f5-f6390f32****', position='Query'),
  userId: string(name='UserId', description='The UserID of the user to be removed from the user group. Note that this UserID refers to the Quick BI UserID, not the Alibaba Cloud UID.

This parameter is required.', example='204627493484****', position='Query'),
}

model DeleteUserGroupMembersResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='ABBAD906-****-5D18-B23D-****53AB0AA2'),
  result?: boolean(name='Result', description='Returns the result of the interface execution. Possible values:

- true: Execution succeeded
- false: Execution failed', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: Request succeeded
- false: Request failed', example='true'),
}

model DeleteUserGroupMembersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserGroupMembersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserGroupMembers  DeleteUserGroupMembersRequest
  * @return DeleteUserGroupMembersResponse
 */
async function deleteUserGroupMembers(request: DeleteUserGroupMembersRequest): DeleteUserGroupMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserGroupMembers', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserTagMetaRequest {
  tagId: string(name='TagId', description='The ID of the tag to be deleted.

This parameter is required.', example='pop_001', position='Query'),
}

model DeleteUserTagMetaResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: boolean(name='Result', description='The execution result of the deleted tag is returned. Valid values:

*   true: The request was successful.
*   false: The request fails.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model DeleteUserTagMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteUserTagMetaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteUserTagMeta  DeleteUserTagMetaRequest
  * @return DeleteUserTagMetaResponse
 */
async function deleteUserTagMeta(request: DeleteUserTagMetaRequest): DeleteUserTagMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserTagMeta', 'POST', '/', 'json', false, 'json', request);
}

model GetDataSourceConnectionInfoRequest {
  dsId: string(name='DsId', description='Data source ID.

This parameter is required.', example='7AAB95D-*****-****-*4FC0C976', position='Query'),
}

model GetDataSourceConnectionInfoResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='7AAB95D-*****-****-*4FC0C976'),
  result?: {
    address?: string(name='Address', description='Database connection string address (domain or IP).', example='172.**.**.48'),
    authLevel?: string(name='AuthLevel', description='Permission level:

- 0 -- Private
- 1 -- Collaborative Editing (old)
- 11 -- Collaborative Editing - Space Members
- 12 -- Collaborative Editing - Specified to Individuals', example='0'),
    creatorId?: string(name='CreatorId', description='Quick BI user ID of the creator.', example='U240****0880C6095'),
    dsId?: string(name='DsId', description='Data source ID.', example='a201c85c-******'),
    dsType?: string(name='DsType', description='Data source type.', example='mysql'),
    dsVersion?: string(name='DsVersion', description='Version of the data source.', example='5.7'),
    instance?: string(name='Instance', description='Database instance, corresponding to the database name, and for ODPS, it is the project.', example='rm*********t44ju1'),
    instanceId?: string(name='InstanceId', description='Instance ID.', example='rm*********t44ju1'),
    modifyUser?: string(name='ModifyUser', description='Quick BI user ID of the modifier.', example='U240****0880C6095'),
    noSasl?: boolean(name='NoSasl', description='Whether the impala data source requires authentication to log in:

- true - Requires account and password login  
- false - No authentication required (default)', example='true'),
    parentDsType?: string(name='ParentDsType', description='Primary data source type for multi-engine data sources.', example='dataphin'),
    port?: string(name='Port', description='Port.', example='3306'),
    project?: string(name='Project', description='Used for front-end display when obtaining connection details for ODPS.', example='prod-ossdoc'),
    schema?: string(name='Schema', description='Database schema, only needs to be set for databases that support schemas.', example='Analysis'),
    showName?: string(name='ShowName', description='Display name of the data source on the front end.', example='0327'),
    workspaceId?: string(name='WorkspaceId', description='Workspace ID to which the data source belongs.', example='0de6**2-d**-4720-8836-0cc****1394c'),
  }(name='Result', description='Data source information.'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model GetDataSourceConnectionInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataSourceConnectionInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataSourceConnectionInfo  GetDataSourceConnectionInfoRequest
  * @return GetDataSourceConnectionInfoResponse
 */
async function getDataSourceConnectionInfo(request: GetDataSourceConnectionInfoRequest): GetDataSourceConnectionInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataSourceConnectionInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetMailTaskStatusRequest {
  mailId: string(name='MailId', description='Mail ID

This parameter is required.', example='d5a5****8b634d****5584f8dc159c62', position='Query'),
  taskId?: long(name='TaskId', description='Task ID

> - If the task ID is not provided, the latest task status will be returned by default;
> - If the task ID is provided, the status of the specified task will be returned.', example='7218****0392****212', position='Query'),
}

model GetMailTaskStatusResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='38C0FEC8-****-415C-A9F1-****422BDB65'),
  result?: [ 
    {
      execTime?: string(name='execTime', description='Execution time, in the format yyyy-MM-dd HH:mm:ss', example='2024-10-09 17:34:11'),
      mailId?: string(name='mailId', description='Mail ID', example='c38f73f4c5*****c808c41b3f4d23b7852'),
      status?: string(name='status', description='Mail status. Possible values:

- Success: SENT
- Failure: FAILED 
- In Progress: PROCESSING', example='SENT'),
      taskId?: long(name='taskId', description='Task ID', example='1282xxx610816'),
    }
  ](name='Result', description='Return result.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:
- true: The request was successful. 
- false: The request failed.', example='true'),
}

model GetMailTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMailTaskStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMailTaskStatus  GetMailTaskStatusRequest
  * @return GetMailTaskStatusResponse
 */
async function getMailTaskStatus(request: GetMailTaskStatusRequest): GetMailTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMailTaskStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetUserGroupInfoRequest {
  keyword: string(name='Keyword', description='Keyword of the user group name.

This parameter is required.', example='test', position='Query'),
}

model GetUserGroupInfoResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D7980306-1F08-5A88-9FE7-ECB8B9C4C0F5'),
  result?: [ 
    {
      createTime?: string(name='CreateTime', description='Creation time of the user group.', example='2021-03-15 17:13:55'),
      createUser?: string(name='CreateUser', description='Creator of the sub-user group. This is the UserID in Quick BI, not the UID in Alibaba Cloud.', example='46e5374665ba4b679ee22e2a2927****'),
      identifiedPath?: string(name='IdentifiedPath', description='Directory level of the user group.'),
      modifiedTime?: string(name='ModifiedTime', description='Last modified time of the user group.', example='2021-03-15 20:36:40'),
      modifyUser?: string(name='ModifyUser', description='Modifier of the user group. This is the UserID in Quick BI, not the UID in Alibaba Cloud.', example='46e5374665ba4b679ee22e2a2927****'),
      parentUsergroupId?: string(name='ParentUsergroupId', description='Parent user group ID.', example='2fe4fbd8-588f-489a-b3e1-e92c7af0****'),
      usergroupDesc?: string(name='UsergroupDesc', description='Description of the user group.', example='test'),
      usergroupId?: string(name='UsergroupId', description='User group ID.', example='34fd141d-4598-4093-8c33-8e066dcb****'),
      usergroupName?: string(name='UsergroupName', description='Name of the user group.', example='test'),
    }
  ](name='Result', description='User group information.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: The request was successful.
- false: The request failed.', example='true'),
}

model GetUserGroupInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserGroupInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserGroupInfo  GetUserGroupInfoRequest
  * @return GetUserGroupInfoResponse
 */
async function getUserGroupInfo(request: GetUserGroupInfoRequest): GetUserGroupInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserGroupInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetWorksEmbedListRequest {
  keyword?: string(name='Keyword', description='Report name (fuzzy match)', example='test', position='Query'),
  pageNo?: int32(name='PageNo', description='Page number (defaults to 1 if empty)', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='Number of items per page (defaults to 10 if empty)', example='100', position='Query'),
  worksType?: string(name='WorksType', description='Report type

- page, Dashboard
- screen, Data Screen
- report, Spreadsheet
- ANALYSIS, Ad-hoc Analysis
- dashboardOfflineQuery, Self-service Data Retrieval
- dataForm, Data Entry Form', example='page', position='Query'),
  wsId?: string(name='WsId', description='Workspace ID', example='919818-***-*****-wdasd', position='Query'),
}

model GetWorksEmbedListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID', example='38C0F*****0-415****9F1-*****422BDB65'),
  result?: {
    data?: [ 
      {
        embedTime?: string(name='EmbedTime', description='Embed time', example='YYYY-mm-DD hh:MM:ss'),
        worksId?: string(name='WorksId', description='Report ID', example='897ce25e-****-****-af84-d13c5610****'),
        worksName?: string(name='WorksName', description='Report name', example='test'),
        worksType?: string(name='WorksType', description='Report type', example='page'),
        workspaceId?: string(name='WorkspaceId', description='Workspace ID', example='87c6b145-****-43e1-9426-8f93be23****'),
      }
    ](name='Data', description='Array of reports'),
    pageNo?: long(name='PageNo', description='Page number', example='1'),
    pageSize?: long(name='PageSize', description='Number of items per page', example='10'),
    totalNum?: long(name='TotalNum', description='Total number of items', example='18'),
    totalPages?: long(name='TotalPages', description='Total number of pages', example='2'),
  }(name='Result', description='Array of report objects'),
  success?: boolean(name='Success', description='Whether the request was successful', example='true'),
}

model GetWorksEmbedListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorksEmbedListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWorksEmbedList  GetWorksEmbedListRequest
  * @return GetWorksEmbedListResponse
 */
async function getWorksEmbedList(request: GetWorksEmbedListRequest): GetWorksEmbedListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWorksEmbedList', 'POST', '/', 'json', false, 'json', request);
}

model ListApiDatasourceRequest {
  keyWord?: string(name='KeyWord', description='The keyword of the API data source name.', example='test', position='Query'),
  pageNum?: int32(name='PageNum', description='Current page number for API data source list:

*   Pages start from page 1.
*   Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of rows per page in a paged query.

*   Default value: 10.
*   Valid values: 1 to 100.', example='10', position='Query'),
  workspaceId: string(name='WorkspaceId', description='The workspace ID.

This parameter is required.', example='89713491-cb4f-4579-b889-e82c35f1****', position='Query'),
}

model ListApiDatasourceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    data?: [ 
      {
        apiId?: string(name='ApiId', description='The ID of the API data source.', example='0f2c3c6409be4dc0810f2a5785e816a8'),
        body?: string(name='Body', description='The parameter configuration of the query statement in JSON format. You can customize the parameter configuration.', example='{"key1":"value1"}'),
        dataSize?: float(name='DataSize', description='The data volume of the API data source.

*   Unit: Kbit/s', example='0.39746094'),
        dateUpdateTime?: string(name='DateUpdateTime', description='The last synchronization time of the API data source.', example='2022-05-25 16:19:43'),
        gmtCreate?: string(name='GmtCreate', description='The time when the quota plan was created.', example='2022-05-25 16:19:43'),
        gmtModified?: string(name='GmtModified', description='The time when the optimization job was modified.', example='2022-05-25 16:19:43'),
        jobId?: string(name='JobId', description='The job ID.', example='REST_API_SYNC_0f2c3c6409be4dc0810f2a5785e816a8'),
        parameters?: string(name='Parameters', description='The parameter configurations in the JSONArray format.

*   name: parameter name
*   value: the parameter value', example='[{"name":"token","value":"xxxxxxxxxxxx"},{"name":"pageSize","value":100}]'),
        showName?: string(name='ShowName', description='The name of the API data source.', example='test data source'),
        statusType?: int32(name='StatusType', description='The status of the API data source synchronization task.

Valid values:

*   0: the to be run.
*   1: The is running.
*   2: The is successfully.
*   3: failed.', example='2'),
      }
    ](name='Data', description='The list of API data sources that were queried.'),
    pageNum?: int32(name='PageNum', description='The page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of rows per page set when the interface is requested.', example='10'),
    totalNum?: int32(name='TotalNum', description='The total number of rows.', example='1'),
  }(name='Result', description='The query results are returned.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ListApiDatasourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApiDatasourceResponseBody(name='body'),
}

/**
  * @description For more information about the parameters, see [Create an API data source](https://help.aliyun.com/document_detail/409330.html).
  * @param request  the request parameters of ListApiDatasource  ListApiDatasourceRequest
  * @return ListApiDatasourceResponse
 */
async function listApiDatasource(request: ListApiDatasourceRequest): ListApiDatasourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApiDatasource', 'POST', '/', 'json', false, 'json', request);
}

model ListByUserGroupIdRequest {
  userGroupIds: string(name='UserGroupIds', description='The ID of the user group that you want to query. Separate multiple user groups with commas (,).

This parameter is required.', example='34fe-***-6dcb,84q9-****-4a274', position='Query'),
}

model ListByUserGroupIdResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: {
    failedUserGroupIds?: [ string ](name='FailedUserGroupIds', description='List of failed user groups.'),
    userGroupModels?: [ 
      {
        createTime?: string(name='CreateTime', description='The time when the Secret was created.', example='2021-03-15 17:13:55'),
        createUser?: string(name='CreateUser', description='The UserID of the creator in the Quick BI.', example='46e5*******ee22e2a292704c8'),
        identifiedPath?: string(name='IdentifiedPath', description='The path of the user group.', example='2fe4fbd8-****-af083ea/34fd1-****-dcbc33f'),
        modifiedTime?: string(name='ModifiedTime', description='The time when the protection policy was last modified.', example='2021-03-15 20:36:40'),
        modifyUser?: string(name='ModifyUser', description='The UserID of the modifier in the Quick BI.', example='46e5*******ee22e2a292704c8'),
        parentUsergroupId?: string(name='ParentUsergroupId', description='The ID of the parent user group.', example='2fe4fbd8-588f-489a-b3e1-e92c7af083ea'),
        usergroupDesc?: string(name='UsergroupDesc', description='The description of the user group.', example='Description'),
        usergroupId?: string(name='UsergroupId', description='The ID of the user group.', example='34fd141d-****-4093-8c33-8e066dcbc33f'),
        usergroupName?: string(name='UsergroupName', description='The name of the user group.', example='Test user group'),
      }
    ](name='UserGroupModels', description='The details of the user group that was queried.'),
  }(name='Result', description='The user group query result is returned.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ListByUserGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListByUserGroupIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListByUserGroupId  ListByUserGroupIdRequest
  * @return ListByUserGroupIdResponse
 */
async function listByUserGroupId(request: ListByUserGroupIdRequest): ListByUserGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListByUserGroupId', 'POST', '/', 'json', false, 'json', request);
}

model ListCollectionsRequest {
  userId: string(name='UserId', description='The ID of the user. The user ID is the UserID of the Quick BI, not the UID of Alibaba Cloud.

This parameter is required.', example='fe67f61a35a94b7da1a34ba174a7****', position='Query'),
}

model ListCollectionsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='162A632E-0A88-51CF-98F8-94FDEE82DB7D'),
  result?: [ 
    {
      favoriteId?: int32(name='FavoriteId', example='12373'),
      ownerId?: string(name='OwnerId', example='fe67f61a35a94b7da1a34ba174a7****'),
      worksId?: string(name='WorksId', example='95296e95-ca89-4c7d-8af9-dedf0ad0****'),
      worksName?: string(name='WorksName'),
      worksType?: string(name='WorksType', example='dashboardOfflineQuery'),
      workspaceId?: string(name='WorkspaceId', example='9337d121-a78f-4c1b-a8bc-f81de117****'),
      workspaceName?: string(name='WorkspaceName'),
    }
  ](name='Result'),
  success?: boolean(name='Success', description='The primary key ID of the favorite record.', example='true'),
}

model ListCollectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCollectionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListCollections  ListCollectionsRequest
  * @return ListCollectionsResponse
 */
async function listCollections(request: ListCollectionsRequest): ListCollectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCollections', 'POST', '/', 'json', false, 'json', request);
}

model ListCubeDataLevelPermissionConfigRequest {
  cubeId: string(name='CubeId', description='The ID of the training dataset that you want to remove from the specified custom linguistic model.

This parameter is required.', example='7c7223ae-****-3c744528014b', position='Query'),
  ruleType: string(name='RuleType', description='The type of the dataset row and column permission. Valid values:

*   ROW_LEVEL: row-level permissions
*   COLUMN_LEVEL: column-level permissions

This parameter is required.', example='ROW_LEVEL', position='Query'),
}

model ListCubeDataLevelPermissionConfigResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: string(name='Result', description='{ "isOpen": 1, "extraConfigModel": { // Additional configuration information "ruleType": "ROW_LEVEL", // The row-level permission type. "missHitPolicy": "NONE", // The hit rule policy: NONE has no permissions, and ALL has permissions. "cubeId": "7c7223 ae-31d1-4d2f-b11f-3c744528014b" // The ID of the dataset. }, "ruleType": "ROW_LEVEL", // Row-column permission type\\
"ruleModels": [ { "ruleUsersModel": { // The target population. "userGroups": [ "0d5fb19b- ****-1248 fc27ca51", // The ID of the user group. "4aa3f089-****-85f0-0e8ac7c2dee9" ], "users": [ "HuangJia ***2e3fa822", // The ID of the user. "4334***84358" ] }, "ruleContentModel": { "ruleContentType": "ROW_FIELD", // The row-column permission type. "ruleContentJson": "{"conditionNode":{"caption": " Period ","isMeasure":false,"pathId":"7d3b073bc6","relationOperator":"not-null","name":"7d3b073bc6","value":{"value":[""}UM]," ENueType "} // The JSON string of the row-column permission rule. "ruleOriginConfigJson": "{"operator":"and","operands":[{"labelName": " Period ","isValid":true,"uniqueId":"5","fieldId":"7d3b073bc6","error":false,"fieldType":"string",": default "" value":{"conditionOp":"not-null","conditionValue":""},"valueType":"ENUM"}}],"isRelation":true}" }, // The fixed-format JSON string required by the frontend "isOpen": 1, // The status of the row-column permission configuration. 1. On. 0. Off. "hitTakeEffect": 1, // Specifies whether the rule takes effect after a column-level permission is hit. 1 takes effect and 0 takes effect. "ruleName": "Test row-level permission_Do not delete", // The name of the row-column permission rule. "ruleLevelType": "ROW_LEVEL", // The row-column permission type. "ruleId": "a5bb24 da-772f-45e8-a43c-a891683e14da", // The ID of the row-column permission rule. "cubeId": "7c7223 ae-31d1-4d2f-b11f-3c744528014b", // The ID of the dataset. "ruleTargetScope": "OTHERS" rule takes effect: ALL owner and OTHERS designated owner. } ], "cubeId": "7c7223 ae-31d1-4d2f-b11f-3c744528014b" // The ID of the dataset. }', example='The JSON string of the row-column permission list. For more information, see the description.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ListCubeDataLevelPermissionConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCubeDataLevelPermissionConfigResponseBody(name='body'),
}

/**
  * @description > : You can only Quick BI the new row-column permission model. If you are still using the old row-column permission model, migrate to the new row-column permission model before you call this operation. To migrate row-level permissions to the new row-level permission model, perform the following steps: Choose Organizations> Security Configurations> Upgrade Row-Level Permissions. On the Upgrade Row-Level Permissions page, click **Upgrade**.
  * @param request  the request parameters of ListCubeDataLevelPermissionConfig  ListCubeDataLevelPermissionConfigRequest
  * @return ListCubeDataLevelPermissionConfigResponse
 */
async function listCubeDataLevelPermissionConfig(request: ListCubeDataLevelPermissionConfigRequest): ListCubeDataLevelPermissionConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCubeDataLevelPermissionConfig', 'POST', '/', 'json', false, 'json', request);
}

model ListDataLevelPermissionWhiteListRequest {
  cubeId: string(name='CubeId', description='Dataset ID.

This parameter is required.', example='3d5db23c-e4f2-49dd-a883-92285b48e14a', position='Query'),
  ruleType: string(name='RuleType', description='Type of row and column permission that the whitelist belongs to:

- ROW_LEVEL: Row-level permission
- COLUMN_LEVEL: Column-level permission

This parameter is required.', example='ROW_LEVEL', position='Query'),
}

model ListDataLevelPermissionWhiteListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: {
    cubeId?: string(name='CubeId', description='Dataset ID.', example='7c7223ae-****-3c744528014b'),
    ruleType?: string(name='RuleType', description='Type of dataset row and column permissions. Possible values:

- ROW_LEVEL: Row-level permission
- COLUMN_LEVEL: Column-level permission', example='ROW_LEVEL'),
    usersModel?: {
      userGroups?: [ string ](name='UserGroups', description='UserGroups.'),
      users?: [ string ](name='Users', description='Users.'),
    }(name='UsersModel', description='Whitelist information.'),
  }(name='Result', description='Whitelist for the specified row-level permission type.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: Request succeeded
- false: Request failed', example='true'),
}

model ListDataLevelPermissionWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataLevelPermissionWhiteListResponseBody(name='body'),
}

/**
  * @description > This API only supports the new row and column permission model of Quick BI. If you are still using the old row and column permissions, please migrate to the new row and column permission model before calling this interface. To migrate to the new row and column permission model, follow these steps: In Organization Management -> Security Configuration -> Upgrade Row and Column Permissions, click **One-Click Upgrade** to upgrade to the new row-level permissions.
  * @param request  the request parameters of ListDataLevelPermissionWhiteList  ListDataLevelPermissionWhiteListRequest
  * @return ListDataLevelPermissionWhiteListResponse
 */
async function listDataLevelPermissionWhiteList(request: ListDataLevelPermissionWhiteListRequest): ListDataLevelPermissionWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataLevelPermissionWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model ListDataSourceRequest {
  dsType?: string(name='DsType', description='Data source type.', example='mysql', position='Query'),
  workspaceId: string(name='WorkspaceId', description='Workspace ID.

This parameter is required.', example='95296e95-******c7d-8af9-dedf0ad0****', position='Query'),
}

model ListDataSourceResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='7FC9A6A6-****-5CED-B*****E891E4075'),
  result?: [ 
    {
      creatorId?: string(name='CreatorId', description='Quick BI user ID of the creator.', example='281*****-485******-8'),
      creatorName?: string(name='CreatorName', description='Owner\\"s nickname.', example='system'),
      datasourceId?: string(name='DatasourceId', description='Data source ID.', example='7FC9A6A6-****-5CED-B*****E891E4075'),
      dsType?: string(name='DsType', description='Data source type.', example='odps'),
      gmtCreate?: string(name='GmtCreate', description='Creation time of the data source, in yyyy-MM-dd HH:mm:ss format.', example='2024-04-16 13:17:39'),
      gmtModified?: string(name='GmtModified', description='Modification time.', example='2024-08-15 10:06:31'),
      parentDsType?: string(name='ParentDsType', description='Primary data source type for multi-engine data sources.', example='dataphin'),
      showName?: string(name='ShowName', description='Display name of the data source.', example='0327'),
    }
  ](name='Result', description='Array of data source information.'),
  success?: boolean(name='Success', description='Whether the request was successful.', example='true'),
}

model ListDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataSource  ListDataSourceRequest
  * @return ListDataSourceResponse
 */
async function listDataSource(request: ListDataSourceRequest): ListDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSource', 'POST', '/', 'json', false, 'json', request);
}

model ListFavoriteReportsRequest {
  keyword?: string(name='Keyword', description='Keyword of the work name.', example='test', position='Query'),
  pageSize?: int32(name='PageSize', description='Number of rows in the work list to be queried:
Default value: 10
Maximum value: 9999', example='10', position='Query'),
  treeType?: string(name='TreeType', description='Type of the work to be queried (leave blank to query all types). Value range:
- DATAPRODUCT: Data Portal
- PAGE: Dashboard
- REPORT: Spreadsheet', example='PAGE', position='Query'),
  userId: string(name='UserId', description='The UserID of the user in Quick BI to be queried.

This parameter is required.', example='b5d8fd9348cc4327****afb604', position='Query'),
}

model ListFavoriteReportsResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    data?: [ 
      {
        favorite?: boolean(name='Favorite', description='Indicates whether the user has favorited the work.', example='true'),
        favoriteDate?: string(name='FavoriteDate', description='The timestamp when the work was favorited.', example='1640088615000'),
        gmtCreate?: string(name='GmtCreate', description='Timestamp of the work creation.', example='1640088615000'),
        gmtModified?: string(name='GmtModified', description='Timestamp of the work modification.', example='1640595729000'),
        hasEditAuth?: boolean(name='HasEditAuth', description='Indicates whether the user has edit permission for the work.', example='true'),
        hasViewAuth?: boolean(name='HasViewAuth', description='Check if the user has the permission to view the work.', example='true'),
        name?: string(name='Name', description='Name of the work.', example='test'),
        ownerName?: string(name='OwnerName', description='Alibaba Cloud account name of the work owner.', example='test'),
        ownerNum?: string(name='OwnerNum', description='UserID of the work owner.', example='1365*****238860'),
        publishStatus?: int32(name='PublishStatus', description='Publication status of the work. Value range:
- 0: Not published
- 1: Published
- 2: Saved with modifications, not published
- 3: Offline', example='1'),
        treeId?: string(name='TreeId', description='Work ID.', example='977c7698-****-****-****-44b7304d20fc'),
        type?: string(name='Type', description='Type of the work. Value range:
- DATAPRODUCT: Data Portal
- PAGE: Dashboard
- REPORT: Spreadsheet', example='PAGE'),
        workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the work belongs.', example='523793cb-****-****-****-aa71c65ffa39'),
        workspaceName?: string(name='WorkspaceName', description='The name of the workspace to which the work belongs.', example='test'),
      }
    ](name='Data', description='List of works queried.'),
    pageNum?: int32(name='PageNum', description='Page number.', example='1'),
    pageSize?: int32(name='PageSize', description='Number of rows per page set when requesting the interface.', example='10'),
    totalNum?: int32(name='TotalNum', description='Total number of rows.', example='1'),
    totalPages?: int32(name='TotalPages', description='Total number of pages.', example='1'),
  }(name='Result', description='Returns the query result.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:
- true: The request was successful.
- false: The request failed.', example='true'),
}

model ListFavoriteReportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFavoriteReportsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFavoriteReports  ListFavoriteReportsRequest
  * @return ListFavoriteReportsResponse
 */
async function listFavoriteReports(request: ListFavoriteReportsRequest): ListFavoriteReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFavoriteReports', 'POST', '/', 'json', false, 'json', request);
}

model ListOrganizationRoleUsersRequest {
  keyword?: string(name='Keyword', description='Keyword for the nickname of the organization member.', example='zhangsan', position='Query'),
  pageNum?: int32(name='PageNum', description='Page number.

- Default value is 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='Number of items per page.
- Default value is 10.', example='10', position='Query'),
  roleId: long(name='RoleId', description='Organization role ID, including predefined roles and custom roles:

- Organization Administrator (predefined role): 111111111
- Permission Administrator (predefined role): 111111112
- Regular User (predefined role): 111111113
- Custom Role: The corresponding role ID for a custom role

This parameter is required.', example='111111111', position='Query'),
}

model ListOrganizationRoleUsersResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='BCE45E6D-****-4F94-86BB-****2B1615FF'),
  result?: {
    data?: [ 
      {
        nickName?: string(name='NickName', description='Nickname of the organization member.', example='Test User'),
        userId?: string(name='UserId', description='UserID of the organization member in Quick BI.', example='b5d8fd9348cc4327****afb604'),
      }
    ](name='Data', description='User list.'),
    pageNum?: int32(name='PageNum', description='Page number.', example='10'),
    pageSize?: int32(name='PageSize', description='Number of items per page as set in the request.', example='1'),
    totalNum?: int32(name='TotalNum', description='Total number of items.', example='10'),
    totalPages?: int32(name='TotalPages', description='Total number of pages.', example='1'),
  }(name='Result', description='Returns the list of users under the organization role.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:
- true: Request succeeded
- false: Request failed', example='true'),
}

model ListOrganizationRoleUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOrganizationRoleUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOrganizationRoleUsers  ListOrganizationRoleUsersRequest
  * @return ListOrganizationRoleUsersResponse
 */
async function listOrganizationRoleUsers(request: ListOrganizationRoleUsersRequest): ListOrganizationRoleUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrganizationRoleUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListOrganizationRolesRequest {
}

model ListOrganizationRolesResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='7AAB95D7-2E11-4FE2-94BC-858E4FC0C976'),
  result?: [ 
    {
      authConfigList?: [ 
        {
          authKey?: string(name='AuthKey', description='Permission type:
- quick_monitor: Metric monitoring
- subscription: Subscription management
- offline_download: Self-service data retrieval
- resource_package: Resource package management
- organization_ask: Organization identification code (AK/SK)
- developer_openapi: OpenAPI
- data_service: Data service
- admin_authorize3rd: Embedded analysis
- component_manage: Custom component
- template_open: Custom template
- custom_driver: Custom driver (supported only in standalone deployment)
- open_platform_custom_plugin: Custom plugin (supported only in standalone deployment)
- enterprise_safety: Enterprise security', example='enterprise_safety'),
        }
      ](name='AuthConfigList', description='List of role permission configurations.'),
      isSystemRole?: boolean(name='IsSystemRole', description='Whether it is a predefined role. Possible values:
- true: Yes
- false: No', example='true'),
      roleId?: long(name='RoleId', description='Role ID.', example='111111111'),
      roleName?: string(name='RoleName', description='Role name.', example='Organization Admin'),
    }
  ](name='Result', description='Returns the list of organization roles.'),
  success?: boolean(name='Success', description='是否请求成功。取值范围：
- true：请求成功
- false：请求失败', example='true'),
}

model ListOrganizationRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOrganizationRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOrganizationRoles  ListOrganizationRolesRequest
  * @return ListOrganizationRolesResponse
 */
async function listOrganizationRoles(request: ListOrganizationRolesRequest): ListOrganizationRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOrganizationRoles', 'POST', '/', 'json', false, 'json', request);
}

model ListPortalMenuAuthorizationRequest {
  dataPortalId: string(name='DataPortalId', description='The ID of the BI portal.

This parameter is required.', example='0d173abb53e84c8ca7495429163b****', position='Query'),
}

model ListPortalMenuAuthorizationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: [ 
    {
      menuId?: string(name='MenuId', description='The menu ID of the BI portal leaf node.', example='54kqgoa****'),
      receivers?: [ 
        {
          receiverId?: string(name='ReceiverId', description='The ID of the authorization object.', example='121344444790****'),
          receiverType?: int32(name='ReceiverType', description='The type of the authorization object. Valid values:

*   0: user
*   1: user group', example='0'),
        }
      ](name='Receivers', description='The details of the object to which the menu is authorized.'),
      showOnlyWithAccess?: boolean(name='ShowOnlyWithAccess', description='Whether only authorization is visible. Valid values:

*   true: Only the authorization is visible.
*   false: Both are visible.', example='true'),
    }
  ](name='Result', description='The list of authorization details of the portal menu.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ListPortalMenuAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPortalMenuAuthorizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPortalMenuAuthorization  ListPortalMenuAuthorizationRequest
  * @return ListPortalMenuAuthorizationResponse
 */
async function listPortalMenuAuthorization(request: ListPortalMenuAuthorizationRequest): ListPortalMenuAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPortalMenuAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model ListPortalMenusRequest {
  dataPortalId: string(name='DataPortalId', description='The ID of the BI portal.

This parameter is required.', example='0d173abb53e84c8ca7495429163b****', position='Query'),
  userId?: string(name='UserId', description='The user ID in the Quick BI. When passed in, the list displays only the menus that the user has permissions on.', example='1234567***', position='Query'),
}

model ListPortalMenusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='75912036-5527-4B7E-9265-B481D6651AC2'),
  result?: string(name='Result', description='A JSON string that levels the details of the portal menu list. Valid values:

*   menuType: the type of the menu.

    *   0: dashboard
    *   1: outer chain
    *   2: workbook
    *   4: directory folder
    *   5: form filling
    *   6: self-service data retrieval

*   menuId: menu ID

*   uri: ID or URL of the resource associated with the menu

*   showOnlyWithAccess: Authorized Only Visible

*   menuName: menu display name

*   dependentPermisson: whether the report resource associated with the menu has permissions

*   children: submenu', example='[{"children":[{"children":[{"children":[{"menuId":"54kqgoa\\*\\*\\*\\*","menuName":"Report menu","menuType":0,"showOnlyWithAccess":true,"dependentPermisson":false,"uri":"e5da4a3f-d7f9-4262-a39e-a840043c\\*\\*\\*\\*"},{\\*\\*\\*\\* "menu1nId":"pName" 135 "Directory menu","menuType":4,"showOnlyWithAccess":false,"dependentPermisson":true}],"menuId":"23a7d5d8-e55a-4737-b6a1-3c585505\\*\\*\\*\\*","menuName":"pop level -3 menu","menuType":4,"showOnlyWithAccess":true,"dependentPermisson":true}],"menuId":"80764 f3c-affd-45a1-aaa1-bb039d8a\\*\\*\\*\\*","menuName":"pop menu","menuType":4,"showOnlyWithAccess":false,"dependentPermisson":true}],"menuId":"277 f968a-22 ff-4ce6-83f0-a82950f4\\*\\*\\*\\*","menuName":"pop menu","menuType":4,"showOnlyWithAccess":false,"dependentPermisson":true}]'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ListPortalMenusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPortalMenusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPortalMenus  ListPortalMenusRequest
  * @return ListPortalMenusResponse
 */
async function listPortalMenus(request: ListPortalMenusRequest): ListPortalMenusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPortalMenus', 'POST', '/', 'json', false, 'json', request);
}

model ListRecentViewReportsRequest {
  keyword?: string(name='Keyword', description='Keyword of the name of the work.', example='Financial Statements', position='Query'),
  offsetDay?: int32(name='OffsetDay', description='The number of days to query data in the last few days. Default value: 10.', example='10', position='Query'),
  pageSize?: int32(name='PageSize', description='Query the number of rows in the work list:

*   Default value: 10.
*   Maximum value: 9999', example='10', position='Query'),
  queryMode?: string(name='QueryMode', description='The query mode. Valid values:

*   1: Sort by number of visits
*   2: Sort by Last Access Time', example='1', position='Query'),
  treeType?: string(name='TreeType', description='Query the type of the work (fill in the blank to query all types). Valid values:

*   DATAPRODUCT: BI portal
*   PAGE: Dashboard
*   REPORT: workbook', example='PAGE', position='Query'),
  userId: string(name='UserId', description='The UserID of the user in the Quick BI.

This parameter is required.', example='b5d8fd9348cc4327****afb604', position='Query'),
}

model ListRecentViewReportsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    attention?: string(name='Attention', description='Attention', example='test'),
    data?: [ 
      {
        favorite?: boolean(name='Favorite', description='Queries whether the user has collected the work.', example='true'),
        gmtCreate?: string(name='GmtCreate', description='The timestamp when the work was created.', example='1496651577000'),
        gmtModified?: string(name='GmtModified', description='The timestamp when the work was modified.', example='1640595729000'),
        hasEditAuth?: boolean(name='HasEditAuth', description='The query user has the editing rights of the work.', example='true'),
        hasViewAuth?: boolean(name='HasViewAuth', description='The query user has the permission to view the work.', example='true'),
        latestViewTime?: string(name='LatestViewTime', description='The timestamp when the work was last accessed.', example='1642067498000'),
        name?: string(name='Name', description='The name of the work.', example='Test report'),
        ownerName?: string(name='OwnerName', description='The Alibaba Cloud account name of the work owner.', example='test'),
        ownerNum?: string(name='OwnerNum', description='The UserID of the work owner.', example='1365*****238860'),
        publishStatus?: int32(name='PublishStatus', description='The publication status of the work. Valid values:

*   0: unpublished
*   1: published
*   2: modified and saved but not published.
*   3: unpublished', example='1'),
        treeId?: string(name='TreeId', description='The ID of the work.', example='977c7698-****-****-****-44b7304d20fc'),
        type?: string(name='Type', description='The type of the work. Valid values:

*   DATAPRODUCT: BI portal
*   PAGE: Dashboard
*   REPORT: workbook', example='PAGE'),
        viewCount?: long(name='ViewCount', description='The number of times the work was accessed.', example='7'),
        workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the work belongs.', example='523793cb-****-****-****-aa71c65ffa39'),
        workspaceName?: string(name='WorkspaceName', description='The name of the workspace to which the work belongs.', example='Test Workspace'),
      }
    ](name='Data', description='The list of queried works.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.

*   Default value: 10.
*   Maximum of 100 articles', example='10'),
    totalNum?: int32(name='TotalNum', description='The total number of rows in the table.', example='1'),
    totalPages?: int32(name='TotalPages', description='The total number of pages returned.', example='1'),
  }(name='Result', description='The query results are returned.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ListRecentViewReportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRecentViewReportsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRecentViewReports  ListRecentViewReportsRequest
  * @return ListRecentViewReportsResponse
 */
async function listRecentViewReports(request: ListRecentViewReportsRequest): ListRecentViewReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRecentViewReports', 'POST', '/', 'json', false, 'json', request);
}

model ListSharedReportsRequest {
  keyword?: string(name='Keyword', description='Keyword of the name of the work.', example='Test report', position='Query'),
  pageSize?: int32(name='PageSize', description='Query the number of rows in the work list:

*   Default value: 10.
*   Maximum value: 9999', example='10', position='Query'),
  treeType?: string(name='TreeType', description='Query the type of the work (fill in the blank to query all types). Valid values:

*   DATAPRODUCT: BI portal
*   PAGE: Dashboard
*   REPORT: workbook', example='PAGE', position='Query'),
  userId: string(name='UserId', description='The UserID of the user to be queried in the Quick BI.

This parameter is required.', example='b5d8fd9348cc4327****afb604', position='Query'),
}

model ListSharedReportsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    data?: [ 
      {
        favorite?: boolean(name='Favorite', description='Queries whether the user has collected the work.', example='true'),
        gmtCreate?: string(name='GmtCreate', description='The timestamp when the work was created.', example='1640088615000'),
        gmtModified?: string(name='GmtModified', description='The timestamp when the work was modified.', example='1644373980000'),
        hasEditAuth?: boolean(name='HasEditAuth', description='The query user has the editing rights of the work.', example='true'),
        hasViewAuth?: boolean(name='HasViewAuth', description='The query user has the permission to view the work.', example='true'),
        name?: string(name='Name', description='The name of the work.', example='Test report'),
        ownerName?: string(name='OwnerName', description='The Alibaba Cloud account name of the work owner.', example='test account'),
        ownerNum?: string(name='OwnerNum', description='The UserID of the work owner.', example='1365*****238860'),
        publishStatus?: int32(name='PublishStatus', description='The publication status of the work. Valid values:

*   0: unpublished
*   1: published
*   2: modified and saved but not published.
*   3: unpublished', example='1'),
        treeId?: string(name='TreeId', description='The ID of the work.', example='977c7698-****-****-****-44b7304d20fc'),
        type?: string(name='Type', description='The type of the work. Valid values:

*   DATAPRODUCT: BI portal
*   PAGE: Dashboard
*   REPORT: workbook', example='PAGE'),
        workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the work belongs.', example='gfidm145-****-****-9426-8f93be23****'),
        workspaceName?: string(name='WorkspaceName', description='The name of the workspace to which the work belongs.', example='Test Workspace'),
      }
    ](name='Data', description='The list of queried works.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of rows per page set when the interface is requested.', example='10'),
    totalNum?: int32(name='TotalNum', description='The total number of rows in the table.', example='1'),
    totalPages?: int32(name='TotalPages', description='The total number of pages returned.', example='1'),
  }(name='Result', description='The query results are returned.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ListSharedReportsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSharedReportsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSharedReports  ListSharedReportsRequest
  * @return ListSharedReportsResponse
 */
async function listSharedReports(request: ListSharedReportsRequest): ListSharedReportsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSharedReports', 'POST', '/', 'json', false, 'json', request);
}

model ListUserGroupsByUserIdRequest {
  userId: string(name='UserId', description='The ID of the user. The UserID of the Quick BI is used instead of the UID of Alibaba Cloud.

This parameter is required.', example='46e5374665ba4b679ee22e2a2927****', position='Query'),
}

model ListUserGroupsByUserIdResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E2440604-3059-561A-AD68-DEDBC870EB2B'),
  result?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the user group was created.', example='2021-03-15 17:13:55'),
      createUser?: string(name='CreateUser', description='The user group creator. The UserID of the Quick BI is used instead of the UID of Alibaba Cloud.', example='46e5374665ba4b679ee22e2a2927****'),
      identifiedPath?: string(name='IdentifiedPath', description='Directory level of the user group.'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the user group was last modified.', example='2021-03-15 20:36:40'),
      modifyUser?: string(name='ModifyUser', description='The user group modifier. The UserID of the Quick BI is used instead of the UID of Alibaba Cloud.', example='46e5374665ba4b679ee22e2a2927****'),
      parentUsergroupId?: string(name='ParentUsergroupId', description='The ID of the user group.', example='2fe4fbd8-588f-489a-b3e1-e92c7af0****'),
      usergroupDesc?: string(name='UsergroupDesc', description='The description of the user group.', example='Description'),
      usergroupId?: string(name='UsergroupId', description='The ID of the user group.', example='34fd141d-4598-4093-8c33-8e066dcb****'),
      usergroupName?: string(name='UsergroupName', description='The name of the user group.', example='Test user group'),
    }
  ](name='Result', description='The information about the group.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ListUserGroupsByUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserGroupsByUserIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserGroupsByUserId  ListUserGroupsByUserIdRequest
  * @return ListUserGroupsByUserIdResponse
 */
async function listUserGroupsByUserId(request: ListUserGroupsByUserIdRequest): ListUserGroupsByUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserGroupsByUserId', 'POST', '/', 'json', false, 'json', request);
}

model ListWorkspaceRoleUsersRequest {
  keyword?: string(name='Keyword', description='Keyword for the user\\"s nickname.', example='test', position='Query'),
  pageNum?: int32(name='PageNum', description='Current page number for pagination:

- Starting value: 1
- Default value: 1', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='Number of items per page for pagination:

- Default value: 10
- Maximum value: 1000', example='10', position='Query'),
  roleId: long(name='RoleId', description='Workspace role ID, including predefined roles and custom roles:

- 25: Workspace Administrator (predefined role)
- 26: Developer (predefined role)
- 27: Analyst (predefined role)
- 30: Viewer (predefined role)
- Custom roles: The corresponding role ID for custom roles

This parameter is required.', example='25', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='The ID of the workspace. This parameter is optional. If you do not set this parameter, the roles of all workspaces are returned.', example='726bee5a-****-43e1-9a8e-b550f0120f35', position='Query'),
}

model ListWorkspaceRoleUsersResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    data?: [ 
      {
        nickName?: string(name='NickName', description='Nickname of the organization member.', example='Test user'),
        userId?: string(name='UserId', description='UserID of the organization member in Quick BI.', example='b5d8fd9348cc4327****afb604'),
        workspaceId?: string(name='WorkspaceId', description='Workspace ID.', example='7350a155-0e94-4c6c-8620-57bbec38****'),
        workspaceName?: string(name='WorkspaceName', description='Workspace name.', example='Test space'),
      }
    ](name='Data', description='User list.'),
    pageNum?: int32(name='PageNum', description='Page number.', example='1'),
    pageSize?: int32(name='PageSize', description='Number of items per page as set in the request.', example='10'),
    totalNum?: int32(name='TotalNum', description='Total number of items.', example='1'),
    totalPages?: int32(name='TotalPages', description='Total number of pages.', example='1'),
  }(name='Result', description='Returns the list of users under the specified workspace role.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:
- true: The request was successful. 
- false: The request failed.', example='true'),
}

model ListWorkspaceRoleUsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspaceRoleUsersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWorkspaceRoleUsers  ListWorkspaceRoleUsersRequest
  * @return ListWorkspaceRoleUsersResponse
 */
async function listWorkspaceRoleUsers(request: ListWorkspaceRoleUsersRequest): ListWorkspaceRoleUsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWorkspaceRoleUsers', 'POST', '/', 'json', false, 'json', request);
}

model ListWorkspaceRolesRequest {
  workspaceId: string(name='WorkspaceId', description='Workspace ID.

This parameter is required.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model ListWorkspaceRolesResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: [ 
    {
      authConfigList?: [ 
        {
          actionAuthKeys?: [ string ](name='ActionAuthKeys', description='Authorization scope.'),
          authKey?: string(name='AuthKey', description='Authorization type:
- portal_create: Data Portal
- dashboard_create: Dashboard
- report_create: Spreadsheet
- screen_create: Data Screen
- analysis: Ad-hoc Analysis
- offline_download: Self-service Data Retrieval
- data_form: Data Entry
- quick_etl: Data Preparation
- cube: Dataset
- datasource: Data Source', example='portal_create'),
        }
      ](name='AuthConfigList', description='List of role authorization configurations.'),
      isSystemRole?: boolean(name='IsSystemRole', description='Whether it is a predefined role. Value range:

- true: Yes
- false: No', example='true'),
      roleId?: long(name='RoleId', description='Workspace role ID, including predefined and custom roles:

- 25: Workspace Administrator (predefined role)
- 26: Developer (predefined role)
- 27: Analyst (predefined role)
- 30: Viewer (predefined role)
- Custom role: The corresponding role ID for a custom role', example='25'),
      roleName?: string(name='RoleName', description='Role name.', example='Space administrator'),
    }
  ](name='Result', description='List of workspace roles.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:
- true: The request was successful. 
- false: The request failed.', example='true'),
}

model ListWorkspaceRolesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspaceRolesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWorkspaceRoles  ListWorkspaceRolesRequest
  * @return ListWorkspaceRolesResponse
 */
async function listWorkspaceRoles(request: ListWorkspaceRolesRequest): ListWorkspaceRolesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWorkspaceRoles', 'POST', '/', 'json', false, 'json', request);
}

model ManualRunMailTaskRequest {
  mailId: string(name='MailId', description='The ID of the email task in the subscription management interface.

This parameter is required.', example='3423423sdfa****sdadw', position='Query'),
}

model ManualRunMailTaskResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='a4d1a221d-41za1-****'),
  result?: boolean(name='Result', description='Indicates whether the execution was successful.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Value range:
- true: The request succeeded 
- false: The request failed', example='true'),
}

model ManualRunMailTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ManualRunMailTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ManualRunMailTask  ManualRunMailTaskRequest
  * @return ManualRunMailTaskResponse
 */
async function manualRunMailTask(request: ManualRunMailTaskRequest): ManualRunMailTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ManualRunMailTask', 'POST', '/', 'json', false, 'json', request);
}

model ModifyApiDatasourceParametersRequest {
  apiId: string(name='ApiId', description='The ID of the API data source.

This parameter is required.', example='b66a66de51f24d149116c17718138194', position='Query'),
  parameters: string(name='Parameters', description='The configuration of API data parameters in the JSONArray format. You can modify a maximum of 10 parameters.

*   name: the name of a common parameter or a parameter in a query statement
*   value: the value of a common parameter or a parameter in a query statement.

This parameter is required.', example='[{"name":"token","value":"xxxxxxxxxxxx"},{"name":"pageSize","value":100}]', position='Query'),
  workspaceId: string(name='WorkspaceId', description='The workspace ID.

This parameter is required.', example='726bee5a-****-43e1-9a8e-b550f0120f35', position='Query'),
}

model ModifyApiDatasourceParametersResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: boolean(name='Result', description='The execution result of the interface. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ModifyApiDatasourceParametersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyApiDatasourceParametersResponseBody(name='body'),
}

/**
  * @description When you modify a query statement, you can modify only the top-level JsonObject. You cannot modify parameters that are nested in multiple layers. For more information about the parameters, see [Create an API data source](https://help.aliyun.com/document_detail/409330.html).
  * @param request  the request parameters of ModifyApiDatasourceParameters  ModifyApiDatasourceParametersRequest
  * @return ModifyApiDatasourceParametersResponse
 */
async function modifyApiDatasourceParameters(request: ModifyApiDatasourceParametersRequest): ModifyApiDatasourceParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyApiDatasourceParameters', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCopilotEmbedConfigRequest {
  agentName?: string(name='AgentName', description='Agent nickname.', example='smartq', position='Query'),
  copilotId: string(name='CopilotId', description='Embedding ID.

This parameter is required.', example='ccd3428c-dd2xxxxxxxxxxxxdffee', position='Query'),
  dataRange?: string(name='DataRange', description='Data range.
>Notice: The parameter type is jsonString, and only one switch between analysis themes and query resources can be effective. When the all-select switch is true, it takes precedence. It is recommended to pass only one parameter, with other notes', example='Map<String,Object> data=new HashMap<>();
        data.put("allTheme",true);
        //data.put("allCube",true);
        //data.put("themes",Lists.newArrayList("1111","22222"));
        //data.put("llmCubes",Lists.newArrayList("33333","44444"));
        request.setDataRange(JSON.toJSONString(data));', position='Query'),
  moduleName?: string(name='ModuleName', description='Module name.', example='smartq', position='Query'),
}

model ModifyCopilotEmbedConfigResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='4BAA469******A9289FEE'),
  result?: boolean(name='Result', description='Returns the result of the API execution. Possible values:
- true: Execution succeeded
- false: Execution failed', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:
- true: The request was successful
- false: The request failed', example='true'),
}

model ModifyCopilotEmbedConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyCopilotEmbedConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyCopilotEmbedConfig  ModifyCopilotEmbedConfigRequest
  * @return ModifyCopilotEmbedConfigResponse
 */
async function modifyCopilotEmbedConfig(request: ModifyCopilotEmbedConfigRequest): ModifyCopilotEmbedConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCopilotEmbedConfig', 'POST', '/', 'json', false, 'json', request);
}

model QueryApprovalInfoRequest {
  page?: int32(name='Page', description='Page number, default is 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='Number of rows per page, default is 1000.', example='1000', position='Query'),
  status: int32(name='Status', description='Approval status:
- 0: Pending
- 1: Processed

This parameter is required.', example='0', minimum=0, maximum=1, position='Query'),
  userId: string(name='UserId', description='Current approver user ID, qbi user ID.

This parameter is required.', example='12352fasdavsa', position='Query'),
}

model QueryApprovalInfoResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    data?: [ 
      {
        applicantId?: string(name='ApplicantId', description='Applicant\\"s user ID, qbi user ID.', example='1359508'),
        applicantName?: string(name='ApplicantName', description='Applicant\\"s nickname.', example='Li Fei'),
        applicationId?: string(name='ApplicationId', description='Application ID.', example='64813ef6da58e80eef8ed2f9'),
        applyReason?: string(name='ApplyReason', description='Application reason.', example='Development needs'),
        approverId?: string(name='ApproverId', description='Approver\\"s user ID, qbi user ID.', example='sdasascasxasd'),
        approverName?: string(name='ApproverName', description='Approver\\"s nickname.', example='data_fusion_002'),
        deleteFlag?: boolean(name='DeleteFlag', description='Whether the resource has been deleted:
- true: Deleted
- false: Not deleted', example='true'),
        expireDate?: long(name='ExpireDate', description='Permission expiration date, timestamp.', example='1708568097135'),
        flagStatus?: int32(name='FlagStatus', description='Permission approval status:
- 0: Under review, corresponding to 0 in the request parameters
- 1: Approved, corresponding to 1 in the request parameters
- 2: Rejected, corresponding to 1 in the request parameters', example='0'),
        gmtCreate?: long(name='GmtCreate', description='Application creation time, timestamp.', example='1687315758'),
        gmtModified?: long(name='GmtModified', description='Application modification time, timestamp.', example='1640595729000'),
        handleReason?: string(name='HandleReason', description='Handling reason.', example='Development needs'),
        resourceId?: string(name='ResourceId', description='The ID of the resource for which permission is requested.', example='acl-ct4t2e4u2x4ej1bzur'),
        resourceName?: string(name='ResourceName', description='The name of the resource for which permission is requested (e.g., report name, space name...).', example='Test Resources'),
        resourceType?: string(name='ResourceType', description='The type of the resource.', example='DASHBOARD'),
        workspaceName?: string(name='WorkspaceName', description='The name of the workspace.', example='Test Workspace'),
      }
    ](name='Data', description='Array of approval flow information.'),
    page?: int32(name='Page', description='The current page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of records requested per page.', example='1000'),
    start?: int32(name='Start', description='The starting position of the current page.', example='0'),
    total?: int32(name='Total', description='The total number of items.', example='3'),
    totalPages?: int32(name='TotalPages', description='The total number of pages.', example='1'),
  }(name='Result', description='Return the result of the interface execution.'),
  success?: boolean(name='Success', description='Indicates whether the API call was successful. Possible values are:
- true: success
- false: failure', example='true'),
}

model QueryApprovalInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryApprovalInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryApprovalInfo  QueryApprovalInfoRequest
  * @return QueryApprovalInfoResponse
 */
async function queryApprovalInfo(request: QueryApprovalInfoRequest): QueryApprovalInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryApprovalInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryAuditLogRequest {
  accessSourceFlag?: string(name='AccessSourceFlag', position='Query'),
  endDate: string(name='EndDate', description='End date of the query, format ("yyyyMMdd").

This parameter is required.', example='20240604', position='Query'),
  logType: string(name='LogType', description='Log type:
- dataView - Access
- function - Operation
- permission - Permission

This parameter is required.', example='function', position='Query'),
  operatorId?: string(name='OperatorId', description='Operator\\"s user ID.', example='95296e95-ca89-4c7d-8af9-dedf0ad0***', position='Query'),
  operatorTypes?: string(name='OperatorTypes', description='Permission/Access/Operation type, empty - default all;

Refer to the audit log code values, send multiple values separated by English commas.', example='MODIFY', position='Query'),
  resourceType?: string(name='ResourceType', description='Resource type, refer to the work type.', example='cube', position='Query'),
  startDate: string(name='StartDate', description='Start date of the query, format ("yyyyMMdd"), cannot be earlier than 90 days from the current time.

This parameter is required.', example='20240504', position='Query'),
  userAccessDevice?: string(name='UserAccessDevice', position='Query'),
  workspaceId?: string(name='WorkspaceId', description='Workspace ID, the ID of the workspace to which the logs to be queried belong.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model QueryAuditLogResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='78C1AA2D-9201-599E-A0BA-6FC462E57A95'),
  result?: [ 
    {
      gmtCreate?: string(name='GmtCreate', description='Log time.', example='2024-04-16 13:17:39'),
      operatorAccountName?: string(name='OperatorAccountName', description='Operator account.', example='wukaibis'),
      operatorName?: string(name='OperatorName', description='Operator\\"s nickname.', example='buc_344078'),
      operatorType?: string(name='OperatorType', description='Operation type.', example='CREATE'),
      targetId?: string(name='TargetId', description='Target ID.', example='1113***************8500'),
      targetName?: string(name='TargetName', description='Target name.', example='test'),
      targetType?: string(name='TargetType', description='Target type.', example='USER'),
      workspaceId?: string(name='WorkspaceId', description='Workspace ID.', example='87c6b145-090c-43e1-9426-8f93be23****'),
    }
  ](name='Result', description='Array of logs.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values: 
- true: The request succeeded 
- false: The request failed', example='true'),
}

model QueryAuditLogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAuditLogResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAuditLog  QueryAuditLogRequest
  * @return QueryAuditLogResponse
 */
async function queryAuditLog(request: QueryAuditLogRequest): QueryAuditLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAuditLog', 'POST', '/', 'json', false, 'json', request);
}

model QueryComponentPerformanceRequest {
  costTimeAvgMin?: int32(name='CostTimeAvgMin', description='The average duration (minutes).', example='1', position='Query'),
  pageNum?: int32(name='PageNum', description='The current page number of the workspace member list:

*   Pages start from page 1.
*   Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of rows per page in a paged query.

*   Default value: 10.
*   Maximum value: 1,000.', example='100', position='Query'),
  queryType: string(name='QueryType', description='The query type. Valid values:

*   **lastDay**: Yesterday
*   **sevenDays**: Within seven days
*   **thirtyDays**: Within 30 days

This parameter is required.', example='sevenDays', position='Query'),
  reportId?: string(name='ReportId', description='The ID of the work. The works here include BI portal, dashboards, spreadsheets, and self-service access.', example='6b407e50-e774-406b-9956-da2425c2****', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource types.', example='report', position='Query'),
  workspaceId: string(name='WorkspaceId', description='The workspace ID.

This parameter is required.', example='89713491-cb4f-4579-b889-e82c35f1****', position='Query'),
}

model QueryComponentPerformanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='BCE45E6D-9304-4F94-86BB-5A772B1615FF'),
  result?: [ 
    {
      cacheCostTimeAvg?: double(name='CacheCostTimeAvg', description='The average duration of cache hits.', example='0.3'),
      cacheQueryCount?: int32(name='CacheQueryCount', description='The number of cache hits.', example='3'),
      componentId?: string(name='ComponentId', description='The component ID.', example='0696083a-ca72-4d89-8e7a-c017910e0***'),
      componentName?: string(name='ComponentName', description='The name of the add-on.', example='test'),
      costTimeAvg?: double(name='CostTimeAvg', description='The average query duration associated with the SQL pattern.', example='0.3'),
      queryCount?: int32(name='QueryCount', description='The number of queries.', example='5'),
      queryCountAvg?: double(name='QueryCountAvg', description='The average number of queries.', example='0.3'),
      queryOverFivePercentNum?: double(name='QueryOverFivePercentNum', description='The query exceeds the 5S number of queries.', example='5'),
      queryOverFiveSecPercent?: string(name='QueryOverFiveSecPercent', description='Query the proportion of more than 5S.', example='0.3'),
      queryOverTenSecPercent?: string(name='QueryOverTenSecPercent', description='The percentage of queries that exceed 10s.', example='0.3'),
      queryOverTenSecPercentNum?: double(name='QueryOverTenSecPercentNum', description='The percentage of queries that exceed 10s.', example='0.3'),
      queryTimeoutCount?: int32(name='QueryTimeoutCount', description='The number of times that the chart query times out.', example='1'),
      queryTimeoutCountPercent?: double(name='QueryTimeoutCountPercent', description='The percentage of timeout times for chart queries.', example='0.3'),
      quickIndexCostTimeAvg?: double(name='QuickIndexCostTimeAvg', description='The average time consumed by the Quick engine query.', example='0.3'),
      quickIndexQueryCount?: int32(name='QuickIndexQueryCount', description='The number of times that the Quick engine is hit.', example='3'),
      repeatQueryPercent?: string(name='RepeatQueryPercent', description='The proportion of duplicate queries.', example='0.3'),
      repeatQueryPercentNum?: double(name='RepeatQueryPercentNum', description='The number of duplicate queries.', example='2'),
      repeatSqlQueryCount?: int32(name='RepeatSqlQueryCount', description='The number of times the query is repeated.', example='5'),
      repeatSqlQueryPercent?: string(name='RepeatSqlQueryPercent', description='The proportion of duplicate queries.', example='0.3'),
      reportId?: string(name='ReportId', description='The ID of the work.', example='6b407e50-e774-406b-9956-da2425c2****'),
      reportName?: string(name='ReportName', description='The name of the report.', example='ClusterRiskReport'),
      reportType?: string(name='ReportType', description='The format of the report.', example='report'),
      workspaceId?: string(name='WorkspaceId', description='The unique ID of the space.', example='89713491-cb4f-4579-b889-e82c35f1****'),
      workspaceName?: string(name='WorkspaceName', description='The name of the group.', example='test'),
    }
  ](name='Result', description='The result returned.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryComponentPerformanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryComponentPerformanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryComponentPerformance  QueryComponentPerformanceRequest
  * @return QueryComponentPerformanceResponse
 */
async function queryComponentPerformance(request: QueryComponentPerformanceRequest): QueryComponentPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryComponentPerformance', 'POST', '/', 'json', false, 'json', request);
}

model QueryCopilotEmbedConfigRequest {
  keyword?: string(name='Keyword', description='Name of the embedded configuration module, supports fuzzy search.', example='06-ELive', position='Query'),
}

model QueryCopilotEmbedConfigResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='1FC71085-D5FD-08E0-813A-4D4BD1031BC5'),
  result?: [ 
    {
      agentName?: string(name='AgentName', description='Robot\\"s nickname.', example='little Q'),
      copilotId?: string(name='CopilotId', description='Embedding ID.', example='9c079710-ddbe-48b3-b495-7c83c8d57cc4'),
      createUser?: string(name='CreateUser', description='ID of the creator.', example='qweqw12312423521'),
      createUserName?: string(name='CreateUserName', description='Nickname of the creator.', example='zhangsan'),
      dataRange?: {
        allCube?: boolean(name='AllCube', description='Whether all question resources are selected.', example='true/false'),
        allTheme?: boolean(name='AllTheme', description='Whether all analysis themes are selected.', example='true/false'),
        llmCubes?: [ string ](name='LlmCubes', description='Collection of question resource IDs.'),
        themes?: [ string ](name='Themes', description='Collection of analysis theme IDs.'),
      }(name='DataRange', description='Data range (analysis themes and question resources).'),
      modifyUser?: string(name='ModifyUser', description='ID of the modifier.', example='asda1231231dfs'),
      moduleName?: string(name='ModuleName', description='Module name.', example='little Q'),
      showName?: string(name='ShowName', description='Name of the embedded module.', example='0327'),
    }
  ](name='Result', description='List of embedded configurations.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: The request was successful.
- false: The request failed.', example='true'),
}

model QueryCopilotEmbedConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCopilotEmbedConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCopilotEmbedConfig  QueryCopilotEmbedConfigRequest
  * @return QueryCopilotEmbedConfigResponse
 */
async function queryCopilotEmbedConfig(request: QueryCopilotEmbedConfigRequest): QueryCopilotEmbedConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCopilotEmbedConfig', 'POST', '/', 'json', false, 'json', request);
}

model QueryCubeOptimizationRequest {
  workspaceId: string(name='WorkspaceId', description='The workspace ID.

This parameter is required.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model QueryCubeOptimizationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: [ 
    {
      adviceType?: string(name='AdviceType', description='The type of the suggestion. Valid values:

*   **OPEN_CACHE**: Open cache.
*   **OPEN_QUICK_ENGINE**: Open FAST Cache.
*   **INCREASE_CACHE_TIME**: Increase the cache time.', example='OPENQUICKENGINE'),
      cubePerformanceDiagnoseModel?: {
        cacheCostTimeAvg?: double(name='CacheCostTimeAvg', description='The average duration of cache hits.', example='1'),
        cacheQueryCount?: int32(name='CacheQueryCount', description='The number of cache hits.', example='2'),
        costTimeAvg?: double(name='CostTimeAvg', description='The average query duration associated with the SQL pattern.', example='1.0'),
        cubeId?: string(name='CubeId', description='The dataset ID.', example='3e45b61a-9ba8-4c7c-8248-8dbe69945636'),
        cubeName?: string(name='CubeName', description='The name of the dataset.', example='test'),
        queryCount?: int32(name='QueryCount', description='The number of queries.', example='50'),
        queryCountAvg?: double(name='QueryCountAvg', description='The average number of queries.', example='2'),
        queryOverFivePercentNum?: double(name='QueryOverFivePercentNum', description='The percentage of the number of queries that exceed the 5S.', example='0.1'),
        queryOverFiveSecPercent?: string(name='QueryOverFiveSecPercent', description='Query the proportion of more than 5S.', example='0.5'),
        queryOverTenSecPercent?: string(name='QueryOverTenSecPercent', description='The percentage of queries that exceed 10s.', example='0.1'),
        queryOverTenSecPercentNum?: double(name='QueryOverTenSecPercentNum', description='The percentage of queries that exceed 10s.', example='0.3'),
        queryTimeoutCount?: int32(name='QueryTimeoutCount', description='The number of times that the chart query times out.', example='1'),
        queryTimeoutCountPercent?: double(name='QueryTimeoutCountPercent', description='The percentage of timeout times for chart queries.', example='0.3'),
        quickIndexCostTimeAvg?: double(name='QuickIndexCostTimeAvg', description='The average time consumed by the Quick engine query.', example='1'),
        quickIndexQueryCount?: int32(name='QuickIndexQueryCount', description='The number of times that the Quick engine is hit.', example='2'),
        repeatQueryPercent?: string(name='RepeatQueryPercent', description='The proportion of duplicate queries.', example='0.1'),
        repeatQueryPercentNum?: double(name='RepeatQueryPercentNum', description='The number of duplicate queries.', example='2'),
        repeatSqlQueryCount?: int32(name='RepeatSqlQueryCount', description='The number of times the query is repeated.', example='2'),
        repeatSqlQueryPercent?: string(name='RepeatSqlQueryPercent', description='The proportion of duplicate queries.', example='0.3'),
        workspaceId?: string(name='WorkspaceId', description='The workspace ID.', example='6ea74bff-c818-4188-b462-dbb45a24dbac'),
        workspaceName?: string(name='WorkspaceName', description='The name of the workspace.', example='eco0sh0prods'),
      }(name='CubePerformanceDiagnoseModel', description='The diagnostic information about the dataset.'),
    }
  ](name='Result', description='The query results are returned.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryCubeOptimizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCubeOptimizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCubeOptimization  QueryCubeOptimizationRequest
  * @return QueryCubeOptimizationResponse
 */
async function queryCubeOptimization(request: QueryCubeOptimizationRequest): QueryCubeOptimizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCubeOptimization', 'POST', '/', 'json', false, 'json', request);
}

model QueryCubePerformanceRequest {
  costTimeAvgMin?: int32(name='CostTimeAvgMin', description='The average duration (minutes).', example='1', position='Query'),
  cubeId?: string(name='CubeId', description='The dataset ID.', example='7c7223ae-****-3c744528014b', position='Query'),
  pageNum?: int32(name='PageNum', description='The current page number of the workspace member list:

*   Pages start from page 1.
*   Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of rows per page in a paged query.

*   Default value: 10.
*   Maximum value: 1,000.', example='100', position='Query'),
  queryType: string(name='QueryType', description='The query type. Valid values:

*   **lastDay**: Yesterday
*   **sevenDays**: Within seven days
*   **thirtyDays**: Within 30 days

This parameter is required.', example='sevenDays', position='Query'),
  workspaceId: string(name='WorkspaceId', description='The workspace ID.

This parameter is required.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model QueryCubePerformanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='685072a0-1fd5-40ef-ae6b-cf94e79e718f'),
  result?: [ 
    {
      cacheCostTimeAvg?: double(name='CacheCostTimeAvg', description='The average duration of cache hits.', example='1'),
      cacheQueryCount?: int32(name='CacheQueryCount', description='The number of cache hits.', example='1'),
      costTimeAvg?: double(name='CostTimeAvg', description='The average query duration associated with the SQL pattern.', example='1'),
      cubeId?: string(name='CubeId', description='The dataset ID.', example='7c7223ae-****-3c744528014b'),
      cubeName?: string(name='CubeName', description='The name of the dataset.', example='test'),
      queryCount?: int32(name='QueryCount', description='The number of queries.', example='50'),
      queryCountAvg?: double(name='QueryCountAvg', description='The average number of queries.', example='1'),
      queryOverFivePercentNum?: double(name='QueryOverFivePercentNum', description='The percentage of the number of queries that exceed the 5S.', example='1.0'),
      queryOverFiveSecPercent?: string(name='QueryOverFiveSecPercent', description='Query the proportion of more than 5S.', example='1.0'),
      queryOverTenSecPercent?: string(name='QueryOverTenSecPercent', description='The percentage of queries that exceed 10s.', example='1.0'),
      queryOverTenSecPercentNum?: double(name='QueryOverTenSecPercentNum', description='The percentage of queries that exceed 10s.', example='1.0'),
      queryTimeoutCount?: int32(name='QueryTimeoutCount', description='The number of times that the chart query times out.', example='1'),
      queryTimeoutCountPercent?: double(name='QueryTimeoutCountPercent', description='The percentage of timeout times for chart queries.', example='1'),
      quickIndexCostTimeAvg?: double(name='QuickIndexCostTimeAvg', description='The average time consumed by the Quick engine query.', example='1'),
      quickIndexQueryCount?: int32(name='QuickIndexQueryCount', description='The number of times that the Quick engine is hit.', example='1'),
      repeatQueryPercent?: string(name='RepeatQueryPercent', description='The proportion of duplicate queries.', example='0.3'),
      repeatQueryPercentNum?: double(name='RepeatQueryPercentNum', description='The number of duplicate queries.', example='1'),
      repeatSqlQueryCount?: int32(name='RepeatSqlQueryCount', description='The number of times the query is repeated.', example='1'),
      repeatSqlQueryPercent?: string(name='RepeatSqlQueryPercent', description='The proportion of duplicate queries.', example='1'),
      workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the work belongs.', example='87c6b145-090c-43e1-9426-8f93be23****'),
      workspaceName?: string(name='WorkspaceName', description='The name of the group.', example='taascontainerprod'),
    }
  ](name='Result', description='Array of report objects'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryCubePerformanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCubePerformanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCubePerformance  QueryCubePerformanceRequest
  * @return QueryCubePerformanceResponse
 */
async function queryCubePerformance(request: QueryCubePerformanceRequest): QueryCubePerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCubePerformance', 'POST', '/', 'json', false, 'json', request);
}

model QueryDataRequest {
  apiId: string(name='ApiId', description='The API ID in the data service. For more information, see: [Data Service](https://help.aliyun.com/document_detail/144980.html).

This parameter is required.', example='f4cc43bc3***', position='Query'),
  conditions?: string(name='Conditions', description='The query conditions for the data service, passed in as Key and Value pairs. A map-type string. Here, Key is the name of the request parameter, and Value is the value of the request parameter. Key and Value must appear in pairs.

**Note:**

- When the operator of the request parameter is set to **enumeration filtering**, the value can contain multiple values, and the format of the value should be a JSON-formatted List. For example: `area=["East China","North China","South China"]`

- For dates, different formats are provided based on the type:

    - Year: 2019

    - Quarter: 2019Q1

    - Month: 201901 (with leading zero)
    
    - Week: 2019-52

    - Day: 20190101

    - Hour: 14:00:00 (minutes and seconds are 00)
    
    - Minute: 14:12:00 (seconds are 00)

    - Second: 14:34:34', example='test', position='Query'),
  returnFields?: string(name='ReturnFields', description='A list of return parameter names, in a List-type string.', example='["area", "city", "price", "date"]', position='Query'),
  userId?: string(name='UserId', description='The userId in Quick BI. For how to obtain the userId, see: [Query User Information by Account Interface](https://next.api.aliyun.com/document/quickbi-public/2022-01-01/QueryUserInfoByAccount)
> This parameter is used to specify the identity of the person using the data service, which can be used in conjunction with the row and column permission configurations of the dataset.



>Notice: If the parameter is not passed, an empty string is passed, or null is passed, the default userId will be the owner of the current Quick BI organization.</notice>', example='b5d8fd9348cc4327****afb604', position='Query'),
}

model QueryDataResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='a4d1a221d-41za1-****'),
  result?: {
    headers?: [ 
      {
        aggregator?: string(name='Aggregator', description='Aggregation operator. Only present for measure fields, such as SUM, AVG, and MAX.
- SUM: Sum
- MAX: Maximum value
- MIN: Minimum value
- AVG: Average
- COUNT: Count
- COUNTD: Distinct count
- STDDEV_POP: Population standard deviation
- STDDEV_SAMP: Sample standard deviation
- VAR_POP: Population variance
- VAR_SAMP: Sample variance', example='SUM'),
        column?: string(name='Column', description='Field name, corresponding to the physical table field name.', example='Specific physical field name'),
        dataType?: string(name='DataType', description='The keyword of the sensitive field type.', example='string'),
        granularity?: string(name='Granularity', description='The granularity of the dimension field.
This field is returned only when the requested field is a date or geographic dimension, with the following possible values:

- Date Granularity: yearRegion (year), monthRegion (month), weekRegion (week), dayRegion (day), hourRegion (hour), minRegion (minute), secRegion (second)

- Geographic Granularity: COUNTRY (international level), PROVINCE (provincial level), CITY (city level), XIAN (district/county level), REGION (region)', example='REGION'),
        label?: string(name='Label', description='Field alias, which serves as the key in the map data rows of the `values` parameter.', example='area'),
        type?: string(name='Type', description='Field type, used to distinguish between dimension and measure fields.
- Dimension: dimension
- Measure: measure', example='Dimension'),
      }
    ](name='Headers', description='Column headers.'),
    sql?: string(name='Sql', description='The SQL query that was executed.
> The filter conditions in the returned SQL statement include not only the parameters passed through this interface but also the row and column permission configurations.', example='test'),
    values?: [  map[string]any ](name='Values', description='The results of the query.'),
  }(name='Result', description='Returns the result of the interface execution. Possible values:

- true: Execution succeeded
- false: Execution failed'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: Request succeeded
- false: Request failed', example='true'),
}

model QueryDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDataResponseBody(name='body'),
}

/**
  * @description ### Prerequisites
  * You need to create a data service API through Quick BI\\"s data service. For more details, see: [Data Service](https://help.aliyun.com/document_detail/144980.html).
  * ### Usage Restrictions
  * * The data service feature is only available to professional edition customers.
  * * The timeout for data service API calls is 60s, and the QPS for a single API is 10 times/second.
  * * If row-level permissions are enabled on the dataset referenced by the data service API, the API call will also be intercepted by the row-level permission policy.
  * @param request  the request parameters of QueryData  QueryDataRequest
  * @return QueryDataResponse
 */
async function queryData(request: QueryDataRequest): QueryDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryData', 'POST', '/', 'json', false, 'json', request);
}

model QueryDataRangeRequest {
  keyword?: string(name='Keyword', description='Name, for fuzzy search.', example='test', position='Query'),
  type: string(name='Type', description='Data range type:

- llmCube: LlmCube resource.
- llmCubeTheme: Analysis theme.

This parameter is required.', example='llmCube', position='Query'),
}

model QueryDataRangeResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-****-B626-C2B05DF8D885'),
  result?: {
    apiCopilotLlmCubeModels?: [ 
      {
        alias?: string(name='Alias', description='Alias of the LlmCube resource.', example='test'),
        createUser?: string(name='CreateUser', description='Nickname of the creator.', example='zhuge'),
        llmCubeId?: string(name='LlmCubeId', description='LlmCube resource ID.', example='sdasdafas23342342342'),
      }
    ](name='ApiCopilotLlmCubeModels', description='Array of LlmCube resources.'),
    apiCopilotThemeModels?: [ 
      {
        apiCopilotLlmCubeModels?: [ 
          {
            alias?: string(name='Alias', description='Alias of the LLM cube resource.', example='test'),
            createUser?: string(name='CreateUser', description='Nickname of the creator.', example='zhuge'),
            llmCubeId?: string(name='LlmCubeId', description='LlmCube resource ID.', example='1231242231asdasda'),
          }
        ](name='ApiCopilotLlmCubeModels', description='Array of LlmCube resources.'),
        createUser?: string(name='CreateUser', description='Nickname of the creator.', example='zhuge'),
        themeId?: string(name='ThemeId', description='Analysis theme ID.', example='36631232342312312'),
        themeName?: string(name='ThemeName', description='Nickname of the analysis theme.', example='test theme'),
      }
    ](name='ApiCopilotThemeModels', description='Array of analysis themes.'),
  }(name='Result', description='Data range object.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:
- true: The request was successful.
- false: The request failed.', example='true'),
}

model QueryDataRangeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDataRangeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDataRange  QueryDataRangeRequest
  * @return QueryDataRangeResponse
 */
async function queryDataRange(request: QueryDataRangeRequest): QueryDataRangeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDataRange', 'POST', '/', 'json', false, 'json', request);
}

model QueryDataServiceRequest {
  apiId: string(name='ApiId', description='The API ID in the data service. For more information, see [Data Service](https://help.aliyun.com/document_detail/144980.html).

This parameter is required.', example='f4cc43bc3***', position='Query'),
  conditions?: string(name='Conditions', description='The query conditions for the data service, passed in as Key-Value pairs. This is a map-type string. Here, Key is the name of the request parameter, and Value is the value of the request parameter. Keys and Values must appear in pairs.

**Note:**

- When the operator of the request parameter is set to **enumeration filter**, the value can contain multiple values. In this case, the format of the value is a JSON list. For example: `area=["East China","North China","South China"]`     

- For dates, different formats are provided based on the type:

    - Year: 2019

    - Quarter: 2019Q1

    - Month: 201901 (with leading zero)
    
    - Week: 2019-52

    - Day: 20190101

    - Hour: 14:00:00 (minutes and seconds are 00)
    
    - Minute: 14:12:00 (seconds are 00)

    - Second: 14:34:34', example='{ "area": ["华东", "华北"],  "shopping_date": "2019Q1",  }', position='Query'),
  returnFields?: string(name='ReturnFields', description='A list of parameter names to be returned, as a List-type string.', example='["area", "city", "price", "date"]', position='Query'),
}

model QueryDataServiceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='78C1AA2D-9201-599E-A0BA-6FC462E57A95'),
  result?: {
    headers?: [ 
      {
        aggregator?: string(name='Aggregator', description='Aggregation operator. Only present for measure fields, such as SUM, AVG, and MAX.', example='SUM'),
        column?: string(name='Column', description='Field name, corresponding to the physical table field name.', example='The alias of the field. The key of the map data row in the result parameter values.'),
        dataType?: string(name='DataType', description='The data type of the field. Common types include number, string, date, datetime, time, and geographic.', example='string'),
        granularity?: string(name='Granularity', description='The granularity of the dimension field.
This field is returned only when the requested field is a date or geographic dimension, with the following possible values:

- Date granularity: yearRegion (year), monthRegion (month), weekRegion (week), dayRegion (day), hourRegion (hour), minRegion (minute), secRegion (second)

- Geographic granularity: COUNTRY (country level), PROVINCE (province level), CITY (city level), XIAN (district/county level), REGION (region)', example='yearRegion'),
        label?: string(name='Label', description='字段别名，结果参数values中map数据行的key。', example='area'),
        type?: string(name='Type', description='Field type, used to distinguish between dimension and measure fields.', example='StandardDimension'),
      }
    ](name='Headers', description='Column headers.'),
    sql?: string(name='Sql', description='The SQL of the query request.', example='SELECT COMPANY_T_1_.`area` AS D_AREA_2_, COMPANY_T_1_.`city` AS D_CITY_3_, SUM(COMPANY_T_1_.`profit_amt`) AS D_PROFIT_4_ FROM `quickbi_test`.`company_sales_record_copy` AS COMPANY_T_1_ WHERE COMPANY_T_1_.`area` LIKE \\"%华东%\\" GROUP BY COMPANY_T_1_.`area`, COMPANY_T_1_.`city` HAVING SUM(COMPANY_T_1_.`order_amt`) > 1 LIMIT 0, 10'),
    values?: [  map[string]any ](name='Values', description='The queried results returned.'),
  }(name='Result', description='Returns the result of the interface query.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: The request was successful

- false: The request failed', example='true'),
}

model QueryDataServiceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDataServiceResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI QueryDataService is deprecated, please use quickbi-public::2022-01-01::QueryData instead.  * @description #### Prerequisites
  * You create the data service API through Quick BI\\"s data service. For more details, see [Data Service](https://help.aliyun.com/document_detail/144980.html).
  * #### Usage Restrictions
  * * The data service feature is only available to professional edition customers. 
  * * The timeout for data service API calls is 60s, and the QPS for a single API is 10 times/second.
  * * If row-level permissions are enabled on the dataset referenced by the data service API, the API call may be intercepted by the row-level permission policy.
  * @param request  the request parameters of QueryDataService  QueryDataServiceRequest
  * @return QueryDataServiceResponse
 */
// Deprecated
async function queryDataService(request: QueryDataServiceRequest): QueryDataServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDataService', 'POST', '/', 'json', false, 'json', request);
}

model QueryDataServiceListRequest {
  name?: string(name='Name', description='Data service name.', example='test', position='Query'),
  pageNo?: int32(name='PageNo', description='Page number. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='Number of items per page in a paginated query:

- Default value: 10
- Maximum value: 1000', example='10', position='Query'),
  userId?: string(name='UserId', description='User ID.', example='dasdfdsa-csddf-dsadsa', position='Query'),
}

model QueryDataServiceListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='78C1AA2D-9201-599E-A0BA-6FC462E57A95'),
  result?: {
    data?: [ 
      {
        content?: {
          cubeId?: string(name='CubeId', description='Cube identifier ID.', example='56f9f34a-bdba-496a-91a3-a18b1ff73a80'),
          cubeName?: string(name='CubeName', description='Dataset name.', example='test data source'),
          detail?: boolean(name='Detail', description='Detail or Summary', example='true'),
          filter?: {
            filters?: [  map[string]any ](name='Filters', description='Combined conditions.'),
            logicalOperator?: string(name='LogicalOperator', description='Logical relationship between multiple SQL text keywords.

- **or**: or
- **and**: and', example='and'),
            type?: string(name='Type', description='Type.

- basic: basic
- combined: complex', example='basic'),
          }(name='Filter', description='Request parameter information.'),
          returnFields?: [ 
            {
              aggregator?: string(name='Aggregator', description='Aggregation operator. For example, SUM, AVG, and MAX.', example='SUM'),
              alias?: string(name='Alias', description='Field parameter name.', example='s_number'),
              desc?: string(name='Desc', description='Remark for the returned field.', example='Theme Configuration already exists'),
              field?: {
                caption?: string(name='Caption', description='Display name in the cube model (can be in Chinese or English).', example='date(year)'),
                column?: string(name='Column', description='The corresponding physical field name.', example='shid_star'),
                dataType?: string(name='DataType', description='Data type.

- number: numeric
- string: string
- date: date
- datetime: datetime
- time: time
- geographic: geographic
- boolean: boolean
- url: URL', example='datetime'),
                fid?: string(name='Fid', description='Unique identifier for the original field.', example='1c1f88cb7d'),
                granularity?: string(name='Granularity', description='This attribute is included for date and geographic dimensions, indicating the supported granularity.', example='yearRegion'),
                name?: string(name='Name', description='Unique name of the cube field, mainly used for unique positioning in the returned result.', example='sss'),
                type?: string(name='Type', description='Type.

- Dimension: Dimension
- Measure: Measure', example='dimension'),
              }(name='Field', description='Corresponding cube field information.'),
              orderby?: string(name='Orderby', description='Sorting.

- asc: Ascending
- desc: Descending
- no: No sorting', example='no'),
            }
          ](name='ReturnFields', description='Return information.'),
        }(name='Content', description='The model of the data service in JSON format.'),
        creatorId?: string(name='CreatorId', description='Creator ID.', example='7cb94cd48701'),
        creatorName?: string(name='CreatorName', description='Creator\\"s name.', example='zhangsan'),
        cubeId?: string(name='CubeId', description='Cube identifier ID.', example='d14e7448-0eb3-40d3-9375-4afef8de29fd'),
        cubeName?: string(name='CubeName', description='Dataset name.', example='test data source'),
        desc?: string(name='Desc', description='Description', example='test'),
        gmtCreate?: string(name='GmtCreate', description='Creation time.', example='2023-05-18 14:00:02.0'),
        gmtModified?: string(name='GmtModified', description='Modification time.', example='2023-03-21 18:02:36'),
        modifierId?: string(name='ModifierId', description='Modifier\\"s userId.', example='7cb94cd48701'),
        modifierName?: string(name='ModifierName', description='Modifier\\"s name', example='zhangsan'),
        name?: string(name='Name', description='Data service name.', example='test report'),
        ownerId?: string(name='OwnerId', description='Owner ID', example='862801339'),
        ownerName?: string(name='OwnerName', description='Owner\\"s name', example='lisi'),
        sid?: string(name='Sid', description='Unique ID of the data service.', example='dtsuq3i31f5j8v848b'),
        workspaceId?: string(name='WorkspaceId', description='Workspace ID.', example='7350a155-0e94-4c6c-8620-57bbec38****'),
        workspaceName?: string(name='WorkspaceName', description='Workspace name.', example='test workspace'),
      }
    ](name='Data', description='Data service information.'),
    pageNum?: int32(name='PageNum', description='Page number.', example='1'),
    pageSize?: int32(name='PageSize', description='Number of records per page.', example='10'),
    totalNum?: int32(name='TotalNum', description='Total number of rows.', example='1'),
    totalPages?: int32(name='TotalPages', description='Total number of pages.', example='1'),
  }(name='Result', description='Return result.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Value range:
- true: The request was successful 
- false: The request failed', example='true'),
}

model QueryDataServiceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDataServiceListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDataServiceList  QueryDataServiceListRequest
  * @return QueryDataServiceListResponse
 */
async function queryDataServiceList(request: QueryDataServiceListRequest): QueryDataServiceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDataServiceList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDatasetDetailInfoRequest {
  datasetId: string(name='DatasetId', description='The ID of the training dataset that you want to remove from the specified custom linguistic model.

This parameter is required.', example='5820f58c-c734-4d8a-baf1-7979af4f****', position='Query'),
}

model QueryDatasetDetailInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC4E1E63-B337-44F8-8C22-6F00DF67E2C3'),
  result?: string(name='Result', description='Returns the dataset data in JSON format: `{ "cube": { "dimensions": [ { "caption": "customer name", "dataType": "string", "dimensionType": "standard_dimension", "factColumn": "customer_name", "uid": "N5820f5_customer_name" }, { "caption": "datastring", "" standard_dimension", "factColumn": "order_id", "uid": "N5820f5_order_id" }, ], "measures": [ { "caption": "order amount ", "dataType": "number", "factColumn": "order_amt", "measureType": "standard_measure ": " Nderamid " }, " { "customsql": false, "dsId": "261b252d-c3c3-498a-a0a7-5d1ec6cd****", "tableName": "company_sales_record_copy" } }, "datasetId": "5820f58c-c734-4d8a-baf1-7979af4f****", "datasetName": "company_sales_record_copy12", "datasource": { "dsId": "261b252d-c3c3-498a-a0a7-5d1ec6cd****", "dsName": "Self-use", "dsType": "mysql" }, "directory" { "id": "schemaad8aad00-9c55-4984-a767-b4e0ec60****", "name": "My dataset", "pathId": "schemaad8aad00-9c55-4984-a767-b4e0ec60****", "pathName": "My dataset" }, "ownerId": "13651626232****", "ownerName": "Zhang San", "rowLevel": false, "workspaceId": "95296e95-ca89-4c7d-8af9-dedf0ad0****", "workspaceName": "Test Workspace" }`', example='A JSON dataset is returned. For more information, see the description on the left.'),
  success?: boolean(name='Success', description='The execution result of the interface is returned. Valid values:

*   true: The request was successful.
*   false: The request fails.', example='true'),
}

model QueryDatasetDetailInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDatasetDetailInfoResponseBody(name='body'),
}

/**
  * @description The data source, directory, and dataset model (including dimensions, measures, physical fields, custom SQL text, and association relationships).
  * @param request  the request parameters of QueryDatasetDetailInfo  QueryDatasetDetailInfoRequest
  * @return QueryDatasetDetailInfoResponse
 */
async function queryDatasetDetailInfo(request: QueryDatasetDetailInfoRequest): QueryDatasetDetailInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDatasetDetailInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryDatasetInfoRequest {
  datasetId: string(name='DatasetId', description='Queries information about a specified dataset.

This parameter is required.', example='a201c85c-******', position='Query'),
}

model QueryDatasetInfoResponseBody = {
  requestId?: string(name='RequestId', description='Whether the operation is successfully returned. Valid values:

*   true: The call is successful.
*   false: The call fails.', example='a4d1a221d-41za1-****'),
  result?: {
    cubeTableList?: [ 
      {
        caption?: string(name='Caption', description='Indicates whether the data source table is valid. Valid values:

*   true: data source table
*   false: custom table', example='odps_40'),
        customsql?: boolean(name='Customsql', description='The display name of the table.', example='false'),
        datasourceId?: string(name='DatasourceId', description='The name of the table.', example='dfefd7f4-fc6e-42c9-b4******'),
        dsType?: string(name='DsType', description='The ID of the data source.', example='maxcompute'),
        factTable?: boolean(name='FactTable', description='The unique ID of the table.', example='true'),
        sql?: string(name='Sql', description='Indicates whether the table is a custom SQL table. Valid values:

*   true: custom SQL table
*   false: non-custom SQL table', example='select * from ****'),
        tableName?: string(name='TableName', description='The list of tables used by the dataset.', example='viewdasb8494aab2612473cb74992159fe****'),
        uniqueId?: string(name='UniqueId', description='The type of the data source. Valid values:

*   mysql
*   odps
*   oracle
*   ... and other data source types supported by Quick BI', example='7a62530b36'),
      }
    ](name='CubeTableList', description='The unique ID of the dataset.'),
    custimzeSql?: boolean(name='CustimzeSql', description='The unique ID of the workspace to which the dataset belongs.', example='false'),
    datasetId?: string(name='DatasetId', description='The type of the data source. Valid values:

*   mysql
*   odps
*   oracle
*   ... Data source types supported by Quick BI such as', example='a201c85c-******'),
    datasetName?: string(name='DatasetName', description='The user ID of the dataset owner in the Quick BI.', example='opds_40'),
    dimensionList?: [ 
      {
        caption?: string(name='Caption', description='The unique ID of the field that is referenced by the group measure. Non-NULL if and only if the metric is a grouping metric.', example='city'),
        dataType?: string(name='DataType', description='A list of all dimensions in the dataset.', example='string'),
        dimensionType?: string(name='DimensionType', description='The actual physical field.', example='group_dimension'),
        expression?: string(name='Expression', description='Data type; value:

*   string: character
*   number: a number
*   datetime: time', example='example_expression'),
        expressionV2?: string(name='ExpressionV2', description='Expression for the flattened calculation dimensions.', example='example_expression'),
        factColumn?: string(name='FactColumn', description='Expression for a calculated dimension; valid only for calculated dimensions.', example='city'),
        fieldDescription?: string(name='FieldDescription', description='The description of the field.', example='hhhh'),
        granularity?: string(name='Granularity', description='The type of the dimension. Valid values:

*   standard_dimension: General Dimension
*   calculate_dimension: calculating dimensions
*   group_dimension: grouping dimensions', example='example_granularity'),
        refUid?: string(name='RefUid', description='The granularity.', example='308f7****'),
        tableUniqueId?: string(name='TableUniqueId', description='The ARN.', example='7a62530***'),
        uid?: string(name='Uid', description='The display name of the dimension.', example='a69774***'),
      }
    ](name='DimensionList', description='A list of all dimensions in the dataset.'),
    directory?: {
      id?: string(name='Id', description='Test directory', example='a3eecab7-618d-4f9f-*****'),
      name?: string(name='Name', description='Test directory', example='The name of the directory.'),
      pathId?: string(name='PathId', description='The information about the directory to which the dataset belongs.', example='88b680****'),
      pathName?: string(name='PathName', description='The path of the directory ID, for example, aa/bb/cc/dd.', example='The path name of the directory ID, for example, one-level directory /two-level directory.'),
    }(name='Directory', description='The unique ID of the metric.'),
    dsId?: string(name='DsId', description='The name of the data source.', example='a201c85c-******'),
    dsName?: string(name='DsName', description='The time when the dataset was last modified.', example='odps'),
    dsType?: string(name='DsType', description='The point in time when the training dataset was created.', example='odps'),
    gmtCreate?: string(name='GmtCreate', description='Indicates whether to customize SQL statements. Valid values:

*   true
*   false', example='1629450382000'),
    gmtModify?: string(name='GmtModify', description='The information about the dataset.', example='1629450382000'),
    measureList?: [ 
      {
        caption?: string(name='Caption', description='The actual physical field.', example='profit_amt'),
        dataType?: string(name='DataType', description='A list of all measures for the dataset.', example='string'),
        expression?: string(name='Expression', description='Data type; value:

*   string: character
*   number: a number
*   datetime: time', example='example_expression'),
        expressionV2?: string(name='ExpressionV2', description='Expression for flattened computation metrics.', example='example_expression'),
        factColumn?: string(name='FactColumn', description='The type of the measure. Valid values:

*   standard_measure: General Metrics
*   calculate_measure: Calculating Measures', example='profit_amt'),
        fieldDescription?: string(name='FieldDescription', description='The description of the field.', example='asadsda'),
        measureType?: string(name='MeasureType', description='An expression that calculates a measure; valid only for calculated measures.', example='calculate_measure'),
        tableUniqueId?: string(name='TableUniqueId', description='The display name of the metric.', example='7a62530b36'),
        uid?: string(name='Uid', description='The unique ID of the table to which the table belongs, which corresponds to the UniqueId of the CubeTypeList.', example='88b680****'),
      }
    ](name='MeasureList', description='A list of all measures for the dataset.'),
    openOfflineAcceleration?: boolean(name='OpenOfflineAcceleration', description='Whether to enable extraction acceleration. Valid values:

*   true
*   false', example='false'),
    ownerId?: string(name='OwnerId', description='Test Space', example='b8494aab26124*****'),
    ownerName?: string(name='OwnerName', description='The unique ID of the data source.', example='The name of the dataset owner.'),
    rowLevel?: boolean(name='RowLevel', description='The name of the training dataset.', example='false'),
    workspaceId?: string(name='WorkspaceId', description='Whether row-level permissions are enabled. Valid values:

*   true: The VIP Netty channel is enabled.
*   false: The VIP Netty channel is disabled.', example='420abef4-a79b-4289-b12****'),
    workspaceName?: string(name='WorkspaceName', description='Big Baby', example='The name of the workspace in which the dataset resides.'),
  }(name='Result', description='The dataset information.'),
  success?: boolean(name='Success', description='The unique ID of the dataset.', example='true'),
}

model QueryDatasetInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDatasetInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDatasetInfo  QueryDatasetInfoRequest
  * @return QueryDatasetInfoResponse
 */
async function queryDatasetInfo(request: QueryDatasetInfoRequest): QueryDatasetInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDatasetInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryDatasetListRequest {
  directoryId?: string(name='DirectoryId', description='The ID of the request.', example='schemaad8aad00-9c55-4984-a767-b4e0ec60****', position='Query'),
  keyword?: string(name='Keyword', description='Information about the directory where the dataset is located', example='Queries the datasets of a specified workspace. The datasets are sorted in descending order by creation time.', position='Query'),
  pageNum?: int32(name='PageNum', description='The ID of the workspace.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='Specifies the directory ID.

*   If this field is not empty, all datasets in the directory are obtained.', example='10', position='Query'),
  withChildren?: boolean(name='WithChildren', description='The total number of pages returned.', example='true', position='Query'),
  workspaceId: string(name='WorkspaceId', description='The name of the data source.

This parameter is required.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model QueryDatasetListResponseBody = {
  requestId?: string(name='RequestId', description='The keyword used to search for the dataset name.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    data?: [ 
      {
        createTime?: string(name='CreateTime', description='The details of the dataset list.', example='2020-11-02 10:36:05'),
        dataSource?: {
          dsId?: string(name='DsId', description='The ID of the training dataset that you want to remove from the specified custom linguistic model.', example='261b252d-c3c3-498a-a0a7-5d1ec6cd****'),
          dsName?: string(name='DsName', description='The time when the scaling group was modified.', example='The name of the training dataset.'),
          dsType?: string(name='DsType', description='The user ID of the dataset owner in the Quick BI.', example='mysql'),
        }(name='DataSource', description='Test Space'),
        datasetId?: string(name='DatasetId', description='The name of the workspace.', example='5820f58c-c734-4d8a-baf1-7979af4f****'),
        datasetName?: string(name='DatasetName', description='Tom', example='company_sales_record_copy12'),
        description?: string(name='Description', description='The number of rows per page set when the interface is requested.', example='The total number of rows in the table.'),
        directory?: {
          id?: string(name='Id', description='The ID of the directory path.', example='schemaad8aad00-9c55-4984-a767-b4e0ec60****'),
          name?: string(name='Name', description='The ID of the data source.', example='Information about the directory where the dataset is located'),
          pathId?: string(name='PathId', description='The type of the data source.', example='schemaad8aad00-9c55-4984-a767-b4e0ec60****'),
          pathName?: string(name='PathName', description='The name of the data source.', example='Test a data source'),
        }(name='Directory', description='The information about the data source to which the dataset belongs.'),
        modifyTime?: string(name='ModifyTime', description='The nickname of the dataset owner.', example='2020-11-02 10:36:05'),
        openOfflineAcceleration?: boolean(name='OpenOfflineAcceleration'),
        ownerId?: string(name='OwnerId', description='The creation time.', example='136516262323****'),
        ownerName?: string(name='OwnerName', description='Whether to enable row-level permissions. Valid values:

*   true: The VIP Netty channel is enabled.
*   false: The incremental log backup feature is disabled.', example='The ID of the workspace.'),
        rowLevel?: boolean(name='RowLevel', description='The total number of pages returned.', example='true'),
        workspaceId?: string(name='WorkspaceId', description='The page number of the returned page.', example='95296e95-ca89-4c7d-8af9-dedf0ad06adf'),
        workspaceName?: string(name='WorkspaceName', description='The description of the dataset.', example='Test dataset'),
      }
    ](name='Data', description='Returns the pagination results of the dataset list. The detailed information of the dataset list is stored in the response parameter Data.'),
    pageNum?: int32(name='PageNum', description='The number of rows per page in a paged query.

*   Default value: 10.
*   Maximum value: 1,000.', example='1'),
    pageSize?: int32(name='PageSize', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='10'),
    totalNum?: int32(name='TotalNum', description='The ID of the request.', example='1'),
    totalPages?: int32(name='TotalPages', description='Current page number for dataset list:

*   Pages start from page 1.
*   Default value: 1.', example='1'),
  }(name='Result', description='Test dataset'),
  success?: boolean(name='Success', description='Whether to recursively wrap the dataset in the subdirectory. Valid values:

*   true: returns datasets in all recursive subdirectories in the directoryId directory.
*   false: Only datasets in the directory specified by directoryId are returned, excluding subdirectories.', example='true'),
}

model QueryDatasetListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDatasetListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDatasetList  QueryDatasetListRequest
  * @return QueryDatasetListResponse
 */
async function queryDatasetList(request: QueryDatasetListRequest): QueryDatasetListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDatasetList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDatasetSmartqStatusRequest {
  cubeId: string(name='CubeId', description='Dataset ID.

This parameter is required.', example='7c7223ae-****-3c744528014b', position='Query'),
}

model QueryDatasetSmartqStatusResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='7c7223ae-****-3c744528014b'),
  result?: boolean(name='Result', description='Result of the API execution. Possible values:
- true: Request succeeded
- false: Request failed', example='true'),
  success?: boolean(name='Success', description='是否请求成功。取值范围：

- true：请求成功
- false：请求失败', example='true'),
}

model QueryDatasetSmartqStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDatasetSmartqStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDatasetSmartqStatus  QueryDatasetSmartqStatusRequest
  * @return QueryDatasetSmartqStatusResponse
 */
async function queryDatasetSmartqStatus(request: QueryDatasetSmartqStatusRequest): QueryDatasetSmartqStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDatasetSmartqStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryDatasetSwitchInfoRequest {
  cubeId: string(name='CubeId', description='This parameter is required.', example='7c7223ae-****-3c744528014b', position='Query'),
}

model QueryDatasetSwitchInfoResponseBody = {
  requestId?: string(name='RequestId', example='FAECEFA8-09BB-58AB-BC58-C8ACEFE4D232'),
  result?: {
    cubeId?: string(name='CubeId', example='7c7223ae-****-3c744528014b'),
    isOpenColumnLevelPermission?: int32(name='IsOpenColumnLevelPermission', example='1'),
    isOpenRowLevelPermission?: int32(name='IsOpenRowLevelPermission', example='1'),
  }(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model QueryDatasetSwitchInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDatasetSwitchInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDatasetSwitchInfo  QueryDatasetSwitchInfoRequest
  * @return QueryDatasetSwitchInfoResponse
 */
async function queryDatasetSwitchInfo(request: QueryDatasetSwitchInfoRequest): QueryDatasetSwitchInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDatasetSwitchInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryEmbeddedInfoRequest {
}

model QueryEmbeddedInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    detail?: {
      dashboardOfflineQuery?: int32(name='DashboardOfflineQuery', description='The number of embedded self-service fetching.', example='1'),
      page?: int32(name='Page', description='The number of embedded dashboards.', example='1'),
      report?: int32(name='Report', description='The number of embedded spreadsheets.', example='1'),
    }(name='Detail', description='Embed the statistics of the work.'),
    embeddedCount?: int32(name='EmbeddedCount', description='The number of reports that are currently embedded.', example='3'),
    maxCount?: int32(name='MaxCount', description='The maximum number of reports that can be embedded.', example='100'),
  }(name='Result', description='The embedded information of the reports under the organization.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryEmbeddedInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryEmbeddedInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryEmbeddedInfo  QueryEmbeddedInfoRequest
  * @return QueryEmbeddedInfoResponse
 */
async function queryEmbeddedInfo(request: QueryEmbeddedInfoRequest): QueryEmbeddedInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEmbeddedInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryEmbeddedStatusRequest {
  worksId: string(name='WorksId', description='The work ID of the query.

This parameter is required.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model QueryEmbeddedStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: boolean(name='Result', description='Whether the work is enabled for embedding. Valid values:

*   true: embedded
*   false: not embedded', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryEmbeddedStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryEmbeddedStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryEmbeddedStatus  QueryEmbeddedStatusRequest
  * @return QueryEmbeddedStatusResponse
 */
async function queryEmbeddedStatus(request: QueryEmbeddedStatusRequest): QueryEmbeddedStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEmbeddedStatus', 'POST', '/', 'json', false, 'json', request);
}

model QueryLlmCubeWithThemeListByUserIdRequest {
  userId: string(name='UserId', description='User ID.

This parameter is required.', example='adsdasd-***********-123wdasd', position='Query'),
}

model QueryLlmCubeWithThemeListByUserIdResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='2EE822B***************F-F5B42DDADC12'),
  result?: {
    cubeIds?: map[string]string(name='CubeIds', description='Dataset map.

- key - Dataset ID
- value - Dataset name'),
    themeIds?: map[string]string(name='ThemeIds', description='Analysis theme map.
- key - Analysis theme ID 
- value - Analysis theme name'),
  }(name='Result', description='List of datasets and analysis themes.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: The request was successful
- false: The request failed', example='true'),
}

model QueryLlmCubeWithThemeListByUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryLlmCubeWithThemeListByUserIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryLlmCubeWithThemeListByUserId  QueryLlmCubeWithThemeListByUserIdRequest
  * @return QueryLlmCubeWithThemeListByUserIdResponse
 */
async function queryLlmCubeWithThemeListByUserId(request: QueryLlmCubeWithThemeListByUserIdRequest): QueryLlmCubeWithThemeListByUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryLlmCubeWithThemeListByUserId', 'POST', '/', 'json', false, 'json', request);
}

model QueryOrganizationRoleConfigRequest {
  roleId: long(name='RoleId', description='Organization role ID, including predefined roles and custom roles:

- Organization Administrator (predefined role): 111111111
- Permission Administrator (predefined role): 111111112
- Regular User (predefined role): 111111113
- Custom Role: The corresponding role ID of the custom role

This parameter is required.', example='111111111', position='Query'),
}

model QueryOrganizationRoleConfigResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='BCE45E6D-9304-4F94-86BB-5A772B1615FF'),
  result?: {
    authConfigList?: [ 
      {
        authKey?: string(name='AuthKey', description='Permission type:
- quick_monitor: Metric Monitoring
- subscription: Subscription Management
- offline_download: Self-service Data Retrieval
- resource_package: Resource Package Management
- organization_ask: Organization Access Key/Secret (AK/SK)
- developer_openapi: OpenAPI
- data_service: Data Service
- admin_authorize3rd: Embedded Analysis
- component_manage: Custom Component
- template_open: Custom Template
- custom_driver: Custom Driver (supported only in standalone deployment)
- open_platform_custom_plugin: Custom Plugin (supported only in standalone deployment)
- enterprise_safety: Enterprise Security', example='quick_monitor'),
      }
    ](name='AuthConfigList', description='List of role permission configurations.'),
    isSystemRole?: boolean(name='IsSystemRole', description='Whether it is a predefined role. Possible values:

- true: Yes
- false: No', example='true'),
    roleId?: long(name='RoleId', description='Organization role ID, including predefined roles and custom roles:

- Organization Administrator (predefined role): 111111111
- Permission Administrator (predefined role): 111111112
- Regular User (predefined role): 111111113
- Custom Role: The corresponding role ID of the custom role', example='111111111'),
    roleName?: string(name='RoleName', description='Role name.', example='Organization Admin'),
  }(name='Result', description='Details of the organization role configuration.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:
- true: The request was successful 
- false: The request failed', example='true'),
}

model QueryOrganizationRoleConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrganizationRoleConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOrganizationRoleConfig  QueryOrganizationRoleConfigRequest
  * @return QueryOrganizationRoleConfigResponse
 */
async function queryOrganizationRoleConfig(request: QueryOrganizationRoleConfigRequest): QueryOrganizationRoleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrganizationRoleConfig', 'POST', '/', 'json', false, 'json', request);
}

model QueryOrganizationWorkspaceListRequest {
  keyword?: string(name='Keyword', description='Keyword for the workspace name.', example='test', position='Query'),
  pageNum?: int32(name='PageNum', description='Current page number of the workspace list:

- Starting value: 1
- Default value: 1', example='1', minimum=1, maximum=1000000, position='Query'),
  pageSize?: int32(name='PageSize', description='Number of rows per page in a paginated query:

- Default value: 10
- Maximum value: 1000', example='10', minimum=1, maximum=1000, position='Query'),
  userId?: string(name='UserId', description='User ID in Quick BI.', example='fe67f61a35a94b7da1a34ba174a7****', position='Query'),
}

model QueryOrganizationWorkspaceListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    data?: [ 
      {
        allowPublishOperation?: boolean(name='AllowPublishOperation', description='Whether the work can be made public. Value range:

- true: Public
- false: Not public', example='true'),
        allowShareOperation?: boolean(name='AllowShareOperation', description='Indicates whether the work can be authorized for sharing. Possible values:

- true: Authorized
- false: Not authorized', example='true'),
        createTime?: string(name='CreateTime', description='Creation time of the workspace.', example='2020-11-10 17:51:07'),
        createUser?: string(name='CreateUser', description='Quick BI user ID of the creator.', example='de4bc5f9429141cc8091cdd1c15b****'),
        createUserAccountName?: string(name='CreateUserAccountName', description='Aliyun account name of the creator.', example='pop****@aliyun.com'),
        modifiedTime?: string(name='ModifiedTime', description='Last modified time of the workspace.', example='2020-11-10 17:51:07'),
        modifyUser?: string(name='ModifyUser', description='ID of the Quick BI user who modified the workspace.', example='de4bc5f9429141cc8091cdd1c15b****'),
        modifyUserAccountName?: string(name='ModifyUserAccountName', description='Aliyun account name of the modifier.', example='pop****@aliyun.com'),
        organizationId?: string(name='OrganizationId', description='ID of the organization to which the workspace belongs.', example='2fe4fbd8-588f-489a-b3e1-e92c7af0****'),
        owner?: string(name='Owner', description='Quick BI user ID of the workspace owner.', example='de4bc5f9429141cc8091cdd1c15b****'),
        ownerAccountName?: string(name='OwnerAccountName', description='Aliyun account name of the workspace owner.', example='pop****@aliyun.com'),
        workspaceDescription?: string(name='WorkspaceDescription', description='Workspace description.', example='test'),
        workspaceId?: string(name='WorkspaceId', description='Workspace ID.', example='7350a155-0e94-4c6c-8620-57bbec38****'),
        workspaceName?: string(name='WorkspaceName', description='Name of the workspace.', example='test'),
      }
    ](name='Data', description='List of workspaces.'),
    pageNum?: int32(name='PageNum', description='Page number.', example='1'),
    pageSize?: int32(name='PageSize', description='Number of rows per page as set in the request.', example='10'),
    totalNum?: int32(name='TotalNum', description='Total number of rows.', example='1'),
    totalPages?: int32(name='TotalPages', description='Total number of pages.', example='1'),
  }(name='Result', description='Returns the paginated result of the workspace list, with detailed information about the workspaces stored in the Data parameter.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: Request succeeded
- false: Request failed', example='true'),
}

model QueryOrganizationWorkspaceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOrganizationWorkspaceListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOrganizationWorkspaceList  QueryOrganizationWorkspaceListRequest
  * @return QueryOrganizationWorkspaceListResponse
 */
async function queryOrganizationWorkspaceList(request: QueryOrganizationWorkspaceListRequest): QueryOrganizationWorkspaceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrganizationWorkspaceList', 'POST', '/', 'json', false, 'json', request);
}

model QueryReadableResourcesListByUserIdRequest {
  userId: string(name='UserId', description='Quick BI the user ID.

This parameter is required.', example='de4bc5f9429141cc8091cdd1c15b****', position='Query'),
}

model QueryReadableResourcesListByUserIdResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: [ 
    {
      createTime?: string(name='CreateTime', description='The timestamp of the creation time in milliseconds.', example='1611023338000'),
      description?: string(name='Description', description='Remarks on the work.', example='Description'),
      directory?: {
        id?: string(name='Id', description='The ID of the directory.', example='e4276ea5-b232-4fb1-8f0f-efcee4a2****'),
        name?: string(name='Name', description='The name of the directory.', example='Test directory'),
        pathId?: string(name='PathId', description='The hierarchical structure of the directory ID, which is separated with \\"/\\".', example='e4276ea5-b232-4fb1-8f0f-efcee4a2****'),
        pathName?: string(name='PathName', description='The hierarchical structure of the directory name, which is separated with \\"/\\".', example='Test directory'),
      }(name='Directory', description='The directory structure in which the work is located.'),
      modifyName?: string(name='ModifyName', description='The name of the Alibaba Cloud account to which the modifier belongs.', example='Li Si'),
      modifyTime?: string(name='ModifyTime', description='The timestamp of the modification time in milliseconds.', example='1611023338000'),
      ownerId?: string(name='OwnerId', description='The Quick BI UserID of the work owner.', example='46e5374665ba4b679ee22e2a2927****'),
      ownerName?: string(name='OwnerName', description='The Alibaba Cloud account name of the owner.', example='Tom'),
      securityLevel?: string(name='SecurityLevel', description='Security policies for collaborative authorization of works. Valid values:

*   0: private
*   12: Authorize specified members
*   1 or 11: Authorize all workspace members

> 

*   If you use legacy permissions, the return value is 1.

*   If you use the new permissions, the return value is 11.', example='0'),
      status?: int32(name='Status', description='The status of the report. Valid values:

*   0: unpublished
*   1: published
*   2: modified but not published
*   3: unpublished', example='1'),
      thirdPartAuthFlag?: int32(name='ThirdPartAuthFlag', description='Third-party embedding status. Valid values:

*   0: The embed service is not enabled.
*   1: Embed is enabled.', example='1'),
      workName?: string(name='WorkName', description='The name of the work.', example='Company Region Table'),
      workType?: string(name='WorkType', description='The type of the work. Valid values:

*   DATAPRODUCT: BI portal
*   PAGE: Dashboard
*   FULLPAGE: full-screen dashboards
*   REPORT: workbook', example='PAGE'),
      worksId?: string(name='WorksId', description='The ID of the work.', example='03366b16-69ce-43c8-b782-56c2f6ec****'),
      workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the work belongs.', example='89713491-cb4f-4579-b889-e82c35f1****'),
      workspaceName?: string(name='WorkspaceName', description='The name of the workspace to which the work belongs.', example='Test Workspace'),
    }
  ](name='Result', description='The list of works that the user has permission to view.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryReadableResourcesListByUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryReadableResourcesListByUserIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryReadableResourcesListByUserId  QueryReadableResourcesListByUserIdRequest
  * @return QueryReadableResourcesListByUserIdResponse
 */
async function queryReadableResourcesListByUserId(request: QueryReadableResourcesListByUserIdRequest): QueryReadableResourcesListByUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryReadableResourcesListByUserId', 'POST', '/', 'json', false, 'json', request);
}

model QueryReportPerformanceRequest {
  costTimeAvgMin?: int32(name='CostTimeAvgMin', description='The average duration (minutes).', example='1', position='Query'),
  pageNum?: int32(name='PageNum', description='Current page number for organization member list:

*   Pages start from page 1.
*   Default value: 1.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of rows per page in a paged query.

*   Default value: 10.
*   Maximum value: 1,000.', example='10', position='Query'),
  queryType: string(name='QueryType', description='The query type. Valid values:

*   **lastDay**: Yesterday
*   **sevenDays**: Within seven days
*   **thirtyDays**: Within 30 days

This parameter is required.', example='sevenDays', position='Query'),
  reportId?: string(name='ReportId', description='The ID of the security report.', example='6b407e50-e774-406b-9956-da2425c2****', position='Query'),
  resourceType?: string(name='ResourceType', description='The resource types.', example='report', position='Query'),
  workspaceId: string(name='WorkspaceId', description='The workspace ID.

This parameter is required.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model QueryReportPerformanceResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1FC71085-D5FD-08E0-813A-4D4BD1031BC5'),
  result?: [ 
    {
      cacheCostTimeAvg?: double(name='CacheCostTimeAvg', description='The average duration of cache hits.', example='2.2'),
      cacheQueryCount?: int32(name='CacheQueryCount', description='The number of cache hits.', example='1'),
      componentQueryCount?: int32(name='ComponentQueryCount', description='The number of times the chart is queried.', example='1'),
      componentQueryCountAvg?: double(name='ComponentQueryCountAvg', description='The average number of times the chart is queried.', example='2.0'),
      costTimeAvg?: double(name='CostTimeAvg', description='The average query duration associated with the SQL pattern.', example='0.2'),
      queryCount?: int32(name='QueryCount', description='The number of queries.', example='50'),
      queryCountAvg?: double(name='QueryCountAvg', description='The average number of queries.', example='3.3'),
      queryOverFivePercentNum?: double(name='QueryOverFivePercentNum', description='The percentage of the number of queries that exceed the 5S.', example='0.5'),
      queryOverFiveSecPercent?: string(name='QueryOverFiveSecPercent', description='Query the proportion of more than 5S.', example='0.5'),
      queryOverTenSecPercent?: string(name='QueryOverTenSecPercent', description='The percentage of queries that exceed 10s.', example='0.5'),
      queryOverTenSecPercentNum?: double(name='QueryOverTenSecPercentNum', description='The number of queries that exceed 10 seconds.', example='0.5'),
      queryTimeoutCount?: int32(name='QueryTimeoutCount', description='The number of times that the chart query times out.', example='8'),
      queryTimeoutCountPercent?: double(name='QueryTimeoutCountPercent', description='The percentage of timeout times for chart queries.', example='0.5'),
      quickIndexCostTimeAvg?: double(name='QuickIndexCostTimeAvg', description='The average time consumed by the Quick engine query.', example='10'),
      quickIndexQueryCount?: int32(name='QuickIndexQueryCount', description='The number of times that the Quick engine is hit.', example='5'),
      repeatQueryPercent?: string(name='RepeatQueryPercent', description='The proportion of duplicate queries.', example='0.8'),
      repeatQueryPercentNum?: double(name='RepeatQueryPercentNum', description='The number of duplicate queries.', example='3'),
      repeatSqlQueryCount?: int32(name='RepeatSqlQueryCount', description='The number of times the query is repeated.', example='1'),
      repeatSqlQueryPercent?: string(name='RepeatSqlQueryPercent', description='The proportion of duplicate queries.', example='0.7'),
      reportId?: string(name='ReportId', description='The ID of the work.', example='6b407e50-e774-406b-9956-da2425c2****'),
      reportName?: string(name='ReportName', description='The name of the report.', example='ClusterAddonUpgradeReport'),
      reportType?: string(name='ReportType', description='The format of the report.', example='report'),
      workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the work belongs.', example='ab46ed33-6278-4ef7-8013-8c1335f266ee'),
      workspaceName?: string(name='WorkspaceName', description='The name of the group.', example='test'),
    }
  ](name='Result', description='The returned results.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='True'),
}

model QueryReportPerformanceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryReportPerformanceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryReportPerformance  QueryReportPerformanceRequest
  * @return QueryReportPerformanceResponse
 */
async function queryReportPerformance(request: QueryReportPerformanceRequest): QueryReportPerformanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryReportPerformance', 'POST', '/', 'json', false, 'json', request);
}

model QueryShareListRequest {
  reportId: string(name='ReportId', description='The ID of the work. The works include data portal, dashboard, spreadsheet, self-service data retrieval, ad-hoc analysis, data entry, and data screen.

This parameter is required.', example='6b407e50-e774-406b-9956-da2425c2****', position='Query'),
}

model QueryShareListResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DC4E1E63-B337-44F8-8C22-6F00DF67E2C3'),
  result?: [ 
    {
      authPoint?: int32(name='AuthPoint', description='Sharing permissions. Possible values:

- 1: View only
- 3: View and export', example='3'),
      expireDate?: long(name='ExpireDate', description='The timestamp in milliseconds indicating the expiration time of the authorization.', example='1640102400000'),
      reportId?: string(name='ReportId', description='The ID of the work.', example='6b407e50-e774-406b-9956-da2425c2****'),
      shareId?: string(name='ShareId', description='The ID of the sharing configuration.', example='0ab9659e-29cf-47d7-a364-3a91553b****'),
      shareToId?: string(name='ShareToId', description='The ID of the sharing target, which could be a user ID or a group ID in Quick BI.

- When ShareToType=2 (all members within an organization), ShareToId is the organization ID.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****'),
      shareToName?: string(name='ShareToName', description='The name of the sharing target.', example='test'),
      shareToType?: int32(name='ShareToType', description='The type of sharing. Possible values:

- 0: User
- 1: Group
- 2: Organization
- 3: Space', example='0'),
      shareType?: string(name='ShareType', description='The type of the shared work. The value range includes: 
- dataProduct: Data Portal 
- dashboard: Dashboard 
- report: Spreadsheet 
- dashboardOfflineQuery: Self-service Data Extraction 
- ANALYSIS: Ad-hoc Analysis 
- DATAFORM: Data Entry 
- SCREEN: Data Visualization Screen', example='dashboard'),
    }
  ](name='Result', description='Returns the list of objects to which the work has been shared.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: The request was successful.
- false: The request failed.', example='true'),
}

model QueryShareListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryShareListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryShareList  QueryShareListRequest
  * @return QueryShareListResponse
 */
async function queryShareList(request: QueryShareListRequest): QueryShareListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryShareList', 'POST', '/', 'json', false, 'json', request);
}

model QuerySharesToUserListRequest {
  userId: string(name='UserId', description='The ID of the user. The user ID is the UserID of the Quick BI, not the UID of Alibaba Cloud.

This parameter is required.', example='46e53****5ba4b679ee22e2a2927****', position='Query'),
}

model QuerySharesToUserListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC4E1E63-B337-44F8-8C22-6F00DF67E2C3'),
  result?: [ 
    {
      createTime?: string(name='CreateTime', description='The timestamp of the creation time in milliseconds.', example='1530078690000'),
      description?: string(name='Description', description='Remarks on the work.', example='Description of the test report'),
      directory?: {
        id?: string(name='Id', description='The ID of the directory where the resource is located.', example='f7f6e22b-83be-47fd-b49d-9ca686a9****'),
        name?: string(name='Name', description='The name of the resource.', example='Chart Report'),
        pathId?: string(name='PathId', description='The path ID of the directory where the resource is located.'),
        pathName?: string(name='PathName', description='The path name of the directory where the resource is located.', example='Level -1 Directory /Level -2 Directory'),
      }(name='Directory', description='Information about the directory where the work is located.'),
      modifyName?: string(name='ModifyName', description='The name of the Alibaba Cloud account to which the modifier belongs.', example='13855265****@163.com'),
      modifyTime?: string(name='ModifyTime', description='The timestamp of the modification time in milliseconds.', example='1530078690000'),
      ownerId?: string(name='OwnerId', description='The UserID of the work owner in Quickbi.', example='74f5527216d14e9892245320ebf2****'),
      ownerName?: string(name='OwnerName', description='The Alibaba Cloud account name of the work owner.', example='w****@aliyun.com'),
      securityLevel?: string(name='SecurityLevel', description='Security policies for collaborative authorization of works. Valid values:

*   0: private
*   12: Authorize specified members
*   1 or 11: Authorize all workspace members

> 

*   If you use legacy permissions, the return value is 1.

*   If you use the new permissions, the return value is 11.', example='0'),
      status?: int32(name='Status', description='The publishing status of the report. Valid values:

*   0: unpublished
*   1: published
*   2: modified but not published
*   3: unpublished', example='1'),
      thirdPartAuthFlag?: int32(name='ThirdPartAuthFlag', description='Third-party embedding status. Valid values:

*   0: No embedding is enabled.
*   1: Embed is enabled.', example='0'),
      workName?: string(name='WorkName', description='The name of the report.', example='Test report'),
      workType?: string(name='WorkType', description='The type of the work. Valid values:

*   DATAPRODUCT: BI portal
*   PAGE: Dashboard
*   FULLPAGE: full-screen dashboards
*   REPORT: workbook
*   dashboardOfflineQuery: self-service data retrieval', example='DATAFORM'),
      worksId?: string(name='WorksId', description='The ID of the operations report.', example='97f7f4c1-543a-4069-8e8d-a56cfcd6****'),
      workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the report belongs.', example='c5f86ad2-ef53-4c51-8720-162ecfdb****'),
      workspaceName?: string(name='WorkspaceName', description='The name of the workspace to which the report belongs.', example='Return to Professional Edition'),
    }
  ](name='Result', description='Returns a list of works authorized to the user.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QuerySharesToUserListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySharesToUserListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySharesToUserList  QuerySharesToUserListRequest
  * @return QuerySharesToUserListResponse
 */
async function querySharesToUserList(request: QuerySharesToUserListRequest): QuerySharesToUserListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySharesToUserList', 'POST', '/', 'json', false, 'json', request);
}

model QuerySmartqPermissionByCubeIdRequest {
  cubeId: string(name='CubeId', description='Dataset ID.

This parameter is required.', example='7c7223ae-****-3c744528014b', position='Query'),
  userId: string(name='UserId', description='User ID.

This parameter is required.', example='95c4d**************3852e202', position='Query'),
}

model QuerySmartqPermissionByCubeIdResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='617277******************ABA47E31'),
  result?: {
    cubeId?: string(name='CubeId', description='Dataset ID.', example='7c7223ae-****-3c744528014b'),
    cubeName?: string(name='CubeName', description='Dataset name.', example='test'),
    hasPerssion?: boolean(name='HasPerssion', description='Whether the current user has permission for the smart question. Note: \\"HasPerssion\\" seems to be a typo, it should probably be \\"HasPermission\\".'),
  }(name='Result', description='Basic information of the dataset.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: The request was successful.
- false: The request failed.', example='true'),
}

model QuerySmartqPermissionByCubeIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySmartqPermissionByCubeIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QuerySmartqPermissionByCubeId  QuerySmartqPermissionByCubeIdRequest
  * @return QuerySmartqPermissionByCubeIdResponse
 */
async function querySmartqPermissionByCubeId(request: QuerySmartqPermissionByCubeIdRequest): QuerySmartqPermissionByCubeIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySmartqPermissionByCubeId', 'POST', '/', 'json', false, 'json', request);
}

model QueryTicketInfoRequest {
  ticket: string(name='Ticket', description='The value of the bill.

This parameter is required.', example='a27a9aec-****-****-bd40-1a21ea41d7c5', position='Query'),
}

model QueryTicketInfoResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    accessTicket?: string(name='AccessTicket', description='Notes.', example='a27a9aec-****-****-bd40-1a21ea41d7c5'),
    cmptId?: string(name='CmptId', description='The ID of the component in the report.', example='sfdgsds-****-****-a608-mghdgd'),
    globalParam?: string(name='GlobalParam', description='Global parameters.', example='[&{quot;paramKey\\&quot;:\\&quot;price\\&quot;,\\&quot;joinType\\&quot;and\\&quot;,\\&quot;conditionList\\&quot;:[{\\&quot; operation\\&quot;\\&quot;\\&quot;\\&quot;\\&quot;\\&quot;\\&quot;value ;& quot;\\&quot;\\&quot;\\&quot;\\&quot;\\&quot;\\&quot;\\&quot;\\&quot;\\&quot product_type\\&quot;,\\&quot;joinType\\&quot;:\\&quot;and ";,& quot;conditionList\\&quot;, the conditions must be:[{\\&quot;operate" ;:& quot;in\\&quot;,\\&quot;value\\&quot;, the conditions must be:[\\&quot; office supplies\\&quot;,\\&quot; furniture products\\&quot;]}]}]\\n'),
    invalidTime?: string(name='InvalidTime', description='Expiration time of the note.', example='2022-01-30 03:03:49'),
    maxTicketNum?: int32(name='MaxTicketNum', description='The maximum number of supported bills.', example='9999'),
    organizationId?: string(name='OrganizationId', description='The ID of the organization.', example='2fe4fbd8-****-****-b3e1-e92c7af083ea'),
    registerTime?: string(name='RegisterTime', description='The registration time of the ticket.', example='2022-01-09 22:23:49'),
    usedTicketNum?: int32(name='UsedTicketNum', description='The number of bills that have been consumed.', example='47'),
    userId?: string(name='UserId', description='The user ID of the Quick BI.', example='974e50**********9033f46'),
    watermarkParam?: string(name='WatermarkParam', description='Set the watermarking parameters.', example='Tripartite embedding of Ticket'),
    worksId?: string(name='WorksId', description='The ID of the operations report.', example='ccd3428c-****-****-a608-26bae29dffee'),
  }(name='Result', description='The details of the generated ticket.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryTicketInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTicketInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryTicketInfo  QueryTicketInfoRequest
  * @return QueryTicketInfoResponse
 */
async function queryTicketInfo(request: QueryTicketInfoRequest): QueryTicketInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryTicketInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryUserGroupListByParentIdRequest {
  parentUserGroupId: string(name='ParentUserGroupId', description='The ID of the parent user group.

*   If you enter the ID of the parent user group, you can obtain the information of the child user group under this ID.
*   If you enter -1, you can obtain the sub-user group information under the root directory.

This parameter is required.', example='3d2c23d4-2b41-4af8-a1f5-f6390f32****', position='Query'),
}

model QueryUserGroupListByParentIdResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='72B19D61-B37A-5C7A-9389-0856CD7935B3'),
  result?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the sub-user group was created.', example='2020-10-30 10:03:09'),
      createUser?: string(name='CreateUser', description='The creator of the sub-user group. The UserID of the Quick BI is used instead of the UID of Alibaba Cloud.', example='136516262323****'),
      identifiedPath?: string(name='IdentifiedPath', description='Directory level of the sub-user group.'),
      modifiedTime?: string(name='ModifiedTime', description='The time when the sub-user group was last modified.', example='2020-11-16 15:49:08'),
      modifyUser?: string(name='ModifyUser', description='The user who modified the subgroup. The UserID of the Quick BI is used instead of the UID of Alibaba Cloud.', example='136516262323****'),
      parentUserGroupId?: string(name='ParentUserGroupId', description='The ID of the parent user group.', example='3d2c23d4-2b41-4af8-a1f5-f6390f32****'),
      userGroupDescription?: string(name='UserGroupDescription', description='The description of the sub-user group.', example='User Group for Testing'),
      userGroupId?: string(name='UserGroupId', description='The ID of the sub-user group.', example='f5eeb52e-d9c2-4a8b-80e3-47ab55c2****'),
      userGroupName?: string(name='UserGroupName', description='The name of the sub-user group.', example='popapi test group'),
    }
  ](name='Result', description='The information about the sub-user group.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryUserGroupListByParentIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserGroupListByParentIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUserGroupListByParentId  QueryUserGroupListByParentIdRequest
  * @return QueryUserGroupListByParentIdResponse
 */
async function queryUserGroupListByParentId(request: QueryUserGroupListByParentIdRequest): QueryUserGroupListByParentIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserGroupListByParentId', 'POST', '/', 'json', false, 'json', request);
}

model QueryUserGroupMemberRequest {
  keyword?: string(name='Keyword', description='Keyword for the username or nickname of the user group member.', example='test', position='Query'),
  userGroupId: string(name='UserGroupId', description='User group ID.

This parameter is required.', example='2fe4fbd8-588f-489a-b3e1-e92c7af0****', position='Query'),
}

model QueryUserGroupMemberResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='48C930FF-DFCF-5986-902B-E24C202E2443'),
  result?: [ 
    {
      id?: string(name='Id', description='ID of the user group or the user group member.', example='3d2c23d4-2b41-4af8-a1f5-f6390f32****'),
      isUserGroup?: boolean(name='IsUserGroup', description='Indicates whether it is a user group. Possible values:

- true: It is a user group.
- false: It is a user.', example='true'),
      name?: string(name='Name', description='Name or nickname of the user group or its member.', example='test'),
      parentUserGroupId?: string(name='ParentUserGroupId', description='ID of the parent user group.', example='2fe4fbd8-588f-489a-b3e1-e92c7af0****'),
      parentUserGroupName?: string(name='ParentUserGroupName', description='Name of the parent user group.', example='test'),
    }
  ](name='Result', description='The result of the request for the user group member list.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: The request was successful.
- false: The request failed.', example='true'),
}

model QueryUserGroupMemberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserGroupMemberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUserGroupMember  QueryUserGroupMemberRequest
  * @return QueryUserGroupMemberResponse
 */
async function queryUserGroupMember(request: QueryUserGroupMemberRequest): QueryUserGroupMemberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserGroupMember', 'POST', '/', 'json', false, 'json', request);
}

model QueryUserInfoByAccountRequest {
  account: string(name='Account', description='Enter the name or ID of the Alibaba Cloud account that you want to query.

*   When you enter an account name:

    *   If the organization user is a master account, such as main_account, the query account format is master account. That is, the main account main_account to be entered.
    *   If the organization user is a RAM user, such as a <zhangsan@test.onaliyun.com>, the query account format is the head of the RAM user, that is, the RAM user to be entered is zhangsan.

*   ID:

    *   Enter the UID of the account to query the account information.

This parameter is required.', example='1386587****@163.com', position='Query'),
  parentAccountName?: string(name='ParentAccountName', description='当查询子账号出现重复报错时，输入主账号的账号名，
例如zhangsan@test.onaliyun.com。', example='zhangsan@test.onaliyun.com', position='Query'),
}

model QueryUserInfoByAccountResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account.', example='135****5848'),
    accountName?: string(name='AccountName', description='The name of the Alibaba Cloud account that corresponds to the member. (If you use a RAM user, the domain name information that follows @ is removed. For example, if you use a <test@test.com>, test is returned.)', example='1386587****@163.com'),
    adminUser?: boolean(name='AdminUser', description='Whether you are an administrator of the organization. Valid values:

*   true
*   false', example='true'),
    authAdminUser?: boolean(name='AuthAdminUser', description='Whether you are a permission administrator. Valid values:

*   true
*   false', example='true'),
    email?: string(name='Email', description='The email address of the user.', example='1386587****@163.com'),
    nickName?: string(name='NickName', description='The nickname of the account.', example='Test user'),
    phone?: string(name='Phone', description='The phone number of the alert contact.', example='1386587****'),
    roleIdList?: [ long ](name='RoleIdList', description='用户绑定的组织角色ID列表。'),
    userId?: string(name='UserId', description='The UserID in the Quick BI.', example='fe67f61a35a94b7da1a34ba174a7****'),
    userType?: int32(name='UserType', description='The role type of the organization member. Valid values:

*   1 : developer
*   2 : visitors
*   3 : Analyst', example='1'),
  }(name='Result', description='The returned organization user information.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryUserInfoByAccountResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserInfoByAccountResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUserInfoByAccount  QueryUserInfoByAccountRequest
  * @return QueryUserInfoByAccountResponse
 */
async function queryUserInfoByAccount(request: QueryUserInfoByAccountRequest): QueryUserInfoByAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserInfoByAccount', 'POST', '/', 'json', false, 'json', request);
}

model QueryUserInfoByUserIdRequest {
  userId: string(name='UserId', description='The ID of the user. The UserID is the UserID of the Quick BI, not the UID of Alibaba Cloud.

This parameter is required.', example='fe67f61a35a94b7da1a34ba174a7****', position='Query'),
}

model QueryUserInfoByUserIdResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account.', example='135****5848'),
    accountName?: string(name='AccountName', description='The name of the Alibaba Cloud account that corresponds to the member.', example='1386587****@163.com'),
    adminUser?: boolean(name='AdminUser', description='Whether you are an administrator of the organization. Valid values:

*   true
*   false', example='true'),
    authAdminUser?: boolean(name='AuthAdminUser', description='Whether you are a permission administrator. Valid values:

*   true
*   false', example='true'),
    email?: string(name='Email', description='The email address of the user.', example='1386587****@163.com'),
    nickName?: string(name='NickName', description='The nickname of the account.', example='Test user'),
    phone?: string(name='Phone', description='The phone number of the alert contact.', example='1386587****'),
    roleIdList?: [ long ](name='RoleIdList'),
    userId?: string(name='UserId', description='The UserID in the Quick BI.', example='fe67f61a35a94b7da1a34ba174a7****'),
    userType?: int32(name='UserType', description='The role type of the organization member. Valid values:

*   1 : developer
*   2 : visitors
*   3 : Analyst', example='1'),
  }(name='Result', description='The returned organization user information.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryUserInfoByUserIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserInfoByUserIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUserInfoByUserId  QueryUserInfoByUserIdRequest
  * @return QueryUserInfoByUserIdResponse
 */
async function queryUserInfoByUserId(request: QueryUserInfoByUserIdRequest): QueryUserInfoByUserIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserInfoByUserId', 'POST', '/', 'json', false, 'json', request);
}

model QueryUserListRequest {
  keyword?: string(name='Keyword', description='The keyword of the username or nickname of the organization member.', example='Test user', position='Query'),
  pageNum?: int32(name='PageNum', description='Current page number for organization member list:

*   Pages start from page 1.
*   Default value: 1.', example='1', minimum=1, maximum=99999999, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of rows per page in a paged query.

*   Default value: 10.
*   Maximum value: 1,000.', example='10', minimum=1, maximum=1000, position='Query'),
}

model QueryUserListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    data?: [ 
      {
        accountId?: string(name='AccountId', description='The ID of the Alibaba Cloud account.', example='1355********'),
        accountName?: string(name='AccountName', description='The name of the Alibaba Cloud account that corresponds to the member.', example='Test user'),
        adminUser?: boolean(name='AdminUser', description='Indicates whether the organization administrator. Valid values:

*   true
*   false', example='true'),
        authAdminUser?: boolean(name='AuthAdminUser', description='Indicate whether the RAM user is a permission administrator. Valid values:

*   true
*   false', example='true'),
        isDeleted?: boolean(name='IsDeleted', description='User status: 
- Active - false 
- Inactive - true', example='false'),
        joinedDate?: long(name='JoinedDate', description='Join Date', example='1718691704000'),
        lastLoginTime?: long(name='LastLoginTime', description='Last login time.', example='1718761320681'),
        nickName?: string(name='NickName', description='The nickname of the organization member.', example='Test user'),
        roleIdList?: [ long ](name='RoleIdList', description='List of organization role IDs bound to the user.'),
        userId?: string(name='UserId', description='The UserID in the Quick BI.', example='fe67f61a35a94b7da1a34ba174a7****'),
        userType?: int32(name='UserType', description='The role type of the organization member. Valid values:

*   1 : developer
*   2 : visitors
*   3 : Analyst', example='1'),
      }
    ](name='Data', description='Returns the list of requested users.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of rows per page set when the interface is requested.', example='10'),
    totalNum?: int32(name='TotalNum', description='The total number of rows in the table.', example='1'),
    totalPages?: int32(name='TotalPages', description='The total number of pages returned.', example='1'),
  }(name='Result', description='The pagination result of the user list is returned. The detailed information list of organization members is stored in the response parameter Data.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryUserListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUserList  QueryUserListRequest
  * @return QueryUserListResponse
 */
async function queryUserList(request: QueryUserListRequest): QueryUserListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserList', 'GET', '/', 'json', false, 'json', request);
}

model QueryUserRoleInfoInWorkspaceRequest {
  userId: string(name='UserId', description='Quick BI user ID.

This parameter is required.', example='f5698bedeb384b1986afccd9e434****', position='Query'),
  workspaceId: string(name='WorkspaceId', description='Workspace ID.

This parameter is required.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model QueryUserRoleInfoInWorkspaceResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    roleCode?: string(name='RoleCode', description='Preset role code.', example='role_workspace_admin'),
    roleId?: long(name='RoleId', description='Preset role ID. Possible values:
- 25: Space Administrator
- 26: Space Developer
- 27: Space Analyst
- 30: Space Viewer', example='25'),
    roleName?: string(name='RoleName', description='Preset role name.', example='test'),
  }(name='Result', description='Preset space role information of the user.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: The request succeeded.
- false: The request failed.', example='true'),
}

model QueryUserRoleInfoInWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserRoleInfoInWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUserRoleInfoInWorkspace  QueryUserRoleInfoInWorkspaceRequest
  * @return QueryUserRoleInfoInWorkspaceResponse
 */
async function queryUserRoleInfoInWorkspace(request: QueryUserRoleInfoInWorkspaceRequest): QueryUserRoleInfoInWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserRoleInfoInWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model QueryUserTagMetaListRequest {
}

model QueryUserTagMetaListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: [ 
    {
      tagDescription?: string(name='TagDescription', description='The description of the tag.', example='Used to distinguish some positions'),
      tagId?: string(name='TagId', description='The ID of the label.', example='pop_001'),
      tagName?: string(name='TagName', description='The name of the tag.', example='Position'),
    }
  ](name='Result', description='Returns a list of user tags in an organization.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryUserTagMetaListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserTagMetaListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUserTagMetaList  QueryUserTagMetaListRequest
  * @return QueryUserTagMetaListResponse
 */
async function queryUserTagMetaList(request: QueryUserTagMetaListRequest): QueryUserTagMetaListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserTagMetaList', 'GET', '/', 'json', false, 'json', request);
}

model QueryUserTagValueListRequest {
  userId: string(name='UserId', description='This UserID refers to the Quick BI UserID, not the Alibaba Cloud UID.

This parameter is required.', example='fe67f61a35a94b7da1a34ba174a7****', position='Query'),
}

model QueryUserTagValueListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: [ 
    {
      tagId?: string(name='TagId', description='Tag ID.', example='pop_001'),
      tagName?: string(name='TagName', description='Tag name.', example='Position'),
      tagValue?: string(name='TagValue', description='The value of the tag.', example='Supervisor'),
    }
  ](name='Result', description='The result of the request for a list of user tags and their values.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: The request was successful.
- false: The request failed.', example='true'),
}

model QueryUserTagValueListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryUserTagValueListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryUserTagValueList  QueryUserTagValueListRequest
  * @return QueryUserTagValueListResponse
 */
async function queryUserTagValueList(request: QueryUserTagValueListRequest): QueryUserTagValueListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserTagValueList', 'GET', '/', 'json', false, 'json', request);
}

model QueryWorksRequest {
  worksId: string(name='WorksId', description='Report ID

This parameter is required.', example='abcd****', position='Query'),
}

model QueryWorksResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    auth3rdFlag?: int32(name='Auth3rdFlag', description='Third-party embedding status. Valid values:

*   0: The embed service is not enabled.
*   1: Embed is enabled.', example='0'),
    description?: string(name='Description', description='Remarks on the work.', example='Description'),
    directory?: {
      id?: string(name='Id', description='The ID of the directory.', example='83d37ba6-d909-48a2-a517-f4d05c3a****'),
      name?: string(name='Name', description='The name of the directory.', example='Test directory'),
      pathId?: string(name='PathId', description='The hierarchical structure of the directory ID to which the directory belongs. Separate the hierarchical structure with a /.', example='83d37ba6-d909-48a2-a517-f4d05c3a****'),
      pathName?: string(name='PathName', description='The hierarchical structure of the directory to which the directory belongs. Separate the hierarchical structure with a (/).', example='Test directory'),
    }(name='Directory', description='The directory to which the work belongs.'),
    gmtCreate?: string(name='GmtCreate', description='The timestamp of the creation of the work in milliseconds.', example='1496651577000'),
    gmtModify?: string(name='GmtModify', description='The timestamp of the modification of the work in milliseconds.', example='1496651577000'),
    modifyName?: string(name='ModifyName', description='The Alibaba Cloud account name of the person who modified the work.', example='Tom'),
    ownerId?: string(name='OwnerId', description='The user ID of the work owner in the Quick BI.', example='9187a612aa474e2a8ac1414d5529****'),
    ownerName?: string(name='OwnerName', description='The Alibaba Cloud account name of the work owner.', example='Tom'),
    publicFlag?: boolean(name='PublicFlag', description='Is it public', example='true'),
    publicInvalidTime?: long(name='PublicInvalidTime', description='Deadline for the public release of the report', example='1721366354000'),
    securityLevel?: string(name='SecurityLevel', description='Security policies for collaborative authorization of works. Valid values:

*   0: private
*   12: Authorize specified members
*   1 or 11: Authorize all workspace members

> 

*   If you use legacy permissions, the return value is 1.

*   If you use the new permissions, the return value is 11.', example='0'),
    status?: int32(name='Status', description='The status of the report. Valid values:

*   0: unpublished
*   1: published
*   2: modified but not published
*   3: unpublished', example='0'),
    workName?: string(name='WorkName', description='The name of the work.', example='Test report'),
    workType?: string(name='WorkType', description='Queries the types of works. Fill in the blanks to query all types. Valid values:

*   DATAPRODUCT: BI portal
*   PAGE: Dashboard
*   FULLPAGE: full-screen dashboards
*   REPORT: workbook
*   dashboardOfflineQuery: self-service data retrieval', example='PAGE'),
    worksId?: string(name='WorksId', description='The ID of the work.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****'),
    workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the work belongs.', example='87c6b145-090c-43e1-9426-8f93be23****'),
    workspaceName?: string(name='WorkspaceName', description='The name of the workspace to which the work belongs.', example='Test Space'),
  }(name='Result', description='The details of the work.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryWorksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWorksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryWorks  QueryWorksRequest
  * @return QueryWorksResponse
 */
async function queryWorks(request: QueryWorksRequest): QueryWorksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWorks', 'POST', '/', 'json', false, 'json', request);
}

model QueryWorksBloodRelationshipRequest {
  worksId: string(name='WorksId', description='The ID of the data work.

This parameter is required.', example='abcd****', position='Query'),
}

model QueryWorksBloodRelationshipResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: [ 
    {
      componentId?: string(name='ComponentId', description='The ID of the component that you want to modify.', example='0696083a-ca72-4d89-8e7a-c017910e0***'),
      componentName?: string(name='ComponentName', description='The name of the component.', example='Line'),
      componentType?: int32(name='ComponentType', description='The type of the image component.', example='3'),
      componentTypeCnName?: string(name='ComponentTypeCnName', description='Chinese name of the component type', example='ddd'),
      componentTypeName?: string(name='ComponentTypeName', description='The name of the component type.', example='LINE'),
      datasetId?: string(name='DatasetId', description='The ID of the training dataset that you want to remove from the specified custom linguistic model.', example='dc78a4ed-880d-452e-b017-90cfc10c83e5_company_sales_record'),
      queryParams?: [ 
        {
          areaId?: string(name='AreaId', description='The ID of the owning location.', example='area_column'),
          areaName?: string(name='AreaName', description='The name of the owning location.', example='Column (Measure)'),
          caption?: string(name='Caption', description='The display name of the field.', example='order_number'),
          dataType?: string(name='DataType', description='The type of the field. Valid values:

*   string: string type
*   date: a date type that contains only the year, month, and day parts
*   datetime: a common date type
*   time: a date type that contains only hours, minutes, and seconds.
*   number: numeric
*   boolean: Boolean type
*   geographical: geographical location
*   url: string type
*   imageUrl: the type of the image link.
*   multivalue: a multi-value column', example='number'),
          expression?: string(name='Expression', description='Calculate field expression.', example='BI_DATEADD([date], 100, \\"day\\")'),
          isMeasure?: boolean(name='IsMeasure', description='Indices whether the metric. Valid values:

true false', example='true'),
          pathId?: string(name='PathId', description='The globally unique PathId.', example='schema7d1944eb-443e-48c6-8123-bf45a99e7e74.dc78a4ed-880d-452e-b017-90cfc10c83e5_company_sales_record.[Ndc78a4_order_level].[Ndc78a4_order_level].[Ndc78a4_order_level]'),
          uid?: string(name='Uid', description='The unique ID of the field.', example='Ndc78a4_order_number'),
        }
      ](name='QueryParams', description='A list of query parameter reference columns.'),
    }
  ](name='Result', description='List of work blood information.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryWorksBloodRelationshipResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWorksBloodRelationshipResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryWorksBloodRelationship  QueryWorksBloodRelationshipRequest
  * @return QueryWorksBloodRelationshipResponse
 */
async function queryWorksBloodRelationship(request: QueryWorksBloodRelationshipRequest): QueryWorksBloodRelationshipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWorksBloodRelationship', 'POST', '/', 'json', false, 'json', request);
}

model QueryWorksByOrganizationRequest {
  pageNum?: int32(name='PageNum', description='Page number.

- Default value is 1.', example='1', minimum=1, maximum=99999999, position='Query'),
  pageSize?: int32(name='PageSize', description='Number of items per page.

- Default value is 10.', example='10', minimum=1, maximum=1000, position='Query'),
  status?: int32(name='Status', description='The status of the work to query. Possible values:

- 0: Unpublished
- 1: Published
- 2: Modified but not published
- 3: Offline', example='0', position='Query'),
  thirdPartAuthFlag?: int32(name='ThirdPartAuthFlag', description='Third-party embedding status. Possible values:

- 0: Embedding not enabled
- 1: Embedding enabled', example='1', position='Query'),
  worksType?: string(name='WorksType', description='The type of work to query. Leave blank to query all types. Possible values:

- DATAPRODUCT: Data Portal
- PAGE: Dashboard
- REPORT: Spreadsheet
- dashboardOfflineQuery: Self-service Data Retrieval', example='PAGE', position='Query'),
}

model QueryWorksByOrganizationResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    data?: [ 
      {
        auth3rdFlag?: int32(name='Auth3rdFlag', description='Third-party embedding status. Possible values:

- 0: Embedding not enabled
- 1: Embedding enabled', example='1'),
        description?: string(name='Description', description='Notes for the work.', example='Attention'),
        directory?: {
          id?: string(name='Id', description='ID of the directory to which it belongs.', example='83d37ba6-d909-48a2-a517-f4d05c3a****'),
          name?: string(name='Name', description='Name of the directory to which it belongs.', example='test'),
          pathId?: string(name='PathId', description='Hierarchical structure of the directory ID, separated by『/』.', example='83d37ba6-d909-48a2-a517-f4d05c3a****'),
          pathName?: string(name='PathName', description='Hierarchical structure of the directory name, separated by『/』.', example='Attention'),
        }(name='Directory', description='Directory to which the work belongs.'),
        gmtCreate?: string(name='GmtCreate', description='Timestamp (in milliseconds) when the work was created.', example='1496651577000'),
        gmtModify?: string(name='GmtModify', description='作品修改的毫秒级时间戳。', example='1572334870000'),
        modifyName?: string(name='ModifyName', description='作品修改者的阿里云账户名。', example='test'),
        ownerId?: string(name='OwnerId', description='The UserID of the work\\"s owner in Quick BI.', example='test'),
        ownerName?: string(name='OwnerName', description='The Alibaba Cloud account name of the work\\"s owner.', example='test'),
        publicFlag?: boolean(name='PublicFlag', description='Whether it is public', example='true'),
        publicInvalidTime?: long(name='PublicInvalidTime', description='The expiration date for the report to be made public', example='1721366354000'),
        securityLevel?: string(name='SecurityLevel', description='The security policy for collaborative authorization of the work. Values:
- 0: Private
- 12: Authorize specific members
- 1 or 11: Authorize all space members

>- If you are using the old version of permissions, the returned value is 1.
>- If you are using the new version of permissions, the returned value is 11.', example='1'),
        status?: int32(name='Status', description='The status of the report. Value range:

- 0: Unpublished
- 1: Published
- 2: Modified but not published
- 3: Offline', example='1'),
        workName?: string(name='WorkName', description='The name of the work.', example='test'),
        workType?: string(name='WorkType', description='The type of the work. Value range:

- DATAPRODUCT: Data portal
- PAGE: Dashboard
- REPORT: Spreadsheet
- dashboardOfflineQuery: Self-service data retrieval', example='PAGE'),
        worksId?: string(name='WorksId', description='The ID of the work.', example='897ce25e-****-****-af84-d13c5610****'),
        workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the work belongs.', example='test'),
        workspaceName?: string(name='WorkspaceName', description='The name of the workspace to which the work belongs.', example='test'),
      }
    ](name='Data', description='Details of the work list.'),
    pageNum?: int32(name='PageNum', description='Page number.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of rows per page set when requesting the interface.', example='10'),
    totalNum?: int32(name='TotalNum', description='Total number of rows.', example='1'),
    totalPages?: int32(name='TotalPages', description='Total number of pages.', example='1'),
  }(name='Result', description='Returns a list of all works under the organization that meet the request criteria.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: Request succeeded
- false: Request failed', example='true'),
}

model QueryWorksByOrganizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWorksByOrganizationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryWorksByOrganization  QueryWorksByOrganizationRequest
  * @return QueryWorksByOrganizationResponse
 */
async function queryWorksByOrganization(request: QueryWorksByOrganizationRequest): QueryWorksByOrganizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWorksByOrganization', 'POST', '/', 'json', false, 'json', request);
}

model QueryWorksByWorkspaceRequest {
  pageNum?: int32(name='PageNum', description='The page number of the returned page.

*   Default value: 1.', example='1', minimum=1, maximum=99999999, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.

*   Default value: 10.', example='10', minimum=1, maximum=1000, position='Query'),
  status?: int32(name='Status', description='The status of the work. Valid values:

*   0: unpublished
*   1: published
*   2: modified but not published
*   3: unpublished', example='0', position='Query'),
  thirdPartAuthFlag?: int32(name='ThirdPartAuthFlag', description='Third-party embedding status. Valid values:

*   0: The embed service is not enabled.
*   1: Embed is enabled.', example='0', position='Query'),
  worksType?: string(name='WorksType', description='The type of the work. Valid values:

*   DATAPRODUCT: BI portal
*   PAGE: Dashboard
*   FULLPAGE: full-screen dashboards
*   REPORT: workbook', example='PAGE', position='Query'),
  workspaceId: string(name='WorkspaceId', description='The ID of the workspace.

This parameter is required.', example='89713491-cb4f-4579-b889-e82c35f1****', position='Query'),
}

model QueryWorksByWorkspaceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    data?: [ 
      {
        auth3rdFlag?: int32(name='Auth3rdFlag', description='Third-party embedding status. Valid values:

*   0: The embed service is not enabled.
*   1: Embed is enabled.', example='1'),
        description?: string(name='Description', description='Remarks on the work.', example='Description'),
        directory?: {
          id?: string(name='Id', description='The ID of the directory.', example='83d37ba6-d909-48a2-a517-f4d05c3a****'),
          name?: string(name='Name', description='The name of the directory.', example='The name of the directory.'),
          pathId?: string(name='PathId', description='The hierarchical structure of the directory ID to which the directory belongs. Separate the hierarchical structure with a /.', example='83d37ba6-d909-48a2-a517-f4d05c3a****'),
          pathName?: string(name='PathName', description='The hierarchical structure of the directory to which the directory belongs. Separate the hierarchical structure with a (/).', example='Test directory'),
        }(name='Directory', description='The directory to which the work belongs.'),
        gmtCreate?: string(name='GmtCreate', description='The timestamp of the creation of the work in milliseconds.', example='1496651577000'),
        gmtModify?: string(name='GmtModify', description='The timestamp of the modification of the work in milliseconds.', example='1572334870000'),
        modifyName?: string(name='ModifyName', description='Nickname of the work modifier.', example='Tom'),
        ownerId?: string(name='OwnerId', description='The user ID of the work owner in the Quick BI.', example='The name of the workspace to which the work belongs.'),
        ownerName?: string(name='OwnerName', description='The nickname of the work owner.', example='Li Si'),
        publicFlag?: boolean(name='PublicFlag', description='Is it public', example='true'),
        publicInvalidTime?: long(name='PublicInvalidTime', description='Deadline for the public release of the report', example='1721366354000'),
        securityLevel?: string(name='SecurityLevel', description='Security policies for collaborative authorization of works. Valid values:

*   0: private
*   12: Authorize specified members
*   1 or 11: Authorize all workspace members

> 

*   If you use legacy permissions, the return value is 1.

*   If you use the new permissions, the return value is 11.', example='0'),
        status?: int32(name='Status', description='Status of dashboards, full-screen dashboards, spreadsheets. The default value of other work types is 1. Valid values:

*   0: unpublished
*   1: published
*   2: modified but not published
*   3: unpublished', example='1'),
        workName?: string(name='WorkName', description='The name of the work.', example='Test report'),
        workType?: string(name='WorkType', description='The type of the work. Valid values:

*   DATAPRODUCT: BI portal
*   PAGE: Dashboard
*   FULLPAGE: full-screen dashboards
*   REPORT: workbook
*   dashboardOfflineQuery: self-service data retrieval
*   Analysis: Ad hoc analysis
*   DATAFORM: form filling', example='PAGE'),
        worksId?: string(name='WorksId', description='The ID of the work.', example='897ce25e-f993-4abd-af84-d13c5610****'),
        workspaceId?: string(name='WorkspaceId', description='The ID of the workspace to which the work belongs.', example='87c6b145-090c-43e1-9426-8f93be23****'),
        workspaceName?: string(name='WorkspaceName', description='The name of the workspace to which the work belongs.', example='Test Workspace'),
      }
    ](name='Data', description='The details of the list of works.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of rows per page set when the interface is requested.', example='10'),
    totalNum?: int32(name='TotalNum', description='The total number of rows in the table.', example='1'),
    totalPages?: int32(name='TotalPages', description='The total number of pages returned.', example='1'),
  }(name='Result', description='Returns a list of all works in the organization workspace that meet the requested criteria.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryWorksByWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWorksByWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryWorksByWorkspace  QueryWorksByWorkspaceRequest
  * @return QueryWorksByWorkspaceResponse
 */
async function queryWorksByWorkspace(request: QueryWorksByWorkspaceRequest): QueryWorksByWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWorksByWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model QueryWorkspaceRoleConfigRequest {
  roleId: long(name='RoleId', description='Workspace role ID, including predefined roles and custom roles:

- 25: Workspace Administrator (predefined role)
- 26: Developer (predefined role)
- 27: Analyst (predefined role)
- 30: Viewer (predefined role)
- Custom role: The corresponding role ID for the custom role

This parameter is required.', example='25', position='Query'),
}

model QueryWorkspaceRoleConfigResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: {
    authConfigList?: [ 
      {
        actionAuthKeys?: [ string ](name='ActionAuthKeys', description='Permission scope.'),
        authKey?: string(name='AuthKey', description='Permission type:
- portal_create: Data Portal
- dashboard_create: Dashboard
- report_create: Spreadsheet
- screen_create: Data Screen
- analysis: Ad-hoc Analysis
- offline_download: Self-service Data Retrieval
- data_form: Data Entry
- quick_etl: Data Preparation
- cube: Dataset
- datasource: Data Source', example='portal_create'),
      }
    ](name='AuthConfigList', description='List of role permission configurations.'),
    isSystemRole?: boolean(name='IsSystemRole', description='Whether it is a predefined role. Value range:

- true: Yes
- false: No', example='true'),
    roleId?: long(name='RoleId', description='Workspace role ID, including predefined roles and custom roles:

- 25: Workspace Administrator (predefined role)
- 26: Developer (predefined role)
- 27: Analyst (predefined role)
- 30: Viewer (predefined role)
- Custom role: The corresponding role ID for the custom role', example='25'),
    roleName?: string(name='RoleName', description='Role name.', example='pace administrator'),
  }(name='Result', description='Returns the query result of the interface.'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model QueryWorkspaceRoleConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWorkspaceRoleConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryWorkspaceRoleConfig  QueryWorkspaceRoleConfigRequest
  * @return QueryWorkspaceRoleConfigResponse
 */
async function queryWorkspaceRoleConfig(request: QueryWorkspaceRoleConfigRequest): QueryWorkspaceRoleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWorkspaceRoleConfig', 'POST', '/', 'json', false, 'json', request);
}

model QueryWorkspaceUserListRequest {
  keyword?: string(name='Keyword', description='Keyword for the username of the workspace member.', example='test', position='Query'),
  pageNum?: int32(name='PageNum', description='Current page number of the workspace member list:

- Starting value: 1
- Default value: 1', example='1', minimum=1, maximum=1000000, position='Query'),
  pageSize?: int32(name='PageSize', description='Number of rows per page in a paginated query:

- Default value: 10
- Maximum value: 1000', example='10', minimum=1, maximum=1000, position='Query'),
  workspaceId: string(name='WorkspaceId', description='Workspace ID.

This parameter is required.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model QueryWorkspaceUserListResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: {
    data?: [ 
      {
        accountId?: string(name='AccountId', description='Alibaba Cloud account ID.', example='16020915****8429'),
        accountName?: string(name='AccountName', description='Alibaba Cloud account name.', example='pop****@aliyunid.test'),
        nickName?: string(name='NickName', description='Nickname.', example='test'),
        role?: {
          roleCode?: string(name='RoleCode', description='Code corresponding to the preset role.', example='role_workspace_admin'),
          roleId?: long(name='RoleId', description='Preset role ID. Possible values:

- 25: Workspace Administrator
- 26: Workspace Developer
- 27: Workspace Analyst
- 30: Workspace Viewer', example='25'),
          roleName?: string(name='RoleName', description='Name of the preset role.', example='test'),
        }(name='Role', description='Preset role information for the workspace member.'),
        userId?: string(name='UserId', description='Quick BI user ID.', example='de4bc5f9429141cc8091cdd1c15b****'),
      }
    ](name='Data', description='Information about the workspace members.'),
    pageNum?: int32(name='PageNum', description='Page number.', example='1'),
    pageSize?: int32(name='PageSize', description='Number of rows per page as set in the request.', example='10'),
    totalNum?: int32(name='TotalNum', description='Total number of rows.', example='1'),
    totalPages?: int32(name='TotalPages', description='Total number of pages.', example='1'),
  }(name='Result', description='Returns the paginated result of the member list, with detailed information about the members stored in the Data parameter of the response.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: The request was successful.
- false: The request failed.', example='true'),
}

model QueryWorkspaceUserListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWorkspaceUserListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryWorkspaceUserList  QueryWorkspaceUserListRequest
  * @return QueryWorkspaceUserListResponse
 */
async function queryWorkspaceUserList(request: QueryWorkspaceUserListRequest): QueryWorkspaceUserListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWorkspaceUserList', 'POST', '/', 'json', false, 'json', request);
}

model ResultCallbackRequest {
  applicationId: string(name='ApplicationId', description='The ID of the approval process.

This parameter is required.', example='c5ea0db8-****-****-9081-04bc0df4c6a3', position='Query'),
  handleReason: string(name='HandleReason', description='The reason for the approval.

This parameter is required.', example='You are not a Division A analyst.', position='Query'),
  status: int32(name='Status', description='Approval result:

*   1: passed
*   2: rejected

This parameter is required.', example='1', position='Query'),
}

model ResultCallbackResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: boolean(name='Result', description='The execution result of the interface is returned. Valid values:

*   true: The request was successful.
*   false: The request fails.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model ResultCallbackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResultCallbackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResultCallback  ResultCallbackRequest
  * @return ResultCallbackResponse
 */
async function resultCallback(request: ResultCallbackRequest): ResultCallbackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResultCallback', 'POST', '/', 'json', false, 'json', request);
}

model SaveFavoritesRequest {
  userId: string(name='UserId', description='The user ID of the person who favorites the work. This user ID is the UserID of Quick BI, not the UID of Alibaba Cloud.

This parameter is required.', example='121344444790****', position='Query'),
  worksId: string(name='WorksId', description='The ID of the work being favorited.

This parameter is required.', example='d23e84a1-82a0-4292-bfdb-521306c3****', position='Query'),
}

model SaveFavoritesResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: boolean(name='Result', description='Returns the result of the interface execution. Possible values:

- true: Execution successful
- false: Execution failed', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:

- true: Request successful
- false: Request failed', example='true'),
}

model SaveFavoritesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SaveFavoritesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SaveFavorites  SaveFavoritesRequest
  * @return SaveFavoritesResponse
 */
async function saveFavorites(request: SaveFavoritesRequest): SaveFavoritesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveFavorites', 'POST', '/', 'json', false, 'json', request);
}

model SetDataLevelPermissionExtraConfigRequest {
  cubeId: string(name='CubeId', description='This parameter is required.', example='7c7223ae-******-3c744528014b', position='Query'),
  missHitPolicy: string(name='MissHitPolicy', description='This parameter is required.', example='NONE', position='Query'),
  ruleType: string(name='RuleType', description='This parameter is required.', example='ROW_LEVEL', position='Query'),
}

model SetDataLevelPermissionExtraConfigResponseBody = {
  requestId?: string(name='RequestId', example='B70E1FBD-E533-52F2-A7A1-E02B92F78DDF'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model SetDataLevelPermissionExtraConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDataLevelPermissionExtraConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetDataLevelPermissionExtraConfig  SetDataLevelPermissionExtraConfigRequest
  * @return SetDataLevelPermissionExtraConfigResponse
 */
async function setDataLevelPermissionExtraConfig(request: SetDataLevelPermissionExtraConfigRequest): SetDataLevelPermissionExtraConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDataLevelPermissionExtraConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetDataLevelPermissionRuleConfigRequest {
  ruleModel: string(name='RuleModel', description='This parameter is required.', position='Query'),
}

model SetDataLevelPermissionRuleConfigResponseBody = {
  requestId?: string(name='RequestId', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: string(name='Result'),
  success?: boolean(name='Success', example='true'),
}

model SetDataLevelPermissionRuleConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDataLevelPermissionRuleConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetDataLevelPermissionRuleConfig  SetDataLevelPermissionRuleConfigRequest
  * @return SetDataLevelPermissionRuleConfigResponse
 */
async function setDataLevelPermissionRuleConfig(request: SetDataLevelPermissionRuleConfigRequest): SetDataLevelPermissionRuleConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDataLevelPermissionRuleConfig', 'POST', '/', 'json', false, 'json', request);
}

model SetDataLevelPermissionWhiteListRequest {
  whiteListModel: string(name='WhiteListModel', description='{ "ruleType": "ROW_LEVEL", // The row-level permission type. "usersModel": { "userGroups": [ "0d5fb19b- ***-1248 fc27ca51", // The ID of the user group. "3d2c23d4-***-f6390f325c2d" ], "users": [ "4334 ***358", // Quick BI the UserID of the user. "Huang***3fa822" ] }, "cubeId": "7c7223ae-31d1-4d2f-b11f-3c744528014b" }

This parameter is required.', example='{"ruleType":"ROW_LEVEL","usersModel":{"userGroups":["26edcb76-****-bdbab78267cb","187e6dd5-1611-4cf7-a034-1a93bd5fecf9"],"users":["4334***358","Huang***3fa822"]},"cubeId":"7c7223ae-****44528014b"}', position='Query'),
}

model SetDataLevelPermissionWhiteListResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: boolean(name='Result', description='The execution result of the interface. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model SetDataLevelPermissionWhiteListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDataLevelPermissionWhiteListResponseBody(name='body'),
}

/**
  * @description > : You can only Quick BI the new row-column permission model. If you are still using the old row-column permission model, migrate to the new row-column permission model before you call this operation. To migrate row-level permissions to the new row-level permission model, perform the following steps: Choose Organizations> Security Configurations> Upgrade Row-Level Permissions. On the Upgrade Row-Level Permissions page, click **Upgrade**.
  * @param request  the request parameters of SetDataLevelPermissionWhiteList  SetDataLevelPermissionWhiteListRequest
  * @return SetDataLevelPermissionWhiteListResponse
 */
async function setDataLevelPermissionWhiteList(request: SetDataLevelPermissionWhiteListRequest): SetDataLevelPermissionWhiteListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDataLevelPermissionWhiteList', 'POST', '/', 'json', false, 'json', request);
}

model SmartqAuthTransferRequest {
  originUserId: string(name='OriginUserId', description='Source user ID.

This parameter is required.', example='ASDHASD*************12EASDA', position='Query'),
  targetUserIds: string(name='TargetUserIds', description='Target user ID array, separated by English commas.
>Warning: The number of user IDs cannot exceed 100.

This parameter is required.', example='12313********dasfa,ASDASF*****SDAFEEG', position='Query'),
}

model SmartqAuthTransferResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1*****************5DF8D885'),
  result?: boolean(name='Result', description='API execution result. Possible values:

- true: Request succeeded
- false: Request failed', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:
- true: Request succeeded
- false: Request failed', example='true'),
}

model SmartqAuthTransferResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SmartqAuthTransferResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SmartqAuthTransfer  SmartqAuthTransferRequest
  * @return SmartqAuthTransferResponse
 */
async function smartqAuthTransfer(request: SmartqAuthTransferRequest): SmartqAuthTransferResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SmartqAuthTransfer', 'POST', '/', 'json', false, 'json', request);
}

model SmartqAuthorizeRequest {
  cubeIds?: string(name='CubeIds', description='Array of dataset IDs, separated by English commas. <notice>This parameter will be converted to the corresponding question resource ID for authorization. Therefore, if the input cubeId does not correspond to any question resource, an error indicating that the question resource does not exist will be reported. Please ensure the correctness of the cubeId.</notice>', example='wasdasd*******1235235sd,ASDAS*********ASDAW123', position='Query'),
  expireDay?: string(name='ExpireDay', description='Expiration time, with a default of seven days.
Format: 2099-12-31', example='2099-12-31', position='Query'),
  llmCubeThemes?: string(name='LlmCubeThemes', description='Array of analysis theme IDs, separated by English commas.', example='wasdasd*******1235235sd,ASDAS*********ASDAW123', position='Query'),
  llmCubes?: string(name='LlmCubes', description='Array of Q&A resource IDs, separated by English commas.', example='wasdasd*******1235235sd,ASDAS*********ASDAW123', position='Query'),
  operationType: int32(name='OperationType', description='Operation type. The values are as follows:
- 0: Add authorization
- 1: Remove authorization

This parameter is required.', example='0', position='Query'),
  userIds: string(name='UserIds', description='Array of user IDs, separated by English commas.
>Notice: The number of user IDs per request * (number of Q&A resources + number of analysis themes) cannot exceed 100.

This parameter is required.', example='wasdasd*******1235235sd,ASDAS*********ASDAW123', position='Query'),
}

model SmartqAuthorizeResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='617277C****************ABA47E31'),
  result?: [ 
    {
      detailMessage?: string(name='DetailMessage', description='Reason for failure.', example='INVALID_FILE_FORMAT'),
      llmCube?: string(name='LlmCube', description='Q&A resource ID.', example='617277C****************ABA47E31'),
      llmCubeTheme?: string(name='LlmCubeTheme', description='Analysis theme ID.', example='617277C****************ABA47E31'),
      userId?: string(name='UserId', description='User ID.', example='617277C****************ABA47E31'),
    }
  ](name='Result', description='Array of failed user information.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. The value range is as follows:

- true: Request succeeded
- false: Request failed', example='true'),
}

model SmartqAuthorizeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SmartqAuthorizeResponseBody(name='body'),
}

/**
  * @description Used for batch management of smart Q&A authorizations. Repeatedly adding an authorization will be treated as a new addition; repeatedly deleting an authorization will be skipped by default and will not be recorded in the audit log.
  * @param request  the request parameters of SmartqAuthorize  SmartqAuthorizeRequest
  * @return SmartqAuthorizeResponse
 */
async function smartqAuthorize(request: SmartqAuthorizeRequest): SmartqAuthorizeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SmartqAuthorize', 'POST', '/', 'json', false, 'json', request);
}

model SmartqQueryAbilityRequest {
  cubeId: string(name='CubeId', description='Dataset ID.

This parameter is required.', example='7c7223ae-****-3c744528014b', position='Query'),
  userId?: string(name='UserId', description='User ID.
>Notice: If this field is not filled, the data will be queried by default as the organization owner.', example='7c7223ae-****-3c744528014b', position='Query'),
  userQuestion: string(name='UserQuestion', description='Question text.

This parameter is required.', example='This year\\"s sales data', position='Query'),
}

model SmartqQueryAbilityResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A************2B05DF8D885'),
  result?: {
    chartType?: string(name='ChartType', description='Suggested chart type.', example='NEW_TABLE'),
    conclusionText?: string(name='ConclusionText', description='Summary information.', example='Schedule'),
    logicSql?: string(name='LogicSql', description='Visualized logical SQL.', example='select * ****'),
    metaType?: [ 
      {
        key?: string(name='Key', description='Column tuple name.', example='Polar***STPS'),
        type?: string(name='Type'),
        value?: string(name='Value', description='Column tuple type.', example='string'),
      }
    ](name='MetaType', description='List of column tuple types.'),
    values?: [ 
      {
        row?: [ string ](name='Row', description='Data values for each row.'),
      }
    ](name='Values', description='Array of data value lists.'),
  }(name='Result', description='Return result.'),
  success: boolean(name='Success', description='Whether the operation was successful.

This parameter is required.', example='true'),
}

model SmartqQueryAbilityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SmartqQueryAbilityResponseBody(name='body'),
}

/**
  * @description Special Note: When a user is authorized to call this API, it is assumed that the user has the permission to query the corresponding data by passing in the userId as that user.
  * @param request  the request parameters of SmartqQueryAbility  SmartqQueryAbilityRequest
  * @return SmartqQueryAbilityResponse
 */
async function smartqQueryAbility(request: SmartqQueryAbilityRequest): SmartqQueryAbilityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SmartqQueryAbility', 'POST', '/', 'json', false, 'json', request);
}

model UpdateDataLevelPermissionStatusRequest {
  cubeId: string(name='CubeId', description='The ID of the training dataset that you want to remove from the specified custom linguistic model.

This parameter is required.', example='7c7223ae-****-3c744528014b', position='Query'),
  isOpen: int32(name='IsOpen', description='This parameter is required.', example='1', minimum=0, maximum=10, position='Query'),
  ruleType: string(name='RuleType', description='This parameter is required.', example='ROW_LEVEL', position='Query'),
}

model UpdateDataLevelPermissionStatusResponseBody = {
  requestId?: string(name='RequestId', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: boolean(name='Result', example='true'),
  success?: boolean(name='Success', example='true'),
}

model UpdateDataLevelPermissionStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataLevelPermissionStatusResponseBody(name='body'),
}

/**
  * @description The execution result of the interface. Valid values:
  * *   true: The request was successful.
  * *   false: The request failed.
  * @param request  the request parameters of UpdateDataLevelPermissionStatus  UpdateDataLevelPermissionStatusRequest
  * @return UpdateDataLevelPermissionStatusResponse
 */
async function updateDataLevelPermissionStatus(request: UpdateDataLevelPermissionStatusRequest): UpdateDataLevelPermissionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataLevelPermissionStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEmbeddedStatusRequest {
  thirdPartAuthFlag: boolean(name='ThirdPartAuthFlag', description='Whether to enable the embedding feature for the work. Valid values:

*   true: enables embedding.
*   false: disables embedding.

This parameter is required.', example='true', position='Query'),
  worksId: string(name='WorksId', description='The ID of the work.

*   Batch modification is supported. Separate multiple values with commas (,).

This parameter is required.', example='897ce25e-f993-4abd-af84-d13c5610****', position='Query'),
}

model UpdateEmbeddedStatusResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D78*********DF8D885'),
  result?: int32(name='Result', description='The number of works that are opened or closed.', example='1'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model UpdateEmbeddedStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEmbeddedStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateEmbeddedStatus  UpdateEmbeddedStatusRequest
  * @return UpdateEmbeddedStatusResponse
 */
async function updateEmbeddedStatus(request: UpdateEmbeddedStatusRequest): UpdateEmbeddedStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEmbeddedStatus', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTicketNumRequest {
  ticket: string(name='Ticket', description='The value of the third-party embedded ticket, that is, the accessTicket value in the URL.

This parameter is required.', example='040e6f79d33444838***83c7206c070', position='Query'),
  ticketNum: int32(name='TicketNum', description='The number of bills.

*   Valid values: 1 to 99998. Recommended value: 1.

This parameter is required.', example='1', position='Query'),
}

model UpdateTicketNumResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: boolean(name='Result', description='Indicates whether the update is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model UpdateTicketNumResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTicketNumResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTicketNum  UpdateTicketNumRequest
  * @return UpdateTicketNumResponse
 */
async function updateTicketNum(request: UpdateTicketNumRequest): UpdateTicketNumResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTicketNum', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserRequest {
  adminUser?: boolean(name='AdminUser', description='Indicates whether the organization administrator. Valid values:

*   true
*   false', example='true', position='Query'),
  authAdminUser?: boolean(name='AuthAdminUser', description='Indicate whether the RAM user is a permission administrator. Valid values:

*   true
*   false', example='true', position='Query'),
  isDeleted?: boolean(name='IsDeleted', description='User status: 
* **false**: Active
 * **true**: Inactive', example='false', position='Query'),
  nickName?: string(name='NickName', description='The nickname of the account.

*   Format check: The value can be up to 50 characters in length.
*   Special format verification: Chinese and English digits_ \\ / | () ] [', example='Xiao Zhang', position='Query'),
  roleIds?: string(name='RoleIds', description='The IDs of the preset or custom organization roles bound to the user, separated by English commas \\",\\", with a maximum of 3. The value range is as follows: - Organization Administrator (preset role): 111111111 - Permission Administrator (preset role): 111111112 - Regular User (preset role): 111111113', example='111111111,456', position='Query'),
  userId: string(name='UserId', description='The ID of the user to be updated. The user ID is the UserID of the Quick BI, not the UID of Alibaba Cloud.

This parameter is required.', example='fe67f61a35a94b7da1a34ba174a7****', position='Query'),
  userType?: int32(name='UserType', description='The type of user who is a member of the organization. Valid values:

*   1 : developer
*   2 : visitors
*   3 : Analyst', example='1', minimum=1, maximum=10, position='Query'),
}

model UpdateUserResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC4E1E63-B337-44F8-8C22-6F00DF67E2C3'),
  result?: boolean(name='Result', description='The execution result of the interface is returned. Valid values:

*   true: The request was successful.
*   false: The request fails.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model UpdateUserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUser  UpdateUserRequest
  * @return UpdateUserResponse
 */
async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUser', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserGroupRequest {
  userGroupDescription?: string(name='UserGroupDescription', description='The description of the user group.

*   Format verification: Maximum length 255
*   Special format verification: Chinese and English digits_ \\ / | () ] [', example='Description', position='Query'),
  userGroupId: string(name='UserGroupId', description='The ID of the user group.

This parameter is required.', example='f5eeb52e-d9c2-4a8b-80e3-47ab55c2****', position='Query'),
  userGroupName?: string(name='UserGroupName', description='The name of the user group.

*   Format verification: Maximum length 255
*   Special format verification: Chinese and English digits_ \\ / | () ] [', example='pop0001', position='Query'),
}

model UpdateUserGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4AEF8C5C-D5D2-55D3-BB2F-9D3AA1B6F4FA'),
  result?: boolean(name='Result', description='Whether the interface is successfully executed. Valid values:

*   true: The request was successful.
*   false: The request fails.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model UpdateUserGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUserGroup  UpdateUserGroupRequest
  * @return UpdateUserGroupResponse
 */
async function updateUserGroup(request: UpdateUserGroupRequest): UpdateUserGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserTagMetaRequest {
  tagDescription?: string(name='TagDescription', description='The tag description.

- Format check: Maximum length is 255 characters.', example='Job Positions within the Department', position='Query'),
  tagId: string(name='TagId', description='The specified TagID.

- Format check: Maximum length is 64 characters.

This parameter is required.', example='e82f6c6c0333431bad0225b2f85e****', position='Query'),
  tagName: string(name='TagName', description='The tag name.
- Format check: Maximum length is 50 characters.
- Only Chinese, English, numbers, and /\\|[]() symbols are allowed.

This parameter is required.', example='Department', position='Query'),
}

model UpdateUserTagMetaResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: boolean(name='Result', description='Indicates whether the interface was executed successfully. Possible values:

- true: Execution succeeded
- false: Execution failed', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Possible values:
- true: The request succeeded - false: The request failed', example='true'),
}

model UpdateUserTagMetaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserTagMetaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUserTagMeta  UpdateUserTagMetaRequest
  * @return UpdateUserTagMetaResponse
 */
async function updateUserTagMeta(request: UpdateUserTagMetaRequest): UpdateUserTagMetaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserTagMeta', 'POST', '/', 'json', false, 'json', request);
}

model UpdateUserTagValueRequest {
  tagId: string(name='TagId', description='The ID of the tag to be modified.

This parameter is required.', example='pop_001', position='Query'),
  tagValue: string(name='TagValue', description='The tag value to be modified.

- To clear this tag, set the tag value to ($NULL$).
- For multiple values, use English commas to separate them.
- Format validation, maximum length: 3000 characters

This parameter is required.', example='Product Director', position='Query'),
  userId: string(name='UserId', description='The user ID for which the tag value is to be modified. This user ID refers to the Quick BI UserID, not the Alibaba Cloud UID.

This parameter is required.', example='fe67f61a35a94b7da1a34ba174a7****', position='Query'),
}

model UpdateUserTagValueResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='46e5374665ba4b679ee22e2a29270'),
  result?: boolean(name='Result', description='Returns the result of modifying the user tag. Possible values:

- true: Operation succeeded
- false: Operation failed', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Value range:
- true: The request was successful - false: The request failed', example='true'),
}

model UpdateUserTagValueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateUserTagValueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateUserTagValue  UpdateUserTagValueRequest
  * @return UpdateUserTagValueResponse
 */
async function updateUserTagValue(request: UpdateUserTagValueRequest): UpdateUserTagValueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateUserTagValue', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWorkspaceUserRoleRequest {
  roleId?: long(name='RoleId', description='Preset workspace role ID, existing roles will be overwritten. Value range:
- 25: Workspace Administrator
- 26: Workspace Developer
- 27: Workspace Analyst
- 30: Workspace Viewer', example='25', deprecated='true', minimum=25, maximum=30, position='Query'),
  roleIds?: string(name='RoleIds', description='Multiple workspace role IDs, separated by commas. If this value is provided, it takes precedence.
>Notice: roleId and roleIds cannot both be empty', example='25,26', position='Query'),
  userId: string(name='UserId', description='Quick BI user ID.

This parameter is required.', example='f5698bedeb384b1986afccd9e434****', position='Query'),
  workspaceId: string(name='WorkspaceId', description='Workspace ID.

This parameter is required.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model UpdateWorkspaceUserRoleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='D787E1A3-A93C-424A-B626-C2B05DF8D885'),
  result?: boolean(name='Result', description='Returns the result of the interface execution. Value range:

- true: Execution successful
- false: Execution failed', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Value range:

- true: Request successful
- false: Request failed', example='true'),
}

model UpdateWorkspaceUserRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceUserRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWorkspaceUserRole  UpdateWorkspaceUserRoleRequest
  * @return UpdateWorkspaceUserRoleResponse
 */
async function updateWorkspaceUserRole(request: UpdateWorkspaceUserRoleRequest): UpdateWorkspaceUserRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWorkspaceUserRole', 'POST', '/', 'json', false, 'json', request);
}

model UpdateWorkspaceUsersRoleRequest {
  roleId: long(name='RoleId', description='Preset space role ID, existing roles will be overwritten. Value range:
- 25: Space Administrator
- 26: Space Developer
- 27: Space Analyst
- 30: Space Viewer

This parameter is required.', example='25', minimum=25, maximum=30, position='Query'),
  userIds: string(name='UserIds', description='User ID. This is the UserID for Quick BI, not the UID for Alibaba Cloud.

- Supports batch parameters, separate user IDs with a comma (,).

This parameter is required.', example='136516262323****,124498444445****', position='Query'),
  workspaceId: string(name='WorkspaceId', description='Workspace ID.

This parameter is required.', example='95296e95-ca89-4c7d-8af9-dedf0ad0****', position='Query'),
}

model UpdateWorkspaceUsersRoleResponseBody = {
  requestId?: string(name='RequestId', description='Request ID.', example='7AAB95D7-2E11-4FE2-94BC-858E4FC0C976'),
  result?: {
    failure?: int32(name='Failure', description='Number of users that failed to update.', example='0'),
    failureDetail?: map[string]any(name='FailureDetail', description='Reasons for the update failures.'),
    success?: int32(name='Success', description='Number of users that were updated successfully.', example='2'),
    total?: int32(name='Total', description='Modify the total number of users.', example='2'),
  }(name='Result', description='Returns the result of the interface execution.'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Value range:

- true: The request was successful, some members may have been updated successfully while others failed, refer to FailureDetail in the response for reasons of failure
- false: The request failed, no data will be persisted', example='true'),
}

model UpdateWorkspaceUsersRoleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceUsersRoleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWorkspaceUsersRole  UpdateWorkspaceUsersRoleRequest
  * @return UpdateWorkspaceUsersRoleResponse
 */
async function updateWorkspaceUsersRole(request: UpdateWorkspaceUsersRoleRequest): UpdateWorkspaceUsersRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWorkspaceUsersRole', 'POST', '/', 'json', false, 'json', request);
}

model WithdrawAllUserGroupsRequest {
  userId: string(name='UserId', description='The ID of the user. The UserID of the Quick BI is used instead of the UID of Alibaba Cloud.

This parameter is required.', example='46e5374665ba4b679ee22e2a2927****', position='Query'),
}

model WithdrawAllUserGroupsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='D8749D65-E80A-433C-AF1B-CE9C180FF3B4'),
  result?: boolean(name='Result', description='The execution result of the interface is returned. Valid values:

*   true: The request was successful.
*   false: The request fails.', example='true'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values:

*   true: The request was successful.
*   false: The request failed.', example='true'),
}

model WithdrawAllUserGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: WithdrawAllUserGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of WithdrawAllUserGroups  WithdrawAllUserGroupsRequest
  * @return WithdrawAllUserGroupsResponse
 */
async function withdrawAllUserGroups(request: WithdrawAllUserGroupsRequest): WithdrawAllUserGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'WithdrawAllUserGroups', 'POST', '/', 'json', false, 'json', request);
}

