/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'linkedmall';
  @version = '2023-09-30';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'linkedmall.aliyuncs.com',
    cn-shanghai = 'linkedmall.aliyuncs.com',
    ap-northeast-1 = 'linkedmall.aliyuncs.com',
    ap-northeast-2-pop = 'linkedmall.aliyuncs.com',
    ap-south-1 = 'linkedmall.aliyuncs.com',
    ap-southeast-1 = 'linkedmall.aliyuncs.com',
    ap-southeast-2 = 'linkedmall.aliyuncs.com',
    ap-southeast-3 = 'linkedmall.aliyuncs.com',
    ap-southeast-5 = 'linkedmall.aliyuncs.com',
    cn-beijing = 'linkedmall.aliyuncs.com',
    cn-beijing-finance-1 = 'linkedmall.aliyuncs.com',
    cn-beijing-finance-pop = 'linkedmall.aliyuncs.com',
    cn-beijing-gov-1 = 'linkedmall.aliyuncs.com',
    cn-beijing-nu16-b01 = 'linkedmall.aliyuncs.com',
    cn-chengdu = 'linkedmall.aliyuncs.com',
    cn-edge-1 = 'linkedmall.aliyuncs.com',
    cn-fujian = 'linkedmall.aliyuncs.com',
    cn-haidian-cm12-c01 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-finance = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'linkedmall.aliyuncs.com',
    cn-hangzhou-test-306 = 'linkedmall.aliyuncs.com',
    cn-hongkong = 'linkedmall.aliyuncs.com',
    cn-hongkong-finance-pop = 'linkedmall.aliyuncs.com',
    cn-huhehaote = 'linkedmall.aliyuncs.com',
    cn-north-2-gov-1 = 'linkedmall.aliyuncs.com',
    cn-qingdao = 'linkedmall.aliyuncs.com',
    cn-qingdao-nebula = 'linkedmall.aliyuncs.com',
    cn-shanghai-et15-b01 = 'linkedmall.aliyuncs.com',
    cn-shanghai-et2-b01 = 'linkedmall.aliyuncs.com',
    cn-shanghai-finance-1 = 'linkedmall.aliyuncs.com',
    cn-shanghai-inner = 'linkedmall.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'linkedmall.aliyuncs.com',
    cn-shenzhen = 'linkedmall.aliyuncs.com',
    cn-shenzhen-finance-1 = 'linkedmall.aliyuncs.com',
    cn-shenzhen-inner = 'linkedmall.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'linkedmall.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'linkedmall.aliyuncs.com',
    cn-wuhan = 'linkedmall.aliyuncs.com',
    cn-yushanfang = 'linkedmall.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'linkedmall.aliyuncs.com',
    cn-zhangjiakou = 'linkedmall.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'linkedmall.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'linkedmall.aliyuncs.com',
    eu-central-1 = 'linkedmall.aliyuncs.com',
    eu-west-1 = 'linkedmall.aliyuncs.com',
    eu-west-1-oxs = 'linkedmall.aliyuncs.com',
    me-east-1 = 'linkedmall.aliyuncs.com',
    rus-west-1-pop = 'linkedmall.aliyuncs.com',
    us-east-1 = 'linkedmall.aliyuncs.com',
    us-west-1 = 'linkedmall.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddressInfo {
  addressDetail: string(name='addressDetail', example='陕西省西安市新城区xxx大厦xx室'),
  addressId?: long(name='addressId', example='0'),
  divisionCode?: string(name='divisionCode', example='610102'),
  receiver: string(name='receiver', example='任先生'),
  receiverPhone: string(name='receiverPhone', example='182***5674'),
  townDivisionCode?: string(name='townDivisionCode', example='61010212'),
}

model ApplyReason {
  reasonTextId?: long(name='reasonTextId', example='403769'),
  reasonTips?: string(name='reasonTips', example='不想要了'),
}

model Category {
  categoryId?: long(name='categoryId', example='201792301'),
  isLeaf?: boolean(name='isLeaf', example='false'),
  level?: int32(name='level', example='2'),
  name?: string(name='name', example='方便面/拉面/挂面/轻食面速食'),
  parentId?: long(name='parentId', example='50016422'),
}

model CategoryListQuery {
  categoryIds?: [ long ](name='categoryIds'),
  parentCategoryId?: long(name='parentCategoryId', example='5200001'),
}

model CategoryListResult {
  categories?: [
    Category
  ](name='categories'),
  requestId?: string(name='requestId'),
}

model ConfirmDisburseCmd {
  orderId?: string(name='orderId', example='6692****5457'),
  purchaseOrderId?: string(name='purchaseOrderId', example='6692****5696'),
}

model ConfirmDisburseResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  result?: string(name='result', example='success'),
}

model CooperationShop {
  cooperationCompanyId?: string(name='cooperationCompanyId'),
  cooperationShopId?: string(name='cooperationShopId'),
  shopId?: string(name='shopId'),
}

model DeliveryInfo {
  displayName?: string(name='displayName', example='快递 免邮'),
  id?: string(name='id', example='20'),
  postFee?: long(name='postFee', example='0'),
  serviceType?: long(name='serviceType', example='-4'),
}

model DistributionMaxRefundFee {
  maxRefundFee?: long(name='maxRefundFee', example='100'),
  minRefundFee?: long(name='minRefundFee', example='1'),
}

model Division {
  divisionCode?: long(name='divisionCode', example='310000'),
  divisionLevel?: long(name='divisionLevel', example='2'),
  divisionName?: string(name='divisionName', example='上海'),
  parentId?: long(name='parentId', example='1'),
  pinyin?: string(name='pinyin', example='shang hai'),
}

model DivisionPageResult {
  divisionList?: [
    Division
  ](name='divisionList'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model DivisionQuery {
  divisionCode: string(name='divisionCode', example='1'),
}

model GeneralBill {
  billId?: string(name='billId'),
  billPeriod?: string(name='billPeriod'),
  downloadUrl?: [ string ](name='downloadUrl'),
  endTime?: string(name='endTime'),
  gmtCreate?: string(name='gmtCreate'),
  gmtModified?: string(name='gmtModified'),
  shopId?: string(name='shopId'),
  shopName?: string(name='shopName'),
  startTime?: string(name='startTime'),
  totalAmount?: Money(name='totalAmount'),
}

model GeneralBillPageQuery {
  asc?: boolean(name='asc'),
  billId?: string(name='billId'),
  billPeriod?: string(name='billPeriod'),
  limit?: int32(name='limit'),
  orderBy?: string(name='orderBy'),
  orderDirection?: string(name='orderDirection'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  shopId?: string(name='shopId'),
  start?: int32(name='start'),
}

model GeneralBillPageResult {
  generalBills?: [
    GeneralBill
  ](name='generalBills'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  requestId?: string(name='requestId', example='3239281273464326823'),
  total?: int32(name='total', example='24'),
}

model Good {
  goodName?: string(name='goodName', example='儿童学习桌'),
  productId?: string(name='productId', example='6600****6736'),
  quantity?: int32(name='quantity', example='1'),
}

model GoodsShippingNoticeCreateCmd {
  cpCode: string(name='cpCode', example='SF'),
  disputeId: string(name='disputeId', example='6693****4352'),
  logisticsNo: string(name='logisticsNo', example='SF145****4351'),
}

model GoodsShippingNoticeCreateResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  result?: string(name='result', example='success'),
}

model LeavePictureList {
  desc?: string(name='desc', example='退款凭证'),
  picture?: string(name='picture', example='https://'),
}

model LogisticsDetail {
  ocurrTimeStr?: string(name='ocurrTimeStr', example='2023-09-01 00:00:00'),
  standerdDesc?: string(name='standerdDesc', example='已签收'),
}

model LogisticsOrderListResult {
  logisticsOrderList?: [
    LogisticsOrderResult
  ](name='logisticsOrderList'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model LogisticsOrderResult {
  dataProvider?: string(name='dataProvider', example='菜鸟'),
  dataProviderTitle?: string(name='dataProviderTitle', example='菜鸟裹裹'),
  goods?: [
    Good
  ](name='goods'),
  logisticsCompanyCode?: string(name='logisticsCompanyCode', example='SF'),
  logisticsCompanyName?: string(name='logisticsCompanyName', example='顺丰'),
  logisticsDetailList?: [
    LogisticsDetail
  ](name='logisticsDetailList'),
  mailNo?: string(name='mailNo', example='SF234***2345'),
}

model Money {
  amount?: long(name='amount'),
  amountAsString?: string(name='amountAsString'),
  amountString?: string(name='amountString'),
  cent?: long(name='cent'),
  currency?: {
    currencyCode?: string(name='currencyCode'),
    defaultFractionDigits?: int32(name='defaultFractionDigits'),
    displayName?: string(name='displayName'),
    numericCode?: int32(name='numericCode'),
    symbol?: string(name='symbol'),
  }(name='currency'),
  currencyCode?: string(name='currencyCode'),
  positive?: boolean(name='positive'),
}

model OrderLineResult {
  logisticsStatus?: string(name='logisticsStatus', example='1'),
  number?: string(name='number', example='1'),
  orderId?: string(name='orderId', example='6692****5457'),
  orderLineId?: string(name='orderLineId', example='6692****5458'),
  orderLineStatus?: string(name='orderLineStatus', example='1'),
  payFee?: long(name='payFee', example='100'),
  productId?: string(name='productId', example='6600****6736'),
  productPic?: string(name='productPic', example='//img.alicdn.com/imgextra/i4/2216003305543/O1CN01bip3Un1qokG0'),
  productTitle?: string(name='productTitle', example='儿童学习桌'),
  skuId?: string(name='skuId', example='6600****6737'),
  skuTitle?: string(name='skuTitle', example='浅绿色'),
}

model OrderListResult {
  orderList?: [
    OrderResult
  ](name='orderList'),
  requestId?: string(name='requestId', example='3239281273464326823'),
  total?: int32(name='total', example='24'),
}

model OrderPageQuery {
  orderIdList?: [ string ](name='orderIdList'),
  pageNumber: int32(name='pageNumber', example='1'),
  pageSize: int32(name='pageSize', example='10'),
  purchaseOrderId?: string(name='purchaseOrderId', example='6692****5696'),
}

model OrderProductResult {
  canSell?: boolean(name='canSell', example='true'),
  features?: map[string]any(name='features'),
  message?: string(name='message', example='库存为0'),
  price?: long(name='price', example='100'),
  productId?: string(name='productId', example='6600****6736'),
  productPicUrl?: string(name='productPicUrl', example='//img.alicdn.com/imgextra/i4/2216003305543/O1CN01bip3Un1qokG0'),
  productTitle?: string(name='productTitle', example='儿童学习桌'),
  purchaserId?: string(name='purchaserId', example='56****2304'),
  quantity?: int32(name='quantity', example='1'),
  skuId?: string(name='skuId', example='6600****6737'),
  skuTitle?: string(name='skuTitle', example='浅绿色'),
}

model OrderRenderProductDTO {
  productId: string(name='productId', example='6600****6736'),
  purchaserId: string(name='purchaserId', example='56****2304'),
  quantity: int32(name='quantity', example='1'),
  skuId: string(name='skuId', example='6600****6737'),
}

model OrderRenderResult {
  canSell?: boolean(name='canSell', example='true'),
  deliveryInfoList?: [
    DeliveryInfo
  ](name='deliveryInfoList'),
  extInfo?: map[string]any(name='extInfo'),
  message?: string(name='message', example='库存为0'),
  productList?: [
    OrderProductResult
  ](name='productList'),
}

model OrderResult {
  createDate?: string(name='createDate', example='2023-09-11T12:22:24.000+08:00'),
  distributorId?: string(name='distributorId', example='12****01'),
  logisticsStatus?: string(name='logisticsStatus', example='1'),
  orderAmount?: long(name='orderAmount', example='100'),
  orderId?: string(name='orderId', example='6692****5457'),
  orderLineList?: [
    OrderLineResult
  ](name='orderLineList'),
  orderStatus?: string(name='orderStatus', example='1'),
  requestId?: string(name='requestId', example='841471F6-5D61-1331-8C38-2****B55'),
}

model Product {
  brandName?: string(name='brandName', example='Apple/苹果'),
  canSell?: boolean(name='canSell', example='true'),
  categoryChain?: [
    Category
  ](name='categoryChain'),
  categoryLeafId?: long(name='categoryLeafId', example='201856501'),
  descPath?: string(name='descPath', example='https://img.alicdn.com/descpath/O1CN01wciRDp22AEU14435dsf34'),
  divisionCode?: string(name='divisionCode', example='110000'),
  fuzzyQuantity?: string(name='fuzzyQuantity', example='100+'),
  images?: [ string ](name='images'),
  picUrl?: string(name='picUrl', example='https://img.alicdn.com/imgextra/i3/2214281521988/O1CN01w4vomR1QYYEx6nyr5_!!2214281521988.jpg'),
  productId?: string(name='productId', example='660460842235822080'),
  productSpecs?: [
    ProductSpec
  ](name='productSpecs'),
  productStatus?: string(name='productStatus', example='Online'),
  productType?: string(name='productType', example='Normal'),
  properties?: [
    ProductProperty
  ](name='properties'),
  quantity?: long(name='quantity', example='-1'),
  requestId?: string(name='requestId', example='3239281273464326823'),
  shopId?: string(name='shopId', example='21000017'),
  skus?: [
    Sku
  ](name='skus'),
  soldQuantity?: string(name='soldQuantity', example='100+'),
  taxCode?: string(name='taxCode', example='3040203000000000000'),
  taxRate?: int32(name='taxRate', example='600'),
  title?: string(name='title', example='发财树'),
}

model ProductDTO {
  price?: long(name='price', example='100'),
  productId: string(name='productId', example='6600****6736'),
  purchaserId: string(name='purchaserId', example='56****2304'),
  quantity: int32(name='quantity', example='1'),
  skuId: string(name='skuId', example='6600****6737'),
}

model ProductPageResult {
  pageNumber: int32(name='pageNumber', example='1'),
  pageSize: int32(name='pageSize', example='10'),
  products?: [
    Product
  ](name='products'),
  requestId?: string(name='requestId', example='3239281273464326823'),
  total: int32(name='total', example='24'),
}

model ProductPrice {
  fundAmountMoney?: string(name='fundAmountMoney', example='120'),
}

model ProductProperty {
  text?: string(name='text', example='颜色'),
  values?: [ string ](name='values'),
}

model ProductQuery {
  distributorShopId: string(name='distributorShopId', example='22000009'),
  divisionCode?: string(name='divisionCode', example='110000'),
}

model ProductSaleInfo {
  canSell?: boolean(name='canSell', example='true'),
  divisionCode?: string(name='divisionCode', example='110000'),
  fuzzyQuantity?: string(name='fuzzyQuantity', example='有货'),
  productId?: string(name='productId', example='660460842235822080'),
  productStatus?: string(name='productStatus', example='Online'),
  quantity?: long(name='quantity', example='10'),
  requestId?: string(name='requestId', example='3239281273464326823'),
  shopId?: string(name='shopId', example='21000017'),
  skus?: [
    SkuSaleInfo
  ](name='skus'),
  title?: string(name='title', example='发财树'),
}

model ProductSaleInfoListQuery {
  divisionCode?: string(name='divisionCode', example='110000'),
  productIds: [ string ](name='productIds'),
  purchaserId: string(name='purchaserId', example='22000009'),
}

model ProductSaleInfoListResult {
  productSaleInfos?: [
    ProductSaleInfo
  ](name='productSaleInfos'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model ProductSaleInfoQuery {
  distributorShopId: string(name='distributorShopId', example='22000009'),
  divisionCode?: string(name='divisionCode', example='110000'),
}

model ProductSpec {
  key?: string(name='key', example='颜色分类'),
  keyId?: long(name='keyId', example='1000'),
  values?: [
    ProductSpecValue
  ](name='values'),
}

model ProductSpecValue {
  value?: string(name='value', example='白色'),
  valueId?: long(name='valueId', example='1000'),
}

model PurchaseOrderCreateCmd {
  buyerId: string(name='buyerId', example='买家id'),
  deliveryAddress: AddressInfo(name='deliveryAddress'),
  extInfo?: map[string]any(name='extInfo'),
  outerPurchaseOrderId?: string(name='outerPurchaseOrderId', example='outer123456'),
  productList: [
    ProductDTO
  ](name='productList'),
}

model PurchaseOrderCreateResult {
  purchaseOrderId?: string(name='purchaseOrderId', example='6692****5696'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model PurchaseOrderRenderQuery {
  buyerId: string(name='buyerId', example='test1234567'),
  deliveryAddress: AddressInfo(name='deliveryAddress'),
  extInfo?: map[string]any(name='extInfo', example='{}'),
  productList: [
    OrderRenderProductDTO
  ](name='productList'),
}

model PurchaseOrderRenderResult {
  addressList?: [
    AddressInfo
  ](name='addressList'),
  canSell?: boolean(name='canSell', example='true'),
  extInfo?: map[string]any(name='extInfo'),
  message?: string(name='message', example='库存为0'),
  orderList?: [
    OrderRenderResult
  ](name='orderList'),
  requestId?: string(name='requestId', example='3239281273464326823'),
  unsellableOrderList?: [
    OrderRenderResult
  ](name='unsellableOrderList'),
}

model PurchaseOrderStatusResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  status?: string(name='status', example='10'),
}

model RefundFeeData {
  maxRefundFee?: long(name='maxRefundFee', example='100'),
  minRefundFee?: long(name='minRefundFee', example='1'),
}

model RefundOrderCmd {
  applyReasonTextId: long(name='applyReasonTextId', example='47821'),
  applyReasonTips?: string(name='applyReasonTips', example='不想要了'),
  applyRefundCount: int32(name='applyRefundCount', example='1'),
  applyRefundFee: long(name='applyRefundFee', example='100'),
  bizClaimType: int32(name='bizClaimType', example='1'),
  goodsStatus: int32(name='goodsStatus', example='1'),
  leaveMessage?: string(name='leaveMessage', example='不想要了'),
  leavePictureLists?: [
    LeavePictureList
  ](name='leavePictureLists'),
  orderLineId: string(name='orderLineId', example='6692****5458'),
}

model RefundOrderResult {
  disputeId?: string(name='disputeId', example='6693****4352'),
  disputeStatus?: int32(name='disputeStatus', example='1'),
  orderLineId?: string(name='orderLineId', example='6692****5458'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model RefundReason {
  proofRequired?: boolean(name='proofRequired', example='true'),
  reasonTextId?: string(name='reasonTextId', example='47683'),
  reasonTips?: string(name='reasonTips', example='不想要了'),
  refundDescRequired?: boolean(name='refundDescRequired', example='true'),
}

model RefundRenderCmd {
  bizClaimType: int32(name='bizClaimType', example='1'),
  goodsStatus: int32(name='goodsStatus', example='4'),
  orderLineId: string(name='orderLineId', example='6692****5458'),
}

model RefundRenderResult {
  bizClaimType?: int32(name='bizClaimType', example='1'),
  maxRefundFeeData?: DistributionMaxRefundFee(name='maxRefundFeeData'),
  orderLineId?: string(name='orderLineId', example='6692****5458'),
  refundReasonList?: [
    RefundReason
  ](name='refundReasonList'),
  requestId?: string(name='requestId', example='3239281273464326823'),
}

model RefundResult {
  applyDisputeDesc?: string(name='applyDisputeDesc', example='多拍不想要'),
  applyReason?: ApplyReason(name='applyReason'),
  bizClaimType?: int32(name='bizClaimType', example='1'),
  disputeCreateTime?: string(name='disputeCreateTime', example='2023-09-02T00:00:00.000Z'),
  disputeDesc?: string(name='disputeDesc', example='多拍不想要'),
  disputeEndTime?: string(name='disputeEndTime', example='2023-09-02T12:00:00.000Z'),
  disputeId?: string(name='disputeId', example='6693****4352'),
  disputeStatus?: int32(name='disputeStatus', example='1'),
  orderId?: string(name='orderId', example='6692****5457'),
  orderLineId?: string(name='orderLineId', example='6692****5458'),
  orderLogisticsStatus?: int32(name='orderLogisticsStatus', example='1'),
  refundFee?: long(name='refundFee', example='1'),
  refundFeeData?: RefundFeeData(name='refundFeeData'),
  refunderAddress?: string(name='refunderAddress', example='阿里云云谷'),
  refunderName?: string(name='refunderName', example='赵先生'),
  refunderTel?: string(name='refunderTel', example='182****1334'),
  refunderZipCode?: string(name='refunderZipCode', example='331001'),
  requestId?: string(name='requestId', example='841471F6-5D61-1331-8C38-2****B55'),
  returnGoodLogisticsStatus?: int32(name='returnGoodLogisticsStatus', example='0'),
  sellerAgreeMsg?: string(name='sellerAgreeMsg', example='同意退款'),
  sellerRefuseAgreementMessage?: string(name='sellerRefuseAgreementMessage', example='不同意退款'),
  sellerRefuseReason?: string(name='sellerRefuseReason', example='商品没问题，买家举证无效'),
}

model Shop {
  cooperationShops?: [
    CooperationShop
  ](name='cooperationShops', example='12***01'),
  distributorId?: string(name='distributorId', example='12****09'),
  endDate?: string(name='endDate', example='2024-09-09 00:00:00'),
  purchaserId?: string(name='purchaserId', example='PID56****2304'),
  requestId?: string(name='requestId', example='48A34399-A72C-1E23-8388-7E63****E927'),
  shopId?: string(name='shopId', example='22****09'),
  shopName?: string(name='shopName', example='儿童分销店铺'),
  shopType?: string(name='shopType', example='DistributorQYG'),
  startDate?: string(name='startDate', example='2023-09-09 00:00:00'),
  status?: string(name='status', example='Working'),
}

model ShopPageDataResult {
  cooperationShops?: [
    CooperationShop
  ](name='cooperationShops', example='12****01'),
  endDate?: string(name='endDate', example='2023-09-01 00:00:00'),
  purchaserId?: string(name='purchaserId', example='PID56****2304'),
  shopId?: string(name='shopId', example='22****09'),
  shopName?: string(name='shopName', example='儿童座椅分销店铺'),
  shopType?: string(name='shopType', example='DistributorQYG'),
  startDate?: string(name='startDate', example='2023-09-01 00:00:00'),
  status?: string(name='status', example='Working'),
}

model ShopPageResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  shopList?: [
    ShopPageDataResult
  ](name='shopList'),
  total?: int32(name='total', example='24'),
}

model Sku {
  barcode?: string(name='barcode', example='6922454329176'),
  canSell?: boolean(name='canSell', example='true'),
  divisionCode?: string(name='divisionCode', example='110000'),
  fuzzyQuantity?: string(name='fuzzyQuantity', example='有货'),
  markPrice?: long(name='markPrice', example='999900'),
  picUrl?: string(name='picUrl', example='https:////img.alicdn.com/imgextra///img.alicdn.com/imgextra/i2/2216003305543/O1CN010DEQCX1qokFYGRfPE_!!2216003305543.png'),
  platformPrice?: long(name='platformPrice', example='999900'),
  price?: long(name='price', example='19800'),
  productId?: string(name='productId', example='660460842235822080'),
  quantity?: long(name='quantity', example='-1'),
  shopId?: string(name='shopId', example='21000017'),
  skuId?: string(name='skuId', example='660460842235822081'),
  skuSpecs?: [
    SkuSpec
  ](name='skuSpecs'),
  skuSpecsCode?: string(name='skuSpecsCode', example='颜色分类:天蓝色'),
  skuStatus?: string(name='skuStatus', example='Online'),
  title?: string(name='title', example='天蓝色'),
}

model SkuQueryParam {
  productId: string(name='productId', example='660460842235822080'),
  skuId: string(name='skuId', example='660460842235822081'),
}

model SkuSaleInfo {
  canSell?: boolean(name='canSell', example='true'),
  divisionCode?: string(name='divisionCode', example='110000'),
  fuzzyQuantity?: string(name='fuzzyQuantity', example='有货'),
  markPrice?: long(name='markPrice', example='999900'),
  price?: long(name='price', example='19800'),
  productId?: string(name='productId', example='660460842235822080'),
  quantity?: long(name='quantity', example='-1'),
  shopId?: string(name='shopId', example='21000017'),
  skuId?: string(name='skuId', example='660460842235822081'),
  skuStatus?: string(name='skuStatus', example='Online'),
  title?: string(name='title', example='天蓝色'),
}

model SkuSaleInfoListQuery {
  divisionCode?: string(name='divisionCode', example='110000'),
  purchaserId: string(name='purchaserId', example='21000017'),
  skuQueryParams: [
    SkuQueryParam
  ](name='skuQueryParams'),
}

model SkuSaleInfoListResult {
  requestId?: string(name='requestId', example='3239281273464326823'),
  skuSaleInfos?: [
    SkuSaleInfo
  ](name='skuSaleInfos'),
}

model SkuSpec {
  key?: string(name='key', example='颜色分类'),
  keyId?: long(name='keyId', example='1000'),
  value?: string(name='value', example='天蓝色'),
  valueId?: long(name='valueId', example='1000'),
}

model CancelRefundOrderRequest {
  disputeId?: string(name='disputeId', example='601853367760207872', position='Path'),
}

model CancelRefundOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefundOrderResult  
}

async function cancelRefundOrder(request: CancelRefundOrderRequest): CancelRefundOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelRefundOrder', 'POST', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/refunds/{disputeId}/commands/cancel', 'json', false, 'json', request);
}

model ConfirmDisburseRequest {
  body: ConfirmDisburseCmd(name='body', position='Body'),
}

model ConfirmDisburseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmDisburseResult  
}

async function confirmDisburse(request: ConfirmDisburseRequest): ConfirmDisburseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ConfirmDisburse', 'POST', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/orders/commands/confirmDisburse', 'json', false, 'json', request);
}

model CreateGoodsShippingNoticeRequest {
  body: GoodsShippingNoticeCreateCmd(name='body', position='Body'),
}

model CreateGoodsShippingNoticeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GoodsShippingNoticeCreateResult  
}

async function createGoodsShippingNotice(request: CreateGoodsShippingNoticeRequest): CreateGoodsShippingNoticeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateGoodsShippingNotice', 'POST', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/refunds/command/createGoodsShippingNotice', 'json', false, 'json', request);
}

model CreatePurchaseOrderRequest {
  body: PurchaseOrderCreateCmd(name='body', position='Body'),
}

model CreatePurchaseOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PurchaseOrderCreateResult  
}

async function createPurchaseOrder(request: CreatePurchaseOrderRequest): CreatePurchaseOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePurchaseOrder', 'POST', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/purchaseOrders', 'json', false, 'json', request);
}

model CreateRefundOrderRequest {
  body: RefundOrderCmd(name='body', position='Body'),
}

model CreateRefundOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefundOrderResult  
}

async function createRefundOrder(request: CreateRefundOrderRequest): CreateRefundOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRefundOrder', 'POST', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/refunds', 'json', false, 'json', request);
}

model GetOrderRequest {
  orderId: string(name='orderId', example='669607056****8593', position='Path'),
}

model GetOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OrderResult  
}

async function getOrder(request: GetOrderRequest): GetOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetOrder', 'GET', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/orders/{orderId}', 'json', false, 'json', request);
}

model GetPurchaseOrderStatusRequest {
  purchaseOrderId: string(name='purchaseOrderId', example='6696070481****5680', position='Path'),
}

model GetPurchaseOrderStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PurchaseOrderStatusResult  
}

async function getPurchaseOrderStatus(request: GetPurchaseOrderStatusRequest): GetPurchaseOrderStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPurchaseOrderStatus', 'GET', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/purchaseOrders/{purchaseOrderId}/status', 'json', false, 'json', request);
}

model GetPurchaserShopRequest {
  purchaserId: string(name='purchaserId', example='56****2304', position='Path'),
}

model GetPurchaserShopResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Shop  
}

async function getPurchaserShop(request: GetPurchaserShopRequest): GetPurchaserShopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPurchaserShop', 'GET', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/purchaserShops/{purchaserId}', 'json', false, 'json', request);
}

model GetRefundOrderRequest {
  disputeId?: string(name='disputeId', example='6696233432****5024', position='Path'),
}

model GetRefundOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefundResult  
}

async function getRefundOrder(request: GetRefundOrderRequest): GetRefundOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRefundOrder', 'GET', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/refunds/{disputeId}', 'json', false, 'json', request);
}

model GetSelectionProductRequest {
  productId: string(name='productId', example='660460842235822080', position='Path'),
  divisionCode?: string(name='divisionCode', example='110000', position='Query'),
  purchaserId: string(name='purchaserId', example='56****2304', position='Query'),
}

model GetSelectionProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: Product  
}

async function getSelectionProduct(request: GetSelectionProductRequest): GetSelectionProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSelectionProduct', 'GET', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/selectionPool/products/{productId}', 'json', false, 'json', request);
}

model GetSelectionProductSaleInfoRequest {
  productId: string(name='productId', example='660460842235822080', position='Path'),
  divisionCode?: string(name='divisionCode', example='110000', position='Query'),
  purchaserId: string(name='purchaserId', example='56****2304', position='Query'),
}

model GetSelectionProductSaleInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ProductSaleInfo  
}

async function getSelectionProductSaleInfo(request: GetSelectionProductSaleInfoRequest): GetSelectionProductSaleInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSelectionProductSaleInfo', 'GET', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/selectionPool/products/{productId}/saleInfo', 'json', false, 'json', request);
}

model ListCategoriesRequest {
  body?: CategoryListQuery(name='body', position='Body'),
}

model ListCategoriesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CategoryListResult  
}

async function listCategories(request: ListCategoriesRequest): ListCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCategories', 'POST', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/categories/commands/list', 'json', false, 'json', request);
}

model ListLogisticsOrdersRequest {
  orderId: string(name='orderId', example='6696070566****8593', position='Path'),
}

model ListLogisticsOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: LogisticsOrderListResult  
}

async function listLogisticsOrders(request: ListLogisticsOrdersRequest): ListLogisticsOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListLogisticsOrders', 'GET', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/orders/{orderId}/logisticsOrders', 'json', false, 'json', request);
}

model ListPurchaserShopsRequest {
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
}

model ListPurchaserShopsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ShopPageResult  
}

async function listPurchaserShops(request: ListPurchaserShopsRequest): ListPurchaserShopsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPurchaserShops', 'GET', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/purchaserShops', 'json', false, 'json', request);
}

model ListSelectionProductSaleInfosRequest {
  body: ProductSaleInfoListQuery(name='body', position='Body'),
}

model ListSelectionProductSaleInfosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ProductSaleInfoListResult  
}

async function listSelectionProductSaleInfos(request: ListSelectionProductSaleInfosRequest): ListSelectionProductSaleInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSelectionProductSaleInfos', 'POST', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/selectionPool/products/saleInfo/commands/list', 'json', false, 'json', request);
}

model ListSelectionProductsRequest {
  pageNumber: int32(name='pageNumber', example='1', position='Query'),
  pageSize: int32(name='pageSize', example='10', position='Query'),
  purchaserId: string(name='purchaserId', example='56****2304', position='Query'),
}

model ListSelectionProductsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ProductPageResult  
}

async function listSelectionProducts(request: ListSelectionProductsRequest): ListSelectionProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSelectionProducts', 'GET', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/selectionPool/products', 'json', false, 'json', request);
}

model ListSelectionSkuSaleInfosRequest {
  body: SkuSaleInfoListQuery(name='body', position='Body'),
}

model ListSelectionSkuSaleInfosResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SkuSaleInfoListResult  
}

async function listSelectionSkuSaleInfos(request: ListSelectionSkuSaleInfosRequest): ListSelectionSkuSaleInfosResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListSelectionSkuSaleInfos', 'POST', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/selectionPool/skus/saleInfo/commands/list', 'json', false, 'json', request);
}

model QueryChildDivisionCodeRequest {
  body: DivisionQuery(name='body', position='Body'),
}

model QueryChildDivisionCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DivisionPageResult  
}

async function queryChildDivisionCode(request: QueryChildDivisionCodeRequest): QueryChildDivisionCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryChildDivisionCode', 'POST', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/division/commands/queryChildDivisionCode', 'json', false, 'json', request);
}

model QueryOrdersRequest {
  body: OrderPageQuery(name='body', position='Body'),
}

model QueryOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: OrderListResult  
}

async function queryOrders(request: QueryOrdersRequest): QueryOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryOrders', 'POST', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/orders/commands/query', 'json', false, 'json', request);
}

model RenderPurchaseOrderRequest {
  body: PurchaseOrderRenderQuery(name='body', position='Body'),
}

model RenderPurchaseOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PurchaseOrderRenderResult  
}

async function renderPurchaseOrder(request: RenderPurchaseOrderRequest): RenderPurchaseOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RenderPurchaseOrder', 'POST', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/purchaseOrders/commands/render', 'json', false, 'json', request);
}

model RenderRefundOrderRequest {
  body: RefundRenderCmd(name='body', position='Body'),
}

model RenderRefundOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefundRenderResult  
}

async function renderRefundOrder(request: RenderRefundOrderRequest): RenderRefundOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RenderRefundOrder', 'POST', '/opensaas-s2b/opensaas-s2b-biz-trade/v2/refunds/commands/render', 'json', false, 'json', request);
}

