/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cloud-siem';
  @version = '2024-12-12';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CheckUpgradeItemRequest {
  lang?: string(name='Lang', example='zh', position='Body'),
  regionId?: string(name='RegionId', example='cn-shanghai', position='Body'),
  roleFor?: string(name='RoleFor', example='113091674488****', position='Body'),
  upgradeItemId?: string(name='UpgradeItemId', example='dispose_task_upgrade', position='Body'),
}

model CheckUpgradeItemResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
  upgradeItem?: {
    checkResult?: string(name='CheckResult', example='OK'),
    checkStatus?: string(name='CheckStatus', example='success'),
    upgradeItemId?: string(name='UpgradeItemId', example='incident_upgrade'),
  }(name='UpgradeItem'),
}

model CheckUpgradeItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUpgradeItemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckUpgradeItem  CheckUpgradeItemRequest
  * @return CheckUpgradeItemResponse
 */
async function checkUpgradeItem(request: CheckUpgradeItemRequest): CheckUpgradeItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckUpgradeItem', 'POST', '/', 'json', true, 'form', request);
}

model CreateDataIngestionRequest {
  capacityCount?: int32(name='CapacityCount', position='Body'),
  dataIngestionMode?: string(name='DataIngestionMode', example='realtime。', position='Body'),
  dataIngestionStateCode?: string(name='DataIngestionStateCode', position='Body'),
  dataIngestionType?: string(name='DataIngestionType', position='Body'),
  dataSourceEditable?: boolean(name='DataSourceEditable', position='Body'),
  dataSourceId?: string(name='DataSourceId', example='ds-3g6lyf4eonngyohaq7tr。', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  normalizationRuleEditable?: boolean(name='NormalizationRuleEditable', position='Body'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-hdmady54piigkjfv17yp。', position='Body'),
  productId?: string(name='ProductId', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
  scanDataSourceId?: string(name='ScanDataSourceId', position='Body'),
  streamJobId?: string(name='StreamJobId', position='Body'),
  updateTime?: long(name='UpdateTime', position='Body'),
}

model CreateDataIngestionResponseBody = {
  dataIngestionId?: string(name='DataIngestionId', example='di-yxtm3l2rwa7fr5uvxtc7。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model CreateDataIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataIngestionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataIngestion  CreateDataIngestionRequest
  * @return CreateDataIngestionResponse
 */
async function createDataIngestion(request: CreateDataIngestionRequest): CreateDataIngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataIngestion', 'POST', '/', 'json', true, 'form', request);
}

model CreateDataSetRequest {
  dataSetDescription?: string(name='DataSetDescription', example='lmftest contains ip list', maxLength=1000, position='Body'),
  dataSetFieldKeyName: string(name='DataSetFieldKeyName', description='This parameter is required.', example='ip', position='Body'),
  dataSetFileName: string(name='DataSetFileName', description='This parameter is required.', example='cloudsiem-dataset/1358117679873357_17433*****.csv', position='Body'),
  dataSetName: string(name='DataSetName', description='This parameter is required.', example='lmftest', maxLength=100, position='Body'),
  dataSetStatus?: int32(name='DataSetStatus', position='Body'),
  dataSetType?: string(name='DataSetType', position='Body'),
  ipWhitelistRecognizers?: [ 
    {
      autoRecognizeStatus?: string(name='AutoRecognizeStatus', example='enabled'),
      ipWhitelistRecognizerType?: string(name='IpWhitelistRecognizerType', example='waf_back_source_ip'),
      recognizeScope?: string(name='RecognizeScope', example='current_account'),
    }
  ](name='IpWhitelistRecognizers', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model CreateDataSetResponseBody = {
  dataSetRecordStatistic?: {
    dataSetId?: string(name='DataSetId', example='dataset-qt0n8246gs9nackg****'),
    newDataSetRecordCount?: int32(name='NewDataSetRecordCount', example='6'),
  }(name='DataSetRecordStatistic'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
}

model CreateDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataSet  CreateDataSetRequest
  * @return CreateDataSetResponse
 */
async function createDataSet(request: CreateDataSetRequest): CreateDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataSet', 'POST', '/', 'json', true, 'form', request);
}

model CreateDataSourceRequest {
  dataSourceFrom?: string(name='DataSourceFrom', example='center。', position='Body'),
  dataSourceIds?: [ string ](name='DataSourceIds', shrink='json', position='Body'),
  dataSourceName?: string(name='DataSourceName', example='AD_LOG。', position='Body'),
  dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', position='Body'),
  dataSourceRecognizer?: string(name='DataSourceRecognizer', position='Body'),
  dataSourceReferences?: [ string ](name='DataSourceReferences', shrink='json', position='Body'),
  dataSourceStores?: [ 
    {
      createTime?: long(name='CreateTime'),
      dataSourceStoreFrom?: string(name='DataSourceStoreFrom'),
      dataSourceStoreId?: string(name='DataSourceStoreId'),
      dataSourceStoreStatus?: string(name='DataSourceStoreStatus'),
      logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
      logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
      logStoreName?: string(name='LogStoreName', example='actiontrail_management-events。'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='DataSourceStores', position='Body'),
  dataSourceTemplateId?: string(name='DataSourceTemplateId', position='Body'),
  dataSourceType?: string(name='DataSourceType', example='preset。', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。', position='Body'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。', position='Body'),
  logStoreName?: string(name='LogStoreName', example='mde_raw。', position='Body'),
  logUserId?: long(name='LogUserId', example='173326*******。', position='Body'),
  order?: string(name='Order', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
  updateTime?: long(name='UpdateTime', position='Body'),
}

model CreateDataSourceResponseBody = {
  dataSourceId?: string(name='DataSourceId', example='ds-jl67vixpe1scwysgyu3x。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDataSource  CreateDataSourceRequest
  * @return CreateDataSourceResponse
 */
async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDataSource', 'POST', '/', 'json', true, 'form', request);
}

model CreateDetectionRuleRequest {
  alertAttCk?: string(name='AlertAttCk', example='Discovery', position='Body'),
  alertLevel: string(name='AlertLevel', description='This parameter is required.', example='1', position='Body'),
  alertSchemaId: string(name='AlertSchemaId', description='This parameter is required.', example='ALERT_ACTIVITY', position='Body'),
  alertTacticId?: string(name='AlertTacticId', example='TA0042', position='Body'),
  alertThresholdCount?: int32(name='AlertThresholdCount', example='10', position='Body'),
  alertThresholdGroup?: string(name='AlertThresholdGroup', example='alert_type,ip', position='Body'),
  alertThresholdPeriod?: string(name='AlertThresholdPeriod', example='5m', position='Body'),
  alertType: string(name='AlertType', description='This parameter is required.', example='WebShell', position='Body'),
  detectionExpressionContent?: string(name='DetectionExpressionContent', example='*|set session mode=scan;SELECT * FROM log
WHERE schema = \\"PROCESS_START_ACTIVITY\\"
AND (
    proc_path LIKE \\"%/groups\\"
    OR (
        (
            proc_path LIKE \\"%/cat\\"
            OR proc_path LIKE \\"%/head\\"
            OR proc_path LIKE \\"%/tail\\"
            OR proc_path LIKE \\"%/more\\"
        )
        AND cmdline LIKE \\"%/etc/group%\\"
    )
)', position='Body'),
  detectionExpressionType?: string(name='DetectionExpressionType', example='sql', position='Body'),
  detectionRuleDescription?: string(name='DetectionRuleDescription', example='dr-123', maxLength=2000, position='Body'),
  detectionRuleName: string(name='DetectionRuleName', description='This parameter is required.', example='dr-ha1i09ob3zmqrs85****', maxLength=100, position='Body'),
  detectionRuleStatus?: string(name='DetectionRuleStatus', example='0', position='Body'),
  detectionRuleType: string(name='DetectionRuleType', description='This parameter is required.', example='custom', position='Body'),
  entityMappings?: string(name='EntityMappings', example='[{\\"NormalizationSchemaId\\":\\"host\\",\\"NormalizationFieldMappings\\":[{\\"NormalizationFieldName\\":\\"uuid\\",\\"MappingFieldName\\":\\"host\\",\\"NormalizationFieldType\\":\\"varchar\\"}]}]', position='Body'),
  incidentAggregationExpression?: string(name='IncidentAggregationExpression', example='5m', position='Body'),
  incidentAggregationType?: string(name='IncidentAggregationType', example='window', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  logCategoryId?: string(name='LogCategoryId', example='NETWORK_CATEGORY', position='Body'),
  logSchemaId: string(name='LogSchemaId', description='This parameter is required.', example='API_RISK_ACTIVITY', position='Body'),
  playbookParameters?: string(name='PlaybookParameters', example='{
    "ip": {
        "ip": "124.23.*.*"
    }
}', position='Body'),
  playbookUuid?: string(name='PlaybookUuid', example='system_aliyun_clb_process_book', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
  scheduleBeginTime?: long(name='ScheduleBeginTime', example='1733269771123', position='Body'),
  scheduleExpression?: string(name='ScheduleExpression', example='0/5 * * * *', position='Body'),
  scheduleMaxRetries?: int32(name='ScheduleMaxRetries', example='1', position='Body'),
  scheduleMaxTimeout?: int32(name='ScheduleMaxTimeout', example='60', position='Body'),
  scheduleType?: string(name='ScheduleType', example='fixed_rate', position='Body'),
  scheduleWindow?: string(name='ScheduleWindow', example='5m', position='Body'),
}

model CreateDetectionRuleResponseBody = {
  detectionRuleId?: string(name='DetectionRuleId', example='dr-ha1i09ob3zmqrs85****'),
  requestId?: string(name='RequestId', example='5CC09D0C-1CD7-54BD-A853-DCB2D945****'),
}

model CreateDetectionRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDetectionRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateDetectionRule  CreateDetectionRuleRequest
  * @return CreateDetectionRuleResponse
 */
async function createDetectionRule(request: CreateDetectionRuleRequest): CreateDetectionRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDetectionRule', 'POST', '/', 'json', true, 'form', request);
}

model CreateExportTaskRequest {
  exportTaskParameter?: string(name='ExportTaskParameter', example='{
    "IncidentName": "name",
    "IncidentStatus": "1",
    "ThreatLevel":["1","2"],
    "IncidentUuids":"315EE627-39DC-560A-8DFD-CBF66AD9****"
}', position='Body'),
  exportTaskType?: string(name='ExportTaskType', example='incident_list', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model CreateExportTaskResponseBody = {
  fileName?: string(name='FileName', example='event_1193842352994186_17344888****.xlsx'),
  id?: long(name='Id', example='400151'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model CreateExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExportTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateExportTask  CreateExportTaskRequest
  * @return CreateExportTaskResponse
 */
async function createExportTask(request: CreateExportTaskRequest): CreateExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateExportTask', 'POST', '/', 'json', true, 'form', request);
}

model CreateLogStoreRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-channel-173326*******-cn-hangzhou。', position='Body'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。', position='Body'),
  logStoreName?: string(name='LogStoreName', example='logstoreqykug。', position='Body'),
  logUserId?: long(name='LogUserId', example='173326*******。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model CreateLogStoreResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model CreateLogStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLogStoreResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLogStore  CreateLogStoreRequest
  * @return CreateLogStoreResponse
 */
async function createLogStore(request: CreateLogStoreRequest): CreateLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateLogStore', 'POST', '/', 'json', true, 'form', request);
}

model CreateNormalizationRuleRequest {
  extendContentPacked?: string(name='ExtendContentPacked', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。', position='Body'),
  normalizationRuleDescription?: string(name='NormalizationRuleDescription', example='normalization_rule_Z57np。', position='Body'),
  normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\"[\\s\\S]+\\" as extend_content。', position='Body'),
  normalizationRuleFormat?: string(name='NormalizationRuleFormat', example='SPL。', position='Body'),
  normalizationRuleIds?: [ string ](name='NormalizationRuleIds', shrink='json', position='Body'),
  normalizationRuleMode?: string(name='NormalizationRuleMode', example='both。', position='Body'),
  normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。', position='Body'),
  normalizationRuleType?: string(name='NormalizationRuleType', position='Body'),
  normalizationRuleVersion?: int32(name='NormalizationRuleVersion', position='Body'),
  normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。', position='Body'),
  orderField?: string(name='OrderField', position='Body'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
  vendorId?: string(name='VendorId', example='alibaba_cloud。', position='Body'),
}

model CreateNormalizationRuleResponseBody = {
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model CreateNormalizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNormalizationRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateNormalizationRule  CreateNormalizationRuleRequest
  * @return CreateNormalizationRuleResponse
 */
async function createNormalizationRule(request: CreateNormalizationRuleRequest): CreateNormalizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateNormalizationRule', 'POST', '/', 'json', true, 'form', request);
}

model CreateProductRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  productName?: string(name='ProductName', example='alibaba_cloud_sas。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
  vendorName?: string(name='VendorName', example='111。', position='Body'),
}

model CreateProductResponseBody = {
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model CreateProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateProduct  CreateProductRequest
  * @return CreateProductResponse
 */
async function createProduct(request: CreateProductRequest): CreateProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateProduct', 'POST', '/', 'json', true, 'form', request);
}

model CreateVendorRequest {
  lang?: string(name='Lang', example='en。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
  vendorName?: string(name='VendorName', example='111。', position='Body'),
}

model CreateVendorResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  vendorId?: string(name='VendorId', example='vd-qlsw5eocx94w9。'),
}

model CreateVendorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVendorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateVendor  CreateVendorRequest
  * @return CreateVendorResponse
 */
async function createVendor(request: CreateVendorRequest): CreateVendorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateVendor', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDataIngestionRequest {
  dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_sas_netstat_ingestion_173326*******。', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model DeleteDataIngestionResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DeleteDataIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataIngestionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataIngestion  DeleteDataIngestionRequest
  * @return DeleteDataIngestionResponse
 */
async function deleteDataIngestion(request: DeleteDataIngestionRequest): DeleteDataIngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataIngestion', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDataSetRequest {
  dataSetId: string(name='DataSetId', description='This parameter is required.', example='dataset-10iy8mbifnb4gniv****', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model DeleteDataSetResponseBody = {
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
}

model DeleteDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataSet  DeleteDataSetRequest
  * @return DeleteDataSetResponse
 */
async function deleteDataSet(request: DeleteDataSetRequest): DeleteDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSet', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDataSetRecordRequest {
  dataSetId: string(name='DataSetId', description='This parameter is required.', example='dataset-10iy8mbifnb4gniv****', position='Body'),
  dataSetRecordIds: string(name='DataSetRecordIds', description='This parameter is required.', example='[1,2,3,4]', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model DeleteDataSetRecordResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DeleteDataSetRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSetRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataSetRecord  DeleteDataSetRecordRequest
  * @return DeleteDataSetRecordResponse
 */
async function deleteDataSetRecord(request: DeleteDataSetRecordRequest): DeleteDataSetRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSetRecord', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDataSourceRequest {
  dataSourceId?: string(name='DataSourceId', example='ds-txejfbrh94k5cx58a4qh。', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDataSource  DeleteDataSourceRequest
  * @return DeleteDataSourceResponse
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDataSource', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDetectionRuleRequest {
  detectionRuleId: string(name='DetectionRuleId', description='This parameter is required.', example='dr-53np4nguf5jmh1vc****', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model DeleteDetectionRuleResponseBody = {
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
}

model DeleteDetectionRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDetectionRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteDetectionRule  DeleteDetectionRuleRequest
  * @return DeleteDetectionRuleResponse
 */
async function deleteDetectionRule(request: DeleteDetectionRuleRequest): DeleteDetectionRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDetectionRule', 'POST', '/', 'json', true, 'form', request);
}

model DeleteLogStoreRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou', position='Body'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。', position='Body'),
  logStoreName?: string(name='LogStoreName', example='rds-logstore。', position='Body'),
  logUserId?: long(name='LogUserId', example='173326*******。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model DeleteLogStoreResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DeleteLogStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLogStoreResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLogStore  DeleteLogStoreRequest
  * @return DeleteLogStoreResponse
 */
async function deleteLogStore(request: DeleteLogStoreRequest): DeleteLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteLogStore', 'POST', '/', 'json', true, 'form', request);
}

model DeleteNormalizationRuleRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model DeleteNormalizationRuleResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DeleteNormalizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNormalizationRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteNormalizationRule  DeleteNormalizationRuleRequest
  * @return DeleteNormalizationRuleResponse
 */
async function deleteNormalizationRule(request: DeleteNormalizationRuleRequest): DeleteNormalizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNormalizationRule', 'POST', '/', 'json', true, 'form', request);
}

model DeleteNormalizationRuleVersionRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。', position='Body'),
  normalizationRuleVersion?: int32(name='NormalizationRuleVersion', example='1。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model DeleteNormalizationRuleVersionResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DeleteNormalizationRuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNormalizationRuleVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteNormalizationRuleVersion  DeleteNormalizationRuleVersionRequest
  * @return DeleteNormalizationRuleVersionResponse
 */
async function deleteNormalizationRuleVersion(request: DeleteNormalizationRuleVersionRequest): DeleteNormalizationRuleVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteNormalizationRuleVersion', 'POST', '/', 'json', true, 'form', request);
}

model DeleteProductRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model DeleteProductResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DeleteProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteProduct  DeleteProductRequest
  * @return DeleteProductResponse
 */
async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteProduct', 'POST', '/', 'json', true, 'form', request);
}

model DeleteVendorRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
  vendorId?: string(name='VendorId', example='vd-qlsw5eocx94w9。', position='Body'),
  vendorName?: string(name='VendorName', example='111。', position='Body'),
}

model DeleteVendorResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DeleteVendorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVendorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteVendor  DeleteVendorRequest
  * @return DeleteVendorResponse
 */
async function deleteVendor(request: DeleteVendorRequest): DeleteVendorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteVendor', 'POST', '/', 'json', true, 'form', request);
}

model DisableDataIngestionRequest {
  dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_sas_netstat_ingestion_173326*******。', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model DisableDataIngestionResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DisableDataIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableDataIngestionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DisableDataIngestion  DisableDataIngestionRequest
  * @return DisableDataIngestionResponse
 */
async function disableDataIngestion(request: DisableDataIngestionRequest): DisableDataIngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableDataIngestion', 'POST', '/', 'json', true, 'form', request);
}

model EnableDataIngestionRequest {
  dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_sas_netstat_ingestion_173326*******。', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  productId?: string(name='ProductId', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model EnableDataIngestionResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model EnableDataIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableDataIngestionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of EnableDataIngestion  EnableDataIngestionRequest
  * @return EnableDataIngestionResponse
 */
async function enableDataIngestion(request: EnableDataIngestionRequest): EnableDataIngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableDataIngestion', 'POST', '/', 'json', true, 'form', request);
}

model ExecuteLogQueryRequest {
  endTime?: string(name='EndTime', example='1733269771123。', position='Body'),
  extendContentPacked?: string(name='ExtendContentPacked', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  logProjectName?: string(name='LogProjectName', example='slsaudit-center-173326*******-cn-hangzhou', position='Body'),
  logQuery?: string(name='LogQuery', example='*', position='Body'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。', position='Body'),
  logStoreName?: string(name='LogStoreName', example='huawei-cn-cfw', position='Body'),
  logUserId?: long(name='LogUserId', example='173326*******。', position='Body'),
  normalizationSchemaId?: string(name='NormalizationSchemaId', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
  startTime?: string(name='StartTime', example='1733269771123。', position='Body'),
}

model ExecuteLogQueryResponseBody = {
  queryResult?: [ any ](name='QueryResult', example='[]。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model ExecuteLogQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteLogQueryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteLogQuery  ExecuteLogQueryRequest
  * @return ExecuteLogQueryResponse
 */
async function executeLogQuery(request: ExecuteLogQueryRequest): ExecuteLogQueryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteLogQuery', 'POST', '/', 'json', true, 'form', request);
}

model ExecuteUpgradeRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: string(name='RoleFor', example='173326*******。', position='Body'),
}

model ExecuteUpgradeResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model ExecuteUpgradeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteUpgradeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteUpgrade  ExecuteUpgradeRequest
  * @return ExecuteUpgradeResponse
 */
async function executeUpgrade(request: ExecuteUpgradeRequest): ExecuteUpgradeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ExecuteUpgrade', 'POST', '/', 'json', true, 'form', request);
}

model GetDataBatchIngestionRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model GetDataBatchIngestionResponseBody = {
  dataBatchIngestion?: {
    apsaraDataIngestionIds?: [ string ](name='ApsaraDataIngestionIds'),
    autoScanNew?: string(name='AutoScanNew', example='enabled。'),
    dataBatchIngestionEffectTime?: string(name='DataBatchIngestionEffectTime', example='1733269771123。'),
    dataBatchIngestionMode?: string(name='DataBatchIngestionMode', example='full。'),
    dataBatchIngestionSetTime?: string(name='DataBatchIngestionSetTime', example='1733269771123。'),
    dataBatchIngestionStatus?: string(name='DataBatchIngestionStatus', example='pending。'),
    dataIngestions?: [ 
      {
        dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_sas_process_ingestion_173326*******。'),
        dataIngestionStatus?: string(name='DataIngestionStatus', example='enabled。'),
        dataSourceId?: string(name='DataSourceId', example='alibaba_cloud_sas_process_log_173326*******。'),
        productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
        vendorId?: string(name='VendorId', example='alibaba_cloud。'),
      }
    ](name='DataIngestions'),
    dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', example='true。'),
    logUserIds?: [ string ](name='LogUserIds'),
    recommendDataIngestionIds?: [ string ](name='RecommendDataIngestionIds'),
  }(name='DataBatchIngestion'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model GetDataBatchIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataBatchIngestionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataBatchIngestion  GetDataBatchIngestionRequest
  * @return GetDataBatchIngestionResponse
 */
async function getDataBatchIngestion(request: GetDataBatchIngestionRequest): GetDataBatchIngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataBatchIngestion', 'POST', '/', 'json', true, 'form', request);
}

model GetDataStorageRequest {
  lang?: string(name='Lang', example='zh', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model GetDataStorageResponseBody = {
  data?: {
    coldStorageUsedCapacity?: double(name='ColdStorageUsedCapacity', example='100.0'),
    dataStorageRegionId?: string(name='DataStorageRegionId', example='cn-shanghai'),
    dataStorageRegionPermission?: string(name='DataStorageRegionPermission', example='deny'),
    dataStorageTotalCapacity?: long(name='DataStorageTotalCapacity', example='100'),
    dataStorageUsedCapacity?: double(name='DataStorageUsedCapacity', example='100.0'),
    dataStorageUsedCapacityDetail?: string(name='DataStorageUsedCapacityDetail', example='{\\"purchasedHotStorageCapacity\\":1000,\\"usedHotStorageCapacity\\":4.2,\\"usedHotStorageCapacityDetail\\":{\\"ap-southeast-1\\":4.2,\\"cn-shenzhen\\":0.0,\\"cn-shanghai\\":0.0}}'),
    logProject?: string(name='LogProject', example='aliyun-cloudsiem-data-171835723111****-cn-shanghai'),
    normalizationLogStores?: [ 
      {
        logStoreName?: string(name='LogStoreName', example='vulnerability-activity'),
        logStoreTtl?: int32(name='LogStoreTtl', example='180'),
      }
    ](name='NormalizationLogStores'),
    normalizationLogViews?: [ 
      {
        activityName?: string(name='ActivityName', example='API security risk log'),
        categoryName?: string(name='CategoryName', example='Security Category'),
        detectionRuleReferenceCount?: int32(name='DetectionRuleReferenceCount', example='3'),
        detectionRuleReferenceProductIds?: [ string ](name='DetectionRuleReferenceProductIds'),
        logSearchConditions?: string(name='LogSearchConditions', example='[{\\"SCHEMA\\":\\"AZURE_ACTIVE_DIRECTORY_AUDIT_ACTIVITY\\"}]'),
        logStoreName?: string(name='LogStoreName', example='risk-activity'),
        logViewExisted?: boolean(name='LogViewExisted', example='true'),
        logViewName?: string(name='LogViewName', example='risk_activity'),
      }
    ](name='NormalizationLogViews'),
    sasLogStores?: [ 
      {
        logCode?: string(name='LogCode', example='sas-net-block'),
        logDeliveryGroup?: string(name='LogDeliveryGroup', example='host'),
        logDeliveryPermission?: string(name='LogDeliveryPermission', example='deny'),
        logDeliveryStatus?: string(name='LogDeliveryStatus', example='enable'),
        logDeliveryUpdateTime?: string(name='LogDeliveryUpdateTime', example='2025-07-16T15:10:29'),
        logName?: string(name='LogName', example='Process Snapshot'),
        logSearchConditions?: string(name='LogSearchConditions', example='[{\\"__topic__\\":\\"sas-net-block\\"}]'),
        logStoreExisted?: boolean(name='LogStoreExisted', example='true'),
        logStoreName?: string(name='LogStoreName', example='sas-security-log'),
        logStoreTtl?: int32(name='LogStoreTtl', example='180'),
      }
    ](name='SasLogStores'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='81FB0DEA-52C1-55A0-8631-8E1B9A9D****'),
}

model GetDataStorageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataStorageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDataStorage  GetDataStorageRequest
  * @return GetDataStorageResponse
 */
async function getDataStorage(request: GetDataStorageRequest): GetDataStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDataStorage', 'POST', '/', 'json', true, 'form', request);
}

model GetDetectionStatisticRequest {
  lang?: string(name='Lang', example='zh', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model GetDetectionStatisticResponseBody = {
  detectionStatistic?: {
    detectionRuleOnlineCount?: int32(name='DetectionRuleOnlineCount', example='10'),
    detectionRuleTemplateCount?: int32(name='DetectionRuleTemplateCount', example='20'),
    detectionRuleTestCount?: int32(name='DetectionRuleTestCount', example='5'),
    graphComputeRuleCount?: int32(name='GraphComputeRuleCount', example='12'),
    passthroughRuleCount?: int32(name='PassthroughRuleCount', example='2'),
    windowRuleCount?: int32(name='WindowRuleCount', example='6'),
  }(name='DetectionStatistic'),
  requestId?: string(name='RequestId', example='6FB890AC-90B2-5EEA-845B-F7C86FB2****'),
}

model GetDetectionStatisticResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDetectionStatisticResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetDetectionStatistic  GetDetectionStatisticRequest
  * @return GetDetectionStatisticResponse
 */
async function getDetectionStatistic(request: GetDetectionStatisticRequest): GetDetectionStatisticResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDetectionStatistic', 'POST', '/', 'json', true, 'form', request);
}

model GetExportTaskRequest {
  exportId?: long(name='ExportId', example='200013', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model GetExportTaskResponseBody = {
  exportStatus?: string(name='ExportStatus', example='success'),
  exportType?: string(name='ExportType', example='incident_list'),
  fileName?: string(name='FileName', example='event_1193842352994186_17344888****.xlsx'),
  gmtCreate?: string(name='GmtCreate', example='1605076118000'),
  id?: long(name='Id', example='400185'),
  link?: string(name='Link', example='https://cloud-siem-user-dataset.oss-cn-shanghai.aliyuncs.com/export_file/17661858******5/event_17661858******5_175748****.xlsx'),
  progress?: int32(name='Progress', example='66'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
}

model GetExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExportTaskResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetExportTask  GetExportTaskRequest
  * @return GetExportTaskResponse
 */
async function getExportTask(request: GetExportTaskRequest): GetExportTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExportTask', 'POST', '/', 'json', true, 'form', request);
}

model GetIncidentRequest {
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model GetIncidentResponseBody = {
  incident?: {
    attckTactics?: any(name='AttckTactics', example='{
	"AttckTactics": [
		{
			"tacticName": "Reconnaissance",
			"alertNum": 0,
			"tacticId": "TA0040"
		}
	]
}'),
    createTime?: long(name='CreateTime', example='1757386075000'),
    detectionRuleId?: string(name='DetectionRuleId', example='dr-fy2zvgiykjifbiim****'),
    incidentAggregationType?: string(name='IncidentAggregationType', example='window'),
    incidentDescription?: string(name='IncidentDescription', example='Forti incident desc'),
    incidentName?: string(name='IncidentName', example='Forti'),
    incidentRemark?: string(name='IncidentRemark', example='Remark'),
    incidentStatus?: int32(name='IncidentStatus', example='0'),
    incidentTags?: string(name='IncidentTags', example='["sys:data_source:waf"]'),
    incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
    relateAlertCount?: int32(name='RelateAlertCount', example='23'),
    relateAssetCount?: int32(name='RelateAssetCount', example='2'),
    relateDataSourceIds?: any(name='RelateDataSourceIds', example='["siem"]'),
    relateUserIds?: any(name='RelateUserIds', example='["176618589410****","1130916744888****"]'),
    threatLevel?: string(name='ThreatLevel', example='2'),
    threatScore?: string(name='ThreatScore', example='90'),
    updateTime?: long(name='UpdateTime', example='1757386075000'),
  }(name='Incident'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
}

model GetIncidentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIncidentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetIncident  GetIncidentRequest
  * @return GetIncidentResponse
 */
async function getIncident(request: GetIncidentRequest): GetIncidentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIncident', 'POST', '/', 'json', true, 'form', request);
}

model GetLogTicketRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  logUserId?: long(name='LogUserId', example='173326*******。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model GetLogTicketResponseBody = {
  logTicket?: string(name='LogTicket', example='*******。'),
  requestId?: string(name='RequestId', example='173326*******。'),
}

model GetLogTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLogTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetLogTicket  GetLogTicketRequest
  * @return GetLogTicketResponse
 */
async function getLogTicket(request: GetLogTicketRequest): GetLogTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetLogTicket', 'POST', '/', 'json', true, 'form', request);
}

model GetNormalizationRuleRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model GetNormalizationRuleResponseBody = {
  normalizationRule?: {
    createTime?: long(name='CreateTime', example='1733269771123。'),
    extendContentPacked?: string(name='ExtendContentPacked'),
    normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
    normalizationRuleDescription?: string(name='NormalizationRuleDescription', example='normalization_rule_Z57np。'),
    normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\"[\\s\\S]+\\" as extend_content。'),
    normalizationRuleFormat?: string(name='NormalizationRuleFormat', example='SPL。'),
    normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
    normalizationRuleIds?: [ string ](name='NormalizationRuleIds'),
    normalizationRuleMode?: string(name='NormalizationRuleMode', example='both。'),
    normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。'),
    normalizationRuleStatus?: string(name='NormalizationRuleStatus', example='started。'),
    normalizationRuleType?: string(name='NormalizationRuleType', example='predefined。'),
    normalizationRuleVersion?: int32(name='NormalizationRuleVersion', example='V1。'),
    normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
    orderField?: string(name='OrderField'),
    productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
    updateTime?: long(name='UpdateTime', example='1733269771123。'),
    vendorId?: string(name='VendorId', example='alibaba_cloud。'),
  }(name='NormalizationRule'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model GetNormalizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNormalizationRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNormalizationRule  GetNormalizationRuleRequest
  * @return GetNormalizationRuleResponse
 */
async function getNormalizationRule(request: GetNormalizationRuleRequest): GetNormalizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNormalizationRule', 'POST', '/', 'json', true, 'form', request);
}

model GetNormalizationRuleVersionRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。', position='Body'),
  normalizationRuleVersion?: int32(name='NormalizationRuleVersion', example='1。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model GetNormalizationRuleVersionResponseBody = {
  normalizationRuleVersion?: {
    createTime?: long(name='CreateTime', example='1733269771123。'),
    normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
    normalizationRuleDescription?: string(name='NormalizationRuleDescription', example='normalization_rule_Z57np。'),
    normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\"[\\s\\S]+\\" as extend_content。'),
    normalizationRuleFormat?: string(name='NormalizationRuleFormat', example='SPL。'),
    normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
    normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。'),
    normalizationRuleStatus?: string(name='NormalizationRuleStatus', example='started。'),
    normalizationRuleType?: string(name='NormalizationRuleType', example='predefined。'),
    normalizationRuleVersion?: int32(name='NormalizationRuleVersion', example='V1。'),
    normalizationRuleVersionName?: string(name='NormalizationRuleVersionName'),
    normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
    productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
    regionId?: string(name='RegionId'),
    updateTime?: long(name='UpdateTime', example='1733269771123。'),
    vendorId?: string(name='VendorId', example='alibaba_cloud。'),
  }(name='NormalizationRuleVersion'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model GetNormalizationRuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNormalizationRuleVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNormalizationRuleVersion  GetNormalizationRuleVersionRequest
  * @return GetNormalizationRuleVersionResponse
 */
async function getNormalizationRuleVersion(request: GetNormalizationRuleVersionRequest): GetNormalizationRuleVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNormalizationRuleVersion', 'POST', '/', 'json', true, 'form', request);
}

model GetNormalizationSchemaRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。', position='Body'),
  normalizationSchemaType?: string(name='NormalizationSchemaType', example='log。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model GetNormalizationSchemaResponseBody = {
  normalizationSchema?: {
    createTime?: long(name='CreateTime'),
    normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
    normalizationFields?: [ 
      {
        normalizationFieldDescription?: string(name='NormalizationFieldDescription', example='cloud_user。'),
        normalizationFieldExample?: string(name='NormalizationFieldExample', example='173326*******。'),
        normalizationFieldName?: string(name='NormalizationFieldName', example='cloud_user。'),
        normalizationFieldRequirement?: boolean(name='NormalizationFieldRequirement', example='true。'),
        normalizationFieldReserved?: boolean(name='NormalizationFieldReserved', example='true。'),
        normalizationFieldType?: string(name='NormalizationFieldType', example='varchar。'),
      }
    ](name='NormalizationFields'),
    normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
    normalizationSchemaName?: string(name='NormalizationSchemaName', example='normalization_rule_Z57np。'),
    normalizationSchemaType?: string(name='NormalizationSchemaType'),
    targetLogStore?: string(name='TargetLogStore', example='network-activity。'),
    targetStoreView?: string(name='TargetStoreView', example='network_activity。'),
    updateTime?: long(name='UpdateTime'),
  }(name='NormalizationSchema'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model GetNormalizationSchemaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNormalizationSchemaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetNormalizationSchema  GetNormalizationSchemaRequest
  * @return GetNormalizationSchemaResponse
 */
async function getNormalizationSchema(request: GetNormalizationSchemaRequest): GetNormalizationSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetNormalizationSchema', 'POST', '/', 'json', true, 'form', request);
}

model GetUserConfigRequest {
  lang?: string(name='Lang', example='en', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: string(name='RoleFor', example='173326*******', position='Body'),
}

model GetUserConfigResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
  user?: {
    ctdrVersion?: string(name='CtdrVersion', example='v2'),
    dataStorageVersion?: string(name='DataStorageVersion', example='pending'),
    upgradeCtdrVersion?: string(name='UpgradeCtdrVersion', example='v2'),
    upgradeStatus?: string(name='UpgradeStatus', example='v2'),
  }(name='User'),
}

model GetUserConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetUserConfig  GetUserConfigRequest
  * @return GetUserConfigResponse
 */
async function getUserConfig(request: GetUserConfigRequest): GetUserConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetUserConfig', 'POST', '/', 'json', true, 'form', request);
}

model ListDataIngestionTemplatesRequest {
  dataIngestionTemplateStatus?: string(name='DataIngestionTemplateStatus', example='running。', position='Body'),
  dataSourceTemplateIds?: string(name='DataSourceTemplateIds', example='alibaba_cloud_sas_account_snapshot_log_173326*******。', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  pageNumber?: string(name='PageNumber', example='1。', position='Body'),
  pageSize?: string(name='PageSize', example='10。', position='Body'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model ListDataIngestionTemplatesResponseBody = {
  dataIngestionTemplates?: [ 
    {
      capacityCount?: string(name='CapacityCount', example='3。'),
      createTime?: long(name='CreateTime', example='1733269771123。'),
      dataIngestionMode?: string(name='DataIngestionMode', example='realtime。'),
      dataIngestionStatus?: string(name='DataIngestionStatus', example='enabled。'),
      dataIngestionTemplateId?: string(name='DataIngestionTemplateId', example='alibaba_cloud_sas_account_snapshot_log。'),
      dataIngestionTemplateName?: string(name='DataIngestionTemplateName', example='alibaba_cloud_sas_account_snapshot_log。'),
      dataIngestionTemplateStatus?: string(name='DataIngestionTemplateStatus', example='running。'),
      dataSourceTemplateId?: string(name='DataSourceTemplateId', example='alibaba_cloud_sas_account_snapshot_log_173326*******。'),
      normalizationRuleId?: string(name='NormalizationRuleId', example='alibaba_cloud_actiontrail_event_rule。'),
      normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_ke1RN。'),
      updateTime?: long(name='UpdateTime', example='173326*******。'),
    }
  ](name='DataIngestionTemplates'),
  pageNumber?: string(name='PageNumber', example='1。'),
  pageSize?: string(name='PageSize', example='10。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model ListDataIngestionTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataIngestionTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataIngestionTemplates  ListDataIngestionTemplatesRequest
  * @return ListDataIngestionTemplatesResponse
 */
async function listDataIngestionTemplates(request: ListDataIngestionTemplatesRequest): ListDataIngestionTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataIngestionTemplates', 'POST', '/', 'json', true, 'form', request);
}

model ListDataIngestionsRequest {
  dataIngestionIds?: [ string ](name='DataIngestionIds', shrink='simple', position='Body'),
  dataIngestionStatus?: string(name='DataIngestionStatus', example='enabled。', position='Body'),
  dataIngestionTemplateIds?: [ string ](name='DataIngestionTemplateIds', shrink='simple', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model ListDataIngestionsResponseBody = {
  dataIngestions?: [ 
    {
      activeTime?: long(name='ActiveTime', example='1733269771123。'),
      capacityCount?: int32(name='CapacityCount', example='3。'),
      createTime?: long(name='CreateTime', example='1733269771123。'),
      dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_sas_netstat_ingestion_173326*******。'),
      dataIngestionMode?: string(name='DataIngestionMode', example='realtime。'),
      dataIngestionModeEditable?: boolean(name='DataIngestionModeEditable', example='true。'),
      dataIngestionState?: string(name='DataIngestionState', example='ingested。'),
      dataIngestionStateCode?: string(name='DataIngestionStateCode', example='UserUnauthorized。'),
      dataIngestionStatus?: string(name='DataIngestionStatus', example='enabled。'),
      dataIngestionTemplateId?: string(name='DataIngestionTemplateId', example='alibaba_cloud_sas_netstat_ingestion。'),
      dataIngestionType?: string(name='DataIngestionType', example='preset。'),
      dataSourceEditable?: boolean(name='DataSourceEditable', example='true。'),
      dataSourceId?: string(name='DataSourceId', example='ds-scpfegri73oyoknbc90c。'),
      normalizationRuleEditable?: boolean(name='NormalizationRuleEditable', example='true。'),
      normalizationRuleId?: string(name='NormalizationRuleId', example='nr-0aywiqdtaqdvwac7xkbjsf3a。'),
      realtimeDataSourceId?: string(name='RealtimeDataSourceId', example='ds-scpfegri73oyoknbc90c。'),
      scanDataSourceId?: string(name='ScanDataSourceId', example='ds-scpfegri73oyoknbc90c。'),
      streamJobId?: string(name='StreamJobId', example='73a78aa245e3b1299d6ceed093de7bd8。'),
      updateTime?: long(name='UpdateTime', example='1733269771123。'),
    }
  ](name='DataIngestions'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model ListDataIngestionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataIngestionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataIngestions  ListDataIngestionsRequest
  * @return ListDataIngestionsResponse
 */
async function listDataIngestions(request: ListDataIngestionsRequest): ListDataIngestionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataIngestions', 'POST', '/', 'json', true, 'form', request);
}

model ListDataSetRecordsRequest {
  dataSetId: string(name='DataSetId', description='This parameter is required.', example='dataset-nhcrmjpx1zsorlaq****', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  maxResults?: int32(name='MaxResults', example='50', position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****', position='Body'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model ListDataSetRecordsResponseBody = {
  dataSetRecords?: [ 
    {
      createTime?: long(name='CreateTime', example='1658974643000'),
      dataSetId?: string(name='DataSetId', example='dataset-t8ha6p7k61rmniqw****'),
      dataSetName?: string(name='DataSetName', example='lmftest'),
      dataSetRecordId?: string(name='DataSetRecordId', example='124566'),
      dataSetRecordValues?: string(name='DataSetRecordValues'),
      updateTime?: long(name='UpdateTime', example='1658974643000'),
    }
  ](name='DataSetRecords'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  totalCount?: int32(name='TotalCount', example='57'),
}

model ListDataSetRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSetRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataSetRecords  ListDataSetRecordsRequest
  * @return ListDataSetRecordsResponse
 */
async function listDataSetRecords(request: ListDataSetRecordsRequest): ListDataSetRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSetRecords', 'POST', '/', 'json', true, 'form', request);
}

model ListDataSetsRequest {
  dataSetId?: string(name='DataSetId', example='dataset-qt0n8246gs9nackg****', position='Body'),
  dataSetIds?: [ string ](name='DataSetIds', shrink='simple', position='Body'),
  dataSetName?: string(name='DataSetName', example='lmftest', position='Body'),
  dataSetStatus?: int32(name='DataSetStatus', example='0', position='Body'),
  dataSetType?: string(name='DataSetType', example='custom', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  maxResults?: int32(name='MaxResults', example='50', position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****', position='Body'),
  orderDirection?: string(name='OrderDirection', example='asc', position='Body'),
  orderFieldName?: string(name='OrderFieldName', example='GmtCreate', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model ListDataSetsResponseBody = {
  dataSets?: [ 
    {
      createTime?: long(name='CreateTime', example='1713787368000'),
      dataSetDescription?: string(name='DataSetDescription', example='lmftest desc'),
      dataSetFieldKeyName?: string(name='DataSetFieldKeyName', example='ip'),
      dataSetFieldNames?: string(name='DataSetFieldNames', example='["ip","region"]'),
      dataSetFileName?: string(name='DataSetFileName', example='cloudsiem-dataset/1358117679873357_174338773****.csv'),
      dataSetId?: string(name='DataSetId', example='dataset-t8ha6p7k61rmniqw****'),
      dataSetName?: string(name='DataSetName', example='lmftest'),
      dataSetReferences?: [ 
        {
          dataSetId?: string(name='DataSetId', example='dataset-nhcrmjpx1zsorlaq****'),
          dataSetReferenceId?: string(name='DataSetReferenceId', example='456232'),
          dataSetReferenceName?: string(name='DataSetReferenceName', example='playbook_name'),
          dataSetReferenceType?: string(name='DataSetReferenceType', example='playbook'),
        }
      ](name='DataSetReferences'),
      dataSetStatus?: int32(name='DataSetStatus', example='1'),
      dataSetType?: string(name='DataSetType', example='preset'),
      ipWhitelistRecognizers?: [ 
        {
          autoRecognizeStatus?: string(name='AutoRecognizeStatus', example='enabled'),
          ipWhitelistRecognizerType?: string(name='IpWhitelistRecognizerType', example='waf_back_source_ip'),
          recognizeScope?: string(name='RecognizeScope', example='current_account'),
          updateTime?: long(name='UpdateTime', example='1713787368000'),
        }
      ](name='IpWhitelistRecognizers'),
      updateTime?: long(name='UpdateTime', example='1713787368000'),
    }
  ](name='DataSets'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='157CFBB5-B56F-566F-8991-B3C51799****'),
  totalCount?: int32(name='TotalCount', example='57'),
}

model ListDataSetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSetsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataSets  ListDataSetsRequest
  * @return ListDataSetsResponse
 */
async function listDataSets(request: ListDataSetsRequest): ListDataSetsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSets', 'POST', '/', 'json', true, 'form', request);
}

model ListDataSourceTemplatesRequest {
  dataSourceTemplateIds?: [ string ](name='DataSourceTemplateIds', shrink='simple', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  pageNumber?: string(name='PageNumber', example='1。', position='Body'),
  pageSize?: string(name='PageSize', example='10。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model ListDataSourceTemplatesResponseBody = {
  dataSourceTemplates?: [ 
    {
      autoScanNew?: string(name='AutoScanNew', example='enabled。'),
      createTime?: long(name='CreateTime', example='1733269771123。'),
      dataSourceFrom?: string(name='DataSourceFrom', example='custom。'),
      dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', example='true。'),
      dataSourceRecognizer?: string(name='DataSourceRecognizer', example='alibaba_cloud_actiontrail_event_ingestion。'),
      dataSourceTemplateId?: string(name='DataSourceTemplateId', example='alibaba_cloud_actiontrail_event_ingestion。'),
      dataSourceTemplateName?: string(name='DataSourceTemplateName', example='alibaba_cloud_actiontrail_event_ingestion。'),
      logProjectPattern?: string(name='LogProjectPattern', example='aliyun-cloudsiem-data-173326*******。'),
      logRegionIds?: [ string ](name='LogRegionIds'),
      logStorePattern?: string(name='LogStorePattern', example='audit-activity。'),
      logUserIds?: [ string ](name='LogUserIds'),
      updateTime?: long(name='UpdateTime', example='2025-01-08 10:28:31'),
    }
  ](name='DataSourceTemplates'),
  pageNumber?: string(name='PageNumber', example='1。'),
  pageSize?: string(name='PageSize', example='10。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model ListDataSourceTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataSourceTemplates  ListDataSourceTemplatesRequest
  * @return ListDataSourceTemplatesResponse
 */
async function listDataSourceTemplates(request: ListDataSourceTemplatesRequest): ListDataSourceTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSourceTemplates', 'POST', '/', 'json', true, 'form', request);
}

model ListDataSourcesRequest {
  dataSourceFrom?: string(name='DataSourceFrom', example='center。', position='Body'),
  dataSourceIds?: [ string ](name='DataSourceIds', shrink='simple', position='Body'),
  dataSourceName?: string(name='DataSourceName', example='alibaba_cloud_waf_alert_log。', position='Body'),
  dataSourceStatus?: string(name='DataSourceStatus', position='Body'),
  dataSourceStoreStatus?: string(name='DataSourceStoreStatus', position='Body'),
  dataSourceTemplateIds?: [ string ](name='DataSourceTemplateIds', shrink='simple', position='Body'),
  dataSourceType?: string(name='DataSourceType', example='custom。', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。', position='Body'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。', position='Body'),
  logStoreName?: string(name='LogStoreName', example='audit-activity。', position='Body'),
  logUserIds?: [ long ](name='LogUserIds', shrink='simple', position='Body'),
  maxResults?: int32(name='MaxResults', example='50。', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。', position='Body'),
  order?: string(name='Order', example='desc。', position='Body'),
  orderField?: string(name='OrderField', example='UpdateTime。', position='Body'),
  pageNumber?: string(name='PageNumber', example='1。', position='Body'),
  pageSize?: string(name='PageSize', example='5。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model ListDataSourcesResponseBody = {
  dataSources?: [ 
    {
      createTime?: long(name='CreateTime', example='1733269771123。'),
      dataSourceFrom?: string(name='DataSourceFrom', example='center。'),
      dataSourceId?: string(name='DataSourceId', example='ds-scpfegri73oyoknbc90c。'),
      dataSourceName?: string(name='DataSourceName', example='AD_LOG。'),
      dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', example='true。'),
      dataSourceRecognizer?: string(name='DataSourceRecognizer', example='alibaba_cloud_sas_account_snapshot。'),
      dataSourceReferences?: [ 
        {
          dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_sas_account_snapshot_log_173326*******。'),
        }
      ](name='DataSourceReferences'),
      dataSourceStatus?: string(name='DataSourceStatus'),
      dataSourceStores?: [ 
        {
          checkTime?: long(name='CheckTime'),
          createTime?: long(name='CreateTime', example='1733269771123。'),
          dataSourceStoreFrom?: string(name='DataSourceStoreFrom', example='center。'),
          dataSourceStoreId?: string(name='DataSourceStoreId', example='di_xxxx_source_1。'),
          dataSourceStoreStatus?: string(name='DataSourceStoreStatus', example='normal。'),
          logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
          logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
          logStoreName?: string(name='LogStoreName', example='audit-activity。'),
          updateTime?: long(name='UpdateTime', example='1733269771123。'),
        }
      ](name='DataSourceStores'),
      dataSourceTemplateId?: string(name='DataSourceTemplateId', example='alibaba_cloud_sas_account_snapshot_log_173326*******。'),
      dataSourceType?: string(name='DataSourceType', example='custom。'),
      logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
      logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
      logStoreName?: string(name='LogStoreName', example='audit-activity。'),
      logUserId?: long(name='LogUserId', example='173326*******。'),
      updateTime?: long(name='UpdateTime', example='1733269771123。'),
    }
  ](name='DataSources'),
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  pageNumber?: int32(name='PageNumber', example='1。'),
  pageSize?: int32(name='PageSize', example='1。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='2。'),
  totalPage?: int32(name='TotalPage', example='1。'),
}

model ListDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDataSources  ListDataSourcesRequest
  * @return ListDataSourcesResponse
 */
async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDataSources', 'POST', '/', 'json', true, 'form', request);
}

model ListDetectionRulesRequest {
  alertAttCk?: string(name='AlertAttCk', example='Discovery', position='Body'),
  alertLevel?: string(name='AlertLevel', example='1', position='Body'),
  alertTacticId?: string(name='AlertTacticId', example='TA0042', position='Body'),
  alertType?: string(name='AlertType', example='siem_rule_type_alert_storm', position='Body'),
  detectionExpressionType?: string(name='DetectionExpressionType', example='playbook', position='Body'),
  detectionRuleId?: string(name='DetectionRuleId', example='dr-ppa85gfw69tgwkys****', position='Body'),
  detectionRuleIds?: [ string ](name='DetectionRuleIds', shrink='simple', position='Body'),
  detectionRuleName?: string(name='DetectionRuleName', example='Detect Discovery Behavior for Local Systems Groups', position='Body'),
  detectionRuleStatus?: string(name='DetectionRuleStatus', example='enabled', position='Body'),
  detectionRuleType?: string(name='DetectionRuleType', example='preset', position='Body'),
  incidentAggregationType?: string(name='IncidentAggregationType', example='graph_compute', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  logCategoryId?: string(name='LogCategoryId', example='NETWORK_CATEGORY', position='Body'),
  logSchemaId?: string(name='LogSchemaId', example='API_RISK_ACTIVITY', position='Body'),
  maxResults?: int32(name='MaxResults', example='50', position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****', position='Body'),
  orderDirection?: string(name='OrderDirection', example='asc', position='Body'),
  orderFieldName?: string(name='OrderFieldName', example='GmtModified', position='Body'),
  pageNumber?: int32(name='PageNumber', example='1', minimum=1, position='Body'),
  pageSize?: int32(name='PageSize', example='100', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model ListDetectionRulesResponseBody = {
  detectionRules?: [ 
    {
      alertAttCk?: string(name='AlertAttCk', example='Discovery'),
      alertLevel?: string(name='AlertLevel', example='1'),
      alertSchemaId?: string(name='AlertSchemaId', example='ALERT_ACTIVITY'),
      alertTacticId?: string(name='AlertTacticId', example='TA0042'),
      alertThresholdCount?: int32(name='AlertThresholdCount', example='10'),
      alertThresholdGroup?: string(name='AlertThresholdGroup', example='alert_type,ip'),
      alertThresholdPeriod?: string(name='AlertThresholdPeriod', example='5m'),
      alertType?: string(name='AlertType', example='WebShell'),
      createTime?: long(name='CreateTime', example='2023-03-21 13:47:01'),
      detectionExpressionContent?: string(name='DetectionExpressionContent', example='*|set session mode=scan;SELECT * FROM log
WHERE schema = \\"PROCESS_START_ACTIVITY\\"
AND (
    proc_path LIKE \\"%/groups\\"
    OR (
        (
            proc_path LIKE \\"%/cat\\"
            OR proc_path LIKE \\"%/head\\"
            OR proc_path LIKE \\"%/tail\\"
            OR proc_path LIKE \\"%/more\\"
        )
        AND cmdline LIKE \\"%/etc/group%\\"
    )
)'),
      detectionExpressionType?: string(name='DetectionExpressionType', example='playbook'),
      detectionRuleDescription?: string(name='DetectionRuleDescription', example='Check the enumeration behavior of local system groups. An attacker may attempt to find the Local Systems group and its permission settings.'),
      detectionRuleId?: string(name='DetectionRuleId', example='jndi-attack-success_http_netstat'),
      detectionRuleName?: string(name='DetectionRuleName', example='Detect Discovery Behavior for Local Systems Groups'),
      detectionRuleStatus?: string(name='DetectionRuleStatus', example='enabled'),
      detectionRuleType?: string(name='DetectionRuleType', example='custom'),
      entityMappings?: [ 
        {
          normalizationFieldMappings?: [ 
            {
              mappingFieldName?: string(name='MappingFieldName', example='ip'),
              normalizationFieldName?: string(name='NormalizationFieldName', example='src_ip'),
              normalizationFieldType?: string(name='NormalizationFieldType', example='vachar'),
            }
          ](name='NormalizationFieldMappings'),
          normalizationSchemaId?: string(name='NormalizationSchemaId', example='ip'),
        }
      ](name='EntityMappings'),
      incidentAggregationExpression?: string(name='IncidentAggregationExpression', example='5m'),
      incidentAggregationType?: string(name='IncidentAggregationType', example='passthrough'),
      logCategoryId?: string(name='LogCategoryId', example='NETWORK_CATEGORY'),
      logSchemaId?: string(name='LogSchemaId', example='API_RISK_ACTIVITY'),
      playbook?: {
        config?: string(name='Config', example='[
    {
        "name": "expireDay",
        "dataType": "Integer",
        "required": true,
        "isArray": false,
        "example": "7",
        "description": "desc",
        "typeName": "Integer",
        "dataClass": "normal",
        "stanchDefaultValue": "7"
    }
]'),
        flow?: string(name='Flow', example='[
    {
        "id": "EndEvent_1fqpq4h",
        "zIndex": 1,
        "data": {
            "nodeType": "endEvent",
            "appType": "basic",
            "valueData": {

            },
            "icon": "icon-radio-off-full"
        },
        "position": {
            "x": 1369,
            "y": 174
        }
    }
]'),
      }(name='Playbook'),
      playbookParameters?: string(name='PlaybookParameters', example='{
    "ip": {
        "ip": "124.23.*.*"
    }
}'),
      playbookUuid?: string(name='PlaybookUuid', example='dde983ed-eb56-45ea-ac2e-3b12b2a9****'),
      scheduleBeginTime?: long(name='ScheduleBeginTime', example='1733269771123'),
      scheduleExpression?: string(name='ScheduleExpression', example='5m'),
      scheduleMaxRetries?: int32(name='ScheduleMaxRetries', example='1'),
      scheduleMaxTimeout?: int32(name='ScheduleMaxTimeout', example='60'),
      scheduleType?: string(name='ScheduleType', example='fixed_rate'),
      scheduleWindow?: string(name='ScheduleWindow', example='5m'),
      updateTime?: long(name='UpdateTime', example='2023-04-16 10:51:00'),
    }
  ](name='DetectionRules'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  pageNumber?: int32(name='PageNumber', example='2'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='508DCFFD-4508-54BF-A8A0-E97A0FA6****'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model ListDetectionRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDetectionRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDetectionRules  ListDetectionRulesRequest
  * @return ListDetectionRulesResponse
 */
async function listDetectionRules(request: ListDetectionRulesRequest): ListDetectionRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDetectionRules', 'POST', '/', 'json', true, 'form', request);
}

model ListIncidentsRequest {
  alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****', position='Body'),
  endTime?: long(name='EndTime', example='1749090526055', position='Body'),
  incidentName?: string(name='IncidentName', example='ECS unusual log in', position='Query'),
  incidentStatus?: int32(name='IncidentStatus', example='0', position='Body'),
  incidentTags?: string(name='IncidentTags', example='[{\\"data_source\\":[\\"sas\\"]}]', position='Body'),
  incidentUuids?: [ string ](name='IncidentUuids', shrink='simple', position='Query'),
  lang?: string(name='Lang', example='zh', position='Body'),
  maxResults?: int32(name='MaxResults', example='10', position='Body'),
  nextToken?: string(name='NextToken', example='AAAAASLVeIxed4466E0LVmGkzwS6hJKd9DGVGMDRM6Lu****', position='Body'),
  orderDirection?: string(name='OrderDirection', example='desc', position='Body'),
  orderFieldName?: string(name='OrderFieldName', example='GmtModified', position='Body'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', minimum=1, maximum=100, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  relateAssetId?: string(name='RelateAssetId', example='6c740667-80b2-476d-8924-2e706feb****', position='Body'),
  relateEntityId?: string(name='RelateEntityId', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
  roleType?: int32(name='RoleType', example='1', position='Body'),
  startTime?: long(name='StartTime', example='1690102943000', position='Body'),
  threatLevel?: [ string ](name='ThreatLevel', position='Body'),
}

model ListIncidentsResponseBody = {
  incidents?: [ 
    {
      createTime?: long(name='CreateTime', example='1603248483000'),
      incidentName?: string(name='IncidentName', example='ECS unusual log in'),
      incidentRemark?: string(name='IncidentRemark', example='remark'),
      incidentStatus?: int32(name='IncidentStatus', example='0'),
      incidentUuid?: string(name='IncidentUuid', example='dbb1d7211c9285c862aa89385098****'),
      relateAlertCount?: int32(name='RelateAlertCount', example='3'),
      relateAssetCount?: int32(name='RelateAssetCount', example='4'),
      threatLevel?: string(name='ThreatLevel', example='2'),
      updateTime?: long(name='UpdateTime', example='1603248483000'),
    }
  ](name='Incidents'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
  totalCount?: int32(name='TotalCount', example='57'),
}

model ListIncidentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIncidentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListIncidents  ListIncidentsRequest
  * @return ListIncidentsResponse
 */
async function listIncidents(request: ListIncidentsRequest): ListIncidentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListIncidents', 'POST', '/', 'json', true, 'form', request);
}

model ListLogProjectsRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。', position='Body'),
  logUserId?: long(name='LogUserId', example='173326*******。', position='Body'),
  maxResults?: int32(name='MaxResults', example='50。', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model ListLogProjectsResponseBody = {
  logProjects?: [ string ](name='LogProjects'),
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
}

model ListLogProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLogProjectsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLogProjects  ListLogProjectsRequest
  * @return ListLogProjectsResponse
 */
async function listLogProjects(request: ListLogProjectsRequest): ListLogProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLogProjects', 'POST', '/', 'json', true, 'form', request);
}

model ListLogRegionsRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model ListLogRegionsResponseBody = {
  logRegions?: [ string ](name='LogRegions'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model ListLogRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLogRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLogRegions  ListLogRegionsRequest
  * @return ListLogRegionsResponse
 */
async function listLogRegions(request: ListLogRegionsRequest): ListLogRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLogRegions', 'POST', '/', 'json', true, 'form', request);
}

model ListLogStoresRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。', position='Body'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。', position='Body'),
  logUserId?: long(name='LogUserId', example='173326*******。', position='Body'),
  maxResults?: int32(name='MaxResults', example='50。', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model ListLogStoresResponseBody = {
  logStores?: [ string ](name='LogStores'),
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
}

model ListLogStoresResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLogStoresResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListLogStores  ListLogStoresRequest
  * @return ListLogStoresResponse
 */
async function listLogStores(request: ListLogStoresRequest): ListLogStoresResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListLogStores', 'POST', '/', 'json', true, 'form', request);
}

model ListNormalizationCategoriesRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  maxResults?: int32(name='MaxResults', example='50。', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。', position='Body'),
  normalizationCategoryType?: string(name='NormalizationCategoryType', example='entity。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model ListNormalizationCategoriesResponseBody = {
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationCategories?: [ 
    {
      normalizationCategoryId?: string(name='NormalizationCategoryId', example='COMMON_CATEGORY。'),
      normalizationCategoryName?: string(name='NormalizationCategoryName', example='COMMON_CATEGORY。'),
    }
  ](name='NormalizationCategories'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
}

model ListNormalizationCategoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNormalizationCategoriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNormalizationCategories  ListNormalizationCategoriesRequest
  * @return ListNormalizationCategoriesResponse
 */
async function listNormalizationCategories(request: ListNormalizationCategoriesRequest): ListNormalizationCategoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNormalizationCategories', 'POST', '/', 'json', true, 'form', request);
}

model ListNormalizationFieldsRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  maxResults?: int32(name='MaxResults', example='50。', minimum=0, position='Body'),
  name?: string(name='Name', example='category。', position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model ListNormalizationFieldsResponseBody = {
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationFields?: [ 
    {
      normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
      normalizationFieldDescription?: string(name='NormalizationFieldDescription', example='cloud_user。'),
      normalizationFieldExample?: string(name='NormalizationFieldExample', example='173326*******。'),
      normalizationFieldName?: string(name='NormalizationFieldName', example='cloud_user。'),
      normalizationFieldRequirement?: boolean(name='NormalizationFieldRequirement', example='true。'),
      normalizationFieldReserved?: boolean(name='NormalizationFieldReserved', example='true。'),
      normalizationFieldType?: string(name='NormalizationFieldType', example='varchar。'),
      normalizationSchemaId?: string(name='NormalizationSchemaId', example='NETWORK_SESSION_ACTIVITY。'),
    }
  ](name='NormalizationFields'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
}

model ListNormalizationFieldsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNormalizationFieldsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNormalizationFields  ListNormalizationFieldsRequest
  * @return ListNormalizationFieldsResponse
 */
async function listNormalizationFields(request: ListNormalizationFieldsRequest): ListNormalizationFieldsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNormalizationFields', 'POST', '/', 'json', true, 'form', request);
}

model ListNormalizationRuleCapacitiesRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  maxResults?: int32(name='MaxResults', example='50。', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。', position='Body'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。', position='Body'),
  normalizationRuleIds?: [ string ](name='NormalizationRuleIds', shrink='simple', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model ListNormalizationRuleCapacitiesResponseBody = {
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationRuleCapacities?: [ 
    {
      capacities?: [ string ](name='Capacities'),
      capacityType?: string(name='CapacityType', example='detection_preset_rule。'),
      normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
    }
  ](name='NormalizationRuleCapacities'),
  pageNumber?: int32(name='PageNumber', example='1。'),
  pageSize?: int32(name='PageSize', example='10。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
  totalPage?: int32(name='TotalPage', example='3。'),
}

model ListNormalizationRuleCapacitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNormalizationRuleCapacitiesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNormalizationRuleCapacities  ListNormalizationRuleCapacitiesRequest
  * @return ListNormalizationRuleCapacitiesResponse
 */
async function listNormalizationRuleCapacities(request: ListNormalizationRuleCapacitiesRequest): ListNormalizationRuleCapacitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNormalizationRuleCapacities', 'POST', '/', 'json', true, 'form', request);
}

model ListNormalizationRuleVersionsRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  maxResults?: int32(name='MaxResults', example='50。', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。', position='Body'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model ListNormalizationRuleVersionsResponseBody = {
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationRuleVersions?: [ 
    {
      createTime?: long(name='CreateTime', example='1733269771123。'),
      normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\"[\\s\\S]+\\" as extend_content。'),
      normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
      normalizationRuleVersion?: int32(name='NormalizationRuleVersion', example='V1。'),
      updateTime?: long(name='UpdateTime', example='1733269771123。'),
    }
  ](name='NormalizationRuleVersions'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
}

model ListNormalizationRuleVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNormalizationRuleVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNormalizationRuleVersions  ListNormalizationRuleVersionsRequest
  * @return ListNormalizationRuleVersionsResponse
 */
async function listNormalizationRuleVersions(request: ListNormalizationRuleVersionsRequest): ListNormalizationRuleVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNormalizationRuleVersions', 'POST', '/', 'json', true, 'form', request);
}

model ListNormalizationRulesRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  maxResults?: int32(name='MaxResults', example='50。', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。', position='Body'),
  normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。', position='Body'),
  normalizationRuleIds?: [ string ](name='NormalizationRuleIds', shrink='simple', position='Body'),
  normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。', position='Body'),
  normalizationRuleType?: string(name='NormalizationRuleType', example='predefined。', position='Body'),
  normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。', position='Body'),
  orderField?: string(name='OrderField', example='UpdateTime。', position='Body'),
  orderType?: string(name='OrderType', example='desc。', position='Body'),
  pageNumber?: int32(name='PageNumber', example='3。', position='Body'),
  pageSize?: int32(name='PageSize', example='10。', position='Body'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
  vendorId?: string(name='VendorId', example='alibaba_cloud。', position='Body'),
}

model ListNormalizationRulesResponseBody = {
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationRules?: [ 
    {
      createTime?: long(name='CreateTime', example='1733269771123。'),
      extendContentPacked?: string(name='ExtendContentPacked'),
      normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
      normalizationRuleDescription?: string(name='NormalizationRuleDescription', example='normalization_rule_Z57np。'),
      normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\"[\\s\\S]+\\" as extend_content。'),
      normalizationRuleFormat?: string(name='NormalizationRuleFormat', example='SPL。'),
      normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
      normalizationRuleMode?: string(name='NormalizationRuleMode', example='both。'),
      normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。'),
      normalizationRuleReferences?: [ 
        {
          dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_bot_flow_ingestion_173326*******。'),
        }
      ](name='NormalizationRuleReferences'),
      normalizationRuleStatus?: string(name='NormalizationRuleStatus', example='started。'),
      normalizationRuleType?: string(name='NormalizationRuleType', example='predefined。'),
      normalizationRuleVersion?: string(name='NormalizationRuleVersion', example='V1。'),
      normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
      productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
      updateTime?: long(name='UpdateTime', example='1733269771123。'),
      vendorId?: string(name='VendorId', example='alibaba_cloud。'),
    }
  ](name='NormalizationRules'),
  pageNumber?: int32(name='PageNumber', example='1。'),
  pageSize?: int32(name='PageSize', example='2。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='5。'),
  totalPage?: int32(name='TotalPage', example='1。'),
}

model ListNormalizationRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNormalizationRulesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNormalizationRules  ListNormalizationRulesRequest
  * @return ListNormalizationRulesResponse
 */
async function listNormalizationRules(request: ListNormalizationRulesRequest): ListNormalizationRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNormalizationRules', 'POST', '/', 'json', true, 'form', request);
}

model ListNormalizationSchemasRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  maxResults?: int32(name='MaxResults', example='50。', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。', position='Body'),
  normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。', position='Body'),
  normalizationSchemaType?: string(name='NormalizationSchemaType', example='entity。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model ListNormalizationSchemasResponseBody = {
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationSchemas?: [ 
    {
      normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
      normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
      normalizationSchemaName?: string(name='NormalizationSchemaName', example='normalization_rule_Z57np。'),
      normalizationSchemaTargetLogStore?: string(name='NormalizationSchemaTargetLogStore', example='network-activity。'),
    }
  ](name='NormalizationSchemas'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
}

model ListNormalizationSchemasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNormalizationSchemasResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListNormalizationSchemas  ListNormalizationSchemasRequest
  * @return ListNormalizationSchemasResponse
 */
async function listNormalizationSchemas(request: ListNormalizationSchemasRequest): ListNormalizationSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListNormalizationSchemas', 'POST', '/', 'json', true, 'form', request);
}

model ListProductsRequest {
  lang?: string(name='Lang', example='zh', position='Body'),
  maxResults?: int32(name='MaxResults', example='50', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****', position='Body'),
  productIds?: [ string ](name='ProductIds', shrink='simple', position='Body'),
  productName?: string(name='ProductName', example='sas', position='Body'),
  productType?: string(name='ProductType', example='preset', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******', position='Body'),
  vendorId?: string(name='VendorId', example='vd-qlsw5eocx94w9', position='Body'),
}

model ListProductsResponseBody = {
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  products?: [ 
    {
      abnormalDataIngestionCount?: int32(name='AbnormalDataIngestionCount', example='2'),
      activeTime?: long(name='ActiveTime', example='1733269771123'),
      allowAddDataIngestion?: boolean(name='AllowAddDataIngestion', example='true'),
      createTime?: long(name='CreateTime', example='1733269771123'),
      dataIngestionStatus?: boolean(name='DataIngestionStatus', example='enabled'),
      enabledDataIngestionCount?: int32(name='EnabledDataIngestionCount', example='1'),
      productAlias?: string(name='ProductAlias', example='alibaba_cloud_sas'),
      productId?: string(name='ProductId', example='alibaba_cloud_sas'),
      productName?: string(name='ProductName', example='sas'),
      productType?: string(name='ProductType', example='preset'),
      totalDataIngestionCount?: int32(name='TotalDataIngestionCount', example='10'),
      updateTime?: long(name='UpdateTime', example='1733269771123'),
      vendorId?: string(name='VendorId', example='vd-qlsw5eocx94w9'),
      vendorName?: string(name='VendorName', example='111'),
    }
  ](name='Products'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
  totalCount?: int32(name='TotalCount', example='57'),
}

model ListProductsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProducts  ListProductsRequest
  * @return ListProductsResponse
 */
async function listProducts(request: ListProductsRequest): ListProductsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProducts', 'POST', '/', 'json', true, 'form', request);
}

model ListTrafficStatisticsRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  logUserIds?: [ long ](name='LogUserIds', shrink='simple', position='Body'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  regionTag?: int32(name='RegionTag', example='1。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
  trafficStatisticPeriod?: string(name='TrafficStatisticPeriod', example='30。', position='Body'),
  trafficStatisticPeriodType?: string(name='TrafficStatisticPeriodType', example='day。', position='Body'),
  trafficStatisticType?: string(name='TrafficStatisticType', example='Region。', position='Body'),
}

model ListTrafficStatisticsResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  trafficStatistics?: [ 
    {
      trafficStatisticData?: [ 
        {
          trafficStatisticTime?: long(name='TrafficStatisticTime', example='20250815。'),
          trafficStatisticValue?: double(name='TrafficStatisticValue', example='1.699814。'),
        }
      ](name='TrafficStatisticData'),
      trafficStatisticTarget?: string(name='TrafficStatisticTarget', example='all。'),
    }
  ](name='TrafficStatistics'),
}

model ListTrafficStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTrafficStatisticsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTrafficStatistics  ListTrafficStatisticsRequest
  * @return ListTrafficStatisticsResponse
 */
async function listTrafficStatistics(request: ListTrafficStatisticsRequest): ListTrafficStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrafficStatistics', 'POST', '/', 'json', true, 'form', request);
}

model ListUpgradeItemsRequest {
  lang?: string(name='Lang', example='zh', position='Body'),
  maxResults?: int32(name='MaxResults', example='50', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: string(name='RoleFor', example='113091674488****', position='Body'),
}

model ListUpgradeItemsResponseBody = {
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
  totalCount?: int32(name='TotalCount', example='57'),
  upgradeItems?: [ 
    {
      upgradeItemId?: string(name='UpgradeItemId', example='data_storage_2_upgrade'),
    }
  ](name='UpgradeItems'),
}

model ListUpgradeItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUpgradeItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUpgradeItems  ListUpgradeItemsRequest
  * @return ListUpgradeItemsResponse
 */
async function listUpgradeItems(request: ListUpgradeItemsRequest): ListUpgradeItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUpgradeItems', 'POST', '/', 'json', true, 'form', request);
}

model ListVendorsRequest {
  lang?: string(name='Lang', example='en。', position='Body'),
  maxResults?: int32(name='MaxResults', example='50。', minimum=0, position='Body'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
  vendorIds?: [ string ](name='VendorIds', shrink='simple', position='Body'),
  vendorName?: string(name='VendorName', example='111。', position='Body'),
  vendorType?: string(name='VendorType', example='preset。', position='Body'),
}

model ListVendorsResponseBody = {
  maxResults?: int32(name='MaxResults', example='50。', minimum=0),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
  vendors?: [ 
    {
      createTime?: long(name='CreateTime', example='1733269771123。'),
      updateTime?: long(name='UpdateTime', example='1733269771123。'),
      vendorId?: string(name='VendorId', example='vd-qlsw5eocx94w9。'),
      vendorName?: string(name='VendorName', example='111。'),
      vendorType?: string(name='VendorType', example='preset。'),
    }
  ](name='Vendors'),
}

model ListVendorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVendorsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListVendors  ListVendorsRequest
  * @return ListVendorsResponse
 */
async function listVendors(request: ListVendorsRequest): ListVendorsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListVendors', 'POST', '/', 'json', true, 'form', request);
}

model ResetDataStorageRequest {
  lang?: string(name='Lang', example='zh', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model ResetDataStorageResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ResetDataStorageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetDataStorageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResetDataStorage  ResetDataStorageRequest
  * @return ResetDataStorageResponse
 */
async function resetDataStorage(request: ResetDataStorageRequest): ResetDataStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResetDataStorage', 'POST', '/', 'json', true, 'form', request);
}

model SetDefaultNormalizationRuleVersionRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。', position='Body'),
  normalizationRuleVersion?: int32(name='NormalizationRuleVersion', example='V1。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model SetDefaultNormalizationRuleVersionResponseBody = {
  normalizationRuleVersion?: {
    createTime?: long(name='CreateTime', example='1733269771123。'),
    normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
    normalizationRuleDescription?: string(name='NormalizationRuleDescription', example='normalization_rule_Z57np。'),
    normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\"[\\s\\S]+\\" as extend_content。'),
    normalizationRuleFormat?: string(name='NormalizationRuleFormat', example='SPL。'),
    normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
    normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。'),
    normalizationRuleStatus?: string(name='NormalizationRuleStatus', example='started。'),
    normalizationRuleType?: string(name='NormalizationRuleType', example='predefined。'),
    normalizationRuleVersion?: int32(name='NormalizationRuleVersion', example='V1。'),
    normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
    productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
    updateTime?: long(name='UpdateTime', example='1733269771123。'),
    vendorId?: string(name='VendorId', example='alibaba_cloud。'),
  }(name='NormalizationRuleVersion'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model SetDefaultNormalizationRuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDefaultNormalizationRuleVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetDefaultNormalizationRuleVersion  SetDefaultNormalizationRuleVersionRequest
  * @return SetDefaultNormalizationRuleVersionResponse
 */
async function setDefaultNormalizationRuleVersion(request: SetDefaultNormalizationRuleVersionRequest): SetDefaultNormalizationRuleVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetDefaultNormalizationRuleVersion', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataBatchIngestionRequest {
  autoScanNew?: string(name='AutoScanNew', example='enabled。', position='Body'),
  dataBatchIngestionMode?: string(name='DataBatchIngestionMode', example='full。', position='Body'),
  dataIngestionIds?: [ string ](name='DataIngestionIds', shrink='simple', position='Body'),
  dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', example='true。', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  logUserIds?: [ long ](name='LogUserIds', shrink='simple', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model UpdateDataBatchIngestionResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateDataBatchIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataBatchIngestionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataBatchIngestion  UpdateDataBatchIngestionRequest
  * @return UpdateDataBatchIngestionResponse
 */
async function updateDataBatchIngestion(request: UpdateDataBatchIngestionRequest): UpdateDataBatchIngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataBatchIngestion', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataIngestionRequest {
  dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_actiontrail_event_ingestion_173326*******。', position='Body'),
  dataIngestionMode?: string(name='DataIngestionMode', example='realtime。', position='Body'),
  dataSourceId?: string(name='DataSourceId', example='alibaba_cloud_actiontrail_event_log_173326*******。', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='alibaba_cloud_actiontrail_event_rule。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model UpdateDataIngestionResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateDataIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataIngestionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataIngestion  UpdateDataIngestionRequest
  * @return UpdateDataIngestionResponse
 */
async function updateDataIngestion(request: UpdateDataIngestionRequest): UpdateDataIngestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataIngestion', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataIngestionTemplateRequest {
  dataIngestionStatus?: string(name='DataIngestionStatus', example='enabled。', position='Body'),
  dataIngestionTemplateId?: string(name='DataIngestionTemplateId', example='alibaba_cloud_actiontrail_event_ingestion_173326*******。', position='Body'),
  dataIngestionTemplateName?: string(name='DataIngestionTemplateName', example='alibaba_cloud_actiontrail_event_ingestion_173326*******。', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='alibaba_cloud_actiontrail_event_rule。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model UpdateDataIngestionTemplateResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateDataIngestionTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataIngestionTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataIngestionTemplate  UpdateDataIngestionTemplateRequest
  * @return UpdateDataIngestionTemplateResponse
 */
async function updateDataIngestionTemplate(request: UpdateDataIngestionTemplateRequest): UpdateDataIngestionTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataIngestionTemplate', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataSetRequest {
  dataSetDescription?: string(name='DataSetDescription', example='lmftest desc', maxLength=1000, position='Body'),
  dataSetFileName?: string(name='DataSetFileName', position='Body'),
  dataSetId: string(name='DataSetId', description='This parameter is required.', example='dataset-10iy8mbifnb4gniv****', position='Body'),
  dataSetName?: string(name='DataSetName', position='Body'),
  dataSetStatus?: int32(name='DataSetStatus', position='Body'),
  ipWhitelistRecognizers?: [ 
    {
      autoRecognizeStatus?: string(name='AutoRecognizeStatus', example='enabled'),
      ipWhitelistRecognizerType?: string(name='IpWhitelistRecognizerType', example='cdn_back_source_ip'),
      recognizeScope?: string(name='RecognizeScope', example='current_account'),
    }
  ](name='IpWhitelistRecognizers', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model UpdateDataSetResponseBody = {
  requestId?: string(name='RequestId', example='DE7E77A9-BFAD-5EAA-9B48-A96760E9DF0B'),
}

model UpdateDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataSet  UpdateDataSetRequest
  * @return UpdateDataSetResponse
 */
async function updateDataSet(request: UpdateDataSetRequest): UpdateDataSetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataSet', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataSetRecordRequest {
  dataSetFileName?: string(name='DataSetFileName', example='cloudsiem-dataset/1358117679873357_174338773****.csv', position='Body'),
  dataSetId: string(name='DataSetId', description='This parameter is required.', example='dataset-10iy8mbifnb4gniv****', position='Body'),
  dataSetRecords?: string(name='DataSetRecords', example='[{\\"ip\\":\\"1.1.1.1\\",\\"userid\\":\\"1234\\",\\"name\\":\\"a12401\\"},
 {\\"ip\\":\\"2.2.2.2\\",\\"userid\\":\\"33333\\",\\"name\\":\\"a12401\\"}]', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model UpdateDataSetRecordResponseBody = {
  dataSetRecordStatistic?: {
    newDataSetRecordCount?: int32(name='NewDataSetRecordCount', example='12'),
    updateDataSetRecordCount?: int32(name='UpdateDataSetRecordCount', example='4'),
  }(name='DataSetRecordStatistic'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
}

model UpdateDataSetRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSetRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataSetRecord  UpdateDataSetRecordRequest
  * @return UpdateDataSetRecordResponse
 */
async function updateDataSetRecord(request: UpdateDataSetRecordRequest): UpdateDataSetRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataSetRecord', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataSourceRequest {
  dataSourceFrom?: string(name='DataSourceFrom', position='Body'),
  dataSourceId?: string(name='DataSourceId', example='ds-014frtpy28m5ct2eoyo1。', position='Body'),
  dataSourceName?: string(name='DataSourceName', example='ActiontrailLog。', position='Body'),
  dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', example='true', position='Body'),
  dataSourceStores?: [ 
    {
      dataSourceStoreFrom?: string(name='DataSourceStoreFrom'),
      dataSourceStoreId?: string(name='DataSourceStoreId'),
      logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
      logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
      logStoreName?: string(name='LogStoreName', example='cn-rds-sqlaudit。'),
    }
  ](name='DataSourceStores', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。', position='Body'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。', position='Body'),
  logStoreName?: string(name='LogStoreName', example='cn-rds-sqlaudit。', position='Body'),
  logUserId?: long(name='LogUserId', example='173326*******。', position='Body'),
  orderField?: string(name='OrderField', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model UpdateDataSourceResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataSource  UpdateDataSourceRequest
  * @return UpdateDataSourceResponse
 */
async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataSource', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataSourceTemplateRequest {
  autoScanNew?: string(name='AutoScanNew', example='enabled。', position='Body'),
  dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', example='true。', position='Query'),
  dataSourceTemplateId?: string(name='DataSourceTemplateId', example='alibaba_cloud_actiontrail_event_ingestion。', position='Body'),
  dataSourceTemplateName?: string(name='DataSourceTemplateName', example='alibaba_cloud_actiontrail_event_ingestion。', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  logProjectPattern?: string(name='LogProjectPattern', example='aliyun-cloudsiem-data-173326*******。', position='Body'),
  logRegionIds?: string(name='LogRegionIds', example='cn-hangzhou。', position='Body'),
  logStorePattern?: string(name='LogStorePattern', example='audit-activity。', position='Body'),
  logUserIds?: [ string ](name='LogUserIds', shrink='simple', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model UpdateDataSourceTemplateResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateDataSourceTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataSourceTemplate  UpdateDataSourceTemplateRequest
  * @return UpdateDataSourceTemplateResponse
 */
async function updateDataSourceTemplate(request: UpdateDataSourceTemplateRequest): UpdateDataSourceTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataSourceTemplate', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataStorageRequest {
  dataStorageRegionId: string(name='DataStorageRegionId', description='This parameter is required.', example='cn-shanghai', position='Body'),
  deliveryStatus?: string(name='DeliveryStatus', example='enable', maxLength=1000, position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model UpdateDataStorageResponseBody = {
  requestId?: string(name='RequestId', example='EA7FC160-8D86-5ABE-A08A-7962FDC1****'),
}

model UpdateDataStorageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataStorageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataStorage  UpdateDataStorageRequest
  * @return UpdateDataStorageResponse
 */
async function updateDataStorage(request: UpdateDataStorageRequest): UpdateDataStorageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataStorage', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataStorageDeliveryRequest {
  lang?: string(name='Lang', example='zh', position='Body'),
  logCode: string(name='LogCode', description='This parameter is required.', example='aegis-log-login', position='Body'),
  logDeliveryStatus?: string(name='LogDeliveryStatus', example='enable', maxLength=1000, position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model UpdateDataStorageDeliveryResponseBody = {
  requestId?: string(name='RequestId', example='6D7FBF4A-5B95-5760-8B5A-BF8983D4****'),
}

model UpdateDataStorageDeliveryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataStorageDeliveryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataStorageDelivery  UpdateDataStorageDeliveryRequest
  * @return UpdateDataStorageDeliveryResponse
 */
async function updateDataStorageDelivery(request: UpdateDataStorageDeliveryRequest): UpdateDataStorageDeliveryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataStorageDelivery', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDataStorageTtlRequest {
  lang?: string(name='Lang', example='zh', position='Body'),
  logStoreColdTtl?: string(name='LogStoreColdTtl', example='0', position='Body'),
  logStoreHotTtl?: string(name='LogStoreHotTtl', example='180', position='Body'),
  logStoreName?: string(name='LogStoreName', example='network-activity', maxLength=1000, position='Body'),
  logStoreTtl?: string(name='LogStoreTtl', example='180', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  roleFor?: long(name='RoleFor', example='113091674488****', position='Body'),
}

model UpdateDataStorageTtlResponseBody = {
  requestId?: string(name='RequestId', example='D92E4FCF-4584-5E50-9C02-26B79A9C****'),
}

model UpdateDataStorageTtlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataStorageTtlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDataStorageTtl  UpdateDataStorageTtlRequest
  * @return UpdateDataStorageTtlResponse
 */
async function updateDataStorageTtl(request: UpdateDataStorageTtlRequest): UpdateDataStorageTtlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDataStorageTtl', 'POST', '/', 'json', true, 'form', request);
}

model UpdateDetectionRuleRequest {
  alertAttCk?: string(name='AlertAttCk', example='Discovery', position='Body'),
  alertLevel?: string(name='AlertLevel', example='1', position='Body'),
  alertSchemaId?: string(name='AlertSchemaId', example='ALERT_ACTIVITY', position='Body'),
  alertTacticId?: string(name='AlertTacticId', example='TA0042', position='Body'),
  alertThresholdCount?: int32(name='AlertThresholdCount', example='10', position='Body'),
  alertThresholdGroup?: string(name='AlertThresholdGroup', example='alert_type,ip', position='Body'),
  alertThresholdPeriod?: string(name='AlertThresholdPeriod', example='5m', position='Body'),
  alertType?: string(name='AlertType', example='siem_rule_type_alert_storm', position='Body'),
  detectionExpressionContent?: string(name='DetectionExpressionContent', example='*|set session mode=scan;SELECT * FROM log
WHERE schema = \\"PROCESS_START_ACTIVITY\\"
AND (
    proc_path LIKE \\"%/groups\\"
    OR (
        (
            proc_path LIKE \\"%/cat\\"
            OR proc_path LIKE \\"%/head\\"
            OR proc_path LIKE \\"%/tail\\"
            OR proc_path LIKE \\"%/more\\"
        )
        AND cmdline LIKE \\"%/etc/group%\\"
    )
)', position='Body'),
  detectionExpressionType?: string(name='DetectionExpressionType', example='sql', position='Body'),
  detectionRuleDescription?: string(name='DetectionRuleDescription', example='Check the enumeration behavior of local system groups. An attacker may attempt to find the Local Systems group and its permission settings.', maxLength=2000, position='Body'),
  detectionRuleId: string(name='DetectionRuleId', description='This parameter is required.', example='jndi-attack-success_http_dns', position='Body'),
  detectionRuleName?: string(name='DetectionRuleName', example='CTDR Port Scan Behavior', maxLength=100, position='Body'),
  detectionRuleStatus?: string(name='DetectionRuleStatus', example='enabled', position='Body'),
  detectionRuleType: string(name='DetectionRuleType', description='This parameter is required.', example='custom', position='Body'),
  entityMappings?: string(name='EntityMappings', example='[{\\"NormalizationSchemaId\\":\\"host\\",\\"NormalizationFieldMappings\\":[{\\"NormalizationFieldName\\":\\"uuid\\",\\"MappingFieldName\\":\\"host\\",\\"NormalizationFieldType\\":\\"varchar\\"}]}]', position='Body'),
  incidentAggregationExpression?: string(name='IncidentAggregationExpression', example='60m', position='Body'),
  incidentAggregationType?: string(name='IncidentAggregationType', example='window', position='Body'),
  lang?: string(name='Lang', example='zh', position='Body'),
  logCategoryId?: string(name='LogCategoryId', example='NETWORK_CATEGORY', position='Body'),
  logSchemaId?: string(name='LogSchemaId', example='API_RISK_ACTIVITY', position='Body'),
  playbookParameters?: string(name='PlaybookParameters', example='{
    "ip": {
        "ip": "124.23.*.*"
    }
}', position='Body'),
  playbookUuid?: string(name='PlaybookUuid', example='31568394-7a86-487c-b8ec-b3f42b59****', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Body'),
  scheduleBeginTime?: long(name='ScheduleBeginTime', example='1733269771123', position='Body'),
  scheduleExpression?: string(name='ScheduleExpression', example='1h', position='Body'),
  scheduleMaxRetries?: int32(name='ScheduleMaxRetries', example='1', position='Body'),
  scheduleMaxTimeout?: int32(name='ScheduleMaxTimeout', example='60', position='Body'),
  scheduleType?: string(name='ScheduleType', example='fixed_rate', position='Body'),
  scheduleWindow?: string(name='ScheduleWindow', example='5m', position='Body'),
}

model UpdateDetectionRuleResponseBody = {
  requestId?: string(name='RequestId', example='B88A2D41-87B8-537E-A7D3-3416A39F****'),
}

model UpdateDetectionRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDetectionRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateDetectionRule  UpdateDetectionRuleRequest
  * @return UpdateDetectionRuleResponse
 */
async function updateDetectionRule(request: UpdateDetectionRuleRequest): UpdateDetectionRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateDetectionRule', 'POST', '/', 'json', true, 'form', request);
}

model UpdateNormalizationRuleRequest {
  extendContentPacked?: string(name='ExtendContentPacked', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  normalizationRuleDescription?: string(name='NormalizationRuleDescription', example='normalization_rule_Z57np。', position='Body'),
  normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\"[\\s\\S]+\\" as extend_content。', position='Body'),
  normalizationRuleFormat?: string(name='NormalizationRuleFormat', example='SPL。', position='Body'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。', position='Body'),
  normalizationRuleIds?: [ string ](name='NormalizationRuleIds', shrink='json', position='Body'),
  normalizationRuleMode?: string(name='NormalizationRuleMode', example='both。', position='Body'),
  normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。', position='Body'),
  normalizationRuleType?: string(name='NormalizationRuleType', position='Body'),
  normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。', position='Body'),
  orderField?: string(name='OrderField', position='Body'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
  vendorId?: string(name='VendorId', example='alibaba_cloud。', position='Body'),
}

model UpdateNormalizationRuleResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateNormalizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNormalizationRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateNormalizationRule  UpdateNormalizationRuleRequest
  * @return UpdateNormalizationRuleResponse
 */
async function updateNormalizationRule(request: UpdateNormalizationRuleRequest): UpdateNormalizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateNormalizationRule', 'POST', '/', 'json', true, 'form', request);
}

model UpdateProductRequest {
  lang?: string(name='Lang', example='en。', position='Body'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。', position='Body'),
  productName?: string(name='ProductName', example='alibaba_cloud_sas。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='1733269771123。', position='Body'),
  vendorName?: string(name='VendorName', example='111。', position='Body'),
}

model UpdateProductResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProductResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateProduct  UpdateProductRequest
  * @return UpdateProductResponse
 */
async function updateProduct(request: UpdateProductRequest): UpdateProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateProduct', 'POST', '/', 'json', true, 'form', request);
}

model UpdateVendorRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
  vendorId?: string(name='VendorId', example='vd-qlsw5eocx94w9。', position='Body'),
  vendorName?: string(name='VendorName', example='111。', position='Body'),
}

model UpdateVendorResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateVendorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVendorResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateVendor  UpdateVendorRequest
  * @return UpdateVendorResponse
 */
async function updateVendor(request: UpdateVendorRequest): UpdateVendorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateVendor', 'POST', '/', 'json', true, 'form', request);
}

model ValidateLogStoreRequest {
  lang?: string(name='Lang', example='zh。', position='Body'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。', position='Body'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。', position='Body'),
  logStoreName?: string(name='LogStoreName', example='ssglauncher-log。', position='Body'),
  logUserId?: long(name='LogUserId', example='173326*******。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model ValidateLogStoreResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model ValidateLogStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateLogStoreResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ValidateLogStore  ValidateLogStoreRequest
  * @return ValidateLogStoreResponse
 */
async function validateLogStore(request: ValidateLogStoreRequest): ValidateLogStoreResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateLogStore', 'POST', '/', 'json', true, 'form', request);
}

model ValidateNormalizationRuleRequest {
  data?: string(name='Data', example='123456。', position='Body'),
  lang?: string(name='Lang', example='zh。', position='Body'),
  normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。', position='Body'),
  normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。', position='Body'),
  regionId?: string(name='RegionId', example='cn-hangzhou。', position='Body'),
  roleFor?: long(name='RoleFor', example='173326*******。', position='Body'),
}

model ValidateNormalizationRuleResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  validateResult?: [ 
    {
      fieldName?: string(name='FieldName', example='host。'),
      fieldValue?: string(name='FieldValue', example='ze。'),
      message?: string(name='Message', example='success。'),
      normalizationFieldName?: string(name='NormalizationFieldName', example='host。'),
      normalizationFieldRequired?: boolean(name='NormalizationFieldRequired', example='true。'),
      result?: int32(name='Result', example='1。'),
    }
  ](name='ValidateResult'),
}

model ValidateNormalizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateNormalizationRuleResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ValidateNormalizationRule  ValidateNormalizationRuleRequest
  * @return ValidateNormalizationRuleResponse
 */
async function validateNormalizationRule(request: ValidateNormalizationRuleRequest): ValidateNormalizationRuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateNormalizationRule', 'POST', '/', 'json', true, 'form', request);
}

