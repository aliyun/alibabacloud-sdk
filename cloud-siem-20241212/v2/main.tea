/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cloud-siem', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CheckUpgradeItemRequest {
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-shanghai'),
  roleFor?: string(name='RoleFor', example='113091674488****'),
  upgradeItemId?: string(name='UpgradeItemId', example='dispose_task_upgrade'),
}

model CheckUpgradeItemResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
  upgradeItem?: {
    checkResult?: string(name='CheckResult', example='OK'),
    checkStatus?: string(name='CheckStatus', example='success'),
    upgradeItemId?: string(name='UpgradeItemId', example='incident_upgrade'),
  }(name='UpgradeItem'),
}

model CheckUpgradeItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckUpgradeItemResponseBody(name='body'),
}

/**
 * @summary 检查升级项
 *
 * @param request CheckUpgradeItemRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CheckUpgradeItemResponse
 */
@context("checkUpgradeItemWithContext")
async function checkUpgradeItemWithOptions(request: CheckUpgradeItemRequest, runtime: $RuntimeOptions): CheckUpgradeItemResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.upgradeItemId)) {
    body['UpgradeItemId'] = request.upgradeItemId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CheckUpgradeItem',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 检查升级项
 *
 * @param request CheckUpgradeItemRequest
 * @return CheckUpgradeItemResponse
 */
async function checkUpgradeItem(request: CheckUpgradeItemRequest): CheckUpgradeItemResponse {
  var runtime = new $RuntimeOptions{};
  return checkUpgradeItemWithOptions(request, runtime);
}

model CreateDataIngestionRequest {
  capacityCount?: int32(name='CapacityCount'),
  dataIngestionMode?: string(name='DataIngestionMode', example='realtime。'),
  dataIngestionStateCode?: string(name='DataIngestionStateCode'),
  dataIngestionType?: string(name='DataIngestionType'),
  dataSourceEditable?: boolean(name='DataSourceEditable'),
  dataSourceId?: string(name='DataSourceId', example='ds-3g6lyf4eonngyohaq7tr。'),
  lang?: string(name='Lang', example='zh。'),
  normalizationRuleEditable?: boolean(name='NormalizationRuleEditable'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-hdmady54piigkjfv17yp。'),
  productId?: string(name='ProductId'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  scanDataSourceId?: string(name='ScanDataSourceId'),
  streamJobId?: string(name='StreamJobId'),
  updateTime?: long(name='UpdateTime'),
}

model CreateDataIngestionResponseBody = {
  dataIngestionId?: string(name='DataIngestionId', example='di-yxtm3l2rwa7fr5uvxtc7。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model CreateDataIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataIngestionResponseBody(name='body'),
}

/**
 * @summary 创建数据源
 *
 * @param request CreateDataIngestionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataIngestionResponse
 */
@context("createDataIngestionWithContext")
async function createDataIngestionWithOptions(request: CreateDataIngestionRequest, runtime: $RuntimeOptions): CreateDataIngestionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.capacityCount)) {
    body['CapacityCount'] = request.capacityCount;
  }
  if (!$isNull(request.dataIngestionMode)) {
    body['DataIngestionMode'] = request.dataIngestionMode;
  }
  if (!$isNull(request.dataIngestionStateCode)) {
    body['DataIngestionStateCode'] = request.dataIngestionStateCode;
  }
  if (!$isNull(request.dataIngestionType)) {
    body['DataIngestionType'] = request.dataIngestionType;
  }
  if (!$isNull(request.dataSourceEditable)) {
    body['DataSourceEditable'] = request.dataSourceEditable;
  }
  if (!$isNull(request.dataSourceId)) {
    body['DataSourceId'] = request.dataSourceId;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.normalizationRuleEditable)) {
    body['NormalizationRuleEditable'] = request.normalizationRuleEditable;
  }
  if (!$isNull(request.normalizationRuleId)) {
    body['NormalizationRuleId'] = request.normalizationRuleId;
  }
  if (!$isNull(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.scanDataSourceId)) {
    body['ScanDataSourceId'] = request.scanDataSourceId;
  }
  if (!$isNull(request.streamJobId)) {
    body['StreamJobId'] = request.streamJobId;
  }
  if (!$isNull(request.updateTime)) {
    body['UpdateTime'] = request.updateTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDataIngestion',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数据源
 *
 * @param request CreateDataIngestionRequest
 * @return CreateDataIngestionResponse
 */
async function createDataIngestion(request: CreateDataIngestionRequest): CreateDataIngestionResponse {
  var runtime = new $RuntimeOptions{};
  return createDataIngestionWithOptions(request, runtime);
}

model CreateDataSetRequest {
  dataSetDescription?: string(name='DataSetDescription', example='lmftest contains ip list'),
  dataSetFieldKeyName?: string(name='DataSetFieldKeyName', description='This parameter is required.', example='ip'),
  dataSetFileName?: string(name='DataSetFileName', description='This parameter is required.', example='cloudsiem-dataset/1358117679873357_17433*****.csv'),
  dataSetName?: string(name='DataSetName', description='This parameter is required.', example='lmftest'),
  dataSetStatus?: int32(name='DataSetStatus'),
  dataSetType?: string(name='DataSetType'),
  ipWhitelistRecognizers?: [ 
    {
      autoRecognizeStatus?: string(name='AutoRecognizeStatus', example='enabled'),
      ipWhitelistRecognizerType?: string(name='IpWhitelistRecognizerType', example='waf_back_source_ip'),
      recognizeScope?: string(name='RecognizeScope', example='current_account'),
    }
  ](name='IpWhitelistRecognizers'),
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model CreateDataSetResponseBody = {
  dataSetRecordStatistic?: {
    dataSetId?: string(name='DataSetId', example='dataset-qt0n8246gs9nackg****'),
    newDataSetRecordCount?: int32(name='NewDataSetRecordCount', example='6'),
  }(name='DataSetRecordStatistic'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
}

model CreateDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSetResponseBody(name='body'),
}

/**
 * @summary 创建数据集
 *
 * @param request CreateDataSetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataSetResponse
 */
@context("createDataSetWithContext")
async function createDataSetWithOptions(request: CreateDataSetRequest, runtime: $RuntimeOptions): CreateDataSetResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataSetDescription)) {
    body['DataSetDescription'] = request.dataSetDescription;
  }
  if (!$isNull(request.dataSetFieldKeyName)) {
    body['DataSetFieldKeyName'] = request.dataSetFieldKeyName;
  }
  if (!$isNull(request.dataSetFileName)) {
    body['DataSetFileName'] = request.dataSetFileName;
  }
  if (!$isNull(request.dataSetName)) {
    body['DataSetName'] = request.dataSetName;
  }
  if (!$isNull(request.dataSetStatus)) {
    body['DataSetStatus'] = request.dataSetStatus;
  }
  if (!$isNull(request.dataSetType)) {
    body['DataSetType'] = request.dataSetType;
  }
  var bodyFlat : map[string]any = {};
  if (!$isNull(request.ipWhitelistRecognizers)) {
    bodyFlat['IpWhitelistRecognizers'] = request.ipWhitelistRecognizers;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDataSet',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数据集
 *
 * @param request CreateDataSetRequest
 * @return CreateDataSetResponse
 */
async function createDataSet(request: CreateDataSetRequest): CreateDataSetResponse {
  var runtime = new $RuntimeOptions{};
  return createDataSetWithOptions(request, runtime);
}

model CreateDataSourceRequest {
  dataSourceFrom?: string(name='DataSourceFrom', example='center。'),
  dataSourceIds?: [ string ](name='DataSourceIds'),
  dataSourceName?: string(name='DataSourceName', example='AD_LOG。'),
  dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled'),
  dataSourceRecognizer?: string(name='DataSourceRecognizer'),
  dataSourceReferences?: [ string ](name='DataSourceReferences'),
  dataSourceStores?: [ 
    {
      createTime?: long(name='CreateTime'),
      dataSourceStoreFrom?: string(name='DataSourceStoreFrom'),
      dataSourceStoreId?: string(name='DataSourceStoreId'),
      dataSourceStoreStatus?: string(name='DataSourceStoreStatus'),
      logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
      logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
      logStoreName?: string(name='LogStoreName', example='actiontrail_management-events。'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='DataSourceStores'),
  dataSourceTemplateId?: string(name='DataSourceTemplateId'),
  dataSourceType?: string(name='DataSourceType', example='preset。'),
  lang?: string(name='Lang', example='zh。'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
  logStoreName?: string(name='LogStoreName', example='mde_raw。'),
  logUserId?: long(name='LogUserId', example='173326*******。'),
  order?: string(name='Order'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  updateTime?: long(name='UpdateTime'),
}

model CreateDataSourceShrinkRequest {
  dataSourceFrom?: string(name='DataSourceFrom', example='center。'),
  dataSourceIdsShrink?: string(name='DataSourceIds'),
  dataSourceName?: string(name='DataSourceName', example='AD_LOG。'),
  dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled'),
  dataSourceRecognizer?: string(name='DataSourceRecognizer'),
  dataSourceReferencesShrink?: string(name='DataSourceReferences'),
  dataSourceStores?: [ 
    {
      createTime?: long(name='CreateTime'),
      dataSourceStoreFrom?: string(name='DataSourceStoreFrom'),
      dataSourceStoreId?: string(name='DataSourceStoreId'),
      dataSourceStoreStatus?: string(name='DataSourceStoreStatus'),
      logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
      logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
      logStoreName?: string(name='LogStoreName', example='actiontrail_management-events。'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='DataSourceStores'),
  dataSourceTemplateId?: string(name='DataSourceTemplateId'),
  dataSourceType?: string(name='DataSourceType', example='preset。'),
  lang?: string(name='Lang', example='zh。'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
  logStoreName?: string(name='LogStoreName', example='mde_raw。'),
  logUserId?: long(name='LogUserId', example='173326*******。'),
  order?: string(name='Order'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  updateTime?: long(name='UpdateTime'),
}

model CreateDataSourceResponseBody = {
  dataSourceId?: string(name='DataSourceId', example='ds-jl67vixpe1scwysgyu3x。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model CreateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDataSourceResponseBody(name='body'),
}

/**
 * @summary 创建数据源
 *
 * @param tmpReq CreateDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDataSourceResponse
 */
@context("createDataSourceWithContext")
async function createDataSourceWithOptions(tmpReq: CreateDataSourceRequest, runtime: $RuntimeOptions): CreateDataSourceResponse {
  tmpReq.validate();
  var request = new CreateDataSourceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dataSourceIds)) {
    request.dataSourceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataSourceIds, 'DataSourceIds', 'json');
  }
  if (!$isNull(tmpReq.dataSourceReferences)) {
    request.dataSourceReferencesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataSourceReferences, 'DataSourceReferences', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.dataSourceFrom)) {
    body['DataSourceFrom'] = request.dataSourceFrom;
  }
  if (!$isNull(request.dataSourceIdsShrink)) {
    body['DataSourceIds'] = request.dataSourceIdsShrink;
  }
  if (!$isNull(request.dataSourceName)) {
    body['DataSourceName'] = request.dataSourceName;
  }
  if (!$isNull(request.dataSourceRecognizeEnabled)) {
    body['DataSourceRecognizeEnabled'] = request.dataSourceRecognizeEnabled;
  }
  if (!$isNull(request.dataSourceRecognizer)) {
    body['DataSourceRecognizer'] = request.dataSourceRecognizer;
  }
  if (!$isNull(request.dataSourceReferencesShrink)) {
    body['DataSourceReferences'] = request.dataSourceReferencesShrink;
  }
  var bodyFlat : map[string]any = {};
  if (!$isNull(request.dataSourceStores)) {
    bodyFlat['DataSourceStores'] = request.dataSourceStores;
  }
  if (!$isNull(request.dataSourceTemplateId)) {
    body['DataSourceTemplateId'] = request.dataSourceTemplateId;
  }
  if (!$isNull(request.dataSourceType)) {
    body['DataSourceType'] = request.dataSourceType;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logProjectName)) {
    body['LogProjectName'] = request.logProjectName;
  }
  if (!$isNull(request.logRegionId)) {
    body['LogRegionId'] = request.logRegionId;
  }
  if (!$isNull(request.logStoreName)) {
    body['LogStoreName'] = request.logStoreName;
  }
  if (!$isNull(request.logUserId)) {
    body['LogUserId'] = request.logUserId;
  }
  if (!$isNull(request.order)) {
    body['Order'] = request.order;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.updateTime)) {
    body['UpdateTime'] = request.updateTime;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDataSource',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建数据源
 *
 * @param request CreateDataSourceRequest
 * @return CreateDataSourceResponse
 */
async function createDataSource(request: CreateDataSourceRequest): CreateDataSourceResponse {
  var runtime = new $RuntimeOptions{};
  return createDataSourceWithOptions(request, runtime);
}

model CreateDetectionRuleRequest {
  alertAttCk?: string(name='AlertAttCk', example='Discovery'),
  alertLevel?: string(name='AlertLevel', description='This parameter is required.', example='1'),
  alertSchemaId?: string(name='AlertSchemaId', description='This parameter is required.', example='ALERT_ACTIVITY'),
  alertTacticId?: string(name='AlertTacticId', example='TA0042'),
  alertThresholdCount?: int32(name='AlertThresholdCount', example='10'),
  alertThresholdGroup?: string(name='AlertThresholdGroup', example='alert_type,ip'),
  alertThresholdPeriod?: string(name='AlertThresholdPeriod', example='5m'),
  alertType?: string(name='AlertType', description='This parameter is required.', example='WebShell'),
  detectionExpressionContent?: string(name='DetectionExpressionContent', example='*|set session mode=scan;SELECT * FROM log
WHERE schema = \\\\"PROCESS_START_ACTIVITY\\\\"
AND (
    proc_path LIKE \\\\"%/groups\\\\"
    OR (
        (
            proc_path LIKE \\\\"%/cat\\\\"
            OR proc_path LIKE \\\\"%/head\\\\"
            OR proc_path LIKE \\\\"%/tail\\\\"
            OR proc_path LIKE \\\\"%/more\\\\"
        )
        AND cmdline LIKE \\\\"%/etc/group%\\\\"
    )
)'),
  detectionExpressionType?: string(name='DetectionExpressionType', example='sql'),
  detectionRuleDescription?: string(name='DetectionRuleDescription', example='dr-123'),
  detectionRuleName?: string(name='DetectionRuleName', description='This parameter is required.', example='dr-ha1i09ob3zmqrs85****'),
  detectionRuleStatus?: string(name='DetectionRuleStatus', example='0'),
  detectionRuleType?: string(name='DetectionRuleType', description='This parameter is required.', example='custom'),
  entityMappings?: string(name='EntityMappings', example='[{\\\\"NormalizationSchemaId\\\\":\\\\"host\\\\",\\\\"NormalizationFieldMappings\\\\":[{\\\\"NormalizationFieldName\\\\":\\\\"uuid\\\\",\\\\"MappingFieldName\\\\":\\\\"host\\\\",\\\\"NormalizationFieldType\\\\":\\\\"varchar\\\\"}]}]'),
  incidentAggregationExpression?: string(name='IncidentAggregationExpression', example='5m'),
  incidentAggregationType?: string(name='IncidentAggregationType', example='window'),
  lang?: string(name='Lang', example='zh'),
  logCategoryId?: string(name='LogCategoryId', example='NETWORK_CATEGORY'),
  logSchemaId?: string(name='LogSchemaId', description='This parameter is required.', example='API_RISK_ACTIVITY'),
  playbookParameters?: string(name='PlaybookParameters', example='{
    "ip": {
        "ip": "124.23.*.*"
    }
}'),
  playbookUuid?: string(name='PlaybookUuid', example='system_aliyun_clb_process_book'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
  scheduleBeginTime?: long(name='ScheduleBeginTime', example='1733269771123'),
  scheduleExpression?: string(name='ScheduleExpression', example='0/5 * * * *'),
  scheduleMaxRetries?: int32(name='ScheduleMaxRetries', example='1'),
  scheduleMaxTimeout?: int32(name='ScheduleMaxTimeout', example='60'),
  scheduleType?: string(name='ScheduleType', example='fixed_rate'),
  scheduleWindow?: string(name='ScheduleWindow', example='5m'),
}

model CreateDetectionRuleResponseBody = {
  detectionRuleId?: string(name='DetectionRuleId', example='dr-ha1i09ob3zmqrs85****'),
  requestId?: string(name='RequestId', example='5CC09D0C-1CD7-54BD-A853-DCB2D945****'),
}

model CreateDetectionRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateDetectionRuleResponseBody(name='body'),
}

/**
 * @summary 创建检测规则
 *
 * @param request CreateDetectionRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateDetectionRuleResponse
 */
@context("createDetectionRuleWithContext")
async function createDetectionRuleWithOptions(request: CreateDetectionRuleRequest, runtime: $RuntimeOptions): CreateDetectionRuleResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.alertAttCk)) {
    body['AlertAttCk'] = request.alertAttCk;
  }
  if (!$isNull(request.alertLevel)) {
    body['AlertLevel'] = request.alertLevel;
  }
  if (!$isNull(request.alertSchemaId)) {
    body['AlertSchemaId'] = request.alertSchemaId;
  }
  if (!$isNull(request.alertTacticId)) {
    body['AlertTacticId'] = request.alertTacticId;
  }
  if (!$isNull(request.alertThresholdCount)) {
    body['AlertThresholdCount'] = request.alertThresholdCount;
  }
  if (!$isNull(request.alertThresholdGroup)) {
    body['AlertThresholdGroup'] = request.alertThresholdGroup;
  }
  if (!$isNull(request.alertThresholdPeriod)) {
    body['AlertThresholdPeriod'] = request.alertThresholdPeriod;
  }
  if (!$isNull(request.alertType)) {
    body['AlertType'] = request.alertType;
  }
  if (!$isNull(request.detectionExpressionContent)) {
    body['DetectionExpressionContent'] = request.detectionExpressionContent;
  }
  if (!$isNull(request.detectionExpressionType)) {
    body['DetectionExpressionType'] = request.detectionExpressionType;
  }
  if (!$isNull(request.detectionRuleDescription)) {
    body['DetectionRuleDescription'] = request.detectionRuleDescription;
  }
  if (!$isNull(request.detectionRuleName)) {
    body['DetectionRuleName'] = request.detectionRuleName;
  }
  if (!$isNull(request.detectionRuleStatus)) {
    body['DetectionRuleStatus'] = request.detectionRuleStatus;
  }
  if (!$isNull(request.detectionRuleType)) {
    body['DetectionRuleType'] = request.detectionRuleType;
  }
  if (!$isNull(request.entityMappings)) {
    body['EntityMappings'] = request.entityMappings;
  }
  if (!$isNull(request.incidentAggregationExpression)) {
    body['IncidentAggregationExpression'] = request.incidentAggregationExpression;
  }
  if (!$isNull(request.incidentAggregationType)) {
    body['IncidentAggregationType'] = request.incidentAggregationType;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logCategoryId)) {
    body['LogCategoryId'] = request.logCategoryId;
  }
  if (!$isNull(request.logSchemaId)) {
    body['LogSchemaId'] = request.logSchemaId;
  }
  if (!$isNull(request.playbookParameters)) {
    body['PlaybookParameters'] = request.playbookParameters;
  }
  if (!$isNull(request.playbookUuid)) {
    body['PlaybookUuid'] = request.playbookUuid;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.scheduleBeginTime)) {
    body['ScheduleBeginTime'] = request.scheduleBeginTime;
  }
  if (!$isNull(request.scheduleExpression)) {
    body['ScheduleExpression'] = request.scheduleExpression;
  }
  if (!$isNull(request.scheduleMaxRetries)) {
    body['ScheduleMaxRetries'] = request.scheduleMaxRetries;
  }
  if (!$isNull(request.scheduleMaxTimeout)) {
    body['ScheduleMaxTimeout'] = request.scheduleMaxTimeout;
  }
  if (!$isNull(request.scheduleType)) {
    body['ScheduleType'] = request.scheduleType;
  }
  if (!$isNull(request.scheduleWindow)) {
    body['ScheduleWindow'] = request.scheduleWindow;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateDetectionRule',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建检测规则
 *
 * @param request CreateDetectionRuleRequest
 * @return CreateDetectionRuleResponse
 */
async function createDetectionRule(request: CreateDetectionRuleRequest): CreateDetectionRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createDetectionRuleWithOptions(request, runtime);
}

model CreateExportTaskRequest {
  exportTaskParameter?: string(name='ExportTaskParameter', example='{
    "IncidentName": "name",
    "IncidentStatus": "1",
    "ThreatLevel":["1","2"],
    "IncidentUuids":"315EE627-39DC-560A-8DFD-CBF66AD9****"
}'),
  exportTaskType?: string(name='ExportTaskType', example='incident_list'),
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model CreateExportTaskResponseBody = {
  fileName?: string(name='FileName', example='event_1193842352994186_17344888****.xlsx'),
  id?: long(name='Id', example='400151'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model CreateExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateExportTaskResponseBody(name='body'),
}

/**
 * @summary 创建导出任务
 *
 * @param request CreateExportTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateExportTaskResponse
 */
@context("createExportTaskWithContext")
async function createExportTaskWithOptions(request: CreateExportTaskRequest, runtime: $RuntimeOptions): CreateExportTaskResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.exportTaskParameter)) {
    body['ExportTaskParameter'] = request.exportTaskParameter;
  }
  if (!$isNull(request.exportTaskType)) {
    body['ExportTaskType'] = request.exportTaskType;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateExportTask',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建导出任务
 *
 * @param request CreateExportTaskRequest
 * @return CreateExportTaskResponse
 */
async function createExportTask(request: CreateExportTaskRequest): CreateExportTaskResponse {
  var runtime = new $RuntimeOptions{};
  return createExportTaskWithOptions(request, runtime);
}

model CreateLogStoreRequest {
  lang?: string(name='Lang', example='zh。'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-channel-173326*******-cn-hangzhou。'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
  logStoreName?: string(name='LogStoreName', example='logstoreqykug。'),
  logUserId?: long(name='LogUserId', example='173326*******。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model CreateLogStoreResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model CreateLogStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLogStoreResponseBody(name='body'),
}

/**
 * @summary 创建LogStore
 *
 * @param request CreateLogStoreRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateLogStoreResponse
 */
@context("createLogStoreWithContext")
async function createLogStoreWithOptions(request: CreateLogStoreRequest, runtime: $RuntimeOptions): CreateLogStoreResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logProjectName)) {
    body['LogProjectName'] = request.logProjectName;
  }
  if (!$isNull(request.logRegionId)) {
    body['LogRegionId'] = request.logRegionId;
  }
  if (!$isNull(request.logStoreName)) {
    body['LogStoreName'] = request.logStoreName;
  }
  if (!$isNull(request.logUserId)) {
    body['LogUserId'] = request.logUserId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateLogStore',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建LogStore
 *
 * @param request CreateLogStoreRequest
 * @return CreateLogStoreResponse
 */
async function createLogStore(request: CreateLogStoreRequest): CreateLogStoreResponse {
  var runtime = new $RuntimeOptions{};
  return createLogStoreWithOptions(request, runtime);
}

model CreateNormalizationRuleRequest {
  extendContentPacked?: string(name='ExtendContentPacked'),
  lang?: string(name='Lang', example='zh。'),
  normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
  normalizationRuleDescription?: string(name='NormalizationRuleDescription', example='normalization_rule_Z57np。'),
  normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\\\"[\\\\s\\\\S]+\\\\" as extend_content。'),
  normalizationRuleFormat?: string(name='NormalizationRuleFormat', example='SPL。'),
  normalizationRuleIds?: [ string ](name='NormalizationRuleIds'),
  normalizationRuleMode?: string(name='NormalizationRuleMode', example='both。'),
  normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。'),
  normalizationRuleType?: string(name='NormalizationRuleType'),
  normalizationRuleVersion?: int32(name='NormalizationRuleVersion'),
  normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
  orderField?: string(name='OrderField'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  vendorId?: string(name='VendorId', example='alibaba_cloud。'),
}

model CreateNormalizationRuleShrinkRequest {
  extendContentPacked?: string(name='ExtendContentPacked'),
  lang?: string(name='Lang', example='zh。'),
  normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
  normalizationRuleDescription?: string(name='NormalizationRuleDescription', example='normalization_rule_Z57np。'),
  normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\\\"[\\\\s\\\\S]+\\\\" as extend_content。'),
  normalizationRuleFormat?: string(name='NormalizationRuleFormat', example='SPL。'),
  normalizationRuleIdsShrink?: string(name='NormalizationRuleIds'),
  normalizationRuleMode?: string(name='NormalizationRuleMode', example='both。'),
  normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。'),
  normalizationRuleType?: string(name='NormalizationRuleType'),
  normalizationRuleVersion?: int32(name='NormalizationRuleVersion'),
  normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
  orderField?: string(name='OrderField'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  vendorId?: string(name='VendorId', example='alibaba_cloud。'),
}

model CreateNormalizationRuleResponseBody = {
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model CreateNormalizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateNormalizationRuleResponseBody(name='body'),
}

/**
 * @summary 创建标准化规则
 *
 * @param tmpReq CreateNormalizationRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateNormalizationRuleResponse
 */
@context("createNormalizationRuleWithContext")
async function createNormalizationRuleWithOptions(tmpReq: CreateNormalizationRuleRequest, runtime: $RuntimeOptions): CreateNormalizationRuleResponse {
  tmpReq.validate();
  var request = new CreateNormalizationRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.normalizationRuleIds)) {
    request.normalizationRuleIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.normalizationRuleIds, 'NormalizationRuleIds', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.extendContentPacked)) {
    body['ExtendContentPacked'] = request.extendContentPacked;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.normalizationCategoryId)) {
    body['NormalizationCategoryId'] = request.normalizationCategoryId;
  }
  if (!$isNull(request.normalizationRuleDescription)) {
    body['NormalizationRuleDescription'] = request.normalizationRuleDescription;
  }
  if (!$isNull(request.normalizationRuleExpression)) {
    body['NormalizationRuleExpression'] = request.normalizationRuleExpression;
  }
  if (!$isNull(request.normalizationRuleFormat)) {
    body['NormalizationRuleFormat'] = request.normalizationRuleFormat;
  }
  if (!$isNull(request.normalizationRuleIdsShrink)) {
    body['NormalizationRuleIds'] = request.normalizationRuleIdsShrink;
  }
  if (!$isNull(request.normalizationRuleMode)) {
    body['NormalizationRuleMode'] = request.normalizationRuleMode;
  }
  if (!$isNull(request.normalizationRuleName)) {
    body['NormalizationRuleName'] = request.normalizationRuleName;
  }
  if (!$isNull(request.normalizationRuleType)) {
    body['NormalizationRuleType'] = request.normalizationRuleType;
  }
  if (!$isNull(request.normalizationRuleVersion)) {
    body['NormalizationRuleVersion'] = request.normalizationRuleVersion;
  }
  if (!$isNull(request.normalizationSchemaId)) {
    body['NormalizationSchemaId'] = request.normalizationSchemaId;
  }
  if (!$isNull(request.orderField)) {
    body['OrderField'] = request.orderField;
  }
  if (!$isNull(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.vendorId)) {
    body['VendorId'] = request.vendorId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateNormalizationRule',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建标准化规则
 *
 * @param request CreateNormalizationRuleRequest
 * @return CreateNormalizationRuleResponse
 */
async function createNormalizationRule(request: CreateNormalizationRuleRequest): CreateNormalizationRuleResponse {
  var runtime = new $RuntimeOptions{};
  return createNormalizationRuleWithOptions(request, runtime);
}

model CreateProductRequest {
  lang?: string(name='Lang', example='zh。'),
  productName?: string(name='ProductName', example='alibaba_cloud_sas。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  vendorName?: string(name='VendorName', example='111。'),
}

model CreateProductResponseBody = {
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model CreateProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateProductResponseBody(name='body'),
}

/**
 * @summary 创建产品
 *
 * @param request CreateProductRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProductResponse
 */
@context("createProductWithContext")
async function createProductWithOptions(request: CreateProductRequest, runtime: $RuntimeOptions): CreateProductResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.productName)) {
    body['ProductName'] = request.productName;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.vendorName)) {
    body['VendorName'] = request.vendorName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateProduct',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建产品
 *
 * @param request CreateProductRequest
 * @return CreateProductResponse
 */
async function createProduct(request: CreateProductRequest): CreateProductResponse {
  var runtime = new $RuntimeOptions{};
  return createProductWithOptions(request, runtime);
}

model CreateVendorRequest {
  lang?: string(name='Lang', example='en。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  vendorName?: string(name='VendorName', example='111。'),
}

model CreateVendorResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  vendorId?: string(name='VendorId', example='vd-qlsw5eocx94w9。'),
}

model CreateVendorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateVendorResponseBody(name='body'),
}

/**
 * @summary 创建厂商
 *
 * @param request CreateVendorRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateVendorResponse
 */
@context("createVendorWithContext")
async function createVendorWithOptions(request: CreateVendorRequest, runtime: $RuntimeOptions): CreateVendorResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.vendorName)) {
    body['VendorName'] = request.vendorName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CreateVendor',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建厂商
 *
 * @param request CreateVendorRequest
 * @return CreateVendorResponse
 */
async function createVendor(request: CreateVendorRequest): CreateVendorResponse {
  var runtime = new $RuntimeOptions{};
  return createVendorWithOptions(request, runtime);
}

model DeleteDataIngestionRequest {
  dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_sas_netstat_ingestion_173326*******。'),
  lang?: string(name='Lang', example='zh。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model DeleteDataIngestionResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DeleteDataIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataIngestionResponseBody(name='body'),
}

/**
 * @summary 删除数据接入
 *
 * @param request DeleteDataIngestionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataIngestionResponse
 */
@context("deleteDataIngestionWithContext")
async function deleteDataIngestionWithOptions(request: DeleteDataIngestionRequest, runtime: $RuntimeOptions): DeleteDataIngestionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataIngestionId)) {
    body['DataIngestionId'] = request.dataIngestionId;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDataIngestion',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除数据接入
 *
 * @param request DeleteDataIngestionRequest
 * @return DeleteDataIngestionResponse
 */
async function deleteDataIngestion(request: DeleteDataIngestionRequest): DeleteDataIngestionResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDataIngestionWithOptions(request, runtime);
}

model DeleteDataSetRequest {
  dataSetId?: string(name='DataSetId', description='This parameter is required.', example='dataset-10iy8mbifnb4gniv****'),
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model DeleteDataSetResponseBody = {
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
}

model DeleteDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSetResponseBody(name='body'),
}

/**
 * @summary 删除数据集
 *
 * @param request DeleteDataSetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataSetResponse
 */
@context("deleteDataSetWithContext")
async function deleteDataSetWithOptions(request: DeleteDataSetRequest, runtime: $RuntimeOptions): DeleteDataSetResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataSetId)) {
    body['DataSetId'] = request.dataSetId;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDataSet',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除数据集
 *
 * @param request DeleteDataSetRequest
 * @return DeleteDataSetResponse
 */
async function deleteDataSet(request: DeleteDataSetRequest): DeleteDataSetResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDataSetWithOptions(request, runtime);
}

model DeleteDataSetRecordRequest {
  dataSetId?: string(name='DataSetId', description='This parameter is required.', example='dataset-10iy8mbifnb4gniv****'),
  dataSetRecordIds?: string(name='DataSetRecordIds', description='This parameter is required.', example='[1,2,3,4]'),
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model DeleteDataSetRecordResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model DeleteDataSetRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSetRecordResponseBody(name='body'),
}

/**
 * @summary 删除数据集记录
 *
 * @param request DeleteDataSetRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataSetRecordResponse
 */
@context("deleteDataSetRecordWithContext")
async function deleteDataSetRecordWithOptions(request: DeleteDataSetRecordRequest, runtime: $RuntimeOptions): DeleteDataSetRecordResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataSetId)) {
    body['DataSetId'] = request.dataSetId;
  }
  if (!$isNull(request.dataSetRecordIds)) {
    body['DataSetRecordIds'] = request.dataSetRecordIds;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDataSetRecord',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除数据集记录
 *
 * @param request DeleteDataSetRecordRequest
 * @return DeleteDataSetRecordResponse
 */
async function deleteDataSetRecord(request: DeleteDataSetRecordRequest): DeleteDataSetRecordResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDataSetRecordWithOptions(request, runtime);
}

model DeleteDataSourceRequest {
  dataSourceId?: string(name='DataSourceId', example='ds-txejfbrh94k5cx58a4qh。'),
  lang?: string(name='Lang', example='zh。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model DeleteDataSourceResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DeleteDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDataSourceResponseBody(name='body'),
}

/**
 * @summary 删除数据源
 *
 * @param request DeleteDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDataSourceResponse
 */
@context("deleteDataSourceWithContext")
async function deleteDataSourceWithOptions(request: DeleteDataSourceRequest, runtime: $RuntimeOptions): DeleteDataSourceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataSourceId)) {
    body['DataSourceId'] = request.dataSourceId;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDataSource',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除数据源
 *
 * @param request DeleteDataSourceRequest
 * @return DeleteDataSourceResponse
 */
async function deleteDataSource(request: DeleteDataSourceRequest): DeleteDataSourceResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDataSourceWithOptions(request, runtime);
}

model DeleteDetectionRuleRequest {
  detectionRuleId?: string(name='DetectionRuleId', description='This parameter is required.', example='dr-53np4nguf5jmh1vc****'),
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model DeleteDetectionRuleResponseBody = {
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
}

model DeleteDetectionRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDetectionRuleResponseBody(name='body'),
}

/**
 * @summary 删除检测规则
 *
 * @param request DeleteDetectionRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteDetectionRuleResponse
 */
@context("deleteDetectionRuleWithContext")
async function deleteDetectionRuleWithOptions(request: DeleteDetectionRuleRequest, runtime: $RuntimeOptions): DeleteDetectionRuleResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.detectionRuleId)) {
    body['DetectionRuleId'] = request.detectionRuleId;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteDetectionRule',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除检测规则
 *
 * @param request DeleteDetectionRuleRequest
 * @return DeleteDetectionRuleResponse
 */
async function deleteDetectionRule(request: DeleteDetectionRuleRequest): DeleteDetectionRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteDetectionRuleWithOptions(request, runtime);
}

model DeleteLogStoreRequest {
  lang?: string(name='Lang', example='zh。'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
  logStoreName?: string(name='LogStoreName', example='rds-logstore。'),
  logUserId?: long(name='LogUserId', example='173326*******。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model DeleteLogStoreResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DeleteLogStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLogStoreResponseBody(name='body'),
}

/**
 * @summary 删除LogStore
 *
 * @param request DeleteLogStoreRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteLogStoreResponse
 */
@context("deleteLogStoreWithContext")
async function deleteLogStoreWithOptions(request: DeleteLogStoreRequest, runtime: $RuntimeOptions): DeleteLogStoreResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logProjectName)) {
    body['LogProjectName'] = request.logProjectName;
  }
  if (!$isNull(request.logRegionId)) {
    body['LogRegionId'] = request.logRegionId;
  }
  if (!$isNull(request.logStoreName)) {
    body['LogStoreName'] = request.logStoreName;
  }
  if (!$isNull(request.logUserId)) {
    body['LogUserId'] = request.logUserId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteLogStore',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除LogStore
 *
 * @param request DeleteLogStoreRequest
 * @return DeleteLogStoreResponse
 */
async function deleteLogStore(request: DeleteLogStoreRequest): DeleteLogStoreResponse {
  var runtime = new $RuntimeOptions{};
  return deleteLogStoreWithOptions(request, runtime);
}

model DeleteNormalizationRuleRequest {
  lang?: string(name='Lang', example='zh。'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model DeleteNormalizationRuleResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DeleteNormalizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNormalizationRuleResponseBody(name='body'),
}

/**
 * @summary 删除标准化规则
 *
 * @param request DeleteNormalizationRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNormalizationRuleResponse
 */
@context("deleteNormalizationRuleWithContext")
async function deleteNormalizationRuleWithOptions(request: DeleteNormalizationRuleRequest, runtime: $RuntimeOptions): DeleteNormalizationRuleResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.normalizationRuleId)) {
    body['NormalizationRuleId'] = request.normalizationRuleId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteNormalizationRule',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除标准化规则
 *
 * @param request DeleteNormalizationRuleRequest
 * @return DeleteNormalizationRuleResponse
 */
async function deleteNormalizationRule(request: DeleteNormalizationRuleRequest): DeleteNormalizationRuleResponse {
  var runtime = new $RuntimeOptions{};
  return deleteNormalizationRuleWithOptions(request, runtime);
}

model DeleteNormalizationRuleVersionRequest {
  lang?: string(name='Lang', example='zh。'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
  normalizationRuleVersion?: int32(name='NormalizationRuleVersion', example='1。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model DeleteNormalizationRuleVersionResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DeleteNormalizationRuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteNormalizationRuleVersionResponseBody(name='body'),
}

/**
 * @summary 删除标准化规则版本
 *
 * @param request DeleteNormalizationRuleVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteNormalizationRuleVersionResponse
 */
@context("deleteNormalizationRuleVersionWithContext")
async function deleteNormalizationRuleVersionWithOptions(request: DeleteNormalizationRuleVersionRequest, runtime: $RuntimeOptions): DeleteNormalizationRuleVersionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.normalizationRuleId)) {
    body['NormalizationRuleId'] = request.normalizationRuleId;
  }
  if (!$isNull(request.normalizationRuleVersion)) {
    body['NormalizationRuleVersion'] = request.normalizationRuleVersion;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteNormalizationRuleVersion',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除标准化规则版本
 *
 * @param request DeleteNormalizationRuleVersionRequest
 * @return DeleteNormalizationRuleVersionResponse
 */
async function deleteNormalizationRuleVersion(request: DeleteNormalizationRuleVersionRequest): DeleteNormalizationRuleVersionResponse {
  var runtime = new $RuntimeOptions{};
  return deleteNormalizationRuleVersionWithOptions(request, runtime);
}

model DeleteProductRequest {
  lang?: string(name='Lang', example='zh。'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model DeleteProductResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DeleteProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProductResponseBody(name='body'),
}

/**
 * @summary 删除产品
 *
 * @param request DeleteProductRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteProductResponse
 */
@context("deleteProductWithContext")
async function deleteProductWithOptions(request: DeleteProductRequest, runtime: $RuntimeOptions): DeleteProductResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteProduct',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除产品
 *
 * @param request DeleteProductRequest
 * @return DeleteProductResponse
 */
async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  var runtime = new $RuntimeOptions{};
  return deleteProductWithOptions(request, runtime);
}

model DeleteVendorRequest {
  lang?: string(name='Lang', example='zh。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  vendorId?: string(name='VendorId', example='vd-qlsw5eocx94w9。'),
  vendorName?: string(name='VendorName', example='111。'),
}

model DeleteVendorResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DeleteVendorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteVendorResponseBody(name='body'),
}

/**
 * @summary 删除厂商
 *
 * @param request DeleteVendorRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteVendorResponse
 */
@context("deleteVendorWithContext")
async function deleteVendorWithOptions(request: DeleteVendorRequest, runtime: $RuntimeOptions): DeleteVendorResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.vendorId)) {
    body['VendorId'] = request.vendorId;
  }
  if (!$isNull(request.vendorName)) {
    body['VendorName'] = request.vendorName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DeleteVendor',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除厂商
 *
 * @param request DeleteVendorRequest
 * @return DeleteVendorResponse
 */
async function deleteVendor(request: DeleteVendorRequest): DeleteVendorResponse {
  var runtime = new $RuntimeOptions{};
  return deleteVendorWithOptions(request, runtime);
}

model DisableDataIngestionRequest {
  dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_sas_netstat_ingestion_173326*******。'),
  lang?: string(name='Lang', example='zh。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model DisableDataIngestionResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model DisableDataIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DisableDataIngestionResponseBody(name='body'),
}

/**
 * @summary 停止数据接入
 *
 * @param request DisableDataIngestionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DisableDataIngestionResponse
 */
@context("disableDataIngestionWithContext")
async function disableDataIngestionWithOptions(request: DisableDataIngestionRequest, runtime: $RuntimeOptions): DisableDataIngestionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataIngestionId)) {
    body['DataIngestionId'] = request.dataIngestionId;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'DisableDataIngestion',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 停止数据接入
 *
 * @param request DisableDataIngestionRequest
 * @return DisableDataIngestionResponse
 */
async function disableDataIngestion(request: DisableDataIngestionRequest): DisableDataIngestionResponse {
  var runtime = new $RuntimeOptions{};
  return disableDataIngestionWithOptions(request, runtime);
}

model EnableDataIngestionRequest {
  dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_sas_netstat_ingestion_173326*******。'),
  lang?: string(name='Lang', example='zh。'),
  productId?: string(name='ProductId'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model EnableDataIngestionResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model EnableDataIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableDataIngestionResponseBody(name='body'),
}

/**
 * @summary 启动数据接入
 *
 * @param request EnableDataIngestionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnableDataIngestionResponse
 */
@context("enableDataIngestionWithContext")
async function enableDataIngestionWithOptions(request: EnableDataIngestionRequest, runtime: $RuntimeOptions): EnableDataIngestionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataIngestionId)) {
    body['DataIngestionId'] = request.dataIngestionId;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'EnableDataIngestion',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 启动数据接入
 *
 * @param request EnableDataIngestionRequest
 * @return EnableDataIngestionResponse
 */
async function enableDataIngestion(request: EnableDataIngestionRequest): EnableDataIngestionResponse {
  var runtime = new $RuntimeOptions{};
  return enableDataIngestionWithOptions(request, runtime);
}

model ExecuteLogQueryRequest {
  endTime?: string(name='EndTime', example='1733269771123。'),
  extendContentPacked?: string(name='ExtendContentPacked'),
  lang?: string(name='Lang', example='zh。'),
  logProjectName?: string(name='LogProjectName', example='slsaudit-center-173326*******-cn-hangzhou'),
  logQuery?: string(name='LogQuery', example='*'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
  logStoreName?: string(name='LogStoreName', example='huawei-cn-cfw'),
  logUserId?: long(name='LogUserId', example='173326*******。'),
  normalizationSchemaId?: string(name='NormalizationSchemaId'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  startTime?: string(name='StartTime', example='1733269771123。'),
}

model ExecuteLogQueryResponseBody = {
  queryResult?: [ any ](name='QueryResult', example='[]。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model ExecuteLogQueryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteLogQueryResponseBody(name='body'),
}

/**
 * @summary 查看LogStore
 *
 * @param request ExecuteLogQueryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExecuteLogQueryResponse
 */
@context("executeLogQueryWithContext")
async function executeLogQueryWithOptions(request: ExecuteLogQueryRequest, runtime: $RuntimeOptions): ExecuteLogQueryResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!$isNull(request.extendContentPacked)) {
    body['ExtendContentPacked'] = request.extendContentPacked;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logProjectName)) {
    body['LogProjectName'] = request.logProjectName;
  }
  if (!$isNull(request.logQuery)) {
    body['LogQuery'] = request.logQuery;
  }
  if (!$isNull(request.logRegionId)) {
    body['LogRegionId'] = request.logRegionId;
  }
  if (!$isNull(request.logStoreName)) {
    body['LogStoreName'] = request.logStoreName;
  }
  if (!$isNull(request.logUserId)) {
    body['LogUserId'] = request.logUserId;
  }
  if (!$isNull(request.normalizationSchemaId)) {
    body['NormalizationSchemaId'] = request.normalizationSchemaId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ExecuteLogQuery',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看LogStore
 *
 * @param request ExecuteLogQueryRequest
 * @return ExecuteLogQueryResponse
 */
async function executeLogQuery(request: ExecuteLogQueryRequest): ExecuteLogQueryResponse {
  var runtime = new $RuntimeOptions{};
  return executeLogQueryWithOptions(request, runtime);
}

model ExecuteUpgradeRequest {
  lang?: string(name='Lang', example='zh。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: string(name='RoleFor', example='173326*******。'),
}

model ExecuteUpgradeResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model ExecuteUpgradeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteUpgradeResponseBody(name='body'),
}

/**
 * @summary 执行升级
 *
 * @param request ExecuteUpgradeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ExecuteUpgradeResponse
 */
@context("executeUpgradeWithContext")
async function executeUpgradeWithOptions(request: ExecuteUpgradeRequest, runtime: $RuntimeOptions): ExecuteUpgradeResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ExecuteUpgrade',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 执行升级
 *
 * @param request ExecuteUpgradeRequest
 * @return ExecuteUpgradeResponse
 */
async function executeUpgrade(request: ExecuteUpgradeRequest): ExecuteUpgradeResponse {
  var runtime = new $RuntimeOptions{};
  return executeUpgradeWithOptions(request, runtime);
}

model GetDataBatchIngestionRequest {
  lang?: string(name='Lang', example='zh。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model GetDataBatchIngestionResponseBody = {
  dataBatchIngestion?: {
    apsaraDataIngestionIds?: [ string ](name='ApsaraDataIngestionIds'),
    autoScanNew?: string(name='AutoScanNew', example='enabled。'),
    dataBatchIngestionEffectTime?: string(name='DataBatchIngestionEffectTime', example='1733269771123。'),
    dataBatchIngestionMode?: string(name='DataBatchIngestionMode', example='full。'),
    dataBatchIngestionSetTime?: string(name='DataBatchIngestionSetTime', example='1733269771123。'),
    dataBatchIngestionStatus?: string(name='DataBatchIngestionStatus', example='pending。'),
    dataIngestions?: [ 
      {
        dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_sas_process_ingestion_173326*******。'),
        dataIngestionStatus?: string(name='DataIngestionStatus', example='enabled。'),
        dataSourceId?: string(name='DataSourceId', example='alibaba_cloud_sas_process_log_173326*******。'),
        productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
        vendorId?: string(name='VendorId', example='alibaba_cloud。'),
      }
    ](name='DataIngestions'),
    dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', example='true。'),
    logUserIds?: [ string ](name='LogUserIds'),
    recommendDataIngestionIds?: [ string ](name='RecommendDataIngestionIds'),
  }(name='DataBatchIngestion'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model GetDataBatchIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataBatchIngestionResponseBody(name='body'),
}

/**
 * @summary 获取数据批量接入
 *
 * @param request GetDataBatchIngestionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataBatchIngestionResponse
 */
@context("getDataBatchIngestionWithContext")
async function getDataBatchIngestionWithOptions(request: GetDataBatchIngestionRequest, runtime: $RuntimeOptions): GetDataBatchIngestionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDataBatchIngestion',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据批量接入
 *
 * @param request GetDataBatchIngestionRequest
 * @return GetDataBatchIngestionResponse
 */
async function getDataBatchIngestion(request: GetDataBatchIngestionRequest): GetDataBatchIngestionResponse {
  var runtime = new $RuntimeOptions{};
  return getDataBatchIngestionWithOptions(request, runtime);
}

model GetDataStorageRequest {
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model GetDataStorageResponseBody = {
  data?: {
    coldStorageUsedCapacity?: double(name='ColdStorageUsedCapacity', example='100.0'),
    dataStorageRegionId?: string(name='DataStorageRegionId', example='cn-shanghai'),
    dataStorageRegionPermission?: string(name='DataStorageRegionPermission', example='deny'),
    dataStorageTotalCapacity?: long(name='DataStorageTotalCapacity', example='100'),
    dataStorageUsedCapacity?: double(name='DataStorageUsedCapacity', example='100.0'),
    dataStorageUsedCapacityDetail?: string(name='DataStorageUsedCapacityDetail', example='{\\\\"purchasedHotStorageCapacity\\\\":1000,\\\\"usedHotStorageCapacity\\\\":4.2,\\\\"usedHotStorageCapacityDetail\\\\":{\\\\"ap-southeast-1\\\\":4.2,\\\\"cn-shenzhen\\\\":0.0,\\\\"cn-shanghai\\\\":0.0}}'),
    logProject?: string(name='LogProject', example='aliyun-cloudsiem-data-171835723111****-cn-shanghai'),
    normalizationLogStores?: [ 
      {
        logStoreName?: string(name='LogStoreName', example='vulnerability-activity'),
        logStoreTtl?: int32(name='LogStoreTtl', example='180'),
      }
    ](name='NormalizationLogStores'),
    normalizationLogViews?: [ 
      {
        activityName?: string(name='ActivityName', example='API security risk log'),
        categoryName?: string(name='CategoryName', example='Security Category'),
        detectionRuleReferenceCount?: int32(name='DetectionRuleReferenceCount', example='3'),
        detectionRuleReferenceProductIds?: [ string ](name='DetectionRuleReferenceProductIds'),
        logSearchConditions?: string(name='LogSearchConditions', example='[{\\\\"SCHEMA\\\\":\\\\"AZURE_ACTIVE_DIRECTORY_AUDIT_ACTIVITY\\\\"}]'),
        logStoreName?: string(name='LogStoreName', example='risk-activity'),
        logViewExisted?: boolean(name='LogViewExisted', example='true'),
        logViewName?: string(name='LogViewName', example='risk_activity'),
      }
    ](name='NormalizationLogViews'),
    sasLogStores?: [ 
      {
        logCode?: string(name='LogCode', example='sas-net-block'),
        logDeliveryGroup?: string(name='LogDeliveryGroup', example='host'),
        logDeliveryPermission?: string(name='LogDeliveryPermission', example='deny'),
        logDeliveryStatus?: string(name='LogDeliveryStatus', example='enable'),
        logDeliveryUpdateTime?: string(name='LogDeliveryUpdateTime', example='2025-07-16T15:10:29'),
        logName?: string(name='LogName', example='Process Snapshot'),
        logSearchConditions?: string(name='LogSearchConditions', example='[{\\\\"__topic__\\\\":\\\\"sas-net-block\\\\"}]'),
        logStoreExisted?: boolean(name='LogStoreExisted', example='true'),
        logStoreName?: string(name='LogStoreName', example='sas-security-log'),
        logStoreTtl?: int32(name='LogStoreTtl', example='180'),
      }
    ](name='SasLogStores'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='81FB0DEA-52C1-55A0-8631-8E1B9A9D****'),
}

model GetDataStorageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDataStorageResponseBody(name='body'),
}

/**
 * @summary 获取日志管理页面里用户数据存储的详情。
 *
 * @param request GetDataStorageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDataStorageResponse
 */
@context("getDataStorageWithContext")
async function getDataStorageWithOptions(request: GetDataStorageRequest, runtime: $RuntimeOptions): GetDataStorageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDataStorage',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取日志管理页面里用户数据存储的详情。
 *
 * @param request GetDataStorageRequest
 * @return GetDataStorageResponse
 */
async function getDataStorage(request: GetDataStorageRequest): GetDataStorageResponse {
  var runtime = new $RuntimeOptions{};
  return getDataStorageWithOptions(request, runtime);
}

model GetDetectionStatisticRequest {
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model GetDetectionStatisticResponseBody = {
  detectionStatistic?: {
    detectionRuleOnlineCount?: int32(name='DetectionRuleOnlineCount', example='10'),
    detectionRuleTemplateCount?: int32(name='DetectionRuleTemplateCount', example='20'),
    detectionRuleTestCount?: int32(name='DetectionRuleTestCount', example='5'),
    graphComputeRuleCount?: int32(name='GraphComputeRuleCount', example='12'),
    passthroughRuleCount?: int32(name='PassthroughRuleCount', example='2'),
    windowRuleCount?: int32(name='WindowRuleCount', example='6'),
  }(name='DetectionStatistic'),
  requestId?: string(name='RequestId', example='6FB890AC-90B2-5EEA-845B-F7C86FB2****'),
}

model GetDetectionStatisticResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDetectionStatisticResponseBody(name='body'),
}

/**
 * @summary 更新检测规则
 *
 * @param request GetDetectionStatisticRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetDetectionStatisticResponse
 */
@context("getDetectionStatisticWithContext")
async function getDetectionStatisticWithOptions(request: GetDetectionStatisticRequest, runtime: $RuntimeOptions): GetDetectionStatisticResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetDetectionStatistic',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新检测规则
 *
 * @param request GetDetectionStatisticRequest
 * @return GetDetectionStatisticResponse
 */
async function getDetectionStatistic(request: GetDetectionStatisticRequest): GetDetectionStatisticResponse {
  var runtime = new $RuntimeOptions{};
  return getDetectionStatisticWithOptions(request, runtime);
}

model GetExportTaskRequest {
  exportId?: long(name='ExportId', example='200013'),
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model GetExportTaskResponseBody = {
  exportStatus?: string(name='ExportStatus', example='success'),
  exportType?: string(name='ExportType', example='incident_list'),
  fileName?: string(name='FileName', example='event_1193842352994186_17344888****.xlsx'),
  gmtCreate?: string(name='GmtCreate', example='1605076118000'),
  id?: long(name='Id', example='400185'),
  link?: string(name='Link', example='https://cloud-siem-user-dataset.oss-cn-shanghai.aliyuncs.com/export_file/17661858******5/event_17661858******5_175748****.xlsx'),
  progress?: int32(name='Progress', example='66'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
}

model GetExportTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExportTaskResponseBody(name='body'),
}

/**
 * @summary 获取导出任务进度
 *
 * @param request GetExportTaskRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetExportTaskResponse
 */
@context("getExportTaskWithContext")
async function getExportTaskWithOptions(request: GetExportTaskRequest, runtime: $RuntimeOptions): GetExportTaskResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.exportId)) {
    body['ExportId'] = request.exportId;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetExportTask',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取导出任务进度
 *
 * @param request GetExportTaskRequest
 * @return GetExportTaskResponse
 */
async function getExportTask(request: GetExportTaskRequest): GetExportTaskResponse {
  var runtime = new $RuntimeOptions{};
  return getExportTaskWithOptions(request, runtime);
}

model GetIncidentRequest {
  incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model GetIncidentResponseBody = {
  incident?: {
    attckTactics?: any(name='AttckTactics', example='{
	"AttckTactics": [
		{
			"tacticName": "Reconnaissance",
			"alertNum": 0,
			"tacticId": "TA0040"
		}
	]
}'),
    createTime?: long(name='CreateTime', example='1757386075000'),
    detectionRuleId?: string(name='DetectionRuleId', example='dr-fy2zvgiykjifbiim****'),
    incidentAggregationType?: string(name='IncidentAggregationType', example='window'),
    incidentDescription?: string(name='IncidentDescription', example='Forti incident desc'),
    incidentName?: string(name='IncidentName', example='Forti'),
    incidentRemark?: string(name='IncidentRemark', example='Remark'),
    incidentStatus?: int32(name='IncidentStatus', example='0'),
    incidentTags?: string(name='IncidentTags', example='["sys:data_source:waf"]'),
    incidentUuid?: string(name='IncidentUuid', example='85ea4241-798f-4684-a876-65d4f0c3****'),
    relateAlertCount?: int32(name='RelateAlertCount', example='23'),
    relateAssetCount?: int32(name='RelateAssetCount', example='2'),
    relateDataSourceIds?: any(name='RelateDataSourceIds', example='["siem"]'),
    relateUserIds?: any(name='RelateUserIds', example='["176618589410****","1130916744888****"]'),
    threatLevel?: string(name='ThreatLevel', example='2'),
    threatScore?: string(name='ThreatScore', example='90'),
    updateTime?: long(name='UpdateTime', example='1757386075000'),
  }(name='Incident'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
}

model GetIncidentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIncidentResponseBody(name='body'),
}

/**
 * @summary 获取事件列表
 *
 * @param request GetIncidentRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetIncidentResponse
 */
@context("getIncidentWithContext")
async function getIncidentWithOptions(request: GetIncidentRequest, runtime: $RuntimeOptions): GetIncidentResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.incidentUuid)) {
    body['IncidentUuid'] = request.incidentUuid;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetIncident',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取事件列表
 *
 * @param request GetIncidentRequest
 * @return GetIncidentResponse
 */
async function getIncident(request: GetIncidentRequest): GetIncidentResponse {
  var runtime = new $RuntimeOptions{};
  return getIncidentWithOptions(request, runtime);
}

model GetLogTicketRequest {
  lang?: string(name='Lang', example='zh。'),
  logUserId?: long(name='LogUserId', example='173326*******。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model GetLogTicketResponseBody = {
  logTicket?: string(name='LogTicket', example='*******。'),
  requestId?: string(name='RequestId', example='173326*******。'),
}

model GetLogTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetLogTicketResponseBody(name='body'),
}

/**
 * @summary 查看LogStore
 *
 * @param request GetLogTicketRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetLogTicketResponse
 */
@context("getLogTicketWithContext")
async function getLogTicketWithOptions(request: GetLogTicketRequest, runtime: $RuntimeOptions): GetLogTicketResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logUserId)) {
    body['LogUserId'] = request.logUserId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetLogTicket',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查看LogStore
 *
 * @param request GetLogTicketRequest
 * @return GetLogTicketResponse
 */
async function getLogTicket(request: GetLogTicketRequest): GetLogTicketResponse {
  var runtime = new $RuntimeOptions{};
  return getLogTicketWithOptions(request, runtime);
}

model GetNormalizationRuleRequest {
  lang?: string(name='Lang', example='zh。'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model GetNormalizationRuleResponseBody = {
  normalizationRule?: {
    createTime?: long(name='CreateTime', example='1733269771123。'),
    extendContentPacked?: string(name='ExtendContentPacked'),
    normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
    normalizationRuleDescription?: string(name='NormalizationRuleDescription', example='normalization_rule_Z57np。'),
    normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\\\"[\\\\s\\\\S]+\\\\" as extend_content。'),
    normalizationRuleFormat?: string(name='NormalizationRuleFormat', example='SPL。'),
    normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
    normalizationRuleIds?: [ string ](name='NormalizationRuleIds'),
    normalizationRuleMode?: string(name='NormalizationRuleMode', example='both。'),
    normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。'),
    normalizationRuleStatus?: string(name='NormalizationRuleStatus', example='started。'),
    normalizationRuleType?: string(name='NormalizationRuleType', example='predefined。'),
    normalizationRuleVersion?: int32(name='NormalizationRuleVersion', example='V1。'),
    normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
    orderField?: string(name='OrderField'),
    productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
    updateTime?: long(name='UpdateTime', example='1733269771123。'),
    vendorId?: string(name='VendorId', example='alibaba_cloud。'),
  }(name='NormalizationRule'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model GetNormalizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNormalizationRuleResponseBody(name='body'),
}

/**
 * @summary 获取标准化规则
 *
 * @param request GetNormalizationRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNormalizationRuleResponse
 */
@context("getNormalizationRuleWithContext")
async function getNormalizationRuleWithOptions(request: GetNormalizationRuleRequest, runtime: $RuntimeOptions): GetNormalizationRuleResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.normalizationRuleId)) {
    body['NormalizationRuleId'] = request.normalizationRuleId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetNormalizationRule',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取标准化规则
 *
 * @param request GetNormalizationRuleRequest
 * @return GetNormalizationRuleResponse
 */
async function getNormalizationRule(request: GetNormalizationRuleRequest): GetNormalizationRuleResponse {
  var runtime = new $RuntimeOptions{};
  return getNormalizationRuleWithOptions(request, runtime);
}

model GetNormalizationRuleVersionRequest {
  lang?: string(name='Lang', example='zh。'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
  normalizationRuleVersion?: int32(name='NormalizationRuleVersion', example='1。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model GetNormalizationRuleVersionResponseBody = {
  normalizationRuleVersion?: {
    createTime?: long(name='CreateTime', example='1733269771123。'),
    normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
    normalizationRuleDescription?: string(name='NormalizationRuleDescription', example='normalization_rule_Z57np。'),
    normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\\\"[\\\\s\\\\S]+\\\\" as extend_content。'),
    normalizationRuleFormat?: string(name='NormalizationRuleFormat', example='SPL。'),
    normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
    normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。'),
    normalizationRuleStatus?: string(name='NormalizationRuleStatus', example='started。'),
    normalizationRuleType?: string(name='NormalizationRuleType', example='predefined。'),
    normalizationRuleVersion?: int32(name='NormalizationRuleVersion', example='V1。'),
    normalizationRuleVersionName?: string(name='NormalizationRuleVersionName'),
    normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
    productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
    regionId?: string(name='RegionId'),
    updateTime?: long(name='UpdateTime', example='1733269771123。'),
    vendorId?: string(name='VendorId', example='alibaba_cloud。'),
  }(name='NormalizationRuleVersion'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model GetNormalizationRuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNormalizationRuleVersionResponseBody(name='body'),
}

/**
 * @summary 获取标准化规则指定版本信息
 *
 * @param request GetNormalizationRuleVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNormalizationRuleVersionResponse
 */
@context("getNormalizationRuleVersionWithContext")
async function getNormalizationRuleVersionWithOptions(request: GetNormalizationRuleVersionRequest, runtime: $RuntimeOptions): GetNormalizationRuleVersionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.normalizationRuleId)) {
    body['NormalizationRuleId'] = request.normalizationRuleId;
  }
  if (!$isNull(request.normalizationRuleVersion)) {
    body['NormalizationRuleVersion'] = request.normalizationRuleVersion;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetNormalizationRuleVersion',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取标准化规则指定版本信息
 *
 * @param request GetNormalizationRuleVersionRequest
 * @return GetNormalizationRuleVersionResponse
 */
async function getNormalizationRuleVersion(request: GetNormalizationRuleVersionRequest): GetNormalizationRuleVersionResponse {
  var runtime = new $RuntimeOptions{};
  return getNormalizationRuleVersionWithOptions(request, runtime);
}

model GetNormalizationSchemaRequest {
  lang?: string(name='Lang', example='zh。'),
  normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
  normalizationSchemaType?: string(name='NormalizationSchemaType', example='log。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model GetNormalizationSchemaResponseBody = {
  normalizationSchema?: {
    createTime?: long(name='CreateTime'),
    normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
    normalizationFields?: [ 
      {
        normalizationFieldDescription?: string(name='NormalizationFieldDescription', example='cloud_user。'),
        normalizationFieldExample?: string(name='NormalizationFieldExample', example='173326*******。'),
        normalizationFieldName?: string(name='NormalizationFieldName', example='cloud_user。'),
        normalizationFieldRequirement?: boolean(name='NormalizationFieldRequirement', example='true。'),
        normalizationFieldReserved?: boolean(name='NormalizationFieldReserved', example='true。'),
        normalizationFieldType?: string(name='NormalizationFieldType', example='varchar。'),
      }
    ](name='NormalizationFields'),
    normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
    normalizationSchemaName?: string(name='NormalizationSchemaName', example='normalization_rule_Z57np。'),
    normalizationSchemaType?: string(name='NormalizationSchemaType'),
    targetLogStore?: string(name='TargetLogStore', example='network-activity。'),
    targetStoreView?: string(name='TargetStoreView', example='network_activity。'),
    updateTime?: long(name='UpdateTime'),
  }(name='NormalizationSchema'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model GetNormalizationSchemaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetNormalizationSchemaResponseBody(name='body'),
}

/**
 * @summary 获取Schema信息以及字段
 *
 * @param request GetNormalizationSchemaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetNormalizationSchemaResponse
 */
@context("getNormalizationSchemaWithContext")
async function getNormalizationSchemaWithOptions(request: GetNormalizationSchemaRequest, runtime: $RuntimeOptions): GetNormalizationSchemaResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.normalizationSchemaId)) {
    body['NormalizationSchemaId'] = request.normalizationSchemaId;
  }
  if (!$isNull(request.normalizationSchemaType)) {
    body['NormalizationSchemaType'] = request.normalizationSchemaType;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetNormalizationSchema',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取Schema信息以及字段
 *
 * @param request GetNormalizationSchemaRequest
 * @return GetNormalizationSchemaResponse
 */
async function getNormalizationSchema(request: GetNormalizationSchemaRequest): GetNormalizationSchemaResponse {
  var runtime = new $RuntimeOptions{};
  return getNormalizationSchemaWithOptions(request, runtime);
}

model GetUserConfigRequest {
  lang?: string(name='Lang', example='en'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: string(name='RoleFor', example='173326*******'),
}

model GetUserConfigResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
  user?: {
    ctdrVersion?: string(name='CtdrVersion', example='v2'),
    dataStorageVersion?: string(name='DataStorageVersion', example='pending'),
    upgradeCtdrVersion?: string(name='UpgradeCtdrVersion', example='v2'),
    upgradeStatus?: string(name='UpgradeStatus', example='v2'),
  }(name='User'),
}

model GetUserConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetUserConfigResponseBody(name='body'),
}

/**
 * @summary 获取用户配置信息
 *
 * @param request GetUserConfigRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetUserConfigResponse
 */
@context("getUserConfigWithContext")
async function getUserConfigWithOptions(request: GetUserConfigRequest, runtime: $RuntimeOptions): GetUserConfigResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetUserConfig',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取用户配置信息
 *
 * @param request GetUserConfigRequest
 * @return GetUserConfigResponse
 */
async function getUserConfig(request: GetUserConfigRequest): GetUserConfigResponse {
  var runtime = new $RuntimeOptions{};
  return getUserConfigWithOptions(request, runtime);
}

model ListDataIngestionTemplatesRequest {
  dataIngestionTemplateStatus?: string(name='DataIngestionTemplateStatus', example='running。'),
  dataSourceTemplateIds?: string(name='DataSourceTemplateIds', example='alibaba_cloud_sas_account_snapshot_log_173326*******。'),
  lang?: string(name='Lang', example='zh。'),
  pageNumber?: string(name='PageNumber', example='1。'),
  pageSize?: string(name='PageSize', example='10。'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListDataIngestionTemplatesResponseBody = {
  dataIngestionTemplates?: [ 
    {
      capacityCount?: string(name='CapacityCount', example='3。'),
      createTime?: long(name='CreateTime', example='1733269771123。'),
      dataIngestionMode?: string(name='DataIngestionMode', example='realtime。'),
      dataIngestionStatus?: string(name='DataIngestionStatus', example='enabled。'),
      dataIngestionTemplateId?: string(name='DataIngestionTemplateId', example='alibaba_cloud_sas_account_snapshot_log。'),
      dataIngestionTemplateName?: string(name='DataIngestionTemplateName', example='alibaba_cloud_sas_account_snapshot_log。'),
      dataIngestionTemplateStatus?: string(name='DataIngestionTemplateStatus', example='running。'),
      dataSourceTemplateId?: string(name='DataSourceTemplateId', example='alibaba_cloud_sas_account_snapshot_log_173326*******。'),
      normalizationRuleId?: string(name='NormalizationRuleId', example='alibaba_cloud_actiontrail_event_rule。'),
      normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_ke1RN。'),
      updateTime?: long(name='UpdateTime', example='173326*******。'),
    }
  ](name='DataIngestionTemplates'),
  pageNumber?: string(name='PageNumber', example='1。'),
  pageSize?: string(name='PageSize', example='10。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model ListDataIngestionTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataIngestionTemplatesResponseBody(name='body'),
}

/**
 * @summary 查询接入模板
 *
 * @param request ListDataIngestionTemplatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataIngestionTemplatesResponse
 */
@context("listDataIngestionTemplatesWithContext")
async function listDataIngestionTemplatesWithOptions(request: ListDataIngestionTemplatesRequest, runtime: $RuntimeOptions): ListDataIngestionTemplatesResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataIngestionTemplateStatus)) {
    body['DataIngestionTemplateStatus'] = request.dataIngestionTemplateStatus;
  }
  if (!$isNull(request.dataSourceTemplateIds)) {
    body['DataSourceTemplateIds'] = request.dataSourceTemplateIds;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataIngestionTemplates',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询接入模板
 *
 * @param request ListDataIngestionTemplatesRequest
 * @return ListDataIngestionTemplatesResponse
 */
async function listDataIngestionTemplates(request: ListDataIngestionTemplatesRequest): ListDataIngestionTemplatesResponse {
  var runtime = new $RuntimeOptions{};
  return listDataIngestionTemplatesWithOptions(request, runtime);
}

model ListDataIngestionsRequest {
  dataIngestionIds?: [ string ](name='DataIngestionIds'),
  dataIngestionStatus?: string(name='DataIngestionStatus', example='enabled。'),
  dataIngestionTemplateIds?: [ string ](name='DataIngestionTemplateIds'),
  lang?: string(name='Lang', example='zh。'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListDataIngestionsShrinkRequest {
  dataIngestionIdsShrink?: string(name='DataIngestionIds'),
  dataIngestionStatus?: string(name='DataIngestionStatus', example='enabled。'),
  dataIngestionTemplateIdsShrink?: string(name='DataIngestionTemplateIds'),
  lang?: string(name='Lang', example='zh。'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListDataIngestionsResponseBody = {
  dataIngestions?: [ 
    {
      activeTime?: long(name='ActiveTime', example='1733269771123。'),
      capacityCount?: int32(name='CapacityCount', example='3。'),
      createTime?: long(name='CreateTime', example='1733269771123。'),
      dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_sas_netstat_ingestion_173326*******。'),
      dataIngestionMode?: string(name='DataIngestionMode', example='realtime。'),
      dataIngestionModeEditable?: boolean(name='DataIngestionModeEditable', example='true。'),
      dataIngestionState?: string(name='DataIngestionState', example='ingested。'),
      dataIngestionStateCode?: string(name='DataIngestionStateCode', example='UserUnauthorized。'),
      dataIngestionStatus?: string(name='DataIngestionStatus', example='enabled。'),
      dataIngestionTemplateId?: string(name='DataIngestionTemplateId', example='alibaba_cloud_sas_netstat_ingestion。'),
      dataIngestionType?: string(name='DataIngestionType', example='preset。'),
      dataSourceEditable?: boolean(name='DataSourceEditable', example='true。'),
      dataSourceId?: string(name='DataSourceId', example='ds-scpfegri73oyoknbc90c。'),
      normalizationRuleEditable?: boolean(name='NormalizationRuleEditable', example='true。'),
      normalizationRuleId?: string(name='NormalizationRuleId', example='nr-0aywiqdtaqdvwac7xkbjsf3a。'),
      realtimeDataSourceId?: string(name='RealtimeDataSourceId', example='ds-scpfegri73oyoknbc90c。'),
      scanDataSourceId?: string(name='ScanDataSourceId', example='ds-scpfegri73oyoknbc90c。'),
      streamJobId?: string(name='StreamJobId', example='73a78aa245e3b1299d6ceed093de7bd8。'),
      updateTime?: long(name='UpdateTime', example='1733269771123。'),
    }
  ](name='DataIngestions'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model ListDataIngestionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataIngestionsResponseBody(name='body'),
}

/**
 * @summary 获取数据接入任务列表
 *
 * @param tmpReq ListDataIngestionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataIngestionsResponse
 */
@context("listDataIngestionsWithContext")
async function listDataIngestionsWithOptions(tmpReq: ListDataIngestionsRequest, runtime: $RuntimeOptions): ListDataIngestionsResponse {
  tmpReq.validate();
  var request = new ListDataIngestionsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dataIngestionIds)) {
    request.dataIngestionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataIngestionIds, 'DataIngestionIds', 'simple');
  }
  if (!$isNull(tmpReq.dataIngestionTemplateIds)) {
    request.dataIngestionTemplateIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataIngestionTemplateIds, 'DataIngestionTemplateIds', 'simple');
  }
  var body : map[string]any = {};
  if (!$isNull(request.dataIngestionIdsShrink)) {
    body['DataIngestionIds'] = request.dataIngestionIdsShrink;
  }
  if (!$isNull(request.dataIngestionStatus)) {
    body['DataIngestionStatus'] = request.dataIngestionStatus;
  }
  if (!$isNull(request.dataIngestionTemplateIdsShrink)) {
    body['DataIngestionTemplateIds'] = request.dataIngestionTemplateIdsShrink;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataIngestions',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据接入任务列表
 *
 * @param request ListDataIngestionsRequest
 * @return ListDataIngestionsResponse
 */
async function listDataIngestions(request: ListDataIngestionsRequest): ListDataIngestionsResponse {
  var runtime = new $RuntimeOptions{};
  return listDataIngestionsWithOptions(request, runtime);
}

model ListDataSetRecordsRequest {
  dataSetId?: string(name='DataSetId', description='This parameter is required.', example='dataset-nhcrmjpx1zsorlaq****'),
  lang?: string(name='Lang', example='zh'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  pageNumber?: int32(name='PageNumber', description='This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model ListDataSetRecordsResponseBody = {
  dataSetRecords?: [ 
    {
      createTime?: long(name='CreateTime', example='1658974643000'),
      dataSetId?: string(name='DataSetId', example='dataset-t8ha6p7k61rmniqw****'),
      dataSetName?: string(name='DataSetName', example='lmftest'),
      dataSetRecordId?: string(name='DataSetRecordId', example='124566'),
      dataSetRecordValues?: string(name='DataSetRecordValues'),
      updateTime?: long(name='UpdateTime', example='1658974643000'),
    }
  ](name='DataSetRecords'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
  totalCount?: int32(name='TotalCount', example='57'),
}

model ListDataSetRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSetRecordsResponseBody(name='body'),
}

/**
 * @summary 获取数据集记录列表
 *
 * @param request ListDataSetRecordsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSetRecordsResponse
 */
@context("listDataSetRecordsWithContext")
async function listDataSetRecordsWithOptions(request: ListDataSetRecordsRequest, runtime: $RuntimeOptions): ListDataSetRecordsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataSetId)) {
    body['DataSetId'] = request.dataSetId;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataSetRecords',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据集记录列表
 *
 * @param request ListDataSetRecordsRequest
 * @return ListDataSetRecordsResponse
 */
async function listDataSetRecords(request: ListDataSetRecordsRequest): ListDataSetRecordsResponse {
  var runtime = new $RuntimeOptions{};
  return listDataSetRecordsWithOptions(request, runtime);
}

model ListDataSetsRequest {
  dataSetId?: string(name='DataSetId', example='dataset-qt0n8246gs9nackg****'),
  dataSetIds?: [ string ](name='DataSetIds'),
  dataSetName?: string(name='DataSetName', example='lmftest'),
  dataSetStatus?: int32(name='DataSetStatus', example='0'),
  dataSetType?: string(name='DataSetType', example='custom'),
  lang?: string(name='Lang', example='zh'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  orderDirection?: string(name='OrderDirection', example='asc'),
  orderFieldName?: string(name='OrderFieldName', example='GmtCreate'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model ListDataSetsShrinkRequest {
  dataSetId?: string(name='DataSetId', example='dataset-qt0n8246gs9nackg****'),
  dataSetIdsShrink?: string(name='DataSetIds'),
  dataSetName?: string(name='DataSetName', example='lmftest'),
  dataSetStatus?: int32(name='DataSetStatus', example='0'),
  dataSetType?: string(name='DataSetType', example='custom'),
  lang?: string(name='Lang', example='zh'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  orderDirection?: string(name='OrderDirection', example='asc'),
  orderFieldName?: string(name='OrderFieldName', example='GmtCreate'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model ListDataSetsResponseBody = {
  dataSets?: [ 
    {
      createTime?: long(name='CreateTime', example='1713787368000'),
      dataSetDescription?: string(name='DataSetDescription', example='lmftest desc'),
      dataSetFieldKeyName?: string(name='DataSetFieldKeyName', example='ip'),
      dataSetFieldNames?: string(name='DataSetFieldNames', example='["ip","region"]'),
      dataSetFileName?: string(name='DataSetFileName', example='cloudsiem-dataset/1358117679873357_174338773****.csv'),
      dataSetId?: string(name='DataSetId', example='dataset-t8ha6p7k61rmniqw****'),
      dataSetName?: string(name='DataSetName', example='lmftest'),
      dataSetReferences?: [ 
        {
          dataSetId?: string(name='DataSetId', example='dataset-nhcrmjpx1zsorlaq****'),
          dataSetReferenceId?: string(name='DataSetReferenceId', example='456232'),
          dataSetReferenceName?: string(name='DataSetReferenceName', example='playbook_name'),
          dataSetReferenceType?: string(name='DataSetReferenceType', example='playbook'),
        }
      ](name='DataSetReferences'),
      dataSetStatus?: int32(name='DataSetStatus', example='1'),
      dataSetType?: string(name='DataSetType', example='preset'),
      ipWhitelistRecognizers?: [ 
        {
          autoRecognizeStatus?: string(name='AutoRecognizeStatus', example='enabled'),
          ipWhitelistRecognizerType?: string(name='IpWhitelistRecognizerType', example='waf_back_source_ip'),
          recognizeScope?: string(name='RecognizeScope', example='current_account'),
          updateTime?: long(name='UpdateTime', example='1713787368000'),
        }
      ](name='IpWhitelistRecognizers'),
      updateTime?: long(name='UpdateTime', example='1713787368000'),
    }
  ](name='DataSets'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='157CFBB5-B56F-566F-8991-B3C51799****'),
  totalCount?: int32(name='TotalCount', example='57'),
}

model ListDataSetsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSetsResponseBody(name='body'),
}

/**
 * @summary 获取数据集列表
 *
 * @param tmpReq ListDataSetsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSetsResponse
 */
@context("listDataSetsWithContext")
async function listDataSetsWithOptions(tmpReq: ListDataSetsRequest, runtime: $RuntimeOptions): ListDataSetsResponse {
  tmpReq.validate();
  var request = new ListDataSetsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dataSetIds)) {
    request.dataSetIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataSetIds, 'DataSetIds', 'simple');
  }
  var body : map[string]any = {};
  if (!$isNull(request.dataSetId)) {
    body['DataSetId'] = request.dataSetId;
  }
  if (!$isNull(request.dataSetIdsShrink)) {
    body['DataSetIds'] = request.dataSetIdsShrink;
  }
  if (!$isNull(request.dataSetName)) {
    body['DataSetName'] = request.dataSetName;
  }
  if (!$isNull(request.dataSetStatus)) {
    body['DataSetStatus'] = request.dataSetStatus;
  }
  if (!$isNull(request.dataSetType)) {
    body['DataSetType'] = request.dataSetType;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.orderDirection)) {
    body['OrderDirection'] = request.orderDirection;
  }
  if (!$isNull(request.orderFieldName)) {
    body['OrderFieldName'] = request.orderFieldName;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataSets',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取数据集列表
 *
 * @param request ListDataSetsRequest
 * @return ListDataSetsResponse
 */
async function listDataSets(request: ListDataSetsRequest): ListDataSetsResponse {
  var runtime = new $RuntimeOptions{};
  return listDataSetsWithOptions(request, runtime);
}

model ListDataSourceTemplatesRequest {
  dataSourceTemplateIds?: [ string ](name='DataSourceTemplateIds'),
  lang?: string(name='Lang', example='zh。'),
  pageNumber?: string(name='PageNumber', example='1。'),
  pageSize?: string(name='PageSize', example='10。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListDataSourceTemplatesShrinkRequest {
  dataSourceTemplateIdsShrink?: string(name='DataSourceTemplateIds'),
  lang?: string(name='Lang', example='zh。'),
  pageNumber?: string(name='PageNumber', example='1。'),
  pageSize?: string(name='PageSize', example='10。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListDataSourceTemplatesResponseBody = {
  dataSourceTemplates?: [ 
    {
      autoScanNew?: string(name='AutoScanNew', example='enabled。'),
      createTime?: long(name='CreateTime', example='1733269771123。'),
      dataSourceFrom?: string(name='DataSourceFrom', example='custom。'),
      dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', example='true。'),
      dataSourceRecognizer?: string(name='DataSourceRecognizer', example='alibaba_cloud_actiontrail_event_ingestion。'),
      dataSourceTemplateId?: string(name='DataSourceTemplateId', example='alibaba_cloud_actiontrail_event_ingestion。'),
      dataSourceTemplateName?: string(name='DataSourceTemplateName', example='alibaba_cloud_actiontrail_event_ingestion。'),
      logProjectPattern?: string(name='LogProjectPattern', example='aliyun-cloudsiem-data-173326*******。'),
      logRegionIds?: [ string ](name='LogRegionIds'),
      logStorePattern?: string(name='LogStorePattern', example='audit-activity。'),
      logUserIds?: [ string ](name='LogUserIds'),
      updateTime?: long(name='UpdateTime', example='2025-01-08 10:28:31'),
    }
  ](name='DataSourceTemplates'),
  pageNumber?: string(name='PageNumber', example='1。'),
  pageSize?: string(name='PageSize', example='10。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model ListDataSourceTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourceTemplatesResponseBody(name='body'),
}

/**
 * @summary 查询数据源模板
 *
 * @param tmpReq ListDataSourceTemplatesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSourceTemplatesResponse
 */
@context("listDataSourceTemplatesWithContext")
async function listDataSourceTemplatesWithOptions(tmpReq: ListDataSourceTemplatesRequest, runtime: $RuntimeOptions): ListDataSourceTemplatesResponse {
  tmpReq.validate();
  var request = new ListDataSourceTemplatesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dataSourceTemplateIds)) {
    request.dataSourceTemplateIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataSourceTemplateIds, 'DataSourceTemplateIds', 'simple');
  }
  var body : map[string]any = {};
  if (!$isNull(request.dataSourceTemplateIdsShrink)) {
    body['DataSourceTemplateIds'] = request.dataSourceTemplateIdsShrink;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataSourceTemplates',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询数据源模板
 *
 * @param request ListDataSourceTemplatesRequest
 * @return ListDataSourceTemplatesResponse
 */
async function listDataSourceTemplates(request: ListDataSourceTemplatesRequest): ListDataSourceTemplatesResponse {
  var runtime = new $RuntimeOptions{};
  return listDataSourceTemplatesWithOptions(request, runtime);
}

model ListDataSourcesRequest {
  dataSourceFrom?: string(name='DataSourceFrom', example='center。'),
  dataSourceIds?: [ string ](name='DataSourceIds'),
  dataSourceName?: string(name='DataSourceName', example='alibaba_cloud_waf_alert_log。'),
  dataSourceStatus?: string(name='DataSourceStatus'),
  dataSourceStoreStatus?: string(name='DataSourceStoreStatus'),
  dataSourceTemplateIds?: [ string ](name='DataSourceTemplateIds'),
  dataSourceType?: string(name='DataSourceType', example='custom。'),
  lang?: string(name='Lang', example='zh。'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
  logStoreName?: string(name='LogStoreName', example='audit-activity。'),
  logUserIds?: [ long ](name='LogUserIds'),
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  order?: string(name='Order', example='desc。'),
  orderField?: string(name='OrderField', example='UpdateTime。'),
  pageNumber?: string(name='PageNumber', example='1。'),
  pageSize?: string(name='PageSize', example='5。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListDataSourcesShrinkRequest {
  dataSourceFrom?: string(name='DataSourceFrom', example='center。'),
  dataSourceIdsShrink?: string(name='DataSourceIds'),
  dataSourceName?: string(name='DataSourceName', example='alibaba_cloud_waf_alert_log。'),
  dataSourceStatus?: string(name='DataSourceStatus'),
  dataSourceStoreStatus?: string(name='DataSourceStoreStatus'),
  dataSourceTemplateIdsShrink?: string(name='DataSourceTemplateIds'),
  dataSourceType?: string(name='DataSourceType', example='custom。'),
  lang?: string(name='Lang', example='zh。'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
  logStoreName?: string(name='LogStoreName', example='audit-activity。'),
  logUserIdsShrink?: string(name='LogUserIds'),
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  order?: string(name='Order', example='desc。'),
  orderField?: string(name='OrderField', example='UpdateTime。'),
  pageNumber?: string(name='PageNumber', example='1。'),
  pageSize?: string(name='PageSize', example='5。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListDataSourcesResponseBody = {
  dataSources?: [ 
    {
      createTime?: long(name='CreateTime', example='1733269771123。'),
      dataSourceFrom?: string(name='DataSourceFrom', example='center。'),
      dataSourceId?: string(name='DataSourceId', example='ds-scpfegri73oyoknbc90c。'),
      dataSourceName?: string(name='DataSourceName', example='AD_LOG。'),
      dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', example='true。'),
      dataSourceRecognizer?: string(name='DataSourceRecognizer', example='alibaba_cloud_sas_account_snapshot。'),
      dataSourceReferences?: [ 
        {
          dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_sas_account_snapshot_log_173326*******。'),
        }
      ](name='DataSourceReferences'),
      dataSourceStatus?: string(name='DataSourceStatus'),
      dataSourceStores?: [ 
        {
          checkTime?: long(name='CheckTime'),
          createTime?: long(name='CreateTime', example='1733269771123。'),
          dataSourceStoreFrom?: string(name='DataSourceStoreFrom', example='center。'),
          dataSourceStoreId?: string(name='DataSourceStoreId', example='di_xxxx_source_1。'),
          dataSourceStoreStatus?: string(name='DataSourceStoreStatus', example='normal。'),
          logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
          logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
          logStoreName?: string(name='LogStoreName', example='audit-activity。'),
          updateTime?: long(name='UpdateTime', example='1733269771123。'),
        }
      ](name='DataSourceStores'),
      dataSourceTemplateId?: string(name='DataSourceTemplateId', example='alibaba_cloud_sas_account_snapshot_log_173326*******。'),
      dataSourceType?: string(name='DataSourceType', example='custom。'),
      logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
      logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
      logStoreName?: string(name='LogStoreName', example='audit-activity。'),
      logUserId?: long(name='LogUserId', example='173326*******。'),
      updateTime?: long(name='UpdateTime', example='1733269771123。'),
    }
  ](name='DataSources'),
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  pageNumber?: int32(name='PageNumber', example='1。'),
  pageSize?: int32(name='PageSize', example='1。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='2。'),
  totalPage?: int32(name='TotalPage', example='1。'),
}

model ListDataSourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDataSourcesResponseBody(name='body'),
}

/**
 * @summary 获取厂商列表
 *
 * @param tmpReq ListDataSourcesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDataSourcesResponse
 */
@context("listDataSourcesWithContext")
async function listDataSourcesWithOptions(tmpReq: ListDataSourcesRequest, runtime: $RuntimeOptions): ListDataSourcesResponse {
  tmpReq.validate();
  var request = new ListDataSourcesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dataSourceIds)) {
    request.dataSourceIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataSourceIds, 'DataSourceIds', 'simple');
  }
  if (!$isNull(tmpReq.dataSourceTemplateIds)) {
    request.dataSourceTemplateIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataSourceTemplateIds, 'DataSourceTemplateIds', 'simple');
  }
  if (!$isNull(tmpReq.logUserIds)) {
    request.logUserIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.logUserIds, 'LogUserIds', 'simple');
  }
  var body : map[string]any = {};
  if (!$isNull(request.dataSourceFrom)) {
    body['DataSourceFrom'] = request.dataSourceFrom;
  }
  if (!$isNull(request.dataSourceIdsShrink)) {
    body['DataSourceIds'] = request.dataSourceIdsShrink;
  }
  if (!$isNull(request.dataSourceName)) {
    body['DataSourceName'] = request.dataSourceName;
  }
  if (!$isNull(request.dataSourceStatus)) {
    body['DataSourceStatus'] = request.dataSourceStatus;
  }
  if (!$isNull(request.dataSourceStoreStatus)) {
    body['DataSourceStoreStatus'] = request.dataSourceStoreStatus;
  }
  if (!$isNull(request.dataSourceTemplateIdsShrink)) {
    body['DataSourceTemplateIds'] = request.dataSourceTemplateIdsShrink;
  }
  if (!$isNull(request.dataSourceType)) {
    body['DataSourceType'] = request.dataSourceType;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logProjectName)) {
    body['LogProjectName'] = request.logProjectName;
  }
  if (!$isNull(request.logRegionId)) {
    body['LogRegionId'] = request.logRegionId;
  }
  if (!$isNull(request.logStoreName)) {
    body['LogStoreName'] = request.logStoreName;
  }
  if (!$isNull(request.logUserIdsShrink)) {
    body['LogUserIds'] = request.logUserIdsShrink;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.order)) {
    body['Order'] = request.order;
  }
  if (!$isNull(request.orderField)) {
    body['OrderField'] = request.orderField;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDataSources',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取厂商列表
 *
 * @param request ListDataSourcesRequest
 * @return ListDataSourcesResponse
 */
async function listDataSources(request: ListDataSourcesRequest): ListDataSourcesResponse {
  var runtime = new $RuntimeOptions{};
  return listDataSourcesWithOptions(request, runtime);
}

model ListDetectionRulesRequest {
  alertAttCk?: string(name='AlertAttCk', example='Discovery'),
  alertLevel?: string(name='AlertLevel', example='1'),
  alertTacticId?: string(name='AlertTacticId', example='TA0042'),
  alertType?: string(name='AlertType', example='siem_rule_type_alert_storm'),
  detectionExpressionType?: string(name='DetectionExpressionType', example='playbook'),
  detectionRuleId?: string(name='DetectionRuleId', example='dr-ppa85gfw69tgwkys****'),
  detectionRuleIds?: [ string ](name='DetectionRuleIds'),
  detectionRuleName?: string(name='DetectionRuleName', example='Detect Discovery Behavior for Local Systems Groups'),
  detectionRuleStatus?: string(name='DetectionRuleStatus', example='enabled'),
  detectionRuleType?: string(name='DetectionRuleType', example='preset'),
  incidentAggregationType?: string(name='IncidentAggregationType', example='graph_compute'),
  lang?: string(name='Lang', example='zh'),
  logCategoryId?: string(name='LogCategoryId', example='NETWORK_CATEGORY'),
  logSchemaId?: string(name='LogSchemaId', example='API_RISK_ACTIVITY'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  orderDirection?: string(name='OrderDirection', example='asc'),
  orderFieldName?: string(name='OrderFieldName', example='GmtModified'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model ListDetectionRulesShrinkRequest {
  alertAttCk?: string(name='AlertAttCk', example='Discovery'),
  alertLevel?: string(name='AlertLevel', example='1'),
  alertTacticId?: string(name='AlertTacticId', example='TA0042'),
  alertType?: string(name='AlertType', example='siem_rule_type_alert_storm'),
  detectionExpressionType?: string(name='DetectionExpressionType', example='playbook'),
  detectionRuleId?: string(name='DetectionRuleId', example='dr-ppa85gfw69tgwkys****'),
  detectionRuleIdsShrink?: string(name='DetectionRuleIds'),
  detectionRuleName?: string(name='DetectionRuleName', example='Detect Discovery Behavior for Local Systems Groups'),
  detectionRuleStatus?: string(name='DetectionRuleStatus', example='enabled'),
  detectionRuleType?: string(name='DetectionRuleType', example='preset'),
  incidentAggregationType?: string(name='IncidentAggregationType', example='graph_compute'),
  lang?: string(name='Lang', example='zh'),
  logCategoryId?: string(name='LogCategoryId', example='NETWORK_CATEGORY'),
  logSchemaId?: string(name='LogSchemaId', example='API_RISK_ACTIVITY'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  orderDirection?: string(name='OrderDirection', example='asc'),
  orderFieldName?: string(name='OrderFieldName', example='GmtModified'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='100'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model ListDetectionRulesResponseBody = {
  detectionRules?: [ 
    {
      alertAttCk?: string(name='AlertAttCk', example='Discovery'),
      alertLevel?: string(name='AlertLevel', example='1'),
      alertSchemaId?: string(name='AlertSchemaId', example='ALERT_ACTIVITY'),
      alertTacticId?: string(name='AlertTacticId', example='TA0042'),
      alertThresholdCount?: int32(name='AlertThresholdCount', example='10'),
      alertThresholdGroup?: string(name='AlertThresholdGroup', example='alert_type,ip'),
      alertThresholdPeriod?: string(name='AlertThresholdPeriod', example='5m'),
      alertType?: string(name='AlertType', example='WebShell'),
      createTime?: long(name='CreateTime', example='2023-03-21 13:47:01'),
      detectionExpressionContent?: string(name='DetectionExpressionContent', example='*|set session mode=scan;SELECT * FROM log
WHERE schema = \\\\"PROCESS_START_ACTIVITY\\\\"
AND (
    proc_path LIKE \\\\"%/groups\\\\"
    OR (
        (
            proc_path LIKE \\\\"%/cat\\\\"
            OR proc_path LIKE \\\\"%/head\\\\"
            OR proc_path LIKE \\\\"%/tail\\\\"
            OR proc_path LIKE \\\\"%/more\\\\"
        )
        AND cmdline LIKE \\\\"%/etc/group%\\\\"
    )
)'),
      detectionExpressionType?: string(name='DetectionExpressionType', example='playbook'),
      detectionRuleDescription?: string(name='DetectionRuleDescription', example='Check the enumeration behavior of local system groups. An attacker may attempt to find the Local Systems group and its permission settings.'),
      detectionRuleId?: string(name='DetectionRuleId', example='jndi-attack-success_http_netstat'),
      detectionRuleName?: string(name='DetectionRuleName', example='Detect Discovery Behavior for Local Systems Groups'),
      detectionRuleStatus?: string(name='DetectionRuleStatus', example='enabled'),
      detectionRuleType?: string(name='DetectionRuleType', example='custom'),
      entityMappings?: [ 
        {
          normalizationFieldMappings?: [ 
            {
              mappingFieldName?: string(name='MappingFieldName', example='ip'),
              normalizationFieldName?: string(name='NormalizationFieldName', example='src_ip'),
              normalizationFieldType?: string(name='NormalizationFieldType', example='vachar'),
            }
          ](name='NormalizationFieldMappings'),
          normalizationSchemaId?: string(name='NormalizationSchemaId', example='ip'),
        }
      ](name='EntityMappings'),
      incidentAggregationExpression?: string(name='IncidentAggregationExpression', example='5m'),
      incidentAggregationType?: string(name='IncidentAggregationType', example='passthrough'),
      logCategoryId?: string(name='LogCategoryId', example='NETWORK_CATEGORY'),
      logSchemaId?: string(name='LogSchemaId', example='API_RISK_ACTIVITY'),
      playbook?: {
        config?: string(name='Config', example='[
    {
        "name": "expireDay",
        "dataType": "Integer",
        "required": true,
        "isArray": false,
        "example": "7",
        "description": "desc",
        "typeName": "Integer",
        "dataClass": "normal",
        "stanchDefaultValue": "7"
    }
]'),
        flow?: string(name='Flow', example='[
    {
        "id": "EndEvent_1fqpq4h",
        "zIndex": 1,
        "data": {
            "nodeType": "endEvent",
            "appType": "basic",
            "valueData": {

            },
            "icon": "icon-radio-off-full"
        },
        "position": {
            "x": 1369,
            "y": 174
        }
    }
]'),
      }(name='Playbook'),
      playbookParameters?: string(name='PlaybookParameters', example='{
    "ip": {
        "ip": "124.23.*.*"
    }
}'),
      playbookUuid?: string(name='PlaybookUuid', example='dde983ed-eb56-45ea-ac2e-3b12b2a9****'),
      scheduleBeginTime?: long(name='ScheduleBeginTime', example='1733269771123'),
      scheduleExpression?: string(name='ScheduleExpression', example='5m'),
      scheduleMaxRetries?: int32(name='ScheduleMaxRetries', example='1'),
      scheduleMaxTimeout?: int32(name='ScheduleMaxTimeout', example='60'),
      scheduleType?: string(name='ScheduleType', example='fixed_rate'),
      scheduleWindow?: string(name='ScheduleWindow', example='5m'),
      updateTime?: long(name='UpdateTime', example='2023-04-16 10:51:00'),
    }
  ](name='DetectionRules'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  pageNumber?: int32(name='PageNumber', example='2'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='508DCFFD-4508-54BF-A8A0-E97A0FA6****'),
  totalCount?: int32(name='TotalCount', example='6'),
}

model ListDetectionRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDetectionRulesResponseBody(name='body'),
}

/**
 * @summary 获取检测规则列表
 *
 * @param tmpReq ListDetectionRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListDetectionRulesResponse
 */
@context("listDetectionRulesWithContext")
async function listDetectionRulesWithOptions(tmpReq: ListDetectionRulesRequest, runtime: $RuntimeOptions): ListDetectionRulesResponse {
  tmpReq.validate();
  var request = new ListDetectionRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.detectionRuleIds)) {
    request.detectionRuleIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.detectionRuleIds, 'DetectionRuleIds', 'simple');
  }
  var body : map[string]any = {};
  if (!$isNull(request.alertAttCk)) {
    body['AlertAttCk'] = request.alertAttCk;
  }
  if (!$isNull(request.alertLevel)) {
    body['AlertLevel'] = request.alertLevel;
  }
  if (!$isNull(request.alertTacticId)) {
    body['AlertTacticId'] = request.alertTacticId;
  }
  if (!$isNull(request.alertType)) {
    body['AlertType'] = request.alertType;
  }
  if (!$isNull(request.detectionExpressionType)) {
    body['DetectionExpressionType'] = request.detectionExpressionType;
  }
  if (!$isNull(request.detectionRuleId)) {
    body['DetectionRuleId'] = request.detectionRuleId;
  }
  if (!$isNull(request.detectionRuleIdsShrink)) {
    body['DetectionRuleIds'] = request.detectionRuleIdsShrink;
  }
  if (!$isNull(request.detectionRuleName)) {
    body['DetectionRuleName'] = request.detectionRuleName;
  }
  if (!$isNull(request.detectionRuleStatus)) {
    body['DetectionRuleStatus'] = request.detectionRuleStatus;
  }
  if (!$isNull(request.detectionRuleType)) {
    body['DetectionRuleType'] = request.detectionRuleType;
  }
  if (!$isNull(request.incidentAggregationType)) {
    body['IncidentAggregationType'] = request.incidentAggregationType;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logCategoryId)) {
    body['LogCategoryId'] = request.logCategoryId;
  }
  if (!$isNull(request.logSchemaId)) {
    body['LogSchemaId'] = request.logSchemaId;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.orderDirection)) {
    body['OrderDirection'] = request.orderDirection;
  }
  if (!$isNull(request.orderFieldName)) {
    body['OrderFieldName'] = request.orderFieldName;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListDetectionRules',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取检测规则列表
 *
 * @param request ListDetectionRulesRequest
 * @return ListDetectionRulesResponse
 */
async function listDetectionRules(request: ListDetectionRulesRequest): ListDetectionRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listDetectionRulesWithOptions(request, runtime);
}

model ListIncidentsRequest {
  alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
  endTime?: long(name='EndTime', example='1749090526055'),
  incidentName?: string(name='IncidentName', example='ECS unusual log in'),
  incidentStatus?: int32(name='IncidentStatus', example='0'),
  incidentTags?: string(name='IncidentTags', example='[{\\\\"data_source\\\\":[\\\\"sas\\\\"]}]'),
  incidentUuids?: [ string ](name='IncidentUuids'),
  lang?: string(name='Lang', example='zh'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAASLVeIxed4466E0LVmGkzwS6hJKd9DGVGMDRM6Lu****'),
  orderDirection?: string(name='OrderDirection', example='desc'),
  orderFieldName?: string(name='OrderFieldName', example='GmtModified'),
  pageNumber?: int32(name='PageNumber', description='This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  relateAssetId?: string(name='RelateAssetId', example='6c740667-80b2-476d-8924-2e706feb****'),
  relateEntityId?: string(name='RelateEntityId'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
  roleType?: int32(name='RoleType', example='1'),
  startTime?: long(name='StartTime', example='1690102943000'),
  threatLevel?: [ string ](name='ThreatLevel'),
}

model ListIncidentsShrinkRequest {
  alertUuid?: string(name='AlertUuid', example='sas_71e24437d2797ce8fc59692905a4****'),
  endTime?: long(name='EndTime', example='1749090526055'),
  incidentName?: string(name='IncidentName', example='ECS unusual log in'),
  incidentStatus?: int32(name='IncidentStatus', example='0'),
  incidentTags?: string(name='IncidentTags', example='[{\\\\"data_source\\\\":[\\\\"sas\\\\"]}]'),
  incidentUuidsShrink?: string(name='IncidentUuids'),
  lang?: string(name='Lang', example='zh'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='AAAAASLVeIxed4466E0LVmGkzwS6hJKd9DGVGMDRM6Lu****'),
  orderDirection?: string(name='OrderDirection', example='desc'),
  orderFieldName?: string(name='OrderFieldName', example='GmtModified'),
  pageNumber?: int32(name='PageNumber', description='This parameter is required.', example='1'),
  pageSize?: int32(name='PageSize', description='This parameter is required.', example='10'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  relateAssetId?: string(name='RelateAssetId', example='6c740667-80b2-476d-8924-2e706feb****'),
  relateEntityId?: string(name='RelateEntityId'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
  roleType?: int32(name='RoleType', example='1'),
  startTime?: long(name='StartTime', example='1690102943000'),
  threatLevel?: [ string ](name='ThreatLevel'),
}

model ListIncidentsResponseBody = {
  incidents?: [ 
    {
      createTime?: long(name='CreateTime', example='1603248483000'),
      incidentName?: string(name='IncidentName', example='ECS unusual log in'),
      incidentRemark?: string(name='IncidentRemark', example='remark'),
      incidentStatus?: int32(name='IncidentStatus', example='0'),
      incidentUuid?: string(name='IncidentUuid', example='dbb1d7211c9285c862aa89385098****'),
      relateAlertCount?: int32(name='RelateAlertCount', example='3'),
      relateAssetCount?: int32(name='RelateAssetCount', example='4'),
      threatLevel?: string(name='ThreatLevel', example='2'),
      updateTime?: long(name='UpdateTime', example='1603248483000'),
    }
  ](name='Incidents'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
  totalCount?: int32(name='TotalCount', example='57'),
}

model ListIncidentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListIncidentsResponseBody(name='body'),
}

/**
 * @summary 获取事件列表
 *
 * @param tmpReq ListIncidentsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListIncidentsResponse
 */
@context("listIncidentsWithContext")
async function listIncidentsWithOptions(tmpReq: ListIncidentsRequest, runtime: $RuntimeOptions): ListIncidentsResponse {
  tmpReq.validate();
  var request = new ListIncidentsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.incidentUuids)) {
    request.incidentUuidsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.incidentUuids, 'IncidentUuids', 'simple');
  }
  var query = {};
  if (!$isNull(request.incidentName)) {
    query['IncidentName'] = request.incidentName;
  }
  if (!$isNull(request.incidentUuidsShrink)) {
    query['IncidentUuids'] = request.incidentUuidsShrink;
  }
  var body : map[string]any = {};
  if (!$isNull(request.alertUuid)) {
    body['AlertUuid'] = request.alertUuid;
  }
  if (!$isNull(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!$isNull(request.incidentStatus)) {
    body['IncidentStatus'] = request.incidentStatus;
  }
  if (!$isNull(request.incidentTags)) {
    body['IncidentTags'] = request.incidentTags;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.orderDirection)) {
    body['OrderDirection'] = request.orderDirection;
  }
  if (!$isNull(request.orderFieldName)) {
    body['OrderFieldName'] = request.orderFieldName;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.relateAssetId)) {
    body['RelateAssetId'] = request.relateAssetId;
  }
  if (!$isNull(request.relateEntityId)) {
    body['RelateEntityId'] = request.relateEntityId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.roleType)) {
    body['RoleType'] = request.roleType;
  }
  if (!$isNull(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!$isNull(request.threatLevel)) {
    body['ThreatLevel'] = request.threatLevel;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListIncidents',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取事件列表
 *
 * @param request ListIncidentsRequest
 * @return ListIncidentsResponse
 */
async function listIncidents(request: ListIncidentsRequest): ListIncidentsResponse {
  var runtime = new $RuntimeOptions{};
  return listIncidentsWithOptions(request, runtime);
}

model ListLogProjectsRequest {
  lang?: string(name='Lang', example='zh。'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
  logUserId?: long(name='LogUserId', example='173326*******。'),
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListLogProjectsResponseBody = {
  logProjects?: [ string ](name='LogProjects'),
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
}

model ListLogProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLogProjectsResponseBody(name='body'),
}

/**
 * @summary 获取日志Project列表
 *
 * @param request ListLogProjectsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLogProjectsResponse
 */
@context("listLogProjectsWithContext")
async function listLogProjectsWithOptions(request: ListLogProjectsRequest, runtime: $RuntimeOptions): ListLogProjectsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logRegionId)) {
    body['LogRegionId'] = request.logRegionId;
  }
  if (!$isNull(request.logUserId)) {
    body['LogUserId'] = request.logUserId;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListLogProjects',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取日志Project列表
 *
 * @param request ListLogProjectsRequest
 * @return ListLogProjectsResponse
 */
async function listLogProjects(request: ListLogProjectsRequest): ListLogProjectsResponse {
  var runtime = new $RuntimeOptions{};
  return listLogProjectsWithOptions(request, runtime);
}

model ListLogRegionsRequest {
  lang?: string(name='Lang', example='zh。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListLogRegionsResponseBody = {
  logRegions?: [ string ](name='LogRegions'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model ListLogRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLogRegionsResponseBody(name='body'),
}

/**
 * @summary 获取所有的区域
 *
 * @param request ListLogRegionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLogRegionsResponse
 */
@context("listLogRegionsWithContext")
async function listLogRegionsWithOptions(request: ListLogRegionsRequest, runtime: $RuntimeOptions): ListLogRegionsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListLogRegions',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取所有的区域
 *
 * @param request ListLogRegionsRequest
 * @return ListLogRegionsResponse
 */
async function listLogRegions(request: ListLogRegionsRequest): ListLogRegionsResponse {
  var runtime = new $RuntimeOptions{};
  return listLogRegionsWithOptions(request, runtime);
}

model ListLogStoresRequest {
  lang?: string(name='Lang', example='zh。'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
  logUserId?: long(name='LogUserId', example='173326*******。'),
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListLogStoresResponseBody = {
  logStores?: [ string ](name='LogStores'),
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
}

model ListLogStoresResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListLogStoresResponseBody(name='body'),
}

/**
 * @summary 获取日志store列表
 *
 * @param request ListLogStoresRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListLogStoresResponse
 */
@context("listLogStoresWithContext")
async function listLogStoresWithOptions(request: ListLogStoresRequest, runtime: $RuntimeOptions): ListLogStoresResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logProjectName)) {
    body['LogProjectName'] = request.logProjectName;
  }
  if (!$isNull(request.logRegionId)) {
    body['LogRegionId'] = request.logRegionId;
  }
  if (!$isNull(request.logUserId)) {
    body['LogUserId'] = request.logUserId;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListLogStores',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取日志store列表
 *
 * @param request ListLogStoresRequest
 * @return ListLogStoresResponse
 */
async function listLogStores(request: ListLogStoresRequest): ListLogStoresResponse {
  var runtime = new $RuntimeOptions{};
  return listLogStoresWithOptions(request, runtime);
}

model ListNormalizationCategoriesRequest {
  lang?: string(name='Lang', example='zh。'),
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationCategoryType?: string(name='NormalizationCategoryType', example='entity。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListNormalizationCategoriesResponseBody = {
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationCategories?: [ 
    {
      normalizationCategoryId?: string(name='NormalizationCategoryId', example='COMMON_CATEGORY。'),
      normalizationCategoryName?: string(name='NormalizationCategoryName', example='COMMON_CATEGORY。'),
    }
  ](name='NormalizationCategories'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
}

model ListNormalizationCategoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNormalizationCategoriesResponseBody(name='body'),
}

/**
 * @summary 获取标准化目录
 *
 * @param request ListNormalizationCategoriesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNormalizationCategoriesResponse
 */
@context("listNormalizationCategoriesWithContext")
async function listNormalizationCategoriesWithOptions(request: ListNormalizationCategoriesRequest, runtime: $RuntimeOptions): ListNormalizationCategoriesResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.normalizationCategoryType)) {
    body['NormalizationCategoryType'] = request.normalizationCategoryType;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListNormalizationCategories',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取标准化目录
 *
 * @param request ListNormalizationCategoriesRequest
 * @return ListNormalizationCategoriesResponse
 */
async function listNormalizationCategories(request: ListNormalizationCategoriesRequest): ListNormalizationCategoriesResponse {
  var runtime = new $RuntimeOptions{};
  return listNormalizationCategoriesWithOptions(request, runtime);
}

model ListNormalizationFieldsRequest {
  lang?: string(name='Lang', example='zh。'),
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  name?: string(name='Name', example='category。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListNormalizationFieldsResponseBody = {
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationFields?: [ 
    {
      normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
      normalizationFieldDescription?: string(name='NormalizationFieldDescription', example='cloud_user。'),
      normalizationFieldExample?: string(name='NormalizationFieldExample', example='173326*******。'),
      normalizationFieldName?: string(name='NormalizationFieldName', example='cloud_user。'),
      normalizationFieldRequirement?: boolean(name='NormalizationFieldRequirement', example='true。'),
      normalizationFieldReserved?: boolean(name='NormalizationFieldReserved', example='true。'),
      normalizationFieldType?: string(name='NormalizationFieldType', example='varchar。'),
      normalizationSchemaId?: string(name='NormalizationSchemaId', example='NETWORK_SESSION_ACTIVITY。'),
    }
  ](name='NormalizationFields'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
}

model ListNormalizationFieldsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNormalizationFieldsResponseBody(name='body'),
}

/**
 * @summary 获取标准化日志所有字段
 *
 * @param request ListNormalizationFieldsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNormalizationFieldsResponse
 */
@context("listNormalizationFieldsWithContext")
async function listNormalizationFieldsWithOptions(request: ListNormalizationFieldsRequest, runtime: $RuntimeOptions): ListNormalizationFieldsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.name)) {
    body['Name'] = request.name;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListNormalizationFields',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取标准化日志所有字段
 *
 * @param request ListNormalizationFieldsRequest
 * @return ListNormalizationFieldsResponse
 */
async function listNormalizationFields(request: ListNormalizationFieldsRequest): ListNormalizationFieldsResponse {
  var runtime = new $RuntimeOptions{};
  return listNormalizationFieldsWithOptions(request, runtime);
}

model ListNormalizationRuleCapacitiesRequest {
  lang?: string(name='Lang', example='zh。'),
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
  normalizationRuleIds?: [ string ](name='NormalizationRuleIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListNormalizationRuleCapacitiesShrinkRequest {
  lang?: string(name='Lang', example='zh。'),
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
  normalizationRuleIdsShrink?: string(name='NormalizationRuleIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListNormalizationRuleCapacitiesResponseBody = {
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationRuleCapacities?: [ 
    {
      capacities?: [ string ](name='Capacities'),
      capacityType?: string(name='CapacityType', example='detection_preset_rule。'),
      normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
    }
  ](name='NormalizationRuleCapacities'),
  pageNumber?: int32(name='PageNumber', example='1。'),
  pageSize?: int32(name='PageSize', example='10。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
  totalPage?: int32(name='TotalPage', example='3。'),
}

model ListNormalizationRuleCapacitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNormalizationRuleCapacitiesResponseBody(name='body'),
}

/**
 * @summary 获取规则的安全能力
 *
 * @param tmpReq ListNormalizationRuleCapacitiesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNormalizationRuleCapacitiesResponse
 */
@context("listNormalizationRuleCapacitiesWithContext")
async function listNormalizationRuleCapacitiesWithOptions(tmpReq: ListNormalizationRuleCapacitiesRequest, runtime: $RuntimeOptions): ListNormalizationRuleCapacitiesResponse {
  tmpReq.validate();
  var request = new ListNormalizationRuleCapacitiesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.normalizationRuleIds)) {
    request.normalizationRuleIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.normalizationRuleIds, 'NormalizationRuleIds', 'simple');
  }
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.normalizationRuleId)) {
    body['NormalizationRuleId'] = request.normalizationRuleId;
  }
  if (!$isNull(request.normalizationRuleIdsShrink)) {
    body['NormalizationRuleIds'] = request.normalizationRuleIdsShrink;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListNormalizationRuleCapacities',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取规则的安全能力
 *
 * @param request ListNormalizationRuleCapacitiesRequest
 * @return ListNormalizationRuleCapacitiesResponse
 */
async function listNormalizationRuleCapacities(request: ListNormalizationRuleCapacitiesRequest): ListNormalizationRuleCapacitiesResponse {
  var runtime = new $RuntimeOptions{};
  return listNormalizationRuleCapacitiesWithOptions(request, runtime);
}

model ListNormalizationRuleVersionsRequest {
  lang?: string(name='Lang', example='zh。'),
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListNormalizationRuleVersionsResponseBody = {
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationRuleVersions?: [ 
    {
      createTime?: long(name='CreateTime', example='1733269771123。'),
      normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\\\"[\\\\s\\\\S]+\\\\" as extend_content。'),
      normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
      normalizationRuleVersion?: int32(name='NormalizationRuleVersion', example='V1。'),
      updateTime?: long(name='UpdateTime', example='1733269771123。'),
    }
  ](name='NormalizationRuleVersions'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
}

model ListNormalizationRuleVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNormalizationRuleVersionsResponseBody(name='body'),
}

/**
 * @summary 获取标准化规则版本列表
 *
 * @param request ListNormalizationRuleVersionsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNormalizationRuleVersionsResponse
 */
@context("listNormalizationRuleVersionsWithContext")
async function listNormalizationRuleVersionsWithOptions(request: ListNormalizationRuleVersionsRequest, runtime: $RuntimeOptions): ListNormalizationRuleVersionsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.normalizationRuleId)) {
    body['NormalizationRuleId'] = request.normalizationRuleId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListNormalizationRuleVersions',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取标准化规则版本列表
 *
 * @param request ListNormalizationRuleVersionsRequest
 * @return ListNormalizationRuleVersionsResponse
 */
async function listNormalizationRuleVersions(request: ListNormalizationRuleVersionsRequest): ListNormalizationRuleVersionsResponse {
  var runtime = new $RuntimeOptions{};
  return listNormalizationRuleVersionsWithOptions(request, runtime);
}

model ListNormalizationRulesRequest {
  lang?: string(name='Lang', example='zh。'),
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
  normalizationRuleIds?: [ string ](name='NormalizationRuleIds'),
  normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。'),
  normalizationRuleType?: string(name='NormalizationRuleType', example='predefined。'),
  normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
  orderField?: string(name='OrderField', example='UpdateTime。'),
  orderType?: string(name='OrderType', example='desc。'),
  pageNumber?: int32(name='PageNumber', example='3。'),
  pageSize?: int32(name='PageSize', example='10。'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  vendorId?: string(name='VendorId', example='alibaba_cloud。'),
}

model ListNormalizationRulesShrinkRequest {
  lang?: string(name='Lang', example='zh。'),
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
  normalizationRuleIdsShrink?: string(name='NormalizationRuleIds'),
  normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。'),
  normalizationRuleType?: string(name='NormalizationRuleType', example='predefined。'),
  normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
  orderField?: string(name='OrderField', example='UpdateTime。'),
  orderType?: string(name='OrderType', example='desc。'),
  pageNumber?: int32(name='PageNumber', example='3。'),
  pageSize?: int32(name='PageSize', example='10。'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  vendorId?: string(name='VendorId', example='alibaba_cloud。'),
}

model ListNormalizationRulesResponseBody = {
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationRules?: [ 
    {
      createTime?: long(name='CreateTime', example='1733269771123。'),
      extendContentPacked?: string(name='ExtendContentPacked'),
      normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
      normalizationRuleDescription?: string(name='NormalizationRuleDescription', example='normalization_rule_Z57np。'),
      normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\\\"[\\\\s\\\\S]+\\\\" as extend_content。'),
      normalizationRuleFormat?: string(name='NormalizationRuleFormat', example='SPL。'),
      normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
      normalizationRuleMode?: string(name='NormalizationRuleMode', example='both。'),
      normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。'),
      normalizationRuleReferences?: [ 
        {
          dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_bot_flow_ingestion_173326*******。'),
        }
      ](name='NormalizationRuleReferences'),
      normalizationRuleStatus?: string(name='NormalizationRuleStatus', example='started。'),
      normalizationRuleType?: string(name='NormalizationRuleType', example='predefined。'),
      normalizationRuleVersion?: string(name='NormalizationRuleVersion', example='V1。'),
      normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
      productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
      updateTime?: long(name='UpdateTime', example='1733269771123。'),
      vendorId?: string(name='VendorId', example='alibaba_cloud。'),
    }
  ](name='NormalizationRules'),
  pageNumber?: int32(name='PageNumber', example='1。'),
  pageSize?: int32(name='PageSize', example='2。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='5。'),
  totalPage?: int32(name='TotalPage', example='1。'),
}

model ListNormalizationRulesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNormalizationRulesResponseBody(name='body'),
}

/**
 * @summary 获取标准化规则列表
 *
 * @param tmpReq ListNormalizationRulesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNormalizationRulesResponse
 */
@context("listNormalizationRulesWithContext")
async function listNormalizationRulesWithOptions(tmpReq: ListNormalizationRulesRequest, runtime: $RuntimeOptions): ListNormalizationRulesResponse {
  tmpReq.validate();
  var request = new ListNormalizationRulesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.normalizationRuleIds)) {
    request.normalizationRuleIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.normalizationRuleIds, 'NormalizationRuleIds', 'simple');
  }
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.normalizationCategoryId)) {
    body['NormalizationCategoryId'] = request.normalizationCategoryId;
  }
  if (!$isNull(request.normalizationRuleIdsShrink)) {
    body['NormalizationRuleIds'] = request.normalizationRuleIdsShrink;
  }
  if (!$isNull(request.normalizationRuleName)) {
    body['NormalizationRuleName'] = request.normalizationRuleName;
  }
  if (!$isNull(request.normalizationRuleType)) {
    body['NormalizationRuleType'] = request.normalizationRuleType;
  }
  if (!$isNull(request.normalizationSchemaId)) {
    body['NormalizationSchemaId'] = request.normalizationSchemaId;
  }
  if (!$isNull(request.orderField)) {
    body['OrderField'] = request.orderField;
  }
  if (!$isNull(request.orderType)) {
    body['OrderType'] = request.orderType;
  }
  if (!$isNull(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!$isNull(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!$isNull(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.vendorId)) {
    body['VendorId'] = request.vendorId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListNormalizationRules',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取标准化规则列表
 *
 * @param request ListNormalizationRulesRequest
 * @return ListNormalizationRulesResponse
 */
async function listNormalizationRules(request: ListNormalizationRulesRequest): ListNormalizationRulesResponse {
  var runtime = new $RuntimeOptions{};
  return listNormalizationRulesWithOptions(request, runtime);
}

model ListNormalizationSchemasRequest {
  lang?: string(name='Lang', example='zh。'),
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
  normalizationSchemaType?: string(name='NormalizationSchemaType', example='entity。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ListNormalizationSchemasResponseBody = {
  maxResults?: int32(name='MaxResults', example='50。'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  normalizationSchemas?: [ 
    {
      normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
      normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
      normalizationSchemaName?: string(name='NormalizationSchemaName', example='normalization_rule_Z57np。'),
      normalizationSchemaTargetLogStore?: string(name='NormalizationSchemaTargetLogStore', example='network-activity。'),
    }
  ](name='NormalizationSchemas'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
}

model ListNormalizationSchemasResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListNormalizationSchemasResponseBody(name='body'),
}

/**
 * @summary 获取标准化类目
 *
 * @param request ListNormalizationSchemasRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListNormalizationSchemasResponse
 */
@context("listNormalizationSchemasWithContext")
async function listNormalizationSchemasWithOptions(request: ListNormalizationSchemasRequest, runtime: $RuntimeOptions): ListNormalizationSchemasResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.normalizationCategoryId)) {
    body['NormalizationCategoryId'] = request.normalizationCategoryId;
  }
  if (!$isNull(request.normalizationSchemaType)) {
    body['NormalizationSchemaType'] = request.normalizationSchemaType;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListNormalizationSchemas',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取标准化类目
 *
 * @param request ListNormalizationSchemasRequest
 * @return ListNormalizationSchemasResponse
 */
async function listNormalizationSchemas(request: ListNormalizationSchemasRequest): ListNormalizationSchemasResponse {
  var runtime = new $RuntimeOptions{};
  return listNormalizationSchemasWithOptions(request, runtime);
}

model ListProductsRequest {
  lang?: string(name='Lang', example='zh'),
  maxResults?: int32(name='MaxResults', example='50', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  productIds?: [ string ](name='ProductIds'),
  productName?: string(name='ProductName', example='sas'),
  productType?: string(name='ProductType', example='preset'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='173326*******'),
  vendorId?: string(name='VendorId', example='vd-qlsw5eocx94w9'),
}

model ListProductsShrinkRequest {
  lang?: string(name='Lang', example='zh'),
  maxResults?: int32(name='MaxResults', example='50', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  productIdsShrink?: string(name='ProductIds'),
  productName?: string(name='ProductName', example='sas'),
  productType?: string(name='ProductType', example='preset'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='173326*******'),
  vendorId?: string(name='VendorId', example='vd-qlsw5eocx94w9'),
}

model ListProductsResponseBody = {
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  products?: [ 
    {
      abnormalDataIngestionCount?: int32(name='AbnormalDataIngestionCount', example='2'),
      activeTime?: long(name='ActiveTime', example='1733269771123'),
      allowAddDataIngestion?: boolean(name='AllowAddDataIngestion', example='true'),
      createTime?: long(name='CreateTime', example='1733269771123'),
      dataIngestionStatus?: boolean(name='DataIngestionStatus', example='enabled'),
      enabledDataIngestionCount?: int32(name='EnabledDataIngestionCount', example='1'),
      productAlias?: string(name='ProductAlias', example='alibaba_cloud_sas'),
      productId?: string(name='ProductId', example='alibaba_cloud_sas'),
      productName?: string(name='ProductName', example='sas'),
      productType?: string(name='ProductType', example='preset'),
      totalDataIngestionCount?: int32(name='TotalDataIngestionCount', example='10'),
      updateTime?: long(name='UpdateTime', example='1733269771123'),
      vendorId?: string(name='VendorId', example='vd-qlsw5eocx94w9'),
      vendorName?: string(name='VendorName', example='111'),
    }
  ](name='Products'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
  totalCount?: int32(name='TotalCount', example='57'),
}

model ListProductsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductsResponseBody(name='body'),
}

/**
 * @summary 获取产品列表
 *
 * @param tmpReq ListProductsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProductsResponse
 */
@context("listProductsWithContext")
async function listProductsWithOptions(tmpReq: ListProductsRequest, runtime: $RuntimeOptions): ListProductsResponse {
  tmpReq.validate();
  var request = new ListProductsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.productIds)) {
    request.productIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.productIds, 'ProductIds', 'simple');
  }
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.productIdsShrink)) {
    body['ProductIds'] = request.productIdsShrink;
  }
  if (!$isNull(request.productName)) {
    body['ProductName'] = request.productName;
  }
  if (!$isNull(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.vendorId)) {
    body['VendorId'] = request.vendorId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListProducts',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取产品列表
 *
 * @param request ListProductsRequest
 * @return ListProductsResponse
 */
async function listProducts(request: ListProductsRequest): ListProductsResponse {
  var runtime = new $RuntimeOptions{};
  return listProductsWithOptions(request, runtime);
}

model ListTrafficStatisticsRequest {
  lang?: string(name='Lang', example='zh。'),
  logUserIds?: [ long ](name='LogUserIds'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  regionTag?: int32(name='RegionTag', example='1。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  trafficStatisticPeriod?: string(name='TrafficStatisticPeriod', example='30。'),
  trafficStatisticPeriodType?: string(name='TrafficStatisticPeriodType', example='day。'),
  trafficStatisticType?: string(name='TrafficStatisticType', example='Region。'),
}

model ListTrafficStatisticsShrinkRequest {
  lang?: string(name='Lang', example='zh。'),
  logUserIdsShrink?: string(name='LogUserIds'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  regionTag?: int32(name='RegionTag', example='1。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  trafficStatisticPeriod?: string(name='TrafficStatisticPeriod', example='30。'),
  trafficStatisticPeriodType?: string(name='TrafficStatisticPeriodType', example='day。'),
  trafficStatisticType?: string(name='TrafficStatisticType', example='Region。'),
}

model ListTrafficStatisticsResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  trafficStatistics?: [ 
    {
      trafficStatisticData?: [ 
        {
          trafficStatisticTime?: long(name='TrafficStatisticTime', example='20250815。'),
          trafficStatisticValue?: double(name='TrafficStatisticValue', example='1.699814。'),
        }
      ](name='TrafficStatisticData'),
      trafficStatisticTarget?: string(name='TrafficStatisticTarget', example='all。'),
    }
  ](name='TrafficStatistics'),
}

model ListTrafficStatisticsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTrafficStatisticsResponseBody(name='body'),
}

/**
 * @summary 获取接入流量统计
 *
 * @param tmpReq ListTrafficStatisticsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTrafficStatisticsResponse
 */
@context("listTrafficStatisticsWithContext")
async function listTrafficStatisticsWithOptions(tmpReq: ListTrafficStatisticsRequest, runtime: $RuntimeOptions): ListTrafficStatisticsResponse {
  tmpReq.validate();
  var request = new ListTrafficStatisticsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.logUserIds)) {
    request.logUserIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.logUserIds, 'LogUserIds', 'simple');
  }
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logUserIdsShrink)) {
    body['LogUserIds'] = request.logUserIdsShrink;
  }
  if (!$isNull(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.regionTag)) {
    body['RegionTag'] = request.regionTag;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.trafficStatisticPeriod)) {
    body['TrafficStatisticPeriod'] = request.trafficStatisticPeriod;
  }
  if (!$isNull(request.trafficStatisticPeriodType)) {
    body['TrafficStatisticPeriodType'] = request.trafficStatisticPeriodType;
  }
  if (!$isNull(request.trafficStatisticType)) {
    body['TrafficStatisticType'] = request.trafficStatisticType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListTrafficStatistics',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取接入流量统计
 *
 * @param request ListTrafficStatisticsRequest
 * @return ListTrafficStatisticsResponse
 */
async function listTrafficStatistics(request: ListTrafficStatisticsRequest): ListTrafficStatisticsResponse {
  var runtime = new $RuntimeOptions{};
  return listTrafficStatisticsWithOptions(request, runtime);
}

model ListUpgradeItemsRequest {
  lang?: string(name='Lang', example='zh'),
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: string(name='RoleFor', example='113091674488****'),
}

model ListUpgradeItemsResponseBody = {
  maxResults?: int32(name='MaxResults', example='50'),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
  totalCount?: int32(name='TotalCount', example='57'),
  upgradeItems?: [ 
    {
      upgradeItemId?: string(name='UpgradeItemId', example='data_storage_2_upgrade'),
    }
  ](name='UpgradeItems'),
}

model ListUpgradeItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUpgradeItemsResponseBody(name='body'),
}

/**
 * @summary 获取升级项列表
 *
 * @param request ListUpgradeItemsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListUpgradeItemsResponse
 */
@context("listUpgradeItemsWithContext")
async function listUpgradeItemsWithOptions(request: ListUpgradeItemsRequest, runtime: $RuntimeOptions): ListUpgradeItemsResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListUpgradeItems',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取升级项列表
 *
 * @param request ListUpgradeItemsRequest
 * @return ListUpgradeItemsResponse
 */
async function listUpgradeItems(request: ListUpgradeItemsRequest): ListUpgradeItemsResponse {
  var runtime = new $RuntimeOptions{};
  return listUpgradeItemsWithOptions(request, runtime);
}

model ListVendorsRequest {
  lang?: string(name='Lang', example='en。'),
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  vendorIds?: [ string ](name='VendorIds'),
  vendorName?: string(name='VendorName', example='111。'),
  vendorType?: string(name='VendorType', example='preset。'),
}

model ListVendorsShrinkRequest {
  lang?: string(name='Lang', example='en。'),
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  vendorIdsShrink?: string(name='VendorIds'),
  vendorName?: string(name='VendorName', example='111。'),
  vendorType?: string(name='VendorType', example='preset。'),
}

model ListVendorsResponseBody = {
  maxResults?: int32(name='MaxResults', example='50。', nullable=true),
  nextToken?: string(name='NextToken', example='AAAAAUqcj6VO4E3ECWIrFczs****。'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  totalCount?: int32(name='TotalCount', example='57。'),
  vendors?: [ 
    {
      createTime?: long(name='CreateTime', example='1733269771123。'),
      updateTime?: long(name='UpdateTime', example='1733269771123。'),
      vendorId?: string(name='VendorId', example='vd-qlsw5eocx94w9。'),
      vendorName?: string(name='VendorName', example='111。'),
      vendorType?: string(name='VendorType', example='preset。'),
    }
  ](name='Vendors'),
}

model ListVendorsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListVendorsResponseBody(name='body'),
}

/**
 * @summary 获取厂商列表
 *
 * @param tmpReq ListVendorsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListVendorsResponse
 */
@context("listVendorsWithContext")
async function listVendorsWithOptions(tmpReq: ListVendorsRequest, runtime: $RuntimeOptions): ListVendorsResponse {
  tmpReq.validate();
  var request = new ListVendorsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.vendorIds)) {
    request.vendorIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vendorIds, 'VendorIds', 'simple');
  }
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!$isNull(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.vendorIdsShrink)) {
    body['VendorIds'] = request.vendorIdsShrink;
  }
  if (!$isNull(request.vendorName)) {
    body['VendorName'] = request.vendorName;
  }
  if (!$isNull(request.vendorType)) {
    body['VendorType'] = request.vendorType;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ListVendors',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取厂商列表
 *
 * @param request ListVendorsRequest
 * @return ListVendorsResponse
 */
async function listVendors(request: ListVendorsRequest): ListVendorsResponse {
  var runtime = new $RuntimeOptions{};
  return listVendorsWithOptions(request, runtime);
}

model ResetDataStorageRequest {
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model ResetDataStorageResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****'),
}

model ResetDataStorageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResetDataStorageResponseBody(name='body'),
}

/**
 * @summary 数据存储的清空操作，该动作会删除已有的数据，重新初始化物理存储。
 *
 * @param request ResetDataStorageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResetDataStorageResponse
 */
@context("resetDataStorageWithContext")
async function resetDataStorageWithOptions(request: ResetDataStorageRequest, runtime: $RuntimeOptions): ResetDataStorageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ResetDataStorage',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 数据存储的清空操作，该动作会删除已有的数据，重新初始化物理存储。
 *
 * @param request ResetDataStorageRequest
 * @return ResetDataStorageResponse
 */
async function resetDataStorage(request: ResetDataStorageRequest): ResetDataStorageResponse {
  var runtime = new $RuntimeOptions{};
  return resetDataStorageWithOptions(request, runtime);
}

model SetDefaultNormalizationRuleVersionRequest {
  lang?: string(name='Lang', example='zh。'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
  normalizationRuleVersion?: int32(name='NormalizationRuleVersion', example='V1。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model SetDefaultNormalizationRuleVersionResponseBody = {
  normalizationRuleVersion?: {
    createTime?: long(name='CreateTime', example='1733269771123。'),
    normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
    normalizationRuleDescription?: string(name='NormalizationRuleDescription', example='normalization_rule_Z57np。'),
    normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\\\"[\\\\s\\\\S]+\\\\" as extend_content。'),
    normalizationRuleFormat?: string(name='NormalizationRuleFormat', example='SPL。'),
    normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
    normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。'),
    normalizationRuleStatus?: string(name='NormalizationRuleStatus', example='started。'),
    normalizationRuleType?: string(name='NormalizationRuleType', example='predefined。'),
    normalizationRuleVersion?: int32(name='NormalizationRuleVersion', example='V1。'),
    normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
    productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
    updateTime?: long(name='UpdateTime', example='1733269771123。'),
    vendorId?: string(name='VendorId', example='alibaba_cloud。'),
  }(name='NormalizationRuleVersion'),
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model SetDefaultNormalizationRuleVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetDefaultNormalizationRuleVersionResponseBody(name='body'),
}

/**
 * @summary 设置标准化规则默认版本
 *
 * @param request SetDefaultNormalizationRuleVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SetDefaultNormalizationRuleVersionResponse
 */
@context("setDefaultNormalizationRuleVersionWithContext")
async function setDefaultNormalizationRuleVersionWithOptions(request: SetDefaultNormalizationRuleVersionRequest, runtime: $RuntimeOptions): SetDefaultNormalizationRuleVersionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.normalizationRuleId)) {
    body['NormalizationRuleId'] = request.normalizationRuleId;
  }
  if (!$isNull(request.normalizationRuleVersion)) {
    body['NormalizationRuleVersion'] = request.normalizationRuleVersion;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'SetDefaultNormalizationRuleVersion',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 设置标准化规则默认版本
 *
 * @param request SetDefaultNormalizationRuleVersionRequest
 * @return SetDefaultNormalizationRuleVersionResponse
 */
async function setDefaultNormalizationRuleVersion(request: SetDefaultNormalizationRuleVersionRequest): SetDefaultNormalizationRuleVersionResponse {
  var runtime = new $RuntimeOptions{};
  return setDefaultNormalizationRuleVersionWithOptions(request, runtime);
}

model UpdateDataBatchIngestionRequest {
  autoScanNew?: string(name='AutoScanNew', example='enabled。'),
  dataBatchIngestionMode?: string(name='DataBatchIngestionMode', example='full。'),
  dataIngestionIds?: [ string ](name='DataIngestionIds'),
  dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', example='true。'),
  lang?: string(name='Lang', example='zh。'),
  logUserIds?: [ long ](name='LogUserIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model UpdateDataBatchIngestionShrinkRequest {
  autoScanNew?: string(name='AutoScanNew', example='enabled。'),
  dataBatchIngestionMode?: string(name='DataBatchIngestionMode', example='full。'),
  dataIngestionIdsShrink?: string(name='DataIngestionIds'),
  dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', example='true。'),
  lang?: string(name='Lang', example='zh。'),
  logUserIdsShrink?: string(name='LogUserIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model UpdateDataBatchIngestionResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateDataBatchIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataBatchIngestionResponseBody(name='body'),
}

/**
 * @summary 更新数据批量接入
 *
 * @param tmpReq UpdateDataBatchIngestionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataBatchIngestionResponse
 */
@context("updateDataBatchIngestionWithContext")
async function updateDataBatchIngestionWithOptions(tmpReq: UpdateDataBatchIngestionRequest, runtime: $RuntimeOptions): UpdateDataBatchIngestionResponse {
  tmpReq.validate();
  var request = new UpdateDataBatchIngestionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.dataIngestionIds)) {
    request.dataIngestionIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dataIngestionIds, 'DataIngestionIds', 'simple');
  }
  if (!$isNull(tmpReq.logUserIds)) {
    request.logUserIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.logUserIds, 'LogUserIds', 'simple');
  }
  var body : map[string]any = {};
  if (!$isNull(request.autoScanNew)) {
    body['AutoScanNew'] = request.autoScanNew;
  }
  if (!$isNull(request.dataBatchIngestionMode)) {
    body['DataBatchIngestionMode'] = request.dataBatchIngestionMode;
  }
  if (!$isNull(request.dataIngestionIdsShrink)) {
    body['DataIngestionIds'] = request.dataIngestionIdsShrink;
  }
  if (!$isNull(request.dataSourceRecognizeEnabled)) {
    body['DataSourceRecognizeEnabled'] = request.dataSourceRecognizeEnabled;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logUserIdsShrink)) {
    body['LogUserIds'] = request.logUserIdsShrink;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataBatchIngestion',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据批量接入
 *
 * @param request UpdateDataBatchIngestionRequest
 * @return UpdateDataBatchIngestionResponse
 */
async function updateDataBatchIngestion(request: UpdateDataBatchIngestionRequest): UpdateDataBatchIngestionResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataBatchIngestionWithOptions(request, runtime);
}

model UpdateDataIngestionRequest {
  dataIngestionId?: string(name='DataIngestionId', example='alibaba_cloud_actiontrail_event_ingestion_173326*******。'),
  dataIngestionMode?: string(name='DataIngestionMode', example='realtime。'),
  dataSourceId?: string(name='DataSourceId', example='alibaba_cloud_actiontrail_event_log_173326*******。'),
  lang?: string(name='Lang', example='zh。'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='alibaba_cloud_actiontrail_event_rule。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model UpdateDataIngestionResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateDataIngestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataIngestionResponseBody(name='body'),
}

/**
 * @summary 更新数据接入信息
 *
 * @param request UpdateDataIngestionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataIngestionResponse
 */
@context("updateDataIngestionWithContext")
async function updateDataIngestionWithOptions(request: UpdateDataIngestionRequest, runtime: $RuntimeOptions): UpdateDataIngestionResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataIngestionId)) {
    body['DataIngestionId'] = request.dataIngestionId;
  }
  if (!$isNull(request.dataIngestionMode)) {
    body['DataIngestionMode'] = request.dataIngestionMode;
  }
  if (!$isNull(request.dataSourceId)) {
    body['DataSourceId'] = request.dataSourceId;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.normalizationRuleId)) {
    body['NormalizationRuleId'] = request.normalizationRuleId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataIngestion',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据接入信息
 *
 * @param request UpdateDataIngestionRequest
 * @return UpdateDataIngestionResponse
 */
async function updateDataIngestion(request: UpdateDataIngestionRequest): UpdateDataIngestionResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataIngestionWithOptions(request, runtime);
}

model UpdateDataIngestionTemplateRequest {
  dataIngestionStatus?: string(name='DataIngestionStatus', example='enabled。'),
  dataIngestionTemplateId?: string(name='DataIngestionTemplateId', example='alibaba_cloud_actiontrail_event_ingestion_173326*******。'),
  dataIngestionTemplateName?: string(name='DataIngestionTemplateName', example='alibaba_cloud_actiontrail_event_ingestion_173326*******。'),
  lang?: string(name='Lang', example='zh。'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='alibaba_cloud_actiontrail_event_rule。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model UpdateDataIngestionTemplateResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateDataIngestionTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataIngestionTemplateResponseBody(name='body'),
}

/**
 * @summary 更新接入模板
 *
 * @param request UpdateDataIngestionTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataIngestionTemplateResponse
 */
@context("updateDataIngestionTemplateWithContext")
async function updateDataIngestionTemplateWithOptions(request: UpdateDataIngestionTemplateRequest, runtime: $RuntimeOptions): UpdateDataIngestionTemplateResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataIngestionStatus)) {
    body['DataIngestionStatus'] = request.dataIngestionStatus;
  }
  if (!$isNull(request.dataIngestionTemplateId)) {
    body['DataIngestionTemplateId'] = request.dataIngestionTemplateId;
  }
  if (!$isNull(request.dataIngestionTemplateName)) {
    body['DataIngestionTemplateName'] = request.dataIngestionTemplateName;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.normalizationRuleId)) {
    body['NormalizationRuleId'] = request.normalizationRuleId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataIngestionTemplate',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新接入模板
 *
 * @param request UpdateDataIngestionTemplateRequest
 * @return UpdateDataIngestionTemplateResponse
 */
async function updateDataIngestionTemplate(request: UpdateDataIngestionTemplateRequest): UpdateDataIngestionTemplateResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataIngestionTemplateWithOptions(request, runtime);
}

model UpdateDataSetRequest {
  dataSetDescription?: string(name='DataSetDescription', example='lmftest desc'),
  dataSetFileName?: string(name='DataSetFileName'),
  dataSetId?: string(name='DataSetId', description='This parameter is required.', example='dataset-10iy8mbifnb4gniv****'),
  dataSetName?: string(name='DataSetName'),
  dataSetStatus?: int32(name='DataSetStatus'),
  ipWhitelistRecognizers?: [ 
    {
      autoRecognizeStatus?: string(name='AutoRecognizeStatus', example='enabled'),
      ipWhitelistRecognizerType?: string(name='IpWhitelistRecognizerType', example='cdn_back_source_ip'),
      recognizeScope?: string(name='RecognizeScope', example='current_account'),
    }
  ](name='IpWhitelistRecognizers'),
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model UpdateDataSetResponseBody = {
  requestId?: string(name='RequestId', example='DE7E77A9-BFAD-5EAA-9B48-A96760E9DF0B'),
}

model UpdateDataSetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSetResponseBody(name='body'),
}

/**
 * @summary 更新数据集
 *
 * @param request UpdateDataSetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataSetResponse
 */
@context("updateDataSetWithContext")
async function updateDataSetWithOptions(request: UpdateDataSetRequest, runtime: $RuntimeOptions): UpdateDataSetResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataSetDescription)) {
    body['DataSetDescription'] = request.dataSetDescription;
  }
  if (!$isNull(request.dataSetFileName)) {
    body['DataSetFileName'] = request.dataSetFileName;
  }
  if (!$isNull(request.dataSetId)) {
    body['DataSetId'] = request.dataSetId;
  }
  if (!$isNull(request.dataSetName)) {
    body['DataSetName'] = request.dataSetName;
  }
  if (!$isNull(request.dataSetStatus)) {
    body['DataSetStatus'] = request.dataSetStatus;
  }
  var bodyFlat : map[string]any = {};
  if (!$isNull(request.ipWhitelistRecognizers)) {
    bodyFlat['IpWhitelistRecognizers'] = request.ipWhitelistRecognizers;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataSet',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据集
 *
 * @param request UpdateDataSetRequest
 * @return UpdateDataSetResponse
 */
async function updateDataSet(request: UpdateDataSetRequest): UpdateDataSetResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataSetWithOptions(request, runtime);
}

model UpdateDataSetRecordRequest {
  dataSetFileName?: string(name='DataSetFileName', example='cloudsiem-dataset/1358117679873357_174338773****.csv'),
  dataSetId?: string(name='DataSetId', description='This parameter is required.', example='dataset-10iy8mbifnb4gniv****'),
  dataSetRecords?: string(name='DataSetRecords', example='[{\\\\"ip\\\\":\\\\"1.1.1.1\\\\",\\\\"userid\\\\":\\\\"1234\\\\",\\\\"name\\\\":\\\\"a12401\\\\"},
 {\\\\"ip\\\\":\\\\"2.2.2.2\\\\",\\\\"userid\\\\":\\\\"33333\\\\",\\\\"name\\\\":\\\\"a12401\\\\"}]'),
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model UpdateDataSetRecordResponseBody = {
  dataSetRecordStatistic?: {
    newDataSetRecordCount?: int32(name='NewDataSetRecordCount', example='12'),
    updateDataSetRecordCount?: int32(name='UpdateDataSetRecordCount', example='4'),
  }(name='DataSetRecordStatistic'),
  requestId?: string(name='RequestId', example='9AAA9ED9-78F4-5021-86DC-D51C7511****'),
}

model UpdateDataSetRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSetRecordResponseBody(name='body'),
}

/**
 * @summary 更新数据集记录
 *
 * @param request UpdateDataSetRecordRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataSetRecordResponse
 */
@context("updateDataSetRecordWithContext")
async function updateDataSetRecordWithOptions(request: UpdateDataSetRecordRequest, runtime: $RuntimeOptions): UpdateDataSetRecordResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataSetFileName)) {
    body['DataSetFileName'] = request.dataSetFileName;
  }
  if (!$isNull(request.dataSetId)) {
    body['DataSetId'] = request.dataSetId;
  }
  if (!$isNull(request.dataSetRecords)) {
    body['DataSetRecords'] = request.dataSetRecords;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataSetRecord',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据集记录
 *
 * @param request UpdateDataSetRecordRequest
 * @return UpdateDataSetRecordResponse
 */
async function updateDataSetRecord(request: UpdateDataSetRecordRequest): UpdateDataSetRecordResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataSetRecordWithOptions(request, runtime);
}

model UpdateDataSourceRequest {
  dataSourceFrom?: string(name='DataSourceFrom'),
  dataSourceId?: string(name='DataSourceId', example='ds-014frtpy28m5ct2eoyo1。'),
  dataSourceName?: string(name='DataSourceName', example='ActiontrailLog。'),
  dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', example='true'),
  dataSourceStores?: [ 
    {
      dataSourceStoreFrom?: string(name='DataSourceStoreFrom'),
      dataSourceStoreId?: string(name='DataSourceStoreId'),
      logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
      logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
      logStoreName?: string(name='LogStoreName', example='cn-rds-sqlaudit。'),
    }
  ](name='DataSourceStores'),
  lang?: string(name='Lang', example='zh。'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
  logStoreName?: string(name='LogStoreName', example='cn-rds-sqlaudit。'),
  logUserId?: long(name='LogUserId', example='173326*******。'),
  orderField?: string(name='OrderField'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model UpdateDataSourceResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateDataSourceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceResponseBody(name='body'),
}

/**
 * @summary 更新数据源
 *
 * @param request UpdateDataSourceRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataSourceResponse
 */
@context("updateDataSourceWithContext")
async function updateDataSourceWithOptions(request: UpdateDataSourceRequest, runtime: $RuntimeOptions): UpdateDataSourceResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataSourceFrom)) {
    body['DataSourceFrom'] = request.dataSourceFrom;
  }
  if (!$isNull(request.dataSourceId)) {
    body['DataSourceId'] = request.dataSourceId;
  }
  if (!$isNull(request.dataSourceName)) {
    body['DataSourceName'] = request.dataSourceName;
  }
  if (!$isNull(request.dataSourceRecognizeEnabled)) {
    body['DataSourceRecognizeEnabled'] = request.dataSourceRecognizeEnabled;
  }
  var bodyFlat : map[string]any = {};
  if (!$isNull(request.dataSourceStores)) {
    bodyFlat['DataSourceStores'] = request.dataSourceStores;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logProjectName)) {
    body['LogProjectName'] = request.logProjectName;
  }
  if (!$isNull(request.logRegionId)) {
    body['LogRegionId'] = request.logRegionId;
  }
  if (!$isNull(request.logStoreName)) {
    body['LogStoreName'] = request.logStoreName;
  }
  if (!$isNull(request.logUserId)) {
    body['LogUserId'] = request.logUserId;
  }
  if (!$isNull(request.orderField)) {
    body['OrderField'] = request.orderField;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataSource',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据源
 *
 * @param request UpdateDataSourceRequest
 * @return UpdateDataSourceResponse
 */
async function updateDataSource(request: UpdateDataSourceRequest): UpdateDataSourceResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataSourceWithOptions(request, runtime);
}

model UpdateDataSourceTemplateRequest {
  autoScanNew?: string(name='AutoScanNew', example='enabled。'),
  dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', example='true。'),
  dataSourceTemplateId?: string(name='DataSourceTemplateId', example='alibaba_cloud_actiontrail_event_ingestion。'),
  dataSourceTemplateName?: string(name='DataSourceTemplateName', example='alibaba_cloud_actiontrail_event_ingestion。'),
  lang?: string(name='Lang', example='zh。'),
  logProjectPattern?: string(name='LogProjectPattern', example='aliyun-cloudsiem-data-173326*******。'),
  logRegionIds?: string(name='LogRegionIds', example='cn-hangzhou。'),
  logStorePattern?: string(name='LogStorePattern', example='audit-activity。'),
  logUserIds?: [ string ](name='LogUserIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model UpdateDataSourceTemplateShrinkRequest {
  autoScanNew?: string(name='AutoScanNew', example='enabled。'),
  dataSourceRecognizeEnabled?: boolean(name='DataSourceRecognizeEnabled', example='true。'),
  dataSourceTemplateId?: string(name='DataSourceTemplateId', example='alibaba_cloud_actiontrail_event_ingestion。'),
  dataSourceTemplateName?: string(name='DataSourceTemplateName', example='alibaba_cloud_actiontrail_event_ingestion。'),
  lang?: string(name='Lang', example='zh。'),
  logProjectPattern?: string(name='LogProjectPattern', example='aliyun-cloudsiem-data-173326*******。'),
  logRegionIds?: string(name='LogRegionIds', example='cn-hangzhou。'),
  logStorePattern?: string(name='LogStorePattern', example='audit-activity。'),
  logUserIdsShrink?: string(name='LogUserIds'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model UpdateDataSourceTemplateResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateDataSourceTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataSourceTemplateResponseBody(name='body'),
}

/**
 * @summary 修改数据源模板
 *
 * @param tmpReq UpdateDataSourceTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataSourceTemplateResponse
 */
@context("updateDataSourceTemplateWithContext")
async function updateDataSourceTemplateWithOptions(tmpReq: UpdateDataSourceTemplateRequest, runtime: $RuntimeOptions): UpdateDataSourceTemplateResponse {
  tmpReq.validate();
  var request = new UpdateDataSourceTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.logUserIds)) {
    request.logUserIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.logUserIds, 'LogUserIds', 'simple');
  }
  var query = {};
  if (!$isNull(request.dataSourceRecognizeEnabled)) {
    query['DataSourceRecognizeEnabled'] = request.dataSourceRecognizeEnabled;
  }
  var body : map[string]any = {};
  if (!$isNull(request.autoScanNew)) {
    body['AutoScanNew'] = request.autoScanNew;
  }
  if (!$isNull(request.dataSourceTemplateId)) {
    body['DataSourceTemplateId'] = request.dataSourceTemplateId;
  }
  if (!$isNull(request.dataSourceTemplateName)) {
    body['DataSourceTemplateName'] = request.dataSourceTemplateName;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logProjectPattern)) {
    body['LogProjectPattern'] = request.logProjectPattern;
  }
  if (!$isNull(request.logRegionIds)) {
    body['LogRegionIds'] = request.logRegionIds;
  }
  if (!$isNull(request.logStorePattern)) {
    body['LogStorePattern'] = request.logStorePattern;
  }
  if (!$isNull(request.logUserIdsShrink)) {
    body['LogUserIds'] = request.logUserIdsShrink;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataSourceTemplate',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改数据源模板
 *
 * @param request UpdateDataSourceTemplateRequest
 * @return UpdateDataSourceTemplateResponse
 */
async function updateDataSourceTemplate(request: UpdateDataSourceTemplateRequest): UpdateDataSourceTemplateResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataSourceTemplateWithOptions(request, runtime);
}

model UpdateDataStorageRequest {
  dataStorageRegionId?: string(name='DataStorageRegionId', description='This parameter is required.', example='cn-shanghai'),
  deliveryStatus?: string(name='DeliveryStatus', example='enable'),
  lang?: string(name='Lang', example='zh'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model UpdateDataStorageResponseBody = {
  requestId?: string(name='RequestId', example='EA7FC160-8D86-5ABE-A08A-7962FDC1****'),
}

model UpdateDataStorageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataStorageResponseBody(name='body'),
}

/**
 * @summary 获取日志管理页面里用户数据存储的详情。
 *
 * @param request UpdateDataStorageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataStorageResponse
 */
@context("updateDataStorageWithContext")
async function updateDataStorageWithOptions(request: UpdateDataStorageRequest, runtime: $RuntimeOptions): UpdateDataStorageResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.dataStorageRegionId)) {
    body['DataStorageRegionId'] = request.dataStorageRegionId;
  }
  if (!$isNull(request.deliveryStatus)) {
    body['DeliveryStatus'] = request.deliveryStatus;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataStorage',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取日志管理页面里用户数据存储的详情。
 *
 * @param request UpdateDataStorageRequest
 * @return UpdateDataStorageResponse
 */
async function updateDataStorage(request: UpdateDataStorageRequest): UpdateDataStorageResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataStorageWithOptions(request, runtime);
}

model UpdateDataStorageDeliveryRequest {
  lang?: string(name='Lang', example='zh'),
  logCode?: string(name='LogCode', description='This parameter is required.', example='aegis-log-login'),
  logDeliveryStatus?: string(name='LogDeliveryStatus', example='enable'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model UpdateDataStorageDeliveryResponseBody = {
  requestId?: string(name='RequestId', example='6D7FBF4A-5B95-5760-8B5A-BF8983D4****'),
}

model UpdateDataStorageDeliveryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataStorageDeliveryResponseBody(name='body'),
}

/**
 * @summary 操作日志投递.
 *
 * @param request UpdateDataStorageDeliveryRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataStorageDeliveryResponse
 */
@context("updateDataStorageDeliveryWithContext")
async function updateDataStorageDeliveryWithOptions(request: UpdateDataStorageDeliveryRequest, runtime: $RuntimeOptions): UpdateDataStorageDeliveryResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logCode)) {
    body['LogCode'] = request.logCode;
  }
  if (!$isNull(request.logDeliveryStatus)) {
    body['LogDeliveryStatus'] = request.logDeliveryStatus;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataStorageDelivery',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 操作日志投递.
 *
 * @param request UpdateDataStorageDeliveryRequest
 * @return UpdateDataStorageDeliveryResponse
 */
async function updateDataStorageDelivery(request: UpdateDataStorageDeliveryRequest): UpdateDataStorageDeliveryResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataStorageDeliveryWithOptions(request, runtime);
}

model UpdateDataStorageTtlRequest {
  lang?: string(name='Lang', example='zh'),
  logStoreColdTtl?: string(name='LogStoreColdTtl', example='0'),
  logStoreHotTtl?: string(name='LogStoreHotTtl', example='180'),
  logStoreName?: string(name='LogStoreName', example='network-activity'),
  logStoreTtl?: string(name='LogStoreTtl', example='180'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  roleFor?: long(name='RoleFor', example='113091674488****'),
}

model UpdateDataStorageTtlResponseBody = {
  requestId?: string(name='RequestId', example='D92E4FCF-4584-5E50-9C02-26B79A9C****'),
}

model UpdateDataStorageTtlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDataStorageTtlResponseBody(name='body'),
}

/**
 * @summary 更新数据存储中日志的数据保存天数。
 *
 * @param request UpdateDataStorageTtlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDataStorageTtlResponse
 */
@context("updateDataStorageTtlWithContext")
async function updateDataStorageTtlWithOptions(request: UpdateDataStorageTtlRequest, runtime: $RuntimeOptions): UpdateDataStorageTtlResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logStoreColdTtl)) {
    body['LogStoreColdTtl'] = request.logStoreColdTtl;
  }
  if (!$isNull(request.logStoreHotTtl)) {
    body['LogStoreHotTtl'] = request.logStoreHotTtl;
  }
  if (!$isNull(request.logStoreName)) {
    body['LogStoreName'] = request.logStoreName;
  }
  if (!$isNull(request.logStoreTtl)) {
    body['LogStoreTtl'] = request.logStoreTtl;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDataStorageTtl',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新数据存储中日志的数据保存天数。
 *
 * @param request UpdateDataStorageTtlRequest
 * @return UpdateDataStorageTtlResponse
 */
async function updateDataStorageTtl(request: UpdateDataStorageTtlRequest): UpdateDataStorageTtlResponse {
  var runtime = new $RuntimeOptions{};
  return updateDataStorageTtlWithOptions(request, runtime);
}

model UpdateDetectionRuleRequest {
  alertAttCk?: string(name='AlertAttCk', example='Discovery'),
  alertLevel?: string(name='AlertLevel', example='1'),
  alertSchemaId?: string(name='AlertSchemaId', example='ALERT_ACTIVITY'),
  alertTacticId?: string(name='AlertTacticId', example='TA0042'),
  alertThresholdCount?: int32(name='AlertThresholdCount', example='10'),
  alertThresholdGroup?: string(name='AlertThresholdGroup', example='alert_type,ip'),
  alertThresholdPeriod?: string(name='AlertThresholdPeriod', example='5m'),
  alertType?: string(name='AlertType', example='siem_rule_type_alert_storm'),
  detectionExpressionContent?: string(name='DetectionExpressionContent', example='*|set session mode=scan;SELECT * FROM log
WHERE schema = \\\\"PROCESS_START_ACTIVITY\\\\"
AND (
    proc_path LIKE \\\\"%/groups\\\\"
    OR (
        (
            proc_path LIKE \\\\"%/cat\\\\"
            OR proc_path LIKE \\\\"%/head\\\\"
            OR proc_path LIKE \\\\"%/tail\\\\"
            OR proc_path LIKE \\\\"%/more\\\\"
        )
        AND cmdline LIKE \\\\"%/etc/group%\\\\"
    )
)'),
  detectionExpressionType?: string(name='DetectionExpressionType', example='sql'),
  detectionRuleDescription?: string(name='DetectionRuleDescription', example='Check the enumeration behavior of local system groups. An attacker may attempt to find the Local Systems group and its permission settings.'),
  detectionRuleId?: string(name='DetectionRuleId', description='This parameter is required.', example='jndi-attack-success_http_dns'),
  detectionRuleName?: string(name='DetectionRuleName', example='CTDR Port Scan Behavior'),
  detectionRuleStatus?: string(name='DetectionRuleStatus', example='enabled'),
  detectionRuleType?: string(name='DetectionRuleType', description='This parameter is required.', example='custom'),
  entityMappings?: string(name='EntityMappings', example='[{\\\\"NormalizationSchemaId\\\\":\\\\"host\\\\",\\\\"NormalizationFieldMappings\\\\":[{\\\\"NormalizationFieldName\\\\":\\\\"uuid\\\\",\\\\"MappingFieldName\\\\":\\\\"host\\\\",\\\\"NormalizationFieldType\\\\":\\\\"varchar\\\\"}]}]'),
  incidentAggregationExpression?: string(name='IncidentAggregationExpression', example='60m'),
  incidentAggregationType?: string(name='IncidentAggregationType', example='window'),
  lang?: string(name='Lang', example='zh'),
  logCategoryId?: string(name='LogCategoryId', example='NETWORK_CATEGORY'),
  logSchemaId?: string(name='LogSchemaId', example='API_RISK_ACTIVITY'),
  playbookParameters?: string(name='PlaybookParameters', example='{
    "ip": {
        "ip": "124.23.*.*"
    }
}'),
  playbookUuid?: string(name='PlaybookUuid', example='31568394-7a86-487c-b8ec-b3f42b59****'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  scheduleBeginTime?: long(name='ScheduleBeginTime', example='1733269771123'),
  scheduleExpression?: string(name='ScheduleExpression', example='1h'),
  scheduleMaxRetries?: int32(name='ScheduleMaxRetries', example='1'),
  scheduleMaxTimeout?: int32(name='ScheduleMaxTimeout', example='60'),
  scheduleType?: string(name='ScheduleType', example='fixed_rate'),
  scheduleWindow?: string(name='ScheduleWindow', example='5m'),
}

model UpdateDetectionRuleResponseBody = {
  requestId?: string(name='RequestId', example='B88A2D41-87B8-537E-A7D3-3416A39F****'),
}

model UpdateDetectionRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateDetectionRuleResponseBody(name='body'),
}

/**
 * @summary 更新检测规则
 *
 * @param request UpdateDetectionRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateDetectionRuleResponse
 */
@context("updateDetectionRuleWithContext")
async function updateDetectionRuleWithOptions(request: UpdateDetectionRuleRequest, runtime: $RuntimeOptions): UpdateDetectionRuleResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.alertAttCk)) {
    body['AlertAttCk'] = request.alertAttCk;
  }
  if (!$isNull(request.alertLevel)) {
    body['AlertLevel'] = request.alertLevel;
  }
  if (!$isNull(request.alertSchemaId)) {
    body['AlertSchemaId'] = request.alertSchemaId;
  }
  if (!$isNull(request.alertTacticId)) {
    body['AlertTacticId'] = request.alertTacticId;
  }
  if (!$isNull(request.alertThresholdCount)) {
    body['AlertThresholdCount'] = request.alertThresholdCount;
  }
  if (!$isNull(request.alertThresholdGroup)) {
    body['AlertThresholdGroup'] = request.alertThresholdGroup;
  }
  if (!$isNull(request.alertThresholdPeriod)) {
    body['AlertThresholdPeriod'] = request.alertThresholdPeriod;
  }
  if (!$isNull(request.alertType)) {
    body['AlertType'] = request.alertType;
  }
  if (!$isNull(request.detectionExpressionContent)) {
    body['DetectionExpressionContent'] = request.detectionExpressionContent;
  }
  if (!$isNull(request.detectionExpressionType)) {
    body['DetectionExpressionType'] = request.detectionExpressionType;
  }
  if (!$isNull(request.detectionRuleDescription)) {
    body['DetectionRuleDescription'] = request.detectionRuleDescription;
  }
  if (!$isNull(request.detectionRuleId)) {
    body['DetectionRuleId'] = request.detectionRuleId;
  }
  if (!$isNull(request.detectionRuleName)) {
    body['DetectionRuleName'] = request.detectionRuleName;
  }
  if (!$isNull(request.detectionRuleStatus)) {
    body['DetectionRuleStatus'] = request.detectionRuleStatus;
  }
  if (!$isNull(request.detectionRuleType)) {
    body['DetectionRuleType'] = request.detectionRuleType;
  }
  if (!$isNull(request.entityMappings)) {
    body['EntityMappings'] = request.entityMappings;
  }
  if (!$isNull(request.incidentAggregationExpression)) {
    body['IncidentAggregationExpression'] = request.incidentAggregationExpression;
  }
  if (!$isNull(request.incidentAggregationType)) {
    body['IncidentAggregationType'] = request.incidentAggregationType;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logCategoryId)) {
    body['LogCategoryId'] = request.logCategoryId;
  }
  if (!$isNull(request.logSchemaId)) {
    body['LogSchemaId'] = request.logSchemaId;
  }
  if (!$isNull(request.playbookParameters)) {
    body['PlaybookParameters'] = request.playbookParameters;
  }
  if (!$isNull(request.playbookUuid)) {
    body['PlaybookUuid'] = request.playbookUuid;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.scheduleBeginTime)) {
    body['ScheduleBeginTime'] = request.scheduleBeginTime;
  }
  if (!$isNull(request.scheduleExpression)) {
    body['ScheduleExpression'] = request.scheduleExpression;
  }
  if (!$isNull(request.scheduleMaxRetries)) {
    body['ScheduleMaxRetries'] = request.scheduleMaxRetries;
  }
  if (!$isNull(request.scheduleMaxTimeout)) {
    body['ScheduleMaxTimeout'] = request.scheduleMaxTimeout;
  }
  if (!$isNull(request.scheduleType)) {
    body['ScheduleType'] = request.scheduleType;
  }
  if (!$isNull(request.scheduleWindow)) {
    body['ScheduleWindow'] = request.scheduleWindow;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateDetectionRule',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新检测规则
 *
 * @param request UpdateDetectionRuleRequest
 * @return UpdateDetectionRuleResponse
 */
async function updateDetectionRule(request: UpdateDetectionRuleRequest): UpdateDetectionRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateDetectionRuleWithOptions(request, runtime);
}

model UpdateNormalizationRuleRequest {
  extendContentPacked?: string(name='ExtendContentPacked'),
  lang?: string(name='Lang', example='zh。'),
  normalizationRuleDescription?: string(name='NormalizationRuleDescription', example='normalization_rule_Z57np。'),
  normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\\\"[\\\\s\\\\S]+\\\\" as extend_content。'),
  normalizationRuleFormat?: string(name='NormalizationRuleFormat', example='SPL。'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
  normalizationRuleIds?: [ string ](name='NormalizationRuleIds'),
  normalizationRuleMode?: string(name='NormalizationRuleMode', example='both。'),
  normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。'),
  normalizationRuleType?: string(name='NormalizationRuleType'),
  normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
  orderField?: string(name='OrderField'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  vendorId?: string(name='VendorId', example='alibaba_cloud。'),
}

model UpdateNormalizationRuleShrinkRequest {
  extendContentPacked?: string(name='ExtendContentPacked'),
  lang?: string(name='Lang', example='zh。'),
  normalizationRuleDescription?: string(name='NormalizationRuleDescription', example='normalization_rule_Z57np。'),
  normalizationRuleExpression?: string(name='NormalizationRuleExpression', example='* | pack-fields -include=\\\\"[\\\\s\\\\S]+\\\\" as extend_content。'),
  normalizationRuleFormat?: string(name='NormalizationRuleFormat', example='SPL。'),
  normalizationRuleId?: string(name='NormalizationRuleId', example='nr-z0b2ssjteut85uoh9nzp。'),
  normalizationRuleIdsShrink?: string(name='NormalizationRuleIds'),
  normalizationRuleMode?: string(name='NormalizationRuleMode', example='both。'),
  normalizationRuleName?: string(name='NormalizationRuleName', example='normalization_rule_Z57np。'),
  normalizationRuleType?: string(name='NormalizationRuleType'),
  normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
  orderField?: string(name='OrderField'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  vendorId?: string(name='VendorId', example='alibaba_cloud。'),
}

model UpdateNormalizationRuleResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateNormalizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateNormalizationRuleResponseBody(name='body'),
}

/**
 * @summary 更新标准化规则
 *
 * @param tmpReq UpdateNormalizationRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateNormalizationRuleResponse
 */
@context("updateNormalizationRuleWithContext")
async function updateNormalizationRuleWithOptions(tmpReq: UpdateNormalizationRuleRequest, runtime: $RuntimeOptions): UpdateNormalizationRuleResponse {
  tmpReq.validate();
  var request = new UpdateNormalizationRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!$isNull(tmpReq.normalizationRuleIds)) {
    request.normalizationRuleIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.normalizationRuleIds, 'NormalizationRuleIds', 'json');
  }
  var body : map[string]any = {};
  if (!$isNull(request.extendContentPacked)) {
    body['ExtendContentPacked'] = request.extendContentPacked;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.normalizationRuleDescription)) {
    body['NormalizationRuleDescription'] = request.normalizationRuleDescription;
  }
  if (!$isNull(request.normalizationRuleExpression)) {
    body['NormalizationRuleExpression'] = request.normalizationRuleExpression;
  }
  if (!$isNull(request.normalizationRuleFormat)) {
    body['NormalizationRuleFormat'] = request.normalizationRuleFormat;
  }
  if (!$isNull(request.normalizationRuleId)) {
    body['NormalizationRuleId'] = request.normalizationRuleId;
  }
  if (!$isNull(request.normalizationRuleIdsShrink)) {
    body['NormalizationRuleIds'] = request.normalizationRuleIdsShrink;
  }
  if (!$isNull(request.normalizationRuleMode)) {
    body['NormalizationRuleMode'] = request.normalizationRuleMode;
  }
  if (!$isNull(request.normalizationRuleName)) {
    body['NormalizationRuleName'] = request.normalizationRuleName;
  }
  if (!$isNull(request.normalizationRuleType)) {
    body['NormalizationRuleType'] = request.normalizationRuleType;
  }
  if (!$isNull(request.normalizationSchemaId)) {
    body['NormalizationSchemaId'] = request.normalizationSchemaId;
  }
  if (!$isNull(request.orderField)) {
    body['OrderField'] = request.orderField;
  }
  if (!$isNull(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.vendorId)) {
    body['VendorId'] = request.vendorId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateNormalizationRule',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新标准化规则
 *
 * @param request UpdateNormalizationRuleRequest
 * @return UpdateNormalizationRuleResponse
 */
async function updateNormalizationRule(request: UpdateNormalizationRuleRequest): UpdateNormalizationRuleResponse {
  var runtime = new $RuntimeOptions{};
  return updateNormalizationRuleWithOptions(request, runtime);
}

model UpdateProductRequest {
  lang?: string(name='Lang', example='en。'),
  productId?: string(name='ProductId', example='alibaba_cloud_sas。'),
  productName?: string(name='ProductName', example='alibaba_cloud_sas。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='1733269771123。'),
  vendorName?: string(name='VendorName', example='111。'),
}

model UpdateProductResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateProductResponseBody(name='body'),
}

/**
 * @summary 更新产品品
 *
 * @param request UpdateProductRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateProductResponse
 */
@context("updateProductWithContext")
async function updateProductWithOptions(request: UpdateProductRequest, runtime: $RuntimeOptions): UpdateProductResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!$isNull(request.productName)) {
    body['ProductName'] = request.productName;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.vendorName)) {
    body['VendorName'] = request.vendorName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateProduct',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新产品品
 *
 * @param request UpdateProductRequest
 * @return UpdateProductResponse
 */
async function updateProduct(request: UpdateProductRequest): UpdateProductResponse {
  var runtime = new $RuntimeOptions{};
  return updateProductWithOptions(request, runtime);
}

model UpdateVendorRequest {
  lang?: string(name='Lang', example='zh。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
  vendorId?: string(name='VendorId', example='vd-qlsw5eocx94w9。'),
  vendorName?: string(name='VendorName', example='111。'),
}

model UpdateVendorResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model UpdateVendorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateVendorResponseBody(name='body'),
}

/**
 * @summary 更新厂商
 *
 * @param request UpdateVendorRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateVendorResponse
 */
@context("updateVendorWithContext")
async function updateVendorWithOptions(request: UpdateVendorRequest, runtime: $RuntimeOptions): UpdateVendorResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  if (!$isNull(request.vendorId)) {
    body['VendorId'] = request.vendorId;
  }
  if (!$isNull(request.vendorName)) {
    body['VendorName'] = request.vendorName;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'UpdateVendor',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新厂商
 *
 * @param request UpdateVendorRequest
 * @return UpdateVendorResponse
 */
async function updateVendor(request: UpdateVendorRequest): UpdateVendorResponse {
  var runtime = new $RuntimeOptions{};
  return updateVendorWithOptions(request, runtime);
}

model ValidateLogStoreRequest {
  lang?: string(name='Lang', example='zh。'),
  logProjectName?: string(name='LogProjectName', example='aliyun-cloudsiem-data-173326*******-cn-hangzhou。'),
  logRegionId?: string(name='LogRegionId', example='cn-hangzhou。'),
  logStoreName?: string(name='LogStoreName', example='ssglauncher-log。'),
  logUserId?: long(name='LogUserId', example='173326*******。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ValidateLogStoreResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
}

model ValidateLogStoreResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateLogStoreResponseBody(name='body'),
}

/**
 * @summary 校验LogStore
 *
 * @param request ValidateLogStoreRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ValidateLogStoreResponse
 */
@context("validateLogStoreWithContext")
async function validateLogStoreWithOptions(request: ValidateLogStoreRequest, runtime: $RuntimeOptions): ValidateLogStoreResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.logProjectName)) {
    body['LogProjectName'] = request.logProjectName;
  }
  if (!$isNull(request.logRegionId)) {
    body['LogRegionId'] = request.logRegionId;
  }
  if (!$isNull(request.logStoreName)) {
    body['LogStoreName'] = request.logStoreName;
  }
  if (!$isNull(request.logUserId)) {
    body['LogUserId'] = request.logUserId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ValidateLogStore',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 校验LogStore
 *
 * @param request ValidateLogStoreRequest
 * @return ValidateLogStoreResponse
 */
async function validateLogStore(request: ValidateLogStoreRequest): ValidateLogStoreResponse {
  var runtime = new $RuntimeOptions{};
  return validateLogStoreWithOptions(request, runtime);
}

model ValidateNormalizationRuleRequest {
  data?: string(name='Data', example='123456。'),
  lang?: string(name='Lang', example='zh。'),
  normalizationCategoryId?: string(name='NormalizationCategoryId', example='NETWORK_CATEGORY。'),
  normalizationSchemaId?: string(name='NormalizationSchemaId', example='HTTP_ACTIVITY。'),
  regionId?: string(name='RegionId', example='cn-hangzhou。'),
  roleFor?: long(name='RoleFor', example='173326*******。'),
}

model ValidateNormalizationRuleResponseBody = {
  requestId?: string(name='RequestId', example='6276D891-*****-55B2-87B9-74D413F7****。'),
  validateResult?: [ 
    {
      fieldName?: string(name='FieldName', example='host。'),
      fieldValue?: string(name='FieldValue', example='ze。'),
      message?: string(name='Message', example='success。'),
      normalizationFieldName?: string(name='NormalizationFieldName', example='host。'),
      normalizationFieldRequired?: boolean(name='NormalizationFieldRequired', example='true。'),
      result?: int32(name='Result', example='1。'),
    }
  ](name='ValidateResult'),
}

model ValidateNormalizationRuleResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateNormalizationRuleResponseBody(name='body'),
}

/**
 * @summary 校验规则和数据
 *
 * @param request ValidateNormalizationRuleRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ValidateNormalizationRuleResponse
 */
@context("validateNormalizationRuleWithContext")
async function validateNormalizationRuleWithOptions(request: ValidateNormalizationRuleRequest, runtime: $RuntimeOptions): ValidateNormalizationRuleResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.data)) {
    body['Data'] = request.data;
  }
  if (!$isNull(request.lang)) {
    body['Lang'] = request.lang;
  }
  if (!$isNull(request.normalizationCategoryId)) {
    body['NormalizationCategoryId'] = request.normalizationCategoryId;
  }
  if (!$isNull(request.normalizationSchemaId)) {
    body['NormalizationSchemaId'] = request.normalizationSchemaId;
  }
  if (!$isNull(request.regionId)) {
    body['RegionId'] = request.regionId;
  }
  if (!$isNull(request.roleFor)) {
    body['RoleFor'] = request.roleFor;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ValidateNormalizationRule',
    version = '2024-12-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 校验规则和数据
 *
 * @param request ValidateNormalizationRuleRequest
 * @return ValidateNormalizationRuleResponse
 */
async function validateNormalizationRule(request: ValidateNormalizationRuleRequest): ValidateNormalizationRuleResponse {
  var runtime = new $RuntimeOptions{};
  return validateNormalizationRuleWithOptions(request, runtime);
}

