/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cd', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddProductImageRequest {
  productId?: string(name='ProductId', description='商品编号(ID)-必填'),
  productImageList?: [ 
    {
      productImageType?: string(name='ProductImageType', description='商品图片类型（默认平拍：horizontal）-选填'),
      productImageUrl?: string(name='ProductImageUrl', description='商品图片URL-必填'),
    }
  ](name='ProductImageList', description='商品图片列表-必填'),
}

model AddProductImageShrinkRequest {
  productId?: string(name='ProductId', description='商品编号(ID)-必填'),
  productImageListShrink?: string(name='ProductImageList', description='商品图片列表-必填'),
}

model AddProductImageResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: string(name='Data', description='业务数据'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='成功标志'),
}

model AddProductImageResponse = {
  headers: map[string]string(name='headers'),
  body: AddProductImageResponseBody(name='body'),
}

async function addProductImage(request: AddProductImageRequest): AddProductImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addProductImageWithOptions(request, headers, runtime);
}

async function addProductImageWithOptions(tmpReq: AddProductImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddProductImageResponse {
  Util.validateModel(tmpReq);
  var request = new AddProductImageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.productImageList)) {
    request.productImageListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.productImageList, 'ProductImageList', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productImageListShrink)) {
    body['ProductImageList'] = request.productImageListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddProductImage',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/AddProductImage`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model AddShopToGroupRequest {
  shopGroupId?: string(name='ShopGroupId'),
  shopIdList?: [ string ](name='ShopIdList'),
}

model AddShopToGroupShrinkRequest {
  shopGroupId?: string(name='ShopGroupId'),
  shopIdListShrink?: string(name='ShopIdList'),
}

model AddShopToGroupResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: string(name='Data', description='业务数据'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='成功标志'),
}

model AddShopToGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AddShopToGroupResponseBody(name='body'),
}

async function addShopToGroup(request: AddShopToGroupRequest): AddShopToGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addShopToGroupWithOptions(request, headers, runtime);
}

async function addShopToGroupWithOptions(tmpReq: AddShopToGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddShopToGroupResponse {
  Util.validateModel(tmpReq);
  var request = new AddShopToGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopIdList)) {
    request.shopIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopIdList, 'ShopIdList', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.shopGroupId)) {
    body['ShopGroupId'] = request.shopGroupId;
  }
  if (!Util.isUnset(request.shopIdListShrink)) {
    body['ShopIdList'] = request.shopIdListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddShopToGroup',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/AddShopToGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateMenuDataRequest {
  batchId?: string(name='BatchId', description='菜单商品容器数据批次id-选填'),
  priority?: int32(name='Priority', description='数据优先级，数值越高，优先级越大（默认为0）-选填'),
  productCombineList?: [ 
    {
      name?: string(name='Name', description='商品组名称-选填'),
      order?: int32(name='Order', description='组合顺序-必填'),
      productItemList?: [ 
        {
          order?: int32(name='Order', description='商品顺序-必填'),
          productInfo?: {
            chineseName?: string(name='ChineseName', description='商品中文名称-必填'),
            currentPrice?: string(name='CurrentPrice', description='商品现价-选填'),
            description?: string(name='Description', description='商品描述-选填'),
            englishName?: string(name='EnglishName', description='商品英文名称-选填'),
            iconText?: string(name='IconText', description='商品图标文字-选填'),
            originalPrice?: string(name='OriginalPrice', description='商品原价-选填'),
            productId?: string(name='ProductId', description='商品编号(ID)-必填'),
            productType?: string(name='ProductType', description='商品类型（数据格式：顶层类型-中层类型-底层类型）-选填'),
            temperature?: string(name='Temperature', description='商品冷热属性（hot,cold,normal，默认normal，不做特效展示）-选填'),
          }(name='ProductInfo', description='商品信息-必填'),
        }
      ](name='ProductItemList', description='商品组信息-必填'),
    }
  ](name='ProductCombineList', description='菜单商品容器数据-必填'),
  productContainerId?: string(name='ProductContainerId', description='菜单商品容器数据id-必填'),
  shopGroupId?: string(name='ShopGroupId', description='自定义门店组id（当shopIdList为空才生效）-选填'),
  shopIdList?: [ string ](name='ShopIdList', description='自定义门店id列表（shopIdList不为空，shopGroupId无效，shopId=-1表示门店默认数据）-选填'),
  type?: string(name='Type', description='菜单商品容器数据类型（目前支持：top,morning,afternoon）-必填'),
}

model CreateMenuDataShrinkRequest {
  batchId?: string(name='BatchId', description='菜单商品容器数据批次id-选填'),
  priority?: int32(name='Priority', description='数据优先级，数值越高，优先级越大（默认为0）-选填'),
  productCombineListShrink?: string(name='ProductCombineList', description='菜单商品容器数据-必填'),
  productContainerId?: string(name='ProductContainerId', description='菜单商品容器数据id-必填'),
  shopGroupId?: string(name='ShopGroupId', description='自定义门店组id（当shopIdList为空才生效）-选填'),
  shopIdListShrink?: string(name='ShopIdList', description='自定义门店id列表（shopIdList不为空，shopGroupId无效，shopId=-1表示门店默认数据）-选填'),
  type?: string(name='Type', description='菜单商品容器数据类型（目前支持：top,morning,afternoon）-必填'),
}

model CreateMenuDataResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: string(name='Data', description='业务数据'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='成功标志'),
}

model CreateMenuDataResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMenuDataResponseBody(name='body'),
}

async function createMenuData(request: CreateMenuDataRequest): CreateMenuDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createMenuDataWithOptions(request, headers, runtime);
}

async function createMenuDataWithOptions(tmpReq: CreateMenuDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMenuDataResponse {
  Util.validateModel(tmpReq);
  var request = new CreateMenuDataShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.productCombineList)) {
    request.productCombineListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.productCombineList, 'ProductCombineList', 'json');
  }
  if (!Util.isUnset(tmpReq.shopIdList)) {
    request.shopIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopIdList, 'ShopIdList', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.batchId)) {
    body['BatchId'] = request.batchId;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.productCombineListShrink)) {
    body['ProductCombineList'] = request.productCombineListShrink;
  }
  if (!Util.isUnset(request.productContainerId)) {
    body['ProductContainerId'] = request.productContainerId;
  }
  if (!Util.isUnset(request.shopGroupId)) {
    body['ShopGroupId'] = request.shopGroupId;
  }
  if (!Util.isUnset(request.shopIdListShrink)) {
    body['ShopIdList'] = request.shopIdListShrink;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMenuData',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/CreateMenuData`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateShopRequest {
  shopList?: [ 
    {
      deviceMacList?: [ string ](name='DeviceMacList', description='设备列表(查询结果)'),
      deviceNum?: int32(name='DeviceNum', description='设备总数(查询结果)'),
      gmtCreateTime?: long(name='GmtCreateTime', description='添加时间(查询结果)'),
      latitude?: string(name='Latitude', description='地理纬度-选填'),
      location?: string(name='Location', description='门店地址-选填'),
      longitude?: string(name='Longitude', description='地理经度-选填'),
      regionAddress?: string(name='RegionAddress', description='区域地址-省市区(查询结果)'),
      regionCode?: string(name='RegionCode', description='区域编码(查询结果)'),
      remark?: string(name='Remark', description='备注(可空)-选填'),
      shopGroupIds?: [ string ](name='ShopGroupIds', description='门店组自定义ID-选填'),
      shopId?: string(name='ShopId', description='自定义门店编号(ID)-必填'),
      shopName?: string(name='ShopName', description='门店名称-必填'),
      weekdaysEndTime?: string(name='WeekdaysEndTime', description='工作日结束营业时间-选填，格式：HH:mm:ss'),
      weekdaysStartTime?: string(name='WeekdaysStartTime', description='工作日开始营业时间-选填，格式：HH:mm:ss'),
      weekendEndTime?: string(name='WeekendEndTime', description='周末结束营业时间-选填，格式：HH:mm:ss'),
      weekendStartTime?: string(name='WeekendStartTime', description='周末开始营业时间-选填，格式：HH:mm:ss'),
    }
  ](name='ShopList'),
}

model CreateShopShrinkRequest {
  shopListShrink?: string(name='ShopList'),
}

model CreateShopResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: [ string ](name='Data', description='业务数据'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='成功标志'),
}

model CreateShopResponse = {
  headers: map[string]string(name='headers'),
  body: CreateShopResponseBody(name='body'),
}

async function createShop(request: CreateShopRequest): CreateShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createShopWithOptions(request, headers, runtime);
}

async function createShopWithOptions(tmpReq: CreateShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateShopResponse {
  Util.validateModel(tmpReq);
  var request = new CreateShopShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopList)) {
    request.shopListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopList, 'ShopList', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.shopListShrink)) {
    body['ShopList'] = request.shopListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateShop',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/CreateShop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateShopGroupRequest {
  shopGroupList?: [ 
    {
      shopGroupId?: string(name='ShopGroupId', description='门店组编号（ID）'),
      shopGroupName?: string(name='ShopGroupName', description='门店组名称'),
    }
  ](name='ShopGroupList'),
}

model CreateShopGroupShrinkRequest {
  shopGroupListShrink?: string(name='ShopGroupList'),
}

model CreateShopGroupResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: [ string ](name='Data', description='业务数据'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='成功标志'),
}

model CreateShopGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateShopGroupResponseBody(name='body'),
}

async function createShopGroup(request: CreateShopGroupRequest): CreateShopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createShopGroupWithOptions(request, headers, runtime);
}

async function createShopGroupWithOptions(tmpReq: CreateShopGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateShopGroupResponse {
  Util.validateModel(tmpReq);
  var request = new CreateShopGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopGroupList)) {
    request.shopGroupListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopGroupList, 'ShopGroupList', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.shopGroupListShrink)) {
    body['ShopGroupList'] = request.shopGroupListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateShopGroup',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/CreateShopGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetMenuDataStatusRequest {
  batchId?: string(name='BatchId', description='批次ID'),
  productContainerId?: string(name='ProductContainerId', description='商品容器ID'),
}

model GetMenuDataStatusResponseBody = {
  batchId?: string(name='BatchId', description='数据批次ID（根据batchId查询）-选填'),
  code?: string(name='Code', description='状态码'),
  failed?: long(name='Failed', description='推送失败门店数量'),
  failedProductContainerList?: [ string ](name='FailedProductContainerList', description='推送失败菜单商品容器数据id'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  productContainerId?: string(name='ProductContainerId', description='菜单商品容器数据id-选填'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='成功标志'),
  total?: long(name='Total', description='推送门店总数(对于门店组数据，则实时计算当前门店组中门店数)'),
}

model GetMenuDataStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetMenuDataStatusResponseBody(name='body'),
}

async function getMenuDataStatus(request: GetMenuDataStatusRequest): GetMenuDataStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMenuDataStatusWithOptions(request, headers, runtime);
}

async function getMenuDataStatusWithOptions(request: GetMenuDataStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMenuDataStatusResponse {
  Util.validateModel(request);
  var body : map[string]any= {};
  if (!Util.isUnset(request.batchId)) {
    body['BatchId'] = request.batchId;
  }
  if (!Util.isUnset(request.productContainerId)) {
    body['ProductContainerId'] = request.productContainerId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMenuDataStatus',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/GetMenuDataStatus`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveShopFromGroupRequest {
  shopGroupId?: string(name='ShopGroupId'),
  shopIdList?: [ string ](name='ShopIdList'),
}

model RemoveShopFromGroupShrinkRequest {
  shopGroupId?: string(name='ShopGroupId'),
  shopIdListShrink?: string(name='ShopIdList'),
}

model RemoveShopFromGroupResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: string(name='Data', description='业务数据'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='成功标志'),
}

model RemoveShopFromGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveShopFromGroupResponseBody(name='body'),
}

async function removeShopFromGroup(request: RemoveShopFromGroupRequest): RemoveShopFromGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeShopFromGroupWithOptions(request, headers, runtime);
}

async function removeShopFromGroupWithOptions(tmpReq: RemoveShopFromGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveShopFromGroupResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveShopFromGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopIdList)) {
    request.shopIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopIdList, 'ShopIdList', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.shopGroupId)) {
    body['ShopGroupId'] = request.shopGroupId;
  }
  if (!Util.isUnset(request.shopIdListShrink)) {
    body['ShopIdList'] = request.shopIdListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveShopFromGroup',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/RemoveShopFromGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

