/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cd', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddProductImageRequest {
  productId?: string(name='ProductId', description='商品编号(ID)-必填'),
  productImageList?: [ 
    {
      productImageType?: string(name='ProductImageType', description='商品图片类型（默认平拍：horizontal）-选填'),
      productImageUrl?: string(name='ProductImageUrl', description='商品图片URL-必填'),
    }
  ](name='ProductImageList', description='商品图片列表-必填'),
}

model AddProductImageShrinkRequest {
  productId?: string(name='ProductId', description='商品编号(ID)-必填'),
  productImageListShrink?: string(name='ProductImageList', description='商品图片列表-必填'),
}

model AddProductImageResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: string(name='Data', description='业务数据'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='成功标志'),
}

model AddProductImageResponse = {
  headers: map[string]string(name='headers'),
  body: AddProductImageResponseBody(name='body'),
}

async function addProductImage(request: AddProductImageRequest): AddProductImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addProductImageWithOptions(request, headers, runtime);
}

async function addProductImageWithOptions(tmpReq: AddProductImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddProductImageResponse {
  Util.validateModel(tmpReq);
  var request = new AddProductImageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.productImageList)) {
    request.productImageListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.productImageList, 'ProductImageList', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.productId)) {
    body.ProductId = request.productId;
  }
  if (!Util.isUnset(request.productImageListShrink)) {
    body.ProductImageList = request.productImageListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('AddProductImage', '2021-12-7', 'HTTPS', 'POST', 'AK', `/AddProductImage`, 'json', req, runtime);
}

model CreateShopRequest {
  shopList?: [ 
    {
      deviceMacList?: [ string ](name='DeviceMacList', description='设备列表(查询结果)'),
      deviceNum?: int32(name='DeviceNum', description='设备总数(查询结果)'),
      gmtCreateTime?: long(name='GmtCreateTime', description='添加时间(查询结果)'),
      latitude?: string(name='Latitude', description='地理纬度-选填'),
      location?: string(name='Location', description='门店地址-选填'),
      longitude?: string(name='Longitude', description='地理经度-选填'),
      regionAddress?: string(name='RegionAddress', description='区域地址-省市区(查询结果)'),
      regionCode?: string(name='RegionCode', description='区域编码(查询结果)'),
      remark?: string(name='Remark', description='备注(可空)-选填'),
      shopGroupIds?: [ string ](name='ShopGroupIds', description='门店组自定义ID-选填'),
      shopId?: string(name='ShopId', description='自定义门店编号(ID)-必填'),
      shopName?: string(name='ShopName', description='门店名称-必填'),
      weekdaysEndTime?: string(name='WeekdaysEndTime', description='工作日结束营业时间-选填，格式：HH:mm:ss'),
      weekdaysStartTime?: string(name='WeekdaysStartTime', description='工作日开始营业时间-选填，格式：HH:mm:ss'),
      weekendEndTime?: string(name='WeekendEndTime', description='周末结束营业时间-选填，格式：HH:mm:ss'),
      weekendStartTime?: string(name='WeekendStartTime', description='周末开始营业时间-选填，格式：HH:mm:ss'),
    }
  ](name='ShopList'),
}

model CreateShopShrinkRequest {
  shopListShrink?: string(name='ShopList'),
}

model CreateShopResponseBody = {
  code?: string(name='Code', description='状态码'),
  data?: [ string ](name='Data', description='业务数据'),
  httpStatusCode?: int32(name='HttpStatusCode', description='http状态码'),
  message?: string(name='Message', description='说明'),
  requestId?: string(name='RequestId', description='请求ID'),
  success?: boolean(name='Success', description='成功标志'),
}

model CreateShopResponse = {
  headers: map[string]string(name='headers'),
  body: CreateShopResponseBody(name='body'),
}

async function createShop(request: CreateShopRequest): CreateShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createShopWithOptions(request, headers, runtime);
}

async function createShopWithOptions(tmpReq: CreateShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateShopResponse {
  Util.validateModel(tmpReq);
  var request = new CreateShopShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopList)) {
    request.shopListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopList, 'ShopList', 'json');
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.shopListShrink)) {
    body.ShopList = request.shopListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  return doROARequestWithForm('CreateShop', '2021-12-7', 'HTTPS', 'POST', 'AK', `/CreateShop`, 'json', req, runtime);
}

