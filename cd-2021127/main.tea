/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cd', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddProductImageRequest {
  productId?: string(name='ProductId'),
  productImageList?: [ 
    {
      productImageCutout?: boolean(name='ProductImageCutout'),
      productImageId?: string(name='ProductImageId'),
      productImageLabels?: [ string ](name='ProductImageLabels'),
      productImageType?: string(name='ProductImageType'),
      productImageUrl?: string(name='ProductImageUrl'),
    }
  ](name='ProductImageList'),
  productName?: string(name='ProductName'),
}

model AddProductImageShrinkRequest {
  productId?: string(name='ProductId'),
  productImageListShrink?: string(name='ProductImageList'),
  productName?: string(name='ProductName'),
}

model AddProductImageResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddProductImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddProductImageResponseBody(name='body'),
}

async function addProductImage(request: AddProductImageRequest): AddProductImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addProductImageWithOptions(request, headers, runtime);
}

async function addProductImageWithOptions(tmpReq: AddProductImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddProductImageResponse {
  Util.validateModel(tmpReq);
  var request = new AddProductImageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.productImageList)) {
    request.productImageListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.productImageList, 'ProductImageList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productImageListShrink)) {
    body['ProductImageList'] = request.productImageListShrink;
  }
  if (!Util.isUnset(request.productName)) {
    body['ProductName'] = request.productName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddProductImage',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/AddProductImage`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model AddShopToGroupRequest {
  shopGroupId?: string(name='ShopGroupId'),
  shopIdList?: [ string ](name='ShopIdList'),
}

model AddShopToGroupShrinkRequest {
  shopGroupId?: string(name='ShopGroupId'),
  shopIdListShrink?: string(name='ShopIdList'),
}

model AddShopToGroupResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddShopToGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddShopToGroupResponseBody(name='body'),
}

async function addShopToGroup(request: AddShopToGroupRequest): AddShopToGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addShopToGroupWithOptions(request, headers, runtime);
}

async function addShopToGroupWithOptions(tmpReq: AddShopToGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddShopToGroupResponse {
  Util.validateModel(tmpReq);
  var request = new AddShopToGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopIdList)) {
    request.shopIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopIdList, 'ShopIdList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.shopGroupId)) {
    body['ShopGroupId'] = request.shopGroupId;
  }
  if (!Util.isUnset(request.shopIdListShrink)) {
    body['ShopIdList'] = request.shopIdListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddShopToGroup',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/AddShopToGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model AddShopsToGroupRequest {
  shopGroupId?: string(name='ShopGroupId'),
  shopIdList?: [ string ](name='ShopIdList'),
}

model AddShopsToGroupShrinkRequest {
  shopGroupId?: string(name='ShopGroupId'),
  shopIdListShrink?: string(name='ShopIdList'),
}

model AddShopsToGroupResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      shopId?: string(name='ShopId'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddShopsToGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddShopsToGroupResponseBody(name='body'),
}

async function addShopsToGroup(request: AddShopsToGroupRequest): AddShopsToGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return addShopsToGroupWithOptions(request, headers, runtime);
}

async function addShopsToGroupWithOptions(tmpReq: AddShopsToGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): AddShopsToGroupResponse {
  Util.validateModel(tmpReq);
  var request = new AddShopsToGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopIdList)) {
    request.shopIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopIdList, 'ShopIdList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.shopGroupId)) {
    body['ShopGroupId'] = request.shopGroupId;
  }
  if (!Util.isUnset(request.shopIdListShrink)) {
    body['ShopIdList'] = request.shopIdListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddShopsToGroup',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/AddShopsToGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model BatchCreateShopRequest {
  shopList?: [ 
    {
      businessStatus?: int32(name='BusinessStatus'),
      latitude?: string(name='Latitude'),
      location?: string(name='Location'),
      longitude?: string(name='Longitude'),
      regionAddress?: string(name='RegionAddress'),
      regionCode?: string(name='RegionCode'),
      remark?: string(name='Remark'),
      shopGroupIds?: [ string ](name='ShopGroupIds'),
      shopId?: string(name='ShopId'),
      shopName?: string(name='ShopName'),
      weekdaysEndTime?: string(name='WeekdaysEndTime'),
      weekdaysStartTime?: string(name='WeekdaysStartTime'),
      weekendEndTime?: string(name='WeekendEndTime'),
      weekendStartTime?: string(name='WeekendStartTime'),
    }
  ](name='ShopList'),
}

model BatchCreateShopShrinkRequest {
  shopListShrink?: string(name='ShopList'),
}

model BatchCreateShopResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      shopId?: string(name='ShopId'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchCreateShopResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchCreateShopResponseBody(name='body'),
}

async function batchCreateShop(request: BatchCreateShopRequest): BatchCreateShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return batchCreateShopWithOptions(request, headers, runtime);
}

async function batchCreateShopWithOptions(tmpReq: BatchCreateShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchCreateShopResponse {
  Util.validateModel(tmpReq);
  var request = new BatchCreateShopShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopList)) {
    request.shopListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopList, 'ShopList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.shopListShrink)) {
    body['ShopList'] = request.shopListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchCreateShop',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/BatchCreateShop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model BatchCreateShopGroupRequest {
  shopGroupList?: [ 
    {
      shopGroupId?: string(name='ShopGroupId'),
      shopGroupName?: string(name='ShopGroupName'),
    }
  ](name='ShopGroupList'),
}

model BatchCreateShopGroupShrinkRequest {
  shopGroupListShrink?: string(name='ShopGroupList'),
}

model BatchCreateShopGroupResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      shopGroupId?: string(name='ShopGroupId'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model BatchCreateShopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BatchCreateShopGroupResponseBody(name='body'),
}

async function batchCreateShopGroup(request: BatchCreateShopGroupRequest): BatchCreateShopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return batchCreateShopGroupWithOptions(request, headers, runtime);
}

async function batchCreateShopGroupWithOptions(tmpReq: BatchCreateShopGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): BatchCreateShopGroupResponse {
  Util.validateModel(tmpReq);
  var request = new BatchCreateShopGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopGroupList)) {
    request.shopGroupListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopGroupList, 'ShopGroupList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.shopGroupListShrink)) {
    body['ShopGroupList'] = request.shopGroupListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BatchCreateShopGroup',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/BatchCreateShopGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateMenuDataRequest {
  batchId?: string(name='BatchId'),
  priority?: int32(name='Priority'),
  productCombineList?: [ 
    {
      name?: string(name='Name'),
      order?: int32(name='Order'),
      productItemList?: [ 
        {
          order?: int32(name='Order'),
          productInfo?: {
            chineseName?: string(name='ChineseName'),
            currentPrice?: string(name='CurrentPrice'),
            description?: string(name='Description'),
            englishName?: string(name='EnglishName'),
            iconText?: string(name='IconText'),
            originalPrice?: string(name='OriginalPrice'),
            productId?: string(name='ProductId'),
            productType?: string(name='ProductType'),
            temperature?: string(name='Temperature'),
          }(name='ProductInfo'),
        }
      ](name='ProductItemList'),
    }
  ](name='ProductCombineList'),
  productContainerId?: string(name='ProductContainerId'),
  shopGroupId?: string(name='ShopGroupId'),
  shopIdList?: [ string ](name='ShopIdList'),
  type?: string(name='Type'),
}

model CreateMenuDataShrinkRequest {
  batchId?: string(name='BatchId'),
  priority?: int32(name='Priority'),
  productCombineListShrink?: string(name='ProductCombineList'),
  productContainerId?: string(name='ProductContainerId'),
  shopGroupId?: string(name='ShopGroupId'),
  shopIdListShrink?: string(name='ShopIdList'),
  type?: string(name='Type'),
}

model CreateMenuDataResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateMenuDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMenuDataResponseBody(name='body'),
}

async function createMenuData(request: CreateMenuDataRequest): CreateMenuDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createMenuDataWithOptions(request, headers, runtime);
}

async function createMenuDataWithOptions(tmpReq: CreateMenuDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMenuDataResponse {
  Util.validateModel(tmpReq);
  var request = new CreateMenuDataShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.productCombineList)) {
    request.productCombineListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.productCombineList, 'ProductCombineList', 'json');
  }
  if (!Util.isUnset(tmpReq.shopIdList)) {
    request.shopIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopIdList, 'ShopIdList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.batchId)) {
    body['BatchId'] = request.batchId;
  }
  if (!Util.isUnset(request.priority)) {
    body['Priority'] = request.priority;
  }
  if (!Util.isUnset(request.productCombineListShrink)) {
    body['ProductCombineList'] = request.productCombineListShrink;
  }
  if (!Util.isUnset(request.productContainerId)) {
    body['ProductContainerId'] = request.productContainerId;
  }
  if (!Util.isUnset(request.shopGroupId)) {
    body['ShopGroupId'] = request.shopGroupId;
  }
  if (!Util.isUnset(request.shopIdListShrink)) {
    body['ShopIdList'] = request.shopIdListShrink;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMenuData',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/CreateMenuData`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateProductRequest {
  chineseName?: string(name='ChineseName'),
  currentPrice?: string(name='CurrentPrice'),
  description?: string(name='Description'),
  englishName?: string(name='EnglishName'),
  iconText?: string(name='IconText'),
  originalPrice?: string(name='OriginalPrice'),
  productId?: string(name='ProductId'),
  productType?: string(name='ProductType'),
  temperature?: string(name='Temperature'),
}

model CreateProductResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateProductResponseBody(name='body'),
}

async function createProduct(request: CreateProductRequest): CreateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProductWithOptions(request, headers, runtime);
}

async function createProductWithOptions(request: CreateProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProductResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.chineseName)) {
    body['ChineseName'] = request.chineseName;
  }
  if (!Util.isUnset(request.currentPrice)) {
    body['CurrentPrice'] = request.currentPrice;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.englishName)) {
    body['EnglishName'] = request.englishName;
  }
  if (!Util.isUnset(request.iconText)) {
    body['IconText'] = request.iconText;
  }
  if (!Util.isUnset(request.originalPrice)) {
    body['OriginalPrice'] = request.originalPrice;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.temperature)) {
    body['Temperature'] = request.temperature;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProduct',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/CreateProduct`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateShopRequest {
  shopList?: [ 
    {
      businessStatus?: int32(name='BusinessStatus'),
      latitude?: string(name='Latitude'),
      location?: string(name='Location'),
      longitude?: string(name='Longitude'),
      regionAddress?: string(name='RegionAddress'),
      regionCode?: string(name='RegionCode'),
      remark?: string(name='Remark'),
      shopGroupIds?: [ string ](name='ShopGroupIds'),
      shopId?: string(name='ShopId'),
      shopName?: string(name='ShopName'),
      weekdaysEndTime?: string(name='WeekdaysEndTime'),
      weekdaysStartTime?: string(name='WeekdaysStartTime'),
      weekendEndTime?: string(name='WeekendEndTime'),
      weekendStartTime?: string(name='WeekendStartTime'),
    }
  ](name='ShopList'),
}

model CreateShopShrinkRequest {
  shopListShrink?: string(name='ShopList'),
}

model CreateShopResponseBody = {
  code?: string(name='Code'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateShopResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateShopResponseBody(name='body'),
}

async function createShop(request: CreateShopRequest): CreateShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createShopWithOptions(request, headers, runtime);
}

async function createShopWithOptions(tmpReq: CreateShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateShopResponse {
  Util.validateModel(tmpReq);
  var request = new CreateShopShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopList)) {
    request.shopListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopList, 'ShopList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.shopListShrink)) {
    body['ShopList'] = request.shopListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateShop',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/CreateShop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model CreateShopGroupRequest {
  shopGroupList?: [ 
    {
      shopGroupId?: string(name='ShopGroupId'),
      shopGroupName?: string(name='ShopGroupName'),
    }
  ](name='ShopGroupList'),
}

model CreateShopGroupShrinkRequest {
  shopGroupListShrink?: string(name='ShopGroupList'),
}

model CreateShopGroupResponseBody = {
  code?: string(name='Code'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateShopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateShopGroupResponseBody(name='body'),
}

async function createShopGroup(request: CreateShopGroupRequest): CreateShopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createShopGroupWithOptions(request, headers, runtime);
}

async function createShopGroupWithOptions(tmpReq: CreateShopGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateShopGroupResponse {
  Util.validateModel(tmpReq);
  var request = new CreateShopGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopGroupList)) {
    request.shopGroupListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopGroupList, 'ShopGroupList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.shopGroupListShrink)) {
    body['ShopGroupList'] = request.shopGroupListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateShopGroup',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/CreateShopGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteProductRequest {
  productId?: string(name='ProductId'),
}

model DeleteProductResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductResponseBody(name='body'),
}

async function deleteProduct(request: DeleteProductRequest): DeleteProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProductWithOptions(request, headers, runtime);
}

async function deleteProductWithOptions(request: DeleteProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProductResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProduct',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/DeleteProduct`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteProductImageRequest {
  productCode?: string(name='ProductCode'),
  productImageIds?: [ string ](name='ProductImageIds'),
}

model DeleteProductImageShrinkRequest {
  productCode?: string(name='ProductCode'),
  productImageIdsShrink?: string(name='ProductImageIds'),
}

model DeleteProductImageResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteProductImageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteProductImageResponseBody(name='body'),
}

async function deleteProductImage(request: DeleteProductImageRequest): DeleteProductImageResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProductImageWithOptions(request, headers, runtime);
}

async function deleteProductImageWithOptions(tmpReq: DeleteProductImageRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProductImageResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteProductImageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.productImageIds)) {
    request.productImageIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.productImageIds, 'ProductImageIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productImageIdsShrink)) {
    body['ProductImageIds'] = request.productImageIdsShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProductImage',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/DeleteProductImage`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteShopRequest {
  shopId?: string(name='ShopId'),
}

model DeleteShopResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteShopResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteShopResponseBody(name='body'),
}

async function deleteShop(request: DeleteShopRequest): DeleteShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteShopWithOptions(request, headers, runtime);
}

async function deleteShopWithOptions(request: DeleteShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteShopResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.shopId)) {
    body['ShopId'] = request.shopId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteShop',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/DeleteShop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model DeleteShopGroupRequest {
  shopGroupId?: string(name='ShopGroupId'),
}

model DeleteShopGroupResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteShopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteShopGroupResponseBody(name='body'),
}

async function deleteShopGroup(request: DeleteShopGroupRequest): DeleteShopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteShopGroupWithOptions(request, headers, runtime);
}

async function deleteShopGroupWithOptions(request: DeleteShopGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteShopGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.shopGroupId)) {
    body['ShopGroupId'] = request.shopGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DeleteShopGroup',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/DeleteShopGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetMenuDataStatusRequest {
  batchId?: string(name='BatchId'),
  productContainerId?: string(name='ProductContainerId'),
}

model GetMenuDataStatusResponseBody = {
  batchId?: string(name='BatchId'),
  code?: string(name='Code'),
  failed?: long(name='Failed'),
  failedProductContainerList?: [ string ](name='FailedProductContainerList'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  productContainerId?: string(name='ProductContainerId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: long(name='Total'),
}

model GetMenuDataStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMenuDataStatusResponseBody(name='body'),
}

async function getMenuDataStatus(request: GetMenuDataStatusRequest): GetMenuDataStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMenuDataStatusWithOptions(request, headers, runtime);
}

async function getMenuDataStatusWithOptions(request: GetMenuDataStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMenuDataStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.batchId)) {
    body['BatchId'] = request.batchId;
  }
  if (!Util.isUnset(request.productContainerId)) {
    body['ProductContainerId'] = request.productContainerId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetMenuDataStatus',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/GetMenuDataStatus`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetProductRequest {
  productId?: string(name='ProductId'),
}

model GetProductResponseBody = {
  chineseName?: string(name='ChineseName'),
  code?: string(name='Code'),
  currentPrice?: string(name='CurrentPrice'),
  description?: string(name='Description'),
  englishName?: string(name='EnglishName'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  iconText?: string(name='IconText'),
  message?: string(name='Message'),
  originalPrice?: string(name='OriginalPrice'),
  productId?: string(name='ProductId'),
  productType?: string(name='ProductType'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  temperature?: string(name='Temperature'),
}

model GetProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetProductResponseBody(name='body'),
}

async function getProduct(request: GetProductRequest): GetProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProductWithOptions(request, headers, runtime);
}

async function getProductWithOptions(request: GetProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetProductResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetProduct',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/GetProduct`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetShopRequest {
  shopId?: string(name='ShopId'),
}

model GetShopResponseBody = {
  businessStatus?: int32(name='BusinessStatus'),
  code?: string(name='Code'),
  deviceMacList?: [ string ](name='DeviceMacList'),
  deviceNum?: int32(name='DeviceNum'),
  gmtCreateTime?: long(name='GmtCreateTime'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  latitude?: string(name='Latitude'),
  location?: string(name='Location'),
  longitude?: string(name='Longitude'),
  message?: string(name='Message'),
  regionAddress?: string(name='RegionAddress'),
  regionCode?: string(name='RegionCode'),
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId'),
  shopGroupIds?: [ string ](name='ShopGroupIds'),
  shopId?: string(name='ShopId'),
  shopName?: string(name='ShopName'),
  success?: boolean(name='Success'),
  weekdaysEndTime?: string(name='WeekdaysEndTime'),
  weekdaysStartTime?: string(name='WeekdaysStartTime'),
  weekendEndTime?: string(name='WeekendEndTime'),
  weekendStartTime?: string(name='WeekendStartTime'),
}

model GetShopResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetShopResponseBody(name='body'),
}

async function getShop(request: GetShopRequest): GetShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getShopWithOptions(request, headers, runtime);
}

async function getShopWithOptions(request: GetShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetShopResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.shopId)) {
    body['ShopId'] = request.shopId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetShop',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/GetShop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model GetShopGroupRequest {
  shopGroupId?: string(name='ShopGroupId'),
}

model GetShopGroupResponseBody = {
  code?: string(name='Code'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  shopGroupId?: string(name='ShopGroupId'),
  shopGroupName?: string(name='ShopGroupName'),
  success?: boolean(name='Success'),
}

model GetShopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetShopGroupResponseBody(name='body'),
}

async function getShopGroup(request: GetShopGroupRequest): GetShopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getShopGroupWithOptions(request, headers, runtime);
}

async function getShopGroupWithOptions(request: GetShopGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetShopGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.shopGroupId)) {
    body['ShopGroupId'] = request.shopGroupId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetShopGroup',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/GetShopGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListMenuDataRequest {
  batchId?: string(name='BatchId'),
  createRequestId?: string(name='CreateRequestId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  productContainerId?: string(name='ProductContainerId'),
}

model ListMenuDataResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      batchId?: string(name='BatchId'),
      priority?: int32(name='Priority'),
      productCombineList?: [ 
        {
          name?: string(name='Name'),
          order?: int32(name='Order'),
          productItemList?: [ 
            {
              order?: int32(name='Order'),
              productInfo?: {
                chineseName?: string(name='ChineseName'),
                currentPrice?: string(name='CurrentPrice'),
                description?: string(name='Description'),
                englishName?: string(name='EnglishName'),
                iconText?: string(name='IconText'),
                originalPrice?: string(name='OriginalPrice'),
                productId?: string(name='ProductId'),
                productType?: string(name='ProductType'),
                temperature?: string(name='Temperature'),
              }(name='ProductInfo'),
            }
          ](name='ProductItemList'),
        }
      ](name='ProductCombineList'),
      productContainerId?: string(name='ProductContainerId'),
      shopGroupId?: string(name='ShopGroupId'),
      shopIdList?: [ string ](name='ShopIdList'),
      type?: string(name='Type'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ListMenuDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListMenuDataResponseBody(name='body'),
}

async function listMenuData(request: ListMenuDataRequest): ListMenuDataResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMenuDataWithOptions(request, headers, runtime);
}

async function listMenuDataWithOptions(request: ListMenuDataRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMenuDataResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.batchId)) {
    body['BatchId'] = request.batchId;
  }
  if (!Util.isUnset(request.createRequestId)) {
    body['CreateRequestId'] = request.createRequestId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productContainerId)) {
    body['ProductContainerId'] = request.productContainerId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListMenuData',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/ListMenuData`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListProductRequest {
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  productName?: string(name='ProductName'),
}

model ListProductResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      chineseName?: string(name='ChineseName'),
      currentPrice?: string(name='CurrentPrice'),
      description?: string(name='Description'),
      englishName?: string(name='EnglishName'),
      iconText?: string(name='IconText'),
      originalPrice?: string(name='OriginalPrice'),
      productId?: string(name='ProductId'),
      productType?: string(name='ProductType'),
      temperature?: string(name='Temperature'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pageNo?: int32(name='PageNo'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: long(name='Total'),
}

model ListProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductResponseBody(name='body'),
}

async function listProduct(request: ListProductRequest): ListProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProductWithOptions(request, headers, runtime);
}

async function listProductWithOptions(request: ListProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProductResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNo)) {
    body['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productName)) {
    body['ProductName'] = request.productName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListProduct',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/ListProduct`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListShopRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  shopGroupIds?: [ string ](name='ShopGroupIds'),
  shopId?: string(name='ShopId'),
  shopName?: string(name='ShopName'),
}

model ListShopShrinkRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  shopGroupIdsShrink?: string(name='ShopGroupIds'),
  shopId?: string(name='ShopId'),
  shopName?: string(name='ShopName'),
}

model ListShopResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      businessStatus?: int32(name='BusinessStatus'),
      deviceMacList?: [ string ](name='DeviceMacList'),
      deviceNum?: int32(name='DeviceNum'),
      gmtCreateTime?: long(name='GmtCreateTime'),
      latitude?: string(name='Latitude'),
      location?: string(name='Location'),
      longitude?: string(name='Longitude'),
      regionAddress?: string(name='RegionAddress'),
      regionCode?: string(name='RegionCode'),
      remark?: string(name='Remark'),
      shopGroupIds?: [ string ](name='ShopGroupIds'),
      shopId?: string(name='ShopId'),
      shopName?: string(name='ShopName'),
      weekdaysEndTime?: string(name='WeekdaysEndTime'),
      weekdaysStartTime?: string(name='WeekdaysStartTime'),
      weekendEndTime?: string(name='WeekendEndTime'),
      weekendStartTime?: string(name='WeekendStartTime'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ListShopResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListShopResponseBody(name='body'),
}

async function listShop(request: ListShopRequest): ListShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listShopWithOptions(request, headers, runtime);
}

async function listShopWithOptions(tmpReq: ListShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListShopResponse {
  Util.validateModel(tmpReq);
  var request = new ListShopShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopGroupIds)) {
    request.shopGroupIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopGroupIds, 'ShopGroupIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.shopGroupIdsShrink)) {
    body['ShopGroupIds'] = request.shopGroupIdsShrink;
  }
  if (!Util.isUnset(request.shopId)) {
    body['ShopId'] = request.shopId;
  }
  if (!Util.isUnset(request.shopName)) {
    body['ShopName'] = request.shopName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListShop',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/ListShop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model ListShopGroupRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  shopGroupId?: string(name='ShopGroupId'),
  shopGroupName?: string(name='ShopGroupName'),
}

model ListShopGroupResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      shopGroupId?: string(name='ShopGroupId'),
      shopGroupName?: string(name='ShopGroupName'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model ListShopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListShopGroupResponseBody(name='body'),
}

async function listShopGroup(request: ListShopGroupRequest): ListShopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listShopGroupWithOptions(request, headers, runtime);
}

async function listShopGroupWithOptions(request: ListShopGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListShopGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.shopGroupId)) {
    body['ShopGroupId'] = request.shopGroupId;
  }
  if (!Util.isUnset(request.shopGroupName)) {
    body['ShopGroupName'] = request.shopGroupName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ListShopGroup',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/ListShopGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model QueryTicketListRequest {
  endTime?: long(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  shopIdList?: [ string ](name='ShopIdList'),
  startTime?: long(name='StartTime'),
  status?: int32(name='Status'),
  ticketIdList?: [ string ](name='TicketIdList'),
  ticketTypeList?: [ string ](name='TicketTypeList'),
}

model QueryTicketListShrinkRequest {
  endTime?: long(name='EndTime'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  shopIdListShrink?: string(name='ShopIdList'),
  startTime?: long(name='StartTime'),
  status?: int32(name='Status'),
  ticketIdListShrink?: string(name='TicketIdList'),
  ticketTypeListShrink?: string(name='TicketTypeList'),
}

model QueryTicketListResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      deviceAlias?: string(name='DeviceAlias'),
      deviceSn?: string(name='DeviceSn'),
      shopId?: string(name='ShopId'),
      shopName?: string(name='ShopName'),
      status?: int32(name='Status'),
      submitDate?: long(name='SubmitDate'),
      ticketId?: string(name='TicketId'),
      ticketType?: string(name='TicketType'),
      updateDate?: long(name='UpdateDate'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalCount?: long(name='TotalCount'),
}

model QueryTicketListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryTicketListResponseBody(name='body'),
}

async function queryTicketList(request: QueryTicketListRequest): QueryTicketListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return queryTicketListWithOptions(request, headers, runtime);
}

async function queryTicketListWithOptions(tmpReq: QueryTicketListRequest, headers: map[string]string, runtime: Util.RuntimeOptions): QueryTicketListResponse {
  Util.validateModel(tmpReq);
  var request = new QueryTicketListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopIdList)) {
    request.shopIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopIdList, 'ShopIdList', 'json');
  }
  if (!Util.isUnset(tmpReq.ticketIdList)) {
    request.ticketIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ticketIdList, 'TicketIdList', 'json');
  }
  if (!Util.isUnset(tmpReq.ticketTypeList)) {
    request.ticketTypeListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ticketTypeList, 'TicketTypeList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.endTime)) {
    body['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.pageNumber)) {
    body['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    body['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.shopIdListShrink)) {
    body['ShopIdList'] = request.shopIdListShrink;
  }
  if (!Util.isUnset(request.startTime)) {
    body['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    body['Status'] = request.status;
  }
  if (!Util.isUnset(request.ticketIdListShrink)) {
    body['TicketIdList'] = request.ticketIdListShrink;
  }
  if (!Util.isUnset(request.ticketTypeListShrink)) {
    body['TicketTypeList'] = request.ticketTypeListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'QueryTicketList',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/QueryTicketList`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveShopFromGroupRequest {
  shopGroupId?: string(name='ShopGroupId'),
  shopIdList?: [ string ](name='ShopIdList'),
}

model RemoveShopFromGroupShrinkRequest {
  shopGroupId?: string(name='ShopGroupId'),
  shopIdListShrink?: string(name='ShopIdList'),
}

model RemoveShopFromGroupResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveShopFromGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveShopFromGroupResponseBody(name='body'),
}

async function removeShopFromGroup(request: RemoveShopFromGroupRequest): RemoveShopFromGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeShopFromGroupWithOptions(request, headers, runtime);
}

async function removeShopFromGroupWithOptions(tmpReq: RemoveShopFromGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveShopFromGroupResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveShopFromGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopIdList)) {
    request.shopIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopIdList, 'ShopIdList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.shopGroupId)) {
    body['ShopGroupId'] = request.shopGroupId;
  }
  if (!Util.isUnset(request.shopIdListShrink)) {
    body['ShopIdList'] = request.shopIdListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveShopFromGroup',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/RemoveShopFromGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model RemoveShopsFromGroupRequest {
  shopGroupId?: string(name='ShopGroupId'),
  shopIdList?: [ string ](name='ShopIdList'),
}

model RemoveShopsFromGroupShrinkRequest {
  shopGroupId?: string(name='ShopGroupId'),
  shopIdListShrink?: string(name='ShopIdList'),
}

model RemoveShopsFromGroupResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      code?: string(name='Code'),
      message?: string(name='Message'),
      shopId?: string(name='ShopId'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RemoveShopsFromGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RemoveShopsFromGroupResponseBody(name='body'),
}

async function removeShopsFromGroup(request: RemoveShopsFromGroupRequest): RemoveShopsFromGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return removeShopsFromGroupWithOptions(request, headers, runtime);
}

async function removeShopsFromGroupWithOptions(tmpReq: RemoveShopsFromGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RemoveShopsFromGroupResponse {
  Util.validateModel(tmpReq);
  var request = new RemoveShopsFromGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopIdList)) {
    request.shopIdListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopIdList, 'ShopIdList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.shopGroupId)) {
    body['ShopGroupId'] = request.shopGroupId;
  }
  if (!Util.isUnset(request.shopIdListShrink)) {
    body['ShopIdList'] = request.shopIdListShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RemoveShopsFromGroup',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/RemoveShopsFromGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateProductRequest {
  chineseName?: string(name='ChineseName'),
  currentPrice?: string(name='CurrentPrice'),
  description?: string(name='Description'),
  englishName?: string(name='EnglishName'),
  iconText?: string(name='IconText'),
  originalPrice?: string(name='OriginalPrice'),
  productId?: string(name='ProductId'),
  productType?: string(name='ProductType'),
  temperature?: string(name='Temperature'),
}

model UpdateProductResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateProductResponseBody(name='body'),
}

async function updateProduct(request: UpdateProductRequest): UpdateProductResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProductWithOptions(request, headers, runtime);
}

async function updateProductWithOptions(request: UpdateProductRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProductResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.chineseName)) {
    body['ChineseName'] = request.chineseName;
  }
  if (!Util.isUnset(request.currentPrice)) {
    body['CurrentPrice'] = request.currentPrice;
  }
  if (!Util.isUnset(request.description)) {
    body['Description'] = request.description;
  }
  if (!Util.isUnset(request.englishName)) {
    body['EnglishName'] = request.englishName;
  }
  if (!Util.isUnset(request.iconText)) {
    body['IconText'] = request.iconText;
  }
  if (!Util.isUnset(request.originalPrice)) {
    body['OriginalPrice'] = request.originalPrice;
  }
  if (!Util.isUnset(request.productId)) {
    body['ProductId'] = request.productId;
  }
  if (!Util.isUnset(request.productType)) {
    body['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.temperature)) {
    body['Temperature'] = request.temperature;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProduct',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/UpdateProduct`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateShopRequest {
  businessStatus?: int32(name='BusinessStatus'),
  latitude?: string(name='Latitude'),
  location?: string(name='Location'),
  longitude?: string(name='Longitude'),
  regionAddress?: string(name='RegionAddress'),
  regionCode?: string(name='RegionCode'),
  remark?: string(name='Remark'),
  shopGroupIds?: [ string ](name='ShopGroupIds'),
  shopId?: string(name='ShopId'),
  shopName?: string(name='ShopName'),
  weekdaysEndTime?: string(name='WeekdaysEndTime'),
  weekdaysStartTime?: string(name='WeekdaysStartTime'),
  weekendEndTime?: string(name='WeekendEndTime'),
  weekendStartTime?: string(name='WeekendStartTime'),
}

model UpdateShopShrinkRequest {
  businessStatus?: int32(name='BusinessStatus'),
  latitude?: string(name='Latitude'),
  location?: string(name='Location'),
  longitude?: string(name='Longitude'),
  regionAddress?: string(name='RegionAddress'),
  regionCode?: string(name='RegionCode'),
  remark?: string(name='Remark'),
  shopGroupIdsShrink?: string(name='ShopGroupIds'),
  shopId?: string(name='ShopId'),
  shopName?: string(name='ShopName'),
  weekdaysEndTime?: string(name='WeekdaysEndTime'),
  weekdaysStartTime?: string(name='WeekdaysStartTime'),
  weekendEndTime?: string(name='WeekendEndTime'),
  weekendStartTime?: string(name='WeekendStartTime'),
}

model UpdateShopResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateShopResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateShopResponseBody(name='body'),
}

async function updateShop(request: UpdateShopRequest): UpdateShopResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateShopWithOptions(request, headers, runtime);
}

async function updateShopWithOptions(tmpReq: UpdateShopRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateShopResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateShopShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.shopGroupIds)) {
    request.shopGroupIdsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.shopGroupIds, 'ShopGroupIds', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.businessStatus)) {
    body['BusinessStatus'] = request.businessStatus;
  }
  if (!Util.isUnset(request.latitude)) {
    body['Latitude'] = request.latitude;
  }
  if (!Util.isUnset(request.location)) {
    body['Location'] = request.location;
  }
  if (!Util.isUnset(request.longitude)) {
    body['Longitude'] = request.longitude;
  }
  if (!Util.isUnset(request.regionAddress)) {
    body['RegionAddress'] = request.regionAddress;
  }
  if (!Util.isUnset(request.regionCode)) {
    body['RegionCode'] = request.regionCode;
  }
  if (!Util.isUnset(request.remark)) {
    body['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.shopGroupIdsShrink)) {
    body['ShopGroupIds'] = request.shopGroupIdsShrink;
  }
  if (!Util.isUnset(request.shopId)) {
    body['ShopId'] = request.shopId;
  }
  if (!Util.isUnset(request.shopName)) {
    body['ShopName'] = request.shopName;
  }
  if (!Util.isUnset(request.weekdaysEndTime)) {
    body['WeekdaysEndTime'] = request.weekdaysEndTime;
  }
  if (!Util.isUnset(request.weekdaysStartTime)) {
    body['WeekdaysStartTime'] = request.weekdaysStartTime;
  }
  if (!Util.isUnset(request.weekendEndTime)) {
    body['WeekendEndTime'] = request.weekendEndTime;
  }
  if (!Util.isUnset(request.weekendStartTime)) {
    body['WeekendStartTime'] = request.weekendStartTime;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateShop',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/UpdateShop`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

model UpdateShopGroupRequest {
  shopGroupId?: string(name='ShopGroupId'),
  shopGroupName?: string(name='ShopGroupName'),
}

model UpdateShopGroupResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateShopGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateShopGroupResponseBody(name='body'),
}

async function updateShopGroup(request: UpdateShopGroupRequest): UpdateShopGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateShopGroupWithOptions(request, headers, runtime);
}

async function updateShopGroupWithOptions(request: UpdateShopGroupRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateShopGroupResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.shopGroupId)) {
    body['ShopGroupId'] = request.shopGroupId;
  }
  if (!Util.isUnset(request.shopGroupName)) {
    body['ShopGroupName'] = request.shopGroupName;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateShopGroup',
    version = '2021-12-7',
    protocol = 'HTTPS',
    pathname = `/UpdateShopGroup`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

