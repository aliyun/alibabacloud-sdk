/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cd';
  @version = '2021-12-7';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddProductImageRequest {
  country?: string(name='Country', position='Body'),
  productId: string(name='ProductId', description='This parameter is required.', example='productId', position='Body'),
  productImageList: [ 
    {
      productImageCutout?: boolean(name='ProductImageCutout', example='true'),
      productImageId?: string(name='ProductImageId', example='productImageId'),
      productImageLabels?: [ string ](name='ProductImageLabels'),
      productImageType?: string(name='ProductImageType', example='horizontal'),
      productImageUrl: string(name='ProductImageUrl', description='This parameter is required.', example='url'),
    }
  ](name='ProductImageList', description='This parameter is required.', shrink='json', position='Body'),
  productName?: string(name='ProductName', example='productName', position='Body'),
}

model AddProductImageResponseBody = {
  code?: string(name='Code', example='success'),
  data?: string(name='Data', example='ProductId'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model AddProductImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddProductImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddProductImage  AddProductImageRequest
  * @return AddProductImageResponse
 */
async function addProductImage(request: AddProductImageRequest): AddProductImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddProductImage', 'POST', '/AddProductImage', 'json', true, 'form', request);
}

model AddShopToGroupRequest {
  country?: string(name='Country', position='Body'),
  shopGroupId: string(name='ShopGroupId', description='This parameter is required.', example='ShopGroupId', position='Body'),
  shopIdList?: [ string ](name='ShopIdList', shrink='json', position='Body'),
}

model AddShopToGroupResponseBody = {
  code?: string(name='Code', example='success'),
  data?: string(name='Data', example='ShopGroupId'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model AddShopToGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddShopToGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddShopToGroup  AddShopToGroupRequest
  * @return AddShopToGroupResponse
 */
async function addShopToGroup(request: AddShopToGroupRequest): AddShopToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddShopToGroup', 'POST', '/AddShopToGroup', 'json', true, 'form', request);
}

model AddShopsToGroupRequest {
  shopGroupId: string(name='ShopGroupId', description='This parameter is required.', example='ShopGroupId', position='Body'),
  shopIdList: [ string ](name='ShopIdList', description='This parameter is required.', shrink='json', position='Body'),
}

model AddShopsToGroupResponseBody = {
  code?: string(name='Code', example='success'),
  data?: [ 
    {
      code?: string(name='Code', example='Code'),
      message?: string(name='Message', example='Message'),
      shopId?: string(name='ShopId', example='ShopId'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model AddShopsToGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddShopsToGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddShopsToGroup  AddShopsToGroupRequest
  * @return AddShopsToGroupResponse
 */
async function addShopsToGroup(request: AddShopsToGroupRequest): AddShopsToGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AddShopsToGroup', 'POST', '/AddShopsToGroup', 'json', true, 'form', request);
}

model BaiLianSseChatRequest {
  input?: {
    bizParams?: {
      images?: [ 
        {
          type?: string(name='Type'),
          value?: string(name='Value'),
        }
      ](name='Images'),
    }(name='BizParams'),
    prompt?: string(name='Prompt'),
    requestId?: string(name='RequestId'),
    sessionId?: string(name='SessionId'),
  }(name='Input', shrink='json', position='Body'),
  parameters?: {
    incrementalOutput?: boolean(name='Incremental_output'),
    vendorId?: string(name='vendorId'),
  }(name='Parameters', shrink='json', position='Body'),
}

model BaiLianSseChatResponseBody = {
  code?: string(name='Code'),
  data?: {
    code?: string(name='Code'),
    message?: string(name='Message'),
    output?: {
      choices?: [ 
        {
          finishReason?: string(name='FinishReason'),
          message?: {
            content?: string(name='Content'),
            role?: string(name='Role'),
          }(name='Message'),
        }
      ](name='Choices'),
      sensitivePhraseHit?: boolean(name='SensitivePhraseHit'),
      text?: string(name='Text'),
      transition?: boolean(name='Transition'),
    }(name='Output'),
    requestId?: string(name='RequestId'),
    sessionId?: string(name='SessionId'),
  }(name='Data'),
  httpStatusCode?: string(name='HttpStatusCode'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model BaiLianSseChatResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BaiLianSseChatResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BaiLianSseChat  BaiLianSseChatRequest
  * @return BaiLianSseChatResponse
 */
async function baiLianSseChat(request: BaiLianSseChatRequest): BaiLianSseChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BaiLianSseChat', 'POST', '/llm/sse/vqa', 'json', true, 'form', request);
}

function baiLianSseChatWithResponseIterable(request: BaiLianSseChatRequest): iterator[BaiLianSseChatResponseBody] {
  @handler.validateRequestModel(request);
  yield @handler.doSSERequest('SSE', 'BaiLianSseChat', 'POST', '/llm/sse/vqa', 'json', true, 'form', request);
}

model BatchCreateShopRequest {
  country?: string(name='Country', position='Body'),
  shopList: [ 
    {
      businessStatus?: int32(name='BusinessStatus', example='1'),
      latitude?: string(name='Latitude', example='30.200714'),
      location?: string(name='Location'),
      longitude?: string(name='Longitude', example='120.20101'),
      regionAddress?: string(name='RegionAddress', example='330108'),
      regionCode?: string(name='RegionCode', example='2500'),
      remark?: string(name='Remark'),
      shopGroupIds?: [ string ](name='ShopGroupIds'),
      shopId: string(name='ShopId', description='This parameter is required.', example='ShopId'),
      shopName: string(name='ShopName', description='This parameter is required.'),
      weekdaysEndTime?: string(name='WeekdaysEndTime', example='17:00:00'),
      weekdaysStartTime?: string(name='WeekdaysStartTime', example='08:00:00'),
      weekendEndTime?: string(name='WeekendEndTime', example='18:00:00'),
      weekendStartTime?: string(name='WeekendStartTime', example='08:00:00'),
    }
  ](name='ShopList', description='This parameter is required.', shrink='json', position='Body'),
}

model BatchCreateShopResponseBody = {
  code?: string(name='Code', example='success'),
  data?: [ 
    {
      code?: string(name='Code', example='Code'),
      message?: string(name='Message', example='Message'),
      shopId?: string(name='ShopId', example='ShopId'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model BatchCreateShopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreateShopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchCreateShop  BatchCreateShopRequest
  * @return BatchCreateShopResponse
 */
async function batchCreateShop(request: BatchCreateShopRequest): BatchCreateShopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchCreateShop', 'POST', '/BatchCreateShop', 'json', true, 'form', request);
}

model BatchCreateShopGroupRequest {
  country?: string(name='Country', position='Body'),
  shopGroupList: [ 
    {
      shopGroupId: string(name='ShopGroupId', description='This parameter is required.', example='ShopGroupId', maxLength=40),
      shopGroupName: string(name='ShopGroupName', description='This parameter is required.', example='ShopGroupName', maxLength=50),
    }
  ](name='ShopGroupList', description='This parameter is required.', shrink='json', position='Body'),
}

model BatchCreateShopGroupResponseBody = {
  code?: string(name='Code', example='success'),
  data?: [ 
    {
      code?: string(name='Code', example='Code'),
      message?: string(name='Message', example='Message'),
      shopGroupId?: string(name='ShopGroupId', example='ShopGroupId'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model BatchCreateShopGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchCreateShopGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchCreateShopGroup  BatchCreateShopGroupRequest
  * @return BatchCreateShopGroupResponse
 */
async function batchCreateShopGroup(request: BatchCreateShopGroupRequest): BatchCreateShopGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchCreateShopGroup', 'POST', '/BatchCreateShopGroup', 'json', true, 'form', request);
}

model BatchGetStoreTextDataRequest {
  storeIds: [ string ](name='StoreIds', description='This parameter is required.', shrink='json', position='Body'),
  country?: string(name='country', example='CN', position='Body'),
}

model BatchGetStoreTextDataResponseBody = {
  code?: string(name='Code', example='success'),
  data?: [ 
    {
      containers?: [ 
        {
          containerData?: [ 
            {
              bold?: int32(name='Bold', example='1'),
              color?: string(name='Color', example='#ff006e'),
              mark?: string(name='Mark'),
              subText?: string(name='SubText'),
              text?: string(name='Text'),
            }
          ](name='ContainerData'),
          title?: string(name='Title', example='AFTERNOON'),
          type?: string(name='Type', example='AFTERNOON'),
          visible?: int32(name='Visible', example='1'),
        }
      ](name='Containers'),
      storeId?: string(name='StoreId', example='s-pdwrrnkufn'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='C94F7A6A-CE27-512D-BFEC-7A0D09B9F5AD'),
  success?: boolean(name='Success', example='true'),
}

model BatchGetStoreTextDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchGetStoreTextDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchGetStoreTextData  BatchGetStoreTextDataRequest
  * @return BatchGetStoreTextDataResponse
 */
async function batchGetStoreTextData(request: BatchGetStoreTextDataRequest): BatchGetStoreTextDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchGetStoreTextData', 'POST', '/BatchGetStoreTextData', 'json', true, 'form', request);
}

model BatchUpdateStoreTextDataRequest {
  storeTextData: [ 
    {
      containers: [ 
        {
          containerData?: [ 
            {
              bold?: int32(name='Bold', example='1'),
              color?: string(name='Color', example='#ff006e'),
              mark?: string(name='Mark'),
              subText?: string(name='SubText'),
              text?: string(name='Text'),
            }
          ](name='ContainerData'),
          title: string(name='Title', description='This parameter is required.', example='TOP'),
          type: string(name='Type', description='This parameter is required.', example='TOP'),
          visible?: int32(name='Visible', example='1'),
        }
      ](name='Containers', description='This parameter is required.'),
      storeId: string(name='StoreId', description='This parameter is required.', example='shopcode'),
    }
  ](name='StoreTextData', description='This parameter is required.', shrink='json', position='Body'),
  country?: string(name='country', example='CN', position='Body'),
}

model BatchUpdateStoreTextDataResponseBody = {
  code?: string(name='Code', example='success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='A60C309D-5631-13BB-8DA2-A9B3C5184FD9'),
  success?: boolean(name='Success', example='true'),
}

model BatchUpdateStoreTextDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchUpdateStoreTextDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchUpdateStoreTextData  BatchUpdateStoreTextDataRequest
  * @return BatchUpdateStoreTextDataResponse
 */
async function batchUpdateStoreTextData(request: BatchUpdateStoreTextDataRequest): BatchUpdateStoreTextDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'BatchUpdateStoreTextData', 'POST', '/BatchUpdateStoreTextData', 'json', true, 'form', request);
}

model CreateLabelRequest {
  category: string(name='Category', description='This parameter is required.', example='menu', minLength=1, maxLength=32, position='Body'),
  country?: string(name='Country', position='Body'),
  label: string(name='Label', description='This parameter is required.', example='MORNING', minLength=1, maxLength=21, position='Body'),
  title: string(name='Title', description='This parameter is required.', example='示例标题', minLength=1, maxLength=32, position='Body'),
}

model CreateLabelResponseBody = {
  code?: string(name='Code', example='success'),
  data?: string(name='Data', example='abcdef'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='A60C309D-5631-13BB-8DA2-A9B3C5184FD9'),
  success?: boolean(name='Success', example='true'),
}

model CreateLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateLabelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateLabel  CreateLabelRequest
  * @return CreateLabelResponse
 */
async function createLabel(request: CreateLabelRequest): CreateLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateLabel', 'POST', '/CreateLabel', 'json', true, 'form', request);
}

model CreateMenuDataRequest {
  batchId?: string(name='BatchId', example='batchId', position='Body'),
  country?: string(name='Country', position='Body'),
  priority?: int32(name='Priority', example='1', position='Body'),
  productCombineList: [ 
    {
      englishName?: string(name='EnglishName'),
      name?: string(name='Name'),
      order: int32(name='Order', description='This parameter is required.', example='1'),
      productItemList: [ 
        {
          order: int32(name='Order', description='This parameter is required.', example='1'),
          productInfo: {
            chineseName: string(name='ChineseName', description='This parameter is required.'),
            currentPrice?: string(name='CurrentPrice', example='10'),
            description?: string(name='Description'),
            englishName?: string(name='EnglishName'),
            iconText?: string(name='IconText'),
            originalPrice?: string(name='OriginalPrice', example='12'),
            productId: string(name='ProductId', description='This parameter is required.', example='productId'),
            productType?: string(name='ProductType'),
            temperature?: string(name='Temperature', example='normal'),
          }(name='ProductInfo', description='This parameter is required.'),
        }
      ](name='ProductItemList', description='This parameter is required.'),
    }
  ](name='ProductCombineList', description='This parameter is required.', shrink='json', position='Body'),
  productContainerId: string(name='ProductContainerId', description='This parameter is required.', example='productContainerId', position='Body'),
  shopGroupId?: string(name='ShopGroupId', example='shopGroupid', position='Body'),
  shopIdList?: [ string ](name='ShopIdList', shrink='json', position='Body'),
  type: string(name='Type', description='This parameter is required.', example='top', position='Body'),
}

model CreateMenuDataResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: string(name='Data', example='productContainerId'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='requestId'),
  success?: boolean(name='Success', example='true'),
}

model CreateMenuDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMenuDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMenuData  CreateMenuDataRequest
  * @return CreateMenuDataResponse
 */
async function createMenuData(request: CreateMenuDataRequest): CreateMenuDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMenuData', 'POST', '/CreateMenuData', 'json', true, 'form', request);
}

model CreateShopRequest {
  country?: string(name='Country', position='Body'),
  shopList?: [ 
    {
      businessStatus?: int32(name='BusinessStatus', example='1'),
      latitude?: string(name='Latitude', example='30.200714'),
      location?: string(name='Location'),
      longitude?: string(name='Longitude', example='120.20101'),
      regionAddress?: string(name='RegionAddress', example='330108'),
      regionCode?: string(name='RegionCode', example='2500'),
      remark?: string(name='Remark'),
      shopGroupIds?: [ string ](name='ShopGroupIds'),
      shopId: string(name='ShopId', description='This parameter is required.', example='ShopId'),
      shopName: string(name='ShopName', description='This parameter is required.'),
      weekdaysEndTime?: string(name='WeekdaysEndTime', example='17:00:00'),
      weekdaysStartTime?: string(name='WeekdaysStartTime', example='08:00:00'),
      weekendEndTime?: string(name='WeekendEndTime', example='18:00:00'),
      weekendStartTime?: string(name='WeekendStartTime', example='08:00:00'),
    }
  ](name='ShopList', shrink='json', position='Body'),
}

model CreateShopResponseBody = {
  code?: string(name='Code', example='success'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model CreateShopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateShopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateShop  CreateShopRequest
  * @return CreateShopResponse
 */
async function createShop(request: CreateShopRequest): CreateShopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateShop', 'POST', '/CreateShop', 'json', true, 'form', request);
}

model CreateShopGroupRequest {
  country?: string(name='Country', position='Body'),
  shopGroupList?: [ 
    {
      shopGroupId: string(name='ShopGroupId', description='This parameter is required.', example='ShopGroupId'),
      shopGroupName: string(name='ShopGroupName', description='This parameter is required.', example='ShopGroupName'),
    }
  ](name='ShopGroupList', shrink='json', position='Body'),
}

model CreateShopGroupResponseBody = {
  code?: string(name='Code', example='success'),
  data?: [ string ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model CreateShopGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateShopGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateShopGroup  CreateShopGroupRequest
  * @return CreateShopGroupResponse
 */
async function createShopGroup(request: CreateShopGroupRequest): CreateShopGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateShopGroup', 'POST', '/CreateShopGroup', 'json', true, 'form', request);
}

model CreateSpeechTemplateRequest {
  contents: string(name='Contents', description='This parameter is required.', position='Body'),
  type: string(name='Type', description='This parameter is required.', example='marktest', position='Body'),
  country?: string(name='country', example='CN', position='Body'),
}

model CreateSpeechTemplateResponseBody = {
  code?: string(name='Code', example='success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='A60C309D-5631-13BB-8DA2-A9B3C5184FD9'),
  success?: boolean(name='Success', example='true'),
}

model CreateSpeechTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSpeechTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSpeechTemplate  CreateSpeechTemplateRequest
  * @return CreateSpeechTemplateResponse
 */
async function createSpeechTemplate(request: CreateSpeechTemplateRequest): CreateSpeechTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateSpeechTemplate', 'POST', '/CreateSpeechTemplate', 'json', true, 'form', request);
}

model DeleteLabelRequest {
  country?: string(name='Country', position='Body'),
  labelId: string(name='LabelId', description='This parameter is required.', example='abcdef', position='Body'),
}

model DeleteLabelResponseBody = {
  code?: string(name='Code', example='success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='A60C309D-5631-13BB-8DA2-A9B3C5184FD9'),
  success?: boolean(name='Success', example='true'),
}

model DeleteLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteLabelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteLabel  DeleteLabelRequest
  * @return DeleteLabelResponse
 */
async function deleteLabel(request: DeleteLabelRequest): DeleteLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteLabel', 'POST', '/DeleteLabel', 'json', true, 'form', request);
}

model DeleteProductImageRequest {
  country?: string(name='Country', position='Body'),
  productCode?: string(name='ProductCode', example='productId', position='Body'),
  productImageIds?: [ string ](name='ProductImageIds', shrink='json', position='Body'),
}

model DeleteProductImageResponseBody = {
  code?: string(name='Code', example='success'),
  data?: string(name='Data', example='ShopGroupId'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model DeleteProductImageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProductImageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteProductImage  DeleteProductImageRequest
  * @return DeleteProductImageResponse
 */
async function deleteProductImage(request: DeleteProductImageRequest): DeleteProductImageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProductImage', 'POST', '/DeleteProductImage', 'json', true, 'form', request);
}

model DeleteShopRequest {
  country?: string(name='Country', position='Body'),
  shopId: string(name='ShopId', description='This parameter is required.', example='ShopId', position='Body'),
}

model DeleteShopResponseBody = {
  code?: string(name='Code', example='success'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model DeleteShopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteShopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteShop  DeleteShopRequest
  * @return DeleteShopResponse
 */
async function deleteShop(request: DeleteShopRequest): DeleteShopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteShop', 'POST', '/DeleteShop', 'json', true, 'form', request);
}

model DeleteShopGroupRequest {
  country?: string(name='Country', position='Body'),
  shopGroupId: string(name='ShopGroupId', description='This parameter is required.', example='ShopGroupId', position='Body'),
}

model DeleteShopGroupResponseBody = {
  code?: string(name='Code', example='success'),
  data?: string(name='Data', example='ShopGroupId'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model DeleteShopGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteShopGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteShopGroup  DeleteShopGroupRequest
  * @return DeleteShopGroupResponse
 */
async function deleteShopGroup(request: DeleteShopGroupRequest): DeleteShopGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteShopGroup', 'POST', '/DeleteShopGroup', 'json', true, 'form', request);
}

model DeleteSpeechTemplateRequest {
  type: string(name='Type', description='This parameter is required.', example='marktest', position='Body'),
  country?: string(name='country', example='CN', position='Body'),
}

model DeleteSpeechTemplateResponseBody = {
  code?: string(name='Code', example='Success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success'),
  requestId?: string(name='RequestId', example='7601D06F-CC44-56FF-96BF-1CD6E073CAC3'),
  success?: boolean(name='Success', example='true'),
}

model DeleteSpeechTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSpeechTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSpeechTemplate  DeleteSpeechTemplateRequest
  * @return DeleteSpeechTemplateResponse
 */
async function deleteSpeechTemplate(request: DeleteSpeechTemplateRequest): DeleteSpeechTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteSpeechTemplate', 'POST', '/DeleteSpeechTemplate', 'json', true, 'form', request);
}

model GetMenuDataStatusRequest {
  batchId?: string(name='BatchId', example='batchId', position='Body'),
  country?: string(name='Country', position='Body'),
  productContainerId?: string(name='ProductContainerId', example='productContainerId', position='Body'),
}

model GetMenuDataStatusResponseBody = {
  batchId?: string(name='BatchId', example='batchId'),
  code?: string(name='Code', example='Success'),
  failed?: long(name='Failed', example='0'),
  failedProductContainerList?: [ string ](name='FailedProductContainerList'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success'),
  productContainerId?: string(name='ProductContainerId', example='productContainerId'),
  requestId?: string(name='RequestId', example='requestId'),
  success?: boolean(name='Success', example='true'),
  total?: long(name='Total', example='16'),
}

model GetMenuDataStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMenuDataStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMenuDataStatus  GetMenuDataStatusRequest
  * @return GetMenuDataStatusResponse
 */
async function getMenuDataStatus(request: GetMenuDataStatusRequest): GetMenuDataStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMenuDataStatus', 'POST', '/GetMenuDataStatus', 'json', true, 'form', request);
}

model GetShopRequest {
  country?: string(name='Country', position='Body'),
  shopId: string(name='ShopId', description='This parameter is required.', example='ShopId', position='Body'),
}

model GetShopResponseBody = {
  businessStatus?: int32(name='BusinessStatus', example='1'),
  code?: string(name='Code', example='success'),
  deviceMacList?: [ string ](name='DeviceMacList'),
  deviceNum?: int32(name='DeviceNum', example='0'),
  gmtCreateTime?: long(name='GmtCreateTime', example='1640683984813'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  latitude?: string(name='Latitude', example='130.00'),
  location?: string(name='Location'),
  longitude?: string(name='Longitude', example='130.00'),
  message?: string(name='Message', example='success'),
  regionAddress?: string(name='RegionAddress'),
  regionCode?: string(name='RegionCode', example='330108'),
  remark?: string(name='Remark'),
  requestId?: string(name='RequestId', example='RequestId'),
  shopGroupIds?: [ string ](name='ShopGroupIds'),
  shopId?: string(name='ShopId', example='ShopId'),
  shopName?: string(name='ShopName', example='ShopName'),
  success?: boolean(name='Success', example='true'),
  weekdaysEndTime?: string(name='WeekdaysEndTime', example='17:00:00'),
  weekdaysStartTime?: string(name='WeekdaysStartTime', example='08:00:00'),
  weekendEndTime?: string(name='WeekendEndTime', example='18:00:00'),
  weekendStartTime?: string(name='WeekendStartTime', example='08:00:00'),
}

model GetShopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetShopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetShop  GetShopRequest
  * @return GetShopResponse
 */
async function getShop(request: GetShopRequest): GetShopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetShop', 'POST', '/GetShop', 'json', true, 'form', request);
}

model GetShopGroupRequest {
  country?: string(name='Country', position='Body'),
  shopGroupId: string(name='ShopGroupId', description='This parameter is required.', example='ShopGroupId', position='Body'),
}

model GetShopGroupResponseBody = {
  code?: string(name='Code', example='success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  shopGroupId?: string(name='ShopGroupId', example='ShopGroupId'),
  shopGroupName?: string(name='ShopGroupName', example='ShopGroupName'),
  success?: boolean(name='Success', example='true'),
}

model GetShopGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetShopGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetShopGroup  GetShopGroupRequest
  * @return GetShopGroupResponse
 */
async function getShopGroup(request: GetShopGroupRequest): GetShopGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetShopGroup', 'POST', '/GetShopGroup', 'json', true, 'form', request);
}

model GetSpeechTemplateRequest {
  type: string(name='Type', description='This parameter is required.', example='marktest', position='Body'),
  country?: string(name='country', example='CN', position='Body'),
}

model GetSpeechTemplateResponseBody = {
  code?: string(name='Code', example='success'),
  data?: string(name='Data', example='[]'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='A60C309D-5631-13BB-8DA2-A9B3C5184FD9'),
  success?: boolean(name='Success', example='true'),
}

model GetSpeechTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSpeechTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSpeechTemplate  GetSpeechTemplateRequest
  * @return GetSpeechTemplateResponse
 */
async function getSpeechTemplate(request: GetSpeechTemplateRequest): GetSpeechTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetSpeechTemplate', 'POST', '/GetSpeechTemplate', 'json', true, 'form', request);
}

model ListMenuDataRequest {
  batchId?: string(name='BatchId', example='batchId', position='Body'),
  country?: string(name='Country', position='Body'),
  createRequestId?: string(name='CreateRequestId', example='createRequestId', position='Body'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', position='Body'),
  productContainerId?: string(name='ProductContainerId', example='productContainerId', position='Body'),
}

model ListMenuDataResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: [ 
    {
      batchId?: string(name='BatchId', example='batchId'),
      priority?: int32(name='Priority', example='1'),
      productCombineList?: [ 
        {
          name?: string(name='Name'),
          order?: int32(name='Order', example='1'),
          productItemList?: [ 
            {
              order?: int32(name='Order', example='1'),
              productInfo?: {
                chineseName?: string(name='ChineseName'),
                currentPrice?: string(name='CurrentPrice', example='10'),
                description?: string(name='Description'),
                englishName?: string(name='EnglishName'),
                iconText?: string(name='IconText'),
                originalPrice?: string(name='OriginalPrice', example='12'),
                productId?: string(name='ProductId', example='productId'),
                productType?: string(name='ProductType'),
                temperature?: string(name='Temperature', example='normal'),
              }(name='ProductInfo'),
            }
          ](name='ProductItemList'),
        }
      ](name='ProductCombineList'),
      productContainerId?: string(name='ProductContainerId', example='productContainerId'),
      shopGroupId?: string(name='ShopGroupId', example='shopGroupId'),
      shopIdList?: [ string ](name='ShopIdList'),
      type?: string(name='Type', example='top'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='Success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='requestId'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='120'),
}

model ListMenuDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMenuDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMenuData  ListMenuDataRequest
  * @return ListMenuDataResponse
 */
async function listMenuData(request: ListMenuDataRequest): ListMenuDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMenuData', 'POST', '/ListMenuData', 'json', true, 'form', request);
}

model ListShopRequest {
  country?: string(name='Country', position='Body'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='50', position='Body'),
  shopGroupIds?: [ string ](name='ShopGroupIds', shrink='json', position='Body'),
  shopId?: string(name='ShopId', example='ShopId', position='Body'),
  shopName?: string(name='ShopName', example='ShopName', position='Body'),
}

model ListShopResponseBody = {
  code?: string(name='Code', example='success'),
  data?: [ 
    {
      businessStatus?: int32(name='BusinessStatus', example='1'),
      deviceMacList?: [ string ](name='DeviceMacList'),
      deviceNum?: int32(name='DeviceNum', example='0'),
      gmtCreateTime?: long(name='GmtCreateTime', example='1640741648999'),
      latitude?: string(name='Latitude', example='130.00'),
      location?: string(name='Location'),
      longitude?: string(name='Longitude', example='11.00'),
      regionAddress?: string(name='RegionAddress'),
      regionCode?: string(name='RegionCode', example='330108'),
      remark?: string(name='Remark'),
      shopGroupIds?: [ string ](name='ShopGroupIds'),
      shopId?: string(name='ShopId', example='ShopId'),
      shopName?: string(name='ShopName'),
      weekdaysEndTime?: string(name='WeekdaysEndTime', example='17:00:00'),
      weekdaysStartTime?: string(name='WeekdaysStartTime', example='08:00:00'),
      weekendEndTime?: string(name='WeekendEndTime', example='18:00:00'),
      weekendStartTime?: string(name='WeekendStartTime', example='08:00:00'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='10'),
}

model ListShopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListShopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListShop  ListShopRequest
  * @return ListShopResponse
 */
async function listShop(request: ListShopRequest): ListShopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListShop', 'POST', '/ListShop', 'json', true, 'form', request);
}

model ListShopGroupRequest {
  country?: string(name='Country', position='Body'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, maximum=10000, position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='50', minimum=1, maximum=50, position='Body'),
  shopGroupId?: string(name='ShopGroupId', example='ShopGroupId', position='Body'),
  shopGroupName?: string(name='ShopGroupName', example='ShopGroupName', position='Body'),
}

model ListShopGroupResponseBody = {
  code?: string(name='Code', example='success'),
  data?: [ 
    {
      shopGroupId?: string(name='ShopGroupId', example='ShopGroupId'),
      shopGroupName?: string(name='ShopGroupName', example='ShopGroupName'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='50'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='TotalCount'),
}

model ListShopGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListShopGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListShopGroup  ListShopGroupRequest
  * @return ListShopGroupResponse
 */
async function listShopGroup(request: ListShopGroupRequest): ListShopGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListShopGroup', 'POST', '/ListShopGroup', 'json', true, 'form', request);
}

model PushStoreSpeechDataRequest {
  speech: [ 
    {
      contents?: [ 
        {
          content: string(name='Content', description='This parameter is required.', example='VIP8'),
          placeholder: string(name='Placeholder', description='This parameter is required.', example='memberLevel'),
        }
      ](name='Contents'),
      speech?: boolean(name='Speech', example='ture'),
      speed?: string(name='Speed', example='1'),
      type: string(name='Type', description='This parameter is required.', example='marktest'),
      voice?: string(name='Voice', example='xiaoyun'),
      volume?: int32(name='Volume', example='1'),
    }
  ](name='Speech', description='This parameter is required.', shrink='json', position='Body'),
  storeId: string(name='StoreId', description='This parameter is required.', example='shopcode', position='Body'),
  country?: string(name='country', example='CN', position='Body'),
}

model PushStoreSpeechDataResponseBody = {
  code?: string(name='Code', example='success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='7601D06F-CC44-56FF-96BF-1CD6E073CAC3'),
  success?: boolean(name='Success', example='true'),
}

model PushStoreSpeechDataResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushStoreSpeechDataResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushStoreSpeechData  PushStoreSpeechDataRequest
  * @return PushStoreSpeechDataResponse
 */
async function pushStoreSpeechData(request: PushStoreSpeechDataRequest): PushStoreSpeechDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PushStoreSpeechData', 'POST', '/PushStoreSpeechData', 'json', true, 'form', request);
}

model QueryDeviceDataListRequest {
  deviceName?: string(name='DeviceName', example='BGTest04', position='Body'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, maximum=10000, position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', minimum=1, maximum=100, position='Body'),
}

model QueryDeviceDataListResponseBody = {
  code?: string(name='Code', example='success'),
  data?: [ 
    {
      appVersion?: string(name='AppVersion', example='1.0.0'),
      businessStatus?: string(name='BusinessStatus'),
      city?: string(name='City'),
      deviceGroupList?: string(name='DeviceGroupList'),
      deviceModel?: string(name='DeviceModel', example='B242'),
      deviceName?: string(name='DeviceName', example='rlmj-rjgy220623'),
      deviceSpecificModel?: string(name='DeviceSpecificModel', example='BG50D0NN'),
      deviceType?: string(name='DeviceType'),
      lastOnlineTime?: string(name='LastOnlineTime', example='2022/11/28  13:47:38'),
      mac?: string(name='Mac', example='AA:BB:77:88:99:02'),
      province?: string(name='Province'),
      region?: string(name='Region'),
      regionAddress?: string(name='RegionAddress'),
      shopId?: string(name='ShopId', example='shop_gucke4'),
      shopName?: string(name='ShopName'),
      sn?: string(name='Sn', description='SN', example='BCN221S21467B30'),
      status?: string(name='Status', example='online'),
    }
  ](name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='7601D06F-CC44-56FF-96BF-1CD6E073CAC3'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='10'),
}

model QueryDeviceDataListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDeviceDataListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDeviceDataList  QueryDeviceDataListRequest
  * @return QueryDeviceDataListResponse
 */
async function queryDeviceDataList(request: QueryDeviceDataListRequest): QueryDeviceDataListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryDeviceDataList', 'POST', '/QueryDeviceDataList', 'json', true, 'form', request);
}

model QueryFaultBriefListRequest {
  shopIdList?: [ string ](name='ShopIdList', shrink='json', position='Body'),
}

model QueryFaultBriefListResponseBody = {
  code?: string(name='Code', example='success'),
  data?: [ 
    {
      faultNum?: int32(name='FaultNum', example='100'),
      faultType?: int32(name='FaultType', example='0'),
      recoveryNum?: int32(name='RecoveryNum', example='99'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='A60C309D-5631-13BB-8DA2-A9B3C5184FD9'),
  success?: boolean(name='Success', example='true'),
}

model QueryFaultBriefListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryFaultBriefListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryFaultBriefList  QueryFaultBriefListRequest
  * @return QueryFaultBriefListResponse
 */
async function queryFaultBriefList(request: QueryFaultBriefListRequest): QueryFaultBriefListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryFaultBriefList', 'POST', '/QueryFaultBriefList', 'json', true, 'form', request);
}

model QueryFaultDeviceListRequest {
  dailyOnlineTime?: int32(name='DailyOnlineTime', example='4', position='Body'),
  endDate?: string(name='EndDate', example='1669564740999', position='Body'),
  faultType?: string(name='FaultType', example='0', position='Body'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', minimum=1, maximum=1000, position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', minimum=1, maximum=2000, position='Body'),
  shopIdList?: [ string ](name='ShopIdList', shrink='json', position='Body'),
  startDate?: string(name='StartDate', example='1669478400000', position='Body'),
}

model QueryFaultDeviceListResponseBody = {
  code?: string(name='Code', example='success'),
  data?: [ 
    {
      belongShop?: string(name='BelongShop'),
      dailyOnlineTime?: string(name='DailyOnlineTime'),
      deviceName?: string(name='DeviceName', example='S03LFHGYR9J4GD6X'),
      faultNum?: int32(name='FaultNum', example='3'),
      lastOnlineTime?: string(name='LastOnlineTime', example='2022-09-01 16:00:49'),
      mac?: string(name='Mac', example='F8:8E:A1:7B:7C:D0'),
      status?: string(name='Status'),
      ticketNum?: string(name='TicketNum', example='T010-1668156851006-hATC'),
      version?: string(name='Version', example='1.0.53.2'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='7601D06F-CC44-56FF-96BF-1CD6E073CAC3'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='20'),
}

model QueryFaultDeviceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryFaultDeviceListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryFaultDeviceList  QueryFaultDeviceListRequest
  * @return QueryFaultDeviceListResponse
 */
async function queryFaultDeviceList(request: QueryFaultDeviceListRequest): QueryFaultDeviceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryFaultDeviceList', 'POST', '/QueryFaultDeviceList', 'json', true, 'form', request);
}

model QueryLabelRequest {
  category: string(name='Category', description='This parameter is required.', example='menu', minLength=1, maxLength=32, position='Body'),
  country?: string(name='Country', position='Body'),
  label?: string(name='Label', example='testlabal', minLength=1, maxLength=32, position='Body'),
  labelId?: string(name='LabelId', example='testlabel', minLength=1, maxLength=32, position='Body'),
  pageNo: int32(name='PageNo', description='This parameter is required.', example='1', position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='10', minimum=1, maximum=100, position='Body'),
  title?: string(name='Title', example='title', minLength=1, maxLength=32, position='Body'),
}

model QueryLabelResponseBody = {
  code?: string(name='Code', example='success'),
  data?: [ 
    {
      category?: string(name='Category', example='menu'),
      label?: string(name='Label', example='testlabel'),
      labelId?: string(name='LabelId', example='abcdef'),
      title?: string(name='Title'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  pageNo?: int32(name='PageNo', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='A60C309D-5631-13BB-8DA2-A9B3C5184FD9'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='1'),
}

model QueryLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryLabelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryLabel  QueryLabelRequest
  * @return QueryLabelResponse
 */
async function queryLabel(request: QueryLabelRequest): QueryLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryLabel', 'POST', '/QueryLabel', 'json', true, 'form', request);
}

model QueryOperationIndexRequest {
  country?: string(name='Country', position='Body'),
  endDate?: string(name='EndDate', position='Body'),
  shopIdList?: [ string ](name='ShopIdList', shrink='json', position='Body'),
  startDate?: string(name='StartDate', position='Body'),
}

model QueryOperationIndexResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    deviceIndex?: {
      cpuAverage?: int32(name='CpuAverage', example='25%'),
      faultDeviceNum?: int32(name='FaultDeviceNum', example='12'),
      highFreqFaultDeviceNum?: int32(name='HighFreqFaultDeviceNum', example='8'),
      networkTraffic?: int32(name='NetworkTraffic', example='540'),
      normalDeviceNum?: int32(name='NormalDeviceNum', example='1500'),
      onlineNum?: int32(name='OnlineNum', example='2034'),
      storageAverage?: int32(name='StorageAverage', example='45%'),
      totalWorkingDeviceNum?: int32(name='TotalWorkingDeviceNum', example='1800'),
    }(name='DeviceIndex'),
    shopIndex?: {
      faultShopNum?: int32(name='FaultShopNum', example='320'),
      highFreqFaultShopNum?: int32(name='HighFreqFaultShopNum', example='12'),
      installedShopNum?: int32(name='InstalledShopNum', example='10001'),
      netWorkShopNum?: int32(name='NetWorkShopNum', example='10010'),
      normalShopNum?: int32(name='NormalShopNum', example='10020'),
      notWorkShopNum?: int32(name='NotWorkShopNum', example='37'),
      shopTotal?: int32(name='ShopTotal', example='10310'),
      upholdShopNum?: int32(name='UpholdShopNum', example='238'),
    }(name='ShopIndex'),
    ticketIndex?: {
      autoRecoverRate?: double(name='AutoRecoverRate', example='90%'),
      autoRecoverTicketNum?: int32(name='AutoRecoverTicketNum', example='800'),
      openTicketNum?: int32(name='OpenTicketNum', example='100'),
      recoverRate?: double(name='RecoverRate', example='80%'),
      totalTicketNum?: int32(name='TotalTicketNum', example='1000'),
    }(name='TicketIndex'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='B97A58B6-57AA-5CCF-9A94-52BB7BC47BC1'),
  success?: boolean(name='Success', example='true'),
}

model QueryOperationIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryOperationIndexResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryOperationIndex  QueryOperationIndexRequest
  * @return QueryOperationIndexResponse
 */
async function queryOperationIndex(request: QueryOperationIndexRequest): QueryOperationIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryOperationIndex', 'POST', '/QueryOperationIndex', 'json', true, 'form', request);
}

model QueryShopIndexRequest {
  country?: string(name='Country', position='Body'),
  shopIdList?: [ string ](name='ShopIdList', shrink='json', position='Body'),
}

model QueryShopIndexResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    shopIndex?: {
      faultShopNum?: int32(name='FaultShopNum', example='210'),
      highFreqFaultShopNum?: int32(name='HighFreqFaultShopNum', example='12'),
      installedShopNum?: int32(name='InstalledShopNum', example='9801'),
      netWorkShopNum?: int32(name='NetWorkShopNum', example='890'),
      normalShopNum?: int32(name='NormalShopNum', example='10201'),
      notWorkShopNum?: int32(name='NotWorkShopNum', example='780'),
      shopTotal?: int32(name='ShopTotal', example='10310'),
      upholdShopNum?: int32(name='UpholdShopNum', example='560'),
    }(name='ShopIndex'),
    shopScheduleIndex?: {
      costTime?: double(name='CostTime', example='362'),
      failShopNum?: int32(name='FailShopNum', example='9'),
      failShops?: [ 
        {
          shopId?: string(name='ShopId'),
          shopName?: string(name='ShopName'),
        }
      ](name='FailShops'),
      scheduleNum?: int32(name='ScheduleNum', example='7810'),
      scheduleShopNum?: int32(name='ScheduleShopNum', example='2800'),
      successRate?: float(name='SuccessRate', example='92.89%'),
    }(name='ShopScheduleIndex'),
  }(name='Data', description='The returned data.'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='1B0723A1-9B6B-57D5-A2D4-AA7E56F04E3D'),
  success?: boolean(name='Success', example='true'),
}

model QueryShopIndexResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryShopIndexResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryShopIndex  QueryShopIndexRequest
  * @return QueryShopIndexResponse
 */
async function queryShopIndex(request: QueryShopIndexRequest): QueryShopIndexResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryShopIndex', 'POST', '/QueryShopIndex', 'json', true, 'form', request);
}

model QueryTicketListRequest {
  country?: string(name='Country', position='Body'),
  endTime?: long(name='EndTime', example='1656058665064', position='Body'),
  pageNumber: int32(name='PageNumber', description='This parameter is required.', example='1', position='Body'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='20', position='Body'),
  shopIdList?: [ string ](name='ShopIdList', shrink='json', position='Body'),
  startTime?: long(name='StartTime', example='1656058565064', position='Body'),
  status?: int32(name='Status', example='0', position='Body'),
  ticketIdList?: [ string ](name='TicketIdList', shrink='json', position='Body'),
  ticketTypeList?: [ string ](name='TicketTypeList', shrink='json', position='Body'),
}

model QueryTicketListResponseBody = {
  code?: string(name='Code', example='200'),
  data?: [ 
    {
      deviceAlias?: string(name='DeviceAlias', example='deviceAlias'),
      deviceSn?: string(name='DeviceSn', example='deviceSn'),
      shopId?: string(name='ShopId', example='shopId'),
      shopName?: string(name='ShopName', example='shopName'),
      status?: int32(name='Status', example='1'),
      submitDate?: long(name='SubmitDate', example='1656058665064'),
      ticketId?: string(name='TicketId', example='ticketId'),
      ticketType?: string(name='TicketType', example='ticketType'),
      updateDate?: long(name='UpdateDate'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  pageNumber?: int32(name='PageNumber', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='requestId'),
  success?: boolean(name='Success', example='true'),
  totalCount?: long(name='TotalCount', example='20'),
}

model QueryTicketListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTicketListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryTicketList  QueryTicketListRequest
  * @return QueryTicketListResponse
 */
async function queryTicketList(request: QueryTicketListRequest): QueryTicketListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'QueryTicketList', 'POST', '/QueryTicketList', 'json', true, 'form', request);
}

model RemoveShopFromGroupRequest {
  shopGroupId: string(name='ShopGroupId', description='This parameter is required.', example='ShopGroupId', position='Body'),
  shopIdList?: [ string ](name='ShopIdList', shrink='json', position='Body'),
}

model RemoveShopFromGroupResponseBody = {
  code?: string(name='Code', example='success'),
  data?: string(name='Data', example='ShopGroupId'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model RemoveShopFromGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveShopFromGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveShopFromGroup  RemoveShopFromGroupRequest
  * @return RemoveShopFromGroupResponse
 */
async function removeShopFromGroup(request: RemoveShopFromGroupRequest): RemoveShopFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveShopFromGroup', 'POST', '/RemoveShopFromGroup', 'json', true, 'form', request);
}

model RemoveShopsFromGroupRequest {
  country?: string(name='Country', position='Body'),
  shopGroupId: string(name='ShopGroupId', description='This parameter is required.', example='ShopGroupId', position='Body'),
  shopIdList: [ string ](name='ShopIdList', description='This parameter is required.', shrink='json', position='Body'),
}

model RemoveShopsFromGroupResponseBody = {
  code?: string(name='Code', example='success'),
  data?: [ 
    {
      code?: string(name='Code', example='Code'),
      message?: string(name='Message', example='Message'),
      shopId?: string(name='ShopId', example='ShopId'),
    }
  ](name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model RemoveShopsFromGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RemoveShopsFromGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RemoveShopsFromGroup  RemoveShopsFromGroupRequest
  * @return RemoveShopsFromGroupResponse
 */
async function removeShopsFromGroup(request: RemoveShopsFromGroupRequest): RemoveShopsFromGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RemoveShopsFromGroup', 'POST', '/RemoveShopsFromGroup', 'json', true, 'form', request);
}

model UpdateLabelRequest {
  country?: string(name='Country', position='Body'),
  label?: string(name='Label', example='test', minLength=1, maxLength=32, position='Body'),
  labelId: string(name='LabelId', description='This parameter is required.', example='abcdef123', minLength=1, maxLength=32, position='Body'),
  title: string(name='Title', description='This parameter is required.', example='title', minLength=1, maxLength=32, position='Body'),
}

model UpdateLabelResponseBody = {
  code?: string(name='Code', example='success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='A60C309D-5631-13BB-8DA2-A9B3C5184FD9'),
  success?: boolean(name='Success', example='true'),
}

model UpdateLabelResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateLabelResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateLabel  UpdateLabelRequest
  * @return UpdateLabelResponse
 */
async function updateLabel(request: UpdateLabelRequest): UpdateLabelResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateLabel', 'POST', '/UpdateLabel', 'json', true, 'form', request);
}

model UpdateShopRequest {
  businessStatus?: int32(name='BusinessStatus', example='1', position='Body'),
  country?: string(name='Country', position='Body'),
  latitude?: string(name='Latitude', example='30.200714', position='Body'),
  location?: string(name='Location', position='Body'),
  longitude?: string(name='Longitude', example='120.20101', position='Body'),
  regionAddress?: string(name='RegionAddress', position='Body'),
  regionCode?: string(name='RegionCode', example='330108', position='Body'),
  remark?: string(name='Remark', position='Body'),
  shopGroupIds?: [ string ](name='ShopGroupIds', shrink='json', position='Body'),
  shopId: string(name='ShopId', description='This parameter is required.', example='ShopId', position='Body'),
  shopName: string(name='ShopName', description='This parameter is required.', position='Body'),
  weekdaysEndTime?: string(name='WeekdaysEndTime', example='17:00:00', position='Body'),
  weekdaysStartTime?: string(name='WeekdaysStartTime', example='08:00:00', position='Body'),
  weekendEndTime?: string(name='WeekendEndTime', example='18:00:00', position='Body'),
  weekendStartTime?: string(name='WeekendStartTime', example='08:00:00', position='Body'),
}

model UpdateShopResponseBody = {
  code?: string(name='Code', example='success'),
  data?: string(name='Data'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model UpdateShopResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateShopResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateShop  UpdateShopRequest
  * @return UpdateShopResponse
 */
async function updateShop(request: UpdateShopRequest): UpdateShopResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateShop', 'POST', '/UpdateShop', 'json', true, 'form', request);
}

model UpdateShopGroupRequest {
  country?: string(name='Country', position='Body'),
  shopGroupId: string(name='ShopGroupId', description='This parameter is required.', example='ShopGroupId', position='Body'),
  shopGroupName: string(name='ShopGroupName', description='This parameter is required.', example='ShopGroupName', position='Body'),
}

model UpdateShopGroupResponseBody = {
  code?: string(name='Code', example='success'),
  data?: string(name='Data', example='ShopGroupId'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model UpdateShopGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateShopGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateShopGroup  UpdateShopGroupRequest
  * @return UpdateShopGroupResponse
 */
async function updateShopGroup(request: UpdateShopGroupRequest): UpdateShopGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateShopGroup', 'POST', '/UpdateShopGroup', 'json', true, 'form', request);
}

model UpdateSpeechTemplateRequest {
  contents: string(name='Contents', description='This parameter is required.', position='Body'),
  type: string(name='Type', description='This parameter is required.', example='marktest', position='Body'),
  country?: string(name='country', example='CN', position='Body'),
}

model UpdateSpeechTemplateResponseBody = {
  code?: string(name='Code', example='success'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='7601D06F-CC44-56FF-96BF-1CD6E073CAC3'),
  success?: boolean(name='Success', example='true'),
}

model UpdateSpeechTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSpeechTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSpeechTemplate  UpdateSpeechTemplateRequest
  * @return UpdateSpeechTemplateResponse
 */
async function updateSpeechTemplate(request: UpdateSpeechTemplateRequest): UpdateSpeechTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateSpeechTemplate', 'POST', '/UpdateSpeechTemplate', 'json', true, 'form', request);
}

