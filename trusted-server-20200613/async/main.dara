/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'trusted-server';
  @version = '2020-06-13';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model DescribeBootRequest {
  regionId?: string(name='RegionId', position='Host'),
  propertyUuid: string(name='PropertyUuid', position='Query'),
}

model DescribeBootResponseBody = {
  gmtCreate?: string(name='GmtCreate'),
  gmtModified?: string(name='GmtModified'),
  id?: long(name='Id'),
  requestId?: string(name='RequestId'),
  whiteListAffiliation?: int32(name='WhiteListAffiliation'),
  whiteListDetail?: string(name='WhiteListDetail'),
}

model DescribeBootResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBootResponseBody(name='body'),
}

async function describeBoot(request: DescribeBootRequest): DescribeBootResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBoot', 'POST', '/', 'json', false, 'json', request);
}

model DescribeEventsRequest {
  regionId?: string(name='RegionId', position='Host'),
  createEndDate?: long(name='CreateEndDate', position='Query'),
  createStartDate?: long(name='CreateStartDate', position='Query'),
  currentPage?: int32(name='CurrentPage', position='Query'),
  eventAffiliation?: int32(name='EventAffiliation', position='Query'),
  eventLevel?: int32(name='EventLevel', position='Query'),
  eventStatus?: int32(name='EventStatus', position='Query'),
  eventType?: int32(name='EventType', position='Query'),
  handleEndDate?: long(name='HandleEndDate', position='Query'),
  handleStartDate?: long(name='HandleStartDate', position='Query'),
  handleType?: int32(name='HandleType', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  propertyName?: string(name='PropertyName', position='Query'),
  propertyPrivateIp?: string(name='PropertyPrivateIp', position='Query'),
  propertyPublicIp?: string(name='PropertyPublicIp', position='Query'),
  propertyUuid?: string(name='PropertyUuid', position='Query'),
  suspect?: string(name='Suspect', position='Query'),
  suspectSig?: string(name='SuspectSig', position='Query'),
}

model DescribeEventsResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  items?: [ 
    {
      accumulation?: string(name='Accumulation'),
      eventAffiliation?: string(name='EventAffiliation'),
      eventLevel?: string(name='EventLevel'),
      eventStatus?: string(name='EventStatus'),
      eventType?: string(name='EventType'),
      eventUuid?: string(name='EventUuid'),
      gmtCreate?: long(name='GmtCreate'),
      gmtHandle?: long(name='GmtHandle'),
      gmtModified?: long(name='GmtModified'),
      handleType?: string(name='HandleType'),
      propertyName?: string(name='PropertyName'),
      propertyPrivateIp?: string(name='PropertyPrivateIp'),
      propertyPublicIp?: string(name='PropertyPublicIp'),
      propertyUuid?: string(name='PropertyUuid'),
      suspect?: string(name='Suspect'),
      suspectSig?: string(name='SuspectSig'),
      suspectWhiteList?: string(name='SuspectWhiteList'),
    }
  ](name='Items'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeEventsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEventsResponseBody(name='body'),
}

async function describeEvents(request: DescribeEventsRequest): DescribeEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeEvents', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceRequest {
  regionId?: string(name='RegionId', position='Host'),
  propertyUuid: string(name='PropertyUuid', position='Query'),
}

model DescribeInstanceResponseBody = {
  extensions?: string(name='Extensions'),
  gmtCreate?: long(name='GmtCreate'),
  gmtModified?: long(name='GmtModified'),
  gmtRecentReport?: long(name='GmtRecentReport'),
  onlineStatus?: int32(name='OnlineStatus'),
  programExceptionNum?: int32(name='ProgramExceptionNum'),
  programTrustDetail?: string(name='ProgramTrustDetail'),
  programTrustStatus?: int32(name='ProgramTrustStatus'),
  programWhiteListId?: int32(name='ProgramWhiteListId'),
  programWhiteListName?: string(name='ProgramWhiteListName'),
  propertyAffiliation?: int32(name='PropertyAffiliation'),
  propertyName?: string(name='PropertyName'),
  propertyPrivateIp?: string(name='PropertyPrivateIp'),
  propertyPublicIp?: string(name='PropertyPublicIp'),
  propertyUuid?: string(name='PropertyUuid'),
  requestId?: string(name='RequestId'),
  systemExceptionNum?: int32(name='SystemExceptionNum'),
  systemTrustDetail?: string(name='SystemTrustDetail'),
  systemTrustStatus?: int32(name='SystemTrustStatus'),
  systemWhiteListId?: int32(name='SystemWhiteListId'),
}

model DescribeInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceResponseBody(name='body'),
}

async function describeInstance(request: DescribeInstanceRequest): DescribeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstance', 'POST', '/', 'json', false, 'json', request);
}

model GenerateAikcertRequest {
  regionId?: string(name='RegionId', position='Host'),
  aikName: string(name='AikName', position='Query'),
  aikPub: string(name='AikPub', position='Query'),
  ekCert?: string(name='EkCert', position='Query'),
  ekPub?: string(name='EkPub', position='Query'),
  nonceDigest: string(name='NonceDigest', position='Query'),
  propertyUuid: string(name='PropertyUuid', position='Query'),
}

model GenerateAikcertResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    dataCredentialBlob?: string(name='dataCredentialBlob'),
    keyCredentialBlob?: string(name='keyCredentialBlob'),
  }(name='data'),
}

model GenerateAikcertResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateAikcertResponseBody(name='body'),
}

async function generateAikcert(request: GenerateAikcertRequest): GenerateAikcertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateAikcert', 'POST', '/', 'json', false, 'json', request);
}

model GenerateNonceRequest {
  regionId?: string(name='RegionId', position='Host'),
  aikName: string(name='AikName', position='Query'),
  ekCert?: string(name='EkCert', position='Query'),
  ekPub?: string(name='EkPub', position='Query'),
  propertyUuid: string(name='PropertyUuid', position='Query'),
}

model GenerateNonceResponseBody = {
  requestId?: string(name='RequestId'),
  data?: {
    credentialBlob?: string(name='CredentialBlob'),
  }(name='data'),
}

model GenerateNonceResponse = {
  headers: map[string]string(name='headers'),
  body: GenerateNonceResponseBody(name='body'),
}

async function generateNonce(request: GenerateNonceRequest): GenerateNonceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateNonce', 'POST', '/', 'json', false, 'json', request);
}

model IgnoreEventsRequest {
  regionId?: string(name='RegionId', position='Host'),
  eventUuids: string(name='EventUuids', example='["14e055e60c8c19264a4c0045feee****"]', position='Query'),
  handleStyle?: int32(name='HandleStyle', example='1', position='Query'),
}

model IgnoreEventsResponseBody = {
  data?: string(name='Data', example='{}'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model IgnoreEventsResponse = {
  headers: map[string]string(name='headers'),
  body: IgnoreEventsResponseBody(name='body'),
}

async function ignoreEvents(request: IgnoreEventsRequest): IgnoreEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IgnoreEvents', 'POST', '/', 'json', false, 'json', request);
}

model ProduceAikcertRequest {
  regionId?: string(name='RegionId', position='Host'),
  aikName: string(name='AikName', example='AAv9r6m9********rDg/0g==', position='Query'),
  certRequest: string(name='CertRequest', example='-----BEGIN CERTIFICATE REQUEST-----
*******************
*******************
*******************
*******************
-----END CERTIFICATE REQUEST-----', position='Query'),
  ekCert?: string(name='EkCert', example='-----BEGIN CERTIFICATE-----
*******************
*******************
*******************
*******************
-----END CERTIFICATE-----', position='Query'),
  ekPubKey?: string(name='EkPubKey', example='-----BEGIN PUBLIC KEY-----
*******************
*******************
*******************
*******************
-----END PUBLIC KEY-----', position='Query'),
  includeCertChain?: boolean(name='IncludeCertChain', example='false', position='Query'),
}

model ProduceAikcertResponseBody = {
  data?: {
    dataCredentialBlob?: string(name='DataCredentialBlob', example='AAAJ8Cmk********CWWemg=='),
    keyCredentialBlob?: string(name='KeyCredentialBlob', example='utzA3gAA********eVEpFNs='),
  }(name='Data'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model ProduceAikcertResponse = {
  headers: map[string]string(name='headers'),
  body: ProduceAikcertResponseBody(name='body'),
}

async function produceAikcert(request: ProduceAikcertRequest): ProduceAikcertResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ProduceAikcert', 'POST', '/', 'json', false, 'json', request);
}

model PutMessageRequest {
  regionId?: string(name='RegionId', position='Host'),
  fileData: string(name='FileData', example='<quote>
  <version>5364b9c65d069c43898de1e8cd0b7815914c6b7b</version>
  <type>ALI_TRUST_ALIYUN_TPM</type>
  <data>
    <aik_cert>LS0tLS1C********LS0tLS0K</aik_cert>
    <quote_message>/1RDR4AY********2kaJ6w==</quote_message>
    <quote_signature>Tn5nuDQe********xNtnQw==</quote_signature>
    <pcr_list>Mo1hSigO********v3Trjsc=</pcr_list>
    <ima_list>CgAAAN7G********AAAAAAA=</ima_list>
    <user>
      <property_uuid>0f74b5cc-ff0e-4fa6-b457-1dc58072****</property_uuid>
      <policy>
        <conditions></conditions>
        <effect>ALI_TRUST_ATTEST_EFFECT_IGNORE</effect>
        <action>ALI_TRUST_ATTEST_ACTION_DO_NOTHING</action>
      </policy>
      <nonce>1665216049780185</nonce>
    </user>
  </data>
</quote>', position='Query'),
  propertyUuid?: string(name='PropertyUuid', example='0f74b5cc-ff0e-4fa6-b457-1dc58072****', position='Query'),
}

model PutMessageResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
  data?: {
    kmoduleVerificationResult?: {
      code?: string(name='code', example='null'),
      status?: int32(name='status', example='null'),
    }(name='kmoduleVerificationResult'),
    nextClientIMAIndex?: long(name='nextClientIMAIndex', example='0'),
    policyProcResult?: {
      code?: string(name='code', example='null'),
      procData?: string(name='procData', example='null'),
    }(name='policyProcResult'),
    programVerificationResult?: {
      code?: string(name='code', example='TrustedStatus'),
      status?: int32(name='status', example='1'),
    }(name='programVerificationResult'),
    systemVerificationResult?: {
      code?: string(name='code', example='TrustedStatus'),
      status?: int32(name='status', example='1'),
    }(name='systemVerificationResult'),
  }(name='data'),
}

model PutMessageResponse = {
  headers: map[string]string(name='headers'),
  body: PutMessageResponseBody(name='body'),
}

async function putMessage(request: PutMessageRequest): PutMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PutMessage', 'POST', '/', 'json', false, 'json', request);
}

model RegisterMessageRequest {
  regionId?: string(name='RegionId', position='Host'),
  extensions?: string(name='Extensions', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  propertyAffiliation: int32(name='PropertyAffiliation', position='Query'),
  propertyName: string(name='PropertyName', position='Query'),
  propertyPrivateIp?: string(name='PropertyPrivateIp', position='Query'),
  propertyPublicIp?: string(name='PropertyPublicIp', position='Query'),
  propertyUuid: string(name='PropertyUuid', position='Query'),
}

model RegisterMessageResponseBody = {
  requestId?: string(name='RequestId'),
}

model RegisterMessageResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterMessageResponseBody(name='body'),
}

async function registerMessage(request: RegisterMessageRequest): RegisterMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterMessage', 'POST', '/', 'json', false, 'json', request);
}

model TrustEventsRequest {
  regionId?: string(name='RegionId', position='Host'),
  eventUuids: string(name='EventUuids', example='["14e055e60c8c19264a4c0045feee****"]', position='Query'),
  handleStyle?: int32(name='HandleStyle', example='1', position='Query'),
}

model TrustEventsResponseBody = {
  data?: string(name='Data', example='{}'),
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model TrustEventsResponse = {
  headers: map[string]string(name='headers'),
  body: TrustEventsResponseBody(name='body'),
}

async function trustEvents(request: TrustEventsRequest): TrustEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TrustEvents', 'POST', '/', 'json', false, 'json', request);
}

model UnregisterMessageRequest {
  regionId?: string(name='RegionId', position='Host'),
  properties: string(name='Properties', example='["0f74b5cc-ff0e-4fa6-b457-1dc58072****"]', position='Query'),
}

model UnregisterMessageResponseBody = {
  requestId?: string(name='RequestId', example='473469C7-AA6F-4DC5-B3DB-A3DC0DE3****'),
}

model UnregisterMessageResponse = {
  headers: map[string]string(name='headers'),
  body: UnregisterMessageResponseBody(name='body'),
}

async function unregisterMessage(request: UnregisterMessageRequest): UnregisterMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnregisterMessage', 'POST', '/', 'json', false, 'json', request);
}

model VerifyMessageRequest {
  fileData: string(name='FileData', position='Body'),
}

model VerifyMessageResponseBody = {
  data?: {
    imaVerificationResult?: {
      code?: string(name='Code'),
      status?: int32(name='Status'),
      tcbObsolete?: [ string ](name='TcbObsolete'),
      untrusted?: [ string ](name='Untrusted'),
    }(name='ImaVerificationResult'),
    pcrVerificationResult?: {
      code?: string(name='Code'),
      status?: int32(name='Status'),
      tcbObsolete?: [ string ](name='TcbObsolete'),
      untrusted?: [ string ](name='Untrusted'),
    }(name='PcrVerificationResult'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model VerifyMessageResponse = {
  headers: map[string]string(name='headers'),
  body: VerifyMessageResponseBody(name='body'),
}

async function verifyMessage(request: VerifyMessageRequest): VerifyMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'VerifyMessage', 'POST', '/', 'json', true, 'form', request);
}

