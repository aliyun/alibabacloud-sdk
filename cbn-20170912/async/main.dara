/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Cbn';
  @version = '2017-09-12';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ActiveFlowLogRequest {
  cenId: string(name='CenId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  flowLogId: string(name='FlowLogId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ActiveFlowLogResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ActiveFlowLogResponse = {
  headers: map[string]string(name='headers'),
  body: ActiveFlowLogResponseBody(name='body'),
}

async function activeFlowLog(request: ActiveFlowLogRequest): ActiveFlowLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActiveFlowLog', 'POST', '/', 'json', false, 'json', request);
}

model AddTraficMatchRuleToTrafficMarkingPolicyRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMarkingPolicyId: string(name='TrafficMarkingPolicyId', position='Query'),
  trafficMatchRules?: [ 
    {
      dstCidr?: string(name='DstCidr'),
      dstPortRange?: [ int32 ](name='DstPortRange'),
      matchDscp?: int32(name='MatchDscp'),
      protocol?: string(name='Protocol'),
      srcCidr?: string(name='SrcCidr'),
      srcPortRange?: [ int32 ](name='SrcPortRange'),
      trafficMatchRuleDescription?: string(name='TrafficMatchRuleDescription'),
      trafficMatchRuleName?: string(name='TrafficMatchRuleName'),
    }
  ](name='TrafficMatchRules', position='Query'),
}

model AddTraficMatchRuleToTrafficMarkingPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddTraficMatchRuleToTrafficMarkingPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: AddTraficMatchRuleToTrafficMarkingPolicyResponseBody(name='body'),
}

async function addTraficMatchRuleToTrafficMarkingPolicy(request: AddTraficMatchRuleToTrafficMarkingPolicyRequest): AddTraficMatchRuleToTrafficMarkingPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTraficMatchRuleToTrafficMarkingPolicy', 'POST', '/', 'json', false, 'json', request);
}

model AssociateCenBandwidthPackageRequest {
  cenBandwidthPackageId: string(name='CenBandwidthPackageId', position='Query'),
  cenId: string(name='CenId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AssociateCenBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateCenBandwidthPackageResponseBody(name='body'),
}

async function associateCenBandwidthPackage(request: AssociateCenBandwidthPackageRequest): AssociateCenBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateCenBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model AssociateTransitRouterAttachmentWithRouteTableRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', position='Query'),
}

model AssociateTransitRouterAttachmentWithRouteTableResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateTransitRouterAttachmentWithRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateTransitRouterAttachmentWithRouteTableResponseBody(name='body'),
}

async function associateTransitRouterAttachmentWithRouteTable(request: AssociateTransitRouterAttachmentWithRouteTableRequest): AssociateTransitRouterAttachmentWithRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateTransitRouterAttachmentWithRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model AttachCenChildInstanceRequest {
  cenId: string(name='CenId', position='Query'),
  childInstanceId: string(name='ChildInstanceId', position='Query'),
  childInstanceOwnerId?: long(name='ChildInstanceOwnerId', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', position='Query'),
  childInstanceType: string(name='ChildInstanceType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AttachCenChildInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachCenChildInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: AttachCenChildInstanceResponseBody(name='body'),
}

async function attachCenChildInstance(request: AttachCenChildInstanceRequest): AttachCenChildInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachCenChildInstance', 'POST', '/', 'json', false, 'json', request);
}

model CheckTransitRouterServiceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckTransitRouterServiceResponseBody = {
  enabled?: string(name='Enabled'),
  requestId?: string(name='RequestId'),
}

model CheckTransitRouterServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CheckTransitRouterServiceResponseBody(name='body'),
}

async function checkTransitRouterService(request: CheckTransitRouterServiceRequest): CheckTransitRouterServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckTransitRouterService', 'POST', '/', 'json', false, 'json', request);
}

model CreateCenRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  protectionLevel?: string(name='ProtectionLevel', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateCenResponseBody = {
  cenId?: string(name='CenId'),
  requestId?: string(name='RequestId'),
}

model CreateCenResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenResponseBody(name='body'),
}

async function createCen(request: CreateCenRequest): CreateCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCen', 'POST', '/', 'json', false, 'json', request);
}

model CreateCenBandwidthPackageRequest {
  autoPay?: boolean(name='AutoPay', position='Query'),
  autoRenew?: boolean(name='AutoRenew', position='Query'),
  autoRenewDuration?: int32(name='AutoRenewDuration', position='Query'),
  bandwidth: int32(name='Bandwidth', position='Query'),
  bandwidthPackageChargeType?: string(name='BandwidthPackageChargeType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  geographicRegionAId: string(name='GeographicRegionAId', position='Query'),
  geographicRegionBId: string(name='GeographicRegionBId', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  pricingCycle?: string(name='PricingCycle', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateCenBandwidthPackageResponseBody = {
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
  cenBandwidthPackageOrderId?: string(name='CenBandwidthPackageOrderId'),
  requestId?: string(name='RequestId'),
}

model CreateCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenBandwidthPackageResponseBody(name='body'),
}

async function createCenBandwidthPackage(request: CreateCenBandwidthPackageRequest): CreateCenBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCenBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model CreateCenChildInstanceRouteEntryToAttachmentRequest {
  cenId: string(name='CenId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', position='Query'),
}

model CreateCenChildInstanceRouteEntryToAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCenChildInstanceRouteEntryToAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenChildInstanceRouteEntryToAttachmentResponseBody(name='body'),
}

async function createCenChildInstanceRouteEntryToAttachment(request: CreateCenChildInstanceRouteEntryToAttachmentRequest): CreateCenChildInstanceRouteEntryToAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCenChildInstanceRouteEntryToAttachment', 'POST', '/', 'json', false, 'json', request);
}

model CreateCenChildInstanceRouteEntryToCenRequest {
  cenId: string(name='CenId', position='Query'),
  childInstanceAliUid?: long(name='ChildInstanceAliUid', position='Query'),
  childInstanceId: string(name='ChildInstanceId', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', position='Query'),
  childInstanceType: string(name='ChildInstanceType', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', position='Query'),
}

model CreateCenChildInstanceRouteEntryToCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCenChildInstanceRouteEntryToCenResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenChildInstanceRouteEntryToCenResponseBody(name='body'),
}

async function createCenChildInstanceRouteEntryToCen(request: CreateCenChildInstanceRouteEntryToCenRequest): CreateCenChildInstanceRouteEntryToCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCenChildInstanceRouteEntryToCen', 'POST', '/', 'json', false, 'json', request);
}

model CreateCenInterRegionTrafficQosPolicyRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficQosPolicyDescription?: string(name='TrafficQosPolicyDescription', position='Query'),
  trafficQosPolicyName?: string(name='TrafficQosPolicyName', position='Query'),
  trafficQosQueues?: [ 
    {
      dscps?: [ int32 ](name='Dscps'),
      qosQueueDescription?: string(name='QosQueueDescription'),
      qosQueueName?: string(name='QosQueueName'),
      remainBandwidthPercent?: string(name='RemainBandwidthPercent'),
    }
  ](name='TrafficQosQueues', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterId: string(name='TransitRouterId', position='Query'),
}

model CreateCenInterRegionTrafficQosPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  trafficQosPolicyId?: string(name='TrafficQosPolicyId'),
}

model CreateCenInterRegionTrafficQosPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenInterRegionTrafficQosPolicyResponseBody(name='body'),
}

async function createCenInterRegionTrafficQosPolicy(request: CreateCenInterRegionTrafficQosPolicyRequest): CreateCenInterRegionTrafficQosPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCenInterRegionTrafficQosPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateCenRouteMapRequest {
  asPathMatchMode?: string(name='AsPathMatchMode', position='Query'),
  cenId: string(name='CenId', position='Query'),
  cenRegionId: string(name='CenRegionId', position='Query'),
  cidrMatchMode?: string(name='CidrMatchMode', position='Query'),
  communityMatchMode?: string(name='CommunityMatchMode', position='Query'),
  communityOperateMode?: string(name='CommunityOperateMode', position='Query'),
  description?: string(name='Description', position='Query'),
  destinationChildInstanceTypes?: [ string ](name='DestinationChildInstanceTypes', position='Query'),
  destinationCidrBlocks?: [ string ](name='DestinationCidrBlocks', position='Query'),
  destinationInstanceIds?: [ string ](name='DestinationInstanceIds', position='Query'),
  destinationInstanceIdsReverseMatch?: boolean(name='DestinationInstanceIdsReverseMatch', position='Query'),
  destinationRouteTableIds?: [ string ](name='DestinationRouteTableIds', position='Query'),
  mapResult: string(name='MapResult', position='Query'),
  matchAsns?: [ long ](name='MatchAsns', position='Query'),
  matchCommunitySet?: [ string ](name='MatchCommunitySet', position='Query'),
  nextPriority?: int32(name='NextPriority', minimum=1, maximum=1000, position='Query'),
  operateCommunitySet?: [ string ](name='OperateCommunitySet', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  preference?: int32(name='Preference', minimum=1, maximum=100, position='Query'),
  prependAsPath?: [ long ](name='PrependAsPath', position='Query'),
  priority: int32(name='Priority', minimum=1, maximum=2999, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTypes?: [ string ](name='RouteTypes', position='Query'),
  sourceChildInstanceTypes?: [ string ](name='SourceChildInstanceTypes', position='Query'),
  sourceInstanceIds?: [ string ](name='SourceInstanceIds', position='Query'),
  sourceInstanceIdsReverseMatch?: boolean(name='SourceInstanceIdsReverseMatch', position='Query'),
  sourceRegionIds?: [ string ](name='SourceRegionIds', position='Query'),
  sourceRouteTableIds?: [ string ](name='SourceRouteTableIds', position='Query'),
  transmitDirection: string(name='TransmitDirection', position='Query'),
}

model CreateCenRouteMapResponseBody = {
  requestId?: string(name='RequestId'),
  routeMapId?: string(name='RouteMapId'),
}

model CreateCenRouteMapResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenRouteMapResponseBody(name='body'),
}

async function createCenRouteMap(request: CreateCenRouteMapRequest): CreateCenRouteMapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCenRouteMap', 'POST', '/', 'json', false, 'json', request);
}

model CreateFlowlogRequest {
  cenId: string(name='CenId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  flowLogName?: string(name='FlowLogName', position='Query'),
  logStoreName: string(name='LogStoreName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  projectName: string(name='ProjectName', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateFlowlogResponseBody = {
  flowLogId?: string(name='FlowLogId'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model CreateFlowlogResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowlogResponseBody(name='body'),
}

async function createFlowlog(request: CreateFlowlogRequest): CreateFlowlogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlowlog', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrafficMarkingPolicyRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  markingDscp: int32(name='MarkingDscp', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority: int32(name='Priority', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMarkingPolicyDescription?: string(name='TrafficMarkingPolicyDescription', position='Query'),
  trafficMarkingPolicyName?: string(name='TrafficMarkingPolicyName', position='Query'),
  trafficMatchRules?: [ 
    {
      dstCidr?: string(name='DstCidr'),
      dstPortRange?: [ int32 ](name='DstPortRange'),
      matchDscp?: int32(name='MatchDscp'),
      protocol?: string(name='Protocol'),
      srcCidr?: string(name='SrcCidr'),
      srcPortRange?: [ int32 ](name='SrcPortRange'),
      trafficMatchRuleDescription?: string(name='TrafficMatchRuleDescription'),
      trafficMatchRuleName?: string(name='TrafficMatchRuleName'),
    }
  ](name='TrafficMatchRules', position='Query'),
  transitRouterId: string(name='TransitRouterId', position='Query'),
}

model CreateTrafficMarkingPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  trafficMarkingPolicyId?: string(name='TrafficMarkingPolicyId'),
}

model CreateTrafficMarkingPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTrafficMarkingPolicyResponseBody(name='body'),
}

async function createTrafficMarkingPolicy(request: CreateTrafficMarkingPolicyRequest): CreateTrafficMarkingPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrafficMarkingPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterRequest {
  cenId: string(name='CenId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterDescription?: string(name='TransitRouterDescription', position='Query'),
  transitRouterName?: string(name='TransitRouterName', position='Query'),
}

model CreateTransitRouterResponseBody = {
  requestId?: string(name='RequestId'),
  transitRouterId?: string(name='TransitRouterId'),
}

model CreateTransitRouterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterResponseBody(name='body'),
}

async function createTransitRouter(request: CreateTransitRouterRequest): CreateTransitRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouter', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterPeerAttachmentRequest {
  autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled', position='Query'),
  bandwidth?: int32(name='Bandwidth', minimum=0, maximum=100000000, position='Query'),
  bandwidthType?: string(name='BandwidthType', position='Query'),
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId', position='Query'),
  cenId?: string(name='CenId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerTransitRouterId: string(name='PeerTransitRouterId', position='Query'),
  peerTransitRouterRegionId?: string(name='PeerTransitRouterRegionId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', position='Query'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', position='Query'),
  transitRouterId?: string(name='TransitRouterId', position='Query'),
}

model CreateTransitRouterPeerAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
}

model CreateTransitRouterPeerAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterPeerAttachmentResponseBody(name='body'),
}

async function createTransitRouterPeerAttachment(request: CreateTransitRouterPeerAttachmentRequest): CreateTransitRouterPeerAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouterPeerAttachment', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterRouteEntryRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterRouteEntryDescription?: string(name='TransitRouterRouteEntryDescription', position='Query'),
  transitRouterRouteEntryDestinationCidrBlock: string(name='TransitRouterRouteEntryDestinationCidrBlock', position='Query'),
  transitRouterRouteEntryName?: string(name='TransitRouterRouteEntryName', position='Query'),
  transitRouterRouteEntryNextHopId?: string(name='TransitRouterRouteEntryNextHopId', position='Query'),
  transitRouterRouteEntryNextHopType: string(name='TransitRouterRouteEntryNextHopType', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', position='Query'),
}

model CreateTransitRouterRouteEntryResponseBody = {
  requestId?: string(name='RequestId'),
  transitRouterRouteEntryId?: string(name='TransitRouterRouteEntryId'),
}

model CreateTransitRouterRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterRouteEntryResponseBody(name='body'),
}

async function createTransitRouterRouteEntry(request: CreateTransitRouterRouteEntryRequest): CreateTransitRouterRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouterRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterRouteTableRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterId: string(name='TransitRouterId', position='Query'),
  transitRouterRouteTableDescription?: string(name='TransitRouterRouteTableDescription', position='Query'),
  transitRouterRouteTableName?: string(name='TransitRouterRouteTableName', position='Query'),
}

model CreateTransitRouterRouteTableResponseBody = {
  requestId?: string(name='RequestId'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
}

model CreateTransitRouterRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterRouteTableResponseBody(name='body'),
}

async function createTransitRouterRouteTable(request: CreateTransitRouterRouteTableRequest): CreateTransitRouterRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouterRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterVbrAttachmentRequest {
  autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled', position='Query'),
  cenId?: string(name='CenId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', position='Query'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', position='Query'),
  transitRouterId?: string(name='TransitRouterId', position='Query'),
  vbrId: string(name='VbrId', position='Query'),
  vbrOwnerId?: long(name='VbrOwnerId', position='Query'),
}

model CreateTransitRouterVbrAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
}

model CreateTransitRouterVbrAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterVbrAttachmentResponseBody(name='body'),
}

async function createTransitRouterVbrAttachment(request: CreateTransitRouterVbrAttachmentRequest): CreateTransitRouterVbrAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouterVbrAttachment', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterVpcAttachmentRequest {
  cenId?: string(name='CenId', position='Query'),
  chargeType?: string(name='ChargeType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', position='Query'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', position='Query'),
  transitRouterId?: string(name='TransitRouterId', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  vpcOwnerId?: long(name='VpcOwnerId', position='Query'),
  zoneMappings: [ 
    {
      vSwitchId: string(name='VSwitchId'),
      zoneId: string(name='ZoneId'),
    }
  ](name='ZoneMappings', position='Query'),
}

model CreateTransitRouterVpcAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
}

model CreateTransitRouterVpcAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterVpcAttachmentResponseBody(name='body'),
}

async function createTransitRouterVpcAttachment(request: CreateTransitRouterVpcAttachmentRequest): CreateTransitRouterVpcAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouterVpcAttachment', 'POST', '/', 'json', false, 'json', request);
}

model DeactiveFlowLogRequest {
  cenId: string(name='CenId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  flowLogId: string(name='FlowLogId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeactiveFlowLogResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeactiveFlowLogResponse = {
  headers: map[string]string(name='headers'),
  body: DeactiveFlowLogResponseBody(name='body'),
}

async function deactiveFlowLog(request: DeactiveFlowLogRequest): DeactiveFlowLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeactiveFlowLog', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenRequest {
  cenId: string(name='CenId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenResponseBody(name='body'),
}

async function deleteCen(request: DeleteCenRequest): DeleteCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCen', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenBandwidthPackageRequest {
  cenBandwidthPackageId: string(name='CenBandwidthPackageId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCenBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenBandwidthPackageResponseBody(name='body'),
}

async function deleteCenBandwidthPackage(request: DeleteCenBandwidthPackageRequest): DeleteCenBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCenBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenChildInstanceRouteEntryToAttachmentRequest {
  cenId: string(name='CenId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', position='Query'),
}

model DeleteCenChildInstanceRouteEntryToAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenChildInstanceRouteEntryToAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenChildInstanceRouteEntryToAttachmentResponseBody(name='body'),
}

async function deleteCenChildInstanceRouteEntryToAttachment(request: DeleteCenChildInstanceRouteEntryToAttachmentRequest): DeleteCenChildInstanceRouteEntryToAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCenChildInstanceRouteEntryToAttachment', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenChildInstanceRouteEntryToCenRequest {
  cenId: string(name='CenId', position='Query'),
  childInstanceAliUid?: long(name='ChildInstanceAliUid', position='Query'),
  childInstanceId: string(name='ChildInstanceId', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', position='Query'),
  childInstanceType: string(name='ChildInstanceType', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', position='Query'),
}

model DeleteCenChildInstanceRouteEntryToCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenChildInstanceRouteEntryToCenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenChildInstanceRouteEntryToCenResponseBody(name='body'),
}

async function deleteCenChildInstanceRouteEntryToCen(request: DeleteCenChildInstanceRouteEntryToCenRequest): DeleteCenChildInstanceRouteEntryToCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCenChildInstanceRouteEntryToCen', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenInterRegionTrafficQosPolicyRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficQosPolicyId: string(name='TrafficQosPolicyId', position='Query'),
}

model DeleteCenInterRegionTrafficQosPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenInterRegionTrafficQosPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenInterRegionTrafficQosPolicyResponseBody(name='body'),
}

async function deleteCenInterRegionTrafficQosPolicy(request: DeleteCenInterRegionTrafficQosPolicyRequest): DeleteCenInterRegionTrafficQosPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCenInterRegionTrafficQosPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenInterRegionTrafficQosQueueRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosQueueId: string(name='QosQueueId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCenInterRegionTrafficQosQueueResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenInterRegionTrafficQosQueueResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenInterRegionTrafficQosQueueResponseBody(name='body'),
}

async function deleteCenInterRegionTrafficQosQueue(request: DeleteCenInterRegionTrafficQosQueueRequest): DeleteCenInterRegionTrafficQosQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCenInterRegionTrafficQosQueue', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenRouteMapRequest {
  cenId: string(name='CenId', position='Query'),
  cenRegionId: string(name='CenRegionId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeMapId: string(name='RouteMapId', position='Query'),
}

model DeleteCenRouteMapResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenRouteMapResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenRouteMapResponseBody(name='body'),
}

async function deleteCenRouteMap(request: DeleteCenRouteMapRequest): DeleteCenRouteMapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCenRouteMap', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFlowlogRequest {
  cenId: string(name='CenId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  flowLogId: string(name='FlowLogId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteFlowlogResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteFlowlogResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowlogResponseBody(name='body'),
}

async function deleteFlowlog(request: DeleteFlowlogRequest): DeleteFlowlogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlowlog', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRouteServiceInCenRequest {
  accessRegionId: string(name='AccessRegionId', position='Query'),
  cenId: string(name='CenId', position='Query'),
  host: string(name='Host', position='Query'),
  hostRegionId: string(name='HostRegionId', position='Query'),
  hostVpcId?: string(name='HostVpcId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteRouteServiceInCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRouteServiceInCenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRouteServiceInCenResponseBody(name='body'),
}

async function deleteRouteServiceInCen(request: DeleteRouteServiceInCenRequest): DeleteRouteServiceInCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRouteServiceInCen', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrafficMarkingPolicyRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMarkingPolicyId: string(name='TrafficMarkingPolicyId', position='Query'),
}

model DeleteTrafficMarkingPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrafficMarkingPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrafficMarkingPolicyResponseBody(name='body'),
}

async function deleteTrafficMarkingPolicy(request: DeleteTrafficMarkingPolicyRequest): DeleteTrafficMarkingPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrafficMarkingPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterId: string(name='TransitRouterId', position='Query'),
}

model DeleteTransitRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTransitRouterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterResponseBody(name='body'),
}

async function deleteTransitRouter(request: DeleteTransitRouterRequest): DeleteTransitRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouter', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterPeerAttachmentRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', position='Query'),
}

model DeleteTransitRouterPeerAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTransitRouterPeerAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterPeerAttachmentResponseBody(name='body'),
}

async function deleteTransitRouterPeerAttachment(request: DeleteTransitRouterPeerAttachmentRequest): DeleteTransitRouterPeerAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouterPeerAttachment', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterRouteEntryRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterRouteEntryDestinationCidrBlock?: string(name='TransitRouterRouteEntryDestinationCidrBlock', position='Query'),
  transitRouterRouteEntryId?: string(name='TransitRouterRouteEntryId', position='Query'),
  transitRouterRouteEntryNextHopId?: string(name='TransitRouterRouteEntryNextHopId', position='Query'),
  transitRouterRouteEntryNextHopType?: string(name='TransitRouterRouteEntryNextHopType', position='Query'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId', position='Query'),
}

model DeleteTransitRouterRouteEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTransitRouterRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterRouteEntryResponseBody(name='body'),
}

async function deleteTransitRouterRouteEntry(request: DeleteTransitRouterRouteEntryRequest): DeleteTransitRouterRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouterRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterRouteTableRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', position='Query'),
}

model DeleteTransitRouterRouteTableResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTransitRouterRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterRouteTableResponseBody(name='body'),
}

async function deleteTransitRouterRouteTable(request: DeleteTransitRouterRouteTableRequest): DeleteTransitRouterRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouterRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterVbrAttachmentRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', position='Query'),
}

model DeleteTransitRouterVbrAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTransitRouterVbrAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterVbrAttachmentResponseBody(name='body'),
}

async function deleteTransitRouterVbrAttachment(request: DeleteTransitRouterVbrAttachmentRequest): DeleteTransitRouterVbrAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouterVbrAttachment', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterVpcAttachmentRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', position='Query'),
}

model DeleteTransitRouterVpcAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTransitRouterVpcAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterVpcAttachmentResponseBody(name='body'),
}

async function deleteTransitRouterVpcAttachment(request: DeleteTransitRouterVpcAttachmentRequest): DeleteTransitRouterVpcAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouterVpcAttachment', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenAttachedChildInstanceAttributeRequest {
  cenId: string(name='CenId', position='Query'),
  childInstanceId: string(name='ChildInstanceId', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', position='Query'),
  childInstanceType: string(name='ChildInstanceType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCenAttachedChildInstanceAttributeResponseBody = {
  cenId?: string(name='CenId'),
  childInstanceAttachTime?: string(name='ChildInstanceAttachTime'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceName?: string(name='ChildInstanceName'),
  childInstanceOwnerId?: long(name='ChildInstanceOwnerId'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceType?: string(name='ChildInstanceType'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeCenAttachedChildInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenAttachedChildInstanceAttributeResponseBody(name='body'),
}

async function describeCenAttachedChildInstanceAttribute(request: DescribeCenAttachedChildInstanceAttributeRequest): DescribeCenAttachedChildInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenAttachedChildInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenAttachedChildInstancesRequest {
  cenId: string(name='CenId', position='Query'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId', position='Query'),
  childInstanceType?: string(name='ChildInstanceType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCenAttachedChildInstancesResponseBody = {
  childInstances?: {
    childInstance?: [ 
    {
      cenId?: string(name='CenId'),
      childInstanceAttachTime?: string(name='ChildInstanceAttachTime'),
      childInstanceId?: string(name='ChildInstanceId'),
      childInstanceOwnerId?: long(name='ChildInstanceOwnerId'),
      childInstanceRegionId?: string(name='ChildInstanceRegionId'),
      childInstanceType?: string(name='ChildInstanceType'),
      status?: string(name='Status'),
    }
  ](name='ChildInstance')
  }(name='ChildInstances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenAttachedChildInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenAttachedChildInstancesResponseBody(name='body'),
}

async function describeCenAttachedChildInstances(request: DescribeCenAttachedChildInstancesRequest): DescribeCenAttachedChildInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenAttachedChildInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenBandwidthPackagesRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', position='Query'),
  isOrKey?: boolean(name='IsOrKey', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCenBandwidthPackagesResponseBody = {
  cenBandwidthPackages?: {
    cenBandwidthPackage?: [ 
    {
      bandwidth?: long(name='Bandwidth'),
      bandwidthPackageChargeType?: string(name='BandwidthPackageChargeType'),
      businessStatus?: string(name='BusinessStatus'),
      cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
      cenIds?: {
        cenId?: [ string ](name='CenId')
      }(name='CenIds'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      expiredTime?: string(name='ExpiredTime'),
      geographicRegionAId?: string(name='GeographicRegionAId'),
      geographicRegionBId?: string(name='GeographicRegionBId'),
      geographicSpanId?: string(name='GeographicSpanId'),
      hasReservationData?: string(name='HasReservationData'),
      isCrossBorder?: boolean(name='IsCrossBorder'),
      name?: string(name='Name'),
      orginInterRegionBandwidthLimits?: {
        orginInterRegionBandwidthLimit?: [ 
        {
          bandwidthLimit?: string(name='BandwidthLimit'),
          geographicSpanId?: string(name='GeographicSpanId'),
          localRegionId?: string(name='LocalRegionId'),
          oppositeRegionId?: string(name='OppositeRegionId'),
        }
      ](name='OrginInterRegionBandwidthLimit')
      }(name='OrginInterRegionBandwidthLimits'),
      reservationActiveTime?: string(name='ReservationActiveTime'),
      reservationBandwidth?: string(name='ReservationBandwidth'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType'),
      reservationOrderType?: string(name='ReservationOrderType'),
      status?: string(name='Status'),
    }
  ](name='CenBandwidthPackage')
  }(name='CenBandwidthPackages'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenBandwidthPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenBandwidthPackagesResponseBody(name='body'),
}

async function describeCenBandwidthPackages(request: DescribeCenBandwidthPackagesRequest): DescribeCenBandwidthPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenBandwidthPackages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenChildInstanceRouteEntriesRequest {
  cenId: string(name='CenId', position='Query'),
  childInstanceId: string(name='ChildInstanceId', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', position='Query'),
  childInstanceType: string(name='ChildInstanceType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeCenChildInstanceRouteEntriesResponseBody = {
  cenRouteEntries?: {
    cenRouteEntry?: [ 
    {
      asPaths?: {
        asPath?: [ string ](name='AsPath')
      }(name='AsPaths'),
      cenRouteMapRecords?: {
        cenRouteMapRecord?: [ 
        {
          regionId?: string(name='RegionId'),
          routeMapId?: string(name='RouteMapId'),
        }
      ](name='CenRouteMapRecord')
      }(name='CenRouteMapRecords'),
      communities?: {
        community?: [ string ](name='Community')
      }(name='Communities'),
      conflicts?: {
        conflict?: [ 
        {
          destinationCidrBlock?: string(name='DestinationCidrBlock'),
          instanceId?: string(name='InstanceId'),
          instanceType?: string(name='InstanceType'),
          regionId?: string(name='RegionId'),
          status?: string(name='Status'),
        }
      ](name='Conflict')
      }(name='Conflicts'),
      destinationCidrBlock?: string(name='DestinationCidrBlock'),
      nextHopInstanceId?: string(name='NextHopInstanceId'),
      nextHopRegionId?: string(name='NextHopRegionId'),
      nextHopType?: string(name='NextHopType'),
      operationalMode?: boolean(name='OperationalMode'),
      publishStatus?: string(name='PublishStatus'),
      routeTableId?: string(name='RouteTableId'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='CenRouteEntry')
  }(name='CenRouteEntries'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenChildInstanceRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenChildInstanceRouteEntriesResponseBody(name='body'),
}

async function describeCenChildInstanceRouteEntries(request: DescribeCenChildInstanceRouteEntriesRequest): DescribeCenChildInstanceRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenChildInstanceRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenGeographicSpanRemainingBandwidthRequest {
  cenId: string(name='CenId', position='Query'),
  geographicRegionAId: string(name='GeographicRegionAId', position='Query'),
  geographicRegionBId: string(name='GeographicRegionBId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCenGeographicSpanRemainingBandwidthResponseBody = {
  remainingBandwidth?: long(name='RemainingBandwidth'),
  requestId?: string(name='RequestId'),
}

model DescribeCenGeographicSpanRemainingBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenGeographicSpanRemainingBandwidthResponseBody(name='body'),
}

async function describeCenGeographicSpanRemainingBandwidth(request: DescribeCenGeographicSpanRemainingBandwidthRequest): DescribeCenGeographicSpanRemainingBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenGeographicSpanRemainingBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenGeographicSpansRequest {
  geographicSpanId?: string(name='GeographicSpanId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCenGeographicSpansResponseBody = {
  geographicSpanModels?: {
    geographicSpanModel?: [ 
    {
      geographicSpanId?: string(name='GeographicSpanId'),
      localGeoRegionId?: string(name='LocalGeoRegionId'),
      oppositeGeoRegionId?: string(name='OppositeGeoRegionId'),
    }
  ](name='GeographicSpanModel')
  }(name='GeographicSpanModels'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenGeographicSpansResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenGeographicSpansResponseBody(name='body'),
}

async function describeCenGeographicSpans(request: DescribeCenGeographicSpansRequest): DescribeCenGeographicSpansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenGeographicSpans', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenInterRegionBandwidthLimitsRequest {
  cenId?: string(name='CenId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCenInterRegionBandwidthLimitsResponseBody = {
  cenInterRegionBandwidthLimits?: {
    cenInterRegionBandwidthLimit?: [ 
    {
      bandwidthLimit?: long(name='BandwidthLimit'),
      bandwidthPackageId?: string(name='BandwidthPackageId'),
      cenId?: string(name='CenId'),
      geographicSpanId?: string(name='GeographicSpanId'),
      localRegionId?: string(name='LocalRegionId'),
      oppositeRegionId?: string(name='OppositeRegionId'),
      status?: string(name='Status'),
    }
  ](name='CenInterRegionBandwidthLimit')
  }(name='CenInterRegionBandwidthLimits'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenInterRegionBandwidthLimitsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenInterRegionBandwidthLimitsResponseBody(name='body'),
}

async function describeCenInterRegionBandwidthLimits(request: DescribeCenInterRegionBandwidthLimitsRequest): DescribeCenInterRegionBandwidthLimitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenInterRegionBandwidthLimits', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenPrivateZoneRoutesRequest {
  accessRegionId?: string(name='AccessRegionId', position='Query'),
  cenId: string(name='CenId', position='Query'),
  hostRegionId?: string(name='HostRegionId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCenPrivateZoneRoutesResponseBody = {
  cenId?: string(name='CenId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  privateZoneDnsServers?: string(name='PrivateZoneDnsServers'),
  privateZoneInfos?: {
    privateZoneInfo?: [ 
    {
      accessRegionId?: string(name='AccessRegionId'),
      hostRegionId?: string(name='HostRegionId'),
      hostVpcId?: string(name='HostVpcId'),
      status?: string(name='Status'),
    }
  ](name='PrivateZoneInfo')
  }(name='PrivateZoneInfos'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenPrivateZoneRoutesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenPrivateZoneRoutesResponseBody(name='body'),
}

async function describeCenPrivateZoneRoutes(request: DescribeCenPrivateZoneRoutesRequest): DescribeCenPrivateZoneRoutesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenPrivateZoneRoutes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenRegionDomainRouteEntriesRequest {
  cenId: string(name='CenId', position='Query'),
  cenRegionId: string(name='CenRegionId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeCenRegionDomainRouteEntriesResponseBody = {
  cenRouteEntries?: {
    cenRouteEntry?: [ 
    {
      asPaths?: {
        asPath?: [ string ](name='AsPath')
      }(name='AsPaths'),
      cenOutRouteMapRecords?: {
        cenOutRouteMapRecord?: [ 
        {
          regionId?: string(name='RegionId'),
          routeMapId?: string(name='RouteMapId'),
        }
      ](name='CenOutRouteMapRecord')
      }(name='CenOutRouteMapRecords'),
      cenRouteMapRecords?: {
        cenRouteMapRecord?: [ 
        {
          regionId?: string(name='RegionId'),
          routeMapId?: string(name='RouteMapId'),
        }
      ](name='CenRouteMapRecord')
      }(name='CenRouteMapRecords'),
      communities?: {
        community?: [ string ](name='Community')
      }(name='Communities'),
      destinationCidrBlock?: string(name='DestinationCidrBlock'),
      nextHopInstanceId?: string(name='NextHopInstanceId'),
      nextHopRegionId?: string(name='NextHopRegionId'),
      nextHopType?: string(name='NextHopType'),
      preference?: int32(name='Preference'),
      status?: string(name='Status'),
      toOtherRegionStatus?: string(name='ToOtherRegionStatus'),
      type?: string(name='Type'),
    }
  ](name='CenRouteEntry')
  }(name='CenRouteEntries'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenRegionDomainRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenRegionDomainRouteEntriesResponseBody(name='body'),
}

async function describeCenRegionDomainRouteEntries(request: DescribeCenRegionDomainRouteEntriesRequest): DescribeCenRegionDomainRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenRegionDomainRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenRouteMapsRequest {
  cenId: string(name='CenId', position='Query'),
  cenRegionId?: string(name='CenRegionId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeMapId?: string(name='RouteMapId', position='Query'),
  transmitDirection?: string(name='TransmitDirection', position='Query'),
}

model DescribeCenRouteMapsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  routeMaps?: {
    routeMap?: [ 
    {
      asPathMatchMode?: string(name='AsPathMatchMode'),
      cenId?: string(name='CenId'),
      cenRegionId?: string(name='CenRegionId'),
      cidrMatchMode?: string(name='CidrMatchMode'),
      communityMatchMode?: string(name='CommunityMatchMode'),
      communityOperateMode?: string(name='CommunityOperateMode'),
      description?: string(name='Description'),
      destinationChildInstanceTypes?: {
        destinationChildInstanceType?: [ string ](name='DestinationChildInstanceType')
      }(name='DestinationChildInstanceTypes'),
      destinationCidrBlocks?: {
        destinationCidrBlock?: [ string ](name='DestinationCidrBlock')
      }(name='DestinationCidrBlocks'),
      destinationInstanceIds?: {
        destinationInstanceId?: [ string ](name='DestinationInstanceId')
      }(name='DestinationInstanceIds'),
      destinationInstanceIdsReverseMatch?: boolean(name='DestinationInstanceIdsReverseMatch'),
      destinationRouteTableIds?: {
        destinationRouteTableId?: [ string ](name='DestinationRouteTableId')
      }(name='DestinationRouteTableIds'),
      mapResult?: string(name='MapResult'),
      matchAsns?: {
        matchAsn?: [ string ](name='MatchAsn')
      }(name='MatchAsns'),
      matchCommunitySet?: {
        matchCommunity?: [ string ](name='MatchCommunity')
      }(name='MatchCommunitySet'),
      nextPriority?: int32(name='NextPriority'),
      operateCommunitySet?: {
        operateCommunity?: [ string ](name='OperateCommunity')
      }(name='OperateCommunitySet'),
      preference?: int32(name='Preference'),
      prependAsPath?: {
        asPath?: [ string ](name='AsPath')
      }(name='PrependAsPath'),
      priority?: int32(name='Priority'),
      routeMapId?: string(name='RouteMapId'),
      routeTypes?: {
        routeType?: [ string ](name='RouteType')
      }(name='RouteTypes'),
      sourceChildInstanceTypes?: {
        sourceChildInstanceType?: [ string ](name='SourceChildInstanceType')
      }(name='SourceChildInstanceTypes'),
      sourceInstanceIds?: {
        sourceInstanceId?: [ string ](name='SourceInstanceId')
      }(name='SourceInstanceIds'),
      sourceInstanceIdsReverseMatch?: boolean(name='SourceInstanceIdsReverseMatch'),
      sourceRegionIds?: {
        sourceRegionId?: [ string ](name='SourceRegionId')
      }(name='SourceRegionIds'),
      sourceRouteTableIds?: {
        sourceRouteTableId?: [ string ](name='SourceRouteTableId')
      }(name='SourceRouteTableIds'),
      status?: string(name='Status'),
      transmitDirection?: string(name='TransmitDirection'),
    }
  ](name='RouteMap')
  }(name='RouteMaps'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenRouteMapsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenRouteMapsResponseBody(name='body'),
}

async function describeCenRouteMaps(request: DescribeCenRouteMapsRequest): DescribeCenRouteMapsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenRouteMaps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenVbrHealthCheckRequest {
  cenId?: string(name='CenId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrInstanceId?: string(name='VbrInstanceId', position='Query'),
  vbrInstanceOwnerId?: long(name='VbrInstanceOwnerId', position='Query'),
  vbrInstanceRegionId: string(name='VbrInstanceRegionId', position='Query'),
}

model DescribeCenVbrHealthCheckResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vbrHealthChecks?: {
    vbrHealthCheck?: [ 
    {
      cenId?: string(name='CenId'),
      healthCheckInterval?: int32(name='HealthCheckInterval'),
      healthCheckOnly?: boolean(name='HealthCheckOnly'),
      healthCheckSourceIp?: string(name='HealthCheckSourceIp'),
      healthCheckTargetIp?: string(name='HealthCheckTargetIp'),
      healthyThreshold?: int32(name='HealthyThreshold'),
      vbrInstanceId?: string(name='VbrInstanceId'),
      vbrInstanceRegionId?: string(name='VbrInstanceRegionId'),
    }
  ](name='VbrHealthCheck')
  }(name='VbrHealthChecks'),
}

model DescribeCenVbrHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenVbrHealthCheckResponseBody(name='body'),
}

async function describeCenVbrHealthCheck(request: DescribeCenVbrHealthCheckRequest): DescribeCenVbrHealthCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenVbrHealthCheck', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCensRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeCensResponseBody = {
  cens?: {
    cen?: [ 
    {
      cenBandwidthPackageIds?: {
        cenBandwidthPackageId?: [ string ](name='CenBandwidthPackageId')
      }(name='CenBandwidthPackageIds'),
      cenId?: string(name='CenId'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      name?: string(name='Name'),
      protectionLevel?: string(name='ProtectionLevel'),
      status?: string(name='Status'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='Cen')
  }(name='Cens'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCensResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCensResponseBody(name='body'),
}

async function describeCens(request: DescribeCensRequest): DescribeCensResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCens', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChildInstanceRegionsRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeChildInstanceRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeChildInstanceRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeChildInstanceRegionsResponseBody(name='body'),
}

async function describeChildInstanceRegions(request: DescribeChildInstanceRegionsRequest): DescribeChildInstanceRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChildInstanceRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFlowlogsRequest {
  cenId?: string(name='CenId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  flowLogId?: string(name='FlowLogId', position='Query'),
  flowLogName?: string(name='FlowLogName', position='Query'),
  logStoreName?: string(name='LogStoreName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  projectName?: string(name='ProjectName', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
}

model DescribeFlowlogsResponseBody = {
  flowLogs?: {
    flowLog?: [ 
    {
      cenId?: string(name='CenId'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      flowLogId?: string(name='FlowLogId'),
      flowLogName?: string(name='FlowLogName'),
      logStoreName?: string(name='LogStoreName'),
      projectName?: string(name='ProjectName'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
    }
  ](name='FlowLog')
  }(name='FlowLogs'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  totalCount?: string(name='TotalCount'),
}

model DescribeFlowlogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowlogsResponseBody(name='body'),
}

async function describeFlowlogs(request: DescribeFlowlogsRequest): DescribeFlowlogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlowlogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGeographicRegionMembershipRequest {
  geographicRegionId: string(name='GeographicRegionId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeGeographicRegionMembershipResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionIds?: {
    regionId?: [ 
    {
      regionId?: string(name='RegionId'),
    }
  ](name='RegionId')
  }(name='RegionIds'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeGeographicRegionMembershipResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGeographicRegionMembershipResponseBody(name='body'),
}

async function describeGeographicRegionMembership(request: DescribeGeographicRegionMembershipRequest): DescribeGeographicRegionMembershipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGeographicRegionMembership', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGrantRulesToCenRequest {
  cenId: string(name='CenId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productType: string(name='ProductType', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeGrantRulesToCenResponseBody = {
  grantRules?: {
    grantRule?: [ 
    {
      cenId?: string(name='CenId'),
      childInstanceId?: string(name='ChildInstanceId'),
      childInstanceOwnerId?: long(name='ChildInstanceOwnerId'),
      childInstanceRegionId?: string(name='ChildInstanceRegionId'),
      childInstanceType?: string(name='ChildInstanceType'),
      orderType?: string(name='OrderType'),
    }
  ](name='GrantRule')
  }(name='GrantRules'),
  requestId?: string(name='RequestId'),
}

model DescribeGrantRulesToCenResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGrantRulesToCenResponseBody(name='body'),
}

async function describeGrantRulesToCen(request: DescribeGrantRulesToCenRequest): DescribeGrantRulesToCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGrantRulesToCen', 'POST', '/', 'json', false, 'json', request);
}

model DescribePublishedRouteEntriesRequest {
  cenId: string(name='CenId', position='Query'),
  childInstanceId: string(name='ChildInstanceId', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', position='Query'),
  childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId', position='Query'),
  childInstanceType: string(name='ChildInstanceType', position='Query'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePublishedRouteEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  publishedRouteEntries?: {
    publishedRouteEntry?: [ 
    {
      childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId'),
      conflicts?: {
        conflict?: [ 
        {
          destinationCidrBlock?: string(name='DestinationCidrBlock'),
          instanceId?: string(name='InstanceId'),
          instanceType?: string(name='InstanceType'),
          regionId?: string(name='RegionId'),
          status?: string(name='Status'),
        }
      ](name='Conflict')
      }(name='Conflicts'),
      destinationCidrBlock?: string(name='DestinationCidrBlock'),
      nextHopId?: string(name='NextHopId'),
      nextHopType?: string(name='NextHopType'),
      operationalMode?: boolean(name='OperationalMode'),
      publishStatus?: string(name='PublishStatus'),
      routeType?: string(name='RouteType'),
    }
  ](name='PublishedRouteEntry')
  }(name='PublishedRouteEntries'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePublishedRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePublishedRouteEntriesResponseBody(name='body'),
}

async function describePublishedRouteEntries(request: DescribePublishedRouteEntriesRequest): DescribePublishedRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePublishedRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouteConflictRequest {
  childInstanceId: string(name='ChildInstanceId', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', position='Query'),
  childInstanceRouteTableId: string(name='ChildInstanceRouteTableId', position='Query'),
  childInstanceType: string(name='ChildInstanceType', position='Query'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRouteConflictResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  routeConflicts?: {
    routeConflict?: [ 
    {
      destinationCidrBlock?: string(name='DestinationCidrBlock'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
    }
  ](name='RouteConflict')
  }(name='RouteConflicts'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRouteConflictResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouteConflictResponseBody(name='body'),
}

async function describeRouteConflict(request: DescribeRouteConflictRequest): DescribeRouteConflictResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouteConflict', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouteServicesInCenRequest {
  accessRegionId?: string(name='AccessRegionId', position='Query'),
  cenId: string(name='CenId', position='Query'),
  host?: string(name='Host', position='Query'),
  hostRegionId?: string(name='HostRegionId', position='Query'),
  hostVpcId?: string(name='HostVpcId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRouteServicesInCenResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  routeServiceEntries?: {
    routeServiceEntry?: [ 
    {
      accessRegionId?: string(name='AccessRegionId'),
      cenId?: string(name='CenId'),
      cidrs?: {
        cidr?: [ string ](name='Cidr')
      }(name='Cidrs'),
      description?: string(name='Description'),
      host?: string(name='Host'),
      hostRegionId?: string(name='HostRegionId'),
      hostVpcId?: string(name='HostVpcId'),
      status?: string(name='Status'),
    }
  ](name='RouteServiceEntry')
  }(name='RouteServiceEntries'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRouteServicesInCenResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouteServicesInCenResponseBody(name='body'),
}

async function describeRouteServicesInCen(request: DescribeRouteServicesInCenRequest): DescribeRouteServicesInCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouteServicesInCen', 'POST', '/', 'json', false, 'json', request);
}

model DetachCenChildInstanceRequest {
  cenId: string(name='CenId', position='Query'),
  cenOwnerId?: long(name='CenOwnerId', position='Query'),
  childInstanceId: string(name='ChildInstanceId', position='Query'),
  childInstanceOwnerId?: long(name='ChildInstanceOwnerId', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', position='Query'),
  childInstanceType: string(name='ChildInstanceType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DetachCenChildInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachCenChildInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DetachCenChildInstanceResponseBody(name='body'),
}

async function detachCenChildInstance(request: DetachCenChildInstanceRequest): DetachCenChildInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachCenChildInstance', 'POST', '/', 'json', false, 'json', request);
}

model DisableCenVbrHealthCheckRequest {
  cenId: string(name='CenId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrInstanceId: string(name='VbrInstanceId', position='Query'),
  vbrInstanceOwnerId?: long(name='VbrInstanceOwnerId', position='Query'),
  vbrInstanceRegionId: string(name='VbrInstanceRegionId', position='Query'),
}

model DisableCenVbrHealthCheckResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableCenVbrHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  body: DisableCenVbrHealthCheckResponseBody(name='body'),
}

async function disableCenVbrHealthCheck(request: DisableCenVbrHealthCheckRequest): DisableCenVbrHealthCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableCenVbrHealthCheck', 'POST', '/', 'json', false, 'json', request);
}

model DisableTransitRouterRouteTablePropagationRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', position='Query'),
}

model DisableTransitRouterRouteTablePropagationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableTransitRouterRouteTablePropagationResponse = {
  headers: map[string]string(name='headers'),
  body: DisableTransitRouterRouteTablePropagationResponseBody(name='body'),
}

async function disableTransitRouterRouteTablePropagation(request: DisableTransitRouterRouteTablePropagationRequest): DisableTransitRouterRouteTablePropagationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableTransitRouterRouteTablePropagation', 'POST', '/', 'json', false, 'json', request);
}

model DissociateTransitRouterAttachmentFromRouteTableRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', position='Query'),
}

model DissociateTransitRouterAttachmentFromRouteTableResponseBody = {
  requestId?: string(name='RequestId'),
}

model DissociateTransitRouterAttachmentFromRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateTransitRouterAttachmentFromRouteTableResponseBody(name='body'),
}

async function dissociateTransitRouterAttachmentFromRouteTable(request: DissociateTransitRouterAttachmentFromRouteTableRequest): DissociateTransitRouterAttachmentFromRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateTransitRouterAttachmentFromRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model EnableCenVbrHealthCheckRequest {
  cenId: string(name='CenId', position='Query'),
  healthCheckInterval?: int32(name='HealthCheckInterval', minimum=1, maximum=3, position='Query'),
  healthCheckOnly?: boolean(name='HealthCheckOnly', position='Query'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', position='Query'),
  healthCheckTargetIp: string(name='HealthCheckTargetIp', position='Query'),
  healthyThreshold?: int32(name='HealthyThreshold', minimum=3, maximum=8, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrInstanceId: string(name='VbrInstanceId', position='Query'),
  vbrInstanceOwnerId?: long(name='VbrInstanceOwnerId', position='Query'),
  vbrInstanceRegionId: string(name='VbrInstanceRegionId', position='Query'),
}

model EnableCenVbrHealthCheckResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableCenVbrHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  body: EnableCenVbrHealthCheckResponseBody(name='body'),
}

async function enableCenVbrHealthCheck(request: EnableCenVbrHealthCheckRequest): EnableCenVbrHealthCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableCenVbrHealthCheck', 'POST', '/', 'json', false, 'json', request);
}

model EnableTransitRouterRouteTablePropagationRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', position='Query'),
}

model EnableTransitRouterRouteTablePropagationResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableTransitRouterRouteTablePropagationResponse = {
  headers: map[string]string(name='headers'),
  body: EnableTransitRouterRouteTablePropagationResponseBody(name='body'),
}

async function enableTransitRouterRouteTablePropagation(request: EnableTransitRouterRouteTablePropagationRequest): EnableTransitRouterRouteTablePropagationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableTransitRouterRouteTablePropagation', 'POST', '/', 'json', false, 'json', request);
}

model GrantInstanceToTransitRouterRequest {
  cenId: string(name='CenId', position='Query'),
  cenOwnerId: long(name='CenOwnerId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GrantInstanceToTransitRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model GrantInstanceToTransitRouterResponse = {
  headers: map[string]string(name='headers'),
  body: GrantInstanceToTransitRouterResponseBody(name='body'),
}

async function grantInstanceToTransitRouter(request: GrantInstanceToTransitRouterRequest): GrantInstanceToTransitRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantInstanceToTransitRouter', 'POST', '/', 'json', false, 'json', request);
}

model ListCenInterRegionTrafficQosPoliciesRequest {
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficQosPolicyDescription?: string(name='TrafficQosPolicyDescription', position='Query'),
  trafficQosPolicyId?: string(name='TrafficQosPolicyId', position='Query'),
  trafficQosPolicyName?: string(name='TrafficQosPolicyName', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterId: string(name='TransitRouterId', position='Query'),
}

model ListCenInterRegionTrafficQosPoliciesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  trafficQosPolicies?: [ 
    {
      trafficQosPolicyDescription?: string(name='TrafficQosPolicyDescription'),
      trafficQosPolicyId?: string(name='TrafficQosPolicyId'),
      trafficQosPolicyName?: string(name='TrafficQosPolicyName'),
      trafficQosPolicyStatus?: string(name='TrafficQosPolicyStatus'),
      trafficQosQueues?: [ 
        {
          dscps?: [ int32 ](name='Dscps'),
          qosQueueDescription?: string(name='QosQueueDescription'),
          qosQueueId?: string(name='QosQueueId'),
          qosQueueName?: string(name='QosQueueName'),
          remainBandwidthPercent?: int32(name='RemainBandwidthPercent'),
        }
      ](name='TrafficQosQueues'),
    }
  ](name='TrafficQosPolicies'),
}

model ListCenInterRegionTrafficQosPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCenInterRegionTrafficQosPoliciesResponseBody(name='body'),
}

async function listCenInterRegionTrafficQosPolicies(request: ListCenInterRegionTrafficQosPoliciesRequest): ListCenInterRegionTrafficQosPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCenInterRegionTrafficQosPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListGrantVSwitchesToCenRequest {
  cenId: string(name='CenId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', minimum=0, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model ListGrantVSwitchesToCenResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vSwitches?: [ 
    {
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='VSwitches'),
}

model ListGrantVSwitchesToCenResponse = {
  headers: map[string]string(name='headers'),
  body: ListGrantVSwitchesToCenResponseBody(name='body'),
}

async function listGrantVSwitchesToCen(request: ListGrantVSwitchesToCenRequest): ListGrantVSwitchesToCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGrantVSwitchesToCen', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListTrafficMarkingPoliciesRequest {
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMarkingPolicyDescription?: string(name='TrafficMarkingPolicyDescription', position='Query'),
  trafficMarkingPolicyId?: string(name='TrafficMarkingPolicyId', position='Query'),
  trafficMarkingPolicyName?: string(name='TrafficMarkingPolicyName', position='Query'),
  transitRouterId: string(name='TransitRouterId', position='Query'),
}

model ListTrafficMarkingPoliciesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  trafficMarkingPolicies?: [ 
    {
      markingDscp?: int32(name='MarkingDscp'),
      priority?: int32(name='Priority'),
      trafficMarkingPolicyDescription?: string(name='TrafficMarkingPolicyDescription'),
      trafficMarkingPolicyId?: string(name='TrafficMarkingPolicyId'),
      trafficMarkingPolicyName?: string(name='TrafficMarkingPolicyName'),
      trafficMarkingPolicyStatus?: string(name='TrafficMarkingPolicyStatus'),
      trafficMatchRules?: [ 
        {
          dstCidr?: string(name='DstCidr'),
          dstPortRange?: [ int32 ](name='DstPortRange'),
          matchDscp?: int32(name='MatchDscp'),
          protocol?: string(name='Protocol'),
          srcCidr?: string(name='SrcCidr'),
          srcPortRange?: [ int32 ](name='SrcPortRange'),
          trafficMatchRuleDescription?: string(name='TrafficMatchRuleDescription'),
          trafficMatchRuleId?: string(name='TrafficMatchRuleId'),
          trafficMatchRuleName?: string(name='TrafficMatchRuleName'),
          trafficMatchRuleStatus?: string(name='TrafficMatchRuleStatus'),
        }
      ](name='TrafficMatchRules'),
    }
  ](name='TrafficMarkingPolicies'),
}

model ListTrafficMarkingPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrafficMarkingPoliciesResponseBody(name='body'),
}

async function listTrafficMarkingPolicies(request: ListTrafficMarkingPoliciesRequest): ListTrafficMarkingPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrafficMarkingPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterAvailableResourceRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListTransitRouterAvailableResourceResponseBody = {
  masterZones?: [ string ](name='MasterZones'),
  requestId?: string(name='RequestId'),
  slaveZones?: [ string ](name='SlaveZones'),
}

model ListTransitRouterAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterAvailableResourceResponseBody(name='body'),
}

async function listTransitRouterAvailableResource(request: ListTransitRouterAvailableResourceRequest): ListTransitRouterAvailableResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterAvailableResource', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterPeerAttachmentsRequest {
  cenId?: string(name='CenId', position='Query'),
  maxResults?: int32(name='MaxResults', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterId?: string(name='TransitRouterId', position='Query'),
}

model ListTransitRouterPeerAttachmentsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouterAttachments?: [ 
    {
      autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled'),
      bandwidth?: int32(name='Bandwidth'),
      bandwidthType?: string(name='BandwidthType'),
      cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
      creationTime?: string(name='CreationTime'),
      geographicSpanId?: string(name='GeographicSpanId'),
      peerTransitRouterId?: string(name='PeerTransitRouterId'),
      peerTransitRouterOwnerId?: long(name='PeerTransitRouterOwnerId'),
      peerTransitRouterRegionId?: string(name='PeerTransitRouterRegionId'),
      regionId?: string(name='RegionId'),
      resourceType?: string(name='ResourceType'),
      status?: string(name='Status'),
      transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
      transitRouterAttachmentName?: string(name='TransitRouterAttachmentName'),
      transitRouterId?: string(name='TransitRouterId'),
    }
  ](name='TransitRouterAttachments'),
}

model ListTransitRouterPeerAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterPeerAttachmentsResponseBody(name='body'),
}

async function listTransitRouterPeerAttachments(request: ListTransitRouterPeerAttachmentsRequest): ListTransitRouterPeerAttachmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterPeerAttachments', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterRouteEntriesRequest {
  maxResults?: int32(name='MaxResults', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterRouteEntryDestinationCidrBlock?: string(name='TransitRouterRouteEntryDestinationCidrBlock', position='Query'),
  transitRouterRouteEntryIds?: [ string ](name='TransitRouterRouteEntryIds', position='Query'),
  transitRouterRouteEntryNames?: [ string ](name='TransitRouterRouteEntryNames', position='Query'),
  transitRouterRouteEntryStatus?: string(name='TransitRouterRouteEntryStatus', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', position='Query'),
}

model ListTransitRouterRouteEntriesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouterRouteEntries?: [ 
    {
      createTime?: string(name='CreateTime'),
      transitRouterRouteEntryDescription?: string(name='TransitRouterRouteEntryDescription'),
      transitRouterRouteEntryDestinationCidrBlock?: string(name='TransitRouterRouteEntryDestinationCidrBlock'),
      transitRouterRouteEntryId?: string(name='TransitRouterRouteEntryId'),
      transitRouterRouteEntryName?: string(name='TransitRouterRouteEntryName'),
      transitRouterRouteEntryNextHopId?: string(name='TransitRouterRouteEntryNextHopId'),
      transitRouterRouteEntryNextHopType?: string(name='TransitRouterRouteEntryNextHopType'),
      transitRouterRouteEntryStatus?: string(name='TransitRouterRouteEntryStatus'),
      transitRouterRouteEntryType?: string(name='TransitRouterRouteEntryType'),
    }
  ](name='TransitRouterRouteEntries'),
}

model ListTransitRouterRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterRouteEntriesResponseBody(name='body'),
}

async function listTransitRouterRouteEntries(request: ListTransitRouterRouteEntriesRequest): ListTransitRouterRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterRouteTableAssociationsRequest {
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', position='Query'),
}

model ListTransitRouterRouteTableAssociationsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouterAssociations?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      status?: string(name='Status'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
      transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
    }
  ](name='TransitRouterAssociations'),
}

model ListTransitRouterRouteTableAssociationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterRouteTableAssociationsResponseBody(name='body'),
}

async function listTransitRouterRouteTableAssociations(request: ListTransitRouterRouteTableAssociationsRequest): ListTransitRouterRouteTableAssociationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterRouteTableAssociations', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterRouteTablePropagationsRequest {
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', position='Query'),
}

model ListTransitRouterRouteTablePropagationsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouterPropagations?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      status?: string(name='Status'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
      transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
    }
  ](name='TransitRouterPropagations'),
}

model ListTransitRouterRouteTablePropagationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterRouteTablePropagationsResponseBody(name='body'),
}

async function listTransitRouterRouteTablePropagations(request: ListTransitRouterRouteTablePropagationsRequest): ListTransitRouterRouteTablePropagationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterRouteTablePropagations', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterRouteTablesRequest {
  maxResults?: int32(name='MaxResults', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterId: string(name='TransitRouterId', position='Query'),
  transitRouterRouteTableIds?: [ string ](name='TransitRouterRouteTableIds', position='Query'),
  transitRouterRouteTableNames?: [ string ](name='TransitRouterRouteTableNames', position='Query'),
  transitRouterRouteTableStatus?: string(name='TransitRouterRouteTableStatus', position='Query'),
  transitRouterRouteTableType?: string(name='TransitRouterRouteTableType', position='Query'),
}

model ListTransitRouterRouteTablesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouterRouteTables?: [ 
    {
      createTime?: string(name='CreateTime'),
      transitRouterRouteTableDescription?: string(name='TransitRouterRouteTableDescription'),
      transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
      transitRouterRouteTableName?: string(name='TransitRouterRouteTableName'),
      transitRouterRouteTableStatus?: string(name='TransitRouterRouteTableStatus'),
      transitRouterRouteTableType?: string(name='TransitRouterRouteTableType'),
    }
  ](name='TransitRouterRouteTables'),
}

model ListTransitRouterRouteTablesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterRouteTablesResponseBody(name='body'),
}

async function listTransitRouterRouteTables(request: ListTransitRouterRouteTablesRequest): ListTransitRouterRouteTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterRouteTables', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterVbrAttachmentsRequest {
  cenId?: string(name='CenId', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterId?: string(name='TransitRouterId', position='Query'),
}

model ListTransitRouterVbrAttachmentsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouterAttachments?: [ 
    {
      autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled'),
      creationTime?: string(name='CreationTime'),
      resourceType?: string(name='ResourceType'),
      status?: string(name='Status'),
      transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
      transitRouterAttachmentName?: string(name='TransitRouterAttachmentName'),
      transitRouterId?: string(name='TransitRouterId'),
      vbrId?: string(name='VbrId'),
      vbrOwnerId?: long(name='VbrOwnerId'),
      vbrRegionId?: string(name='VbrRegionId'),
    }
  ](name='TransitRouterAttachments'),
}

model ListTransitRouterVbrAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterVbrAttachmentsResponseBody(name='body'),
}

async function listTransitRouterVbrAttachments(request: ListTransitRouterVbrAttachmentsRequest): ListTransitRouterVbrAttachmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterVbrAttachments', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterVpcAttachmentsRequest {
  cenId?: string(name='CenId', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterId?: string(name='TransitRouterId', position='Query'),
}

model ListTransitRouterVpcAttachmentsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouterAttachments?: [ 
    {
      creationTime?: string(name='CreationTime'),
      resourceType?: string(name='ResourceType'),
      status?: string(name='Status'),
      transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
      transitRouterAttachmentName?: string(name='TransitRouterAttachmentName'),
      transitRouterId?: string(name='TransitRouterId'),
      vpcId?: string(name='VpcId'),
      vpcOwnerId?: long(name='VpcOwnerId'),
      vpcRegionId?: string(name='VpcRegionId'),
      zoneMappings?: [ 
        {
          networkInterfaceId?: string(name='NetworkInterfaceId'),
          vSwitchId?: string(name='VSwitchId'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='ZoneMappings'),
    }
  ](name='TransitRouterAttachments'),
}

model ListTransitRouterVpcAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterVpcAttachmentsResponseBody(name='body'),
}

async function listTransitRouterVpcAttachments(request: ListTransitRouterVpcAttachmentsRequest): ListTransitRouterVpcAttachmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterVpcAttachments', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRoutersRequest {
  cenId: string(name='CenId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterId?: string(name='TransitRouterId', position='Query'),
}

model ListTransitRoutersResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouters?: [ 
    {
      aliUid?: long(name='AliUid'),
      cenId?: string(name='CenId'),
      creationTime?: string(name='CreationTime'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      transitRouterDescription?: string(name='TransitRouterDescription'),
      transitRouterId?: string(name='TransitRouterId'),
      transitRouterName?: string(name='TransitRouterName'),
      type?: string(name='Type'),
    }
  ](name='TransitRouters'),
}

model ListTransitRoutersResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRoutersResponseBody(name='body'),
}

async function listTransitRouters(request: ListTransitRoutersRequest): ListTransitRoutersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouters', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCenAttributeRequest {
  cenId: string(name='CenId', position='Query'),
  description?: string(name='Description', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  protectionLevel?: string(name='ProtectionLevel', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCenAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCenAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenAttributeResponseBody(name='body'),
}

async function modifyCenAttribute(request: ModifyCenAttributeRequest): ModifyCenAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCenAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCenBandwidthPackageAttributeRequest {
  cenBandwidthPackageId: string(name='CenBandwidthPackageId', position='Query'),
  description?: string(name='Description', position='Query'),
  name?: string(name='Name', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCenBandwidthPackageAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCenBandwidthPackageAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenBandwidthPackageAttributeResponseBody(name='body'),
}

async function modifyCenBandwidthPackageAttribute(request: ModifyCenBandwidthPackageAttributeRequest): ModifyCenBandwidthPackageAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCenBandwidthPackageAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCenBandwidthPackageSpecRequest {
  bandwidth: int32(name='Bandwidth', position='Query'),
  cenBandwidthPackageId: string(name='CenBandwidthPackageId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCenBandwidthPackageSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCenBandwidthPackageSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenBandwidthPackageSpecResponseBody(name='body'),
}

async function modifyCenBandwidthPackageSpec(request: ModifyCenBandwidthPackageSpecRequest): ModifyCenBandwidthPackageSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCenBandwidthPackageSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCenRouteMapRequest {
  asPathMatchMode?: string(name='AsPathMatchMode', position='Query'),
  cenId: string(name='CenId', position='Query'),
  cenRegionId: string(name='CenRegionId', position='Query'),
  cidrMatchMode?: string(name='CidrMatchMode', position='Query'),
  communityMatchMode?: string(name='CommunityMatchMode', position='Query'),
  communityOperateMode?: string(name='CommunityOperateMode', position='Query'),
  description?: string(name='Description', position='Query'),
  destinationChildInstanceTypes?: [ string ](name='DestinationChildInstanceTypes', position='Query'),
  destinationCidrBlocks?: [ string ](name='DestinationCidrBlocks', position='Query'),
  destinationInstanceIds?: [ string ](name='DestinationInstanceIds', position='Query'),
  destinationInstanceIdsReverseMatch?: boolean(name='DestinationInstanceIdsReverseMatch', position='Query'),
  destinationRouteTableIds?: [ string ](name='DestinationRouteTableIds', position='Query'),
  mapResult: string(name='MapResult', position='Query'),
  matchAsns?: [ int32 ](name='MatchAsns', position='Query'),
  matchCommunitySet?: [ string ](name='MatchCommunitySet', position='Query'),
  nextPriority?: int32(name='NextPriority', minimum=1, maximum=1000, position='Query'),
  operateCommunitySet?: [ string ](name='OperateCommunitySet', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  preference?: int32(name='Preference', minimum=1, maximum=100, position='Query'),
  prependAsPath?: [ long ](name='PrependAsPath', position='Query'),
  priority: int32(name='Priority', minimum=1, maximum=1000, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeMapId: string(name='RouteMapId', position='Query'),
  routeTypes?: [ string ](name='RouteTypes', position='Query'),
  sourceChildInstanceTypes?: [ string ](name='SourceChildInstanceTypes', position='Query'),
  sourceInstanceIds?: [ string ](name='SourceInstanceIds', position='Query'),
  sourceInstanceIdsReverseMatch?: boolean(name='SourceInstanceIdsReverseMatch', position='Query'),
  sourceRegionIds?: [ string ](name='SourceRegionIds', position='Query'),
  sourceRouteTableIds?: [ string ](name='SourceRouteTableIds', position='Query'),
}

model ModifyCenRouteMapResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCenRouteMapResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenRouteMapResponseBody(name='body'),
}

async function modifyCenRouteMap(request: ModifyCenRouteMapRequest): ModifyCenRouteMapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCenRouteMap', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFlowLogAttributeRequest {
  cenId: string(name='CenId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  flowLogId: string(name='FlowLogId', position='Query'),
  flowLogName?: string(name='FlowLogName', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyFlowLogAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ModifyFlowLogAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFlowLogAttributeResponseBody(name='body'),
}

async function modifyFlowLogAttribute(request: ModifyFlowLogAttributeRequest): ModifyFlowLogAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFlowLogAttribute', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourceGroupRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: string(name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model OpenTransitRouterServiceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OpenTransitRouterServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenTransitRouterServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenTransitRouterServiceResponseBody(name='body'),
}

async function openTransitRouterService(request: OpenTransitRouterServiceRequest): OpenTransitRouterServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenTransitRouterService', 'POST', '/', 'json', false, 'json', request);
}

model PublishRouteEntriesRequest {
  cenId: string(name='CenId', position='Query'),
  childInstanceId: string(name='ChildInstanceId', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', position='Query'),
  childInstanceRouteTableId: string(name='ChildInstanceRouteTableId', position='Query'),
  childInstanceType: string(name='ChildInstanceType', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model PublishRouteEntriesResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: PublishRouteEntriesResponseBody(name='body'),
}

async function publishRouteEntries(request: PublishRouteEntriesRequest): PublishRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTraficMatchRuleFromTrafficMarkingPolicyRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMarkRuleIds?: [ string ](name='TrafficMarkRuleIds', position='Query'),
  trafficMarkingPolicyId: string(name='TrafficMarkingPolicyId', position='Query'),
}

model RemoveTraficMatchRuleFromTrafficMarkingPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveTraficMatchRuleFromTrafficMarkingPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTraficMatchRuleFromTrafficMarkingPolicyResponseBody(name='body'),
}

async function removeTraficMatchRuleFromTrafficMarkingPolicy(request: RemoveTraficMatchRuleFromTrafficMarkingPolicyRequest): RemoveTraficMatchRuleFromTrafficMarkingPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTraficMatchRuleFromTrafficMarkingPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ReplaceTransitRouterRouteTableAssociationRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', position='Query'),
}

model ReplaceTransitRouterRouteTableAssociationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReplaceTransitRouterRouteTableAssociationResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceTransitRouterRouteTableAssociationResponseBody(name='body'),
}

async function replaceTransitRouterRouteTableAssociation(request: ReplaceTransitRouterRouteTableAssociationRequest): ReplaceTransitRouterRouteTableAssociationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplaceTransitRouterRouteTableAssociation', 'POST', '/', 'json', false, 'json', request);
}

model ResolveAndRouteServiceInCenRequest {
  accessRegionIds: [ string ](name='AccessRegionIds', position='Query'),
  cenId: string(name='CenId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  description?: string(name='Description', position='Query'),
  host: string(name='Host', position='Query'),
  hostRegionId: string(name='HostRegionId', position='Query'),
  hostVpcId: string(name='HostVpcId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ResolveAndRouteServiceInCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResolveAndRouteServiceInCenResponse = {
  headers: map[string]string(name='headers'),
  body: ResolveAndRouteServiceInCenResponseBody(name='body'),
}

async function resolveAndRouteServiceInCen(request: ResolveAndRouteServiceInCenRequest): ResolveAndRouteServiceInCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResolveAndRouteServiceInCen', 'POST', '/', 'json', false, 'json', request);
}

model RevokeInstanceFromTransitRouterRequest {
  cenId: string(name='CenId', position='Query'),
  cenOwnerId: long(name='CenOwnerId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  instanceType: string(name='InstanceType', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RevokeInstanceFromTransitRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeInstanceFromTransitRouterResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeInstanceFromTransitRouterResponseBody(name='body'),
}

async function revokeInstanceFromTransitRouter(request: RevokeInstanceFromTransitRouterRequest): RevokeInstanceFromTransitRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeInstanceFromTransitRouter', 'POST', '/', 'json', false, 'json', request);
}

model RoutePrivateZoneInCenToVpcRequest {
  accessRegionId: string(name='AccessRegionId', position='Query'),
  cenId: string(name='CenId', position='Query'),
  hostRegionId: string(name='HostRegionId', position='Query'),
  hostVpcId: string(name='HostVpcId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RoutePrivateZoneInCenToVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model RoutePrivateZoneInCenToVpcResponse = {
  headers: map[string]string(name='headers'),
  body: RoutePrivateZoneInCenToVpcResponseBody(name='body'),
}

async function routePrivateZoneInCenToVpc(request: RoutePrivateZoneInCenToVpcRequest): RoutePrivateZoneInCenToVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RoutePrivateZoneInCenToVpc', 'POST', '/', 'json', false, 'json', request);
}

model SetCenInterRegionBandwidthLimitRequest {
  bandwidthLimit: long(name='BandwidthLimit', position='Query'),
  cenId: string(name='CenId', position='Query'),
  localRegionId: string(name='LocalRegionId', position='Query'),
  oppositeRegionId: string(name='OppositeRegionId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model SetCenInterRegionBandwidthLimitResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCenInterRegionBandwidthLimitResponse = {
  headers: map[string]string(name='headers'),
  body: SetCenInterRegionBandwidthLimitResponseBody(name='body'),
}

async function setCenInterRegionBandwidthLimit(request: SetCenInterRegionBandwidthLimitRequest): SetCenInterRegionBandwidthLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCenInterRegionBandwidthLimit', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model TempUpgradeCenBandwidthPackageSpecRequest {
  bandwidth: int32(name='Bandwidth', position='Query'),
  cenBandwidthPackageId: string(name='CenBandwidthPackageId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model TempUpgradeCenBandwidthPackageSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model TempUpgradeCenBandwidthPackageSpecResponse = {
  headers: map[string]string(name='headers'),
  body: TempUpgradeCenBandwidthPackageSpecResponseBody(name='body'),
}

async function tempUpgradeCenBandwidthPackageSpec(request: TempUpgradeCenBandwidthPackageSpecRequest): TempUpgradeCenBandwidthPackageSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TempUpgradeCenBandwidthPackageSpec', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateCenBandwidthPackageRequest {
  cenBandwidthPackageId: string(name='CenBandwidthPackageId', position='Query'),
  cenId: string(name='CenId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnassociateCenBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnassociateCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateCenBandwidthPackageResponseBody(name='body'),
}

async function unassociateCenBandwidthPackage(request: UnassociateCenBandwidthPackageRequest): UnassociateCenBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateCenBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model UnroutePrivateZoneInCenToVpcRequest {
  accessRegionId: string(name='AccessRegionId', position='Query'),
  cenId: string(name='CenId', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnroutePrivateZoneInCenToVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnroutePrivateZoneInCenToVpcResponse = {
  headers: map[string]string(name='headers'),
  body: UnroutePrivateZoneInCenToVpcResponseBody(name='body'),
}

async function unroutePrivateZoneInCenToVpc(request: UnroutePrivateZoneInCenToVpcRequest): UnroutePrivateZoneInCenToVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnroutePrivateZoneInCenToVpc', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCenInterRegionTrafficQosPolicyAttributeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficQosPolicyDescription?: string(name='TrafficQosPolicyDescription', position='Query'),
  trafficQosPolicyId: string(name='TrafficQosPolicyId', position='Query'),
  trafficQosPolicyName?: string(name='TrafficQosPolicyName', position='Query'),
}

model UpdateCenInterRegionTrafficQosPolicyAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCenInterRegionTrafficQosPolicyAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCenInterRegionTrafficQosPolicyAttributeResponseBody(name='body'),
}

async function updateCenInterRegionTrafficQosPolicyAttribute(request: UpdateCenInterRegionTrafficQosPolicyAttributeRequest): UpdateCenInterRegionTrafficQosPolicyAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCenInterRegionTrafficQosPolicyAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCenInterRegionTrafficQosQueueAttributeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  dscps?: [ int32 ](name='Dscps', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosQueueDescription?: string(name='QosQueueDescription', position='Query'),
  qosQueueId: string(name='QosQueueId', position='Query'),
  qosQueueName?: string(name='QosQueueName', position='Query'),
  remainBandwidthPercent?: string(name='RemainBandwidthPercent', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateCenInterRegionTrafficQosQueueAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCenInterRegionTrafficQosQueueAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCenInterRegionTrafficQosQueueAttributeResponseBody(name='body'),
}

async function updateCenInterRegionTrafficQosQueueAttribute(request: UpdateCenInterRegionTrafficQosQueueAttributeRequest): UpdateCenInterRegionTrafficQosQueueAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCenInterRegionTrafficQosQueueAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTrafficMarkingPolicyAttributeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMarkingPolicyDescription?: string(name='TrafficMarkingPolicyDescription', position='Query'),
  trafficMarkingPolicyId: string(name='TrafficMarkingPolicyId', position='Query'),
  trafficMarkingPolicyName?: string(name='TrafficMarkingPolicyName', position='Query'),
}

model UpdateTrafficMarkingPolicyAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTrafficMarkingPolicyAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTrafficMarkingPolicyAttributeResponseBody(name='body'),
}

async function updateTrafficMarkingPolicyAttribute(request: UpdateTrafficMarkingPolicyAttributeRequest): UpdateTrafficMarkingPolicyAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTrafficMarkingPolicyAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTransitRouterRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterDescription?: string(name='TransitRouterDescription', position='Query'),
  transitRouterId: string(name='TransitRouterId', position='Query'),
  transitRouterName?: string(name='TransitRouterName', position='Query'),
}

model UpdateTransitRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTransitRouterResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterResponseBody(name='body'),
}

async function updateTransitRouter(request: UpdateTransitRouterRequest): UpdateTransitRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTransitRouter', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTransitRouterPeerAttachmentAttributeRequest {
  autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled', position='Query'),
  bandwidth?: int32(name='Bandwidth', minimum=0, maximum=100000000, position='Query'),
  bandwidthType?: string(name='BandwidthType', position='Query'),
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', position='Query'),
}

model UpdateTransitRouterPeerAttachmentAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTransitRouterPeerAttachmentAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterPeerAttachmentAttributeResponseBody(name='body'),
}

async function updateTransitRouterPeerAttachmentAttribute(request: UpdateTransitRouterPeerAttachmentAttributeRequest): UpdateTransitRouterPeerAttachmentAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTransitRouterPeerAttachmentAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTransitRouterRouteEntryRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterRouteEntryDescription?: string(name='TransitRouterRouteEntryDescription', position='Query'),
  transitRouterRouteEntryId: string(name='TransitRouterRouteEntryId', position='Query'),
  transitRouterRouteEntryName?: string(name='TransitRouterRouteEntryName', position='Query'),
}

model UpdateTransitRouterRouteEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTransitRouterRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterRouteEntryResponseBody(name='body'),
}

async function updateTransitRouterRouteEntry(request: UpdateTransitRouterRouteEntryRequest): UpdateTransitRouterRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTransitRouterRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTransitRouterRouteTableRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterRouteTableDescription?: string(name='TransitRouterRouteTableDescription', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', position='Query'),
  transitRouterRouteTableName?: string(name='TransitRouterRouteTableName', position='Query'),
}

model UpdateTransitRouterRouteTableResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTransitRouterRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterRouteTableResponseBody(name='body'),
}

async function updateTransitRouterRouteTable(request: UpdateTransitRouterRouteTableRequest): UpdateTransitRouterRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTransitRouterRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTransitRouterVbrAttachmentAttributeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', position='Query'),
}

model UpdateTransitRouterVbrAttachmentAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTransitRouterVbrAttachmentAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterVbrAttachmentAttributeResponseBody(name='body'),
}

async function updateTransitRouterVbrAttachmentAttribute(request: UpdateTransitRouterVbrAttachmentAttributeRequest): UpdateTransitRouterVbrAttachmentAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTransitRouterVbrAttachmentAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTransitRouterVpcAttachmentAttributeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  dryRun?: boolean(name='DryRun', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', position='Query'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', position='Query'),
}

model UpdateTransitRouterVpcAttachmentAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTransitRouterVpcAttachmentAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterVpcAttachmentAttributeResponseBody(name='body'),
}

async function updateTransitRouterVpcAttachmentAttribute(request: UpdateTransitRouterVpcAttachmentAttributeRequest): UpdateTransitRouterVpcAttachmentAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTransitRouterVpcAttachmentAttribute', 'POST', '/', 'json', false, 'json', request);
}

model WithdrawPublishedRouteEntriesRequest {
  cenId: string(name='CenId', position='Query'),
  childInstanceId: string(name='ChildInstanceId', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', position='Query'),
  childInstanceRouteTableId: string(name='ChildInstanceRouteTableId', position='Query'),
  childInstanceType: string(name='ChildInstanceType', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model WithdrawPublishedRouteEntriesResponseBody = {
  requestId?: string(name='RequestId'),
}

model WithdrawPublishedRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: WithdrawPublishedRouteEntriesResponseBody(name='body'),
}

async function withdrawPublishedRouteEntries(request: WithdrawPublishedRouteEntriesRequest): WithdrawPublishedRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'WithdrawPublishedRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

