/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Cbn';
  @version = '2017-09-12';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ActiveFlowLogRequest {
  cenId: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId for each API request may be different.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  flowLogId: string(name='FlowLogId', description='The ID of the flow log.', example='flowlog-m5evbtbpt****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the flow log is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ActiveFlowLogResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', description='Indicates whether the call is successful.

*   **true**: yes
*   **false**: no', example='true'),
}

model ActiveFlowLogResponse = {
  headers: map[string]string(name='headers'),
  body: ActiveFlowLogResponseBody(name='body'),
}

/**
  * *   After you create a flow log, it is enabled by default. You can call this operation to enable a disabled flow log.
  * *   The `ActiveFlowLog` operation is an asynchronous operation. After you send a request, the system returns a**request ID** and runs the task in the background. You can call the `DescribeFlowlogs` operation to query the status of a flow log.
  *     *   If a flow log is in the **Modifying** state, the flow log is being enabled. In this case, you can query the flow log but cannot perform other operations.
  *     *   If a flow log is in the **Active** state, the flow log is enabled.
  *
 */
async function activeFlowLog(request: ActiveFlowLogRequest): ActiveFlowLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActiveFlowLog', 'POST', '/', 'json', false, 'json', request);
}

model AddTrafficMatchRuleToTrafficMarkingPolicyRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request format, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMarkingPolicyId: string(name='TrafficMarkingPolicyId', description='The ID of the traffic marking policy.', example='tm-u9nxup5kww5po8****', position='Query'),
  trafficMatchRules?: [ 
    {
      dstCidr?: string(name='DstCidr', description='The destination CIDR block that is used to match packets.

The traffic classification rule matches the packets whose destination IP addresses fall within the specified destination CIDR block. If you do not set this parameter, packets are considered a match regardless of the DSCP value.', example='10.10.10.0/24'),
      dstPortRange?: [ int32 ](name='DstPortRange', description='The destination port range that is used to match packets. Valid values: **-1** and **1** to **65535**.

The traffic classification rule matches the packets whose destination ports fall within the destination port range. If you do not set this parameter, packets are considered a match regardless of the DSCP value.

You can specify at most two ports. Take note of the following rules:

*   If you enter only one port number such as 1, the system matches the packets whose destination port is port 1.
*   If you enter two port numbers such as 1 and 200, the system matches the packets whose destination ports fall between 1 and 200.
*   If you enter two port numbers and one of them is -1, the other port number must also be -1. In this case, packets are considered a match regardless of the destination port.'),
      matchDscp?: int32(name='MatchDscp', description='The differentiated services code point (DSCP) value that is used to match packets. Valid values: **0** to **63**.

The traffic classification rule matches the packets that contain the specified DSCP value. If you do not set this parameter, packets are considered a match regardless of the DSCP value.

>  The DSCP value that you specify for this parameter is the DSCP value that packets carry before they are transmitted over the inter-region connection.', example='5'),
      protocol?: string(name='Protocol', description='The protocol that is used to match packets.

Valid values: **HTTP**, **HTTPS**, **TCP**, **UDP**, **SSH**, and **Telnet**. For more information, log on to the [Cloud Enterprise Network (CEN) console](https://cen.console.aliyun.com/cen/list).', example='HTTP'),
      srcCidr?: string(name='SrcCidr', description='The source CIDR block that is used to match packets.

The traffic classification rule matches the packets whose source IP addresses fall within the specified source CIDR block. If you do not set this parameter, packets are considered a match regardless of the source IP address.', example='192.168.10.0/24'),
      srcPortRange?: [ int32 ](name='SrcPortRange', description='The source port range that is used to match packets. Valid values: **-1** and **1** to **65535**.

The traffic classification rule matches the packets whose source ports fall within the source port range. If you do not set this parameter, packets are considered a match regardless of the source port.

You can specify at most two ports. Take note of the following rules:

*   If you enter only one port number such as 1, the system matches the packets whose source port is 1.
*   If you enter two port numbers such as 1 and 200, the system matches the packets whose source ports fall between 1 and 200.
*   If you enter two port numbers and one of them is -1, the other port number must also be -1. In this case, packets are considered a match regardless of the source port.'),
      trafficMatchRuleDescription?: string(name='TrafficMatchRuleDescription', description='The description of the traffic classification rule.

The description must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The description must start with a letter.', example='desctest'),
      trafficMatchRuleName?: string(name='TrafficMatchRuleName', description='The name of the traffic classification rule.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='nametest'),
    }
  ](name='TrafficMatchRules', description='The traffic classification rules.

You can specify at most 50 traffic classification rules.', position='Query'),
}

model AddTrafficMatchRuleToTrafficMarkingPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0876E54E-3E36-5C31-89F0-9EE8A9266F9A'),
}

model AddTrafficMatchRuleToTrafficMarkingPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: AddTrafficMatchRuleToTrafficMarkingPolicyResponseBody(name='body'),
}

/**
  * **AddTrafficMatchRuleToTrafficMarkingPolicy** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the **ListTrafficMarkingPolicies** operation to query the status of a traffic classification rule.
  * *   If a traffic classification rule is in the **Creating** state, the traffic classification rule is being created. In this case, you can query the traffic classification rule but cannot perform other operations.
  * *   If a traffic classification rule is in the **Active** state, the traffic classification rule is added to the traffic marking policy.
  *
 */
async function addTrafficMatchRuleToTrafficMarkingPolicy(request: AddTrafficMatchRuleToTrafficMarkingPolicyRequest): AddTrafficMatchRuleToTrafficMarkingPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTrafficMatchRuleToTrafficMarkingPolicy', 'POST', '/', 'json', false, 'json', request);
}

model AddTraficMatchRuleToTrafficMarkingPolicyRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId may be different for each request.', example='123e4567-e89b-12d3-a456-426****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMarkingPolicyId: string(name='TrafficMarkingPolicyId', description='The ID of the traffic marking policy.', example='tm-u9nxup5kww5po8****', position='Query'),
  trafficMatchRules?: [ 
    {
      dstCidr?: string(name='DstCidr', description='The destination CIDR block that is used to match packets.

The traffic classification rule matches the packets whose destination IP addresses fall within the specified destination CIDR block. If you do not set this parameter, packets are considered a match regardless of the DSCP value.

You can specify at most 50 traffic classification rules.', example='10.10.10.0/24'),
      dstPortRange?: [ int32 ](name='DstPortRange', description='The destination port range that is used to match packets. Valid values: **-1** and **1** to **65535**.

The traffic classification rule matches the packets whose destination ports fall within the destination port range. If you do not set this parameter, packets are considered a match regardless of the DSCP value.

You can specify at most two ports. Take note of the following rules:

*   If you enter only one port number such as 1, the system matches the packets whose destination port is port 1.
*   If you enter two port numbers such as 1 and 200, the system matches the packets whose destination ports fall between 1 and 200.
*   If you enter two port numbers and one of them is -1, the other port number must also be -1. In this case, packets are considered a match regardless of the destination port.

You can specify at most 50 traffic classification rules.'),
      matchDscp?: int32(name='MatchDscp', description='The differentiated services code point (DSCP) value that is used to match packets. Valid values: **0** to **63**.

The traffic classification rule matches the packets that contain the specified DSCP value. If you do not set this parameter, packets are considered a match regardless of the DSCP value.

>  The DSCP value that you specify for this parameter is the DSCP value that packets carry before they are transmitted over the inter-region connection.

You can specify at most 50 traffic classification rules.', example='5'),
      protocol?: string(name='Protocol', description='The protocol that is used to match packets.

Valid values: **HTTP**, **HTTPS**, **TCP**, **UDP**, **SSH**, and **Telnet**. For more information, log on to the [Cloud Enterprise Network (CEN) console](https://cen.console.aliyun.com/cen/list).

You can specify at most 50 traffic classification rules.', example='HTTP'),
      srcCidr?: string(name='SrcCidr', description='The source CIDR block that is used to match packets.

The traffic classification rule matches the packets whose source IP addresses fall within the specified source CIDR block. If you do not set this parameter, packets are considered a match regardless of the source IP address.

You can specify at most 50 traffic classification rules.', example='192.168.10.0/24'),
      srcPortRange?: [ int32 ](name='SrcPortRange', description='The source port range that is used to match packets. Valid values: **-1** and **1** to **65535**.

The traffic classification rule matches the packets whose source ports fall within the source port range. If you do not set this parameter, packets are considered a match regardless of the source port.

You can specify at most two ports. Take note of the following rules:

*   If you enter only one port number such as 1, the system matches the packets whose source port is 1.
*   If you enter two port numbers such as 1 and 200, the system matches the packets whose source ports fall between 1 and 200.
*   If you enter two port numbers and one of them is -1, the other port number must also be -1. In this case, packets are considered a match regardless of the source port.

You can specify at most 50 traffic classification rules.'),
      trafficMatchRuleDescription?: string(name='TrafficMatchRuleDescription', description='The description of the traffic classification rule.

The description must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The description must start with a letter.

You can specify at most 50 traffic classification rules.', example='desctest'),
      trafficMatchRuleName?: string(name='TrafficMatchRuleName', description='The name of the traffic classification rule.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.

You can specify at most 50 traffic classification rules.', example='nametest'),
    }
  ](name='TrafficMatchRules', description='The information about the traffic classification rule.

You can specify at most 50 traffic classification rules.', position='Query'),
}

model AddTraficMatchRuleToTrafficMarkingPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0876E54E-3E36-5C31-89F0-9EE8A9266F9A'),
}

model AddTraficMatchRuleToTrafficMarkingPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: AddTraficMatchRuleToTrafficMarkingPolicyResponseBody(name='body'),
}

/**
  * @deprecated
  * # Usage notes
  * The **AddTraficMatchRuleToTrafficMarkingPolicy** operation is deprecated and will be discontinued soon. If you need to add a traffic classification rule to a traffic marking policy, call the [AddTrafficMatchRuleToTrafficMarkingPolicy](~~427602~~) operation.
  *
 */
// Deprecated
async function addTraficMatchRuleToTrafficMarkingPolicy(request: AddTraficMatchRuleToTrafficMarkingPolicyRequest): AddTraficMatchRuleToTrafficMarkingPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddTraficMatchRuleToTrafficMarkingPolicy', 'POST', '/', 'json', false, 'json', request);
}

model AssociateCenBandwidthPackageRequest {
  cenBandwidthPackageId: string(name='CenBandwidthPackageId', description='The ID of the bandwidth plan.', example='cenbwp-4c2zaavbvh5fx****', position='Query'),
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AssociateCenBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C2EE7A8-74D4-4081-8236-CEBDE3BBCF50'),
}

model AssociateCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateCenBandwidthPackageResponseBody(name='body'),
}

/**
  * You can associate multiple bandwidth plans with a CEN instance. However, the pair of areas connected by each bandwidth plan must be unique.
  * For example, if a CEN instance is associated with a bandwidth plan that connects networks in the Chinese mainland, you cannot associate another bandwidth plan that also connects networks in the Chinese mainland with the CEN instance. However, you can associate a bandwidth plan that connects the Chinese mainland to North America with the CEN instance.
  *
 */
async function associateCenBandwidthPackage(request: AssociateCenBandwidthPackageRequest): AssociateCenBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateCenBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model AssociateTransitRouterAttachmentWithRouteTableRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the value of **RequestId**as the value of **ClientToken**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **false** (default): performs a dry run. If the request passes the dry run, the associated forwarding correlation is created.
*   **true**: performs a dry run and sends the request. If you use this value, the system checks whether the required parameters are set, and whether the request syntax is valid. If the request fails the dry run, an error message is returned. If the request passes the dry run, the system returns the ID of the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-nls9fzkfat8934****', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-bp1dudbh2d5na6b50****', position='Query'),
}

model AssociateTransitRouterAttachmentWithRouteTableResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model AssociateTransitRouterAttachmentWithRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateTransitRouterAttachmentWithRouteTableResponseBody(name='body'),
}

/**
  * After you create a network instance connection on a transit router, you can configure an associated forwarding correlation to associate the network instance connection with a route table. Then, the network instance connection can forward network traffic based on the associated route table. Before you begin, we recommend that you read and understand the following rules:
  * *   Only Enterprise Edition transit routers support associated forwarding correlations. For more information about the regions and zones that support Enterprise Edition transit routers, see [Transit routers](~~181681~~).
  * *   **AssociateTransitRouterAttachmentWithRouteTable** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call **ListTransitRouterRouteTableAssociations** to query the status of an associated forwarding correlation.
  *     *   If an associated forwarding correlation is in the **Associating** state, the associated forwarding correlation is being created. You can query the associated forwarding correlation but cannot perform other operations.
  *     *   If an associated forwarding correlation is in the **Active** state, the associated forwarding correlation is created.
  *
 */
async function associateTransitRouterAttachmentWithRouteTable(request: AssociateTransitRouterAttachmentWithRouteTableRequest): AssociateTransitRouterAttachmentWithRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateTransitRouterAttachmentWithRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model AssociateTransitRouterMulticastDomainRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the API request. Valid values:

*   **true**: prechecks the request but does not associate the vSwitch with the multicast domain. The system checks the required parameters, the request format, and the service limits. If the request fails the check, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. The vSwitch is associated with the multicast domain after the request passes the precheck.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the VPC connection.', example='tr-attach-g3kz2k3u76amsk****', position='Query'),
  transitRouterMulticastDomainId: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast domain.', example='tr-mcast-domain-91wpg6wbhchjeq****', position='Query'),
  vSwitchIds?: [ string ](name='VSwitchIds', description='The vSwitch IDs.

You can specify at most five vSwitch IDs in each call.', position='Query'),
}

model AssociateTransitRouterMulticastDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F88AC12C-943B-50E9-A344-4F8820BB07A7'),
}

model AssociateTransitRouterMulticastDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateTransitRouterMulticastDomainResponseBody(name='body'),
}

/**
  * *   A vSwitch can be associated with only one multicast domain. Make sure that the vSwitch is not associated with other multicast domains. For more information about how to disassociate a vSwitch from a multicast domain, see [DisassociateTransitRouterMulticastDomain](~~429774~~).
  * *   **AssociateTransitRouterMulticastDomain** is an asynchronous operation. After you send a request, a **request ID** is returned but the operation is still being performed in the system background. You can call the **ListTransitRouterMulticastDomainAssociations** operation to query the association status between a vSwitch and a multicast domain.
  *     *   **Associating**: The vSwitch is being associated with the multicast domain. In this case, you can query the vSwitch but cannot perform other operations.
  *     *   **Associated**: The vSwitch is associated with the multicast domain.
  *
 */
async function associateTransitRouterMulticastDomain(request: AssociateTransitRouterMulticastDomainRequest): AssociateTransitRouterMulticastDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AssociateTransitRouterMulticastDomain', 'POST', '/', 'json', false, 'json', request);
}

model AttachCenChildInstanceRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  childInstanceId: string(name='ChildInstanceId', description='The ID of the network instance that you want to attach to the CEN instance.', example='vpc-bp18sth14qii3pnvx****', position='Query'),
  childInstanceOwnerId?: long(name='ChildInstanceOwnerId', description='The ID of the Alibaba Cloud account to which the network instance belongs.

> If the network instance and the CEN instance belong to different Alibaba Cloud accounts, this parameter is required.', example='1688000000000000', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  childInstanceType: string(name='ChildInstanceType', description='The type of the network instance. Valid values:

*   **VPC**: virtual private cloud (VPC)
*   **VBR**: virtual border router (VBR)
*   **CCN**: CCN instance', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AttachCenChildInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A278B8A6-A5B8-4FDE-9F70-95F0F6A1D68A'),
}

model AttachCenChildInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: AttachCenChildInstanceResponseBody(name='body'),
}

/**
  * CEN allows you to attach a network instance that belongs to another Alibaba Cloud account to your CEN instance. Before you attach the network instance, CEN must acquire permissions to access the network instance that belongs to another Alibaba Cloud account.
  * *   For more information about how to grant CEN permissions on virtual private clouds (VPCs) that belong to another Alibaba Cloud account, see [GrantInstanceToCen](~~126224~~).
  * *   For more information about how to grant CEN permissions on Cloud Connect Network (CCN) instances that belong to another Alibaba Cloud account, see [GrantInstanceToCbn](~~126141~~).
  * *   By default, you cannot grant permissions on virtual border routers (VBRs) that belong to another Alibaba Cloud account to a CEN instance. If you need to use this feature, contact your account manager.
  *
 */
async function attachCenChildInstance(request: AttachCenChildInstanceRequest): AttachCenChildInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AttachCenChildInstance', 'POST', '/', 'json', false, 'json', request);
}

model CheckTransitRouterServiceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a token, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CheckTransitRouterServiceResponseBody = {
  enabled?: string(name='Enabled', description='Indicates whether the transit router feature is activated.

*   **true**: activated
*   If this value is not returned, the system prompts that the current account does not have the transit router feature activated.', example='true'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5D93C8B9-C354-5C3E-BEFB-BA8A2C314D68'),
}

model CheckTransitRouterServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CheckTransitRouterServiceResponseBody(name='body'),
}

async function checkTransitRouterService(request: CheckTransitRouterServiceRequest): CheckTransitRouterServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckTransitRouterService', 'POST', '/', 'json', false, 'json', request);
}

model CreateCenRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  description?: string(name='Description', description='The description of the CEN instance.

The description must be 2 to 256 characters in length. It must start with a letter and cannot start with `http://` or `https://`.', example='testdesc', position='Query'),
  name?: string(name='Name', description='The name of the CEN instance.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter and cannot start with `http://` or `https://`.', example='testname', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  protectionLevel?: string(name='ProtectionLevel', description='The level of CIDR block overlapping.

Set the value to **REDUCED** (default). This value specifies that CIDR blocks can overlap but cannot be the same.', example='REDUCED', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag keys of the resources.

The tag keys cannot be an empty string. The tag keys can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='tagtest'),
      value?: string(name='Value', description='The tag values of the resources.

The tag values can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key has a unique tag value. You can specify at most 20 tag values in each call.', example='tagtest'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model CreateCenResponseBody = {
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-dc4vwznpwbobrl****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C2EE7A8-74D4-4081-8236-CEBDE3BBCF50'),
}

model CreateCenResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenResponseBody(name='body'),
}

/**
  * **CreateCen** is an asynchronous operation. After you send a request, the system returns the CEN instance ID but the operation is still being performed in the system background. You can call **DescribeCens** to query the status of a CEN instance.
  * * If a CEN instance is in the **Creating** state, the CEN instance is being created. You can query the CEN instance but cannot perform other operations.
  * * If a CEN instance is in the **Active** state, the CEN instance is created.
  *
 */
async function createCen(request: CreateCenRequest): CreateCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCen', 'POST', '/', 'json', false, 'json', request);
}

model CreateCenBandwidthPackageRequest {
  autoPay?: boolean(name='AutoPay', description='Specifies whether to automatically complete the payment of the bandwidth plan. Valid values:

*   **true**: yes
*   **false** (default): no

If you set the parameter to false, go to Billing Management to complete the payment after you call this operation. The instance is created only after you complete the payment.', example='false', position='Query'),
  autoRenew?: boolean(name='AutoRenew', example='false', position='Query'),
  autoRenewDuration?: int32(name='AutoRenewDuration', example='1', position='Query'),
  bandwidth: int32(name='Bandwidth', description='The maximum bandwidth value of the bandwidth plan. Unit: Mbit/s. Valid values: **2** to **10000**.', example='2', position='Query'),
  bandwidthPackageChargeType?: string(name='BandwidthPackageChargeType', description='The billing method of the bandwidth plan. Valid value: **PREPAY**, which indicates that the billing method is pay-as-you-go.', example='PREPAY', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate a token, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  description?: string(name='Description', description='The description of the bandwidth plan.', example='namedesc', position='Query'),
  geographicRegionAId: string(name='GeographicRegionAId', description='The area where the network instance is deployed. Valid values:

*   **China**: Chinese mainland
*   **North-America**: North America
*   **Asia-Pacific**: Asia Pacific
*   **Europe**: Europe
*   **Australia**: Australia', example='China', position='Query'),
  geographicRegionBId: string(name='GeographicRegionBId', description='The area where the other network instance is deployed. Valid values: Valid values:

*   **China**: Chinese mainland
*   **North-America**: North America
*   **Asia-Pacific**: Asia Pacific
*   **Europe**: Europe
*   **Australia**: Australia', example='China', position='Query'),
  name?: string(name='Name', description='The name of the bandwidth plan.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter and cannot start with `http://` or `https://`.', example='nametest', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', description='The subscription duration of the bandwidth plan. Default value: 1.

*   If **PricingCycle** is set to **Month**, set **Period** to a value from **1** to **3** or **6**.
*   If **PricingCycle** is set to **Year**, set **Period** to a value from **1** to **3**.

>  This parameter is required when **BandwidthPackageChargeType** is set to **PREPAY**.', example='1', position='Query'),
  pricingCycle?: string(name='PricingCycle', description='The billing cycle of the bandwidth plan. Valid values:

*   **Month** (default): billed on a monthly basis.
*   **Year**: billed on an annual basis.', example='Month', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag keys of the resources.

The tag keys cannot be an empty string. The tag keys can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='tagtest'),
      value?: string(name='Value', description='The tag values of the resources.

The tag values can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key has a unique tag value. You can specify at most 20 tag values in each call.', example='tagtest'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model CreateCenBandwidthPackageResponseBody = {
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId', description='The ID of the bandwidth plan.', example='cenbwp-4c2zaavbvh5fx****'),
  cenBandwidthPackageOrderId?: string(name='CenBandwidthPackageOrderId', description='The ID of the order for the bandwidth plan.', example='20156420004****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E4B345CD-2CBA-4881-AF6D-E5D9BAE1CA7B'),
}

model CreateCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenBandwidthPackageResponseBody(name='body'),
}

/**
  * ## Usage notes
  * *   You must specify the areas to be connected when you create a bandwidth plan. An area contains one or more Alibaba Cloud regions. When you select areas for a bandwidth plan, make sure that the areas contain the regions that you want to connect. For more information about the supported areas and regions, see [Purchase a bandwidth plan](~~181560~~).
  * *   For more information about the billing rules, see [Billing](~~189836~~).
  * *   **CreateCenBandwidthPackage** is an asynchronous operation. After you send a request, the system returns the bandwidth plan ID but the operation is still being performed in the system background. You can call **DescribeCenBandwidthPackages** to query the status of a bandwidth plan. If a bandwidth plan is in the **Idle** or **InUse** state, the bandwidth plan is created.
  *
 */
async function createCenBandwidthPackage(request: CreateCenBandwidthPackageRequest): CreateCenBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCenBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model CreateCenChildInstanceRouteEntryToAttachmentRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='vpc-bp1n6cbxcszp55vxo****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', description='The destination CIDR block of the route.', example='10.0.0.0/24', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request but not perform the operation. The system checks the permissions and the status of the specified instances. Valid values:

*   **false**: performs a precheck. The route is added to the network instance after the request passes the precheck. This is the default value.
*   **true**: performs a precheck. The route is not added to the network instance. If you use this value, the system checks the required parameters and the request syntax. If the request fails to pass the precheck, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.

>  This parameter is not in use.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', description='The ID of the route table configured on the network instance.', example='vrt-bp1msipdczo9lejup****', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-r1qhupkc19iadz****', position='Query'),
}

model CreateCenChildInstanceRouteEntryToAttachmentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A95A100B-3F3A-56F4-A5DE-19DB7E994807'),
}

model CreateCenChildInstanceRouteEntryToAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenChildInstanceRouteEntryToAttachmentResponseBody(name='body'),
}

/**
  * *   You can add routes only to virtual private clouds (VPCs) or virtual border routers (VBRs) that are connected to an Enterprise Edition transit router.
  * *   By default, the next hop of the routes is the **transit router connection**, which is the connection between the VBR and the Enterprise Edition transit router. You cannot modify the next hop.
  * *   **CreateCenChildInstanceRouteEntryToAttachment** is an asynchronous operation. After you send a request, a **request ID** is returned but the operation is still being performed in the system background. You can call the **DescribeRouteEntryList** operation to query the status of a route.
  *     *   If a route is in the **Pending** state, the route is being created. In this case, you can query the route but cannot perform other operations.
  *     *   If a route is in the **Available** state, the route is created.
  *
 */
async function createCenChildInstanceRouteEntryToAttachment(request: CreateCenChildInstanceRouteEntryToAttachmentRequest): CreateCenChildInstanceRouteEntryToAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCenChildInstanceRouteEntryToAttachment', 'POST', '/', 'json', false, 'json', request);
}

model CreateCenChildInstanceRouteEntryToCenRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7febra5nqj7jjh****', position='Query'),
  childInstanceAliUid?: long(name='ChildInstanceAliUid', description='The ID of the Alibaba Cloud account to which the network instance belongs.

> If the network instance belongs to another Alibaba Cloud account, this parameter is required.', example='1787100000000000', position='Query'),
  childInstanceId: string(name='ChildInstanceId', description='The ID of the network instance.', example='vpc-k1alm2jbuwibhxtx2****', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='ap-southeast-5', position='Query'),
  childInstanceType: string(name='ChildInstanceType', description='The type of the network instance. Valid values:

*   **VPC**: a virtual private cloud (VPC)
*   **VBR**: a virtual border router (VBR)', example='VPC', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', description='The destination CIDR block of the route.

Specify the value of this parameter in CIDR notation. Example: 192.168.10.0/24.', example='192.168.22.0/24', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', description='The ID of the route table configured on the network instance.', example='vtb-k1aa8ulqs39f86op8****', position='Query'),
}

model CreateCenChildInstanceRouteEntryToCenResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='437ED236-BE47-5370-8695-15C58C7A8014'),
}

model CreateCenChildInstanceRouteEntryToCenResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenChildInstanceRouteEntryToCenResponseBody(name='body'),
}

/**
  * ## Limits
  * *   By default, the CreateCenChildInstanceRouteEntryToCen operation is unavailable. To call this operation,[submit a ticket](https://workorder-intl.console.aliyun.com/#/ticket/createIndex).
  * *   You cannot add a route entry to an Enterprise Edition transit router by calling the CreateCenChildInstanceRouteEntryToCen operation.
  * *   By default, the next hop of the route entry is the regional gateway of the Cloud Enterprise Network (CEN) instance. You cannot modify the next hop.
  *
 */
async function createCenChildInstanceRouteEntryToCen(request: CreateCenChildInstanceRouteEntryToCenRequest): CreateCenChildInstanceRouteEntryToCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCenChildInstanceRouteEntryToCen', 'POST', '/', 'json', false, 'json', request);
}

model CreateCenInterRegionTrafficQosPolicyRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='123e4567-e89b-12d3-a456-426655****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the API request. Valid values:

*   **true**: prechecks the request but does not create the QoS policy. The system checks the required parameters, the request format, and the service limits. If the request fails the check, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false**: sends the API request. If the request passes the precheck, the QoS policy is created. This is the default value.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficQosPolicyDescription?: string(name='TrafficQosPolicyDescription', description='The description of the QoS policy.

The description must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The description must start with a letter.', example='desctest', position='Query'),
  trafficQosPolicyName?: string(name='TrafficQosPolicyName', description='The name of the QoS policy.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='nametest', position='Query'),
  trafficQosQueues?: [ 
    {
      dscps?: [ int32 ](name='Dscps', description='The differentiated services code point (DSCP) value that matches the current queue.

Each QoS policy supports up to three queues. You can specify at most 60 DSCP values for each queue. Separate DSCP values with commas (,).'),
      qosQueueDescription?: string(name='QosQueueDescription', description='The description of the current queue.

Each QoS policy supports up to three queues. You can add a description to each queue.

The description must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The description must start with a letter.', example='desctest'),
      qosQueueName?: string(name='QosQueueName', description='The name of the current queue.

Each QoS policy supports up to three queues. You can specify a name for each queue.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='nametest'),
      remainBandwidthPercent?: string(name='RemainBandwidthPercent', description='The percentage of bandwidth resources that can be allocated to the current queue.

Each QoS policy supports up to three queues. You can specify a percentage of bandwidth resources for each queue.

If you enter **1**, it indicates that the current queue can consume at most 1% of the bandwidth resources.

>  The sum of the percentage values of all the queues in a QoS policy cannot exceed 100%.', example='1'),
    }
  ](name='TrafficQosQueues', description='A list of QoS queues.

Each QoS policy supports up to three queues.', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the inter-region connection.', example='tr-attach-r6g0m3epjehw57****', position='Query'),
  transitRouterId: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-8vbuqeo5h5pu3m01d****', position='Query'),
}

model CreateCenInterRegionTrafficQosPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6DF9A765-BCD2-5C7E-8C32-C35C8A361A39'),
  trafficQosPolicyId?: string(name='TrafficQosPolicyId', description='The ID of the QoS policy.', example='qos-eczzew0v1kzrb5****'),
}

model CreateCenInterRegionTrafficQosPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenInterRegionTrafficQosPolicyResponseBody(name='body'),
}

/**
  * *   Only inter-region connections created on Enterprise Edition transit routers support QoS policies.
  *         If your inter-region connection uses test bandwidth, you cannot create QoS policies for the inter-region connection. 
  * *   QoS policies apply only to outbound traffic on Enterprise Edition transit routers.
  *         If you create an inter-region connection between the China (Hangzhou) region and the China (Qingdao) region, and create QoS policies for the transit router in the China (Hangzhou) region and the transit router in the China (Qingdao) region, the QoS policies apply only to the network traffic that flows from China (Hangzhou) to China (Qingdao). QoS policies allocate bandwidth resources to different services. 
  * *   **CreateCenInterRegionTrafficQosPolicy** is an asynchronous operation. After you send a request, the system returns a QoS policy ID and runs the task in the system background. You can call **ListCenInterRegionTrafficQosPolicies** to query the status of a QoS policy.
  *     *   If a QoS policy is in the **Creating** state, the QoS policy is being created. You can query the QoS policy but cannot perform other operations.
  *     *   If a QoS policy is in the **Active** state, the QoS policy is created.
  * ### Prerequisites
  * Make sure that the following requirements are met before you call the **CreateCenInterRegionTrafficQosPolicy** operation:
  * *   An inter-region connection is created. For more information, see [CreateTransitRouterPeerAttachment](~~261363~~).
  * *   A traffic marking policy is created. For more information, see [CreateTrafficMarkingPolicy](~~419025~~).
  *
 */
async function createCenInterRegionTrafficQosPolicy(request: CreateCenInterRegionTrafficQosPolicyRequest): CreateCenInterRegionTrafficQosPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCenInterRegionTrafficQosPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateCenInterRegionTrafficQosQueueRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId may be different for each request.', example='123e4567-e89b-12d3-a456-426****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, the request format, and the service limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request.', example='false', position='Query'),
  dscps: [ int32 ](name='Dscps', description='The differentiated services code point (DSCP) value that matches the current queue.

You can specify at most 20 DSCP values for a queue in each call. Separate DSCP values with commas (,).', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosQueueDescription?: string(name='QosQueueDescription', description='The description of the queue.

The description must be 1 to 256 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='desctest', position='Query'),
  qosQueueName?: string(name='QosQueueName', description='The name of the queue.

The name must be 2 to 128 characters in length, and can contain letters, digits, hyphens (-), and underscores (\\_). It must start with a letter.', example='nametest', position='Query'),
  remainBandwidthPercent: string(name='RemainBandwidthPercent', description='The maximum bandwidth of the queue,

*   in percentage. For example, a value of 20 specifies that the queue can occupy at most 20% of the bandwidth allocated to the inter-region connection.
*   The sum of percentage values specified for all queues that belong to the same inter-region connection cannot exceed 100%.', example='20', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficQosPolicyId: string(name='TrafficQosPolicyId', description='The ID of the QoS policy.', example='qos-qdvybn468kaoxx****', position='Query'),
}

model CreateCenInterRegionTrafficQosQueueResponseBody = {
  qosQueueId?: string(name='QosQueueId', description='The ID of the queue.', example='qos-queue-irqhi8k5fdyuu5****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='845F66F6-5C27-53A1-9428-B859086237B2'),
}

model CreateCenInterRegionTrafficQosQueueResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenInterRegionTrafficQosQueueResponseBody(name='body'),
}

/**
  * The **CreateCenInterRegionTrafficQosQueue** operation is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the **ListCenInterRegionTrafficQosPolicies** operation to query the status of the QoS policy to determine the status of the queue. When you call this operation, you must set the **TrafficQosPolicyId** parameter.
  * *   If a QoS policy is in the **Modifying** state, the queue is being created. In this case, you can query the QoS policy and queue but cannot perform other operations.
  * *   If a QoS policy is in the **Active** state, the queue is created.
  *
 */
async function createCenInterRegionTrafficQosQueue(request: CreateCenInterRegionTrafficQosQueueRequest): CreateCenInterRegionTrafficQosQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCenInterRegionTrafficQosQueue', 'POST', '/', 'json', false, 'json', request);
}

model CreateCenRouteMapRequest {
  asPathMatchMode?: string(name='AsPathMatchMode', description='The match method that is used to match routes against the AS paths. Valid values:

*   **Include**: fuzzy match. A route meets the match condition if the AS path of the route overlaps with the AS paths specified in the match condition.
*   **Complete**: exact match. A route is a match only if the AS path of the route is the same as an AS path specified in the match condition.', example='Include', position='Query'),
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  cenRegionId: string(name='CenRegionId', description='The ID of the region where the routing policy is applied.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  cidrMatchMode?: string(name='CidrMatchMode', description='The match method that is used to match routes against the prefix list. Valid values:

*   **Include**: fuzzy match. A route is a match if the route prefix is included in the match conditions.

    For example, if you set the match condition to 10.10.0.0/16 and fuzzy match is enabled, the route whose prefix is 10.10.1.0/24 is a match.

*   **Complete**: exact match. A route is a match only if the route prefix is the same as the prefix specified in the match condition.

    For example, if you set the match condition to 10.10.0.0/16 and exact match is enabled, a route is a match only if the prefix is 10.10.0.0/16.', example='Include', position='Query'),
  communityMatchMode?: string(name='CommunityMatchMode', description='The match method that is used to match routes against the community. Valid values:

*   **Include**: fuzzy match. A route meets the match condition if the community of the route overlaps with the community specified in the match condition.
*   **Complete**: exact match. A route meets the match condition only if the community of the route is the same as the community specified in the match condition.', example='Include', position='Query'),
  communityOperateMode?: string(name='CommunityOperateMode', description='The action that is performed on the community. Valid values:

*   **Additive**: adds the community to the route.
*   **Replace**: replaces the original community of the route.

This parameter specifies the action to be performed when a route meets the match condition.', example='Additive', position='Query'),
  description?: string(name='Description', description='The description of the routing policy.

The description must be 2 to 256 characters in length, and can contain letters, digits, hyphens (-), periods (.), and underscores (\\_). It must start with a letter and cannot start with `http://` or `https://`.', example='desctest', position='Query'),
  destinationChildInstanceTypes?: [ string ](name='DestinationChildInstanceTypes', description='The types of destination network instance to which the routes belong. The following types of network instances are supported:

*   **VPC**: VPC
*   **VBR**: VBR
*   **CCN**: CCN instance
*   **VPN**: IPsec connection

    > This parameter does not take effect if the IPsec-VPN connection or SSL client is associated with a transit router through a VPN gateway and a VPC. This parameter takes effect only if the IPsec connection is directly connected to the transit router.

You can specify one or more network instance types.

>  The destination network instance types are valid only if the routing policy is applied to scenarios where routes are advertised from the gateway in the current region to network instances in the current region.', example='VPC', position='Query'),
  destinationCidrBlocks?: [ string ](name='DestinationCidrBlocks', description='The prefix list against which routes are matched.

You must specify the IP addresses in CIDR notation. You can enter at most 32 CIDR blocks.', example='10.10.10.0/24', position='Query'),
  destinationInstanceIds?: [ string ](name='DestinationInstanceIds', description='The IDs of the destination network instances to which the routes belong. The following network instance types are supported:

*   VPC
*   VBR
*   CCN instance
*   SAG instance
*   The ID of the IPsec connection.

You can enter at most 32 IDs.

>  The destination network instance IDs are valid only if the routing policy is applied to scenarios where routes are advertised from the gateway in the current region to network instances in the current region.', example='vpc-afrfs434465fdf****', position='Query'),
  destinationInstanceIdsReverseMatch?: boolean(name='DestinationInstanceIdsReverseMatch', description='Specifies whether to exclude the destination network instance IDs. Valid values:

*   **false** (default value): A route is a match if its destination network instance ID is in the list specified by **DestinationInstanceIds.N**.
*   **true**: A route meets the match condition if its destination network instance ID is not in the list specified by **DestinationInstanceIds.N**.', example='false', position='Query'),
  destinationRouteTableIds?: [ string ](name='DestinationRouteTableIds', description='The IDs of the destination route tables to which routes are evaluated. You can enter at most 32 route table IDs.

>  The destination route table IDs are valid only when the routing policy is applied to scenarios where routes are advertised from the gateway in the current region to route tables in the current region.', example='vtb-adefrgtr144vf****', position='Query'),
  mapResult: string(name='MapResult', description='The action to be performed on a route that meets all match conditions. Valid values:

*   **Permit**: the route is permitted.
*   **Deny**: the route is denied.', example='Permit', position='Query'),
  matchAddressType?: string(name='MatchAddressType', description='The type of IP address in the match condition. Valid values:

*   **IPv4**: IPv4 address
*   **IPv6**: IPv6 address

This parameter can be empty. If no value is specified, all types of IP address are a match.', example='IPv4', position='Query'),
  matchAsns?: [ long ](name='MatchAsns', description='The AS paths against which routes are matched.

You can specify at most 32 AS numbers.

>  Only the AS-SEQUENCE parameter is supported. The AS-SET, AS-CONFED-SEQUENCE, and AS-CONFED-SET parameters are not supported. In other words, only the AS number list is supported. Sets and sub-lists are not supported.', example='65501', position='Query'),
  matchCommunitySet?: [ string ](name='MatchCommunitySet', description='The community against which routes are matched.

Specify the community in the format of n:m. Valid values of n and m: **1** to **65535**. Each community must comply with the RFC 1997 standard. The RFC 8092 standard that defines Border Gateway Protocol (BGP) large communities is not supported.

You can specify at most 32 communities.

>  If the configurations of the communities are incorrect, routes may fail to be advertised to your data center.', example='65501:1', position='Query'),
  nextPriority?: int32(name='NextPriority', description='The priority of the routing policy that you want to associate with the current one.

*   This parameter takes effect only when the **MapResult** parameter is set to **Permit**. This way, the permitted route is matched against the next routing policy.
*   The region and direction of the routing policy to be associated must be the same as those of the current routing policy.
*   The priority of the next routing policy must be lower than the priority of the current routing policy.', example='20', minimum=1, maximum=1000, position='Query'),
  operateCommunitySet?: [ string ](name='OperateCommunitySet', description='The community set on which actions are performed.

Specify the community in the format of n:m. Valid values of n and m: **1** to **65535**. Each community must comply with RFC 1997. The RFC 8092 standard that defines BGP large communities is not supported.

You can specify at most 32 communities.

>  If the configurations of the communities are incorrect, routes may fail to be advertised to your data center.', example='65501:1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  preference?: int32(name='Preference', description='The new priority of the route.

Valid values: **1** to **100**. The default priority is **50**. A smaller value indicates a higher priority.

This parameter specifies the action to be performed when a route meets the match condition.', example='50', minimum=1, maximum=100, position='Query'),
  prependAsPath?: [ long ](name='PrependAsPath', description='The AS paths that are prepended by using an action statement when regional gateways receive or advertise routes.

The AS paths vary based on the direction in which the routing policy is applied:

*   If AS paths are prepended to a routing policy that is applied in the inbound direction, you must specify source network instance IDs and the source region in the match condition. In addition, the source region must be the same as the region where the routing policy is applied.
*   If AS paths are prepended to a routing policy that is applied in the outbound direction, you must specify destination network instance IDs in the match condition.

This parameter specifies the action to be performed when a route meets the match condition. You can specify at most 32 AS numbers.', example='65501', position='Query'),
  priority: int32(name='Priority', description='The priority of the routing policy. Valid values: **1** to **100**. A smaller value indicates a higher priority.

>  You cannot specify the same priority for routing policies that apply in the same region and direction. The system matches routes against the match conditions of routing policies in descending order of priority. A smaller value indicates a higher priority. You must set the priorities to proper values.', example='3', minimum=1, maximum=2999, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTypes?: [ string ](name='RouteTypes', description='The type of route to be matched against the match condition. The following route types are supported:

*   **System**: system routes that are automatically generated by the system.
*   **Custom**: custom routes that are manually added.
*   **BGP**: routes that are advertised over BGP.

You can specify multiple route types.', example='System', position='Query'),
  sourceChildInstanceTypes?: [ string ](name='SourceChildInstanceTypes', description='The types of source network instance to which the routes belong. The following types of network instances are supported:

*   **VPC**: VPC
*   **VBR**: VBR
*   **CCN**: CCN instance
*   **VPN**: VPN gateway or IPsec connection
    *   If the IPsec-VPN connection or SSL client is associated with a VPN gateway, the VPC associated with the VPN gateway must be connected to a transit router, and the VPN gateway must use BGP dynamic routing. Otherwise, this parameter cannot take effect.
    *   This parameter takes effect if the IPsec connection is directly connected to a transit router.

You can specify one or more network instance types.', example='VPC', position='Query'),
  sourceInstanceIds?: [ string ](name='SourceInstanceIds', description='The IDs of the source network instances to which the routes belong. The following network instance types are supported:

*   VPC
*   VBR
*   CCN instance
*   SAG instance
*   The ID of the IPsec connection.

You can enter at most 32 IDs.', example='vpc-adeg3544fdf34vf****', position='Query'),
  sourceInstanceIdsReverseMatch?: boolean(name='SourceInstanceIdsReverseMatch', description='Specifies whether to exclude the source network instance IDs. Valid values:

*   **false** (default value): A route is a match if its source network instance ID is in the list specified by **SourceInstanceIds.N**.
*   **true**: A route is a match if its source network instance ID is not in the list specified by **SourceInstanceIds.N**.', example='false', position='Query'),
  sourceRegionIds?: [ string ](name='SourceRegionIds', description='The IDs of the source regions from which routes are evaluated. You can enter at most 32 region IDs.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-beijing', position='Query'),
  sourceRouteTableIds?: [ string ](name='SourceRouteTableIds', description='The IDs of the source route tables from which routes are evaluated. You can enter at most 32 route table IDs.', example='vtb-adfr233vf34rvd4****', position='Query'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId', description='The ID of the route table of the transit router.

If you do not specify a route table ID, the routing policy is automatically associated with the default route table of the transit router.', example='vtb-gw8nx3515m1mbd1z1****', position='Query'),
  transmitDirection: string(name='TransmitDirection', description='The direction in which the routing policy is applied. Valid values:

*   **RegionIn**: Routes are advertised to the gateways in the regions that are connected by the CEN instance.

    For example, routes are advertised from network instances deployed in the current region or other regions to the gateway deployed in the current region.

*   **RegionOut**: Routes are advertised from the gateways in the regions that are connected by the CEN instance.

    For example, routes are advertised from the gateway deployed in the current region to network instances deployed in the same region, or to gateways deployed in other regions.', example='RegionIn', position='Query'),
}

model CreateCenRouteMapResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='62172DD5-6BAC-45DF-8D44-56SDF467BAC'),
  routeMapId?: string(name='RouteMapId', description='The ID of the routing policy.', example='cenrmap-w4yf7toozfol3q****'),
}

model CreateCenRouteMapResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenRouteMapResponseBody(name='body'),
}

/**
  * Routing policies are sorted by priority. A smaller value indicates a higher priority. Each routing policy is a collection of conditional statements and execution statements. Starting from the routing policy with the highest priority, the system matches routes against the match conditions specified by routing policies. If a route meets all the match conditions of a routing policy, the system permits or denies the route based on the action specified in the routing policy. You can also modify the attributes of permitted routes. By default, the system permits routes that meet none of the match conditions. For more information, see [Routing policy overview](~~124157~~).
  * `CreateCenRouteMap` is an asynchronous operation. After you send a request, the routing policy ID is returned but the operation is still being performed in the system background. You can call `DescribeCenRouteMaps` to query the status of a routing policy.
  * *   If a routing policy is in the **Creating** state, the routing policy is being created. In this case, you can query the routing policy but cannot perform other operations.
  * *   If a routing policy is in the **Active** state, the routing policy is created.
  *
 */
async function createCenRouteMap(request: CreateCenRouteMapRequest): CreateCenRouteMapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCenRouteMap', 'POST', '/', 'json', false, 'json', request);
}

model CreateFlowlogRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId for each API request may be different.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  description?: string(name='Description', description='The description of the flow log.

The description must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='myFlowlog', position='Query'),
  flowLogName?: string(name='FlowLogName', description='The name of the flow log.

The name must be 2 to 128 characters in length, and can contain digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='myFlowlog', position='Query'),
  interval?: long(name='Interval', description='The time window for collecting log data. Unit: seconds. Valid values: **60** and **600**. Default value: **600**.', example='600', position='Query'),
  logStoreName: string(name='LogStoreName', description='The Logstore where the flow log is stored.

*   If a Logstore is already created in the selected region, enter the name of the Logstore.

*   If no Logstores are created in the selected region, enter a name and the system automatically creates a Logstore. The name of the Logstore. The name must meet the following requirements:

    *   The name must be unique in a project.
    *   The name can contain only lowercase letters, digits, hyphens (-), and underscores (\\_).
    *   The name must start and end with a lowercase letter or a digit.
    *   The name must be 3 to 63 characters in length.', example='FlowLogStore', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  projectName: string(name='ProjectName', description='The Log Service project where the flow log is stored.

*   If a project is already created in the selected region, enter the name of the project.

*   If no projects are created in the selected region, enter a name and the system automatically creates a project.

    The project name must be unique in a region. You cannot change the name after you create the project. The naming conventions are:

    *   The name must be globally unique.
    *   The name can contain only lowercase letters, digits, and hyphens (-).
    *   The name must start and end with a lowercase letter or a digit.
    *   The name must be 3 to 63 characters in length.', example='FlowLogProject', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the flow log is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='TagKey'),
      value?: string(name='Value', description='The tag value.

The tag value can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key must have a unique tag value. You can specify at most 20 tag values in each call.', example='TagValue'),
    }
  ](name='Tag', description='The information about the tags.

You can specify at most 20 tags in each call.', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the inter-region connection or the VBR connection.

> This parameter is required.', example='tr-attach-r6g0m3epjehw57****', position='Query'),
}

model CreateFlowlogResponseBody = {
  flowLogId?: string(name='FlowLogId', description='The ID of the flow log.', example='flowlog-m5evbtbpt****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
  success?: string(name='Success', description='Indicates whether the call is successful. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model CreateFlowlogResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowlogResponseBody(name='body'),
}

/**
  * Flow logs are used to capture the information about network traffic between transit routers and between virtual border routers (VBRs). Before you create a flow log, take note of the following items:
  * *   Flow logs are supported only by Enterprise Edition transit routers.
  * *   Only flow logs in some regions can capture the information about network traffic over VBR connections. For more information, see [Limits](~~339822~~).
  * *   Flow logs are used to capture the information about outbound traffic on transit routers. Information about inbound traffic on transit routers is not captured.
  *     For example, an Elastic Compute Service (ECS) instance in the US (Silicon Valley) region accesses an ECS instance in the US (Virginia) region through CEN. After you enable the flow log feature for the transit router in the US (Virginia) region, you can check the log entries about packets sent from the ECS instance in the US (Virginia) region to the ECS instance in the US (Silicon Valley) region. However, packets sent from the ECS instance in the US (Silicon Valley) region to the ECS instance in the US (Virginia) region are not recorded. If you want to record the packets sent from the ECS instance in the US (Silicon Valley) region to the ECS instance in the US (Virginia) region, you must also enable the flow log feature on the transit router that is in the US (Silicon Valley) region.
  * *   `CreateFlowLog` is an asynchronous operation. After you send a request, the system returns a flow log ID and runs the task in the background. You can call the `DescribeFlowLogs` operation to query the status of a flow log.
  *     *   If a flow log is in the **Creating** state, the flow log is being created. In this case, you can query the flow log but cannot perform other operations.
  *     *   If a flow log is in the **Active** state, the flow log is created.
  * # Prerequisites
  * An inter-region connection or a VBR connection is created. For more information, see [CreateTransitRouterPeerAttachment](~~261363~~) or [CreateTransitRouterVbrAttachment](~~261361~~).
  *
 */
async function createFlowlog(request: CreateFlowlogRequest): CreateFlowlogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlowlog', 'POST', '/', 'json', false, 'json', request);
}

model CreateTrafficMarkingPolicyRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request format, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request.', example='false', position='Query'),
  markingDscp: int32(name='MarkingDscp', description='The differentiated services code point (DSCP) value to be added to packets that match the traffic classification rule. Valid values: **0** to **63**.

The DSCP value of each traffic marking policy on a transit router must be unique.', example='5', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  priority: int32(name='Priority', description='The priority value of the traffic marking policy. Valid values: **1** to **100**.

The priority value of each traffic marking policy on a transit router must be unique. A smaller value specifies a higher priority.', example='5', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMarkingPolicyDescription?: string(name='TrafficMarkingPolicyDescription', description='The description of the traffic marking policy.

The description must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The description must start with a letter.', example='desctest', position='Query'),
  trafficMarkingPolicyName?: string(name='TrafficMarkingPolicyName', description='The name of the traffic marking policy.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='nametest', position='Query'),
  trafficMatchRules?: [ 
    {
      dstCidr?: string(name='DstCidr', description='The destination CIDR block that is used to match packets.

The traffic classification rule matches the packets whose destination IP addresses fall within the specified destination CIDR block. If you do not set this parameter, packets with all destination IP addresses are matched.

You can create up to 50 traffic classification rules in each call. You can specify a destination CIDR block for each traffic classification rule.', example='10.10.10.0/24'),
      dstPortRange?: [ int32 ](name='DstPortRange', description='The destination port range that is used to match packets. Valid values: **-1** and **1** to **65535**.

The traffic classification rule matches the packets whose destination ports fall within the destination port range. If you do not set this parameter, packets with all destination ports are matched.

You can specify at most two ports. Take note of the following rules:

*   If you enter only one port number such as 1, the system matches the packets whose destination port is port 1.
*   If you enter two port numbers such as 1 and 200, the system matches the packets whose destination ports fall between 1 and 200.
*   If you enter two port numbers and one of them is -1, the other port number must also be -1. In this case, packets with all destination ports are matched.

You can create up to 50 traffic classification rules in each call. You can specify a destination port range for each traffic classification rule.'),
      matchDscp?: int32(name='MatchDscp', description='The DSCP value that is used to match packets. Valid values: **0** to **63**.

The traffic classification rule matches the packets that contain the specified DSCP value. If you do not set this parameter, packets are considered a match regardless of the DSCP value.

>  The DSCP value that you specify for this parameter is the DSCP value that packets carry before they are transmitted over the inter-region connection.

You can create up to 50 traffic classification rules in each call. You can specify a DSCP value for each traffic classification rule.', example='6'),
      protocol?: string(name='Protocol', description='The protocol that is used to match packets.

Valid values: **HTTP**, **HTTPS**, **TCP**, **UDP**, **SSH**, and **Telnet**. For more information, log on to the [Cloud Enterprise Network (CEN) console](https://cen.console.aliyun.com/cen/list).

You can create up to 50 traffic classification rules in each call. You can specify a protocol for each traffic classification rule.', example='HTTP'),
      srcCidr?: string(name='SrcCidr', description='The source CIDR block that is used to match packets.

The traffic classification rule matches the packets whose source IP addresses fall within the specified source CIDR block. If you do not set this parameter, packets with all source IP addresses are matched.

You can create up to 50 traffic classification rules in each call. You can specify a source CIDR block for each traffic classification rule.', example='192.168.10.0/24'),
      srcPortRange?: [ int32 ](name='SrcPortRange', description='The source port range that is used to match packets. Valid values: **-1** and **1** to **65535**.

The traffic classification rule matches the packets whose source ports fall within the source port range. If you do not set this parameter, packets with all source ports are matched.

You can specify at most two ports. Take note of the following rules:

*   If you enter only one port number such as 1, the system matches the packets whose source port is 1.
*   If you enter two port numbers such as 1 and 200, the system matches the packets whose source ports fall between 1 and 200.
*   If you enter two port numbers and one of them is -1, the other port number must also be -1. In this case, packets with all source ports are matched.

You can create up to 50 traffic classification rules in each call. You can specify a source port range for each traffic classification rule.'),
      trafficMatchRuleDescription?: string(name='TrafficMatchRuleDescription', description='The description of the traffic classification rule.

You can create up to 50 traffic classification rules in each call. You can specify a description for each traffic classification rule.

The description must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The description must start with a letter.', example='desctest'),
      trafficMatchRuleName?: string(name='TrafficMatchRuleName', description='The name of the traffic classification rule.

You can create up to 50 traffic classification rules in each call. You can specify a name for each traffic classification rule.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='nametest'),
    }
  ](name='TrafficMatchRules', description='The traffic classification rules in the traffic marking policy.

Packets that match the traffic classification rules are assigned the DSCP value of the traffic marking policy.

You can specify at most 50 traffic classification rules.', position='Query'),
  transitRouterId: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-8vbuqeo5h5pu3m01d****', position='Query'),
}

model CreateTrafficMarkingPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0876E54E-3E36-5C31-89F0-9EE8A9266F9A'),
  trafficMarkingPolicyId?: string(name='TrafficMarkingPolicyId', description='The ID of the traffic marking policy.', example='tm-u9nxup5kww5po8****'),
}

model CreateTrafficMarkingPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTrafficMarkingPolicyResponseBody(name='body'),
}

/**
  * *   Only Enterprise Edition transit routers support traffic marking policies.
  * *   **CreateTrafficMarkingPolicy** is an asynchronous operation. After you send a request, the system returns a traffic marking policy ID and runs the task in the background. You can call the **ListTrafficMarkingPolicies** operation to query the status of a traffic marking policy.
  *     *   If a traffic marking policy is in the **Creating** state, the traffic marking policy is being created. You can query the traffic marking policy but cannot perform other operations.
  *     *   If a traffic marking policy is in the **Active** state, the traffic marking policy is created.
  *
 */
async function createTrafficMarkingPolicy(request: CreateTrafficMarkingPolicyRequest): CreateTrafficMarkingPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTrafficMarkingPolicy', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouteTableAggregationRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId may different for each request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to precheck the request. Check items include permissions and the status of the specified cloud resources. Valid values:

*   **false** (default): sends the request. If the request passes the precheck, the aggregate route is added.
*   **true**: prechecks the request but does not create the aggregate route. If you use this value, the system checks the required parameters and the request syntax. If the request fails to pass the precheck, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouteTableAggregationCidr: string(name='TransitRouteTableAggregationCidr', description='The destination CIDR block of the aggregate route.

>  The following CIDR blocks are not supported:

*   CIDR blocks that start with 0 or 100.64.
*   Multicast CIDR blocks, including 224.0.0.1 to 239.255.255.254.', example='192.168.10.0/24', position='Query'),
  transitRouteTableAggregationDescription?: string(name='TransitRouteTableAggregationDescription', description='The description of the aggregate route.

The description must be 2 to 256 characters in length, and can contain letters, digits, and the following special characters: , . ; / @ \\_ -. You can also leave the description empty.', example='desctest', position='Query'),
  transitRouteTableAggregationName?: string(name='TransitRouteTableAggregationName', description='The name of the aggregate route.

The name must be 0 to 128 characters in length, and can contain letters, digits, and the following special characters: , . ; / @ \\_ -.', example='nametest', position='Query'),
  transitRouteTableAggregationScop: string(name='TransitRouteTableAggregationScop', description='The scope of networks that you want to advertise the aggregate route.

Set the value to **VPC**, which specified that the aggregate route is advertised to VPCs that are in associated forwarding relationship with a route table of the Enterprise Edition transit router and have route synchronization enabled.', example='VPC', position='Query'),
  transitRouteTableId: string(name='TransitRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-iq8qgruq1ry8jc7vt****', position='Query'),
}

model CreateTransitRouteTableAggregationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C2EE7A8-74D4-4081-8236-CEBDE3BBCF50'),
}

model CreateTransitRouteTableAggregationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouteTableAggregationResponseBody(name='body'),
}

/**
  * # Prerequisites
  * After you add an aggregate route to a route table of an Enterprise Edition transit router, the Enterprise Edition transit router advertises its routes only to route tables of virtual private clouds (VPCs) that are associated with a route table of the Enterprise Edition transit router and have route synchronization enabled.
  * Perform the following operations before you create an aggregate route. Otherwise, the Enterprise Edition transit router does not advertise routes to VPC route tables:
  * *   Associated forwarding is enabled between the VPCs and the Enterprise Edition transit router. For more information, see [AssociateTransitRouterAttachmentWithRouteTable](~~261242~~).
  * *   The VPCs have route synchronization enabled. For more information, see [CreateTransitRouterVpcAttachment](~~261358~~).
  *
 */
async function createTransitRouteTableAggregation(request: CreateTransitRouteTableAggregationRequest): CreateTransitRouteTableAggregationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouteTableAggregation', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-j3jzhw1zpau2km****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **false** (default): performs a dry run and sends the request.
*   **true**: performs a dry run. The system checks the required parameters and the request syntax. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the Enterprise Edition transit router is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-zhangjiakou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  supportMulticast?: boolean(name='SupportMulticast', description='Specifies whether to enable the multicast feature for the Enterprise Edition transit router. Valid values:

*   **false** (default): disables multicast
*   **true**: enables multicast

The multicast feature is supported only in specific regions. You can call the [ListTransitRouterAvailableResource](~~261356~~) operation to query the regions that support multicast.', example='false', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

The tag key cannot be an empty string. The tag key can be up to 64 characters in length, and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='tagtest'),
      value?: string(name='Value', description='The tag value.

The tag value can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key must have a unique tag value. You can specify at most 20 tag values in each call.', example='TagValue'),
    }
  ](name='Tag', description='The information about the tags.

You can specify at most 20 tags in each call.', position='Query'),
  transitRouterCidrList?: [ 
    {
      cidr?: string(name='Cidr', description='The CIDR block of the transit router.', example='192.168.10.0/24'),
      description?: string(name='Description', description='The description of the CIDR block.

The description must be 1 to 256 characters in length.', example='desctest'),
      name?: string(name='Name', description='The name of the CIDR block.

The name must be 1 to 128 characters in length.', example='nametest'),
      publishCidrRoute?: boolean(name='PublishCidrRoute', description='Specifies whether to allow the system to automatically add a route that points to the CIDR block to the route table of the transit router.

*   **true** (default): yes

        A value of true specifies that after you create a private VPN connection and add a route learning correlation for the private VPN connection, the system automatically adds the following route to the route table of the transit router that is in route learning correlation with the private VPN connection:

          A blackhole route whose destination CIDR block is the CIDR block of the transit router. The CIDR block of the transit router refers to the CIDR block from which gateway IP addresses are allocated to IPsec-VPN connections. 

          The blackhole route is advertised only to the route tables of the virtual border routers (VBRs) that are connected to the transit router. 

*   **false**: no', example='true'),
    }
  ](name='TransitRouterCidrList', description='The CIDR blocks of the transit router.

You can add up to five CIDR blocks in each call. For more information about CIDR blocks of transit routers, see [CIDR blocks of transit routers](~~462635~~).

> Only Enterprise Edition transit routers support CIDR blocks.', shrink='json', position='Query'),
  transitRouterDescription?: string(name='TransitRouterDescription', description='The description of the Enterprise Edition transit router.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='testdesc', position='Query'),
  transitRouterName?: string(name='TransitRouterName', description='The name of the Enterprise Edition transit router.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='testname', position='Query'),
}

model CreateTransitRouterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='404DA7EC-F495-44B5-B543-6EDCDF90F3D1'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the Enterprise Edition transit router.', example='tr-uf6llz2286805i44g****'),
}

model CreateTransitRouterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterResponseBody(name='body'),
}

/**
  * *   You can call the **CreateTransitRouter** operation to create an Enterprise Edition transit router. For more information about the regions that support Enterprise Edition transit routers, see [What is CEN?](~~181681~~)
  * *   **CreateTransitRouter** is an asynchronous operation. After you send a request, the system returns a request ID and runs the task in the background. You can call the [ListTransitRouters](~~261219~~) operation to query the status of an Enterprise Edition transit router.
  *     *   If an Enterprise Edition transit router is in the **Creating** state, the Enterprise Edition transit router is being created. In this case, you can query the Enterprise Edition transit router but cannot perform other operations.
  *     *   If an Enterprise Edition transit router is in the **Active** state, the Enterprise Edition transit router is created.
  *
 */
async function createTransitRouter(request: CreateTransitRouterRequest): CreateTransitRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouter', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterCidrRequest {
  cidr: string(name='Cidr', description='The CIDR block that you want to create for the transit router.', example='192.168.10.0/24', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId for each API request may be different.', example='123e4567-e89b-12d3-a456-426****', position='Query'),
  description?: string(name='Description', description='The description of the CIDR block.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='desctest', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the request. Valid values:

*   **true**: prechecks the request but does not create the CIDR block. The system checks the required parameters, the request format, and the service limits. If the request fails to pass the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. After the request passes the precheck, the CIDR block is created.', example='false', position='Query'),
  name?: string(name='Name', description='The name of the CIDR block.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='nametest', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publishCidrRoute?: boolean(name='PublishCidrRoute', description='Specifies whether to allow the system to automatically add a route that points to the CIDR block to the route table of the transit router.

*   **true** (default): yes

    A value of true specifies that after you create a private VPN connection and enable route learning for the connection, the system automatically adds a blackhole route to the route table of the transit router to which the VPN connection is attached. The destination CIDR block of the blackhole route is the CIDR block of the transit router. The CIDR block of the transit router refers to the CIDR block from which gateway IP addresses are allocated to IPsec-VPN connections. The blackhole route is advertised only to the route table of the virtual border router (VBR) that is connected to the transit router.

*   **false**: no', example='true', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the transit router is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterId: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-p0w3x8c9em72a40nw****', position='Query'),
}

model CreateTransitRouterCidrResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0876E54E-3E36-5C31-89F0-9EE8A9266F9A'),
  transitRouterCidrId?: string(name='TransitRouterCidrId', description='The ID of the transit router CIDR block.', example='cidr-0zv0q9crqpntzz****'),
}

model CreateTransitRouterCidrResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterCidrResponseBody(name='body'),
}

/**
  * You can specify a CIDR block for a transit router. The CIDR block works in a similar way as the CIDR block of the loopback interface on a router. IP addresses within the CIDR block can be assigned to IPsec-VPN connections. For more information, see [Transit router CIDR blocks](~~462635~~).
  * The **CreateTransitRouterCidr** operation can be used to create a CIDR block only after you create a transit router.
  * The CIDR block must meet the following requirements:
  * *   Only Enterprise Edition transit routers support custom CIDR blocks.
  * *   This feature is in pubic preview and is available only in some regions. For more information about the supported regions, see [Limits on transit router CIDR blocks](~~462635~~).
  * *   Each transit router supports at most five CIDR blocks. The subnet mask of a CIDR block must be 16 bits to 24 bits in length.
  * *   The following CIDR blocks and their subnets are not supported: 100.64.0.0/10, 224.0.0.0/4, 127.0.0.0/8, and 169.254.0.0/16.
  * *   The CIDR block cannot overlap with CIDR blocks that network instances attached to the CEN instance use to communicate with each other.
  * *   On the same CEN instance, each transit router CIDR block must be unique.
  * *   When you create the first VPN connection after you add a CIDR block for a transit router, three CIDR blocks within the CIDR block are reserved. An IP address is allocated from the remaining CIDR blocks to the IPsec-VPN connection.
  *     You can call [ListTransitRouterCidrAllocation](~~464173~~) to query reserved CIDR blocks and IP addresses allocated to network connections.
  *
 */
async function createTransitRouterCidr(request: CreateTransitRouterCidrRequest): CreateTransitRouterCidrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouterCidr', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterMulticastDomainRequest {
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-a7syd349kne38g****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request format, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the transit router is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='TagKey'),
      value?: string(name='Value', description='The tag value.

The tag value can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key must have a unique tag value. You can specify at most 20 tag values in each call.', example='TagValue'),
    }
  ](name='Tag', description='The information about the tags.

You can specify at most 20 tags in each call.', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-p0wr9p28r92d598y6****', position='Query'),
  transitRouterMulticastDomainDescription?: string(name='TransitRouterMulticastDomainDescription', description='The description of the multicast domain.

The description must be 0 to 256 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at signs (@), underscores (\\_), and hyphens (-).', example='desctest', position='Query'),
  transitRouterMulticastDomainName?: string(name='TransitRouterMulticastDomainName', description='The name of the multicast domain.

The name must be 0 to 128 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at signs (@), underscores (\\_), and hyphens (-).', example='nametest', position='Query'),
}

model CreateTransitRouterMulticastDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='94E19C6F-206F-5223-9A63-64B85851BC04'),
  transitRouterMulticastDomainId?: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast domain.', example='tr-mcast-domain-40cwj0rgzgdtam****'),
}

model CreateTransitRouterMulticastDomainResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterMulticastDomainResponseBody(name='body'),
}

/**
  * Before you call this operation, read the following rules:
  * *   Only Enterprise Edition transit routers in the Australia (Sydney) and UK (London) regions support the multicast feature. Multicast is unavailable by default. If you want to enable multicast, contact your sales manager or [submit a ticket](https://selfservice.console.aliyun.com/ticket/category/cbn/today) to apply for multicast resources.
  * *   Make sure that an Enterprise Edition transit router is deployed in the region where you want to create the multicast domain, and the multicast feature is enabled for the Enterprise Edition transit router. For more information, see [CreateTransitRouter](~~261169~~).
  *     If an Enterprise Edition transit router was created before you apply for multicast resources, the transit router does not support multicast. You can delete the transit router and create a new one. For more information about how to delete an Enterprise Edition transit router, see [DeleteTransitRouter](~~261218~~).
  * *   When you call **CreateTransitRouterMulticastDomain**, if you set **CenId** and **RegionId**, you do not need to set **TransitRouterId**. If you set **TransitRouterId**, you do not need to set **CenId** or **RegionId**.
  *
 */
async function createTransitRouterMulticastDomain(request: CreateTransitRouterMulticastDomainRequest): CreateTransitRouterMulticastDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouterMulticastDomain', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterPeerAttachmentRequest {
  autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled', description='Specifies whether to enable the local Enterprise Edition transit router to automatically advertise the routes of the inter-region connection to the peer transit router. Valid values:

*   **false** (default): no.
*   **true**: yes.', example='false', position='Query'),
  bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the inter-region connection. Unit: Mbit/s.

*   If you set **BandwidthType** to **BandwidthPackage**, this parameter specifies the bandwidth that is available for the inter-region connection.

<!---->

*   If you set **BandwidthType** to **DataTransfer**, this parameter specifies the bandwidth limit of the inter-region connection.', example='2', minimum=0, maximum=100000000, position='Query'),
  bandwidthType?: string(name='BandwidthType', description='The method that is used to allocate bandwidth to the inter-region connection. Valid values:

**BandwidthPackage**: allocates bandwidth from a bandwidth plan.

**DataTransfer**: uses pay-by-data-transfer bandwidth.', example='BandwidthPackage', position='Query'),
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId', description='The ID of the bandwidth plan that is used to allocate bandwidth to the inter-region connection.

>  If you set **BandwidthType** to **DataTransfer**, you do not need to set this parameter.', example='cenbwp-3xrxupouolw5ou****', position='Query'),
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-j3jzhw1zpau2km****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. The value of **RequestId** of each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request but not perform the operation. The system checks the permissions and the status of the specified instances. Valid values:

*   **false** (default): checks the request. If the request passes the check, the inter-region connection is created.
*   **true**: checks the request but does not perform the operation. The inter-region connection is not created after the request passes the check. If you use this value, the system checks the required parameters and the request syntax. If the request fails to pass the precheck, an error message is returned. If the request passes the check, the system returns the ID of the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerTransitRouterId: string(name='PeerTransitRouterId', description='The ID of the peer transit router.', example='tr-m5eq27g6bndum7e88****', position='Query'),
  peerTransitRouterRegionId?: string(name='PeerTransitRouterRegionId', description='The ID of the region where the peer transit router is deployed.', example='cn-qingdao', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the local Enterprise Edition transit router is deployed.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag keys of the resources. 

The tag keys cannot be an empty string. The tag keys can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.  

You can specify at most 20 tag keys.', example='tag_A1'),
      value?: string(name='Value', description='The tag values of the resources. 

The tag values can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.  

Each tag key has a unique tag value. You can specify at most 20 tag values in each call.', example='value_A1'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', description='The description of the inter-region connection.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='testdesc', position='Query'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', description='The name of the inter-region connection.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='testname', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the local Enterprise Edition transit router.', example='tr-bp1su1ytdxtataupl****', position='Query'),
}

model CreateTransitRouterPeerAttachmentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='59422BF5-BAAD-4CFD-9019-9557BD3ACFA3'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the inter-region connection.', example='tr-attach-nwkiqfvw22qesz****'),
}

model CreateTransitRouterPeerAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterPeerAttachmentResponseBody(name='body'),
}

/**
  * ## Background information
  * By default, 1 Kbit/s of bandwidth is provided for inter-region communication between transit routers. This allows you to test the connectivity of inter-region IPv4 networks. To allow services that are deployed in different regions to communicate with each other, you must create an inter-region connection and allocate bandwidth resources to the connection.  
  * Enterprise Edition transit routers allow you to allocate bandwidth resources to inter-region connections by using the following methods: 
  * - **Allocate bandwidth resources from a bandwidth plan**:  You must purchase a bandwidth plan, and then allocate bandwidth resources from the bandwidth plan to inter-region connections. For more information, see [CreateCenBandwidthPackage](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/createcenbandwidthpackage).
  * - **Use pay-by-data-transfer bandwidth resources**:  You can set a maximum bandwidth value for an inter-region connection. Then, you are charged for the amount of data transfer over the connection. For more information, see [Cross-region data transfers](https://www.alibabacloud.com/help/en/cloud-data-transmission/latest/cross-region-data-transfers).
  * ## Usage notes
  * **CreateTransitRouterPeerAttachment** is an asynchronous operation. After you send a request, the system returns the inter-region connection ID but the operation is still being performed in the system background. You can call **ListTransitRouterPeerAttachments** to query the status of an inter-region connection.  
  * - If an inter-region connection is in the **Attaching** state, the inter-region connection is being created. You can query the inter-region connection but cannot perform other regions.
  * - If an inter-region connection is in the **Attached** state, the inter-region connection is created.
  *
 */
async function createTransitRouterPeerAttachment(request: CreateTransitRouterPeerAttachmentRequest): CreateTransitRouterPeerAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouterPeerAttachment', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterPrefixListAssociationRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request.', example='false', position='Query'),
  nextHop: string(name='NextHop', description='The ID of the next hop.

> If **NextHopType** is set to **BlackHole**, you must set this parameter to **BlackHole**.', example='tr-attach-flbq507rg2ckrj****', position='Query'),
  nextHopType?: string(name='NextHopType', description='The type of the next hop. Valid values:

*   **BlackHole**: specifies that all the CIDR blocks in the prefix list are blackhole routes. Packets destined for the CIDR blocks are dropped.
*   **VPC**: specifies that the next hop of the CIDR blocks in the prefix list is a virtual private cloud (VPC) connection.
*   **VBR**: specifies that the next hop of the CIDR blocks in the prefix list is a virtual border router (VBR) connection.
*   **TR**: specifies that the next hop of the CIDR blocks in the prefix list is an inter-region connection.', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ownerUid?: long(name='OwnerUid', description='The ID of the Alibaba Cloud account to which the prefix list belongs.', example='1210123456123456', position='Query'),
  prefixListId: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-6ehtn5kqxgeyy08fi****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the transit router is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterId: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-6ehx7q2jze8ch5ji0****', position='Query'),
  transitRouterTableId: string(name='TransitRouterTableId', description='The ID of the route table of the transit router.', example='vtb-6ehgc262hr170qgyc****', position='Query'),
}

model CreateTransitRouterPrefixListAssociationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C2EE7A8-74D4-4081-8236-CEBDE3BBCF50'),
}

model CreateTransitRouterPrefixListAssociationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterPrefixListAssociationResponseBody(name='body'),
}

/**
  * *   Only the route tables of Enterprise Edition transit routers can be associated with prefix lists.
  * *   A prefix list can be associated only with one route table of an Enterprise Edition.
  * *   The CIDR blocks in the prefix list cannot overlap with those in the route table of the Enterprise Edition transit router. Otherwise, the prefix list fails to be associated with the route table.
  * *   If the route table of an Enterprise Edition transit router needs to be associated with multiple prefix lists, make sure that the CIDR blocks in the prefix lists do not overlap. Otherwise, the route table fails to be associated with the prefix lists.
  * # Prerequisites
  * *   A prefix list is created. For more information, see [CreateVpcPrefixList](~~437367~~).
  * *   The prefix list is shared with the Alibaba Cloud account that owns the Enterprise Edition transit router if the prefix list and the Enterprise Edition transit router belong to different Alibaba Cloud accounts. For more information about how to share a prefix list with another Alibaba Cloud account, see [Resource sharing overview](~~160622~~) and [API reference for resource sharing](~~193445~~).
  *
 */
async function createTransitRouterPrefixListAssociation(request: CreateTransitRouterPrefixListAssociationRequest): CreateTransitRouterPrefixListAssociationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouterPrefixListAssociation', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterRouteEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Default values:

*   **false** (default): performs a dry run and sends the request.
*   **true**: performs a dry run. The system checks the required parameters and request syntax. If the request fails the dry run, an error message is returned. If the request passes the dry run, the system returns the ID of the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterRouteEntryDescription?: string(name='TransitRouterRouteEntryDescription', description='The description of the route.

The description must be 2 to 256 characters in length, and can contain letters, digits, and the following special characters: , . ; / @ \\_ -. You can also leave the description empty.', example='testdesc', position='Query'),
  transitRouterRouteEntryDestinationCidrBlock: string(name='TransitRouterRouteEntryDestinationCidrBlock', description='The destination CIDR block of the route.', example='192.168.0.0/24', position='Query'),
  transitRouterRouteEntryName?: string(name='TransitRouterRouteEntryName', description='The name of the route.

The name must be 0 to 128 characters in length, and can contain letters, digits, and the following special characters: , . ; / @ \\_ -.', example='testname', position='Query'),
  transitRouterRouteEntryNextHopId?: string(name='TransitRouterRouteEntryNextHopId', description='The ID of the network instance connection that you want to specify as the next hop.', example='tr-attach-nls9fzkfat8934****', position='Query'),
  transitRouterRouteEntryNextHopType: string(name='TransitRouterRouteEntryNextHopType', description='The type of the next hop. Valid values:

*   **BlackHole**: routes network traffic to a black hole. All packets that match this route are dropped. If you select this option, you do not need to specify the next hop information.
*   **Attachment**: routes network traffic to a network instance connection. If you select this option, you must specify the ID of the network instance connection. All packets that match this route are routed to the specified network instance connection.', example='BlackHole', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', description='The route table IDs of the Enterprise Edition transit router.', example='vtb-bp1dudbh2d5na6b50****', position='Query'),
}

model CreateTransitRouterRouteEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='835E7F4B-B380-4E0F-96A5-6EA572388047'),
  transitRouterRouteEntryId?: string(name='TransitRouterRouteEntryId', description='The ID of the route.', example='rte-75eg4jprkvk0pw****'),
}

model CreateTransitRouterRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterRouteEntryResponseBody(name='body'),
}

/**
  * **CreateTransitRouterRouteEntry** is an asynchronous operation. After you send a request, the system returns a route ID and runs the task in the background. You can call the **ListTransitRouterRouteEntries** operation to query the status of a route.
  * *   If a route is in the **Creating** state, the route is being created. In this case, you can query the route but cannot perform other operations.
  * *   If a route is in the **Active** state, the route is created.
  *
 */
async function createTransitRouterRouteEntry(request: CreateTransitRouterRouteEntryRequest): CreateTransitRouterRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouterRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterRouteTableRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **false** (default): performs a dry run and sends the request.
*   **true**: performs a dry run. The system checks the required parameters and the request syntax. If the request fails the dry run, an error message is returned. If the request passes the dry run, the system returns the ID of the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableOptions?: {
    multiRegionECMP?: string(name='MultiRegionECMP', example='disable'),
  }(name='RouteTableOptions', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='test'),
      value?: string(name='Value', description='The tag value.

The tag value can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key must have a unique tag value. You can specify at most 20 tag values in each call.', example='tagtest'),
    }
  ](name='Tag', description='The information about the tags.

You can specify at most 20 tags in each call.', position='Query'),
  transitRouterId: string(name='TransitRouterId', description='The ID of the Enterprise Edition transit router.', example='tr-bp1su1ytdxtataupl****', position='Query'),
  transitRouterRouteTableDescription?: string(name='TransitRouterRouteTableDescription', description='The description of the custom route table.

The description must be 2 to 256 characters in length, and can contain letters, digits, and the following special characters: , . ; / @ \\_ -. You can also leave the description empty.', example='testdesc', position='Query'),
  transitRouterRouteTableName?: string(name='TransitRouterRouteTableName', description='The name of the custom route table.

The name must be 0 to 128 characters in length, and can contain letters, digits, and the following special characters: , . ; / @ \\_ -.', example='testname', position='Query'),
}

model CreateTransitRouterRouteTableResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='599904C8-A3DA-4E5F-83B6-D5364E664247'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId', description='The ID of the custom route table.', example='vtb-bp1xbcgpgcz9axl9m****'),
}

model CreateTransitRouterRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterRouteTableResponseBody(name='body'),
}

/**
  * *   Only Enterprise Edition transit routers support custom route tables. For more information about the regions and zones that support Enterprise Edition transit routers, see [What is CEN?](~~181681~~)
  * *   **CreateTransitRouterRouteTable** is an asynchronous operation. After you send a request, the system returns a route table ID and runs the task in the background. You can call the **ListTransitRouterRouteTables** operation to query the status of a route table.
  *     *   If a route table is in the **Creating** state, the route table is being created. In this case, you can query the route table but cannot perform other operations.
  *     *   If a route table is in the **Active** state, the route table is created.
  *
 */
async function createTransitRouterRouteTable(request: CreateTransitRouterRouteTableRequest): CreateTransitRouterRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouterRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterVbrAttachmentRequest {
  autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled', description='Specifies whether to enable the Enterprise Edition transit router to automatically advertise routes to the VBR. Valid values:

*   **false** (default): no
*   **true**: yes', example='false', position='Query'),
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-j3jzhw1zpau2km****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Default values:

*   **false** (default): performs a dry run and sends the request.
*   **true**: performs a dry run. The system checks the required parameters and request syntax. If the request fails the dry run, an error message is returned. If the request passes the dry run, the system returns the ID of the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the VBR.

You can call the [DescribeRegions](~~36063~~) operation to obtain the region ID.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='TagKey'),
      value?: string(name='Value', description='The tag value.

The tag value can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key must have a unique tag value. You can specify at most 20 tag values in each call.', example='TagValue'),
    }
  ](name='Tag', description='The information about the tags.

You can specify at most 20 tags in each call.', position='Query'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', description='The description of the VBR connection.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='testdesc', position='Query'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', description='The name of the VBR connection.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='testname', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the Enterprise Edition transit router.', example='tr-bp1su1ytdxtataupl****', position='Query'),
  vbrId: string(name='VbrId', description='The ID of the VBR.', example='vbr-bp1svadp4lq38janc****', position='Query'),
  vbrOwnerId?: long(name='VbrOwnerId', description='The ID of the Alibaba Cloud account to which the VBR belongs. The default value is the ID of the current Alibaba Cloud account.

> If the network instance and the CEN instance belong to different Alibaba Cloud accounts, this parameter is required.', example='1250123456123456', position='Query'),
}

model CreateTransitRouterVbrAttachmentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C087A369-82B9-43EF-91F4-4B63A9C6E6B6'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the VBR connection.', example='tr-attach-ia340z7xis7t5s****'),
}

model CreateTransitRouterVbrAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterVbrAttachmentResponseBody(name='body'),
}

/**
  * *   For more information about the regions and zones that support Enterprise Edition transit routers, see [What is CEN?](~~181681~~)
  * *   You can use the following methods to connect a VBR to an Enterprise Edition transit router:
  *     *   If an Enterprise Edition transit router is already created in the region where you want to create a VBR connection, set the **VbrId** and **TransitRouterId** parameters.
  *     *   If no Enterprise Edition transit router is created in the region where you want to create a VBR connection, set the **VbrId**, **CenId**, and **RegionId** parameters. Then, the system automatically creates an Enterprise Edition transit router in the specified region.
  * *   **CreateTransitRouterVbrAttachment** is an asynchronous operation. After you send a request, the system returns a VBR connection ID and runs the task in the background. You can call the **ListTransitRouterVbrAttachments** operation to query the status of a VBR connection.
  *     *   If a VBR is in the **Attaching** state, the VBR connection is being created. You can query the VBR connection but cannot perform other operations.
  *     *   If a VBR connection is in the **Attached** state, the VBR connection is created.
  *
 */
async function createTransitRouterVbrAttachment(request: CreateTransitRouterVbrAttachmentRequest): CreateTransitRouterVbrAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouterVbrAttachment', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterVpcAttachmentRequest {
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-j3jzhw1zpau2km****', position='Query'),
  chargeType?: string(name='ChargeType', description='The billing method. The default value is **POSTPAY**, which specifies the pay-as-you-go billing method.', example='POSTPAY', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Default values:

*   **false** (default): performs a dry run and sends the request.
*   **true**: performs a dry run. The system checks the required parameters and request syntax. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the VPC is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='tagtest'),
      value?: string(name='Value', description='The tag value.

The tag value can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key must have a unique tag value. You can specify at most 20 tag values in each call.', example='tagtest'),
    }
  ](name='Tag', description='The information about the tags.

You can specify at most 20 tags in each call.', position='Query'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', description='The description of the VPC connection.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='testname', position='Query'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', description='The name of the VPC connection.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='testname', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the Enterprise Edition transit router.', example='tr-bp1su1ytdxtataupl****', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC.', example='vpc-bp1kbjcre9vtsebo1****', position='Query'),
  vpcOwnerId?: long(name='VpcOwnerId', description='The ID of the Alibaba Cloud account to which the VPC belongs. The default value is the ID of the current Alibaba Cloud account.

> If the network instance and CEN instance belong to different Alibaba Cloud accounts, this parameter is required.', example='1250123456123456', position='Query'),
  zoneMappings: [ 
    {
      vSwitchId: string(name='VSwitchId', description='A vSwitch that is deployed in the zone that supports Enterprise Edition transit routers.

You can specify vSwitches for at most 10 zones in each call.', example='vsw-bp1a214sbus8z3b54****'),
      zoneId: string(name='ZoneId', description='The ID of the zone that supports Enterprise Edition transit routers.

You can call the [DescribeZones](~~36064~~) operation to query the most recent zone list.

You can specify at most 10 zones in each call.', example='cn-hangzhou-h'),
    }
  ](name='ZoneMappings', description='A zone that supports Enterprise Edition transit routers.

You can specify at most 10 zones.', position='Query'),
}

model CreateTransitRouterVpcAttachmentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C087A369-82B9-43EF-91F4-4B63A9C6E6B6'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the VPC connection.', example='tr-attach-ia340z7xis7t5s****'),
}

model CreateTransitRouterVpcAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterVpcAttachmentResponseBody(name='body'),
}

/**
  * *   You can use the following methods to connect a VPC to an Enterprise Edition transit router:
  *     *   If an Enterprise Edition transit router is already created in the region where you want to create a VPC connection, set **VpcId**, **ZoneMappings.N.VSwitchId**, **ZoneMappings.N.ZoneId**, and **TransitRouterId**.
  *     *   If no Enterprise Edition transit router is created in the region where you want to create a VPC connection, set **VpcId**, **ZoneMappings.N.VSwitchId**, **ZoneMappings.N.ZoneId**, **CenId**, and **RegionId**. When you create a VPC connection, the system automatically creates an Enterprise Edition transit router in the specified region.
  * *   **CreateTransitRouterVpcAttachment** is an asynchronous operation. After you send a request, the system returns a VPC connection ID and runs the task in the background. You can call the [ListTransitRouterVpcAttachments](~~261222~~) operation to query the status of a VPC connection.
  *     *   If a VPC is in the **Attaching** state, the VPC connection is being created. You can query the VPC connection but cannot perform other operations.
  *     *   If a VPC connection is in the **Attached** state, the VPC connection is created.
  * *   By default, route learning and associated forwarding are disabled between transit router route tables and VPC connections.
  * ## Prerequisites
  * Before you call this operation, make sure that the following requirements are met:
  * *   At least one vSwitch is deployed for the VPC in the zones supported by Enterprise Edition transit routers. Each vSwitch must have at least one idle IP address. For more information, see [Regions and zones supported by Enterprise Edition transit routers](~~181681~~).
  * *   To connect to a network instance that belongs to another Alibaba Cloud account, you must first acquire the required permissions from the account. For more information, see [Acquire permissions to connect to a network instance that belongs to another account](~~181553~~).
  * *   VPC connections incur fees. Take note of the billing rules of VPC connections before you create a VPC connection. For more information, see [Billing](~~189836~~).
  *
 */
async function createTransitRouterVpcAttachment(request: CreateTransitRouterVpcAttachmentRequest): CreateTransitRouterVpcAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouterVpcAttachment', 'POST', '/', 'json', false, 'json', request);
}

model CreateTransitRouterVpnAttachmentRequest {
  autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled', description='Specifies whether to allow the transit router to automatically advertise routes to the IPsec-VPN connection. Valid values:

*   **true** (default): yes
*   **false**: no', example='true', position='Query'),
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-rsgxs8ng2awen2****', position='Query'),
  chargeType?: string(name='ChargeType', description='The billing method.

Set the value to **POSTPAY**, which is the default value and specifies the pay-as-you-go billing method.', example='POSTPAY', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The ClientToken value contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the transit router is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

The tag key cannot be an empty string. The tag key can be up to 64 characters in length, and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='TagKey'),
      value?: string(name='Value', description='The tag value.

The tag value can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key must have a unique tag value. You can specify at most 20 tag values in each call.', example='TagValue'),
    }
  ](name='Tag', description='The information about the tags.

You can specify at most 20 tags in each call.', position='Query'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', description='The description of the VPN attachment.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='desctest', position='Query'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', description='The name of the VPN attachment.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='nametest', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-p0wm740vjnbaprv0m****', position='Query'),
  vpnId: string(name='VpnId', description='The ID of the IPsec-VPN connection.', example='vco-p0w042cqwvlhl4zyw****', position='Query'),
  vpnOwnerId?: long(name='VpnOwnerId', description='The ID of the Alibaba Cloud account to which the IPsec-VPN connection belongs.

*   If you do not set this parameter, the ID of the current Alibaba Cloud account is used.
*   You must set VpnOwnerId if you want to connect the transit router to an IPsec-VPN connection that belongs to another Alibaba Cloud account.', example='1210123456123456', position='Query'),
  zone: [ 
    {
      zoneId: string(name='ZoneId', description='The ID of the zone.

You can call the [ListTransitRouterAvailableResource](~~261356~~) operation to query the most recent zone list.', example='ap-southeast-2a'),
    }
  ](name='Zone', description='The ID of the zone in the current region.

Resources are deployed in the specified zone.', position='Query'),
}

model CreateTransitRouterVpnAttachmentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8B5DD40A-3A29-5AC0-B8DA-05FD10D5C893'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the VPN attachment.', example='tr-attach-y5dup2qwfyh9lu****'),
}

model CreateTransitRouterVpnAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterVpnAttachmentResponseBody(name='body'),
}

/**
  * *   By default, route learning and associated forwarding are disabled between transit router route tables and VPN attachments.
  * *   When you call `CreateTransitRouterVpnAttachment`, if you set **CenId** and **RegionId**, you do not need to set **TransitRouterId**. If you set **TransitRouterId** and **RegionId**, you do not need to set **CenId**.
  * ## Prerequisites
  * *   Before you attach an IPsec-VPN connection to a transit router, make sure that at least one IPsec-VPN connection is created in the region where the transit router is deployed. Make sure the IPsec-VPN connection is not associated with a resource. For more information, see [CreateVpnAttachment](~~442455~~).
  * *   If the IPsec-VPN connection to be attached to the transit router belongs to a different Alibaba Cloud account, make sure that the transit router has obtained the required permissions from the IPsec-VPN connection. For more information, see [GrantInstanceToTransitRouter](~~417520~~).
  *
 */
async function createTransitRouterVpnAttachment(request: CreateTransitRouterVpnAttachmentRequest): CreateTransitRouterVpnAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTransitRouterVpnAttachment', 'POST', '/', 'json', false, 'json', request);
}

model DeactiveFlowLogRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId for each API request may be different.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  flowLogId: string(name='FlowLogId', description='The ID of the flow log.', example='flowlog-m5evbtbpt****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the flow log is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeactiveFlowLogResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', description='Indicates whether the call is successful. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
}

model DeactiveFlowLogResponse = {
  headers: map[string]string(name='headers'),
  body: DeactiveFlowLogResponseBody(name='body'),
}

/**
  * `DeactiveFlowLog` is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the `DescribeFlowlogs` operation to query the status of a flow log.
  * *   If a flow log is in the **Modifying** state, the flow log is being disabled. You can query the flow log but cannot perform other operations.
  * *   If a flow log is in the **Inactive** state, the flow log is disabled.
  *
 */
async function deactiveFlowLog(request: DeactiveFlowLogRequest): DeactiveFlowLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeactiveFlowLog', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCenResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5903EE99-D542-4E14-BC65-AAC1CB2D3D03'),
}

model DeleteCenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenResponseBody(name='body'),
}

/**
  * **DeleteCen** is an asynchronous operation. After you send a request, the **request ID** is returned but the operation is still being performed in the system background. You can call **DescribeCens** to query the status of a CEN instance.   
  * - If a CEN instance is in the **Deleting** state, the CEN instance is being deleted. In this case, you can query the CEN instance but cannot perform other operations.
  * - If a CEN instance cannot be found, the CEN instance is deleted.
  * ## Prerequisites
  * The CEN instance that you want to delete is not associated with a bandwidth plan, and the transit router associated with the CEN instance does not have a network instance connection or a custom route table. 
  * - For more information about how to detach a network instance, see the following topics:   - [DeleteTransitRouterVpcAttachment](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/deletetransitroutervpcattachment)
  *   - [DeleteTransitRouterVbrAttachment](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/deletetransitroutervbrattachment)
  *   - [DeleteTransitRouterVpnAttachment](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/deletetransitroutervpnattachment)
  *   - [DeleteTransitRouterPeerAttachment](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/deletetransitrouterpeerattachment)>  For more information about how to detach network instances from a Basic Edition transit router, see [DetachCenChildInstance](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/detachcenchildinstance).
  * - For more information about how to delete a custom route table, see [DeleteTransitRouterRouteTable](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/deletetransitrouterroutetable).
  * - For more information about how to disassociate a bandwidth plan from a CEN instance, see [UnassociateCenBandwidthPackage](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/unassociatecenbandwidthpackage).
  *
 */
async function deleteCen(request: DeleteCenRequest): DeleteCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCen', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenBandwidthPackageRequest {
  cenBandwidthPackageId: string(name='CenBandwidthPackageId', description='The ID of the bandwidth plan that you want to delete.', example='cenbwp-4c2zaavbvh5f42****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCenBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C0245BEF-52AC-44A8-A776-EF96FD26A5CA'),
}

model DeleteCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenBandwidthPackageResponseBody(name='body'),
}

/**
  * Before you delete a bandwidth plan, make sure that it is disassociated from all Cloud Enterprise Network (CEN) instances. For more information, see [UnassociateCenBandwidthPackage](~~65935~~).
  *
 */
async function deleteCenBandwidthPackage(request: DeleteCenBandwidthPackageRequest): DeleteCenBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCenBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenChildInstanceRouteEntryToAttachmentRequest {
  cenId: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-wgcl0ik5o8jakq****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', description='The destination CIDR block of the route.', example='10.0.1.0/24', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a precheck to check information such as the permissions and instance status. Valid values:

*   **false**: performs a precheck. The route is deleted after the request passes the precheck. This is the default value.
*   **true**: performs a precheck. The route is not deleted. If you use this value, the system checks the required parameters and the request syntax. If the request fails to pass the precheck, an error message is returned. If the request passes the check, the system returns the ID of the request.

>  This parameter is not in use.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', description='The ID of the route table configured on the network instance.', example='vtb-bp1osd9opvegfpowc****', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-r1qhupkc19iadz****', position='Query'),
}

model DeleteCenChildInstanceRouteEntryToAttachmentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='250E717B-9823-5FD8-A1C6-5714234FB825'),
}

model DeleteCenChildInstanceRouteEntryToAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenChildInstanceRouteEntryToAttachmentResponseBody(name='body'),
}

/**
  * ## Usage notes
  * *   You can delete routes only from virtual private clouds (VPCs) and virtual border routers (VBRs) whose next hop is an **Enterprise Edition transit router connection**, which is the connection to the network instance.
  * *   **DeleteCenChildInstanceRouteEntryToAttachment** is an asynchronous operation. After you send a request, the **request ID** is returned but the operation is still being performed in the system background. You can call **DescribeRouteEntryList** to query the status of a route.
  *     *   If a route is in the **Deleting** state, the route is being deleted. You can query the route but cannot perform other operations.
  *     *   If a route cannot be found, the route is deleted.
  *
 */
async function deleteCenChildInstanceRouteEntryToAttachment(request: DeleteCenChildInstanceRouteEntryToAttachmentRequest): DeleteCenChildInstanceRouteEntryToAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCenChildInstanceRouteEntryToAttachment', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenChildInstanceRouteEntryToCenRequest {
  cenId: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-7febra5nqj7jjh****', position='Query'),
  childInstanceAliUid?: long(name='ChildInstanceAliUid', description='The ID of the Alibaba Cloud account to which the network instance belongs.

> If the network instance belongs to another Alibaba Cloud account, this parameter is required.', example='1787100000000000', position='Query'),
  childInstanceId: string(name='ChildInstanceId', description='The ID of the network instance.', example='vpc-k1alm2jbuwibhxtx2****', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='ap-southeast-5', position='Query'),
  childInstanceType: string(name='ChildInstanceType', description='The type of the network instance. Valid values:

*   **VPC**: a virtual private cloud (VPC)
*   **VBR**: a virtual border router (VBR)', example='VPC', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', description='The destination CIDR block of the route entry.

Specify the value of this parameter in CIDR notation. Example: 192.168.10.0/24.', example='192.168.22.0/24', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableId: string(name='RouteTableId', description='The ID of the route table configured on the network instance.', example='vtb-k1aa8ulqs39f86op8****', position='Query'),
}

model DeleteCenChildInstanceRouteEntryToCenResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C05000A4-2FC5-5B2C-9527-954044DE2CF3'),
}

model DeleteCenChildInstanceRouteEntryToCenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenChildInstanceRouteEntryToCenResponseBody(name='body'),
}

/**
  * ## Limits
  * *   By default, the DeleteCenChildInstanceRouteEntryToCen operation is unavailable. To call this operation,[submit a ticket](https://workorder-intl.console.aliyun.com/#/ticket/createIndex).
  * *   You cannot delete a route entry from an Enterprise Edition transit router by calling the DeleteCenChildInstanceRouteEntryToCen operation.
  *
 */
async function deleteCenChildInstanceRouteEntryToCen(request: DeleteCenChildInstanceRouteEntryToCenRequest): DeleteCenChildInstanceRouteEntryToCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCenChildInstanceRouteEntryToCen', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenInterRegionTrafficQosPolicyRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Default value: false. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): performs a dry run and sends the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficQosPolicyId: string(name='TrafficQosPolicyId', description='The ID of the QoS policy.', example='qos-eczzew0v1kzrb5****', position='Query'),
}

model DeleteCenInterRegionTrafficQosPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6DF9A765-BCD2-5C7E-8C32-C35C8A361A39'),
}

model DeleteCenInterRegionTrafficQosPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenInterRegionTrafficQosPolicyResponseBody(name='body'),
}

/**
  * *   Before you delete a QoS policy, you must delete all queues in the QoS policy except the default queue. For more information, see [DeleteCenInterRegionTrafficQosQueue](~~419062~~).
  * *   **DeleteCenInterRegionTrafficQosPolicy** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the **ListCenInterRegionTrafficQosPolicies** operation to query the status of a QoS policy.
  *     *   If a QoS policy is in the **Deleting** state, the QoS policy is being deleted. You can query the QoS policy but cannot perform other operations.
  *     *   If a QoS policy cannot be found, the QoS policy is deleted.
  *
 */
async function deleteCenInterRegionTrafficQosPolicy(request: DeleteCenInterRegionTrafficQosPolicyRequest): DeleteCenInterRegionTrafficQosPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCenInterRegionTrafficQosPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenInterRegionTrafficQosQueueRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosQueueId: string(name='QosQueueId', description='The ID of the queue.', example='qos-queue-nv2vfzqkewhk4t****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteCenInterRegionTrafficQosQueueResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6DF9A765-BCD2-5C7E-8C32-C35C8A361A39'),
}

model DeleteCenInterRegionTrafficQosQueueResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenInterRegionTrafficQosQueueResponseBody(name='body'),
}

/**
  * *   You cannot delete the default queue.
  * *   **DeleteCenInterRegionTrafficQosQueue** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the **ListCenInterRegionTrafficQosPolicies** operation to query the status of a queue. If a queue cannot be found, the queue is deleted.
  *
 */
async function deleteCenInterRegionTrafficQosQueue(request: DeleteCenInterRegionTrafficQosQueueRequest): DeleteCenInterRegionTrafficQosQueueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCenInterRegionTrafficQosQueue', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCenRouteMapRequest {
  cenId: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-7qthudw0ll6jm****', position='Query'),
  cenRegionId: string(name='CenRegionId', description='The ID of the region in which the routing policy is applied.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeMapId: string(name='RouteMapId', description='The ID of the routing policy.', example='cenrmap-abcdedfghij****', position='Query'),
}

model DeleteCenRouteMapResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5903EE99-D542-4E14-BC65-AAC1CB2D3D03'),
}

model DeleteCenRouteMapResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenRouteMapResponseBody(name='body'),
}

/**
  * `DeleteCenRouteMap` is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the `DescribeCenRouteMaps` operation to query the status of a routing policy.
  * *   If a routing policy is in the **Deleting** state, the routing policy is being deleted. You can query the routing policy but cannot perform other operations.
  * *   If a routing policy cannot be found, it is deleted.``
  *
 */
async function deleteCenRouteMap(request: DeleteCenRouteMapRequest): DeleteCenRouteMapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCenRouteMap', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFlowlogRequest {
  cenId: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can only contain ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId for each API request may be different.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  flowLogId: string(name='FlowLogId', description='The ID of the flow log.', example='flowlog-m5evbtbpt****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the flow log is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteFlowlogResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', description='Indicates whether the call is successful.

*   **true**: yes
*   **false**: no', example='true'),
}

model DeleteFlowlogResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowlogResponseBody(name='body'),
}

/**
  * The `DeleteFlowlog` operation is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the `DescribeFlowlogs` operation to query the status of a flow log.
  * *   If a flow log is in the **Deleting** state, the flow log is being deleted. In this case, you can query the flow log but cannot perform other operations.
  * *   If a flow log cannot be found, the flow log is deleted.``
  *
 */
async function deleteFlowlog(request: DeleteFlowlogRequest): DeleteFlowlogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlowlog', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRouteServiceInCenRequest {
  accessRegionId: string(name='AccessRegionId', description='The ID of the region in which the network instance of the cloud service that you want to access is deployed.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  cenId: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  host: string(name='Host', description='The IP addresses or CIDR blocks of the cloud service.', example='100.118.28.0/24', position='Query'),
  hostRegionId: string(name='HostRegionId', description='The ID of the region in which the cloud service is deployed.', example='cn-hangzhou', position='Query'),
  hostVpcId?: string(name='HostVpcId', description='The ID of the virtual private cloud (VPC) that is associated with the cloud service.', example='vpc-bp1t36rn9l53iwbsf****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteRouteServiceInCenResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2315DEB7-5E92-423A-91F7-4C1EC9AD97C3'),
}

model DeleteRouteServiceInCenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRouteServiceInCenResponseBody(name='body'),
}

/**
  * ## Usage notes
  * **DeleteRouteServiceInCen** is an asynchronous operation. After you send a request, the system returns the **request ID** but the operation is still being performed in the system background. You can call **DescribeRouteServicesInCen** to query the status of the connection to a cloud service.
  * *   If a cloud service is in the **Deleting** state, the connection to the cloud service is being deleted. You can query the connection but you cannot perform other operations.
  * *   If no connection to a cloud service can be found, the connection to the cloud service is deleted.
  *
 */
async function deleteRouteServiceInCen(request: DeleteRouteServiceInCenRequest): DeleteRouteServiceInCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRouteServiceInCen', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTrafficMarkingPolicyRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the DryRunOperation error code is returned.
*   **false** (default): performs a dry run and sends the request. If the request passes the dry run, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMarkingPolicyId: string(name='TrafficMarkingPolicyId', description='The ID of the traffic marking policy.', example='tm-u9nxup5kww5po8****', position='Query'),
}

model DeleteTrafficMarkingPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5F1F3A57-A753-572B-8F71-4F964398C566'),
}

model DeleteTrafficMarkingPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrafficMarkingPolicyResponseBody(name='body'),
}

/**
  * *   The **DeleteTrafficMarkingPolicy** operation is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call **ListTrafficMarkingPolicies** to query the status of a traffic marking policy.
  *     *   If a traffic marking policy is in the **Deleting** state, the traffic marking policy is being deleted. You can query the traffic marking policy, but cannot perform other operations.
  *     *   If a traffic marking policy cannot be found, the traffic marking policy is deleted.
  * *   Before you delete a traffic marking policy, you must delete all traffic classification rules from the policy. For more information, see [RemoveTraficMatchRuleFromTrafficMarkingPolicy](~~419012~~).
  *
 */
async function deleteTrafficMarkingPolicy(request: DeleteTrafficMarkingPolicyRequest): DeleteTrafficMarkingPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTrafficMarkingPolicy', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouteTableAggregationRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId may be different for each request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **false** (default): performs a dry run and sends the request.
*   **true**: performs a dry run. The system checks the required parameters and the request syntax. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouteTableAggregationCidr: string(name='TransitRouteTableAggregationCidr', description='The destination CIDR block of the aggregate route.', example='192.168.10.0/24', position='Query'),
  transitRouteTableId: string(name='TransitRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-6ehgc262hr170qgyc****', position='Query'),
}

model DeleteTransitRouteTableAggregationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C2EE7A8-74D4-4081-8236-CEBDE3BBCF50'),
}

model DeleteTransitRouteTableAggregationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouteTableAggregationResponseBody(name='body'),
}

/**
  * *   Before you delete an aggregate route, make sure that your network has a redundant route to prevent service interruptions.
  * *   After an aggregate route is deleted, the aggregate route is automatically withdrawn from virtual private clouds (VPCs). Specific routes that fall within the aggregate route are advertised to the VPCs.
  *
 */
async function deleteTransitRouteTableAggregation(request: DeleteTransitRouteTableAggregationRequest): DeleteTransitRouteTableAggregationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouteTableAggregation', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **false** (default): performs a dry run and sends the request.
*   **true**: performs a dry run. The system checks the required parameters and the request syntax. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterId: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-uf654ttymmljlvh2x****', position='Query'),
}

model DeleteTransitRouterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6DE3EE92-39C8-4BBD-A3AD-F568D74741BB'),
}

model DeleteTransitRouterResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterResponseBody(name='body'),
}

/**
  * **DeleteTransitRouter** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the **ListTransitRouters** operation to query the status of a transit router.
  * *   If a transit router is in the **Deleting** state, the transit router is being deleted. In this case, you can query the transit router but cannot perform other operations.
  * *   If a transit router cannot be found, the transit router is deleted.
  * ## Prerequisites
  * Before you delete a transit router, make sure that the following prerequisites are met:
  * *   No network instance connections are created on the transit router.
  *     *   For more information about how to delete a virtual private cloud (VPC) connection, see [DeleteTransitRouterVpcAttachment](~~261220~~).
  *     *   For more information about how to delete a virtual border router (VBR) connection, see [DeleteTransitRouterVbrAttachment](~~261223~~).
  *     *   For more information about how to delete a Cloud Connect Network (CCN) connection, see [DetachCenChildInstance](~~65915~~).
  *     *   For more information about how to delete a VPN connection, see [DeleteTransitRouterVpnAttachment](~~443992~~).
  *     *   For more information about how to delete an inter-region connection, see [DeleteTransitRouterPeerAttachment](~~261227~~).
  * *   No custom route tables are created on the transit router. For more information about how to delete a custom route table, see [DeleteTransitRouterRouteTable](~~261235~~).
  *
 */
async function deleteTransitRouter(request: DeleteTransitRouterRequest): DeleteTransitRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouter', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterCidrRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId for each API request may be different.', example='123e4567-e89b-12d3-a456-426****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the request. Valid values:

*   **true**: prechecks the request but does not delete the CIDR block. The system checks the required parameters, the request format, and the service limits. If the request fails to pass the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. If the request passes the precheck, the CIDR block is deleted.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the transit router is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterCidrId: string(name='TransitRouterCidrId', description='The ID of the transit router CIDR block.

You can call [ListTransitRouterCidr](~~462772~~) to query the ID of a transit router CIDR block.', example='cidr-0zv0q9crqpntzz****', position='Query'),
  transitRouterId: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-p0w3x8c9em72a40nw****', position='Query'),
}

model DeleteTransitRouterCidrResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0876E54E-3E36-5C31-89F0-9EE8A9266F9A'),
}

model DeleteTransitRouterCidrResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterCidrResponseBody(name='body'),
}

/**
  * ## Usage notes
  * If IP addresses within the CIDR block have been allocated to network instances, the CIDR block cannot be deleted.
  *
 */
async function deleteTransitRouterCidr(request: DeleteTransitRouterCidrRequest): DeleteTransitRouterCidrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouterCidr', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterMulticastDomainRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can only contain ASCII characters.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the API request. Valid values:

*   **true**: prechecks the request but does not delete the multicast domain. The system checks the required parameters, the request format, and the service limits. If the request fails the check, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. After the request passes the precheck, the multicast domain is deleted.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterMulticastDomainId: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast domain.', example='tr-mcast-domain-40cwj0rgzgdtam****', position='Query'),
}

model DeleteTransitRouterMulticastDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='40194E53-2484-5831-BB53-E11D123C1A32'),
}

model DeleteTransitRouterMulticastDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterMulticastDomainResponseBody(name='body'),
}

/**
  * Before you delete a multicast domain, make sure that the following requirements are met:
  * *   The multicast domain is disassociated from all vSwitches. For more information, see [DisassociateTransitRouterMulticastDomain](~~429774~~).
  * *   All multicast sources and members are removed from the multicast domain. For more information, see [DeregisterTransitRouterMulticastGroupSources](~~429776~~) and [DeregisterTransitRouterMulticastGroupMembers](~~429779~~).
  * *   The multicast domain is not added to other multicast domains as a multicast member. If the multicast domain is added to another multicast domain as a multicast member, you must remove the multicast domain from the other multicast domain. For more information, see [DeregisterTransitRouterMulticastGroupMembers](~~429779~~).
  *
 */
async function deleteTransitRouterMulticastDomain(request: DeleteTransitRouterMulticastDomainRequest): DeleteTransitRouterMulticastDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouterMulticastDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterPeerAttachmentRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run to check information such as the permissions and instance status. Valid values:

*   **false** (default): performs a dry run and sends the request.
*   **true**: performs a dry run. The system checks the required parameters and the request syntax. If the request fails the dry run, an error message is returned. If the request passes the dry run, the system returns the ID of the request.', example='false', position='Query'),
  force?: boolean(name='Force', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the inter-region connection.', example='tr-attach-gyjhtx9sjsxhm6****', position='Query'),
}

model DeleteTransitRouterPeerAttachmentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A01FEDD7-7D69-4EB3-996D-CF79F6F885CA'),
}

model DeleteTransitRouterPeerAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterPeerAttachmentResponseBody(name='body'),
}

/**
  * **DeleteTransitRouterPeerAttachment** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the system background. You can call the **ListTransitRouterPeerAttachments** operation to query the status of an inter-region connection.
  * *   If an inter-region connection is in the **Detaching** state, the inter-region connection is being deleted. You can query the inter-region connection but cannot perform other operations.
  * *   If an inter-region connection cannot be found, the inter-region connection is deleted.
  * ## Prerequisites
  * Before you begin, make sure that the Enterprise Edition transit router that you use to create inter-region connections meets the following prerequisites:
  * *   No associated forwarding correlation is established between the inter-region connection and the route tables of the Enterprise Edition transit router. For more information about how to delete an associated forwarding correlation, see [DissociateTransitRouterAttachmentFromRouteTable](~~260944~~).
  * *   No route learning correlation is established between the inter-region connection and the route tables of the Enterprise Edition transit router. For more information about how to delete a route learning correlation, see [DisableTransitRouterRouteTablePropagation](~~260945~~).
  * *   The route tables of the Enterprise Edition transit router do not contain a custom route entry whose next hop is the network instance connection. For more information about how to delete custom routes from route tables of Enterprise Edition transit routers, see [DeleteTransitRouterRouteEntry](~~261240~~).
  * *   The route table does not contain a route whose next hop is the inter-region connection and that is generated from a prefix list. You can delete routes from a route table by disassociating the route table from the prefix list. For more information, see [DeleteTransitRouterPrefixListAssociation](~~445486~~).
  * *   No quality of service (QoS) policy is configured for the inter-region connection. For more information about how to delete QoS policies, see [DeleteCenInterRegionTrafficQosPolicy](~~427547~~).
  *
 */
async function deleteTransitRouterPeerAttachment(request: DeleteTransitRouterPeerAttachmentRequest): DeleteTransitRouterPeerAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouterPeerAttachment', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterPrefixListAssociationRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** of each API request may be different.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to check the request. Valid values:

*   **true**: prechecks the request but does not disassociate the route table from the prefix list. The system checks the required parameters, the request format, and the service limits. If the request fails to pass the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): prechecks the request. If the request passes the check, the route table is disassociated from the prefix list.', example='false', position='Query'),
  nextHop: string(name='NextHop', description='The ID of the next hop connection.

>  If **NextHopType** is set to **BlackHole**, set this parameter to **BlackHole**.', example='tr-attach-flbq507rg2ckrj****', position='Query'),
  nextHopType?: string(name='NextHopType', description='The type of the next hop. Valid values:

*   **BlackHole**: specifies that all the CIDR blocks in the prefix list are blackhole routes. Packets destined for the CIDR blocks are dropped.
*   **VPC**: specifies that the next hop of the CIDR blocks in the prefix list is a virtual private cloud (VPC) connection.
*   **VBR**: specifies that the next hop of the CIDR blocks in the prefix list is a virtual border router (VBR) connection.
*   **TR**: specifies that the next hop of the CIDR blocks in the prefix list is an inter-region connection.', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-6ehtn5kqxgeyy08fi****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the transit router is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterId: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-6ehx7q2jze8ch5ji0****', position='Query'),
  transitRouterTableId: string(name='TransitRouterTableId', description='The ID of the route table of the transit router.', example='vtb-6ehgc262hr170qgyc****', position='Query'),
}

model DeleteTransitRouterPrefixListAssociationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='835E7F4B-B380-4E0F-96A5-6EA572388047'),
}

model DeleteTransitRouterPrefixListAssociationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterPrefixListAssociationResponseBody(name='body'),
}

/**
  * ## Usage notes
  * After you disassociate a route table of an Enterprise Edition transit router from a prefix list, the routes that point to the CIDR blocks in the prefix list are automatically withdrawn from the route table. Before you disassociate the route table of an Enterprise Edition transit router from a prefix list, you must migrate workloads that use the routes in case services are interrupted.
  *
 */
async function deleteTransitRouterPrefixListAssociation(request: DeleteTransitRouterPrefixListAssociationRequest): DeleteTransitRouterPrefixListAssociationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouterPrefixListAssociation', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterRouteEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.

> If you do not specify this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request but not perform the operation. The system checks the permissions and the status of the specified instances. Valid values:

*   **false** (default): sends the request. If the request passes the precheck, the route is deleted.
*   **true**: sends a precheck request. The route is not deleted after the request passes the precheck. If you use this value, the system checks the required parameters and the request syntax. If the check fails, the corresponding error message is returned. If the request passes the check, the system returns the ID of the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterRouteEntryDestinationCidrBlock?: string(name='TransitRouterRouteEntryDestinationCidrBlock', description='The destination CIDR block.', example='192.168.0.0/24', position='Query'),
  transitRouterRouteEntryId?: string(name='TransitRouterRouteEntryId', description='The ID of the route entry.', example='rte-75eg4jprkvk0pw****', position='Query'),
  transitRouterRouteEntryNextHopId?: string(name='TransitRouterRouteEntryNextHopId', description='The ID of the network instance connection that you want to specify as the next hop.', example='tr-attach-nls9fzkfat8934****', position='Query'),
  transitRouterRouteEntryNextHopType?: string(name='TransitRouterRouteEntryNextHopType', description='The type of the next hop. Valid values:

*   **BlackHole**: a blackhole route. You do not need to specify a next hop.
*   **Attachment**: a network instance connection. You must specify a network instance connection as the next hop.', example='BlackHole', position='Query'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-bp1dudbh2d5na6b50****', position='Query'),
}

model DeleteTransitRouterRouteEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2D69CCEA-42D0-48B2-8C9A-9BB207F76D6E'),
}

model DeleteTransitRouterRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterRouteEntryResponseBody(name='body'),
}

/**
  * Before you call this operation, take note of the following items:
  * *   If **TransitRouterRouteEntryId** is set, you must not set **TransitRouterRouteTableId** or **TransitRouterRouteEntryDestinationCidrBlock**. Otherwise, parameter conflicts will occur.
  * *   If **TransitRouterRouteEntryId** is not set, you must specify the set parameters based on the type of the next hop:
  *     *   To delete a blackhole route, you must set **TransitRouterRouteTableId**, **TransitRouterRouteEntryDestinationCidrBlock**, and **TransitRouterRouteEntryNextHopType**.
  *     *   If the route that you want to delete is not a blackhole route, you must set **TransitRouterRouteTableId**, **TransitRouterRouteEntryDestinationCidrBlock**, **TransitRouterRouteEntryNextHopType**, and **TransitRouterRouteEntryNextHopId**.
  * *   **DeleteTransitRouterRouteEntry** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the system background. You can call the **ListTransitRouterRouteEntries** operation to query the status of a route entry.
  *     *   If a route entry is in the **Deleting** state, the route entry is being deleted. You can query the route entry but cannot perform other operations.
  *     *   If a route entry cannot be found, it is deleted.
  * ## Limits
  * You can call this operation to delete only static routes. Automatically learned routes are not supported. You can call the [ListTransitRouterRouteEntries](~~260941~~) operation to query route types.
  *
 */
async function deleteTransitRouterRouteEntry(request: DeleteTransitRouterRouteEntryRequest): DeleteTransitRouterRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouterRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterRouteTableRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.

>  If you do not specify this parameter, the system automatically uses the value of **RequestId** as the value of **ClientToken**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **false** (default): performs a dry run and sends the request. If the request passes the dry run, the custom route table is deleted.
*   **true**: performs a dry run. The system checks whether the required parameters are set, and whether the request syntax is valid. If the request fails the dry run, an error message is returned. If the request passes the dry run, the system returns the ID of the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', description='The ID of the custom route table.', example='vtb-bp1xbcgpgcz9axl9m****', position='Query'),
}

model DeleteTransitRouterRouteTableResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EAB2F133-8556-4D7C-9E91-7EE4FE9CC7D2'),
}

model DeleteTransitRouterRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterRouteTableResponseBody(name='body'),
}

/**
  * *   You cannot delete the default route table of an Enterprise Edition transit router.
  * *   The **DeleteTransitRouterRouteTable** operation is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call **ListTransitRouterRouteTables** to query the status of a custom route table.
  *     *   If a custom route table is in the Deleting state, the custom route table is being deleted. In this case, you can query the custom route table but cannot perform other operations.
  *     *   If a custom route table cannot be found, the custom route table is deleted.
  *
 */
async function deleteTransitRouterRouteTable(request: DeleteTransitRouterRouteTableRequest): DeleteTransitRouterRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouterRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterVbrAttachmentRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Default values:

*   **false** (default): performs a dry run and sends the request.
*   **true**: performs a dry run. The system checks the required parameters and the request syntax. If the request fails the dry run, an error message is returned. If the request passes the dry run, the system returns the ID of the request.', example='false', position='Query'),
  force?: boolean(name='Force', description='Specifies whether to forcibly delete the VBR connection. Valid values:

*   **false** (default): checks for resources related to the VBR connection, such as associated forwarding and route learning policies. If such resources exist, the VBR connection is not deleted and an error message is returned.
*   **true**: deletes the VBR connection and related resources.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the VBR connection.', example='tr-attach-9nlnjv7by7n7a****', position='Query'),
}

model DeleteTransitRouterVbrAttachmentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='3EDA94DE-0AE5-41FC-A91E-7170E408E0FD'),
}

model DeleteTransitRouterVbrAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterVbrAttachmentResponseBody(name='body'),
}

/**
  * **DeleteTransitRouterVbrAttachment** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the **ListTransitRouterVbrAttachments** operation to query the status of a VBR connection.
  * *   If a VBR connection is in the **Detaching** state, the VBR connection is being deleted. You can query the VBR connection but cannot perform other operations.
  * *   If a VBR connection cannot be found, the VBR connection is deleted.
  * ## Prerequisites
  * Before you delete a VBR connection for an Enterprise Edition transit router, make sure that the following requirements are met:
  * *   No associated forwarding correlation is established between the VBR connection and the route tables of the Enterprise Edition transit router. For more information about how to delete an associated forwarding correlation, see [DissociateTransitRouterAttachmentFromRouteTable](~~260944~~).
  * *   No route learning correlation is established between the VBR connection and the route tables of the Enterprise Edition transit router. For more information about how to delete a route learning correlation, see [DisableTransitRouterRouteTablePropagation](~~260945~~).
  * *   The route tables of the Enterprise Edition transit router do not contain a custom route entry whose next hop is the network instance connection. For more information about how to delete custom route entries, see [DeleteTransitRouterRouteEntry](~~261240~~).
  * *   The route tables of the Enterprise Edition transit router do not contain a route whose next hop is the VBR connection and that is generated from a prefix list. You can delete such routes by disassociating the route table from the prefix list. For more information, see [DeleteTransitRouterPrefixListAssociation](~~445486~~).
  *
 */
async function deleteTransitRouterVbrAttachment(request: DeleteTransitRouterVbrAttachmentRequest): DeleteTransitRouterVbrAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouterVbrAttachment', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterVpcAttachmentRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Default values:

*   **false** (default): performs a dry run and sends the request.
*   **true**: performs a dry run. The system checks the required parameters and request syntax. If the request fails the dry run, an error message is returned. If the request passes the dry run, the system returns the ID of the request.', example='false', position='Query'),
  force?: boolean(name='Force', description='Specifies whether to forcefully delete the VPC connection. Valid values:

*   **false** (default): checks resources such as associated forwarding correlations and route learning policies that are related to the VPC connection before it is deleted. If such a resource exists, the VPC connection is not deleted and an error message is returned.
*   **true**: deletes the VPC connection and all resources that are related to the VPC connection.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the VPC connection.', example='tr-attach-ia340z7xis7t5s****', position='Query'),
}

model DeleteTransitRouterVpcAttachmentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='7E61D334-4025-41EF-9145-FC327B35301D'),
}

model DeleteTransitRouterVpcAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterVpcAttachmentResponseBody(name='body'),
}

/**
  * **DeleteTransitRouterVpcAttachment** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the **ListTransitRouterVpcAttachments** operation to query the status of a VPC connection.
  * *   If a VPC is in the **Detaching** state, the VPC connection is being deleted. You can query the VPC connection but cannot perform other operations.
  * *   If a VPC connection cannot be found, it is deleted.
  * ## Prerequisites
  * Before you delete a VPC connection, make sure that the following requirements are met:
  * *   No associated forwarding correlation is established between the VPC connection and the route tables of the Enterprise Edition transit router. For more information about how to delete an associated forwarding correlation, see [DissociateTransitRouterAttachmentFromRouteTable](~~260944~~).
  * *   No route learning correlation is established between the VPC connection and the route tables of the Enterprise Edition transit router. For more information about how to delete a route learning correlation, see [DisableTransitRouterRouteTablePropagation](~~260945~~).
  * *   The route table of the VPC does not contain routes that point to the VPC connection. For more information about how to delete routes from a VPC route table, see [DeleteRouteEntry](~~36013~~).
  * *   The route tables of the Enterprise Edition transit router do not contain a custom route entry whose next hop is the network instance connection. For more information about how to delete custom routes from the route tables of an Enterprise Edition transit router, see [DeleteTransitRouterRouteEntry](~~261240~~).
  * *   The route tables of the Enterprise Edition transit router do not contain a route that is generated from a prefix list and the next hop is the VPC connection. You can delete such routes by disassociating the route table from the prefix list. For more information, see [DeleteTransitRouterPrefixListAssociation](~~445486~~).
  *
 */
async function deleteTransitRouterVpcAttachment(request: DeleteTransitRouterVpcAttachmentRequest): DeleteTransitRouterVpcAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouterVpcAttachment', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTransitRouterVpnAttachmentRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the request. Valid values:

*   **true**: prechecks the request but does not delete the VPN connection. The system checks the required parameters, request syntax, and limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. After the request passes the precheck, the VPN connection is deleted.', example='false', position='Query'),
  force?: boolean(name='Force', description='Specifies whether to force to delete the a VPN connection for the Enterprise Edition transit router.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the VPN connection.', example='tr-attach-b9xj1dv69600kj****', position='Query'),
}

model DeleteTransitRouterVpnAttachmentResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FA43C571-E88B-56C0-8FF8-5646D9B96297'),
}

model DeleteTransitRouterVpnAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterVpnAttachmentResponseBody(name='body'),
}

/**
  * ## Usage note
  * Before you delete a VPN connection, make sure that the following requirements are met:
  * *   No associated forwarding correlation is established between the VPN connection and the route tables of the Enterprise Edition transit router. For more information about how to delete an associated forwarding correlation, see [DissociateTransitRouterAttachmentFromRouteTable](~~260944~~).
  * *   No route learning correlation is established between the VPN connection and the route tables of the Enterprise Edition transit router. For more information about how to delete a route learning correlation, see [DisableTransitRouterRouteTablePropagation](~~260945~~).
  * *   No route in the route table of the Enterprise Edition transit router points to the VPN connection. For more information, see [DeleteTransitRouterRouteEntry](~~261240~~).
  *
 */
async function deleteTransitRouterVpnAttachment(request: DeleteTransitRouterVpnAttachmentRequest): DeleteTransitRouterVpnAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTransitRouterVpnAttachment', 'POST', '/', 'json', false, 'json', request);
}

model DeregisterTransitRouterMulticastGroupMembersRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): preforms a dry run and sends the request.', example='false', position='Query'),
  groupIpAddress: string(name='GroupIpAddress', description='The IP address of the multicast group to which the multicast members belong.', example='239.XX.XX.2', position='Query'),
  networkInterfaceIds?: [ string ](name='NetworkInterfaceIds', description='The IDs of elastic network interfaces (ENIs).', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerTransitRouterMulticastDomains?: [ string ](name='PeerTransitRouterMulticastDomains', description='The ID of the multicast domain that is in a different region.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterMulticastDomainId: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast domain to which the multicast members belong.', example='tr-mcast-domain-91wpg6wbhchjeq****', position='Query'),
}

model DeregisterTransitRouterMulticastGroupMembersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='61D0A553-5E4E-53B5-9DA3-01CBA076A286'),
}

model DeregisterTransitRouterMulticastGroupMembersResponse = {
  headers: map[string]string(name='headers'),
  body: DeregisterTransitRouterMulticastGroupMembersResponseBody(name='body'),
}

/**
  * `RegisterTransitRouterMulticastGroupMembers` is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the `ListTransitRouterMulticastGroups` operation to query the status of a multicast member.
  * *   If a multicast member is in the **Deregistering** state, the multicast member is being removed. In this case, you can query the multicast member but cannot perform other operations.
  * *   If a multicast member cannot be found, the multicast member is removed from the multicast group.``
  *
 */
async function deregisterTransitRouterMulticastGroupMembers(request: DeregisterTransitRouterMulticastGroupMembersRequest): DeregisterTransitRouterMulticastGroupMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeregisterTransitRouterMulticastGroupMembers', 'POST', '/', 'json', false, 'json', request);
}

model DeregisterTransitRouterMulticastGroupSourcesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to check the request. Valid values:

*   **true**: only prechecks the API request. The multicast source is not deleted. The system checks the required parameters, the request format, and the service limits. If the request fails to pass the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. After the request passes the precheck, the multicast source is deleted.', example='false', position='Query'),
  groupIpAddress: string(name='GroupIpAddress', description='The IP address of the multicast group to which the multicast source belongs.', example='239.XX.XX.2', position='Query'),
  networkInterfaceIds?: [ string ](name='NetworkInterfaceIds', description='The IDs of the multicast sources. You can create only one multicast source in a multicast group.

>  This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterMulticastDomainId: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast group to which the multicast source belongs.', example='tr-mcast-domain-91wpg6wbhchjeq****', position='Query'),
}

model DeregisterTransitRouterMulticastGroupSourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='53E7E8BE-7F4E-5458-ACCA-9B5C1D6A642D'),
}

model DeregisterTransitRouterMulticastGroupSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: DeregisterTransitRouterMulticastGroupSourcesResponseBody(name='body'),
}

/**
  * ## Usage notes
  * `DeregisterTransitRouterMulticastGroupSources` is an asynchronous operation. After you send a request, the **request ID** is returned but the operation is still being performed in the system background. You can call `ListTransitRouterMulticastGroups` to query the status of a multicast source.
  * *   If a multicast source is in the **Deregistering** state, the multicast source is being deleted. You can query the multicast source but cannot perform other operations.
  * *   If a multicast source cannot be found, the multicast source is deleted.
  *
 */
async function deregisterTransitRouterMulticastGroupSources(request: DeregisterTransitRouterMulticastGroupSourcesRequest): DeregisterTransitRouterMulticastGroupSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeregisterTransitRouterMulticastGroupSources', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenAttachedChildInstanceAttributeRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-5mv960yjhja0dh****', position='Query'),
  childInstanceId: string(name='ChildInstanceId', description='The ID of the network instance that is attached to the CEN instance.', example='vpc-2zebdboka7d7t37vo****', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='cn-beijing', position='Query'),
  childInstanceType: string(name='ChildInstanceType', description='The type of the network instance. Valid values:

*   **VPC**: VPC
*   **VBR**: VBR
*   **CCN**: CCN instance', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCenAttachedChildInstanceAttributeResponseBody = {
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-5mv960yjhja0dh****'),
  childInstanceAttachTime?: string(name='ChildInstanceAttachTime', description='The time when the network instance was attached to the CEN instance.

The time follows the ISO8601 standard in the YYYY-MM-DDThh:mmZ format. The time is displayed in UTC.', example='2018-07-30T07:53Z'),
  childInstanceId?: string(name='ChildInstanceId', description='The ID of the network instance.', example='vpc-2zebdboka7d7t37vo****'),
  childInstanceName?: string(name='ChildInstanceName', description='The name of the network instance.', example='defaultvpc'),
  childInstanceOwnerId?: long(name='ChildInstanceOwnerId', description='The ID of the Alibaba Cloud account to which the network instance belongs.', example='1688000000000000'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId', description='The ID of the region where the network instance is deployed.', example='cn-beijing'),
  childInstanceType?: string(name='ChildInstanceType', description='The type of the network instance. Valid values:

*   **VPC**: VPC
*   **VBR**: VBR
*   **CCN**: CCN instance', example='VPC'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ADD98358-D265-4060-87CB-A2427F5A8944'),
  status?: string(name='Status', description='Indicates whether the network instance is attached to the CEN instance. Valid values:

*   **Attaching**: being attached to the CEN instance.
*   **Attached**: attached to the CEN instance.
*   **Detaching**: being detached from the CEN instance.', example='Attached'),
}

model DescribeCenAttachedChildInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenAttachedChildInstanceAttributeResponseBody(name='body'),
}

async function describeCenAttachedChildInstanceAttribute(request: DescribeCenAttachedChildInstanceAttributeRequest): DescribeCenAttachedChildInstanceAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenAttachedChildInstanceAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenAttachedChildInstancesRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-j3jzhw1zpau2km****', position='Query'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='cn-zhangjiakou', position='Query'),
  childInstanceType?: string(name='ChildInstanceType', description='The type of the network instance. Valid values:

*   **VPC**: virtual private cloud (VPC)
*   **VBR**: virtual border router (VBR)
*   **CCN**: Cloud Connect Network (CCN) instance', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCenAttachedChildInstancesResponseBody = {
  childInstances?: {
    childInstance?: [ 
    {
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-j3jzhw1zpau2km****'),
      childInstanceAttachTime?: string(name='ChildInstanceAttachTime', description='The time when the network instance was attached to the CEN instance.

The time follows the ISO8601 standard in the YYYY-MM-DDThh:mmZ format. The time is displayed in UTC.', example='2021-08-10T06:27Z'),
      childInstanceId?: string(name='ChildInstanceId', description='The ID of the network instance.', example='vpc-8vb1lu55yt9rlwgxl****'),
      childInstanceOwnerId?: long(name='ChildInstanceOwnerId', description='The ID of the Alibaba Cloud account to which the network instance belongs.', example='1688000000000000'),
      childInstanceRegionId?: string(name='ChildInstanceRegionId', description='The ID of the region where the network instance is deployed.', example='cn-zhangjiakou'),
      childInstanceType?: string(name='ChildInstanceType', description='The type of the network instance. Valid values:

*   **VPC**: VPC
*   **VBR**: VBR
*   **CCN**: CCN instance', example='VPC'),
      status?: string(name='Status', description='The status of the network instance. Valid values:

*   **Attaching**: The network instance is being created on the transit router.
*   **Attached**: The network instance has been created on the transit router.
*   **Detaching**: The network instance is being deleted from the transit router.', example='Attached'),
    }
  ](name='ChildInstance')
  }(name='ChildInstances', description='The information about the network instances.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B2063B16-852B-5B66-B73D-4ED4D1A5E5C2'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeCenAttachedChildInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenAttachedChildInstancesResponseBody(name='body'),
}

/**
  * You can use one of the following methods to query the information about the network instances that are attached to a CEN instance:
  * *   You can query all the network instances that are attached to a CEN instance by setting the `CenId` parameter.
  * *   You can query the network instances that are attached to a CEN instance in a specified region by setting the `CenId` and `ChildInstanceRegionId` parameters.
  * *   You can query a specified type of network instances that are attached to a CEN instance by setting the `CenId` and `ChildInstanceType` parameters.
  *
 */
async function describeCenAttachedChildInstances(request: DescribeCenAttachedChildInstancesRequest): DescribeCenAttachedChildInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenAttachedChildInstances', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenBandwidthPackagesRequest {
  filter?: [ 
    {
      key?: string(name='Key', description='The filter condition.

You can use filter conditions to filter the bandwidth plans that you want to query. The following filter conditions are supported:

*   **CenId**: CEN instance ID

*   **Status**: bandwidth plan status. Valid values:

    *   **Idle**: not associated with a CEN instance.
    *   **InUse**: associated with a CEN instance.

*   **CenBandwidthPackageId**: bandwidth plan ID

*   **Name**: bandwidth plan name

    You can specify one or more filter conditions. The maximum value of **N** is **5**.', example='CenId'),
      value?: [ string ](name='Value', description='The values of condition.', example='Idle'),
    }
  ](name='Filter', description='The filter conditions.', position='Query'),
  includeReservationData?: boolean(name='IncludeReservationData', description='Specifies whether to include renewal data. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  isOrKey?: boolean(name='IsOrKey', description='The logical operator between the filter conditions. Valid values:

*   **false** (default): **AND** Bandwidth plans that meet all filter conditions are returned.
*   **true**: **OR** Bandwidth plans that meet one of the filter conditions are returned.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **50**. Default value: **10**.', example='2', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model DescribeCenBandwidthPackagesResponseBody = {
  cenBandwidthPackages?: {
    cenBandwidthPackage?: [ 
    {
      bandwidth?: long(name='Bandwidth', description='The maximum bandwidth of the bandwidth plan.', example='2'),
      bandwidthPackageChargeType?: string(name='BandwidthPackageChargeType', description='The billing method of the bandwidth plan.', example='PREPAY'),
      businessStatus?: string(name='BusinessStatus', description='The status of the bandwidth plan. Valid values:

*   **Normal**: normal
*   **FinancialLocked**: locked due to overdue payments
*   **SecurityLocked**: locked due to security reasons', example='Normal'),
      cenBandwidthPackageId?: string(name='CenBandwidthPackageId', description='The ID of the bandwidth plan.', example='cenbwp-4c2zaavbvh5x****'),
      cenIds?: {
        cenId?: [ string ](name='CenId')
      }(name='CenIds', description='A list of CEN instances that are associated with the bandwidth plan.'),
      creationTime?: string(name='CreationTime', description='The time when the bandwidth plan was created. The time is displayed in the ISO8601 standard in the YYYY-MM-DDThh:mmZ format.', example='2021-02-01T11:14Z'),
      description?: string(name='Description', description='The description of the bandwidth plan.', example='cen'),
      expiredTime?: string(name='ExpiredTime', description='The timeout period of the bandwidth plan.', example='2021-09-08T16:00Z'),
      geographicRegionAId?: string(name='GeographicRegionAId', description='The ID of the area that you want to query. Valid values:

*   **china**: Chinese mainland.
*   **asia-pacific**: Asia Pacific
*   **europe**: Europe
*   **australia**: Australia
*   **north-america**: North America', example='china'),
      geographicRegionBId?: string(name='GeographicRegionBId', description='The ID of the other connected area of the bandwidth plan. Valid values:

*   **china**: Chinese mainland.
*   **asia-pacific**: Asia Pacific
*   **europe**: Europe
*   **australia**: Australia
*   **north-america**: North America', example='north-america'),
      geographicSpanId?: string(name='GeographicSpanId', description='The ID of the connected area.', example='north-america_china'),
      hasReservationData?: string(name='HasReservationData', description='Indicates whether renewal data is included.

*   **true**: yes
*   **false**: no

>  This parameter returns **true** only when the **IncludeReservationData** parameter is set to **true** and an order has not taken effect.', example='false'),
      isCrossBorder?: boolean(name='IsCrossBorder', description='Indicates whether the bandwidth plan is a cross-border bandwidth plan.

*   **false**: no
*   **true**: yes', example='false'),
      name?: string(name='Name', description='The name of the bandwidth plan.', example='test'),
      orginInterRegionBandwidthLimits?: {
        orginInterRegionBandwidthLimit?: [ 
        {
          bandwidthLimit?: string(name='BandwidthLimit', description='The maximum bandwidth value for the inter-region connection.', example='1'),
          geographicSpanId?: string(name='GeographicSpanId', description='The connected regions.', example='north-america_china'),
          localRegionId?: string(name='LocalRegionId', description='The ID of the source region.', example='cn-hangzhou'),
          oppositeRegionId?: string(name='OppositeRegionId', description='The ID of the peer region.', example='us-west-1'),
        }
      ](name='OrginInterRegionBandwidthLimit')
      }(name='OrginInterRegionBandwidthLimits', description='The details about the connected regions.'),
      reservationActiveTime?: string(name='ReservationActiveTime', description='The expiration time of the temporary upgrade.', example='2021-08-30T16:00Z'),
      reservationBandwidth?: string(name='ReservationBandwidth', description='The bandwidth value to which the bandwidth plan is rolled back when the temporary upgrade ends.', example='10'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType', description='The new billing method.', example='PREPAY'),
      reservationOrderType?: string(name='ReservationOrderType', description='The renewal method.

*   **TEMP_UPGRADE**: temporary upgrade
*   **UPGRADE**: upgrade', example='UPGRADE'),
      resourceGroupId?: string(name='ResourceGroupId'),
      status?: string(name='Status', description='Indicates whether the bandwidth plan is associated with a CEN instance.

*   **Idle**: no
*   **InUse**: yes', example='InUse'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='CenBandwidthPackage')
  }(name='CenBandwidthPackages', description='The details about the bandwidth plan.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9D7E2400-2755-4AF5-9B73-12565E4F73A0'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='2'),
}

model DescribeCenBandwidthPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenBandwidthPackagesResponseBody(name='body'),
}

async function describeCenBandwidthPackages(request: DescribeCenBandwidthPackagesRequest): DescribeCenBandwidthPackagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenBandwidthPackages', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenChildInstanceRouteEntriesRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  childInstanceId: string(name='ChildInstanceId', description='The ID of the network instance.', example='vpc-bp18sth14qii3pnvo****', position='Query'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId', position='Query'),
  childInstanceType: string(name='ChildInstanceType', description='The type of the network instance. Valid values:

*   **VPC**
*   **VBR**
*   **CCN**', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The status of the routes that you want to query. Valid values:

*   **Active**: active routes
*   **Candidate**: standby routes
*   **Rejected**: rejected routes
*   **Prohibited**: prohibited routes
*   **All** (default value): all routes', example='Active', position='Query'),
}

model DescribeCenChildInstanceRouteEntriesResponseBody = {
  cenRouteEntries?: {
    cenRouteEntry?: [ 
    {
      asPaths?: {
        asPath?: [ string ](name='AsPath')
      }(name='AsPaths', description='The AS paths of the routes.'),
      cenRouteMapRecords?: {
        cenRouteMapRecord?: [ 
        {
          regionId?: string(name='RegionId', description='The ID of the region where the route map is applied.', example='cn-hangzhou'),
          routeMapId?: string(name='RouteMapId', description='The ID of the route map.', example='cenrmap-w4yf7toozfol3q****'),
        }
      ](name='CenRouteMapRecord')
      }(name='CenRouteMapRecords', description='The route maps that the routes match.'),
      communities?: {
        community?: [ string ](name='Community')
      }(name='Communities', description='The community attributes of the routes.'),
      conflicts?: {
        conflict?: [ 
        {
          destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the conflicting route.', example='192.168.1.0/24'),
          instanceId?: string(name='InstanceId', description='The ID of the peer network instance on which conflicting routes are found.', example='ccn-0q3b7oviikmm9h****'),
          instanceType?: string(name='InstanceType', description='The type of the peer network instance on which conflicting routes are found. 

- **VPC**
- **VBR**
- **CCN**', example='CCN'),
          regionId?: string(name='RegionId', description='The ID of the region where the peer network instance on which conflicting routes are found is deployed.', example='ccn-cn-shanghai'),
          status?: string(name='Status', description='The cause of the route error. Valid values: 

- **conflict**: Two routes have the same destination CIDR block.
- **overflow**: The number of routes in the route table configured on another network instance reached the upper limit.', example='conflict'),
        }
      ](name='Conflict')
      }(name='Conflicts', description='The array of conflicting routes.'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the route.', example='10.0.0.0/24'),
      nextHopInstanceId?: string(name='NextHopInstanceId', description='The ID of the instance specified as the next hop in the route.', example='vbr-bp13gtbhdp0pfqg6s****'),
      nextHopRegionId?: string(name='NextHopRegionId', description='The ID of the region where the instance specified as the next hop in the route belongs.', example='cn-hangzhou'),
      nextHopType?: string(name='NextHopType', description='The type of the instance specified as the next hop in the route. 

- **Instance**: ECS instance
- **HaVip**: HAVIP
- **RouterInterface**: router interface
- **NetworkInterface**: ENI
- **VpnGateway**: VPN gateway
- **IPv6Gateway**: IPv6 gateway
- **NatGateway**: NAT gateway
- **Attachment**: network instance connection
- **service**: cloud service
- **VBR**: virtual border router
- **CCN**: CCN instance
- **VPC**: virtual private cloud
- **local**: system route. No next hop is specified.
- **TR**: transit router
- **BlackHole**: blackhole route. No next hop is specified.
- **EcRouterInterface**: router interface for Express Connect
- **HealthCheck**: health check
- **AS**: access gateway for CCN
- **classic**: classic network-type instance
- **GatewayEndpoint**: gateway endpoint
- **CPE**: data center connected by VBRs', example='VBR'),
      operationalMode?: boolean(name='OperationalMode', description='Indicates whether the route is allowed to be advertised to or withdrawn from the CEN instance. Valid values:  

- **true**: The route is allowed to be advertised to or withdrawn from the CEN instance.
- **false**: The route is not allowed to be advertised to or withdrawn from the CEN instance.', example='true'),
      publishStatus?: string(name='PublishStatus', description='Indicates whether the route is advertised to the CEN instance. Valid values: 

- **Published**: The route is advertised to the CEN instance.
- **NonPublished**: The route is not advertised to the CEN instance.', example='Published'),
      routeTableId?: string(name='RouteTableId', description='The ID of the route table.', example='vtb-bp1r9pvl4xen8s9ju****'),
      status?: string(name='Status', description='The status of the route. Valid values: 

- **Active**: The route is active.
- **Candidate**: The route is a standby route.
- **Rejected**: The route is rejected.
- **Prohibited**: The route is prohibited.', example='Active'),
      type?: string(name='Type', description='The type of the route. Valid values: 

- **CEN**: route that is advertised through CEN
- **System**: system route
- **Custom**: custom route', example='CEN'),
    }
  ](name='CenRouteEntry')
  }(name='CenRouteEntries', description='The array of routes.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='17A57456-EF48-419D-9AE6-9B03D9996018'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='4'),
}

model DescribeCenChildInstanceRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenChildInstanceRouteEntriesResponseBody(name='body'),
}

async function describeCenChildInstanceRouteEntries(request: DescribeCenChildInstanceRouteEntriesRequest): DescribeCenChildInstanceRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenChildInstanceRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenGeographicSpanRemainingBandwidthRequest {
  cenId: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance to which the bandwidth plan is associated.', example='cen-nh98vzx8gfhlwn****', position='Query'),
  geographicRegionAId: string(name='GeographicRegionAId', description='The ID of one of the areas connected by the bandwidth plan. Valid values:

*   **China**: Chinese mainland
*   **North-America**: North America
*   **Asia-Pacific**: Asia Pacific
*   **Europe**: Europe
*   **Australia**: Australia', example='China', position='Query'),
  geographicRegionBId: string(name='GeographicRegionBId', description='The ID of the other area connected by the bandwidth plan. Valid values:

*   **China**: Chinese mainland
*   **North-America**: North America
*   **Asia-Pacific**: Asia Pacific
*   **Europe**: Europe
*   **Australia**: Australia', example='North-America', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCenGeographicSpanRemainingBandwidthResponseBody = {
  remainingBandwidth?: long(name='RemainingBandwidth', description='The remaining bandwidth of the bandwidth plan. Unit: Mbit/s.', example='2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E4B345CD-2CBA-4881-AF6D-E5D9BAE1CA7B'),
}

model DescribeCenGeographicSpanRemainingBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenGeographicSpanRemainingBandwidthResponseBody(name='body'),
}

async function describeCenGeographicSpanRemainingBandwidth(request: DescribeCenGeographicSpanRemainingBandwidthRequest): DescribeCenGeographicSpanRemainingBandwidthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenGeographicSpanRemainingBandwidth', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenGeographicSpansRequest {
  geographicSpanId?: string(name='GeographicSpanId', description='The ID of the areas that are connected by the CEN instance.

> If you do not set this parameter, the system queries the information about all areas supported by CEN.', example='china_asia-pacific', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCenGeographicSpansResponseBody = {
  geographicSpanModels?: {
    geographicSpanModel?: [ 
    {
      geographicSpanId?: string(name='GeographicSpanId', description='The ID of the pair of connected areas.', example='china_asia-pacific'),
      localGeoRegionId?: string(name='LocalGeoRegionId', description='The ID of the local area.', example='asia-pacific'),
      oppositeGeoRegionId?: string(name='OppositeGeoRegionId', description='The ID of the peer area.', example='china'),
    }
  ](name='GeographicSpanModel')
  }(name='GeographicSpanModels', description='A list of areas.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='09780287-BC24-4164-8334-773432E32696'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeCenGeographicSpansResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenGeographicSpansResponseBody(name='body'),
}

async function describeCenGeographicSpans(request: DescribeCenGeographicSpansRequest): DescribeCenGeographicSpansResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenGeographicSpans', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenInterRegionBandwidthLimitsRequest {
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-pfa6ugf3xl0qsd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return per page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCenInterRegionBandwidthLimitsResponseBody = {
  cenInterRegionBandwidthLimits?: {
    cenInterRegionBandwidthLimit?: [ 
    {
      bandwidthLimit?: long(name='BandwidthLimit', description='The bandwidth limit of the cross-region connection. Unit: Mbit/s.', example='1'),
      bandwidthPackageId?: string(name='BandwidthPackageId', description='The ID of the bandwidth plan.', example='cenbwp-uenczwb592fnvv****'),
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-pfa6ugf3xl0qsd****'),
      geographicSpanId?: string(name='GeographicSpanId', description='The connected areas.', example='china_china'),
      localRegionId?: string(name='LocalRegionId', description='The ID of the local region.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='ccn-cn-shanghai'),
      oppositeRegionId?: string(name='OppositeRegionId', description='The ID of the peer region.', example='cn-hangzhou'),
      status?: string(name='Status', description='The status of the bandwidth of the cross-region connection. Valid values:

*   **Active**: The bandwidth limit of the cross-region connection is effective.
*   **Modifying**: The bandwidth limit of the cross-region connection is being changed.', example='Active'),
    }
  ](name='CenInterRegionBandwidthLimit')
  }(name='CenInterRegionBandwidthLimits', description='The list of cross-region connections.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7A30C665-8766-5AAA-9274-C97380E2D850'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeCenInterRegionBandwidthLimitsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenInterRegionBandwidthLimitsResponseBody(name='body'),
}

async function describeCenInterRegionBandwidthLimits(request: DescribeCenInterRegionBandwidthLimitsRequest): DescribeCenInterRegionBandwidthLimitsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenInterRegionBandwidthLimits', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenPrivateZoneRoutesRequest {
  accessRegionId?: string(name='AccessRegionId', description='The ID of the region where PrivateZone is accessed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  cenId: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  hostRegionId?: string(name='HostRegionId', description='The ID of the region where PrivateZone is deployed.', example='cn-hangzhou', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeCenPrivateZoneRoutesResponseBody = {
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmc****'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  privateZoneDnsServers?: string(name='PrivateZoneDnsServers', description='The IP address of the DNS server used by PrivateZone.', example='100.100.XX.XX/32,100.100.XX.XX/32'),
  privateZoneInfos?: {
    privateZoneInfo?: [ 
    {
      accessRegionId?: string(name='AccessRegionId', description='The ID of the region where PrivateZone is accessed.', example='cn-hangzhou'),
      hostRegionId?: string(name='HostRegionId', description='The ID of the region where PrivateZone is deployed.', example='cn-hangzhou'),
      hostVpcId?: string(name='HostVpcId', description='The ID of the virtual private cloud (VPC) that is associated with PrivateZone.', example='vpc-bp18sth14qii3pnvo****'),
      status?: string(name='Status', description='The status of PrivateZone. Valid values:

*   **Creating**: being created
*   **Active**: available
*   **Deleting**: being deleted', example='Active'),
    }
  ](name='PrivateZoneInfo')
  }(name='PrivateZoneInfos', description='The configuration details of PrivateZone.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='461EC1B5-04A8-4706-8764-8F5BCEF48A6F'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeCenPrivateZoneRoutesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenPrivateZoneRoutesResponseBody(name='body'),
}

async function describeCenPrivateZoneRoutes(request: DescribeCenPrivateZoneRoutesRequest): DescribeCenPrivateZoneRoutesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenPrivateZoneRoutes', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenRegionDomainRouteEntriesRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6j****', position='Query'),
  cenRegionId: string(name='CenRegionId', description='The ID of the region that you want to query.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The status of the routes that you want to query. Valid values:

*   **Active** (default value): active routes
*   **Candidate**: standby routes
*   **Rejected**: rejected routes
*   **Prohibited**: prohibited routes
*   **All**: all routes', example='Active', position='Query'),
}

model DescribeCenRegionDomainRouteEntriesResponseBody = {
  cenRouteEntries?: {
    cenRouteEntry?: [ 
    {
      asPaths?: {
        asPath?: [ string ](name='AsPath')
      }(name='AsPaths', description='The AS paths of the routes.'),
      cenOutRouteMapRecords?: {
        cenOutRouteMapRecord?: [ 
        {
          regionId?: string(name='RegionId', description='The ID of the region where the route map is applied.', example='ccn-cn-shanghai'),
          routeMapId?: string(name='RouteMapId', description='The ID of the route map.', example='cenrmap-dbarzidzp7ek4k****'),
        }
      ](name='CenOutRouteMapRecord')
      }(name='CenOutRouteMapRecords', description='The route maps that the routes match in the outbound direction.'),
      cenRouteMapRecords?: {
        cenRouteMapRecord?: [ 
        {
          regionId?: string(name='RegionId', description='The ID of the region where the route map is applied.', example='cn-hangzhou'),
          routeMapId?: string(name='RouteMapId', description='The ID of the route map.', example='cenrmap-cz5axczdxb7yfu****'),
        }
      ](name='CenRouteMapRecord')
      }(name='CenRouteMapRecords', description='The route maps that the routes match in the inbound direction.'),
      communities?: {
        community?: [ string ](name='Community')
      }(name='Communities', description='The community attributes of the routes.'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the route.', example='192.168.1.0/24'),
      nextHopInstanceId?: string(name='NextHopInstanceId', description='The ID of the instance specified as the next hop in the route.', example='vpc-bp1j8728mm6pweeod****'),
      nextHopRegionId?: string(name='NextHopRegionId', description='The ID of the region where the network instance specified as the next hop in the route belongs.', example='cn-hangzhou'),
      nextHopType?: string(name='NextHopType', description='The type of the network instance specified as the next hop in the route. 

- **VPC**
- **VBR**
- **CCN**
- **local_service**: system route. No next hop is specified.', example='VPC'),
      preference?: int32(name='Preference', description='The priority of the route. 

> A smaller value indicates a higher priority.', example='50'),
      status?: string(name='Status', description='The status of the route. Valid values: 

- **Active**: The route is active.
- **Candidate**: The route is a standby route.
- **Rejected**: The route is rejected.
- **Prohibited**: The route is prohibited.', example='Active'),
      toOtherRegionStatus?: string(name='ToOtherRegionStatus', description='Whether the route can be advertised to other regions. Valid values: 

- **Active**: The route can be advertised to other regions.
- **Prohibited**: The route cannot be advertised to other regions.', example='Active'),
      type?: string(name='Type', description='The type of the route. Valid values: 

- **CEN**: route that is advertised through CEN
- **Custom**: custom route
- **System**: system route', example='CEN'),
    }
  ](name='CenRouteEntry')
  }(name='CenRouteEntries', description='The array of routes.'),
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='004E99FB-E996-5777-888E-BA1D8F215407'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='4'),
}

model DescribeCenRegionDomainRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenRegionDomainRouteEntriesResponseBody(name='body'),
}

async function describeCenRegionDomainRouteEntries(request: DescribeCenRegionDomainRouteEntriesRequest): DescribeCenRegionDomainRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenRegionDomainRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenRouteMapsRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-wx12mmlt17ld82****', position='Query'),
  cenRegionId?: string(name='CenRegionId', description='The ID of the region where the routing policy is applied.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeMapId?: string(name='RouteMapId', description='The ID of the routing policy.', example='cenrmap-y40mxdvf7joc12****', position='Query'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId', description='The route table ID of the transit router with which the routing policy is associated.', example='vtb-gw8nx3515m1mbd1z1****', position='Query'),
  transmitDirection?: string(name='TransmitDirection', description='The direction in which the routing policy is applied. Valid values:

*   **RegionIn**: Routes are advertised to the gateways in the regions that are connected by the CEN instance.

    For example, routes are advertised from network instances deployed in the current region or other regions to the gateway deployed in the current region.

*   **RegionOut**: Routes are advertised from the gateways in the regions that are connected by the CEN instance.

    For example, routes are advertised from the gateway deployed in the current region to network instances deployed in the current region, or to gateways deployed in other regions.', example='RegionOut', position='Query'),
}

model DescribeCenRouteMapsResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='24CE1987-D1D1-5324-9BAD-2750B60E6ABB'),
  routeMaps?: {
    routeMap?: [ 
    {
      asPathMatchMode?: string(name='AsPathMatchMode', description='The match method that is used to match routes based on the AS path.

*   **Include**: fuzzy match. A route is a match if the AS path of the route overlaps with the AS path specified in the match condition.
*   **Complete**: exact match. A route is a match only if the AS path of the route is the same as the AS path specified in the match condition.', example='Include'),
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-wx12mmlt17ld82****'),
      cenRegionId?: string(name='CenRegionId', description='The ID of the region where the routing policy is applied.', example='cn-hangzhou'),
      cidrMatchMode?: string(name='CidrMatchMode', description='The match method that is used to match routes based on the prefix. Valid values:

*   **Include**: fuzzy match. A route is a match if the route prefix is included in the match conditions.

    For example, if you set the match condition to 10.10.0.0/16 and fuzzy match is enabled, the route whose prefix is 10.10.1.0/24 is a match.

*   **Complete**: exact match. A route is a match only if the route prefix is the same as the prefix specified in the match condition.

    For example, if you set the match condition to 10.10.0.0/16 and exact match is enabled, a route is a match only if the prefix is 10.10.0.0/16.', example='Include'),
      communityMatchMode?: string(name='CommunityMatchMode', description='The match method that is used to match routes based on the community.

*   **Include**: fuzzy match. A route is a match if the community of the route overlaps with the community specified in the match condition.
*   **Complete**: exact match. A route is a match only if the community of the route is the same as the community specified in the match condition.', example='Include'),
      communityOperateMode?: string(name='CommunityOperateMode', description='The action that is performed on the community of the route.

*   **Additive**: adds the community to the route.
*   **Replace**: replaces the original community of the route.

This parameter indicates the action to be performed when a route meets the match condition.', example='Additive'),
      description?: string(name='Description', description='The description of the routing policy.', example='desctest'),
      destinationChildInstanceTypes?: {
        destinationChildInstanceType?: [ string ](name='DestinationChildInstanceType')
      }(name='DestinationChildInstanceTypes', description='The types of destination network instance to which the routes belong.

*   **VPC**: VPC
*   **VBR**: VBR
*   **CCN**: CCN instance
*   **VPN**: IPsec-VPN connection

>  The destination network instance types are valid only when the routing policy is applied to scenarios where routes are advertised from the gateway in the current region to network instances in the current region.'),
      destinationCidrBlocks?: {
        destinationCidrBlock?: [ string ](name='DestinationCidrBlock')
      }(name='DestinationCidrBlocks', description='The prefixes of the routes.'),
      destinationInstanceIds?: {
        destinationInstanceId?: [ string ](name='DestinationInstanceId')
      }(name='DestinationInstanceIds', description='The IDs of the destination network instances to which the routes belong.

>  The destination network instance IDs are valid only when the routing policy is applied to scenarios where routes are advertised from the gateway in the current region to network instances in the current region.'),
      destinationInstanceIdsReverseMatch?: boolean(name='DestinationInstanceIdsReverseMatch', description='Indicates whether the destination network instance IDs are excluded.

*   **false** (default): A route is a match if its destination network instance ID is in the list specified by **DestinationInstanceIds.N**.
*   **true**: A route is a match if its destination network instance ID is not in the list specified by **DestinationInstanceIds.N**.', example='false'),
      destinationRouteTableIds?: {
        destinationRouteTableId?: [ string ](name='DestinationRouteTableId')
      }(name='DestinationRouteTableIds', description='The IDs of the destination route tables to which the routes belong. You can enter at most 32 route table IDs.

>  The destination route table IDs are valid only when the routing policy is applied to scenarios where routes are advertised from the gateway in the current region to route tables in the current region.'),
      mapResult?: string(name='MapResult', description='The action performed on a route that meets the match conditions.

*   **Permit**: the route is permitted.
*   **Deny**: the route is denied.', example='Deny'),
      matchAddressType?: string(name='MatchAddressType', description='The type of IP address to be matched against the match condition. Valid values:

*   **IPv4**: IPv4 addresses
*   **IPv6**: IPv6 addresses
*   If no value is returned, both IPv4 and IPv6 addresses are matched against the match condition.', example='IPv4'),
      matchAsns?: {
        matchAsn?: [ string ](name='MatchAsn')
      }(name='MatchAsns', description='The AS paths based on which the routes are compared.'),
      matchCommunitySet?: {
        matchCommunity?: [ string ](name='MatchCommunity')
      }(name='MatchCommunitySet', description='The community set based on which the routes are compared.'),
      nextPriority?: int32(name='NextPriority', description='The priority of the routing policy that you want to associate with the current one.', example='33'),
      operateCommunitySet?: {
        operateCommunity?: [ string ](name='OperateCommunity')
      }(name='OperateCommunitySet', description='The community set on which actions are performed.'),
      preference?: int32(name='Preference', description='The new priority of the route.

A smaller value indicates a higher priority.

This parameter indicates the action to be performed when a route meets the match condition.', example='20'),
      prependAsPath?: {
        asPath?: [ string ](name='AsPath')
      }(name='PrependAsPath', description='The AS paths that are prepended by using an action statement when regional gateways receive or advertise routes.

This parameter indicates the action to be performed when a route meets the match condition.'),
      priority?: int32(name='Priority', description='The priority of the routing policy. A smaller value indicates a higher priority.', example='5000'),
      routeMapId?: string(name='RouteMapId', description='The ID of the routing policy.', example='cenrmap-y40mxdvf7joc12****'),
      routeTypes?: {
        routeType?: [ string ](name='RouteType')
      }(name='RouteTypes', description='The types of routes that is compared. Valid values:

*   **System**: system routes that are automatically generated by the system.
*   **Custom**: custom routes that are manually added.
*   **BGP**: routes that are advertised over Border Gateway Protocol (BGP).'),
      sourceChildInstanceTypes?: {
        sourceChildInstanceType?: [ string ](name='SourceChildInstanceType')
      }(name='SourceChildInstanceTypes', description='The types of source network instance to which the routes belong.

*   **VPC**: virtual private cloud (VPC)
*   **VBR**: virtual border router (VBR)
*   **CCN**: Cloud Connect Network (CCN) instance
*   **VPN**: IPsec-VPN connection'),
      sourceInstanceIds?: {
        sourceInstanceId?: [ string ](name='SourceInstanceId')
      }(name='SourceInstanceIds', description='The IDs of the source network instances to which the routes belong.'),
      sourceInstanceIdsReverseMatch?: boolean(name='SourceInstanceIdsReverseMatch', description='Indicates whether the source network instance IDs are excluded.

*   **false** (default): A route is a match if its source network instance ID is in the list specified by **SourceInstanceIds.N**.
*   **true**: A route is match if its source network instance ID is not in the list specified by **SourceInstanceIds.N**.', example='false'),
      sourceRegionIds?: {
        sourceRegionId?: [ string ](name='SourceRegionId')
      }(name='SourceRegionIds', description='The IDs of the source regions to which the routes belong.'),
      sourceRouteTableIds?: {
        sourceRouteTableId?: [ string ](name='SourceRouteTableId')
      }(name='SourceRouteTableIds', description='The IDs of the source route tables to which the routes belong.'),
      status?: string(name='Status', description='The status of the routing policy. Valid values:

*   **Creating**: The routing policy is being created.
*   **Active**: The routing policy is available.
*   **Deleting**: The routing policy is being deleted.', example='Active'),
      transitRouterRouteTableId?: string(name='TransitRouterRouteTableId', description='The route table ID of the transit router with which the routing policy is associated.', example='vtb-gw8nx3515m1mbd1z1****'),
      transmitDirection?: string(name='TransmitDirection', description='The direction in which the routing policy is applied.', example='RegionOut'),
    }
  ](name='RouteMap')
  }(name='RouteMaps', description='The information about the routing policy.'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model DescribeCenRouteMapsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenRouteMapsResponseBody(name='body'),
}

async function describeCenRouteMaps(request: DescribeCenRouteMapsRequest): DescribeCenRouteMapsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenRouteMaps', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCenVbrHealthCheckRequest {
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-6hpdgj7ni6pz1k****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **10**.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrInstanceId?: string(name='VbrInstanceId', description='The ID of the VBR.', example='vbr-bp1kznorjeembsuhl****', position='Query'),
  vbrInstanceOwnerId?: long(name='VbrInstanceOwnerId', description='The ID of the Alibaba Cloud account that owns the VBR.

>  The parameter is required if the VBR and the CEN instance belong to different Alibaba Cloud accounts.', example='253460731706911258', position='Query'),
  vbrInstanceRegionId: string(name='VbrInstanceRegionId', description='The ID of the region where the VBR is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DescribeCenVbrHealthCheckResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B8C9702E-304A-4E18-AC89-BE2D91C2C176'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  vbrHealthChecks?: {
    vbrHealthCheck?: [ 
    {
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-6hpdgj7ni6pz1k****'),
      healthCheckInterval?: int32(name='HealthCheckInterval', description='The time interval at which probe packets are sent during the health check. Unit: seconds.', example='2'),
      healthCheckOnly?: boolean(name='HealthCheckOnly', description='Indicates whether probing is enabled. Valid values:

*   **true**: yes

    If probing is enabled, the system does not switch to another route when the detected route is not reachable.

*   **false**: no

    If probing is disabled and a redundant route is specified, the system switches to the redundant route when the detected route is not reachable.', example='false'),
      healthCheckSourceIp?: string(name='HealthCheckSourceIp', description='The source IP address of the health check.', example='172.XX.XX.1'),
      healthCheckTargetIp?: string(name='HealthCheckTargetIp', description='The destination IP address of the health check.', example='192.XX.XX.1'),
      healthyThreshold?: int32(name='HealthyThreshold', description='The number of probe packets that are sent during the health check.', example='8'),
      vbrInstanceId?: string(name='VbrInstanceId', description='The ID of the VBR.', example='vbr-bp1kznorjeembsuhl****'),
      vbrInstanceRegionId?: string(name='VbrInstanceRegionId', description='The ID of the region where the VBR is deployed.', example='cn-hangzhou'),
    }
  ](name='VbrHealthCheck')
  }(name='VbrHealthChecks', description='The health check configuration of the VBR.'),
}

model DescribeCenVbrHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenVbrHealthCheckResponseBody(name='body'),
}

async function describeCenVbrHealthCheck(request: DescribeCenVbrHealthCheckRequest): DescribeCenVbrHealthCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCenVbrHealthCheck', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCensRequest {
  filter?: [ 
    {
      key?: string(name='Key', description='The filter condition. Valid values:

*   **CenId**: the ID of a CEN instance.
*   **Name**: the name of a CEN instance.

By default, the logical operator among filter conditions is **AND**. Information about a CEN instance is returned only if the CEN instance matches all filter conditions.

You can specify at most five filter conditions in each call.', example='CenId'),
      value?: [ string ](name='Value', description='The values of the filter condition.', example='cen-0xyeagctz5sfg9****'),
    }
  ](name='Filter', description='The list of the filter conditions.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **10**.', example='10', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag keys of the resources.

The tag keys cannot be an empty string. The tag keys can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='tagtest'),
      value?: string(name='Value', description='The tag values of the resources.

The tag values can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key has a unique tag value. You can specify at most 20 tag values in each call.', example='tagtest'),
    }
  ](name='Tag', description='The tags.', position='Query'),
}

model DescribeCensResponseBody = {
  cens?: {
    cen?: [ 
    {
      cenBandwidthPackageIds?: {
        cenBandwidthPackageId?: [ string ](name='CenBandwidthPackageId')
      }(name='CenBandwidthPackageIds', description='The IDs of the bandwidth plans that are associated with the CEN instance.'),
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-0xyeagctz5sfg9****'),
      creationTime?: string(name='CreationTime', description='The time when the CEN instance was created.

The time follows the ISO8601 standard in the `YYYY-MM-DDThh:mmZ` format. The time is displayed in UTC.', example='2019-10-22T07:44Z'),
      description?: string(name='Description', description='The description of the CEN instance.', example='desctest'),
      ipv6Level?: string(name='Ipv6Level', description='Indicates whether IPv6 is enabled for the CEN instance.

*   **ENABLE**: enabled
*   **DISABLED**: disabled', example='DISABLED'),
      name?: string(name='Name', description='The name of the CEN instance.', example='nametest'),
      protectionLevel?: string(name='ProtectionLevel', description='The level of CIDR block overlapping.

**REDUCED**: Overlapped CIDR blocks are allowed. This value specifies that CIDR blocks can overlap but CIDR blocks cannot be duplicates.', example='REDUCED'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the CEN instance belongs.', example='rg-acfm3unpnuw****'),
      status?: string(name='Status', description='The status of the CEN instance.

*   **Creating**: The CEN instance is being created.
*   **Active**: The CEN instance is running.
*   **Deleting**: The instance is being deleted.', example='Active'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The key of the tag.', example='tagtest'),
          value?: string(name='Value', description='The value of the tag.', example='tagtest'),
        }
      ](name='Tag')
      }(name='Tags', description='The IDs of the tags that are added to the CEN instance.'),
    }
  ](name='Cen')
  }(name='Cens', description='The information about the CEN instance.'),
  pageNumber?: int32(name='PageNumber', description='The number of the page returned.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2BFA6822-240E-4E27-B4C8-AA400EF7474D'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeCensResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCensResponseBody(name='body'),
}

async function describeCens(request: DescribeCensRequest): DescribeCensResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCens', 'POST', '/', 'json', false, 'json', request);
}

model DescribeChildInstanceRegionsRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productType?: string(name='ProductType', description='The type of the network instance. Valid values:

*   **VPC**: virtual private cloud (VPC)
*   **VBR**: virtual border router (VBR)
*   **CCN**: Cloud Connect Network (CCN) instance', example='VPC', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeChildInstanceRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Hangzhou)'),
      regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou'),
    }
  ](name='Region')
  }(name='Regions', description='A list of regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D5CEED59-36AA-47CC-9D81-16F71C46BD80'),
}

model DescribeChildInstanceRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeChildInstanceRegionsResponseBody(name='body'),
}

/**
  * The regions that support CEN vary based on the network instance type. To query the regions where you can attach a specified type of network instance to CEN, set the `ProductType` parameter. If you do not set the `ProductType` parameter, the system queries all regions in which you can attach network instances to CEN, regardless of the network instance type.
  *
 */
async function describeChildInstanceRegions(request: DescribeChildInstanceRegionsRequest): DescribeChildInstanceRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeChildInstanceRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFlowlogsRequest {
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId for each API request may be different.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  description?: string(name='Description', description='The description of the flow log.

The description must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='myFlowlog', position='Query'),
  flowLogId?: string(name='FlowLogId', description='The ID of the flow log.', example='flowlog-m5evbtbpt****', position='Query'),
  flowLogName?: string(name='FlowLogName', description='The name of the flow log.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='myFlowlog', position='Query'),
  logStoreName?: string(name='LogStoreName', description='The name of the Logstore where the flow log is stored.

The name must be 3 to 63 characters in length, and can contain lowercase letters, digits, underscores (\\_), and hyphens (-). It must start or end with a lowercase letter or a digit.', example='FlowLogStore', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Minimum value: **1**. Default value: **20**.', example='20', position='Query'),
  projectName?: string(name='ProjectName', description='The name of the project where the flow log is stored.

The name must be 3 to 63 characters in length, and can contain lowercase letters, digits, and hyphens (-). It must start or end with a lowercase letter or a digit.', example='FlowLogProject', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the flow log is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The status of the flow log. Valid values:

*   **Active**: The flow log is enabled.
*   **Inactive**: The flow log is disabled.', example='Active', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='TagKey'),
      value?: string(name='Value', description='The tag value.

The tag value can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key must have a unique tag value. You can specify at most 20 tag values in each call.', example='TagValue'),
    }
  ](name='Tag', description='The information about the tags.

You can specify at most 20 tags in each call.', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-qieks13jnt1cchy***', position='Query'),
}

model DescribeFlowlogsResponseBody = {
  flowLogs?: {
    flowLog?: [ 
    {
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmc****'),
      creationTime?: string(name='CreationTime', description='The time when the flow log was created.

The time follows the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time is displayed in UTC.', example='2021-07-24T13:00:52Z'),
      description?: string(name='Description', description='The description of the flow log.', example='myFlowlog'),
      flowLogId?: string(name='FlowLogId', description='The ID of the flow log.', example='flowlog-m5evbtbpt****'),
      flowLogName?: string(name='FlowLogName', description='The name of the flow log.', example='myFlowlog'),
      interval?: long(name='Interval', description='The time window for collecting log data. Unit: seconds. Valid values: **60** and **600**. Default value: **600**.', example='60'),
      logStoreName?: string(name='LogStoreName', description='The name of the Logstore where the flow log is stored.', example='FlowLogStore'),
      projectName?: string(name='ProjectName', description='The name of the project where the flow log is stored.', example='FlowLogProject'),
      regionId?: string(name='RegionId', description='The ID of the region where the flow log is deployed.', example='cn-hangzhou'),
      status?: string(name='Status', description='The status of the flow log. Valid values:

*   **Active**: The flow log is enabled.
*   **Inactive**: The flow log is disabled.', example='Active'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='TagKey'),
          value?: string(name='Value', description='The tag value.', example='TagValue'),
        }
      ](name='Tag')
      }(name='Tags', description='A list of tags.'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-5x4o4ynzuqbv6g****'),
    }
  ](name='FlowLog')
  }(name='FlowLogs', description='A list of flow logs.'),
  pageNumber?: string(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: string(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F7DDDC17-FA06-4AC2-8F35-59D2470FCFC1'),
  success?: string(name='Success', description='Indicates whether the call is successful. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
  totalCount?: string(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeFlowlogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowlogsResponseBody(name='body'),
}

async function describeFlowlogs(request: DescribeFlowlogsRequest): DescribeFlowlogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFlowlogs', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGeographicRegionMembershipRequest {
  geographicRegionId: string(name='GeographicRegionId', description='The ID of the area that you want to query. Valid values:

*   **china**: the Chinese mainland
*   **asia-pacific**: Asia Pacific
*   **europe**: Europe
*   **australia**: Australia
*   **north-america**: North America', example='china', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return per page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeGeographicRegionMembershipResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='10'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2'),
  regionIds?: {
    regionId?: [ 
    {
      regionId?: string(name='RegionId', description='The ID of the region.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='us-west-1'),
    }
  ](name='RegionId')
  }(name='RegionIds', description='The list of regions.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DC9EB0C9-60AF-4A09-A36C-608F70130274'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeGeographicRegionMembershipResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGeographicRegionMembershipResponseBody(name='body'),
}

async function describeGeographicRegionMembership(request: DescribeGeographicRegionMembershipRequest): DescribeGeographicRegionMembershipResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGeographicRegionMembership', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGrantRulesToCenRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-nye53d7p3hzyu4****', position='Query'),
  maxResults?: long(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**.  

- If you do not set **MaxResults**, it indicates that you do not need to query results in batches. The value of **MaxResults** in the response indicates the total number of entries.
- If a value is specified for **MaxResults**, it indicates that you need to query results in batches. The value of **MaxResults** in the response indicates the number of entries in the current batch. We recommend that you set **MaxResults** to **20**.', example='20', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

- If this is your first query or no subsequent query is to be sent, ignore this parameter.
- If a subsequent query is to be sent, set the value to the value of **NextToken** that was returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productType: string(name='ProductType', description='The type of the network instance. Valid values:

- **VPC**: virtual private cloud (VPC)
- **VBR**: virtual border router (VBR)
- **CCN**: Cloud Connect Network (CCN) instance
- **VPN**: IPsec-VPN connection', example='VPC', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeGrantRulesToCenResponseBody = {
  grantRules?: {
    grantRule?: [ 
    {
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-nye53d7p3hzyu4****'),
      cenOwnerId?: long(name='CenOwnerId', description='The ID of the Alibaba Cloud account to which the CEN instance belongs.', example='1210123456123456'),
      childInstanceId?: string(name='ChildInstanceId', description='The ID of the network instance.', example='vpc-bp1rgeww9mdstuuar****'),
      childInstanceOwnerId?: long(name='ChildInstanceOwnerId', description='The ID of the Alibaba Cloud account to which the network instance belongs.', example='1250123456123456'),
      childInstanceRegionId?: string(name='ChildInstanceRegionId', description='The ID of the region where the network instance is deployed.', example='cn-hangzhou'),
      childInstanceType?: string(name='ChildInstanceType', description='The type of the network instance. Valid values:

*   **VPC**: VPC
*   **VBR**: VBR
*   **CCN**: CCN instance
*   **VPN**: IPsec-VPN connection', example='VPC'),
      orderType?: string(name='OrderType', description='The entity that pays the fees of the network instance. Valid values:

*   **PayByCenOwner**: the Alibaba Cloud account that owns the CEN instance.
*   **PayByResourceOwner**: the Alibaba Cloud account that owns the network instance.', example='PayByCenOwner'),
    }
  ](name='GrantRule')
  }(name='GrantRules', description='The permissions that are granted to the CEN instance.'),
  maxResults?: long(name='MaxResults', description='The number of entries returned on each page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

- If **NextToken** was not returned, it indicates that no additional results exist.
- If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='4906B209-8613-5C19-9CC9-B7A3FFDA731C'),
  totalCount?: long(name='TotalCount', description='The number of entries returned.', example='1'),
}

model DescribeGrantRulesToCenResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGrantRulesToCenResponseBody(name='body'),
}

async function describeGrantRulesToCen(request: DescribeGrantRulesToCenRequest): DescribeGrantRulesToCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGrantRulesToCen', 'POST', '/', 'json', false, 'json', request);
}

model DescribeGrantRulesToResourceRequest {
  maxResults?: int32(name='MaxResults', description='*   If you do not set **MaxResults**, it indicates that you do not need to query results in batches. The value of **MaxResults** indicates the total number of entries.
*   If you specify a value for **MaxResults**, it indicates that you need to query results in batches. The value of **MaxResults** indicates the number of entries to return in each batch. Valid values: **1** to **100**. The value of **MaxResults** in the response indicates the number of entries in the current batch. We recommend that you set **MaxResults** to **20**.', example='20', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a subsequent query is to be sent, set the value to the value of **NextToken** that was returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productType: string(name='ProductType', description='The type of the network instance. Valid values:

*   **VPC**: virtual private cloud (VPC)
*   **ExpressConnect**: virtual border router (VBR)
*   **VPN**: IPsec-VPN connection', example='VPC', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the network instance.', example='vpc-p0wfut1iqauelpdpb****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeGrantRulesToResourceResponseBody = {
  grantRules?: [ 
    {
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-44m0p68spvlrqq****'),
      cenOwnerId?: long(name='CenOwnerId', description='The ID of the Alibaba Cloud account to which the CEN instance belongs.', example='1250123456123456'),
      orderType?: string(name='OrderType', description='The entity that pays the fees of the network instance. Valid values:

*   **PayByCenOwner**: The fees of the connections and data forwarding on the transit router are paid by the Alibaba Cloud account to which the CEN instance belongs.
*   **PayByResourceOwner**: The fees of the connections and data forwarding on the transit router are paid by the Alibaba Cloud account to which the network instance belongs.', example='PayByCenOwner'),
    }
  ](name='GrantRules', description='The permissions that are granted to the CEN instance.'),
  maxResults?: int32(name='MaxResults', description='*   If no value is specified for **MaxResults**, query results are returned in one batch. The value of **MaxResults** indicates the total number of entries.
*   If a value is specified for **MaxResults**, it indicates that you need to query results in batches. The value of **MaxResults** in the response indicates the number of entries in the current batch.', example='1'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If **NextToken** was not returned in the previous query, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C6E5992C-A57B-5A6C-9B26-568074DC68BA'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model DescribeGrantRulesToResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGrantRulesToResourceResponseBody(name='body'),
}

async function describeGrantRulesToResource(request: DescribeGrantRulesToResourceRequest): DescribeGrantRulesToResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeGrantRulesToResource', 'POST', '/', 'json', false, 'json', request);
}

model DescribePublishedRouteEntriesRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jm****', position='Query'),
  childInstanceId: string(name='ChildInstanceId', description='The ID of the network instance.', example='vpc-bp18sth14qii3pnv****', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId', description='The ID of the route table of the network instance.', example='vtb-bp174d1gje79u1g4****', position='Query'),
  childInstanceType: string(name='ChildInstanceType', description='The type of the network instance. Valid values:

*   **VPC**: VPC
*   **VBR**: VBR
*   **CCN**: Cloud Connect Network (CCN) instance', example='VPC', position='Query'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the route that you want to query.', example='172.16.0.0/16', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribePublishedRouteEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  publishedRouteEntries?: {
    publishedRouteEntry?: [ 
    {
      childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId', description='The ID of the route table configured on the network instance.', example='vtb-il7qut3mjgtlcbpk2****'),
      conflicts?: {
        conflict?: [ 
        {
          destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the conflicting route.', example='192.168.20.0/24'),
          instanceId?: string(name='InstanceId', description='The ID of the peer network instance on which conflicting routes are found.', example='ccn-0q3b7oviikmm9h****'),
          instanceType?: string(name='InstanceType', description='The type of the peer network instance on which the conflicting routes are found. Valid values:

*   **VPC**: VPC
*   **VBR**: VBR
*   **CCN**: CCN instance', example='CCN'),
          regionId?: string(name='RegionId', description='The ID of the region where the peer network instance on which the conflicting routes are found is deployed.', example='ccn-cn-shanghai'),
          status?: string(name='Status', description='The cause of the route confliction. Valid values:

*   **conflict**: The routes have the same destination CIDR block.
*   **overflow**: The number of routes in the route table configured on another network instance has reached the upper limit.', example='conflict'),
        }
      ](name='Conflict')
      }(name='Conflicts', description='A list of conflicting routes.'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the route.', example='172.16.0.0/16'),
      nextHopId?: string(name='NextHopId', description='The ID of the instance specified as the next hop in the route.', example='ecs-bp18sth14qii3pn****'),
      nextHopType?: string(name='NextHopType', description='The type of the instance specified as the next hop in the route.

*   **Instance**: ECS instance
*   **HaVip**: high-availability virtual IP address (HAVIP).
*   **RouterInterface**: router interface.
*   **NetworkInterface**: elastic network interface (ENI).
*   **VpnGateway**: VPN gateway.
*   **IPv6Gateway**: IPv6 gateway.
*   **NatGateway**: NAT gateway.
*   **Attachment**: network instance connection
*   **service**: cloud service
*   **VBR**: VBR
*   **CCN**: CCN instance
*   **VPC**: VPC
*   **local**: system route. No next hop is specified.
*   **TR**: transit router
*   \\*\\*BlackHole\\*\\*: blackhole route. No next hop is specified.
*   \\*\\*EcRouterInterface\\*\\*: router interface for Express Connect
*   **HealthCheck**: health check
*   **AS**: access gateway for CCN
*   **classicLink**: classic network-type instance
*   **GatewayEndpoint**: gateway endpoint
*   **CPE**: data center connected to the VBR', example='Instance'),
      operationalMode?: boolean(name='OperationalMode', description='Indicates whether the route is allowed to be advertised to or withdrawn from the CEN instance. Valid values:

*   **true**: The route is allowed to be advertised to or withdrawn from the CEN instance.
*   **false**: The route is not allowed to be advertised to or withdrawn from the CEN instance.', example='true'),
      publishStatus?: string(name='PublishStatus', description='Indicates whether the route is advertised to the CEN instance. Valid values:

*   **Published**: The route is advertised to the CEN instance.
*   **NonPublished**: The route is not advertised to the CEN instance.', example='Published'),
      routeType?: string(name='RouteType', description='The type of the route. Valid values:

*   **CEN**: route that is advertised through CEN
*   **System**: system route
*   **Custom**: custom route', example='System'),
    }
  ](name='PublishedRouteEntry')
  }(name='PublishedRouteEntries', description='A list of routes.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FF1A7B2A-677F-4F71-96EA-6002B329F437'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribePublishedRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePublishedRouteEntriesResponseBody(name='body'),
}

async function describePublishedRouteEntries(request: DescribePublishedRouteEntriesRequest): DescribePublishedRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePublishedRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouteConflictRequest {
  childInstanceId: string(name='ChildInstanceId', description='The ID of the network instance that you want to query.', example='ccn-0q3b7oviikmm9h****', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='ccn-cn-shanghai', position='Query'),
  childInstanceRouteTableId: string(name='ChildInstanceRouteTableId', description='The ID of the route table that is configured on the network instance.', example='vtb-bp174d1gje79u1g4t****', position='Query'),
  childInstanceType: string(name='ChildInstanceType', description='The type of the network instance. Valid values:

*   **VPC**
*   **VBR**
*   **CCN**', example='CCN', position='Query'),
  destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the conflicting route.', example='172.16.0.0/16', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRouteConflictResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EE3A2CC7-41F1-58DB-8306-CFC99D9C747B'),
  routeConflicts?: {
    routeConflict?: [ 
    {
      destinationCidrBlock?: string(name='DestinationCidrBlock', description='The destination CIDR block of the conflicting route.', example='172.16.0.0/16'),
      instanceId?: string(name='InstanceId', description='The ID of the peer network instance on which conflicting routes are found.', example='ccn-0q3b7oviikmm9h****'),
      instanceType?: string(name='InstanceType', description='The type of the peer network instance on which conflicting routes are found.

*   **VPC**
*   **VBR**
*   **CCN**', example='CCN'),
      regionId?: string(name='RegionId', description='The region ID of the peer network instance on which conflicting routes are found is deployed.', example='ccn-cn-shanghai'),
      status?: string(name='Status', description='The cause of the route error. Valid values:

*   **conflict**: Routes have the same destination CIDR block.
*   **overflow**: The number of routes in the route table configured on another network instance has reached the upper limit.', example='conflict'),
    }
  ](name='RouteConflict')
  }(name='RouteConflicts', description='The array of conflicting routes.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model DescribeRouteConflictResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouteConflictResponseBody(name='body'),
}

async function describeRouteConflict(request: DescribeRouteConflictRequest): DescribeRouteConflictResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouteConflict', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRouteServicesInCenRequest {
  accessRegionId?: string(name='AccessRegionId', description='The ID of the region where the cloud service is accessed.', example='cn-hangzhou', position='Query'),
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-pfa6ugf3xl0qsd****', position='Query'),
  host?: string(name='Host', description='The service address of the cloud service.

You can enter a domain name, an IP address, or a CIDR block.', example='100.118.28.0/24', position='Query'),
  hostRegionId?: string(name='HostRegionId', description='The ID of the region where the cloud service is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  hostVpcId?: string(name='HostVpcId', description='The ID of the virtual private cloud (VPC) that is associated with the cloud service.', example='vpc-bp1h8vbrbcgohcju5****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return per page. Default value: **10**. Valid values: **1** to **50**.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRouteServicesInCenResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='196C99CA-6997-5951-9721-AE89720DF856'),
  routeServiceEntries?: {
    routeServiceEntry?: [ 
    {
      accessRegionId?: string(name='AccessRegionId', description='The ID of the region where the cloud service is accessed.', example='cn-hangzhou'),
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-pfa6ugf3xl0qsd****'),
      cidrs?: {
        cidr?: [ string ](name='Cidr')
      }(name='Cidrs', description='The service addresses of the cloud service.'),
      description?: string(name='Description', description='The description of the cloud service.', example='descname'),
      host?: string(name='Host', description='The service address of the cloud service.', example='100.118.28.0/24'),
      hostRegionId?: string(name='HostRegionId', description='The ID of the region where the cloud service is deployed.', example='cn-hangzhou'),
      hostVpcId?: string(name='HostVpcId', description='The ID of the VPC that is associated with the cloud service.', example='vpc-bp1h8vbrbcgohcju5****'),
      status?: string(name='Status', description='The status of the cloud service. Valid values:

*   **Creating**: The cloud service is being created.
*   **Active**: The cloud service is available.
*   **Deleting**: The cloud service is being deleted.', example='Active'),
    }
  ](name='RouteServiceEntry')
  }(name='RouteServiceEntries', description='The information about the cloud services.'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
}

model DescribeRouteServicesInCenResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouteServicesInCenResponseBody(name='body'),
}

async function describeRouteServicesInCen(request: DescribeRouteServicesInCenRequest): DescribeRouteServicesInCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRouteServicesInCen', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTransitRouteTableAggregationRequest {
  clientToken?: string(name='ClientToken', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  maxResults?: long(name='MaxResults', example='20', minimum=0, position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouteTableAggregationCidr?: string(name='TransitRouteTableAggregationCidr', example='192.168.10.0/24', position='Query'),
  transitRouteTableId: string(name='TransitRouteTableId', example='vtb-6ehgc262hr170qgyc****', position='Query'),
}

model DescribeTransitRouteTableAggregationResponseBody = {
  count?: int32(name='Count', example='20'),
  data?: [ 
    {
      description?: string(name='Description', example='desctest'),
      name?: string(name='Name', example='nametest'),
      routeType?: string(name='RouteType', example='Static'),
      scop?: string(name='Scop', example='VPC'),
      status?: string(name='Status', example='AllConfigured'),
      trRouteTableId?: string(name='TrRouteTableId', example='vtb-6ehgc262hr170qgyc****'),
      transitRouteTableAggregationCidr?: string(name='TransitRouteTableAggregationCidr', example='192.168.10.0/24'),
    }
  ](name='Data'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='0C2EE7A8-74D4-4081-8236-CEBDE3BBCF50'),
  total?: int32(name='Total', example='1'),
}

model DescribeTransitRouteTableAggregationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTransitRouteTableAggregationResponseBody(name='body'),
}

async function describeTransitRouteTableAggregation(request: DescribeTransitRouteTableAggregationRequest): DescribeTransitRouteTableAggregationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTransitRouteTableAggregation', 'POST', '/', 'json', false, 'json', request);
}

model DescribeTransitRouteTableAggregationDetailRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId may be different for each request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouteTableAggregationCidr: string(name='TransitRouteTableAggregationCidr', description='The destination CIDR block of the aggregate route.', example='192.168.10.0/24', position='Query'),
  transitRouteTableId: string(name='TransitRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-6ehgc262hr170qgyc****', position='Query'),
}

model DescribeTransitRouteTableAggregationDetailResponseBody = {
  count?: int32(name='Count', description='The number of entries returned on each page.', example='20'),
  data?: [ 
    {
      description?: string(name='Description', description='The error message returned if the configuration of the aggregate route fails.', example='desctest'),
      instanceId?: string(name='InstanceId', description='The ID of the virtual private cloud (VPC) for which the aggregate route is configured.', example='vpc-6eh7fp9hdqa2wv85t****'),
      status?: string(name='Status', description='The status of the aggregate route. Valid values:

*   **Configured**: The aggregate route is advertised to the VPC.
*   **Configuring**: The aggregate route is being advertised.
*   **ConfigFailed**: The aggregate route failed to be advertised.
*   **PartialConfigured**: Some content of the aggregate route failed to be advertised.
*   **Deleting**: The aggregate route is being deleted.', example='Configured'),
    }
  ](name='Data', description='The configuration of the aggregate route.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C2EE7A8-74D4-4081-8236-CEBDE3BBCF50'),
  total?: int32(name='Total', description='The total number of entries returned.', example='1'),
}

model DescribeTransitRouteTableAggregationDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeTransitRouteTableAggregationDetailResponseBody(name='body'),
}

async function describeTransitRouteTableAggregationDetail(request: DescribeTransitRouteTableAggregationDetailRequest): DescribeTransitRouteTableAggregationDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeTransitRouteTableAggregationDetail', 'POST', '/', 'json', false, 'json', request);
}

model DetachCenChildInstanceRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmx****', position='Query'),
  cenOwnerId?: long(name='CenOwnerId', description='The ID of the Alibaba Cloud account to which the CEN instance belongs.', example='1688000000000000', position='Query'),
  childInstanceId: string(name='ChildInstanceId', description='The ID of the network instance that you want to detach from the CEN instance.', example='vpc-bp18sth14qii3pnvx****', position='Query'),
  childInstanceOwnerId?: long(name='ChildInstanceOwnerId', description='The ID of the Alibaba Cloud account to which the network instance belongs.', example='1699000000000000', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  childInstanceType: string(name='ChildInstanceType', description='The type of the network instance. Valid values:

*   **VPC**: virtual private cloud (VPC)
*   **VBR**: virtual border router (VBR)
*   **CCN**: Cloud Connect Network (CCN) instance', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DetachCenChildInstanceResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C2EE7A8-74D4-4081-8236-CEBDE3BBCF50'),
}

model DetachCenChildInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DetachCenChildInstanceResponseBody(name='body'),
}

async function detachCenChildInstance(request: DetachCenChildInstanceRequest): DetachCenChildInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DetachCenChildInstance', 'POST', '/', 'json', false, 'json', request);
}

model DisableCenVbrHealthCheckRequest {
  cenId: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-sjfoejfghhjgghjghkg****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrInstanceId: string(name='VbrInstanceId', description='The ID of the VBR.', example='vbr-wz95o9aylj181n5****', position='Query'),
  vbrInstanceOwnerId?: long(name='VbrInstanceOwnerId', description='The ID of the Alibaba Cloud account to which the VBR belongs.

> This parameter is required if the VBR and the CEN instance belong to different Alibaba Cloud accounts.', example='1250123456123456', position='Query'),
  vbrInstanceRegionId: string(name='VbrInstanceRegionId', description='The ID of the region where the VBR is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
}

model DisableCenVbrHealthCheckResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A278B8A6-A5B8-4FDE-9F70-95F0F6A1D68A'),
}

model DisableCenVbrHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  body: DisableCenVbrHealthCheckResponseBody(name='body'),
}

/**
  * **DisableCenVbrHealthCheck** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the **DescribeCenVbrHealthCheck** operation to query the status of health check configurations. If the health check configurations cannot be found, the health check configurations are deleted.
  *
 */
async function disableCenVbrHealthCheck(request: DisableCenVbrHealthCheckRequest): DisableCenVbrHealthCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableCenVbrHealthCheck', 'POST', '/', 'json', false, 'json', request);
}

model DisableTransitRouterRouteTablePropagationRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run to check information such as the permissions and the instance status. Default values:

*   **false** (default): performs a dry run and sends the request.
*   **true**: performs a dry run. The system checks the required parameters and the request syntax. If the request fails the dry run, an error message is returned. If the request passes the dry run, the system returns the ID of the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-vx6iwhjr1x1j78****', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-bp1dudbh2d5na6b50****', position='Query'),
}

model DisableTransitRouterRouteTablePropagationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A7C43F99-B1E5-4A53-AB64-4BAE8AF4484E'),
}

model DisableTransitRouterRouteTablePropagationResponse = {
  headers: map[string]string(name='headers'),
  body: DisableTransitRouterRouteTablePropagationResponseBody(name='body'),
}

/**
  * # Usage notes
  * **DisableTransitRouterRouteTablePropagation** is an synchronous operation. After you send a request, a **request ID** is returned but the operation is still being performed in the system background. You can call the **ListTransitRouterRouteTablePropagations** operation to query the status of a route learning correlation.
  * *   If a route learning correlation is in the **Disabling** state, the route learning correlation is being deleted. You can query the route learning correlation but cannot perform other operations.
  * *   If a route learning correlation cannot be found, the route learning correlation is deleted.
  *
 */
async function disableTransitRouterRouteTablePropagation(request: DisableTransitRouterRouteTablePropagationRequest): DisableTransitRouterRouteTablePropagationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableTransitRouterRouteTablePropagation', 'POST', '/', 'json', false, 'json', request);
}

model DisassociateTransitRouterMulticastDomainRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the API request. Valid values:

*   **true**: prechecks the request but does not disassociate the vSwitch from the multicast domain. The system checks the required parameters, the request format, and the service limits. If the request fails the check, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. The vSwitch is disassociated from the multicast domain after the request passes the precheck.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the virtual private cloud (VPC) connection.

A connection ID is generated after a VPC to which the vSwitch belongs is connected to a transit router.', example='tr-attach-g3kz2k3u76amsk****', position='Query'),
  transitRouterMulticastDomainId: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast domain.', example='tr-mcast-domain-91wpg6wbhchjeq****', position='Query'),
  vSwitchIds?: [ string ](name='VSwitchIds', description='A list of vSwitch IDs.', position='Query'),
}

model DisassociateTransitRouterMulticastDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6F6B3FF0-45D1-5416-B189-C45A42A0222B'),
}

model DisassociateTransitRouterMulticastDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DisassociateTransitRouterMulticastDomainResponseBody(name='body'),
}

/**
  * *   After a vSwitch is disassociated from a multicast domain, the multicast sources and members on the vSwitch are also removed from the multicast domain.
  * *   **DisassociateTransitRouterMulticastDomain** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the system background. You can call the **ListTransitRouterMulticastDomainAssociations** operation to query the association status between a vSwitch and a multicast domain.
  *     *   The **Dissociating** state indicates that the vSwitch is being disassociated from the multicast domain. You can query the vSwitch but you cannot perform other operations.
  *     *   If the vSwitch cannot be found, the vSwitch is disassociated from the multicast domain.
  *
 */
async function disassociateTransitRouterMulticastDomain(request: DisassociateTransitRouterMulticastDomainRequest): DisassociateTransitRouterMulticastDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisassociateTransitRouterMulticastDomain', 'POST', '/', 'json', false, 'json', request);
}

model DissociateTransitRouterAttachmentFromRouteTableRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request but not perform the operation. The system checks the permissions and the status of the specified instances. Valid values:

*   **false** (default): sends the request. If the request passes the precheck, the associated forwarding correlation is deleted.
*   **true**: sends a request for precheck only. The associated forwarding correlation is not deleted after the request passes the precheck. If you use this value, the system checks the required parameters and the request syntax. If the check fails, the corresponding error message is returned. If the request passes the check, the system returns the ID of the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-nls9fzkfat8934****', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-bp1dudbh2d5na6b50****', position='Query'),
}

model DissociateTransitRouterAttachmentFromRouteTableResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='4EC47282-1B74-4534-BD0E-403F3EE64CAF'),
}

model DissociateTransitRouterAttachmentFromRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateTransitRouterAttachmentFromRouteTableResponseBody(name='body'),
}

/**
  * # Usage notes
  * **DissociateTransitRouterAttachmentFromRouteTable** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the system background. You can call the **ListTransitRouterRouteTableAssociations** operation to query an associated forwarding correlation between a network instance connection and a route table.
  * *   If an associated forwarding correlation is in the **Dissociating** state, the associated forwarding correlation is being deleted. In this case, you can query the associated forwarding correlation but cannot perform other operations.
  * *   If an associated forwarding correlation cannot be found, the associated forwarding correlation is deleted.
  *
 */
async function dissociateTransitRouterAttachmentFromRouteTable(request: DissociateTransitRouterAttachmentFromRouteTableRequest): DissociateTransitRouterAttachmentFromRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DissociateTransitRouterAttachmentFromRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model EnableCenVbrHealthCheckRequest {
  cenId: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-hahhfskfkseig****', position='Query'),
  healthCheckInterval?: int32(name='HealthCheckInterval', description='The time interval at which probe packets are sent during a health check. Unit: seconds. Default value: **2**. Valid values: **2 to 3**.', example='2', minimum=1, maximum=3, position='Query'),
  healthCheckOnly?: boolean(name='HealthCheckOnly', description='Specifies whether to enable probing during the health check. Valid values:

*   **true**: yes

        If you enable probing, the system does not switch to another route if the detected route is not reachable. 

          Make sure that a redundant route is available. Otherwise, network disconnections may occur. 

*   **false** (default): no

        Probing is disabled by default. If a redundant route is specified, the system switches to the redundant route if the detected route is not reachable.', example='false', position='Query'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp', description='The source IP address for the health check. You can set the source IP address in the following ways:

*   **Automatic IP Address** (recommended): The system automatically assigns an IP address from the 100.96.0.0/16 CIDR block.
*   **Custom IP Address**: You must specify an idle IP address from the 10.0.0.0/8, 192.168.0.0/16, or 172.16.0.0/12 CIDR block. The specified IP address cannot be the IP address of the VBR on the Alibaba Cloud side, the IP address of the VBR on the customer side, or other IP addresses with which the VBR communicates through the CEN instance.', example='192.XX.XX.1', position='Query'),
  healthCheckTargetIp: string(name='HealthCheckTargetIp', description='The destination IP address for the health check.

Set the destination IP address to the IP address of the VBR on the customer side.', example='10.XX.XX.1', position='Query'),
  healthyThreshold?: int32(name='HealthyThreshold', description='The number of probe packets that are sent during a health check. Unit: packets. Valid values: **3 to 8**. Default value: **8**.', example='8', minimum=3, maximum=8, position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vbrInstanceId: string(name='VbrInstanceId', description='The ID of the VBR.', example='vbr-wz95o9aylj181n5mzk****', position='Query'),
  vbrInstanceOwnerId?: long(name='VbrInstanceOwnerId', description='The ID of the Alibaba Cloud account to which the VBR belongs.

> This parameter is required if the VBR and the CEN instance belong to different Alibaba Cloud accounts.', example='1250123456123456', position='Query'),
  vbrInstanceRegionId: string(name='VbrInstanceRegionId', description='The ID of the region where the VBR is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-shenzhen', position='Query'),
}

model EnableCenVbrHealthCheckResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1F59F19C-EFD2-40B1-94D5-65B40CA8E34A'),
}

model EnableCenVbrHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  body: EnableCenVbrHealthCheckResponseBody(name='body'),
}

/**
  * You can enable the health check feature for a VBR to monitor the Express Connect circuit between your data center and Alibaba Cloud. This helps you detect connection issues in a timely manner.
  * Before you use the health check feature, take note of the following information:
  * *   If your VBR uses static routing, you must add a static route for the data center that is connected to the VBR after you configure the health check feature. Set the destination CIDR block to the source IP address of health checks, set the mask length to 32, and set the next hop to the IP address of the VBR on the Alibaba Cloud side.
  * *   If your VBR uses dynamic Border Gateway Protocol (BGP) routing, you do not need to add routes for the data center.
  * *   **EnableCenVbrHealthCheck** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the **DescribeCenVbrHealthCheck** operation to query the status of health check configurations. If health check configurations are returned, health check is configured or modified.
  *
 */
async function enableCenVbrHealthCheck(request: EnableCenVbrHealthCheckRequest): EnableCenVbrHealthCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableCenVbrHealthCheck', 'POST', '/', 'json', false, 'json', request);
}

model EnableTransitRouterRouteTablePropagationRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request but not perform the operation. The system checks the permissions and the status of the specified instances. Valid values:

*   **false** (default): sends the request. If the request passes the precheck, the route learning correlation is created.
*   **true**: sends a request for precheck only. No route learning correlation is created after the request passes the precheck. If you use this value, the system checks whether the required parameters are set, and whether the request syntax is valid. If the request fails to pass the precheck, an error message is returned. If the request passes the precheck, the system returns the ID of the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-nls9fzkfat8934****', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-bp1dudbh2d5na6b50****', position='Query'),
}

model EnableTransitRouterRouteTablePropagationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='59CF8BF9-DE61-421E-B903-D56AF46A303C'),
}

model EnableTransitRouterRouteTablePropagationResponse = {
  headers: map[string]string(name='headers'),
  body: EnableTransitRouterRouteTablePropagationResponseBody(name='body'),
}

/**
  * After you establish a network instance connection on a transit router, you can create a route learning correlation for the network instance connection. Then, the routes of the connected network instance are automatically advertised to the route table of the transit router. Before you begin, we recommend that you read and understand the following rules:
  * *   You can create route learning correlations only on Enterprise Edition transit routers. For more information about the regions and zones that support Enterprise Edition transit routers, see [What is CEN?](~~181681~~)
  * *   **EnableTransitRouterRouteTablePropagation** is an asynchronous operation. After you send a request, the system returns a **request ID** but the operation is still being performed in the system background. You can call **ListTransitRouterRouteTablePropagations** to query the route learning status between a network instance connection and a route table.
  *     *   **Enabling** indicates that a route learning correlation is being created between the network instance connection and route table. You can query the route learning correlation but cannot perform other operations.
  *     *   **Active** indicates that the route learning correlation is created between the network instance connection and route table.
  *
 */
async function enableTransitRouterRouteTablePropagation(request: EnableTransitRouterRouteTablePropagationRequest): EnableTransitRouterRouteTablePropagationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableTransitRouterRouteTablePropagation', 'POST', '/', 'json', false, 'json', request);
}

model GrantInstanceToTransitRouterRequest {
  cenId: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance to which the transit router belongs.', example='cen-44m0p68spvlrqq****', position='Query'),
  cenOwnerId: long(name='CenOwnerId', description='The ID of the Alibaba Cloud account to which the CEN instance belongs.', example='1250123456123456', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the network instance.', example='vpc-bp1h8vbrbcgohcju5****', position='Query'),
  instanceType: string(name='InstanceType', description='The type of the network instance. Valid values:

*   **VPC**: VPC
*   **ExpressConnect**: VBR
*   **VPN**: IPsec-VPN connection', example='VPC', position='Query'),
  orderType?: string(name='OrderType', description='The entity that pays the fees of the network instance. Valid values:

*   **PayByCenOwner**: the Alibaba Cloud account that owns the CEN instance.
*   **PayByResourceOwner**: the Alibaba Cloud account that owns the network instance.', example='PayByCenOwner', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GrantInstanceToTransitRouterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C6E5992C-A57B-5A6C-9B26-568074DC68BA'),
}

model GrantInstanceToTransitRouterResponse = {
  headers: map[string]string(name='headers'),
  body: GrantInstanceToTransitRouterResponseBody(name='body'),
}

/**
  * ## Description
  * *   `GrantInstanceToTransitRouter` grants transit routes permissions to connect only to virtual private clouds (VPCs), virtual border routers (VBRs), and IPsec-VPN connections that belong to another Alibaba Cloud account.
  *     If you want to grant transit routers permissions to connect to Cloud Connect Network (CCN) instances, call the [GrantInstanceToCbn](~~126141~~) operation.
  * *   Before you call `GrantInstanceToTransitRouter`, take note of the billing rules, permission limits, and prerequisites on permission management of transit routers. For more information, see [Acquire permissions to connect to a network instance that belongs to another account](~~181553~~).
  *
 */
async function grantInstanceToTransitRouter(request: GrantInstanceToTransitRouterRequest): GrantInstanceToTransitRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GrantInstanceToTransitRouter', 'POST', '/', 'json', false, 'json', request);
}

model ListCenChildInstanceRouteEntriesToAttachmentRequest {
  cenId?: string(name='CenId', position='Query'),
  childInstanceRouteTableId: string(name='ChildInstanceRouteTableId', example='vtb-bp174d1gje79u1g4t****', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeFilter?: [ 
    {
      key?: string(name='Key', example='prefix-exact-match'),
      value?: [ string ](name='Value'),
    }
  ](name='RouteFilter', position='Query'),
  serviceType?: string(name='ServiceType', example='TR', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', example='tr-attach-r6g0m3epjehw57****', position='Query'),
}

model ListCenChildInstanceRouteEntriesToAttachmentResponseBody = {
  nextToken?: string(name='NextToken', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', example='530BC816-F575-412A-AAB2-435125D26328'),
  routeEntry?: [ 
    {
      cenId?: string(name='CenId'),
      childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId', example='vtb-bp1tlaj1c4nxr2t3e****'),
      destinationCidrBlock?: string(name='DestinationCidrBlock', example='10.0.0.0/8'),
      serviceType?: string(name='ServiceType', example='TR'),
      status?: string(name='Status', example='Available'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', example='tr-attach-y463sghkkv1loe****'),
    }
  ](name='RouteEntry'),
}

model ListCenChildInstanceRouteEntriesToAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: ListCenChildInstanceRouteEntriesToAttachmentResponseBody(name='body'),
}

async function listCenChildInstanceRouteEntriesToAttachment(request: ListCenChildInstanceRouteEntriesToAttachmentRequest): ListCenChildInstanceRouteEntriesToAttachmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCenChildInstanceRouteEntriesToAttachment', 'POST', '/', 'json', false, 'json', request);
}

model ListCenInterRegionTrafficQosPoliciesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **20**.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If this is your first query or no subsequent query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of **NextToken** that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficQosPolicyDescription?: string(name='TrafficQosPolicyDescription', description='The description of the QoS policy.

The description must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The description must start with a letter.', example='desctest', position='Query'),
  trafficQosPolicyId?: string(name='TrafficQosPolicyId', description='The ID of the QoS policy.', example='qos-rnghap5gc8155x****', position='Query'),
  trafficQosPolicyName?: string(name='TrafficQosPolicyName', description='The name of the QoS policy.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='nametest', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the inter-region connection.', example='tr-attach-r6g0m3epjehw57****', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-bp1rmwxnk221e3fas****', position='Query'),
}

model ListCenInterRegionTrafficQosPoliciesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query.

*   If **NextToken** was not returned in the previous query, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='113BFD47-63DF-5D9D-972C-033FB9C360CD'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  trafficQosPolicies?: [ 
    {
      trafficQosPolicyDescription?: string(name='TrafficQosPolicyDescription', description='The description of the QoS policy.', example='desctest'),
      trafficQosPolicyId?: string(name='TrafficQosPolicyId', description='The ID of the QoS policy.', example='qos-rnghap5gc8155x****'),
      trafficQosPolicyName?: string(name='TrafficQosPolicyName', description='The name of the QoS policy.', example='nametest'),
      trafficQosPolicyStatus?: string(name='TrafficQosPolicyStatus', description='The status of the QoS policy. Valid values:

*   **Creating**: The QoS policy is being created.
*   **Active**: The QoS policy is available.
*   **Modifying**: The QoS policy is being modified
*   **Deleting**: The QoS policy is being deleted.
*   **Deleted**: The QoS policy is deleted.', example='Creating'),
      trafficQosQueues?: [ 
        {
          dscps?: [ int32 ](name='Dscps', description='The differentiated services code point (DSCP) value used to match packets in the queue.'),
          qosQueueDescription?: string(name='QosQueueDescription', description='The description of the queue.', example='desctest'),
          qosQueueId?: string(name='QosQueueId', description='The ID of the queue.', example='qos-queue-njcrmr9fiu1jii****'),
          qosQueueName?: string(name='QosQueueName', description='The name of the queue.', example='namtest'),
          remainBandwidthPercent?: int32(name='RemainBandwidthPercent', description='The percentage of the inter-region bandwidth that can be used by the queue.', example='1'),
        }
      ](name='TrafficQosQueues', description='A list of queues.'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-q7ct7c06jpw***'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-2ze4ta4v32umj0rb***'),
    }
  ](name='TrafficQosPolicies', description='A list of QoS policies.'),
}

model ListCenInterRegionTrafficQosPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCenInterRegionTrafficQosPoliciesResponseBody(name='body'),
}

/**
  * When you call the **ListCenInterRegionTrafficQosPolicies** operation, take note of the following information:
  * *   If you do not set the **TrafficQosPolicyId** parameter, the system returns information about QoS policies based on the values of the **TransitRouterId**, **TransitRouterAttachmentId**, **TrafficQosPolicyName**, and **TrafficQosPolicyDescription** parameters, but does not return information about the queues in the QoS policies. The **TrafficQosQueues** parameter is not included in the response.
  * *   If you specify a QoS policy ID in the **TrafficMarkingPolicyId** parameter, the system returns the information about the QoS policy and the queues. The **TrafficQosQueues** parameter is included in the response.
  *     If the **TrafficQosQueues** parameter contains an empty array, it indicates that the QoS policy contains only the default queue.
  *
 */
async function listCenInterRegionTrafficQosPolicies(request: ListCenInterRegionTrafficQosPoliciesRequest): ListCenInterRegionTrafficQosPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCenInterRegionTrafficQosPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListCenInterRegionTrafficQosQueuesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: 1 to 100. Default value: 20.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query.

*   If **NextToken** was not returned in the previous query, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='2ca1ed1573cbfd3a', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficQosPolicyId?: string(name='TrafficQosPolicyId', description='The ID of the QoS policy.', example='qos-rnghap5gc8155x****', position='Query'),
  trafficQosQueueDescription?: string(name='TrafficQosQueueDescription', description='The description of the queue.', example='qosQueueDescription', position='Query'),
  trafficQosQueueId?: string(name='TrafficQosQueueId', description='The ID of the queue.', example='qos-queue-siakjb2nn9gz5z****', position='Query'),
  trafficQosQueueName?: string(name='TrafficQosQueueName', description='The name of the queue.', example='qosQueueName', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the inter-region connection.', example='tr-attach-a6p8voaodog5c0****', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-bp1rmwxnk221e3fas****', position='Query'),
}

model ListCenInterRegionTrafficQosQueuesResponseBody = {
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If **NextToken** was not returned, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='0151fa6aa1ed43b7'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1D1E15D2-416D-54F3-BDD9-BC27DE4C6352'),
  trafficQosQueues?: [ 
    {
      dscps?: [ int32 ](name='Dscps', description='The differentiated services code point (DSCP) value that matches the current queue.'),
      remainBandwidthPercent?: int32(name='RemainBandwidthPercent', description='The percentage of bandwidth resources that can be allocated to the current queue.

Each QoS policy supports up to three queues. You can specify a percentage of bandwidth resources for each queue.

For example, a value of **1** indicates that 1 percent of bandwidth resources can be allocated to the queue.', example='1'),
      status?: string(name='Status', description='The status of the queue. Valid values:

**Creating**: The queue is being created. **Active**: The queue is available. **Deleting**: The queue is being deleted.', example='Active'),
      trafficQosPolicyId?: string(name='TrafficQosPolicyId', description='The ID of the QoS policy.', example='qos-fv2qq9yqrsjowp****'),
      trafficQosQueueDescription?: string(name='TrafficQosQueueDescription', description='The description of the queue.', example='qosQueueDescription'),
      trafficQosQueueId?: string(name='TrafficQosQueueId', description='The ID of the queue.', example='qos-queue-siakjb2nn9gz5z****'),
      trafficQosQueueName?: string(name='TrafficQosQueueName', description='The name of the queue.', example='qosQueueName'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the inter-region connection.', example='tr-attach-nzrcv25d7ezt23****'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-p0wwagjv6fvxt4b7y****'),
    }
  ](name='TrafficQosQueues', description='A list of queues.'),
}

model ListCenInterRegionTrafficQosQueuesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCenInterRegionTrafficQosQueuesResponseBody(name='body'),
}

async function listCenInterRegionTrafficQosQueues(request: ListCenInterRegionTrafficQosQueuesRequest): ListCenInterRegionTrafficQosQueuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCenInterRegionTrafficQosQueues', 'POST', '/', 'json', false, 'json', request);
}

model ListGrantVSwitchEnisRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance to which the VPC is attached.', example='cen-a7syd349kne38g****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchId: string(name='VSwitchId', description='The ID of a vSwitch in the VPC.

You can specify only one vSwitch in each call.', example='vsw-p0w9s2ig1jnwgrbzl****', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC.', example='vpc-p0w9alkte4w2htrqe****', position='Query'),
}

model ListGrantVSwitchEnisResponseBody = {
  grantVSwitchEnis?: [ 
    {
      description?: string(name='Description', description='The description of the ENI.', example='created by CBN'),
      networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI.', example='eni-p0w172vv82kxzb49****'),
      transitRouterFlag?: boolean(name='TransitRouterFlag', description='Indicates whether the ENI is created by a transit router. Valid values:

*   **true**: yes
*   **false**: no

ENIs that are created by transit routers cannot be used as multicast sources or members.', example='false'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-p0w9s2ig1jnwgrbzl****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-p0w9alkte4w2htrqe****'),
    }
  ](name='GrantVSwitchEnis', description='The list of ENIs.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DBFE1736-2F33-5309-9954-875B11E9519D'),
  totalCount?: string(name='TotalCount', description='The number of entries returned.', example='6'),
}

model ListGrantVSwitchEnisResponse = {
  headers: map[string]string(name='headers'),
  body: ListGrantVSwitchEnisResponseBody(name='body'),
}

/**
  * Before you call `ListGrantVSwitchEnis`, make sure that the VPC is attached to a Cloud Enterprise Network (CEN) instance. For more information, see [CreateTransitRouterVpcAttachment](~~261358~~).
  *
 */
async function listGrantVSwitchEnis(request: ListGrantVSwitchEnisRequest): ListGrantVSwitchEnisResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGrantVSwitchEnis', 'POST', '/', 'json', false, 'json', request);
}

model ListGrantVSwitchesToCenRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-44m0p68spvlrqq****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', minimum=0, maximum=1000, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **10**.', example='10', minimum=1, maximum=50, position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the VPC is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC.', example='vpc-bp12ge2tq5gzdc915****', position='Query'),
  zoneId?: string(name='ZoneId', description='The ID of the zone where the instance resides.

*   If you specify a zone ID, the system queries the information about the vSwitches in the specified zone.
*   If you do not specify a zone ID, the system queries the information about the vSwitches in all zones.

You can call the [DescribeZones](~~36064~~) operation to query the most recent zone list.', example='cn-hangzhou-h', position='Query'),
}

model ListGrantVSwitchesToCenResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A9288C78-881A-5D30-A8A9-68E05EE0A086'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  vSwitches?: [ 
    {
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp1194lh263wx1gsk****'),
      vSwitchName?: string(name='VSwitchName', example='nametest'),
      vpcId?: string(name='VpcId', description='The ID of the VPC to which the vSwitch belongs.', example='vpc-bp12ge2tq5gzdc915****'),
      zoneId?: string(name='ZoneId', description='The ID of the zone where the vSwitch is deployed.', example='cn-hangzhou-h'),
    }
  ](name='VSwitches', description='A list of vSwitches.'),
}

model ListGrantVSwitchesToCenResponse = {
  headers: map[string]string(name='headers'),
  body: ListGrantVSwitchesToCenResponseBody(name='body'),
}

/**
  * Before you call the `ListGrantVSwitchesToCen` operation, make sure that the following requirements are met:
  * *   The permissions on the VPC are granted to the CEN instance. For more information, see [GrantInstanceToCen](~~126224~~).
  * *   The VPC is attached to the CEN instance.
  *     *   For more information about how to connect an Enterprise Edition transit router to a VPC, see [CreateTransitRouterVpcAttachment](~~261358~~).
  *     *   For more information about how to connect a Basic Edition transit router to a VPC, see [AttachCenChildInstance](~~65902~~).
  *
 */
async function listGrantVSwitchesToCen(request: ListGrantVSwitchesToCenRequest): ListGrantVSwitchesToCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGrantVSwitchesToCen', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If this is your first query and no next queries are to be sent, ignore this parameter.
*   If a subsequent query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **10**.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the resource is deployed.

You can ignore this parameter if ResourceType is set to Cen or BandwidthPackage.', example='cn-hangzhou', position='Query'),
  resourceId?: [ string ](name='ResourceId', description='The IDs of the CEN instances.

You can specify at most 20 IDs in each call.', example='cen-8z69wtwqel33lq****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource to which you want to add the tag. Valid values:

**Cen**: CEN instance

**BandwidthPackage**: bandwidth plan

**TransitRouter**: transit router

**TransitRouterVpcAttachment**: virtual private cloud (VPC) connection

**TransitRouterVbrAttachment**: virtual border router (VBR) connection

**TransitRouterPeerAttachment**: inter-region connection

**TransitRouterVpnAttachment**: VPN connection

**TransitRouterRouteTable**: route table

**Flowlog**: flow log

**TransitRouterMulticastDomain**: multicast domain', example='cen', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

The tag key cannot exceed 64 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='test'),
      value?: string(name='Value', description='The tag value.

The tag value cannot exceed 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag values.', example='Bp'),
    }
  ](name='Tag', description='The information about the tags that are added to the CEN instance.

You can query at most 20 tags in each call.', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If **NextToken** was not returned, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='165B5C86-2033-5954-A89D-4CD83BA06C85'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the CEN instance.', example='cen-8z69wtwqel33lq****'),
      resourceType?: string(name='ResourceType', description='The type of the resource. Valid values:

**Cen**: CEN instance

**BandwidthPackage**: bandwidth plan

**TransitRouter**: transit router

**TransitRouterVpcAttachment**: virtual private cloud (VPC) connection

**TransitRouterVbrAttachment**: virtual border router (VBR) connection

**TransitRouterPeerAttachment**: inter-region connection

**TransitRouterVpnAttachment**: VPN connection

**TransitRouterRouteTable**: route table

**Flowlog**: flow log

**TransitRouterMulticastDomain**: multicast domain', example='CEN'),
      tagKey?: string(name='TagKey', description='The tag key.', example='test'),
      tagValue?: string(name='TagValue', description='The tag value.', example='Bp'),
    }
  ](name='TagResource')
  }(name='TagResources', description='A list of resources and tags.'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

/**
  * To call this operation, you must set at least one of **ResourceId.N** and **Tag.N.Key**.
  * *   If you set only **ResourceId.N**, the tags that are added to the specified CEN instances are returned.
  * *   If you set only **Tag.N.Key**, the CEN instances that have the specified tags are returned.
  * *   If you set both **ResourceId.N** and **Tag.N.Key**, the specified tags that are added to the specified CEN instances are returned.
  *     *   Make sure that the CEN instance specified by **ResourceId.N** has the tag specified by **Tag.N.Key**. Otherwise, the response returns null.
  *     *   If multiple tag keys are specified, the logical operator among these tag keys is **AND**.
  *
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListTrafficMarkingPoliciesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **20**.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If this is your first query or no subsequent query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of **NextToken** that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMarkingPolicyDescription?: string(name='TrafficMarkingPolicyDescription', description='The description of the traffic marking policy.

The description must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The description must start with a letter.', example='desctest', position='Query'),
  trafficMarkingPolicyId?: string(name='TrafficMarkingPolicyId', description='The ID of the traffic marking policy.', example='tm-iz5egnyitxiroq****', position='Query'),
  trafficMarkingPolicyName?: string(name='TrafficMarkingPolicyName', description='The name of the traffic marking policy.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='nametest', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-bp1rmwxnk221e3fas****', position='Query'),
}

model ListTrafficMarkingPoliciesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query.

*   If **NextToken** was not returned in the previous query, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='699989E4-64A0-5F78-8B93-CDB32D98971F'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
  trafficMarkingPolicies?: [ 
    {
      markingDscp?: int32(name='MarkingDscp', description='The differentiated services code point (DSCP) value of the traffic marking policy.', example='5'),
      priority?: int32(name='Priority', description='The priority of the traffic marking policy.

A smaller value indicates a higher priority.', example='5'),
      trafficMarkingPolicyDescription?: string(name='TrafficMarkingPolicyDescription', description='The description of the traffic marking policy.', example='desctest'),
      trafficMarkingPolicyId?: string(name='TrafficMarkingPolicyId', description='The ID of the traffic marking policy.', example='tm-iz5egnyitxiroq****'),
      trafficMarkingPolicyName?: string(name='TrafficMarkingPolicyName', description='The name of the traffic marking policy.', example='nametest'),
      trafficMarkingPolicyStatus?: string(name='TrafficMarkingPolicyStatus', description='The status of the traffic marking policy. Valid values:

*   **Creating**: The policy is being created.
*   **Active**: The policy is available.
*   **Modifying**: The policy is being modified
*   **Deleting**: The policy is being deleted.
*   **Deleted**: The policy is deleted.', example='Creating'),
      trafficMatchRules?: [ 
        {
          dstCidr?: string(name='DstCidr', description='The destination CIDR block used to match data packets.', example='192.168.120.0/24'),
          dstPortRange?: [ int32 ](name='DstPortRange', description='The destination port range used to match data packets.'),
          matchDscp?: int32(name='MatchDscp', description='The DSCP value used to match data packets.', example='6'),
          protocol?: string(name='Protocol', description='The protocol used to match data packets.

> Traffic marking policies support multiple protocols. For more information, see the documentation of CEN.', example='HTTP'),
          srcCidr?: string(name='SrcCidr', description='The source CIDR block used to match data packets.', example='192.168.10.0/24'),
          srcPortRange?: [ int32 ](name='SrcPortRange', description='The source port range used to match data packets.'),
          trafficMatchRuleDescription?: string(name='TrafficMatchRuleDescription', description='The description of the traffic classification rule.', example='desctest'),
          trafficMatchRuleId?: string(name='TrafficMatchRuleId', description='The ID of the traffic classification rule.', example='tm-rule-fa9kgq1e90rmhc****'),
          trafficMatchRuleName?: string(name='TrafficMatchRuleName', description='The name of the traffic classification rule.', example='nametest'),
          trafficMatchRuleStatus?: string(name='TrafficMatchRuleStatus', description='The status of the traffic classification rule. Valid values:

*   **Creating**: The rule is being created.
*   **Active**: The rule is available.
*   **Deleting**: The rule is being deleted.
*   **Deleted**: The rule is deleted.', example='Creating'),
        }
      ](name='TrafficMatchRules', description='The list of traffic classification rules.'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-ccni***'),
    }
  ](name='TrafficMarkingPolicies', description='The list of traffic marking policies.'),
}

model ListTrafficMarkingPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrafficMarkingPoliciesResponseBody(name='body'),
}

/**
  * Take note of the following rules when you call the **ListTrafficMarkingPolicies** operation:
  * *   If you do not specify a traffic marking policy ID in the **TrafficMarkingPolicyId** parameter, the system returns the information about the traffic marking policies based on the **TransitRouterId**, **TrafficMarkingPolicyName**, and **TrafficMarkingPolicyDescription** parameters. The information about the traffic classification rules in the policies is not returned. The **TrafficMatchRules** parameter is not included in the response.
  * *   If you specify a traffic marking policy ID in the **TrafficMarkingPolicyId** parameter, this operation returns the information about the traffic marking policy and the traffic classification rules. The **TrafficMatchRules** parameter is included in the response.
  *     If the **TrafficMatchRules** parameter contains an empty array, it indicates that the traffic marking policy does not contain a traffic classification rule.
  *
 */
async function listTrafficMarkingPolicies(request: ListTrafficMarkingPoliciesRequest): ListTrafficMarkingPoliciesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTrafficMarkingPolicies', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterAvailableResourceRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the Enterprise Edition transit router is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  supportMulticast?: boolean(name='SupportMulticast', description='Specifies whether to query only the zones in which the multicast feature is supported. Valid values:

*   **true**: yes

    After you call **ListTransitRouterAvailableResource**, if no zone is returned, it indicates that the Enterprise Edition transit router does not support the multicast feature.

*   **false** (default): no', example='false', position='Query'),
}

model ListTransitRouterAvailableResourceResponseBody = {
  availableZones?: [ string ](name='AvailableZones', description='A list of zones.'),
  masterZones?: [ string ](name='MasterZones', description='A list of primary zones.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B4F480E0-4E76-5E43-9966-8322C28A158A'),
  slaveZones?: [ string ](name='SlaveZones', description='A list of zone IDs.

You can call [DescribeZones](~~36064~~) to query zones by ID.'),
  supportMulticast?: boolean(name='SupportMulticast'),
}

model ListTransitRouterAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterAvailableResourceResponseBody(name='body'),
}

/**
  * *   You can call **ListTransitRouterAvailableResource** to query the zones that support Enterprise Edition transit routers in a specified region.
  *     *   If you do not set **SupportMulticast** to **true**, general-purpose zones that support Enterprise Edition transit routers are queried.
  *     *   If you set **SupportMulticast** to **true**, zones in which Enterprise Edition transit routers support multicast are queried.
  * *   On May 31, 2022, VPC-connected Enterprise Edition transit routers were optimized. Optimized Enterprise Edition transit routers do not require you to specify the primary and secondary zones when you connect VPCs to the Enterprise Edition transit routers. You can specify one or more zones.
  *     *   If your Enterprise Edition transit router has not been optimized, you must specify the primary and secondary zones when you connect a VPC to your Enterprise Edition transit router. After you call **ListTransitRouterAvailableResource**, you can call **MasterZones** and **SlaveZones** to query the primary and secondary zones.
  *     *   If your Enterprise Edition transit router has been optimized, you can specify a zone as needed when you connect a VPC to your Enterprise Edition transit router. After you call **ListTransitRouterAvailableResource**, you can call **AvailableZones** to query the zones.
  *         For more information about the optimization, see [Announcement: Optimization on VPC-connected Enterprise Edition transit routers](~~434191~~).
  *
 */
async function listTransitRouterAvailableResource(request: ListTransitRouterAvailableResourceRequest): ListTransitRouterAvailableResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterAvailableResource', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterCidrRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId may be different for each request.', example='123e4567-e89b-12d3-a456-426****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the API request. Valid values:

*   **true**: prechecks the request but does not query the CIDR block. The system checks the required parameters, the request format, and the service limits. If the request fails the check, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. After the request passes the check, the operation is performed.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the transit router is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterCidrId?: string(name='TransitRouterCidrId', description='The ID of the CIDR block.', example='cidr-0zv0q9crqpntzz****', position='Query'),
  transitRouterId: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-p0w3x8c9em72a40nw****', position='Query'),
}

model ListTransitRouterCidrResponseBody = {
  cidrLists?: [ 
    {
      cidr?: string(name='Cidr', description='The CIDR block of the transit router.', example='192.168.10.0/24'),
      description?: string(name='Description', description='The description of the CIDR block.', example='desctest'),
      family?: string(name='Family', description='The type of the CIDR block.

The value is set to **IPv4**, which indicates that the CIDR block is of the IPv4 type.', example='IPv4'),
      name?: string(name='Name', description='The name of the CIDR block.', example='nametest'),
      publishCidrRoute?: boolean(name='PublishCidrRoute', description='Indicates whether the system is allowed to automatically add a route to the route table of the transit router.

*   **true**: yes.

        A value of true indicates that if you create a private VPN connection and add a route learning policy for the VPC connection, the system automatically adds the following route to the route table of the transit router that is in route learning relationship with the VPN connection:
          A blackhole route whose destination CIDR block is the CIDR block of the transit router. The CIDR block of the transit router refers to the CIDR block from which gateway IP addresses are allocated to IPsec-VPN connections. 
          The blackhole route is advertised only to the route tables of VBRs that are connected to the transit router. 

*   **false**: no.', example='true'),
      transitRouterCidrId?: string(name='TransitRouterCidrId', description='The ID of the CIDR block.', example='cidr-0zv0q9crqpntzz****'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-p0w3x8c9em72a40nw****'),
    }
  ](name='CidrLists', description='The CIDR blocks of the transit router.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0876E54E-3E36-5C31-89F0-9EE8A9266F9A'),
}

model ListTransitRouterCidrResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterCidrResponseBody(name='body'),
}

async function listTransitRouterCidr(request: ListTransitRouterCidrRequest): ListTransitRouterCidrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterCidr', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterCidrAllocationRequest {
  attachmentId?: string(name='AttachmentId', description='The ID of the network instance connection.', example='tr-attach-2nalp6yksc805w****', position='Query'),
  attachmentName?: string(name='AttachmentName', description='The name of the network instance connection.', example='nametest', position='Query'),
  cidr?: string(name='Cidr', description='The CIDR block of the transit router.', example='192.168.10.0/24', position='Query'),
  cidrBlock?: string(name='CidrBlock', description='The CIDR block that has been allocated to network instances.', example='192.168.10.0/28', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId for each API request may be different.', example='123e4567-e89b-12d3-a456-426****', position='Query'),
  dedicatedOwnerId?: string(name='DedicatedOwnerId', description='The CIDR block that is for exclusive use.

Set the value to **VPN**, which specifies the CIDR block that is reserved for VPN connections.', example='VPN', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the request. Valid values:

*   **true**: prechecks the request but does not query how IP addresses within the CIDR block of a transit router are allocated. The system checks the required parameters, the request format, and the service limits. If the request fails to pass the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. After the request passes the precheck, allocated IP addresses are queried.', example='false', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.

*   If you do not set **MaxResults**, it indicates that you do not need to query results in batches. The value of **MaxResults** indicates the total number of entries.

*   If a value is specified for **MaxResults**, it indicates that you need to query results in batches. Valid values: **1** to **100**. We recommend that you set **MaxResults** to **20**.

    The value of **MaxResults** in the response indicates the number of entries in the current batch.', example='20', minimum=5, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If this is your first query or no subsequent query is to be sent, ignore this parameter.
*   If a subsequent query is to be sent, set the value to the value of **NextToken** that was returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the transit router is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterCidrId?: string(name='TransitRouterCidrId', description='The ID of the CIDR block.

You can call [ListTransitRouterCidr](~~462772~~) to query the ID of a CIDR block.', example='cidr-0zv0q9crqpntzz****', position='Query'),
  transitRouterId: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-p0w3x8c9em72a40nw****', position='Query'),
}

model ListTransitRouterCidrAllocationResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.

*   If no value is specified for **MaxResults**, query results are returned in one batch. The value of **MaxResults** indicates the total number of entries.
*   If a value is specified for **MaxResults**, query results are returned in batches. The value of **MaxResults** in the response indicates the number of entries in the current batch.', example='1'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If **NextToken** was not returned, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0876E54E-3E36-5C31-89F0-9EE8A9266F9A'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  transitRouterCidrAllocations?: [ 
    {
      allocatedCidrBlock?: string(name='AllocatedCidrBlock', description='The CIDR blocks that have been allocated to network instances.', example='192.168.10.0/28'),
      attachmentId?: string(name='AttachmentId', description='The ID of the network instance connection.', example='tr-attach-2nalp6yksc805w****'),
      attachmentName?: string(name='AttachmentName', description='The name of the network instance connection.', example='nametest'),
      cidr?: string(name='Cidr', description='The ID of the transit router CIDR block.', example='192.168.10.0/24'),
      transitRouterCidrId?: string(name='TransitRouterCidrId', description='The ID of the transit router CIDR block.', example='cidr-0zv0q9crqpntzz****'),
    }
  ](name='TransitRouterCidrAllocations', description='The information about the allocated CIDR blocks.'),
}

model ListTransitRouterCidrAllocationResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterCidrAllocationResponseBody(name='body'),
}

async function listTransitRouterCidrAllocation(request: ListTransitRouterCidrAllocationRequest): ListTransitRouterCidrAllocationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterCidrAllocation', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterMulticastDomainAssociationsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can only contain ASCII characters.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  maxResults?: long(name='MaxResults', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If this is your first query and no next queries are to be sent, ignore this parameter.
*   If a subsequent query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the resource associated with the multicast domain.', example='vpc-p0w9alkte4w2htrqe****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of resource associated with the multicast domain.

Valid value: **VPC**.', example='VPC', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-p90y3ymbbwuvy5****', position='Query'),
  transitRouterMulticastDomainId?: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast domain.', example='tr-mcast-domain-91wpg6wbhchjeq****', position='Query'),
  vSwitchIds?: [ string ](name='VSwitchIds', description='The vSwitch IDs.

You can specify at most 20 IDs.', position='Query'),
}

model ListTransitRouterMulticastDomainAssociationsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If **NextToken** is empty, it indicates that no subsequent query is to be sent.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1CD0969B-A605-5D2D-BFF0-699FD182FB7F'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  transitRouterMulticastAssociations?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource associated with the multicast domain.', example='vpc-p0w9b7g9l90yofr0n****'),
      resourceOwnerId?: long(name='ResourceOwnerId', description='The ID of the Alibaba Cloud account to which the resource associated with the multicast domain belongs.', example='1210123456123456'),
      resourceType?: string(name='ResourceType', description='The type of resource associated with the multicast domain.

Valid value: **VPC**.', example='VPC'),
      status?: string(name='Status', description='The association status. Valid values:

*   **Associated**: The resource is associated with the multicast domain.
*   **Associating**: The resource is being associated with the multicast domain.
*   **Dissociating**: The resource is being disassociated from the multicast domain.', example='Dissociating'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-p90y3ymbbwuvy5****'),
      transitRouterMulticastDomainId?: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast domain.', example='tr-mcast-domain-91wpg6wbhchjeq****'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-p0wxk12u6okfkr8xy****'),
    }
  ](name='TransitRouterMulticastAssociations', description='The information about the resource associated with the multicast domain.'),
}

model ListTransitRouterMulticastDomainAssociationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterMulticastDomainAssociationsResponseBody(name='body'),
}

/**
  * ## Usage notes
  * Multicast domains can be associated only with vSwitches that are in VPCs. You can call the **ListTransitRouterMulticastDomainAssociations** operation to query whether vSwitches in VPCs are associated with a specified multicast domain.
  *
 */
async function listTransitRouterMulticastDomainAssociations(request: ListTransitRouterMulticastDomainAssociationsRequest): ListTransitRouterMulticastDomainAssociationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterMulticastDomainAssociations', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterMulticastDomainVSwitchesRequest {
  cenId: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-44m0p68spvlrqq****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Minimum value: **0**. Default value: **20**.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If this is your first query or no subsequent query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of **NextToken** that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vSwitchIds?: [ string ](name='VSwitchIds', description='The vSwitch IDs.', position='Query'),
  vpcId: string(name='VpcId', description='The ID of the VPC.', example='vpc-p0wr1cd4fcuxy3ui0****', position='Query'),
}

model ListTransitRouterMulticastDomainVSwitchesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If **NextToken** was not returned, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='B0E7E43C-979A-5130-AA0D-B3ADA69E0827'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  vSwitchIds?: [ string ](name='VSwitchIds', description='The vSwitch IDs.'),
}

model ListTransitRouterMulticastDomainVSwitchesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterMulticastDomainVSwitchesResponseBody(name='body'),
}

/**
  * You can query vSwitches only in VPCs that are connected to Enterprise Edition transit routers.
  *
 */
async function listTransitRouterMulticastDomainVSwitches(request: ListTransitRouterMulticastDomainVSwitchesRequest): ListTransitRouterMulticastDomainVSwitchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterMulticastDomainVSwitches', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterMulticastDomainsRequest {
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-a7syd349kne38g****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  maxResults?: long(name='MaxResults', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the transit router is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag keys of the resources. 

The tag keys cannot be an empty string. The tag keys can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.  

You can specify at most 20 tag keys.', example='TagKey'),
      value?: string(name='Value', description='The tag values of the resources. 

The tag values can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.  

Each tag key has a unique tag value. You can specify at most 20 tag values in each call.', example='TagValue'),
    }
  ](name='Tag', description='The tags of the resources.', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-p0wr9p28r92d598y6****', position='Query'),
  transitRouterMulticastDomainId?: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast domain.', example='tr-mcast-domain-3r3bvbypxqheej****', position='Query'),
}

model ListTransitRouterMulticastDomainsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If **NextToken** is empty, it indicates that no next query is to be sent.
*   If **NextToken** is not empty, the value indicates the token that is used for the next query.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8A0F93D1-FD6C-56FC-B6D2-668FC92D12D2'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
  transitRouterMulticastDomains?: [ 
    {
      status?: string(name='Status', description='The status of the multicast domain.

Valid value: **Active**, which indicates that the multicast domain is available.', example='Active'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key of the multicast domain.', example='TagKey'),
          value?: string(name='Value', description='The tag value of the multicast domain.', example='TagValue'),
        }
      ](name='Tags', description='The tags of the multicast domain.'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-bp1c23ijrl6d6c226h***'),
      transitRouterMulticastDomainDescription?: string(name='TransitRouterMulticastDomainDescription', description='The description of the multicast domain.', example='desctest'),
      transitRouterMulticastDomainId?: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast domain.', example='tr-mcast-domain-3r3bvbypxqheej****'),
      transitRouterMulticastDomainName?: string(name='TransitRouterMulticastDomainName', description='The name of the multicast domain.', example='nametest'),
    }
  ](name='TransitRouterMulticastDomains', description='The information about the multicast domain.'),
}

model ListTransitRouterMulticastDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterMulticastDomainsResponseBody(name='body'),
}

async function listTransitRouterMulticastDomains(request: ListTransitRouterMulticastDomainsRequest): ListTransitRouterMulticastDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterMulticastDomains', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterMulticastGroupsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  groupIpAddress?: string(name='GroupIpAddress', description='The IP address of the multicast group.

Each multicast group is identified by its IP address.', example='239.XX.XX.2', position='Query'),
  isGroupMember?: boolean(name='IsGroupMember', description='Specified whether to query the multicast members. Valid values:

*   **false**: no
*   **true**: yes

> This parameter can be set together with the IsGroupMember parameter.

*   If you do not set IsGroupMember or IsGroupSource, both the multicast sources and members are queried.

*   If you set only one of them or both of them, the specified values prevail.', example='false', position='Query'),
  isGroupSource?: boolean(name='IsGroupSource', description='Specifies whether to query the multicast sources. Valid values:

*   **false**: no
*   **true**: yes

> This parameter can be set together with the IsGroupMember parameter.

*   If you do not set IsGroupSource or IsGroupMember, both the multicast sources and members are queried.

*   If you set only one of them or both of them, the specified values prevail.', example='true', position='Query'),
  maxResults?: long(name='MaxResults', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  networkInterfaceIds?: [ string ](name='NetworkInterfaceIds', description='The IDs of ENIs.', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If this is your first query and no next queries are to be sent, ignore this parameter.
*   If a subsequent query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerTransitRouterMulticastDomains?: [ string ](name='PeerTransitRouterMulticastDomains', description='The ID of the inter-region multicast domain.', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the resource associated with the multicast resource.', example='vpc-p0w9alkte4w2htrqe****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the multicast resource. Valid values:

*   **VPC**: queries multicast resources by VPC.
*   **TR**: queries multicast resources that are also deployed in a different region.', example='VPC', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-g3kz2k3u76amsk****', position='Query'),
  transitRouterMulticastDomainId?: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast domain.', example='tr-mcast-domain-5mjb5gjb6dgu98****', position='Query'),
  vSwitchIds?: [ string ](name='VSwitchIds', description='The vSwitch IDs.', position='Query'),
}

model ListTransitRouterMulticastGroupsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If **NextToken** was not returned, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='FB3C4A16-0933-5850-9D43-0C3EA37BCBFB'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  transitRouterMulticastGroups?: [ 
    {
      groupIpAddress?: string(name='GroupIpAddress', description='The IP address of the multicast group to which the multicast resource belongs.', example='239.XX.XX.2'),
      groupMember?: boolean(name='GroupMember', description='Indicates whether the multicast resource is a multicast member. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      groupSource?: boolean(name='GroupSource', description='Indicates whether the multicast resource is a multicast source. Valid values:

*   **true**: yes
*   **false**: no', example='false'),
      memberType?: string(name='MemberType', description='The type of the multicast source.

If the value is **Static**, the multicast source is manually specified.', example='Static'),
      networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI, which is a multicast resource.', example='eni-p0weuda3lszwzjly****'),
      peerTransitRouterMulticastDomainId?: string(name='PeerTransitRouterMulticastDomainId', description='The ID of the multicast domain associated with the multicast resource that is deployed across regions.', example='tr-mcast-domain-91wpg6wbhchjeq****'),
      resourceId?: string(name='ResourceId', description='The ID of the resource associated with the multicast resource.', example='vpc-p0w9alkte4w2htrqe****'),
      resourceOwnerId?: long(name='ResourceOwnerId', description='The ID of the Alibaba Cloud account to which the multicast resource belongs.', example='253460731706911258'),
      resourceType?: string(name='ResourceType', description='The type of the multicast resource. Valid values:

*   **VPC**: The multicast resource is in a VPC.
*   **TR**: The multicast resource is deployed across regions.', example='VPC'),
      sourceType?: string(name='SourceType', description='The type of the multicast member.

If the value is **Static**, the multicast member is manually specified.', example='Static'),
      status?: string(name='Status', description='The status of the multicast resource. Valid values:

*   **Registering**: being created
*   **Registered**: available
*   **Deregistering**: being deleted', example='Registered'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-g3kz2k3u76amsk****'),
      transitRouterMulticastDomainId?: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast domain.', example='tr-mcast-domain-kx0vk0v7fz8kx4****'),
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch to which the multicast resource belongs.', example='vsw-p0w9s2ig1jnwgrbzl****'),
    }
  ](name='TransitRouterMulticastGroups', description='A list of multicast groups.'),
}

model ListTransitRouterMulticastGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterMulticastGroupsResponseBody(name='body'),
}

/**
  * You can call the `ListTransitRouterMulticastGroups` operation to query the multicast sources and members in a multicast domain. Multicast sources and members are also known as multicast resources.
  * *   If you set **GroupIpAddress**, the system queries multicast resources in the multicast domain by multicast group.
  * *   If you set **VSwitchIds**, the system queries multicast resources in the multicast domain by vSwitch.
  * *   If you set **PeerTransitRouterMulticastDomains**, the system queries multicast resources that are also deployed in a different region.
  * *   If you set **ResourceType**, the system queries the multicast resources of the specified type in the multicast domain.
  * *   If you set **ResourceId**, the system queries multicast resources by resource.
  * *   If you set only **TransitRouterMulticastDomainId**, the system queries all the multicast resources in the multicast domain.
  *
 */
async function listTransitRouterMulticastGroups(request: ListTransitRouterMulticastGroupsRequest): ListTransitRouterMulticastGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterMulticastGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterPeerAttachmentsRequest {
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-j3jzhw1zpau2km****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return per page. The default value is **20**. The maximum value is **100**.', example='20', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If this is your first query or no next query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of **NextToken** that is returned from the last call.', example='1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the Enterprise Edition transit router is deployed.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag keys of the resources. 

The tag keys cannot be an empty string. The tag keys can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.  

You can specify at most 20 tag keys.', example='tagtest'),
      value?: string(name='Value', description='The tag values of the resources. 

The tag values can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.  

Each tag key has a unique tag value. You can specify at most 20 tag values in each call.', example='tagtest'),
    }
  ](name='Tag', description='The tags.', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the cross-region connection.', example='tr-attach-5u4qbayfv2io5v****', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the Enterprise Edition transit router.', example='tr-bp1su1ytdxtataupl****', position='Query'),
}

model ListTransitRouterPeerAttachmentsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. Valid values:

*   If the returned value of **NextToken** is empty, it indicates that no next query is to be sent.
*   If the returned value of **NextToken** is not empty, the value indicates the token that is used for the next query.', example='dd20****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AA97AFA3-8E48-4BD7-9F3E-A9F6176018A0'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
  transitRouterAttachments?: [ 
    {
      autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled', description='Indicates whether the local Enterprise Edition transit router automatically advertises routes of the cross-region connection to the peer transit router. Valid values:

*   **false** (default): no
*   **true**: yes', example='false'),
      bandwidth?: int32(name='Bandwidth', description='The bandwidth value of the cross-region connection. Unit: Mbit/s.

*   If **BandwidthType** is set to **BandwidthPackage**, this parameter indicates the bandwidth that is available for the cross-region connection.
*   If **BandwidthType** is set to **DataTransfer**, this parameter indicates the bandwidth limit of the cross-region connection.', example='2'),
      bandwidthType?: string(name='BandwidthType', description='The bandwidth allocation method. Valid values:

**BandwidthPackage**: allocates bandwidth from a bandwidth plan.

**DataTransfer**: uses pay-by-data-transfer bandwidth.', example='BandwidthPackage'),
      cenBandwidthPackageId?: string(name='CenBandwidthPackageId', description='The ID of the bandwidth plan that is used to allocate bandwidth to the cross-region connection.', example='cenbwp-3xrxupouolw5ou****'),
      cenId?: string(name='CenId'),
      creationTime?: string(name='CreationTime', description='The time when the cross-region connection was created.

The time follows the ISO8601 standard in the `YYYY-MM-ddTHH:mmZ` format. The time is displayed in UTC.', example='2021-06-16T02:50Z'),
      geographicSpanId?: string(name='GeographicSpanId', description='The areas that are connected by the bandwidth plan.', example='china_china'),
      peerTransitRouterId?: string(name='PeerTransitRouterId', description='The ID of the peer transit router.', example='tr-m5eq27g6bndum7e88****'),
      peerTransitRouterOwnerId?: long(name='PeerTransitRouterOwnerId', description='The ID of the Alibaba Cloud account to which the peer transit router belongs.', example='253460731706911258'),
      peerTransitRouterRegionId?: string(name='PeerTransitRouterRegionId', description='The ID of the region where the peer transit router is deployed.', example='cn-qingdao'),
      regionId?: string(name='RegionId', description='The ID of the region where the Enterprise Edition transit router is deployed.', example='cn-hangzhou'),
      resourceType?: string(name='ResourceType', description='The type of the resource to which the transit router is connected. Valid values:

*   **VPC**: virtual private cloud (VPC)
*   **CCN**: Cloud Connect Network (CCN) instance
*   **VBR**: virtual border router (VBR)
*   **TR**: transit router', example='TR'),
      status?: string(name='Status', description='The status of the cross-region connection. Valid values:

*   **Attached**: The local transit router is connected to the peer transit router.
*   **Attaching**: The local transit router is connecting to the peer transit router.
*   **Detaching**: The local transit router is disconnecting from the peer transit router.
*   **Detached**: The local transit router is disconnected from the peer transit router.', example='Attached'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of tag.', example='tag_A1'),
          value?: string(name='Value', description='The value of the tag.', example='test'),
        }
      ](name='Tags', description='The list of tags.'),
      transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', description='The description of the cross-region connection.', example='testdesc'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the cross-region connection.', example='tr-attach-5u4qbayfv2io5v****'),
      transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', description='The name of the cross-region connection.', example='test'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the Enterprise Edition transit router.', example='tr-bp1su1ytdxtataupl****'),
    }
  ](name='TransitRouterAttachments', description='The list of cross-region connections.'),
}

model ListTransitRouterPeerAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterPeerAttachmentsResponseBody(name='body'),
}

/**
  * ## Description
  * You can use the following methods to query the cross-region connections on an Enterprise Edition transit router:
  * *   Query all cross-region connections on an Enterprise Edition transit router by specifying the ID of the Enterprise Edition transit router.
  * *   Query all cross-region connections on an Enterprise Edition transit router by specifying the ID of the Cloud Enterprise Network (CEN) instance and the ID of the region where the transit router is deployed.
  *
 */
async function listTransitRouterPeerAttachments(request: ListTransitRouterPeerAttachmentsRequest): ListTransitRouterPeerAttachmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterPeerAttachments', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterPrefixListAssociationRequest {
  nextHop?: string(name='NextHop', description='The ID of the next hop.

>  Enter **BlackHole** if you want to query the prefix list that generates blackhole routes.', example='tr-attach-flbq507rg2ckrj****', position='Query'),
  nextHopInstanceId?: string(name='NextHopInstanceId', position='Query'),
  nextHopType?: string(name='NextHopType', description='The type of the next hop. Valid values:

*   **BlackHole**: The prefix list that generates blackhole routes.
*   **VPC**: The prefix list whose next hop is a virtual private cloud (VPC) connection.
*   **VBR**: The prefix list whose next hop is a virtual border router (VBR) connection.
*   **TR**: The prefix list whose next hop is an inter-region connection on the transit router.', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  ownerUid?: long(name='OwnerUid', description='The ID of the Alibaba Cloud account to which the prefix list belongs.', example='1210123456123456', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Maximum value: **100**. Default value: **10**.', example='10', position='Query'),
  prefixListId?: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-6ehtn5kqxgeyy08fi****', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the transit router is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', position='Query'),
  transitRouterId: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-6ehx7q2jze8ch5ji0****', position='Query'),
  transitRouterTableId?: string(name='TransitRouterTableId', description='The ID of the route table of the transit router.', example='vtb-6ehgc262hr170qgyc****', position='Query'),
}

model ListTransitRouterPrefixListAssociationResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  prefixLists?: [ 
    {
      nextHop?: string(name='NextHop', description='The ID of the next hop.

>  If the value is **BlackHole**, all the CIDR blocks in the prefix list are blackhole routes. Packets destined for the CIDR blocks are dropped.', example='tr-attach-flbq507rg2ckrj****'),
      nextHopInstanceId?: string(name='NextHopInstanceId', description='The ID of the network instance associated with the next hop connection.', example='vpc-6eh7fp9hdqa2wv85t****'),
      nextHopType?: string(name='NextHopType', description='The type of the next hop.

*   **BlackHole**: All the CIDR blocks in the prefix list are blackhole routes. Packets destined for the CIDR blocks are dropped.
*   **VPC**: The next hop of the CIDR blocks in the prefix list is a VPC connection.
*   **VBR**: The next hop of the CIDR blocks in the prefix list is a VBR connection.
*   **TR**: The next hop of the CIDR blocks in the prefix list is an inter-region connection.', example='VPC'),
      ownerUid?: long(name='OwnerUid', description='The ID of the Alibaba Cloud account to which the prefix list belongs.', example='1210123456123456'),
      prefixListId?: string(name='PrefixListId', description='The ID of the prefix list.', example='pl-6ehtn5kqxgeyy08fi****'),
      status?: string(name='Status', description='The status of the prefix list. Valid values:

*   **Active**: The prefix list is effective.
*   **Updating**: The prefix list is being updated.', example='Active'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-6ehx7q2jze8ch5ji0****'),
      transitRouterTableId?: string(name='TransitRouterTableId', description='The ID of the route table of the transit router.', example='vtb-6ehgc262hr170qgyc****'),
    }
  ](name='PrefixLists', description='The information about the prefix list.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6005CA94-676E-1FEE-985E-7602EFAADD6A'),
  totalCount?: int32(name='TotalCount', description='The number of entries returned.', example='1'),
}

model ListTransitRouterPrefixListAssociationResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterPrefixListAssociationResponseBody(name='body'),
}

async function listTransitRouterPrefixListAssociation(request: ListTransitRouterPrefixListAssociationRequest): ListTransitRouterPrefixListAssociationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterPrefixListAssociation', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterRouteEntriesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **20**.', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

- If this is your first query or no subsequent query is to be sent, ignore this parameter.
- If a subsequent query is to be sent, set the value to the value of **NextToken** that was returned from the last call.', example='fce19****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  prefixListId?: string(name='PrefixListId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeFilter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='RouteFilter', position='Query'),
  transitRouterRouteEntryDestinationCidrBlock?: string(name='TransitRouterRouteEntryDestinationCidrBlock', description='The destination CIDR block of the route.', example='192.168.0.0/24', deprecated='true', position='Query'),
  transitRouterRouteEntryIds?: [ string ](name='TransitRouterRouteEntryIds', description='The IDs of the route entries.

You can query at most 20 route entries in each call.

>  You can call this operation to query only static routes.', example='rte-oklkgwmj97z6dn****', position='Query'),
  transitRouterRouteEntryNames?: [ string ](name='TransitRouterRouteEntryNames', description='The names of the routes.

The name must be 1 to 128 characters in length, and can contain letters, digits, and the following special characters: `, . ; / @ \\_ -`. You can also leave the name empty.

You can query multiple route entries in each call. Maximum value of **N**: **20**.

>  You can call this operation to query only static routes.', example='testname', position='Query'),
  transitRouterRouteEntryNextHopId?: string(name='TransitRouterRouteEntryNextHopId', position='Query'),
  transitRouterRouteEntryNextHopResourceId?: string(name='TransitRouterRouteEntryNextHopResourceId', position='Query'),
  transitRouterRouteEntryNextHopResourceType?: string(name='TransitRouterRouteEntryNextHopResourceType', position='Query'),
  transitRouterRouteEntryNextHopType?: string(name='TransitRouterRouteEntryNextHopType', position='Query'),
  transitRouterRouteEntryOriginResourceId?: string(name='TransitRouterRouteEntryOriginResourceId', position='Query'),
  transitRouterRouteEntryOriginResourceType?: string(name='TransitRouterRouteEntryOriginResourceType', position='Query'),
  transitRouterRouteEntryStatus?: string(name='TransitRouterRouteEntryStatus', description='The status of the route. Valid values: Valid values:

- **Creating**: The route is being created.
- **Active**: The rule is available.
- **Deleting**: The rule is being deleted.', example='Active', position='Query'),
  transitRouterRouteEntryType?: string(name='TransitRouterRouteEntryType', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-bp1dudbh2d5na6b50****', position='Query'),
}

model ListTransitRouterRouteEntriesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If **NextToken** was not returned in the previous query, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='fce19****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C3835E5E-1504-4344-B1BB-98A4110F1079'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='6'),
  transitRouterRouteEntries?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the route entry was created.

The time follows the ISO8601 standard in the YYYY-MM-DDThh:mmZ format. The time is displayed in UTC.

>  This parameter is returned only for static routes.', example='2021-06-15T07:01Z'),
      operationalMode?: boolean(name='OperationalMode', description='Indicates whether the route can be managed. Valid values: 

- **true**: The route can be managed. You can delete the route.
- **false**: The route cannot be managed because it is automatically generated by the system.', example='false'),
      prefixListId?: string(name='PrefixListId'),
      tag?: string(name='Tag', description='The tag of the route. 

Valid value: **PermitVbr**, which indicates that the rote is advertised only to the route table of the virtual border router (VBR) that is connected to the transit router.  

>  This parameter is returned only for routes that are automatically generated by the system and use IP addresses from the CIDR block of the transit router.', example='PermitVbr'),
      transitRouterRouteEntryDescription?: string(name='TransitRouterRouteEntryDescription', description='The description of the route.

>  This parameter is returned only for static routes.', example='testdesc'),
      transitRouterRouteEntryDestinationCidrBlock?: string(name='TransitRouterRouteEntryDestinationCidrBlock', description='The destination CIDR block of the route.', example='172.16.0.0/16'),
      transitRouterRouteEntryId?: string(name='TransitRouterRouteEntryId', description='The ID of the route entry.

>  This parameter is returned only for static routes.', example='rte-oklkgwmj97z6dn****'),
      transitRouterRouteEntryName?: string(name='TransitRouterRouteEntryName', description='The name of the route.

>  This parameter is returned only for static routes.', example='testname'),
      transitRouterRouteEntryNextHopId?: string(name='TransitRouterRouteEntryNextHopId', description='The ID of the next hop.', example='tr-attach-vx6iwhjr1x1j78****'),
      transitRouterRouteEntryNextHopResourceId?: string(name='TransitRouterRouteEntryNextHopResourceId'),
      transitRouterRouteEntryNextHopResourceType?: string(name='TransitRouterRouteEntryNextHopResourceType'),
      transitRouterRouteEntryNextHopType?: string(name='TransitRouterRouteEntryNextHopType', description='The type of next hop. Valid values:

*   **BlackHole**: a blackhole route. Packets destined for the destination CIDR block of the route are dropped.
*   **Attachment**: a network instance connection. Packets destined for the destination CIDR block of the route entry are forwarded to the specified network instance connection.', example='BlackHole'),
      transitRouterRouteEntryOriginResourceId?: string(name='TransitRouterRouteEntryOriginResourceId'),
      transitRouterRouteEntryOriginResourceType?: string(name='TransitRouterRouteEntryOriginResourceType'),
      transitRouterRouteEntryStatus?: string(name='TransitRouterRouteEntryStatus', description='The status of the route. Valid values: 

- **Creating**: The route is being created.
- **Active**: The rule is available.
- **Deleting**: The rule is being deleted.', example='Active'),
      transitRouterRouteEntryType?: string(name='TransitRouterRouteEntryType', description='The type of the route. Valid values: 

- **Static**: a static route
- **Propagated**: an automatically learned route', example='Static'),
    }
  ](name='TransitRouterRouteEntries', description='A list of routes.'),
}

model ListTransitRouterRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterRouteEntriesResponseBody(name='body'),
}

async function listTransitRouterRouteEntries(request: ListTransitRouterRouteEntriesRequest): ListTransitRouterRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterRouteTableAssociationsRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Default value: **50**.', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If this is your first query or no subsequent query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of **NextToken** that is returned from the last call.', example='a415****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The status of the associated forwarding correlation. Valid values:

*   **Active**: The associated forwarding correlation is available.
*   **Associating**: The associated forwarding correlation is being created.
*   **Dissociating**: The associated forwarding correlation is being deleted.', example='Active', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-nls9fzkfat8934****', position='Query'),
  transitRouterAttachmentResourceId?: string(name='TransitRouterAttachmentResourceId', description='The ID of the next hop.', example='vpc-bp1h8vbrbcgohcju5****', position='Query'),
  transitRouterAttachmentResourceType?: string(name='TransitRouterAttachmentResourceType', description='The type of next hop. Valid values:

*   **VPC**: virtual private cloud (VPC)
*   **VBR**: virtual border router (VBR)
*   **TR**: transit router
*   **VPN**: VPN attachment', example='VPC', position='Query'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-bp1dudbh2d5na6b50****', position='Query'),
}

model ListTransitRouterRouteTableAssociationsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If **NextToken** was not returned, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='a415****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F6B1D9AB-176D-4399-801D-8BC576F4EB0D'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  transitRouterAssociations?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the next hop.', example='vpc-bp1h8vbrbcgohcju5****'),
      resourceType?: string(name='ResourceType', description='The type of next hop. Valid values:

*   **VPC**: VPC
*   **VBR**: VBR
*   **TR**: transit router
*   **VPN** :VPN attachment', example='VPC'),
      status?: string(name='Status', description='The status of the associated forwarding correlation. Valid values:

*   **Active**: The associated forwarding correlation is available.
*   **Associating**: The associated forwarding correlation is being created.
*   **Dissociating**: The associated forwarding correlation is being deleted.
*   **Deleted**: The associated forwarding correlation is deleted.', example='Associating'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-nls9fzkfat8934****'),
      transitRouterRouteTableId?: string(name='TransitRouterRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-bp1dudbh2d5na6b50****'),
    }
  ](name='TransitRouterAssociations', description='A list of associated forwarding correlations.'),
}

model ListTransitRouterRouteTableAssociationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterRouteTableAssociationsResponseBody(name='body'),
}

/**
  * When you call **ListTransitRouterRouteTableAssociations**, you must set at least one of **TransitRouterRouteTableId** and **TransitRouterAttachmentId**.
  * *   If you set only **TransitRouterRouteTableId**, the network instance connections that are in associated forwarding correlation with a route table of an Enterprise Edition transit router are queried.
  * *   If you set only **TransitRouterAttachmentId**, the route table of an Enterprise Edition transit router that is in associated forwarding correlation with a network instance connection is queried.
  * *   If you set both **TransitRouterRouteTableId** and **TransitRouterAttachmentId**, the associated forwarding correlations between a specified network instance connection and a specified route table of an Enterprise Edition transit router are queried.
  *     *   If an associated forwarding correlation is created between the network instance connection and the route table of the Enterprise Edition transit router, the information about the associated forwarding correlation is returned.
  *     *   If no associated forwarding correlation is created between the network instance connection and the route table of the Enterprise Edition transit router, **TransitRouterAssociations** in the response is empty.
  *
 */
async function listTransitRouterRouteTableAssociations(request: ListTransitRouterRouteTableAssociationsRequest): ListTransitRouterRouteTableAssociationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterRouteTableAssociations', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterRouteTablePropagationsRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Default value: **50**.', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query.', example='dd20****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The status of the route learning correlation. Valid values:

*   **Active**: available
*   **Enabling**: being enabled
*   **Disabling**: being disabled', example='Active', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-vx6iwhjr1x1j78****', position='Query'),
  transitRouterAttachmentResourceId?: string(name='TransitRouterAttachmentResourceId', description='The ID of the next hop.', example='vpc-bp1h8vbrbcgohcju5****', position='Query'),
  transitRouterAttachmentResourceType?: string(name='TransitRouterAttachmentResourceType', description='The type of next hop. Valid values:

*   **VPC**: virtual private cloud (VPC)
*   **VBR**: virtual border router (VBR)
*   **TR**: transit router
*   **VPN**: VPN connection', example='VPC', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-bp1dudbh2d5na6b50****', position='Query'),
}

model ListTransitRouterRouteTablePropagationsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query.', example='dd20****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04C81E0D-945E-4D61-A561-3DEA322F243B'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='2'),
  transitRouterPropagations?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the next hop.', example='vpc-bp1h8vbrbcgohcju5****'),
      resourceType?: string(name='ResourceType', description='The type of next hop. Valid values:

*   **VPC**: VPC
*   **VBR**: VBR
*   **TR**: transit router
*   **VPN**: VPN connection', example='VPC'),
      status?: string(name='Status', description='The status of the route learning correlation. Valid values:

*   **Enabling**: being enabled
*   **Disabling**: being disabled
*   **Active**: available
*   **Deleted**: deleted', example='Active'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-vx6iwhjr1x1j78****'),
      transitRouterRouteTableId?: string(name='TransitRouterRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-bp1dudbh2d5na6b50****'),
    }
  ](name='TransitRouterPropagations', description='A list of route learning correlations.'),
}

model ListTransitRouterRouteTablePropagationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterRouteTablePropagationsResponseBody(name='body'),
}

async function listTransitRouterRouteTablePropagations(request: ListTransitRouterRouteTablePropagationsRequest): ListTransitRouterRouteTablePropagationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterRouteTablePropagations', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterRouteTablesRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: **1** to **100**. Default value: **20**.', example='20', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. Valid values:

*   If this is your first query or no subsequent query is to be sent, ignore this parameter.
*   If a next query is to be sent, set the value to the value of **NextToken** that is returned from the last call.', example='dd20****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableOptions?: {
    multiRegionECMP?: string(name='MultiRegionECMP', description='Specifies whether to enable equal-cost multi-path (ECMP) routing. Valid values:

*   **disable**: no If you disable ECMP routing, routes that are learned from different regions but have the same prefix and attributes select the transit route with the smallest region ID as the next hop. Region IDs are sorted in alphabetic order. The network latency and bandwidth consumption also vary based on the region. Proceed with caution.
*   **enable**: yes If you enable ECMP routing, routes that are learned from different regions but have the same prefix and attributes form an ECMP route. The network latency and bandwidth consumption also vary based on the region. Proceed with caution.', example='disable'),
  }(name='RouteTableOptions', description='The features of the route table.', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

The tag key cannot be an empty string. The tag key can be up to 64 characters in length, and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='test'),
      value?: string(name='Value', description='The tag value.

The tag value can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key must have a unique tag value. You can specify at most 20 tag values in each call.', example='test'),
    }
  ](name='Tag', description='The information about the tags.

You can specify at most 20 tags in each call.', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the Enterprise Edition transit router.', example='tr-uf654ttymmljlvh2x****', position='Query'),
  transitRouterRouteTableIds?: [ string ](name='TransitRouterRouteTableIds', description='The ID of the route table.

You can query multiple route tables in each call. Maximum value of **N**: **20**.', example='vtb-bp1l8awdb4iuo9uwu****', position='Query'),
  transitRouterRouteTableNames?: [ string ](name='TransitRouterRouteTableNames', description='The name of the route table.

You can query multiple route tables in each call. Maximum value of **N**: **20**.

> If you set both **TransitRouterRouteTableNames.N** and **TransitRouterRouteTableIds.N**, make sure that the specified name and ID belong to the same route table.', example='testname', position='Query'),
  transitRouterRouteTableStatus?: string(name='TransitRouterRouteTableStatus', description='The status of the route table. Valid values:

*   **Creating**: being created
*   **Deleting**: being deleted
*   **Active**: available', example='Active', position='Query'),
  transitRouterRouteTableType?: string(name='TransitRouterRouteTableType', description='The type of the route table. Valid values:

*   **Custom**: a custom route table
*   **System**: the default system route table', example='Custom', position='Query'),
}

model ListTransitRouterRouteTablesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the next query. Valid values:

*   If **NextToken** was not returned, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='dd20****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='82678F4A-C9F7-4CC1-8BF0-D619A63BFC57'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  transitRouterRouteTables?: [ 
    {
      createTime?: string(name='CreateTime', description='The time when the route table was created.

The time follows the ISO8601 standard in the YYYY-MM-DDThh:mmZ format. The time is displayed in UTC.', example='2021-03-15T09:39Z'),
      regionId?: string(name='RegionId', description='The ID of the region where the Enterprise Edition transit router is deployed.', example='cn-beijing'),
      routeTableOptions?: {
        multiRegionECMP?: string(name='MultiRegionECMP', description='Indicates whether ECMP routing is enabled. Valid values:

*   **disable**: disabled If you disable ECMP routing, routes that are learned from different regions but have the same prefix and attributes select the transit route with the smallest region ID as the next hop. Region IDs are sorted in alphabetic order. The network latency and bandwidth consumption also vary based on the region. Proceed with caution.
*   **enable**: enables ECMP routing. If you enable ECMP routing, routes that are learned from different regions but have the same prefix and attributes form an ECMP route. The network latency and bandwidth consumption also vary based on the region. Proceed with caution.', example='disable'),
      }(name='RouteTableOptions', description='The features of the route table.'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='test'),
          value?: string(name='Value', description='The tag value.', example='test'),
        }
      ](name='Tags', description='The tags.'),
      transitRouterId?: string(name='TransitRouterId'),
      transitRouterRouteTableDescription?: string(name='TransitRouterRouteTableDescription', description='The description of the route table.', example='testdesc'),
      transitRouterRouteTableId?: string(name='TransitRouterRouteTableId', description='The ID of the route table.', example='vtb-bp1dudbh2d5na6b50****'),
      transitRouterRouteTableName?: string(name='TransitRouterRouteTableName', description='The name of the route table.', example='testname'),
      transitRouterRouteTableStatus?: string(name='TransitRouterRouteTableStatus', description='The status of the route table. Valid values:

*   **Creating**: being created
*   **Deleting**: being deleted
*   **Active**: available', example='Active'),
      transitRouterRouteTableType?: string(name='TransitRouterRouteTableType', description='The type of the route table. Valid value:

*   **Custom**: a custom route table
*   **System**: the default system route table', example='System'),
    }
  ](name='TransitRouterRouteTables', description='A list of route tables.'),
}

model ListTransitRouterRouteTablesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterRouteTablesResponseBody(name='body'),
}

async function listTransitRouterRouteTables(request: ListTransitRouterRouteTablesRequest): ListTransitRouterRouteTablesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterRouteTables', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterVbrAttachmentsRequest {
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-j3jzhw1zpau2km****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query.', example='dd20****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the Enterprise Edition transit router.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='tagtest'),
      value?: string(name='Value', description='The tag value.

The tag value can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key must have a unique tag value. You can specify at most 20 tag values in each call.', example='tagtest'),
    }
  ](name='Tag', description='The information about the tags.

You can specify at most 20 tags in each call.', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the VBR connection.', example='tr-attach-oyf70wfuorwx87****', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the Enterprise Edition transit router.', example='tr-bp1su1ytdxtataupl****', position='Query'),
}

model ListTransitRouterVbrAttachmentsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query.', example='dd20****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F42D9616-29EB-4E75-8CA8-9654D4E07501'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  transitRouterAttachments?: [ 
    {
      autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled', description='Indicates whether the Enterprise Edition transit router automatically advertises routes to the VBR. Valid values:

*   **false** (default): no
*   **true**: yes', example='false'),
      cenId?: string(name='CenId'),
      creationTime?: string(name='CreationTime', description='The time when the VBR connection was established.

The time follows the ISO8601 standard in the YYYY-MM-DDThh:mmZ format. The time is displayed in UTC.', example='2021-06-15T15:20Z'),
      resourceType?: string(name='ResourceType', description='The type of resource to which the transit router is connected. Valid values:

*   **VPC**: virtual private cloud (VPC)
*   **CCN**: CCN instance
*   **VBR**: VBR
*   **TR**: transit router', example='VBR'),
      status?: string(name='Status', description='The status of the VBR connection. Valid values:

*   **Attached**: The VBR connection is created on the transit router.
*   **Attaching**: The VBR connection is being created on the transit router.
*   **Detaching**: The VBR connection is being deleted from the transit router.
*   **Detached**: The VBR connection is deleted from the transit router.', example='Attached'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='test'),
          value?: string(name='Value', description='The tag value.', example='value_A1'),
        }
      ](name='Tags', description='The tags.'),
      transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', description='The description of the VBR connection.', example='testdesc'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the VBR connection.', example='tr-attach-oyf70wfuorwx87****'),
      transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', description='The name of the VBR connection.', example='testa'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the Enterprise Edition transit router.', example='tr-bp1su1ytdxtataupl****'),
      vbrId?: string(name='VbrId', description='The ID of the VBR.', example='vbr-bp1svadp4lq38janc****'),
      vbrOwnerId?: long(name='VbrOwnerId', description='The ID of the account to which the VBR belongs.', example='1688111111111111'),
      vbrRegionId?: string(name='VbrRegionId', description='The ID of the region where the VBR is deployed.', example='cn-hangzhou'),
    }
  ](name='TransitRouterAttachments', description='A list of VBR connections.'),
}

model ListTransitRouterVbrAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterVbrAttachmentsResponseBody(name='body'),
}

/**
  * You can use the following methods to query VBR connections on an Enterprise Edition transit router:
  * *   Specify the ID of the Enterprise Edition transit router.
  * *   Specify the ID of the relevant Cloud Enterprise Network (CEN) instance and the region ID of the Enterprise Edition transit router.
  *
 */
async function listTransitRouterVbrAttachments(request: ListTransitRouterVbrAttachmentsRequest): ListTransitRouterVbrAttachmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterVbrAttachments', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterVpcAttachmentsRequest {
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-j3jzhw1zpau2km****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If this is your first query and no next queries are to be sent, ignore this parameter.
*   If a subsequent query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  orderType?: string(name='OrderType', description='The entity that pays the fees of the network instance. Valid values:

*   **PayByCenOwner**: the Alibaba Cloud account that owns the CEN instance.
*   **PayByResourceOwner**: the Alibaba Cloud account that owns the network instance.', example='PayByCenOwner', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID of the Enterprise Edition transit router.

You can call the [DescribeRegions](~~36063~~) operation to obtain the region ID.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='Specifies whether the network instance is attached to the CEN instance. Valid values:

*   **Attaching**: being attached to the transit router.
*   **Attached**: attached to the transit router.
*   **Detaching**: being detached from the transit router.', example='Attached', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag that you want to add to the Auto Scaling resource.

The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='tagtest'),
      value?: string(name='Value', description='The tag value.

The tag value can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key must have a unique tag value. You can specify at most 20 tag values in each call.', example='tagtest'),
    }
  ](name='Tag', description='The information about the tags.

You can specify at most 20 tags in each call.', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the VPC connection.', example='tr-attach-nls9fzkfat8934****', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the Enterprise Edition transit router.', example='tr-bp1su1ytdxtataupl****', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-bp1kbjcre9vtsebo1****', position='Query'),
}

model ListTransitRouterVpcAttachmentsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

*   If **NextToken** was not returned, it indicates that no additional results exist.
*   If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C97FF53F-3EF8-4883-B459-60E171924B23'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  transitRouterAttachments?: [ 
    {
      cenId?: string(name='CenId'),
      chargeType?: string(name='ChargeType', description='The billing method of the VPC connection.

The value is **POSTPAY**, which is the default value and specifies the pay-as-you-go billing method.', example='POSTPAY'),
      creationTime?: string(name='CreationTime', description='The time when the VPC connection is created.

The time follows the ISO8601 standard in the YYYY-MM-DDThh:mmZ format. The time is displayed in UTC.', example='2021-06-15T02:14Z'),
      orderType?: string(name='OrderType', description='The entity that pays the fees of the network instance. Valid values:

*   **PayByCenOwner**: the Alibaba Cloud account that owns the CEN instance.
*   **PayByResourceOwner**: the Alibaba Cloud account that owns the network instance.', example='PayByCenOwner'),
      resourceType?: string(name='ResourceType', description='The type of resource to which the transit router is connected.

The value is set to **VPC**.', example='VPC'),
      status?: string(name='Status', description='The status of the VPC connection. Valid values:

*   **Attached**: attached to the transit router.
*   **Attaching**: being attached to the transit router.
*   **Detaching**: being detached from the transit router.
*   **Detached**: detached from the transit router.', example='Attached'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='test'),
          value?: string(name='Value', description='The tag value.', example='test'),
        }
      ](name='Tags', description='The tag key.'),
      transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', description='The description of the VPC connection.', example='testdesc'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the VPC connection.', example='tr-attach-nls9fzkfat8934****'),
      transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', description='The name of the VPC connection.', example='testname'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the Enterprise Edition transit router.', example='tr-bp1su1ytdxtataupl****'),
      vpcId?: string(name='VpcId', description='The ID of the VPC.', example='vpc-bp1h8vbrbcgohcju5****'),
      vpcOwnerId?: long(name='VpcOwnerId', description='The ID of the Alibaba Cloud account to which the VPC belongs.', example='1250123456123456'),
      vpcRegionId?: string(name='VpcRegionId', description='The ID of the region where the VPC is deployed.', example='cn-hangzhou'),
      zoneMappings?: [ 
        {
          networkInterfaceId?: string(name='NetworkInterfaceId', description='The ID of the ENI that is associated with the vSwitch of the Enterprise Edition transit router.', example='eni-bp149hmyaqegerml****'),
          vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch.', example='vsw-bp1a214sbus8z3b54****'),
          zoneId?: string(name='ZoneId', description='The ID of the zone in which the instance is located.', example='cn-hangzhou-h'),
        }
      ](name='ZoneMappings', description='The primary and secondary zones of the VPC connection and the vSwitches and elastic network interfaces (ENIs) of the VPC.'),
    }
  ](name='TransitRouterAttachments', description='A list of VPC connections.'),
}

model ListTransitRouterVpcAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterVpcAttachmentsResponseBody(name='body'),
}

/**
  * You can use the following methods to query VPC connections on an Enterprise Edition transit router:
  * *   Specify the ID of the Enterprise Edition transit router.
  * *   Specify the ID of the relevant Cloud Enterprise Network (CEN) instance and the region ID of the Enterprise Edition transit router.
  * *   Specify the ID of the region where the Enterprise Edition transit router is deployed.
  *
 */
async function listTransitRouterVpcAttachments(request: ListTransitRouterVpcAttachmentsRequest): ListTransitRouterVpcAttachmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterVpcAttachments', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRouterVpnAttachmentsRequest {
  cenId?: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-rsgxs8ng2awen2****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Default value: **20**.', example='20', position='Query'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

- If this is your first query or no subsequent query is to be sent, ignore this parameter.
- If a subsequent query is to be sent, set the parameter to the value of NextToken that is returned from the last call.', example='FFmyTO70tTpLG6I3FmYAXGKPd****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the transit router is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag keys of the resources. 

The tag keys cannot be an empty string. The tag keys can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.  

You can specify at most 20 tag keys.', example='tagtest'),
      value?: string(name='Value', description='The tag values of the resources. 

The tag values can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.  

Each tag key has a unique tag value. You can specify at most 20 tag values in each call.', example='value_A1'),
    }
  ](name='Tag', description='The tags of the resources.', position='Query'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the VPN attachment.', example='tr-attach-a6p8voaodog5c0****', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-p0wm740vjnbaprv0m****', position='Query'),
}

model ListTransitRouterVpnAttachmentsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='20'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. Valid values:

- If **NextToken** was not returned, it indicates that no additional results exist.
- If **NextToken** was returned in the previous query, specify the value to obtain the next set of results.', example='FFmyTO70tTpLG6I3FmYAXGKPd****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3D5530D2-3BBB-524E-8E98-59AB06A250E4'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  transitRouterAttachments?: [ 
    {
      autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled', description='Indicates whether to allow the transit router to automatically advertise routes to the IPsec connection. Valid values:

*   **true**: yes
*   **false**: no', example='true'),
      cenId?: string(name='CenId'),
      chargeType?: string(name='ChargeType', description='The billing method of the VPC connection.

Valid value: **POSTPAY**, which is the default value and specifies the pay-as-you-go billing method.', example='POSTPAY'),
      creationTime?: string(name='CreationTime', description='The time when the VPN attachment was created. 

The time follows the ISO8601 standard in the YYYY-MM-DDThh:mmZ format. The time is displayed in UTC.', example='2022-07-08T08:45Z'),
      resourceType?: string(name='ResourceType', description='The type of resource to which the transit router is connected. 

Valid value: **VPN**, which indicates that an IPsec-VPN connection is attached to the transit router.', example='VPN'),
      status?: string(name='Status', description='The status of the VPN attachment. Valid values: 

- **Attached**: The VPC attachment has been created on the transit router.
- **Attaching**: The VPC attachment is being created on the transit router.
- **Detaching**: The VPC attachment is being deleted from the transit router.
- **Detached**: The local transit router is disconnected from the peer transit router.', example='Attached'),
      tags?: [ 
        {
          key?: string(name='Key', description='The key of tag.', example='test'),
          value?: string(name='Value', description='The value of tag.', example='value_A1'),
        }
      ](name='Tags', description='The tags.'),
      transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', description='The description of the VPN attachment.', example='desctest'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId', description='The ID of the VPN attachment.', example='tr-attach-a6p8voaodog5c0****'),
      transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', description='The name of the VPN attachment.', example='nametest'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-p0wm740vjnbaprv0m****'),
      vpnId?: string(name='VpnId', description='The ID of the IPsec-VPN connection.', example='vco-p0wtu1xgd0l7fjo7k****'),
      vpnOwnerId?: long(name='VpnOwnerId', description='The ID of the Alibaba Cloud account that owns the IPsec-VPN connection.', example='1210123456123456'),
      vpnRegionId?: string(name='VpnRegionId', description='The ID of the region to which the IPsec-VPN connection belongs. 

You can call the [DescribeRegions](https://www.alibabacloud.com/help/en/virtual-private-cloud/latest/describeregions) operation to query the most recent region list.', example='ap-southeast-2'),
      zones?: [ 
        {
          zoneId?: string(name='ZoneId', description='The zone ID. 

You can call [DescribeZones](https://www.alibabacloud.com/help/en/virtual-private-cloud/latest/describezones) to query zones by ID.', example='ap-southeast-2a'),
        }
      ](name='Zones', description='The zones where the VPN attachment is deployed.'),
    }
  ](name='TransitRouterAttachments', description='The information about the VPN attachment.'),
}

model ListTransitRouterVpnAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterVpnAttachmentsResponseBody(name='body'),
}

/**
  * ## Usage note
  * When you call the **ListTransitRouterVpnAttachments** operation, take note of the following items: 
  * - If you set only **CenId** and **RegionId**, the VPN attachments in the current region are queried.
  * - If you set **CenId**, **RegionId**, and **TransitRouterAttachmentId**, only the specified VPN attachment is queried.
  * - If you set **CenId** and **RegionId**, you do not need to set **TransitRouterId**. If you set **TransitRouterId**, you do not need to set **CenId** or **RegionId**.
  *
 */
async function listTransitRouterVpnAttachments(request: ListTransitRouterVpnAttachmentsRequest): ListTransitRouterVpnAttachmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouterVpnAttachments', 'POST', '/', 'json', false, 'json', request);
}

model ListTransitRoutersRequest {
  cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-j3jzhw1zpau2km****', position='Query'),
  featureFilter?: [ 
    {
      key?: string(name='Key', description='The value of the field that is used to enable or disable a feature of the transit router. Supported fields:

*   **Multicast**: the multicast feature.', example='Multicast'),
      value?: [ string ](name='Value', description='The fields that are used to enable or disable the features of the transit router. The **Multicast** field supports only one value. Valid values:

*   **Enabled**: enables multicast.
*   **Disabled**: disables multicast.'),
    }
  ](name='FeatureFilter', description='The field that is used to enable or disable a feature of the transit router.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumber?: int32(name='PageNumber', description='The number of the page to return. Default value: **1**.', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: **1** to **50**. Default value: **10**.', example='10', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the transit router is deployed.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The status of the transit router. Valid values:

*   **Creating**: The transit router is being created.
*   **Active**: The transit router is available.
*   **Modifying**: The transit router is being modified
*   **Deleting**: The transit router is being deleted.
*   **Upgrading**: The transit router is being upgraded.', example='Active', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.

The tag key cannot be an empty string. The tag key can be up to 64 characters in length and cannot start with `acs:` or `aliyun`. It cannot contain `http://` or `https://`.

You can specify at most 20 tag keys.', example='TagKey'),
      value?: string(name='Value', description='The tag value.

The tag value can be 0 to 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

Each tag key must have a unique tag value. You can specify at most 20 tag values in each call.', example='TagValue'),
    }
  ](name='Tag', description='The information about the tags.

You can specify at most 20 tags in each call.', position='Query'),
  transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-uf654ttymmljlvh2x****', position='Query'),
  transitRouterName?: string(name='TransitRouterName', description='The name of the Enterprise Edition transit router.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='testname', position='Query'),
  type?: string(name='Type', description='The edition of the transit router. Valid values:

*   **Enterprise**: Enhance Edition
*   **Basic**: Basic Edition', example='Enterprise', position='Query'),
}

model ListTransitRoutersResponseBody = {
  pageNumber?: int32(name='PageNumber', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='68521297-5FA6-46CB-B4EB-658F1C68C8CC'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  transitRouters?: [ 
    {
      aliUid?: long(name='AliUid', description='The ID of the Alibaba Cloud account to which the CEN instance belongs.', example='1210123456123456'),
      cenId?: string(name='CenId', description='The ID of the CEN instance.', example='cen-j3jzhw1zpau2km****'),
      creationTime?: string(name='CreationTime', description='The time when the transit router was created.

The time follows the ISO8601 standard in the `YYYY-MM-DDThh:mmZ` format. The time is displayed in UTC.', example='2021-03-15T09:39Z'),
      regionId?: string(name='RegionId', description='The ID of the region where the transit router is deployed.', example='ap-southeast-2'),
      status?: string(name='Status', description='The status of the transit router. Valid values:

*   **Creating**: The transit router is being created.
*   **Active**: The transit router is available.
*   **Modifying**: The transit router is being modified
*   **Deleting**: The transit router is being deleted.
*   **Upgrading**: The transit router is being upgraded.', example='Active'),
      supportMulticast?: boolean(name='SupportMulticast', description='Indicates whether multicast is enabled for the transit router. Valid values:

*   **true**: enabled
*   **false**: disabled', example='false'),
      tags?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='TagKey'),
          value?: string(name='Value', description='The tag value.', example='TagValue'),
        }
      ](name='Tags', description='A list of tags.'),
      transitRouterCidrList?: [ 
        {
          cidr?: string(name='Cidr', description='The CIDR block of the transit router.', example='192.168.1.0/24'),
          description?: string(name='Description', description='The description of the CIDR block.', example='CIDRdesc'),
          name?: string(name='Name', description='The name of the CIDR block.', example='CIDRname'),
          publishCidrRoute?: boolean(name='PublishCidrRoute', description='Indicates whether the system is allowed to automatically add a route to the route table of the transit router. Valid values:

*   **true**: yes

        A value of **true** indicates that after you create a private VPN connection and create a route learning correlation for the private VPC connection, the system automatically adds the following route to the route table of the transit router that is in route learning correlation with the private VPN connection:
          A blackhole route whose destination CIDR block is the CIDR block of the transit router. The CIDR block of the transit router refers to the CIDR block from which gateway IP addresses are allocated to IPsec-VPN connections. 
          The blackhole route is advertised only to the route tables of virtual border routers (VBRs) that are connected to the transit router. 

*   **false**: no', example='true'),
          transitRouterCidrId?: string(name='TransitRouterCidrId', description='The ID of the CIDR block.', example='cidr-46p5ceg21e8152****'),
        }
      ](name='TransitRouterCidrList', description='The CIDR blocks of the transit router.'),
      transitRouterDescription?: string(name='TransitRouterDescription', description='The description of the transit router.', example='testdesc'),
      transitRouterId?: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-bp1su1ytdxtataupl****'),
      transitRouterName?: string(name='TransitRouterName', description='The name of the transit router.', example='testname'),
      type?: string(name='Type', description='The edition of the transit router. Valid values:

*   **Enterprise**: Enhance Edition
*   **Basic**: Basic Edition', example='Enterprise'),
    }
  ](name='TransitRouters', description='A list of transit routers.'),
}

model ListTransitRoutersResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRoutersResponseBody(name='body'),
}

/**
  * You can set the **RegionId** and **TransitRouterId** parameters based on your requirements.
  * *   If you do not set **RegionId** or **TransitRouterId**, the system queries all transit routers that are connected to the specified CEN instance.
  * *   If you set only **RegionId**, the system queries transit routers that are deployed in the specified region.
  * *   If you set only **TransitRouterId**, the system queries the specified transit router.
  * *   If you set both **RegionId** and **TransitRouterId**, the system queries the specified transit router in the specified region.
  *
 */
async function listTransitRouters(request: ListTransitRoutersRequest): ListTransitRoutersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTransitRouters', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCenAttributeRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  description?: string(name='Description', description='The description of the CEN instance.

The description must be 2 to 256 characters in length. It must start with a letter or Chinese character and cannot start with `http://` or `https://`.', example='cen', position='Query'),
  name?: string(name='Name', description='The name of the CEN instance.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter and cannot start with `http://` or `https://`.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  protectionLevel?: string(name='ProtectionLevel', description='The level of CIDR block overlapping.

Set the value to **REDUCED** (default). This value specifies that CIDR blocks can overlap but cannot be the same.', example='REDUCED', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCenAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='13526224-5780-4426-8BDF-BC8B08700F22'),
}

model ModifyCenAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenAttributeResponseBody(name='body'),
}

/**
  * **ModifyCenAttribute** is an asynchronous operation. After you send a request, the system returns the **request ID** but the operation is still being performed in the system background. You can call **DescribeCens** to query the status of a CEN instance.
  * *   If a CEN instance is in the **Modifying** state, the CEN instance is being modified. You can query the CEN instance but cannot perform other operations.
  * *   If a CEN instance is in the **Active** state, the CEN instance is modified.
  *
 */
async function modifyCenAttribute(request: ModifyCenAttributeRequest): ModifyCenAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCenAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCenBandwidthPackageAttributeRequest {
  cenBandwidthPackageId: string(name='CenBandwidthPackageId', description='The ID of the bandwidth plan.', example='cenbwp-4c2zaavbvh5fx****', position='Query'),
  description?: string(name='Description', description='The new description of the bandwidth plan.

The description must be 2 to 256 characters in length. It must start with a letter and cannot start with `http://` or `https://`.', example='Bandwidth Plan', position='Query'),
  name?: string(name='Name', description='The new name of the bandwidth plan.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter and cannot start with `http://` or `https://`.', example='test', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCenBandwidthPackageAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='13526224-5780-4426-8ADF-BC8B08700F23'),
}

model ModifyCenBandwidthPackageAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenBandwidthPackageAttributeResponseBody(name='body'),
}

async function modifyCenBandwidthPackageAttribute(request: ModifyCenBandwidthPackageAttributeRequest): ModifyCenBandwidthPackageAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCenBandwidthPackageAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCenBandwidthPackageSpecRequest {
  bandwidth?: int32(name='Bandwidth', description='The new maximum bandwidth value of the bandwidth plan. Unit: Mbit/s.

Valid values: **2** to **10000**.', example='2', position='Query'),
  cenBandwidthPackageId: string(name='CenBandwidthPackageId', description='The ID of the bandwidth plan.', example='cenbwp-4c2zaavbvh5x****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyCenBandwidthPackageSpecResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C2EE7A8-74D4-4081-8236-CEBDE3BBCF50'),
}

model ModifyCenBandwidthPackageSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenBandwidthPackageSpecResponseBody(name='body'),
}

async function modifyCenBandwidthPackageSpec(request: ModifyCenBandwidthPackageSpecRequest): ModifyCenBandwidthPackageSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCenBandwidthPackageSpec', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCenRouteMapRequest {
  asPathMatchMode?: string(name='AsPathMatchMode', description='The match method that is used to match routes against the AS paths. Valid values:

*   **Include**: fuzzy match. A route meets the match condition if the AS path of the route overlaps with the AS paths specified in the match condition.
*   **Complete**: exact match. A route is a match only if the AS path of the route is the same as an AS path specified in the match condition.', example='Include', position='Query'),
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  cenRegionId: string(name='CenRegionId', description='The ID of the region in which the routing policy is applied.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  cidrMatchMode?: string(name='CidrMatchMode', description='The match method that is used to match routes against the prefix list. Valid values:

*   **Include**: fuzzy match. A route is a match if the route prefix is included in the match conditions.

For example, if you set the match condition to 10.10.0.0/16 and fuzzy match is enabled, the route whose prefix is 10.10.1.0/24 is a match.

*   **Complete**: exact match. A route is a match only if the route prefix is the same as the prefix specified in the match condition.

For example, if you set the match condition to 10.10.0.0/16 and exact match is enabled, a route is a match only if the prefix is 10.10.0.0/16.', example='Include', position='Query'),
  communityMatchMode?: string(name='CommunityMatchMode', description='The match method that is sed to match routes based on the community. Valid values:

*   **Include**: fuzzy match. A route meets the match condition if the community of the route overlaps with the community specified in the match condition.
*   **Complete**: exact match. A route meets the match condition only if the community of the route is the same as the community specified in the match condition.', example='Include', position='Query'),
  communityOperateMode?: string(name='CommunityOperateMode', description='The action that is performed on the community. Valid values:

*   **Additive**: adds the community to the route.
*   **Replace**: replaces the original community of the route.

This parameter specifies the action to be performed when a route meets the match condition.', example='Additive', position='Query'),
  description?: string(name='Description', description='The description of the routing policy.

The description cannot start with `http://` or `https://`. It must start with a letter and can contain letters, digits, hyphens (-), periods (.), and underscores (\\_).', example='desctest', position='Query'),
  destinationChildInstanceTypes?: [ string ](name='DestinationChildInstanceTypes', description='The types of destination network instance to which the routes belong. The following types of network instances are supported:

*   **VPC**: VPC

*   **VBR**: VBR

*   **CCN**: CCN instance

*   **VPN**: IPsec connection

    **

    **Note**This parameter does not take effect if the IPsec-VPN connection or SSL client is associated with a transit router through a VPN gateway and a VPC. This parameter takes effect only if the IPsec connection is directly connected to the transit router.

The destination network instance types are valid only if the routing policy is applied to scenarios where routes are advertised from the gateway in the current region to network instances in the current region.', example='VPC', position='Query'),
  destinationCidrBlocks?: [ string ](name='DestinationCidrBlocks', description='The prefix list against which routes are matched.

You must specify the IP addresses in CIDR notation. You can enter at most 32 CIDR blocks.', example='10.10.10.0/24', position='Query'),
  destinationInstanceIds?: [ string ](name='DestinationInstanceIds', description='The IDs of the destination network instances to which the routes belong. The following network instance types are supported:

*   VPC
*   VBR
*   CCN instance
*   SAG instance
*   The ID of the IPsec-VPN connection.

You can enter at most 32 IDs.

> The destination instance IDs take effect only when Direction is set to Export from Regional Gateway and the destination instances are deployed in the current region.', example='vpc-avcdsg34ds****', position='Query'),
  destinationInstanceIdsReverseMatch?: boolean(name='DestinationInstanceIdsReverseMatch', description='Specifies whether to exclude the destination network instance IDs. Valid values:

*   **false** (default value): A route is a match if its destination network instance ID is in the list specified by **DestinationInstanceIds.N**.
*   **true**: A route meets the match condition if its destination network instance ID is not in the list specified by **DestinationInstanceIds.N**.', example='false', position='Query'),
  destinationRouteTableIds?: [ string ](name='DestinationRouteTableIds', description='The IDs of the destination route tables to which the routes belong. You can enter at most 32 route table IDs.

> The destination route table IDs take effect only when Direction is set to Export from Regional Gateway and the destination route tables belong to network instances deployed in the current region.', example='vtb-adfg53c322v****', position='Query'),
  mapResult: string(name='MapResult', description='The action to be performed on a route that meets all match conditions. Valid values:

*   **Permit**: the route is permitted.
*   **Deny**: the route is denied.', example='Permit', position='Query'),
  matchAddressType?: string(name='MatchAddressType', description='The type of IP address in the match condition. Valid values:

*   **IPv4**: IPv4 address
*   **IPv6**: IPv6 address

This parameter can be empty. If no value is specified, all types of IP address are a match.', example='IPv4', position='Query'),
  matchAsns?: [ int32 ](name='MatchAsns', description='The AS paths against which routes are matched.

> Only the AS-SEQUENCE parameter is supported. The AS-SET, AS-CONFED-SEQUENCE, and AS-CONFED-SET parameters are not supported. In other words, only the AS number list is supported. Sets and sub-lists are not supported.', example='65501', position='Query'),
  matchCommunitySet?: [ string ](name='MatchCommunitySet', description='The community against which routes are matched.

Specify the community in the format of n:m. Valid values of n and m: **1** to **65535**. Each community must comply with the RFC 1997 standard. The RFC 8092 standard that defines BGP large communities is not supported.

You can specify at most 32 communities.

> If the configurations of the communities are incorrect, routes may fail to be advertised to your data center.', example='65501:1', position='Query'),
  nextPriority?: int32(name='NextPriority', description='The priority of the routing policy that you want to associate with the current one.

*   This parameter takes effect only when the **MapResult** parameter is set to **Permit**. This way, the permitted route is matched against the next routing policy.
*   The region and direction of the routing policy to be associated must be the same as those of the current routing policy.
*   The priority of the routing policy to be associated must be lower than the priority of the current routing policy.', example='20', minimum=1, maximum=1000, position='Query'),
  operateCommunitySet?: [ string ](name='OperateCommunitySet', description='The community set on which actions are performed.

Specify the community in the format of n:m. Valid values of n and m: **1** to **65535**. Each community must comply with RFC 1997. The RFC 8092 standard that defines BGP large communities is not supported.

You can specify at most 32 communities.

> If the configurations of the communities are incorrect, routes may fail to be advertised to your data center.', example='65501:1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  preference?: int32(name='Preference', description='The new priority of the route.

Valid values: **1** to **100**. The default priority is **50**. A smaller value indicates a higher priority.

This parameter specifies the action to be performed when a route meets the match condition.', example='22', minimum=1, maximum=100, position='Query'),
  prependAsPath?: [ long ](name='PrependAsPath', description='The AS paths that are prepended by using an action statement when regional gateways receive or advertise routes.

The AS paths vary based on the direction in which the routing policy is applied:

*   If AS paths are prepended to a routing policy that is applied in the inbound direction, you must specify source network instance IDs and the source region in the match condition. In addition, the source region must be the same as the region where the routing policy is applied.
*   If AS paths are prepended to a routing policy that is applied in the outbound direction, you must specify destination network instance IDs in the match condition.

This parameter specifies the action to be performed when a route meets the match condition.', example='65501', position='Query'),
  priority: int32(name='Priority', description='The priority of the routing policy. Valid values: **1** to **100**. A smaller value indicates a higher priority.

> You cannot specify the same priority for routing policies that apply in the same region and direction. The system matches routes against the match conditions of routing policies in descending order of priority. A smaller value indicates a higher priority. You must set the priorities to proper values.', example='10', minimum=1, maximum=1000, position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeMapId: string(name='RouteMapId', description='The ID of the routing policy.', example='cenrmap-abcdedfghij****', position='Query'),
  routeTypes?: [ string ](name='RouteTypes', description='The type of route to be matched against the match condition. The following route types are supported:

*   **System**: system routes that are automatically generated by the system.
*   **Custom**: custom routes that are manually added.
*   **BGP**: routes that are advertised over BGP.', example='System', position='Query'),
  sourceChildInstanceTypes?: [ string ](name='SourceChildInstanceTypes', description='The types of source network instance to which the routes belong. The following types of network instances are supported:

*   **VPC**: VPC

*   **VBR**: VBR

*   **CCN**: CCN instance

*   **VPN** :VPN gateway or IPsec-VPN connection

    *   If the IPsec-VPN connection or SSL client is associated with a VPN gateway, the VPC associated with the VPN gateway must be connected to a transit router, and the VPN gateway must use Border Gateway Protocol (BGP) dynamic routing. Otherwise, this parameter cannot take effect.
    *   This parameter takes effect if the IPsec connection is directly connected to a transit router.', example='VPC', position='Query'),
  sourceInstanceIds?: [ string ](name='SourceInstanceIds', description='The IDs of the source network instances to which the routes belong. The following network instance types are supported:

*   Virtual private cloud (VPC)
*   Virtual border router (VBR)
*   Cloud Connect Network (CCN) instance
*   Smart Access Gateway (SAG) instance
*   The ID of the IPsec-VPN connection.

You can enter at most 32 IDs.', example='vpc-afsfdf5435vcvc****', position='Query'),
  sourceInstanceIdsReverseMatch?: boolean(name='SourceInstanceIdsReverseMatch', description='Specifies whether to exclude the source network instance IDs. Valid values:

*   **false** (default value): A route is a match if its source network instance ID is in the list specified by **SourceInstanceIds.N**.
*   **true**: A route is a match if its source network instance ID is not in the list specified by **SourceInstanceIds.N**.', example='false', position='Query'),
  sourceRegionIds?: [ string ](name='SourceRegionIds', description='The IDs of the source regions to which the routes belong. You can enter at most 32 region IDs.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-beijing', position='Query'),
  sourceRouteTableIds?: [ string ](name='SourceRouteTableIds', description='The IDs of the source route tables to which the routes belong. You can enter at most 32 route table IDs.', example='vtb-acdbvtbr342cd****', position='Query'),
}

model ModifyCenRouteMapResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='54B48E3D-DF70-471B-AA93-08E683A1B457'),
}

model ModifyCenRouteMapResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenRouteMapResponseBody(name='body'),
}

/**
  * `ModifyCenRouteMap` is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the `DescribeCenRouteMaps` operation to query the status of a routing policy.
  * *   **Modifying**: indicates that the system is modifying the routing policy. You can only query the routing policy, but cannot perform other operations.
  * *   **Active**: indicates that the routing policy is modified.
  *
 */
async function modifyCenRouteMap(request: ModifyCenRouteMapRequest): ModifyCenRouteMapResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCenRouteMap', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFlowLogAttributeRequest {
  cenId: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can only contain ASCII characters.

>  If you do not specify this parameter, ClientToken is set to the value of RequestId The value of RequestId for each API request may be different.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  description?: string(name='Description', description='The new description of the flow log.

The description must be 2 to 256 characters in length. It must start with a letter but cannot start with `http://` or `https://`.', example='myFlowlog', position='Query'),
  flowLogId: string(name='FlowLogId', description='The ID of the flow log.', example='flowlog-m5evbtbpt****', position='Query'),
  flowLogName?: string(name='FlowLogName', description='The new name of the flow log.

The name must be 2 to 128 characters in length, and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='myFlowlog', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the flow log is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyFlowLogAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9A411874-2EC8-4633-9D30-9012DCE89DD1'),
  success?: string(name='Success', description='Indicates whether the call is successful.

*   **true**: yes
*   **false**: no', example='true'),
}

model ModifyFlowLogAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFlowLogAttributeResponseBody(name='body'),
}

/**
  * # Usage notes
  * `ModifyFlowLogAttribute` is an asynchronous operation. After you send a request, a **request ID** is returned but the operation is still being performed in the system background. You can call the `DescribeFlowlogs` operation to query the status of a flow log.
  * *   If a flow log is in the **Modifying** state, the flow log is being modified. In this case, you can query the flow log but cannot perform other operations.
  * *   If a flow log is in the **Active** state, the flow log is modified.
  *
 */
async function modifyFlowLogAttribute(request: ModifyFlowLogAttributeRequest): ModifyFlowLogAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFlowLogAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTransitRouterCidrRequest {
  cidr?: string(name='Cidr', description='The new CIDR block of the transit router.', example='192.168.10.0/24', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId for each API request may be different.', example='123e4567-e89b-12d3-a456-426****', position='Query'),
  description?: string(name='Description', description='The new description of the transit router CIDR block.

The description must be 1 to 256 characters in length.', example='desctest', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the request. Valid values:

*   **true**: checks the request but does not modify the CIDR block. The system checks the required parameters, the request format, and the service limits. If the request fails to pass the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the request. If the request passes the precheck, the CIDR block of the transit router is modified.', example='false', position='Query'),
  name?: string(name='Name', description='The new name of the transit router CIDR block.

The name must be 1 to 128 characters in length.', example='nametest', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  publishCidrRoute?: boolean(name='PublishCidrRoute', description='Specifies whether to allow the system to automatically add routes that point to the CIDR block to the route table of the transit router.

*   **true**: yes

    A value of true specifies that after you create a private VPN connection and enable route learning for the connection, the system automatically adds a blackhole route to the route table of the transit route to which the VPN connection is attached.

    The destination CIDR block of the blackhole route is the CIDR block of the transit router. The CIDR block of the transit router refers to the CIDR block from which gateway IP addresses are allocated to IPsec-VPN connections.

    The blackhole route is advertised only to the route table of the virtual border router (VBR) that is connected to the transit router.

*   **false**: no', example='true', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the transit router is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='ap-southeast-2', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterCidrId: string(name='TransitRouterCidrId', description='The ID of the transit router CIDR block.

You can call [ListTransitRouterCidr](~~462772~~) to query the ID of a transit route CIDR block.', example='cidr-0zv0q9crqpntzz****', position='Query'),
  transitRouterId: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-gw8ergozrv77rtbjd****', position='Query'),
}

model ModifyTransitRouterCidrResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0876E54E-3E36-5C31-89F0-9EE8A9266F9A'),
}

model ModifyTransitRouterCidrResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTransitRouterCidrResponseBody(name='body'),
}

/**
  * ## Usage notes
  * *   Before you modify the CIDR block of a transit router, we recommend that you read the [limits on transit router CIDR blocks](~~462635~~).
  * *   If IP addresses within the CIDR block have been allocated to network instances, you cannot modify the CIDR block.
  * *   When you call **ModifyTransitRouterCidr**, if no parameter of the **PublishCidrRoute** operation is modified, ModifyTransitRouterCidr is a synchronous operation. After you call the operation, the new settings are immediately applied.
  * *   If a parameter of the **PublishCidrRoute** operation is modified, **ModifyTransitRouterCidr** is an asynchronous operation. After you call the operation, the request ID (**RequestId**) is returned but the operation is still being performed in the system background. You can call **ListTransitRouterCidr** to query the status of the CIDR block of the transit router.
  *     *   If the CIDR block of the transit router remains unchanged, the CIDR block is still being modified.
  *     *   If the CIDR block of the transit router is changed to the one that you specify in the request, the CIDR block has been modified.
  *
 */
async function modifyTransitRouterCidr(request: ModifyTransitRouterCidrRequest): ModifyTransitRouterCidrResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTransitRouterCidr', 'POST', '/', 'json', false, 'json', request);
}

model ModifyTransitRouterMulticastDomainRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the request. Valid values:

*   **true**: prechecks the request but does not modify the name or description of the multicast domain. The system checks the required parameters, the request format, and the service limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. If the request passes the precheck, the name and description of the multicast domain are modified.

>  This parameter is not in use.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterMulticastDomainDescription?: string(name='TransitRouterMulticastDomainDescription', description='The new description of the multicast domain.

The description must be 0 to 256 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at signs (@), underscores (\\_), and hyphens (-).', example='desctest', position='Query'),
  transitRouterMulticastDomainId: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast domain.', example='tr-mcast-domain-40cwj0rgzgdtam****', position='Query'),
  transitRouterMulticastDomainName?: string(name='TransitRouterMulticastDomainName', description='The new name of the multicast domain.

The name must be 0 to 128 characters in length, and can contain letters, digits, commas (,), periods (.), semicolons (;), forward slashes (/), at signs (@), underscores (\\_), and hyphens (-).', example='nametest', position='Query'),
}

model ModifyTransitRouterMulticastDomainResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='26273D23-5CB0-5EFC-AF5F-78A5448084C9'),
}

model ModifyTransitRouterMulticastDomainResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTransitRouterMulticastDomainResponseBody(name='body'),
}

async function modifyTransitRouterMulticastDomain(request: ModifyTransitRouterMulticastDomainRequest): ModifyTransitRouterMulticastDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyTransitRouterMulticastDomain', 'POST', '/', 'json', false, 'json', request);
}

model MoveResourceGroupRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.

>  If you do not set this parameter, the system automatically uses **RequestId** as **ClientToken**. **RequestId** may be different for each API request.', example='123e456****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to only precheck the request. Valid values:

*   **true** precheck the request and does not change the resource group to which the CEN instance or bandwidth plan belongs. The system checks the required parameters, request syntax, and limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the API request. If the request passes the precheck, a 2xx HTTP status code is returned and the operation is performed.', example='false', position='Query'),
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the resource group to which you want to move the CEN instance or bandwidth plan.', example='rg-aekzqqurtfg****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the resource.', example='cen-nye53d7p3hzyu4****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Valid values:

*   **CEN**: CEN instance
*   **bandwidthpackage**: bandwidth plan', example='cen', position='Query'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1D169236-7C76-57CF-B6C8-B4CACE0BA1BB'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

/**
  * ## Usage notes
  * By default, CEN instances and bandwidth plans are in the default resource group. You can call `MoveResourceGroup` to move CEN instances or bandwidth plans to another resource group.
  *
 */
async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'MoveResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model OpenTransitRouterServiceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OpenTransitRouterServiceResponseBody = {
  orderId?: string(name='OrderId', description='The ID of the order.', example='21370700730****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='866DEBE1-6411-51EC-80D8-975349B9FB4A'),
}

model OpenTransitRouterServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenTransitRouterServiceResponseBody(name='body'),
}

/**
  * You can call the `OpenTransitRouterService` operation to activate the transit router feature free of charge. After the `OpenTransitRouterService` operation succeeds, an order is automatically generated. You can use the returned order ID to query the order information in [Alibaba Cloud User Center](https://usercenter2-intl.aliyun.com/billing/#/account/overview).
  *
 */
async function openTransitRouterService(request: OpenTransitRouterServiceRequest): OpenTransitRouterServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OpenTransitRouterService', 'POST', '/', 'json', false, 'json', request);
}

model PublishRouteEntriesRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  childInstanceId: string(name='ChildInstanceId', description='The ID of the network instance.', example='vpc-rj9gt5nll27onu****', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='us-west-1', position='Query'),
  childInstanceRouteTableId: string(name='ChildInstanceRouteTableId', description='The ID of the route table configured on the network instance.', example='vtb-bp174d1gje7****', position='Query'),
  childInstanceType: string(name='ChildInstanceType', description='The type of the network instance. Valid values:

*   **VPC**: VPC
*   **VBR**: VBR', example='VPC', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', description='The destination CIDR block of the route that you want to advertise.', example='172.16.1.0/24', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model PublishRouteEntriesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FBDB18D8-E91E-4978-8D6C-6E2E3EE10133'),
}

model PublishRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: PublishRouteEntriesResponseBody(name='body'),
}

/**
  * The following table describes whether routes of different types are advertised to CEN by default. You can call the PublishRouteEntries operation to advertise routes to CEN.
  * |Route|Network instance|Advertised to CEN by default|
  * |---|---|---|
  * |Routes that route network traffic to Elastic Compute Service (ECS) instances|VPC|No|
  * |Routes that route network traffic to VPN gateways|VPC|No|
  * |Routes that route network traffic to high-availability virtual IP addresses (HAVIPs)|VPC|No|
  * |Routes that route network traffic to router interfaces|VPC|No|
  * |Routes that route network traffic to elastic network interfaces (ENIs)|VPC|No|
  * |Routes that route network traffic to IPv6 gateways|VPC|No|
  * |Routes that route network traffic to NAT gateways|VPC|No|
  * |System routes of VPCs|VPC|Yes|
  * |Routes that route network traffic to data centers|VBR|Yes|
  * |Border Gateway Protocol (BGP) routes|VBR|Yes|
  *
 */
async function publishRouteEntries(request: PublishRouteEntriesRequest): PublishRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

model RefreshTransitRouteTableAggregationRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId may be different for each request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouteTableAggregationCidr: string(name='TransitRouteTableAggregationCidr', description='The destination CIDR block of the aggregate route.', example='192.168.53.0/24', position='Query'),
  transitRouteTableId: string(name='TransitRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-iq8qgruq1ry8jc7vt****', position='Query'),
}

model RefreshTransitRouteTableAggregationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C2EE7A8-74D4-4081-8236-CEBDE3BBCF50'),
}

model RefreshTransitRouteTableAggregationResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshTransitRouteTableAggregationResponseBody(name='body'),
}

/**
  * If you fail to advertise an aggregate route to a virtual private cloud (VPC), you can call the **RefreshTransitRouteTableAggregation** operation to re-advertise the aggregate route after you troubleshoot the error. If the error is fixed by using one of the following methods, the aggregate route is automatically advertised:
  * *   Delete the associated forwarding correlations
  * *   Disable automatic route synchronization
  * *   Delete the VPC route tables
  * *   Delete the aggregate route
  * You can call the **DescribeTransitRouteTableAggregationDetail** operation to query whether an aggregate route is advertised.
  *
 */
async function refreshTransitRouteTableAggregation(request: RefreshTransitRouteTableAggregationRequest): RefreshTransitRouteTableAggregationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshTransitRouteTableAggregation', 'POST', '/', 'json', false, 'json', request);
}

model RegisterTransitRouterMulticastGroupMembersRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The token can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId may be different for each request.', example='123e4567-e89b-12d3-a456-426655440000', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run.', example='false', position='Query'),
  groupIpAddress: string(name='GroupIpAddress', description='The IP address of the multicast group to which the multicast members belong. Valid values: **224.0.0.1** to **239.255.255.254**.

If the multicast group does not exist in the specified multicast domain, the system automatically creates the multicast group in the multicast domain.', example='239.XX.XX.2', position='Query'),
  networkInterfaceIds?: [ string ](name='NetworkInterfaceIds', description='The IDs of ENIs.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  peerTransitRouterMulticastDomains?: [ string ](name='PeerTransitRouterMulticastDomains', description='The IDs of the multicast domains that are in different regions.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterMulticastDomainId: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast domain to which the multicast members belong.', example='tr-mcast-domain-91wpg6wbhchjeq****', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the ENI belongs.

*   If the ENI belongs to the current Alibaba Cloud account, ignore this parameter.
*   If the ENI belongs to a different Alibaba Cloud account, you must set this parameter.', example='vpc-wz9fusm6zq8uy7cfa****', position='Query'),
}

model RegisterTransitRouterMulticastGroupMembersResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='EB985B7E-2CF8-5EC9-A7DB-F7C82ABD3ACE'),
}

model RegisterTransitRouterMulticastGroupMembersResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterTransitRouterMulticastGroupMembersResponseBody(name='body'),
}

/**
  * Enterprise Edition transit routers allow you to specify elastic network interfaces (ENIs) as multicast members. You can call the `RegisterTransitRouterMulticastGroupMembers` operation to add ENIs in the same region or in different regions to a multicast group as multicast members.
  * *   If you set **NetworkInterfaceIds**, ENIs in the current region are specified as multicast members. Make sure that the vSwitches of the ENIs are associated with the multicast domain. For more information, see [AssociateTransitRouterMulticastDomain](~~429778~~).
  * *   If you set **PeerTransitRouterMulticastDomains**, multicast members in the multicast group that has the same IP address as the current multicast group but is in a different region are added to the current multicast group. Make sure that an inter-region connection is created. For more information, see [CreateTransitRouterPeerAttachment](~~261363~~).
  *         For example, Alice created a multicast domain (Domain A) in the Australia (Sydney) region and a multicast domain (Domain B) in the UK (London) region. Domain A contains a multicast group (Group A), and Domain B contains a multicast group (Group B). Group A and Group B have the same multicast IP address. Group B in UK (London) contains a multicast member (Member B). When Alice calls the `RegisterTransitRouterMulticastGroupMembers` operation, if she sets **PeerTransitRouterMulticastDomains** to the ID of Member B in Group B that is in the UK (London) region, Member B is added to Group A in the Australia (Sydney) region. 
  * *   The `RegisterTransitRouterMulticastGroupMembers` operation is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the `ListTransitRouterMulticastGroups` operation to query the status of a multicast member.
  *     *   If a multicast member is in the **Registering** state, the multicast member is being added. You can query the multicast member but cannot perform other operations.
  *     *   If a multicast member is in the **Registered** state, the multicast member is added.
  *
 */
async function registerTransitRouterMulticastGroupMembers(request: RegisterTransitRouterMulticastGroupMembersRequest): RegisterTransitRouterMulticastGroupMembersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterTransitRouterMulticastGroupMembers', 'POST', '/', 'json', false, 'json', request);
}

model RegisterTransitRouterMulticastGroupSourcesRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId for each API request may be different.', example='123e4567-e89b-12d3-a456-4266****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to check the request. Valid values:

*   **true**: prechecks the request but does not create the multicast source. The system checks the required parameters, the request format, and the service limits. If the request fails to pass the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): sends the request. After the request passes the precheck, the multicast source is created.', example='false', position='Query'),
  groupIpAddress: string(name='GroupIpAddress', description='The IP address of the multicast group to which the multicast source belongs. Valid values: **224.0.0.1** to **239.255.255.254**.

If the multicast group does not exist in the multicast domain, the system automatically creates the multicast group in the multicast domain.', example='239.XX.XX.2', position='Query'),
  networkInterfaceIds?: [ string ](name='NetworkInterfaceIds', description='The IDs of the ENIs.

You can create only one multicast source in a multicast group.

>  This parameter is required.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterMulticastDomainId: string(name='TransitRouterMulticastDomainId', description='The ID of the multicast group to which the multicast source belongs.', example='tr-mcast-domain-5mjb5gjb6dgu98****', position='Query'),
  vpcId?: string(name='VpcId', description='The ID of the VPC to which the ENI belongs.

*   If the ENI belongs to the current Alibaba Cloud account, ignore this parameter.
*   If the ENI belongs to a different Alibaba Cloud account, you must set this parameter.', example='vpc-wz9fusm6zq8uy7cfa****', position='Query'),
}

model RegisterTransitRouterMulticastGroupSourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9C5D5D70-0AFF-5E5C-8D8A-E92C90C8FB08'),
}

model RegisterTransitRouterMulticastGroupSourcesResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterTransitRouterMulticastGroupSourcesResponseBody(name='body'),
}

/**
  * ## Usage notes
  * - You can specify only elastic network interfaces (ENIs) as multicast sources.
  * - `RegisterTransitRouterMulticastGroupSources` is an asynchronous operation. After you send a request, the **request ID** is returned but the operation is still being performed in the system background. You can call `ListTransitRouterMulticastGroups` to query the status of a multicast source.     - If a multicast source is in the **Registering** state, the multicast source is being created. You can query the multicast source but cannot perform other operations.
  *   - If a multicast source is in the **Registered** state, the multicast source is created.
  * ## Prerequisites
  * Before you call `RegisterTransitRouterMulticastGroupSources`, make sure that the vSwitch on which the ENI is created is associated with the multicast domain. For more information, see [AssociateTransitRouterMulticastDomain](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/associatetransitroutermulticastdomain).
  *
 */
async function registerTransitRouterMulticastGroupSources(request: RegisterTransitRouterMulticastGroupSourcesRequest): RegisterTransitRouterMulticastGroupSourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterTransitRouterMulticastGroupSources', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTrafficMatchRuleFromTrafficMarkingPolicyRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMarkRuleIds?: [ string ](name='TrafficMarkRuleIds', description='The ID of the traffic classification rule.

You can specify at most 20 traffic classification rules.', position='Query'),
  trafficMarkingPolicyId: string(name='TrafficMarkingPolicyId', description='The ID of the traffic marking policy.', example='tm-d33hdczo3qo8ta****', position='Query'),
}

model RemoveTrafficMatchRuleFromTrafficMarkingPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6DF9A765-BCD2-5C7E-8C32-C35C8A361A39'),
}

model RemoveTrafficMatchRuleFromTrafficMarkingPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTrafficMatchRuleFromTrafficMarkingPolicyResponseBody(name='body'),
}

/**
  * *   When you call **RemoveTrafficMatchRuleFromTrafficMarkingPolicy**, take note of the following rules:
  *     *   If you specify the ID of a traffic classification rule in the **TrafficMarkRuleIds** parameter, the specified traffic classification rule is deleted.
  *     *   If you do not specify a traffic classification rule ID in the **TrafficMarkRuleIds** parameter, no operation is performed after you call this operation.
  *     If you want to delete a traffic classification rule, you must specify the rule ID before you call this operation.
  * *   **RemoveTrafficMatchRuleFromTrafficMarkingPolicy** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the **ListTrafficMarkingPolicies** operation to query the status of a traffic classification rule.
  *     *   If a traffic classification rule is in the **Deleting** state, the traffic classification rule is being deleted. In this case, you can query the traffic classification rule but cannot perform other operations.
  *     *   If a traffic classification rule cannot be found, the traffic classification rule is deleted.
  *
 */
async function removeTrafficMatchRuleFromTrafficMarkingPolicy(request: RemoveTrafficMatchRuleFromTrafficMarkingPolicyRequest): RemoveTrafficMatchRuleFromTrafficMarkingPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTrafficMatchRuleFromTrafficMarkingPolicy', 'POST', '/', 'json', false, 'json', request);
}

model RemoveTraficMatchRuleFromTrafficMarkingPolicyRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. 

You can use the client to generate the value, but you must ensure that it is unique among all requests. The client token can contain only ASCII characters.  

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-426****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the request. Valid values:

- **true**: prechecks the request but does not delete the traffic classification rules. The system checks the required parameters, the request format, and the service limits. If the request fails to pass the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
- **false** (default): sends the request and deletes the specified traffic classification rules after the request passes the precheck.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMarkRuleIds?: [ string ](name='TrafficMarkRuleIds', description='The IDs of the traffic classification rules.

You can specify at most 20 traffic classification rules.

You can call the ListTrafficMarkingPolicies operation to query the IDs of traffic classification rules in a specified traffic marking policy.', position='Query'),
  trafficMarkingPolicyId: string(name='TrafficMarkingPolicyId', description='The ID of the traffic marking policy.', example='tm-d33hdczo3qo8ta****', position='Query'),
}

model RemoveTraficMatchRuleFromTrafficMarkingPolicyResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6DF9A765-BCD2-5C7E-8C32-C35C8A361A39'),
}

model RemoveTraficMatchRuleFromTrafficMarkingPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTraficMatchRuleFromTrafficMarkingPolicyResponseBody(name='body'),
}

/**
  * @deprecated
  * ## Usage notes
  * The **RemoveTraficMatchRuleFromTrafficMarkingPolicy** is deprecated and will be discontinued soon. If you need to delete traffic classification rules from a traffic marking policy, call the [RemoveTrafficMatchRuleFromTrafficMarkingPolicy](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/removetrafficmatchrulefromtrafficmarkingpolicy) operation.
  *
 */
// Deprecated
async function removeTraficMatchRuleFromTrafficMarkingPolicy(request: RemoveTraficMatchRuleFromTrafficMarkingPolicyRequest): RemoveTraficMatchRuleFromTrafficMarkingPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RemoveTraficMatchRuleFromTrafficMarkingPolicy', 'POST', '/', 'json', false, 'json', request);
}

model ReplaceTransitRouterRouteTableAssociationRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='123e4567-e89b-12d3-a456-426655****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the API request. Valid values:

*   **true**: prechecks the request but does not associate the network instance connection with another route table. The system checks whether the required parameters are set, whether the formats of the values are valid, and the service limits. If the request fails to pass the precheck, the corresponding error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false**: sends the request. After the request passes the authentication, the network instance connection is associated with the specified route table. This is the default value.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the network instance connection.', example='tr-attach-071g5j5tefg4x6****', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', description='The ID of the route table with which you want to associate the network instance connection.', example='vtb-bp1cprmc6xmzjd66i****', position='Query'),
}

model ReplaceTransitRouterRouteTableAssociationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='160BD7D3-3D1E-5702-9AF0-56E4B15FCB65'),
}

model ReplaceTransitRouterRouteTableAssociationResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceTransitRouterRouteTableAssociationResponseBody(name='body'),
}

/**
  * *   The network instance connection that you want to associate with another route table must be created on an Enterprise Edition transit router.
  * *   **ReplaceTransitRouterRouteTableAssociation** is an asynchronous operation. After you send a request, the system returns the **request ID** but the operation is still being performed in the system background. You can call **ListTransitRouterRouteTableAssociations** to query the associated forwarding status between a network instance connection and transit router route table.
  *     *   The **Replacing** state indicates that the network instance connection is being associated with the specified transit router route table. You can query the associate forwarding correlation between the network instance connection and the transit router route table but cannot perform other operations.
  *     *   The **Active** state indicates that the network instance connection is associated with the specified transit router route table.
  *
 */
async function replaceTransitRouterRouteTableAssociation(request: ReplaceTransitRouterRouteTableAssociationRequest): ReplaceTransitRouterRouteTableAssociationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplaceTransitRouterRouteTableAssociation', 'POST', '/', 'json', false, 'json', request);
}

model ResolveAndRouteServiceInCenRequest {
  accessRegionIds: [ string ](name='AccessRegionIds', description='The ID of the region in which the cloud service that you want to access is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-ckwa2hhmuislse****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4****', position='Query'),
  description?: string(name='Description', description='The description of the cloud service.

The description can be empty or 2 to 256 characters in length. It must start with a letter, and can contain digits, hyphens (-), periods (.), and underscores (\\_). It cannot start with `http://` or `https://`.', example='descname', position='Query'),
  host: string(name='Host', description='The IP addresses or CIDR blocks of the cloud service.

> In most cases, multiple IP addresses or CIDR blocks are assigned to a cloud service. We recommend that you call this operation multiple times to add all IP addresses and CIDR blocks of the cloud service.', example='100.118.28.0/24', position='Query'),
  hostRegionId: string(name='HostRegionId', description='The ID of the region in which the cloud service is deployed.', example='cn-hangzhou', position='Query'),
  hostVpcId: string(name='HostVpcId', description='The ID of the VPC that is associated with the cloud service.', example='vpc-o6woh5s494zueq40v****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ResolveAndRouteServiceInCenResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C0245BEF-52AC-44A8-A776-EF96FD26A5CA'),
}

model ResolveAndRouteServiceInCenResponse = {
  headers: map[string]string(name='headers'),
  body: ResolveAndRouteServiceInCenResponseBody(name='body'),
}

/**
  * Cloud services refer to the Alibaba Cloud services that use the 100.64.0.0/10 CIDR block to provide services. These cloud services include Object Storage Service (OSS), Log Service, and Data Transmission Service (DTS). If your on-premises network needs to access a cloud service, you must attach the virtual border router (VBR) or Cloud Connect Network (CCN) instance that is connected to your on-premises network to a Cloud Enterprise Network (CEN) instance. In addition, you must attach a virtual private cloud (VPC) that is deployed in the same region as the cloud service to the CEN instance. This way, your on-premises network can connect to the VPC that is deployed in the same region as the cloud service and access the cloud service through the VPC.
  * *   An on-premises network associated with a VBR can use CEN to access only a cloud service that is deployed in the same region.
  *     For example, if cloud services are deployed in the China (Beijing) region, only on-premises networks connected to VBRs in the China (Beijing) region can access the cloud services.
  * *   **ResolveAndRouteServiceInCen** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the **DescribeRouteServicesInCen** operation to query the status of a cloud service.
  *     *   If a cloud service is in the **Creating** state, the connection to the cloud service is being created. In this case, you can query the cloud service but cannot perform other operations.
  *     *   If a cloud service is in the **Active** state, the connection to the cloud service is created.
  *     *   If a cloud service is in the **Failed** state, the connection to the cloud service failed.
  * # Prerequisites
  * Before you call this operation, make sure that the following conditions are met:
  * *   The VBR or CCN instance to which your on-premises network is connected is attached to a CEN instance.
  * *   A VPC that is deployed in the same region as the cloud service is also attached to the CEN instance. For more information, see [AttachCenChildInstance](~~65902~~).
  *
 */
async function resolveAndRouteServiceInCen(request: ResolveAndRouteServiceInCenRequest): ResolveAndRouteServiceInCenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResolveAndRouteServiceInCen', 'POST', '/', 'json', false, 'json', request);
}

model RevokeInstanceFromTransitRouterRequest {
  cenId: string(name='CenId', description='Enter the ID of the Cloud Enterprise Network (CEN) instance to which the transit router belongs.', example='cen-44m0p68spvlrqq****', position='Query'),
  cenOwnerId: long(name='CenOwnerId', description='The ID of the Alibaba Cloud account to which the CEN instance belongs.', example='1250123456123456', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the network instance.', example='vpc-bp1h8vbrbcgohcju5****', position='Query'),
  instanceType: string(name='InstanceType', description='The type of the network instance. Valid values:

*   **VPC**: VPC
*   **ExpressConnect**: VBR
*   **VPN**: IPsec-VPN connection', example='VPC', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the network instance is deployed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RevokeInstanceFromTransitRouterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='AA4BFFD1-5090-5896-935F-4B353557F1A8'),
}

model RevokeInstanceFromTransitRouterResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeInstanceFromTransitRouterResponseBody(name='body'),
}

/**
  * ## Usage notes
  * `RevokeInstanceFromTransitRouter` disallows transit routers only from connecting to virtual private clouds (VPCs), virtual border routers (VBRs), and IPsec-VPN connections.  
  * If you want to disallow transit routers from connecting to Cloud Connect Network (CCN) instances, call the [RevokeInstanceFromCbn](https://www.alibabacloud.com/help/en/smart-access-gateway/latest/revokeinstancefromcbn) operation.  
  * ## Prerequisites
  * Before you call `RevokeInstanceFromTransitRouter`, you must detach the network instances from the transit router.  
  * - For more information about how to detach VPCs from an Enterprise Edition transit router, see [DeleteTransitRouterVpcAttachment](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/deletetransitroutervpcattachment).
  * - For more information about how to detach VBRs from an Enterprise Edition transit router, see [DeleteTransitRouterVbrAttachment](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/deletetransitroutervbrattachment).
  * - For more information about how to detach network instances from a Basic Edition transit router, see [DetachCenChildInstance](https://www.alibabacloud.com/help/en/cloud-enterprise-network/latest/detachcenchildinstance).
  *
 */
async function revokeInstanceFromTransitRouter(request: RevokeInstanceFromTransitRouterRequest): RevokeInstanceFromTransitRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeInstanceFromTransitRouter', 'POST', '/', 'json', false, 'json', request);
}

model RoutePrivateZoneInCenToVpcRequest {
  accessRegionId: string(name='AccessRegionId', description='The ID of the region where PrivateZone is accessed.

This region refers to the region in which PrivateZone is accessed by clients.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  hostRegionId: string(name='HostRegionId', description='The ID of the region where PrivateZone is deployed.', example='cn-hangzhou', position='Query'),
  hostVpcId: string(name='HostVpcId', description='The ID of the VPC that is associated with PrivateZone.', example='vpc-bp1h8vbrbcgohcju5****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RoutePrivateZoneInCenToVpcResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C0245BEF-52AC-44A8-A776-EF96FD26A5CA'),
}

model RoutePrivateZoneInCenToVpcResponse = {
  headers: map[string]string(name='headers'),
  body: RoutePrivateZoneInCenToVpcResponseBody(name='body'),
}

/**
  * # Background information
  * PrivateZone is an Alibaba Cloud private domain name resolution and management service based on Virtual Private Cloud (VPC). After you attach virtual border routers (VBRs) and Cloud Connect Network (CCN) instances to a Cloud Enterprise Network (CEN) instance, you can enable the on-premises networks connected to the VBRs and CCN instances to access PrivateZone through the CEN instance.
  * *   The on-premises networks connected to VBRs or CCN instances must be deployed in the same region as the PrivateZone service.
  *     For example, if the PrivateZone service is deployed in the China (Beijing) region, only on-premises networks connected to VBRs or CCN instances in the China (Beijing) region can access the PrivateZone service.
  * *   **RoutePrivateZoneInCenToVpc** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the **DescribeCenPrivateZoneRoutes** operation to query the status of PrivateZone.
  *     *   If PrivateZone is in the **Creating** state, access to PrivateZone is being configured. In this case, you can query PrivateZone configurations but cannot perform other operations.
  *     *   If PrivateZone is in the **Active** state, access to PrivateZone is enabled.
  *     *   If PrivateZone is in the **Failed** state, configurations of access to PrivateZone failed.
  * # Prerequisites
  * Before you call **RoutePrivateZoneInCenToVpc**, make sure that the following conditions are met:
  * *   PrivateZone is deployed. For more information, see [PrivateZone quick start](~~64627~~).
  * *   The following network instances are attached to the same CEN instance: the VPC that is associated with the PrivateZone service, and the VBR and CCN instance that want to access the PrivateZone service. For more information, see [AttachCenChildInstance](~~65902~~).
  * *   If your on-premises network uses a CCN instance to connect to Alibaba Cloud and the account that owns the CCN instance is different from the account that owns the VPC or CEN instance, you must grant the CCN instance required permissions. For more information, see [Grant permissions to CCN](~~106674~~).
  *
 */
async function routePrivateZoneInCenToVpc(request: RoutePrivateZoneInCenToVpcRequest): RoutePrivateZoneInCenToVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RoutePrivateZoneInCenToVpc', 'POST', '/', 'json', false, 'json', request);
}

model SetCenInterRegionBandwidthLimitRequest {
  bandwidthLimit: long(name='BandwidthLimit', description='The maximum bandwidth value of the inter-region connection. Unit: Mbit/s.', example='8', position='Query'),
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6jmx****', position='Query'),
  localRegionId: string(name='LocalRegionId', description='The ID of the local region.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query regions where you can attach network instances to a CEN instance.', example='cn-hangzhou', position='Query'),
  oppositeRegionId: string(name='OppositeRegionId', description='The ID of the peer region.', example='us-west-1', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model SetCenInterRegionBandwidthLimitResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='530BC816-F575-412A-AAB2-435125D26328'),
}

model SetCenInterRegionBandwidthLimitResponse = {
  headers: map[string]string(name='headers'),
  body: SetCenInterRegionBandwidthLimitResponseBody(name='body'),
}

/**
  * ## Prerequisites
  * The Cloud Enterprise Network (CEN) instance is associated with a bandwidth plan. For more information, see the [CreateCenBandwidthPackage](~~65919~~) and [AssociateCenBandwidthPackage](~~65934~~) topics.
  * You can call the **SetCenInterRegionBandwidthLimit** operation to configure, modify, or remove the maximum bandwidth value of an inter-region connection.
  * *   If you set **BandwidthLimit** to a value other than 0, the maximum bandwidth value of the inter-region connection is set or changed to the specified value.
  * *   If you set **BandwidthLimit** to 0, no bandwidth resource is allocated to the inter-region connection.
  * ## Limits
  * *   The maximum bandwidth value of an inter-region connection cannot exceed that of the associated bandwidth plan.
  * *   The sum of the maximum bandwidth values of all inter-region connections cannot exceed the maximum bandwidth value of the associated bandwidth plan.
  * *   If bandwidth multiplexing is enabled for an inter-region connection, you cannot change the maximum bandwidth value of the inter-region connection.
  * *   You can call the **SetCenInterRegionBandwidthLimit** operation to configure, modify, and remove the maximum bandwidth values of inter-region connections only on Basic Edition transit routers.
  *     For more information about how to configure, modify, and remove the maximum bandwidth values of inter-region connections on Enterprise Edition transit routers, see [CreateTransitRouterPeerAttachment](~~261363~~), [UpdateTransitRouterPeerAttachmentAttribute](~~261229~~), and [DeleteTransitRouterPeerAttachment](~~261227~~).
  *
 */
async function setCenInterRegionBandwidthLimit(request: SetCenInterRegionBandwidthLimitRequest): SetCenInterRegionBandwidthLimitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCenInterRegionBandwidthLimit', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The IDs of the resources. You can enter most at 20 resource IDs.', example='cen-7qthudw0ll6jmc****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Set the value to **cen**, which specifies a CEN instance.', example='cen', position='Query'),
  tag: [ 
    {
      key?: string(name='Key', description='The tag key.

You can enter multiple tag keys. Valid values of **N**: **1** to **20**.

The key cannot exceed 64 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.', example='TagKey'),
      value?: string(name='Value', description='The tag value.

Each tag key corresponds to a tag value. Valid values of **N**: **1** to **20**.

The value cannot exceed 128 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.', example='TagValue'),
    }
  ](name='Tag', description='The list of tags that you want to associate with the resources.', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

/**
  * ## Description
  * *   Each tag consists of a tag key and a tag value. When you add a tag, you must specify the tag key and tag value.
  * *   If you want to add multiple tags to a Cloud Enterprise Network (CEN) instance, each tag key must be unique.
  * *   You can add at most 20 tags to a CEN instance.
  *
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model TempUpgradeCenBandwidthPackageSpecRequest {
  bandwidth: int32(name='Bandwidth', description='The maximum bandwidth value to which you want to upgrade the bandwidth plan. Unit: Mbit/s.

Valid values: **2** to **10000**.', example='20', position='Query'),
  cenBandwidthPackageId: string(name='CenBandwidthPackageId', description='The ID of the bandwidth plan.', example='cenbwp-y08yosedeqlpua****', position='Query'),
  endTime: string(name='EndTime', description='The time when the temporary upgrade ends.

Specify the time in the ISO 8601 standard in the YYYY-MM-DDThh:mm:ssZ format. The time must be in UTC.', example='2022-07-24T13:00:52Z', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model TempUpgradeCenBandwidthPackageSpecResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='DB0A026C-A8E5-40AB-977E-3A87DD78F694'),
}

model TempUpgradeCenBandwidthPackageSpecResponse = {
  headers: map[string]string(name='headers'),
  body: TempUpgradeCenBandwidthPackageSpecResponseBody(name='body'),
}

/**
  * Subscription bandwidth plans support temporary upgrades. You can increase the bandwidth limit of a bandwidth plan within a specified time window. This way, you can manage your bandwidth to handle traffic spikes in a more efficient manner.
  * The minimum time window for a temporary upgrade is 3 hours. The bandwidth plan is upgraded immediately after you complete the payment. The upgrade process does not interrupt workloads.
  * >  After the specified time window ends, the bandwidth limit of the subscription bandwidth plan is reset to the original value. If the bandwidth required by your workloads is higher than this value, packets may be discarded due to network traffic throttling. We recommend that you set a proper time window for the temporary upgrade and make sure that the bandwidth limit meets your business requirements.
  * *   The temporary upgrade feature is unavailable by default. If you need to use this feature, contact your account manager.
  * *   Expired subscription bandwidth plans and pay-as-you-go bandwidth plans do not support temporary upgrades.
  * *   **TempUpgradeCenBandwidthPackageSpec** is an asynchronous operation. After you send a request, the system returns a **request ID** and performs the operation in the system background. You can call the **DescribeCenBandwidthPackages** operation to query the specification of a bandwidth plan. If the maximum bandwidth value of the bandwidth plan is set to the specified value, the bandwidth plan is upgraded.
  *
 */
async function tempUpgradeCenBandwidthPackageSpec(request: TempUpgradeCenBandwidthPackageSpecRequest): TempUpgradeCenBandwidthPackageSpecResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TempUpgradeCenBandwidthPackageSpec', 'POST', '/', 'json', false, 'json', request);
}

model UnassociateCenBandwidthPackageRequest {
  cenBandwidthPackageId: string(name='CenBandwidthPackageId', description='The ID of the bandwidth plan.', example='cenbwp-4c2zaavbvh5****', position='Query'),
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-7qthudw0ll6j****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnassociateCenBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0C2EE7A8-74D4-4081-8236-CEBDE3BBCF50'),
}

model UnassociateCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateCenBandwidthPackageResponseBody(name='body'),
}

/**
  * No inter-region connections are configured in the bandwidth plan. For more information about how to delete inter-region connections, see [SetCenInterRegionBandwidthLimit](~~65942~~).
  *
 */
async function unassociateCenBandwidthPackage(request: UnassociateCenBandwidthPackageRequest): UnassociateCenBandwidthPackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnassociateCenBandwidthPackage', 'POST', '/', 'json', false, 'json', request);
}

model UnroutePrivateZoneInCenToVpcRequest {
  accessRegionId: string(name='AccessRegionId', description='The ID of the region where PrivateZone is accessed.

You can call the [DescribeChildInstanceRegions](~~132080~~) operation to query the most recent region list.', example='cn-hangzhou', position='Query'),
  cenId: string(name='CenId', description='The ID of the Cloud Enterprise Network (CEN) instance.', example='cen-7qthudw0ll6jmc****', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UnroutePrivateZoneInCenToVpcResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C0245BEF-52AC-44A8-A776-EF96FD26A5CA'),
}

model UnroutePrivateZoneInCenToVpcResponse = {
  headers: map[string]string(name='headers'),
  body: UnroutePrivateZoneInCenToVpcResponseBody(name='body'),
}

/**
  * ## Usage notes
  * **UnroutePrivateZoneInCenToVpc** is an asynchronous operation. After you send a request, the **request ID** is returned but the operation is still being performed in the system background. You can call **DescribeCenPrivateZoneRoutes** to query the status of PrivateZone.
  * *   If PrivateZone is in the **Deleting** state, access to PrivateZone is being disabled. In this case, you can query PrivateZone configurations but cannot perform other operations.
  * *   If configurations of access to PrivateZone cannot be found, access to PrivateZone is disabled.
  *
 */
async function unroutePrivateZoneInCenToVpc(request: UnroutePrivateZoneInCenToVpcRequest): UnroutePrivateZoneInCenToVpcResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnroutePrivateZoneInCenToVpc', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags. Valid values:

*   **true**: yes
*   **false** (default): no

> This parameter is valid only when the **TagKey.N** parameter is empty.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region where the resource is deployed.

You can ignore this parameter if ResourceType is set to Cen or BandwidthPackage.', example='cn-hangzhou', position='Query'),
  resourceId: [ string ](name='ResourceId', description='The ID of the resource. Valid values of **N**: **1** to **50**.', example='cen-7qthudw0ll6jmc****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', description='The resource type. Valid value:

**Cen**: Cloud Enterprise Network (CEN) instance

**BandwidthPackage**: bandwidth plan

**TransitRouter**: transit router

**TransitRouterVpcAttachment**: virtual private cloud (VPC) connection

**TransitRouterVbrAttachment**: virtual border router (VBR) connection

**TransitRouterPeerAttachment**: inter-region connection

**TransitRouterVpnAttachment**: VPN connection

**TransitRouterRouteTable**: route table

**Flowlog**: flow log

**TransitRouterMulticastDomain**: multicast domain', example='cen', position='Query'),
  tagKey?: [ string ](name='TagKey', description='The tag key.

The tag key cannot exceed 64 characters in length, and cannot start with `aliyun` or `acs:`. It cannot contain `http://` or `https://`.

If multiple tag keys are specified, the logical relation among these tag keys is **AND**. Valid values of **N**: **1** to **20**.', example='FinanceDept', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C46FF5A8-C5F0-4024-8262-B16B639225A0'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCenInterRegionTrafficQosPolicyAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='123e4567-e89b-12d3-a456-426655****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: checks the request but does not modify the name and description of the QoS policy. The system checks whether the required parameters are set, whether the formats of the values are valid, and the service limits. If the request fails the check, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): checks the request. If the request passes the check, the name and description of the QoS policy are modified.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficQosPolicyDescription?: string(name='TrafficQosPolicyDescription', description='The new description of the QoS policy.

The description must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The description must start with a letter.', example='desctest', position='Query'),
  trafficQosPolicyId: string(name='TrafficQosPolicyId', description='The ID of the QoS policy.', example='qos-eczzew0v1kzrb5****', position='Query'),
  trafficQosPolicyName?: string(name='TrafficQosPolicyName', description='The new name of the QoS policy.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='nametest', position='Query'),
}

model UpdateCenInterRegionTrafficQosPolicyAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='5B8465FF-E697-5D3D-AAD5-0B4EEADFDB27'),
}

model UpdateCenInterRegionTrafficQosPolicyAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCenInterRegionTrafficQosPolicyAttributeResponseBody(name='body'),
}

async function updateCenInterRegionTrafficQosPolicyAttribute(request: UpdateCenInterRegionTrafficQosPolicyAttributeRequest): UpdateCenInterRegionTrafficQosPolicyAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCenInterRegionTrafficQosPolicyAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCenInterRegionTrafficQosQueueAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that the value is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='123e4567-e89b-12d3-a456-426655****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to check the request without performing the operation. Valid values:

*   **true**: checks the request but does not modify the queue. The system checks whether the required parameters are set, whether the formats of the values are valid, and the service limits. If the request fails the check, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.
*   **false** (default): checks the request. If the request passes the check, the queue is modified.', example='false', position='Query'),
  dscps?: [ int32 ](name='Dscps', description='The differentiated services code point (DSCP) value of the packets to be matched by the queue. Valid values: **0** to **63**.

You can enter up to 20 DSCP values at a time.', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  qosQueueDescription?: string(name='QosQueueDescription', description='The new description of the queue.

The description must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The description must start with a letter.', example='desctest', position='Query'),
  qosQueueId: string(name='QosQueueId', description='The ID of the queue.', example='qos-queue-nv2vfzqkewhk4t****', position='Query'),
  qosQueueName?: string(name='QosQueueName', description='The new name of the queue.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='nametest', position='Query'),
  remainBandwidthPercent?: string(name='RemainBandwidthPercent', description='The percentage of the inter-region bandwidth that can be used by the queue.

Enter a number. You do not need to enter a percent sign (%).', example='1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateCenInterRegionTrafficQosQueueAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='6DF9A765-BCD2-5C7E-8C32-C35C8A361A39'),
}

model UpdateCenInterRegionTrafficQosQueueAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCenInterRegionTrafficQosQueueAttributeResponseBody(name='body'),
}

async function updateCenInterRegionTrafficQosQueueAttribute(request: UpdateCenInterRegionTrafficQosQueueAttributeRequest): UpdateCenInterRegionTrafficQosQueueAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCenInterRegionTrafficQosQueueAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTrafficMarkingPolicyAttributeRequest {
  addTrafficMatchRules?: [ 
    {
      dstCidr?: string(name='DstCidr', description='The destination CIDR block that is used to match packets.

The traffic classification rule matches the packets whose destination IP addresses fall within the specified destination CIDR block. If you do not set this parameter, packets are considered a match regardless of the destination IP address.

You can create up to 50 traffic classification rules at a time. You can specify a destination CIDR block for each traffic classification rule.', example='172.30.0.0/24'),
      dstPortRange?: [ int32 ](name='DstPortRange', description='The destination port range that is used to match packets. Valid values: **-1** and **1** to **65535**.

The traffic classification rule matches the packets whose destination ports fall within the destination port range. If you do not set this parameter, packets are considered a match regardless of the destination port.

You can specify at most two ports. Take note of the following rules:

*   If you enter only one port number such as 1, the system matches the packets whose destination port is port 1.
*   If you enter two port numbers such as 1 and 200, the system matches the packets whose destination ports fall between 1 and 200.
*   If you enter two port numbers and one of them is -1, the other port number must also be -1. In this case, packets are considered a match regardless of the destination port.

You can create up to 50 traffic classification rules at a time. You can specify a destination port range for each traffic classification rule.'),
      matchDscp?: int32(name='MatchDscp', description='The differentiated services code point (DSCP) value that is used to match packets. Valid values: **0** to **63**.

The traffic classification rule matches the packets that contain the specified DSCP value. If you do not set this parameter, packets are considered a match regardless of the DSCP value.

>  The DSCP value that you specify for this parameter is the DSCP value that packets carry before they are transmitted over the inter-region connection.

You can create up to 50 traffic classification rules at a time. You can specify a DSCP value for each traffic classification rule.', example='1'),
      protocol?: string(name='Protocol', description='The protocol that is used to match packets.

Valid values: **HTTP**, **HTTPS**, **TCP**, **UDP**, **SSH**, and **Telnet**. For more information, log on to the [Cloud Enterprise Network (CEN) console](https://cen.console.aliyun.com/cen/list).

You can create up to 50 traffic classification rules at a time. You can specify a protocol for each traffic classification rule.', example='UDP'),
      srcCidr?: string(name='SrcCidr', description='The source CIDR block that is used to match packets.

The traffic classification rule matches the packets whose source IP addresses fall within the specified source CIDR block. If you do not set this parameter, packets are considered a match regardless of the source IP address.

You can create up to 50 traffic classification rules at a time. You can specify a source CIDR block for each traffic classification rule.', example='10.128.32.0/19'),
      srcPortRange?: [ int32 ](name='SrcPortRange', description='The source port range that is used to match packets. Valid values: **-1** and **1** to **65535**.

The traffic classification rule matches the packets whose source ports fall within the source port range. If you do not set this parameter, packets are considered a match regardless of the source port.

You can specify at most two ports. Take note of the following rules:

*   If you enter only one port number such as 1, the system matches the packets whose source port is 1.
*   If you enter two port numbers such as 1 and 200, the system matches the packets whose source ports fall between 1 and 200.
*   If you enter two port numbers and one of them is -1, the other port number must also be -1. In this case, packets are considered a match regardless of the source port.

You can create up to 50 traffic classification rules at a time. You can specify a source port range for each traffic classification rule.'),
      trafficMatchRuleDescription?: string(name='TrafficMatchRuleDescription', description='The description of the traffic classification rule.

You can create up to 50 traffic classification rules at a time. You can specify a description for each traffic classification rule.

The description must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The description must start with a letter.', example='test1'),
      trafficMatchRuleName?: string(name='TrafficMatchRuleName', description='The name of the traffic classification rule.

You can create up to 50 traffic classification rules at a time. You can specify a name for each traffic classification rule.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='Guangzhou Testing'),
    }
  ](name='AddTrafficMatchRules', description='The traffic classification rules to be added to the traffic marking policy.', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The token can contain only ASCII characters and cannot exceed 64 characters in length.', example='123e4567-e89b-12d3-a456-426****', position='Query'),
  deleteTrafficMatchRules?: [ 
    {
      dstCidr?: string(name='DstCidr', description='The destination CIDR block that is used to match data packets.', example='192.168.200.3/32'),
      dstPortRange?: [ int32 ](name='DstPortRange', description='The destination port range that is used to match packets. Valid values: **-1** and **1** to **65535**.'),
      matchDscp?: int32(name='MatchDscp', description='The DSCP value that is used to match packets.', example='3'),
      protocol?: string(name='Protocol', description='The protocol that is used to match packets.

Valid values: **HTTP**, **HTTPS**, **TCP**, **UDP**, **SSH**, and **Telnet**. For more information, log on to the [Cloud Enterprise Network (CEN) console](https://cen.console.aliyun.com/cen/list).', example='TCP'),
      srcCidr?: string(name='SrcCidr', description='The source CIDR block that is used to match packets.', example='10.72.0.0/16'),
      srcPortRange?: [ int32 ](name='SrcPortRange', description='The source port range that is used to match packets. Valid values: **-1** and **1** to **65535**.'),
      trafficMatchRuleDescription?: string(name='TrafficMatchRuleDescription', description='The description of the traffic classification rule.', example='Hangzhou-to-Qingdao CAT'),
      trafficMatchRuleName?: string(name='TrafficMatchRuleName', description='The name of the traffic classification rule.', example='test'),
    }
  ](name='DeleteTrafficMatchRules', description='The traffic classification rules to be deleted from the traffic marking policy.', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: preforms a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  trafficMarkingPolicyDescription?: string(name='TrafficMarkingPolicyDescription', description='The new description of the traffic marking policy.

The description must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The description must start with a letter.', example='desctest', position='Query'),
  trafficMarkingPolicyId: string(name='TrafficMarkingPolicyId', description='The ID of the traffic marking policy.', example='tm-u9nxup5kww5po8****', position='Query'),
  trafficMarkingPolicyName?: string(name='TrafficMarkingPolicyName', description='The new name of the traffic marking policy.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='nametest', position='Query'),
}

model UpdateTrafficMarkingPolicyAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='60BB11B2-7BF4-54DC-BCC9-F706E1EB02AC'),
}

model UpdateTrafficMarkingPolicyAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTrafficMarkingPolicyAttributeResponseBody(name='body'),
}

async function updateTrafficMarkingPolicyAttribute(request: UpdateTrafficMarkingPolicyAttributeRequest): UpdateTrafficMarkingPolicyAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTrafficMarkingPolicyAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTransitRouterRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to precheck the request. Check items include permissions and the status of the specified cloud resources. Valid values:

*   **false**: sends the request. If the request passes the precheck, the information of the transit router is modified.
*   **true**: sends a request for precheck only. The information of the transit router is not modified after the request passes the precheck. If you use this value, the system checks the required parameters and the request syntax. If the request fails to pass the precheck, an error message is returned. If the request passes the check, the system returns the ID of the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region where the transit router is deployed.

You can call the [DescribeRegions](~~36063~~) operation to query the most recent region list.', example='cn-shanghai', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterDescription?: string(name='TransitRouterDescription', description='The description of the transit router.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='testdesc', position='Query'),
  transitRouterId: string(name='TransitRouterId', description='The ID of the transit router.', example='tr-uf654ttymmljlvh2x****', position='Query'),
  transitRouterName?: string(name='TransitRouterName', description='The name of the transit router.

The name must be 2 to 128 characters in length and can contain letters, digits, periods (.), underscores (\\_), and hyphens (-). The name must start with a letter but cannot start with `http://` or `https://`.', example='testname', position='Query'),
}

model UpdateTransitRouterResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='E9963DD7-998B-4F92-892D-8293CB49EE81'),
}

model UpdateTransitRouterResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterResponseBody(name='body'),
}

/**
  * **UpdateTransitRouter** is an asynchronous operation. After you send a request, the system returns the **request ID** but the operation is still being performed in the system background. You can call **ListTransitRouters** to query the status of a transit router.
  * *   If a transit router is in the **Modifying** state, the configuration of the transit router is being modified. You can query the transit router but cannot perform other operations.
  * *   If a transit router is in the **Active** state, the configuration of the transit router is modified.
  *
 */
async function updateTransitRouter(request: UpdateTransitRouterRequest): UpdateTransitRouterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTransitRouter', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTransitRouterPeerAttachmentAttributeRequest {
  autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled', description='Specifies whether to enable the local Enterprise Edition transit router to automatically advertise the routes of the inter-region connection to the peer transit router. Valid values:

*   **false** (default): no
*   **true**: yes', example='false', position='Query'),
  bandwidth?: int32(name='Bandwidth', description='The maximum bandwidth value of the inter-region connection. Unit: Mbit/s.

*   This parameter specifies the maximum bandwidth value for the inter-region connection if you set **BandwidthType** to **BandwidthPackage**.
*   This parameter specifies the bandwidth throttling threshold for the inter-region connection if you set **BandwidthType** to **DataTransfer**.', example='2', minimum=0, maximum=100000000, position='Query'),
  bandwidthType?: string(name='BandwidthType', description='The bandwidth allocation method. Valid values:

*   **BandwidthPackage**: allocates bandwidth from a bandwidth plan.
*   **DataTransfer**: bandwidth is billed based on the pay-by-data-transfer metering method.', example='BandwidthPackage', position='Query'),
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId', description='The ID of the bandwidth plan that is used to allocate bandwidth to the inter-region connection.

**

If you set **BandwidthType** to DataTransfer, you do not need to set this parameter.', example='cenbwp-3xrxupouolw5ou****', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run to check information such as the permissions and the instance status. Valid values:

*   **false** (default): performs a dry run and sends the request.
*   **true**: performs a dry run. The system checks the required parameters and request syntax. If the request fails the dry run, an error message is returned. If the request passes the dry run, the system returns the ID of the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', description='The new description of the inter-region connection.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='testdesc', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the inter-region connection.', example='tr-attach-ft94dcrbc3e5taun3x', position='Query'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', description='The new name of the inter-region connection.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='testname', position='Query'),
}

model UpdateTransitRouterPeerAttachmentAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='A01FEDD7-7D69-4EB3-996D-CF79F6F885CA'),
}

model UpdateTransitRouterPeerAttachmentAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterPeerAttachmentAttributeResponseBody(name='body'),
}

/**
  * **UpdateTransitRouterPeerAttachmentAttribute** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the system background. You can call the **ListTransitRouterPeerAttachments** operation to query the status of an inter-region connection.
  * *   If an inter-region connection is in the **Modifying** state, the inter-region connection is being modified. You can query the inter-region connection but cannot perform other operations.
  * *   If an inter-region connection is in the **Attached** state, the inter-region connection is modified.
  *
 */
async function updateTransitRouterPeerAttachmentAttribute(request: UpdateTransitRouterPeerAttachmentAttributeRequest): UpdateTransitRouterPeerAttachmentAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTransitRouterPeerAttachmentAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTransitRouterRouteEntryRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a precheck to check information such as the permissions and instance status. Valid values:

*   **false** (default): sends the request. If the request passes the precheck, the name and description of the route are modified.
*   **true**: prechecks the request but does not modify the name or description of the transit router. If you use this value, the system checks the required parameters and the request syntax. If the request fails to pass the precheck, an error message is returned. If the request passes the check, the `DryRunOperation` error code is returned.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterRouteEntryDescription?: string(name='TransitRouterRouteEntryDescription', description='The new description of the route.

The description must be 2 to 256 characters in length, and can contain letters, digits, and the following special characters: , . ; / @ \\_ -. You can also leave the description empty.', example='testdesc', position='Query'),
  transitRouterRouteEntryId: string(name='TransitRouterRouteEntryId', description='The ID of the route entry.', example='rte-ksssq7kto4wfdx****', position='Query'),
  transitRouterRouteEntryName?: string(name='TransitRouterRouteEntryName', description='The new name of the route.

The name must be 1 to 128 characters in length, and can contain letters, digits, and the following special characters: , . ; / @ \\_ -. You can also leave the name empty.', example='testname', position='Query'),
}

model UpdateTransitRouterRouteEntryResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2D69CCEA-42D0-48B2-8C9A-9BB207F76D6E'),
}

model UpdateTransitRouterRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterRouteEntryResponseBody(name='body'),
}

async function updateTransitRouterRouteEntry(request: UpdateTransitRouterRouteEntryRequest): UpdateTransitRouterRouteEntryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTransitRouterRouteEntry', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTransitRouterRouteTableRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among all requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Default values:

*   **false** (default): performs a dry run and sends the request.
*   **true**: performs a dry run. The system checks the required parameters and the request syntax. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  routeTableOptions?: {
    multiRegionECMP?: string(name='MultiRegionECMP', example='disable'),
  }(name='RouteTableOptions', position='Query'),
  transitRouterRouteTableDescription?: string(name='TransitRouterRouteTableDescription', description='The description of the route table.

The description must be 2 to 256 characters in length, and can contain letters, digits, and the following special characters: , . ; / @ \\_ -. You can also leave the description empty.', example='testdesc', position='Query'),
  transitRouterRouteTableId: string(name='TransitRouterRouteTableId', description='The ID of the route table of the Enterprise Edition transit router.', example='vtb-bp1dudbh2d5na6b50****', position='Query'),
  transitRouterRouteTableName?: string(name='TransitRouterRouteTableName', description='The name of the route table.

The name must be 1 to 128 characters in length, and can contain letters, digits, and the following special characters: , . ; / @ \\_ -. You can also leave the name empty.', example='testname', position='Query'),
}

model UpdateTransitRouterRouteTableResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9D6D5548-F271-41C4-AA9F-A62F5599085B'),
}

model UpdateTransitRouterRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterRouteTableResponseBody(name='body'),
}

async function updateTransitRouterRouteTable(request: UpdateTransitRouterRouteTableRequest): UpdateTransitRouterRouteTableResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTransitRouterRouteTable', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTransitRouterVbrAttachmentAttributeRequest {
  autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled', description='Specifies whether to allow the Enterprise Edition transit router to automatically advertise routes to the VBR. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a precheck to check information such as the permissions and instance status. Valid values:

*   **false** (default): sends a request. If the request passes the precheck, the name and description of the VBR connection are modified.
*   **true**: sends a request for precheck only. The name and description of the VBR connection are not modified after the request passes the precheck. If you use this value, the system checks the required parameters and the request syntax. If the request fails to pass the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', description='The new description of the VBR connection.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='testdesc', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the VBR connection.', example='tr-attach-oyf70wfuorwx87****', position='Query'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', description='The new name of the VBR connection.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). The name must start with a letter.', example='testname', position='Query'),
}

model UpdateTransitRouterVbrAttachmentAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='91B36DC3-FF8A-45C3-AC1E-456B1789136D'),
}

model UpdateTransitRouterVbrAttachmentAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterVbrAttachmentAttributeResponseBody(name='body'),
}

/**
  * ## Usage notes
  * **UpdateTransitRouterVbrAttachmentAttribute** is an asynchronous operation. After you send a request, the system returns the **request ID** but the operation is still being performed in the system background. You can call **ListTransitRouterVbrAttachments** to query the status of a VBR connection.
  * *   If a VBR connection is in the **Modifying** state, the VBR connection is being modified. You can query the VBR connection but cannot perform other operations.
  * *   If the VBR connection is in the **Attached** state, the VBR connection is modified.
  *
 */
async function updateTransitRouterVbrAttachmentAttribute(request: UpdateTransitRouterVbrAttachmentAttributeRequest): UpdateTransitRouterVbrAttachmentAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTransitRouterVbrAttachmentAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTransitRouterVpcAttachmentAttributeRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. The client token can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** for each API request may be different.', example='02fb3da4-130e-11e9-8e44-001****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Default values:

*   **false** (default): performs a dry run and sends the request.
*   **true**: performs a dry run. The system checks the required parameters and request syntax. If the request fails the dry run, an error message is returned. If the request passes the dry run, the system returns the ID of the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', description='The description of the VPC connection.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='testdesc', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the VPC connection.', example='tr-attach-nls9fzkfat8934****', position='Query'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', description='The name of the VPC connection.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='testname', position='Query'),
}

model UpdateTransitRouterVpcAttachmentAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='7E61D334-4025-41EF-9145-FC327B35301D'),
}

model UpdateTransitRouterVpcAttachmentAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterVpcAttachmentAttributeResponseBody(name='body'),
}

/**
  * **UpdateTransitRouterVpcAttachmentAttribute** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the **ListTransitRouterVpcAttachments** operation to query the status of a VPC connection.
  * *   If a VPC connection is in the **Modifying** state, the VPC connection is being modified. You can query the VPC connection but cannot perform other operations.
  * *   If a VPC connection is in the **Attached** state, the VPC connection is modified.
  *
 */
async function updateTransitRouterVpcAttachmentAttribute(request: UpdateTransitRouterVpcAttachmentAttributeRequest): UpdateTransitRouterVpcAttachmentAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTransitRouterVpcAttachmentAttribute', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTransitRouterVpcAttachmentZonesRequest {
  addZoneMappings?: [ 
    {
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch that you want to add to the VPC connection.

You can specify at most 10 vSwitches in each call.

*   If the VPC connection belongs to the current Alibaba Cloud account, you can call the [DescribeVSwitches](~~35748~~) operation to query the IDs of the vSwitches and zones of the VPC.
*   If the VPC connection belongs to another Alibaba Cloud account, you can call the [ListGrantVSwitchesToCen](~~427599~~) operation to query the IDs of the vSwitches and zones of the VPC.', example='vsw-wz988dda8ldm4uvmx****'),
      zoneId?: string(name='ZoneId', description='The ID of the zone where the vSwitch that you want to add to the VPC connection is deployed.

You can specify at most 10 vSwitches in each call.', example='cn-hangzhou-h'),
    }
  ](name='AddZoneMappings', description='The zones and vSwitches that you want to add to the VPC connection.', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must ensure that it is unique among all requests. The token can contain only ASCII characters.

>  If you do not set this parameter, ClientToken is set to the value of RequestId. The value of RequestId may be different for each request.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether to perform a dry run. Valid values:

*   **true**: performs a dry run. The system checks the required parameters, request syntax, and limits. If the request fails the dry run, an error message is returned. If the request passes the dry run, the `DryRunOperation` error code is returned.
*   **false** (default): performs a dry run and sends the request.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  removeZoneMappings?: [ 
    {
      vSwitchId?: string(name='VSwitchId', description='The ID of the vSwitch that you want to remove from the VPC connection.

You can remove at most 10 vSwitches from a VPC in each call.', example='vsw-wz9f5izl6wshndmta****'),
      zoneId?: string(name='ZoneId', description='The ID of the zone where the vSwitch that you want to remove from the VPC connection is deployed.

You can remove at most 10 vSwitches from a VPC in each call.', example='cn-hangzhou-i'),
    }
  ](name='RemoveZoneMappings', description='The zones and vSwitches that you want to remove from the VPC connection.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the VPC connection.', example='tr-attach-9bbqyygouv4cpn****', position='Query'),
}

model UpdateTransitRouterVpcAttachmentZonesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='595AE52F-49FF-5788-A677-0DD1467941A1'),
}

model UpdateTransitRouterVpcAttachmentZonesResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterVpcAttachmentZonesResponseBody(name='body'),
}

/**
  * *   When you add a zone and a vSwitch for a VPC connection, make sure that the vSwitch has at least one idle IP address. When you modify the zones and vSwitches of a VPC connection, the Enterprise Edition transit router creates an elastic network interface (ENI) in the vSwitch. The ENI occupies one IP address in the vSwitch. The ENI forwards traffic between the VPC and the Enterprise Edition transit router.
  * *   **UpdateTransitRouterVpcAttachmentZones** is an asynchronous operation. After you send a request, the system returns a **request ID** and runs the task in the background. You can call the **ListTransitRouterVpcAttachments** operation to query the status of a VPC connection.
  *     *   If a VPC connection is in the **Modifying** state, the VPC connection is being modified. You can query the VPC connection but cannot perform other operations.
  *     *   If a VPC connection is in the **Attached** state, the VPC connection is modified.
  *
 */
async function updateTransitRouterVpcAttachmentZones(request: UpdateTransitRouterVpcAttachmentZonesRequest): UpdateTransitRouterVpcAttachmentZonesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTransitRouterVpcAttachmentZones', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTransitRouterVpnAttachmentAttributeRequest {
  autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled', description='Specifies whether to allow the transit router to automatically advertise routes to the IPsec connection. Valid values:

*   **true**: yes
*   **false**: no', example='true', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.

You can use the client to generate the value, but you must make sure that it is unique among different requests. ClientToken can contain only ASCII characters.

>  If you do not set this parameter, **ClientToken** is set to the value of **RequestId**. The value of **RequestId** may be different for each API request.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  dryRun?: boolean(name='DryRun', description='Specifies whether only to precheck the request. Valid values:

*   **true**: prechecks the request but does not modify the configurations. The system checks the required parameters, request syntax, and limits. If the request fails the precheck, an error message is returned. If the request passes the precheck, the `DryRunOperation` error code is returned.
*   **false** (default): checks the request. If the request passes the check, the configurations are modified.', example='false', position='Query'),
  ownerAccount?: string(name='OwnerAccount', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription', description='The new description of the VPN connection.

The description must be 2 to 256 characters in length. The description must start with a letter but cannot start with `http://` or `https://`.', example='desctest', position='Query'),
  transitRouterAttachmentId: string(name='TransitRouterAttachmentId', description='The ID of the VPN connection.', example='tr-attach-a6p8voaodog5c0****', position='Query'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName', description='The name of the VPN connection.

The name must be 2 to 128 characters in length, and can contain letters, digits, underscores (\\_), and hyphens (-). It must start with a letter.', example='nametest', position='Query'),
}

model UpdateTransitRouterVpnAttachmentAttributeResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='1AB038F2-96E5-560B-9F6E-734311D466FA'),
}

model UpdateTransitRouterVpnAttachmentAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterVpnAttachmentAttributeResponseBody(name='body'),
}

async function updateTransitRouterVpnAttachmentAttribute(request: UpdateTransitRouterVpnAttachmentAttributeRequest): UpdateTransitRouterVpnAttachmentAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTransitRouterVpnAttachmentAttribute', 'POST', '/', 'json', false, 'json', request);
}

model WithdrawPublishedRouteEntriesRequest {
  cenId: string(name='CenId', description='The ID of the CEN instance.', example='cen-sxjfjkjfkjfiein****', position='Query'),
  childInstanceId: string(name='ChildInstanceId', description='The ID of the attached network instance.', example='vpc-rj9gt5nll27onu7****', position='Query'),
  childInstanceRegionId: string(name='ChildInstanceRegionId', description='The ID of the region where the attached network instance is created.', example='cn-hangzhou', position='Query'),
  childInstanceRouteTableId: string(name='ChildInstanceRouteTableId', description='The ID of the route table of the attached network instance.', example='vtb-bp174d1gje79u1g4t****', position='Query'),
  childInstanceType: string(name='ChildInstanceType', description='The type of the attached network instance.

Set the value to **VPC**, which indicates a virtual private cloud (VPC).', example='VPC', position='Query'),
  destinationCidrBlock: string(name='DestinationCidrBlock', description='The destination CIDR block of the route that you want to withdraw.', example='172.XX.XX.0/24', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model WithdrawPublishedRouteEntriesResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='FBDB18D8-E91E-4978-8D6C-6E2E3EE10133'),
}

model WithdrawPublishedRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: WithdrawPublishedRouteEntriesResponseBody(name='body'),
}

async function withdrawPublishedRouteEntries(request: WithdrawPublishedRouteEntriesRequest): WithdrawPublishedRouteEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'WithdrawPublishedRouteEntries', 'POST', '/', 'json', false, 'json', request);
}

