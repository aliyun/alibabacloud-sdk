/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('cbn', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ActiveFlowLogRequest {
  cenId?: string(name='CenId'),
  clientToken?: string(name='ClientToken'),
  flowLogId?: string(name='FlowLogId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ActiveFlowLogResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ActiveFlowLogResponse = {
  headers: map[string]string(name='headers'),
  body: ActiveFlowLogResponseBody(name='body'),
}

async function activeFlowLogWithOptions(request: ActiveFlowLogRequest, runtime: Util.RuntimeOptions): ActiveFlowLogResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ClientToken'] = request.clientToken;
  query['FlowLogId'] = request.flowLogId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActiveFlowLog',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activeFlowLog(request: ActiveFlowLogRequest): ActiveFlowLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return activeFlowLogWithOptions(request, runtime);
}

model AddTraficMatchRuleToTrafficMarkingPolicyRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMarkingPolicyId?: string(name='TrafficMarkingPolicyId'),
  trafficMatchRules?: [ 
    {
      dstCidr?: string(name='DstCidr'),
      dstPortRange?: [ int32 ](name='DstPortRange'),
      matchDscp?: int32(name='MatchDscp'),
      protocol?: string(name='Protocol'),
      srcCidr?: string(name='SrcCidr'),
      srcPortRange?: [ int32 ](name='SrcPortRange'),
      trafficMatchRuleDescription?: string(name='TrafficMatchRuleDescription'),
      trafficMatchRuleName?: string(name='TrafficMatchRuleName'),
    }
  ](name='TrafficMatchRules'),
}

model AddTraficMatchRuleToTrafficMarkingPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddTraficMatchRuleToTrafficMarkingPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: AddTraficMatchRuleToTrafficMarkingPolicyResponseBody(name='body'),
}

async function addTraficMatchRuleToTrafficMarkingPolicyWithOptions(request: AddTraficMatchRuleToTrafficMarkingPolicyRequest, runtime: Util.RuntimeOptions): AddTraficMatchRuleToTrafficMarkingPolicyResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TrafficMarkingPolicyId'] = request.trafficMarkingPolicyId;
  query['TrafficMatchRules'] = request.trafficMatchRules;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddTraficMatchRuleToTrafficMarkingPolicy',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addTraficMatchRuleToTrafficMarkingPolicy(request: AddTraficMatchRuleToTrafficMarkingPolicyRequest): AddTraficMatchRuleToTrafficMarkingPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return addTraficMatchRuleToTrafficMarkingPolicyWithOptions(request, runtime);
}

model AssociateCenBandwidthPackageRequest {
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
  cenId?: string(name='CenId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AssociateCenBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateCenBandwidthPackageResponseBody(name='body'),
}

async function associateCenBandwidthPackageWithOptions(request: AssociateCenBandwidthPackageRequest, runtime: Util.RuntimeOptions): AssociateCenBandwidthPackageResponse {
  Util.validateModel(request);
  var query = {};
  query['CenBandwidthPackageId'] = request.cenBandwidthPackageId;
  query['CenId'] = request.cenId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateCenBandwidthPackage',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateCenBandwidthPackage(request: AssociateCenBandwidthPackageRequest): AssociateCenBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateCenBandwidthPackageWithOptions(request, runtime);
}

model AssociateTransitRouterAttachmentWithRouteTableRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
}

model AssociateTransitRouterAttachmentWithRouteTableResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateTransitRouterAttachmentWithRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateTransitRouterAttachmentWithRouteTableResponseBody(name='body'),
}

async function associateTransitRouterAttachmentWithRouteTableWithOptions(request: AssociateTransitRouterAttachmentWithRouteTableRequest, runtime: Util.RuntimeOptions): AssociateTransitRouterAttachmentWithRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterRouteTableId'] = request.transitRouterRouteTableId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AssociateTransitRouterAttachmentWithRouteTable',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function associateTransitRouterAttachmentWithRouteTable(request: AssociateTransitRouterAttachmentWithRouteTableRequest): AssociateTransitRouterAttachmentWithRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateTransitRouterAttachmentWithRouteTableWithOptions(request, runtime);
}

model AttachCenChildInstanceRequest {
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceOwnerId?: long(name='ChildInstanceOwnerId'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceType?: string(name='ChildInstanceType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AttachCenChildInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachCenChildInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: AttachCenChildInstanceResponseBody(name='body'),
}

async function attachCenChildInstanceWithOptions(request: AttachCenChildInstanceRequest, runtime: Util.RuntimeOptions): AttachCenChildInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ChildInstanceId'] = request.childInstanceId;
  query['ChildInstanceOwnerId'] = request.childInstanceOwnerId;
  query['ChildInstanceRegionId'] = request.childInstanceRegionId;
  query['ChildInstanceType'] = request.childInstanceType;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AttachCenChildInstance',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function attachCenChildInstance(request: AttachCenChildInstanceRequest): AttachCenChildInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachCenChildInstanceWithOptions(request, runtime);
}

model CheckTransitRouterServiceRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CheckTransitRouterServiceResponseBody = {
  enabled?: string(name='Enabled'),
  requestId?: string(name='RequestId'),
}

model CheckTransitRouterServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CheckTransitRouterServiceResponseBody(name='body'),
}

async function checkTransitRouterServiceWithOptions(request: CheckTransitRouterServiceRequest, runtime: Util.RuntimeOptions): CheckTransitRouterServiceResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckTransitRouterService',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkTransitRouterService(request: CheckTransitRouterServiceRequest): CheckTransitRouterServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkTransitRouterServiceWithOptions(request, runtime);
}

model CreateCenRequest {
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  protectionLevel?: string(name='ProtectionLevel'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateCenResponseBody = {
  cenId?: string(name='CenId'),
  requestId?: string(name='RequestId'),
}

model CreateCenResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenResponseBody(name='body'),
}

async function createCenWithOptions(request: CreateCenRequest, runtime: Util.RuntimeOptions): CreateCenResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['Description'] = request.description;
  query['Name'] = request.name;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ProtectionLevel'] = request.protectionLevel;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCen',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCen(request: CreateCenRequest): CreateCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCenWithOptions(request, runtime);
}

model CreateCenBandwidthPackageRequest {
  autoPay?: boolean(name='AutoPay'),
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewDuration?: int32(name='AutoRenewDuration'),
  bandwidth?: int32(name='Bandwidth'),
  bandwidthPackageChargeType?: string(name='BandwidthPackageChargeType'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  geographicRegionAId?: string(name='GeographicRegionAId'),
  geographicRegionBId?: string(name='GeographicRegionBId'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period'),
  pricingCycle?: string(name='PricingCycle'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateCenBandwidthPackageResponseBody = {
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
  cenBandwidthPackageOrderId?: string(name='CenBandwidthPackageOrderId'),
  requestId?: string(name='RequestId'),
}

model CreateCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenBandwidthPackageResponseBody(name='body'),
}

async function createCenBandwidthPackageWithOptions(request: CreateCenBandwidthPackageRequest, runtime: Util.RuntimeOptions): CreateCenBandwidthPackageResponse {
  Util.validateModel(request);
  var query = {};
  query['AutoPay'] = request.autoPay;
  query['AutoRenew'] = request.autoRenew;
  query['AutoRenewDuration'] = request.autoRenewDuration;
  query['Bandwidth'] = request.bandwidth;
  query['BandwidthPackageChargeType'] = request.bandwidthPackageChargeType;
  query['ClientToken'] = request.clientToken;
  query['Description'] = request.description;
  query['GeographicRegionAId'] = request.geographicRegionAId;
  query['GeographicRegionBId'] = request.geographicRegionBId;
  query['Name'] = request.name;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['Period'] = request.period;
  query['PricingCycle'] = request.pricingCycle;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCenBandwidthPackage',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCenBandwidthPackage(request: CreateCenBandwidthPackageRequest): CreateCenBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCenBandwidthPackageWithOptions(request, runtime);
}

model CreateCenChildInstanceRouteEntryToAttachmentRequest {
  cenId?: string(name='CenId'),
  clientToken?: string(name='ClientToken'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
}

model CreateCenChildInstanceRouteEntryToAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCenChildInstanceRouteEntryToAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenChildInstanceRouteEntryToAttachmentResponseBody(name='body'),
}

async function createCenChildInstanceRouteEntryToAttachmentWithOptions(request: CreateCenChildInstanceRouteEntryToAttachmentRequest, runtime: Util.RuntimeOptions): CreateCenChildInstanceRouteEntryToAttachmentResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ClientToken'] = request.clientToken;
  query['DestinationCidrBlock'] = request.destinationCidrBlock;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['RouteTableId'] = request.routeTableId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCenChildInstanceRouteEntryToAttachment',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCenChildInstanceRouteEntryToAttachment(request: CreateCenChildInstanceRouteEntryToAttachmentRequest): CreateCenChildInstanceRouteEntryToAttachmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCenChildInstanceRouteEntryToAttachmentWithOptions(request, runtime);
}

model CreateCenChildInstanceRouteEntryToCenRequest {
  cenId?: string(name='CenId'),
  childInstanceAliUid?: long(name='ChildInstanceAliUid'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceType?: string(name='ChildInstanceType'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId'),
}

model CreateCenChildInstanceRouteEntryToCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCenChildInstanceRouteEntryToCenResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenChildInstanceRouteEntryToCenResponseBody(name='body'),
}

async function createCenChildInstanceRouteEntryToCenWithOptions(request: CreateCenChildInstanceRouteEntryToCenRequest, runtime: Util.RuntimeOptions): CreateCenChildInstanceRouteEntryToCenResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ChildInstanceAliUid'] = request.childInstanceAliUid;
  query['ChildInstanceId'] = request.childInstanceId;
  query['ChildInstanceRegionId'] = request.childInstanceRegionId;
  query['ChildInstanceType'] = request.childInstanceType;
  query['DestinationCidrBlock'] = request.destinationCidrBlock;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['RouteTableId'] = request.routeTableId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCenChildInstanceRouteEntryToCen',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCenChildInstanceRouteEntryToCen(request: CreateCenChildInstanceRouteEntryToCenRequest): CreateCenChildInstanceRouteEntryToCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCenChildInstanceRouteEntryToCenWithOptions(request, runtime);
}

model CreateCenInterRegionTrafficQosPolicyRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficQosPolicyDescription?: string(name='TrafficQosPolicyDescription'),
  trafficQosPolicyName?: string(name='TrafficQosPolicyName'),
  trafficQosQueues?: [ 
    {
      dscps?: [ int32 ](name='Dscps'),
      qosQueueDescription?: string(name='QosQueueDescription'),
      qosQueueName?: string(name='QosQueueName'),
      remainBandwidthPercent?: string(name='RemainBandwidthPercent'),
    }
  ](name='TrafficQosQueues'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterId?: string(name='TransitRouterId'),
}

model CreateCenInterRegionTrafficQosPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  trafficQosPolicyId?: string(name='TrafficQosPolicyId'),
}

model CreateCenInterRegionTrafficQosPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenInterRegionTrafficQosPolicyResponseBody(name='body'),
}

async function createCenInterRegionTrafficQosPolicyWithOptions(request: CreateCenInterRegionTrafficQosPolicyRequest, runtime: Util.RuntimeOptions): CreateCenInterRegionTrafficQosPolicyResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TrafficQosPolicyDescription'] = request.trafficQosPolicyDescription;
  query['TrafficQosPolicyName'] = request.trafficQosPolicyName;
  query['TrafficQosQueues'] = request.trafficQosQueues;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterId'] = request.transitRouterId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCenInterRegionTrafficQosPolicy',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCenInterRegionTrafficQosPolicy(request: CreateCenInterRegionTrafficQosPolicyRequest): CreateCenInterRegionTrafficQosPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCenInterRegionTrafficQosPolicyWithOptions(request, runtime);
}

model CreateCenRouteMapRequest {
  asPathMatchMode?: string(name='AsPathMatchMode'),
  cenId?: string(name='CenId'),
  cenRegionId?: string(name='CenRegionId'),
  cidrMatchMode?: string(name='CidrMatchMode'),
  communityMatchMode?: string(name='CommunityMatchMode'),
  communityOperateMode?: string(name='CommunityOperateMode'),
  description?: string(name='Description'),
  destinationChildInstanceTypes?: [ string ](name='DestinationChildInstanceTypes'),
  destinationCidrBlocks?: [ string ](name='DestinationCidrBlocks'),
  destinationInstanceIds?: [ string ](name='DestinationInstanceIds'),
  destinationInstanceIdsReverseMatch?: boolean(name='DestinationInstanceIdsReverseMatch'),
  destinationRouteTableIds?: [ string ](name='DestinationRouteTableIds'),
  mapResult?: string(name='MapResult'),
  matchAsns?: [ long ](name='MatchAsns'),
  matchCommunitySet?: [ string ](name='MatchCommunitySet'),
  nextPriority?: int32(name='NextPriority'),
  operateCommunitySet?: [ string ](name='OperateCommunitySet'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  preference?: int32(name='Preference'),
  prependAsPath?: [ long ](name='PrependAsPath'),
  priority?: int32(name='Priority'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTypes?: [ string ](name='RouteTypes'),
  sourceChildInstanceTypes?: [ string ](name='SourceChildInstanceTypes'),
  sourceInstanceIds?: [ string ](name='SourceInstanceIds'),
  sourceInstanceIdsReverseMatch?: boolean(name='SourceInstanceIdsReverseMatch'),
  sourceRegionIds?: [ string ](name='SourceRegionIds'),
  sourceRouteTableIds?: [ string ](name='SourceRouteTableIds'),
  transmitDirection?: string(name='TransmitDirection'),
}

model CreateCenRouteMapResponseBody = {
  requestId?: string(name='RequestId'),
  routeMapId?: string(name='RouteMapId'),
}

model CreateCenRouteMapResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenRouteMapResponseBody(name='body'),
}

async function createCenRouteMapWithOptions(request: CreateCenRouteMapRequest, runtime: Util.RuntimeOptions): CreateCenRouteMapResponse {
  Util.validateModel(request);
  var query = {};
  query['AsPathMatchMode'] = request.asPathMatchMode;
  query['CenId'] = request.cenId;
  query['CenRegionId'] = request.cenRegionId;
  query['CidrMatchMode'] = request.cidrMatchMode;
  query['CommunityMatchMode'] = request.communityMatchMode;
  query['CommunityOperateMode'] = request.communityOperateMode;
  query['Description'] = request.description;
  query['DestinationChildInstanceTypes'] = request.destinationChildInstanceTypes;
  query['DestinationCidrBlocks'] = request.destinationCidrBlocks;
  query['DestinationInstanceIds'] = request.destinationInstanceIds;
  query['DestinationInstanceIdsReverseMatch'] = request.destinationInstanceIdsReverseMatch;
  query['DestinationRouteTableIds'] = request.destinationRouteTableIds;
  query['MapResult'] = request.mapResult;
  query['MatchAsns'] = request.matchAsns;
  query['MatchCommunitySet'] = request.matchCommunitySet;
  query['NextPriority'] = request.nextPriority;
  query['OperateCommunitySet'] = request.operateCommunitySet;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['Preference'] = request.preference;
  query['PrependAsPath'] = request.prependAsPath;
  query['Priority'] = request.priority;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['RouteTypes'] = request.routeTypes;
  query['SourceChildInstanceTypes'] = request.sourceChildInstanceTypes;
  query['SourceInstanceIds'] = request.sourceInstanceIds;
  query['SourceInstanceIdsReverseMatch'] = request.sourceInstanceIdsReverseMatch;
  query['SourceRegionIds'] = request.sourceRegionIds;
  query['SourceRouteTableIds'] = request.sourceRouteTableIds;
  query['TransmitDirection'] = request.transmitDirection;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCenRouteMap',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCenRouteMap(request: CreateCenRouteMapRequest): CreateCenRouteMapResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCenRouteMapWithOptions(request, runtime);
}

model CreateFlowlogRequest {
  cenId?: string(name='CenId'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  flowLogName?: string(name='FlowLogName'),
  logStoreName?: string(name='LogStoreName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  projectName?: string(name='ProjectName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateFlowlogResponseBody = {
  flowLogId?: string(name='FlowLogId'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model CreateFlowlogResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowlogResponseBody(name='body'),
}

async function createFlowlogWithOptions(request: CreateFlowlogRequest, runtime: Util.RuntimeOptions): CreateFlowlogResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ClientToken'] = request.clientToken;
  query['Description'] = request.description;
  query['FlowLogName'] = request.flowLogName;
  query['LogStoreName'] = request.logStoreName;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ProjectName'] = request.projectName;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFlowlog',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createFlowlog(request: CreateFlowlogRequest): CreateFlowlogResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFlowlogWithOptions(request, runtime);
}

model CreateTrafficMarkingPolicyRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  markingDscp?: int32(name='MarkingDscp'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  priority?: int32(name='Priority'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMarkingPolicyDescription?: string(name='TrafficMarkingPolicyDescription'),
  trafficMarkingPolicyName?: string(name='TrafficMarkingPolicyName'),
  trafficMatchRules?: [ 
    {
      dstCidr?: string(name='DstCidr'),
      dstPortRange?: [ int32 ](name='DstPortRange'),
      matchDscp?: int32(name='MatchDscp'),
      protocol?: string(name='Protocol'),
      srcCidr?: string(name='SrcCidr'),
      srcPortRange?: [ int32 ](name='SrcPortRange'),
      trafficMatchRuleDescription?: string(name='TrafficMatchRuleDescription'),
      trafficMatchRuleName?: string(name='TrafficMatchRuleName'),
    }
  ](name='TrafficMatchRules'),
  transitRouterId?: string(name='TransitRouterId'),
}

model CreateTrafficMarkingPolicyResponseBody = {
  requestId?: string(name='RequestId'),
  trafficMarkingPolicyId?: string(name='TrafficMarkingPolicyId'),
}

model CreateTrafficMarkingPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTrafficMarkingPolicyResponseBody(name='body'),
}

async function createTrafficMarkingPolicyWithOptions(request: CreateTrafficMarkingPolicyRequest, runtime: Util.RuntimeOptions): CreateTrafficMarkingPolicyResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['MarkingDscp'] = request.markingDscp;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['Priority'] = request.priority;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TrafficMarkingPolicyDescription'] = request.trafficMarkingPolicyDescription;
  query['TrafficMarkingPolicyName'] = request.trafficMarkingPolicyName;
  query['TrafficMatchRules'] = request.trafficMatchRules;
  query['TransitRouterId'] = request.transitRouterId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTrafficMarkingPolicy',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTrafficMarkingPolicy(request: CreateTrafficMarkingPolicyRequest): CreateTrafficMarkingPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTrafficMarkingPolicyWithOptions(request, runtime);
}

model CreateTransitRouterRequest {
  cenId?: string(name='CenId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterDescription?: string(name='TransitRouterDescription'),
  transitRouterName?: string(name='TransitRouterName'),
}

model CreateTransitRouterResponseBody = {
  requestId?: string(name='RequestId'),
  transitRouterId?: string(name='TransitRouterId'),
}

model CreateTransitRouterResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterResponseBody(name='body'),
}

async function createTransitRouterWithOptions(request: CreateTransitRouterRequest, runtime: Util.RuntimeOptions): CreateTransitRouterResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterDescription'] = request.transitRouterDescription;
  query['TransitRouterName'] = request.transitRouterName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTransitRouter',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTransitRouter(request: CreateTransitRouterRequest): CreateTransitRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTransitRouterWithOptions(request, runtime);
}

model CreateTransitRouterPeerAttachmentRequest {
  autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled'),
  bandwidth?: int32(name='Bandwidth'),
  bandwidthType?: string(name='BandwidthType'),
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
  cenId?: string(name='CenId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  peerTransitRouterId?: string(name='PeerTransitRouterId'),
  peerTransitRouterRegionId?: string(name='PeerTransitRouterRegionId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName'),
  transitRouterId?: string(name='TransitRouterId'),
}

model CreateTransitRouterPeerAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
}

model CreateTransitRouterPeerAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterPeerAttachmentResponseBody(name='body'),
}

async function createTransitRouterPeerAttachmentWithOptions(request: CreateTransitRouterPeerAttachmentRequest, runtime: Util.RuntimeOptions): CreateTransitRouterPeerAttachmentResponse {
  Util.validateModel(request);
  var query = {};
  query['AutoPublishRouteEnabled'] = request.autoPublishRouteEnabled;
  query['Bandwidth'] = request.bandwidth;
  query['BandwidthType'] = request.bandwidthType;
  query['CenBandwidthPackageId'] = request.cenBandwidthPackageId;
  query['CenId'] = request.cenId;
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PeerTransitRouterId'] = request.peerTransitRouterId;
  query['PeerTransitRouterRegionId'] = request.peerTransitRouterRegionId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentDescription'] = request.transitRouterAttachmentDescription;
  query['TransitRouterAttachmentName'] = request.transitRouterAttachmentName;
  query['TransitRouterId'] = request.transitRouterId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTransitRouterPeerAttachment',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTransitRouterPeerAttachment(request: CreateTransitRouterPeerAttachmentRequest): CreateTransitRouterPeerAttachmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTransitRouterPeerAttachmentWithOptions(request, runtime);
}

model CreateTransitRouterRouteEntryRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterRouteEntryDescription?: string(name='TransitRouterRouteEntryDescription'),
  transitRouterRouteEntryDestinationCidrBlock?: string(name='TransitRouterRouteEntryDestinationCidrBlock'),
  transitRouterRouteEntryName?: string(name='TransitRouterRouteEntryName'),
  transitRouterRouteEntryNextHopId?: string(name='TransitRouterRouteEntryNextHopId'),
  transitRouterRouteEntryNextHopType?: string(name='TransitRouterRouteEntryNextHopType'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
}

model CreateTransitRouterRouteEntryResponseBody = {
  requestId?: string(name='RequestId'),
  transitRouterRouteEntryId?: string(name='TransitRouterRouteEntryId'),
}

model CreateTransitRouterRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterRouteEntryResponseBody(name='body'),
}

async function createTransitRouterRouteEntryWithOptions(request: CreateTransitRouterRouteEntryRequest, runtime: Util.RuntimeOptions): CreateTransitRouterRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterRouteEntryDescription'] = request.transitRouterRouteEntryDescription;
  query['TransitRouterRouteEntryDestinationCidrBlock'] = request.transitRouterRouteEntryDestinationCidrBlock;
  query['TransitRouterRouteEntryName'] = request.transitRouterRouteEntryName;
  query['TransitRouterRouteEntryNextHopId'] = request.transitRouterRouteEntryNextHopId;
  query['TransitRouterRouteEntryNextHopType'] = request.transitRouterRouteEntryNextHopType;
  query['TransitRouterRouteTableId'] = request.transitRouterRouteTableId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTransitRouterRouteEntry',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTransitRouterRouteEntry(request: CreateTransitRouterRouteEntryRequest): CreateTransitRouterRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTransitRouterRouteEntryWithOptions(request, runtime);
}

model CreateTransitRouterRouteTableRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterId?: string(name='TransitRouterId'),
  transitRouterRouteTableDescription?: string(name='TransitRouterRouteTableDescription'),
  transitRouterRouteTableName?: string(name='TransitRouterRouteTableName'),
}

model CreateTransitRouterRouteTableResponseBody = {
  requestId?: string(name='RequestId'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
}

model CreateTransitRouterRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterRouteTableResponseBody(name='body'),
}

async function createTransitRouterRouteTableWithOptions(request: CreateTransitRouterRouteTableRequest, runtime: Util.RuntimeOptions): CreateTransitRouterRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterId'] = request.transitRouterId;
  query['TransitRouterRouteTableDescription'] = request.transitRouterRouteTableDescription;
  query['TransitRouterRouteTableName'] = request.transitRouterRouteTableName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTransitRouterRouteTable',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTransitRouterRouteTable(request: CreateTransitRouterRouteTableRequest): CreateTransitRouterRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTransitRouterRouteTableWithOptions(request, runtime);
}

model CreateTransitRouterVbrAttachmentRequest {
  autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled'),
  cenId?: string(name='CenId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName'),
  transitRouterId?: string(name='TransitRouterId'),
  vbrId?: string(name='VbrId'),
  vbrOwnerId?: long(name='VbrOwnerId'),
}

model CreateTransitRouterVbrAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
}

model CreateTransitRouterVbrAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterVbrAttachmentResponseBody(name='body'),
}

async function createTransitRouterVbrAttachmentWithOptions(request: CreateTransitRouterVbrAttachmentRequest, runtime: Util.RuntimeOptions): CreateTransitRouterVbrAttachmentResponse {
  Util.validateModel(request);
  var query = {};
  query['AutoPublishRouteEnabled'] = request.autoPublishRouteEnabled;
  query['CenId'] = request.cenId;
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentDescription'] = request.transitRouterAttachmentDescription;
  query['TransitRouterAttachmentName'] = request.transitRouterAttachmentName;
  query['TransitRouterId'] = request.transitRouterId;
  query['VbrId'] = request.vbrId;
  query['VbrOwnerId'] = request.vbrOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTransitRouterVbrAttachment',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTransitRouterVbrAttachment(request: CreateTransitRouterVbrAttachmentRequest): CreateTransitRouterVbrAttachmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTransitRouterVbrAttachmentWithOptions(request, runtime);
}

model CreateTransitRouterVpcAttachmentRequest {
  cenId?: string(name='CenId'),
  chargeType?: string(name='ChargeType'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName'),
  transitRouterId?: string(name='TransitRouterId'),
  vpcId?: string(name='VpcId'),
  vpcOwnerId?: long(name='VpcOwnerId'),
  zoneMappings?: [ 
    {
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='ZoneMappings'),
}

model CreateTransitRouterVpcAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
}

model CreateTransitRouterVpcAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTransitRouterVpcAttachmentResponseBody(name='body'),
}

async function createTransitRouterVpcAttachmentWithOptions(request: CreateTransitRouterVpcAttachmentRequest, runtime: Util.RuntimeOptions): CreateTransitRouterVpcAttachmentResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ChargeType'] = request.chargeType;
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentDescription'] = request.transitRouterAttachmentDescription;
  query['TransitRouterAttachmentName'] = request.transitRouterAttachmentName;
  query['TransitRouterId'] = request.transitRouterId;
  query['VpcId'] = request.vpcId;
  query['VpcOwnerId'] = request.vpcOwnerId;
  query['ZoneMappings'] = request.zoneMappings;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateTransitRouterVpcAttachment',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createTransitRouterVpcAttachment(request: CreateTransitRouterVpcAttachmentRequest): CreateTransitRouterVpcAttachmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTransitRouterVpcAttachmentWithOptions(request, runtime);
}

model DeactiveFlowLogRequest {
  cenId?: string(name='CenId'),
  clientToken?: string(name='ClientToken'),
  flowLogId?: string(name='FlowLogId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeactiveFlowLogResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeactiveFlowLogResponse = {
  headers: map[string]string(name='headers'),
  body: DeactiveFlowLogResponseBody(name='body'),
}

async function deactiveFlowLogWithOptions(request: DeactiveFlowLogRequest, runtime: Util.RuntimeOptions): DeactiveFlowLogResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ClientToken'] = request.clientToken;
  query['FlowLogId'] = request.flowLogId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeactiveFlowLog',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deactiveFlowLog(request: DeactiveFlowLogRequest): DeactiveFlowLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return deactiveFlowLogWithOptions(request, runtime);
}

model DeleteCenRequest {
  cenId?: string(name='CenId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenResponseBody(name='body'),
}

async function deleteCenWithOptions(request: DeleteCenRequest, runtime: Util.RuntimeOptions): DeleteCenResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCen',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCen(request: DeleteCenRequest): DeleteCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCenWithOptions(request, runtime);
}

model DeleteCenBandwidthPackageRequest {
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteCenBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenBandwidthPackageResponseBody(name='body'),
}

async function deleteCenBandwidthPackageWithOptions(request: DeleteCenBandwidthPackageRequest, runtime: Util.RuntimeOptions): DeleteCenBandwidthPackageResponse {
  Util.validateModel(request);
  var query = {};
  query['CenBandwidthPackageId'] = request.cenBandwidthPackageId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCenBandwidthPackage',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCenBandwidthPackage(request: DeleteCenBandwidthPackageRequest): DeleteCenBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCenBandwidthPackageWithOptions(request, runtime);
}

model DeleteCenChildInstanceRouteEntryToAttachmentRequest {
  cenId?: string(name='CenId'),
  clientToken?: string(name='ClientToken'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
}

model DeleteCenChildInstanceRouteEntryToAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenChildInstanceRouteEntryToAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenChildInstanceRouteEntryToAttachmentResponseBody(name='body'),
}

async function deleteCenChildInstanceRouteEntryToAttachmentWithOptions(request: DeleteCenChildInstanceRouteEntryToAttachmentRequest, runtime: Util.RuntimeOptions): DeleteCenChildInstanceRouteEntryToAttachmentResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ClientToken'] = request.clientToken;
  query['DestinationCidrBlock'] = request.destinationCidrBlock;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['RouteTableId'] = request.routeTableId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCenChildInstanceRouteEntryToAttachment',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCenChildInstanceRouteEntryToAttachment(request: DeleteCenChildInstanceRouteEntryToAttachmentRequest): DeleteCenChildInstanceRouteEntryToAttachmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCenChildInstanceRouteEntryToAttachmentWithOptions(request, runtime);
}

model DeleteCenChildInstanceRouteEntryToCenRequest {
  cenId?: string(name='CenId'),
  childInstanceAliUid?: long(name='ChildInstanceAliUid'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceType?: string(name='ChildInstanceType'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeTableId?: string(name='RouteTableId'),
}

model DeleteCenChildInstanceRouteEntryToCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenChildInstanceRouteEntryToCenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenChildInstanceRouteEntryToCenResponseBody(name='body'),
}

async function deleteCenChildInstanceRouteEntryToCenWithOptions(request: DeleteCenChildInstanceRouteEntryToCenRequest, runtime: Util.RuntimeOptions): DeleteCenChildInstanceRouteEntryToCenResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ChildInstanceAliUid'] = request.childInstanceAliUid;
  query['ChildInstanceId'] = request.childInstanceId;
  query['ChildInstanceRegionId'] = request.childInstanceRegionId;
  query['ChildInstanceType'] = request.childInstanceType;
  query['DestinationCidrBlock'] = request.destinationCidrBlock;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['RouteTableId'] = request.routeTableId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCenChildInstanceRouteEntryToCen',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCenChildInstanceRouteEntryToCen(request: DeleteCenChildInstanceRouteEntryToCenRequest): DeleteCenChildInstanceRouteEntryToCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCenChildInstanceRouteEntryToCenWithOptions(request, runtime);
}

model DeleteCenInterRegionTrafficQosPolicyRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficQosPolicyId?: string(name='TrafficQosPolicyId'),
}

model DeleteCenInterRegionTrafficQosPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenInterRegionTrafficQosPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenInterRegionTrafficQosPolicyResponseBody(name='body'),
}

async function deleteCenInterRegionTrafficQosPolicyWithOptions(request: DeleteCenInterRegionTrafficQosPolicyRequest, runtime: Util.RuntimeOptions): DeleteCenInterRegionTrafficQosPolicyResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TrafficQosPolicyId'] = request.trafficQosPolicyId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCenInterRegionTrafficQosPolicy',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCenInterRegionTrafficQosPolicy(request: DeleteCenInterRegionTrafficQosPolicyRequest): DeleteCenInterRegionTrafficQosPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCenInterRegionTrafficQosPolicyWithOptions(request, runtime);
}

model DeleteCenInterRegionTrafficQosQueueRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  qosQueueId?: string(name='QosQueueId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteCenInterRegionTrafficQosQueueResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenInterRegionTrafficQosQueueResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenInterRegionTrafficQosQueueResponseBody(name='body'),
}

async function deleteCenInterRegionTrafficQosQueueWithOptions(request: DeleteCenInterRegionTrafficQosQueueRequest, runtime: Util.RuntimeOptions): DeleteCenInterRegionTrafficQosQueueResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['QosQueueId'] = request.qosQueueId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCenInterRegionTrafficQosQueue',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCenInterRegionTrafficQosQueue(request: DeleteCenInterRegionTrafficQosQueueRequest): DeleteCenInterRegionTrafficQosQueueResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCenInterRegionTrafficQosQueueWithOptions(request, runtime);
}

model DeleteCenRouteMapRequest {
  cenId?: string(name='CenId'),
  cenRegionId?: string(name='CenRegionId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeMapId?: string(name='RouteMapId'),
}

model DeleteCenRouteMapResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenRouteMapResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenRouteMapResponseBody(name='body'),
}

async function deleteCenRouteMapWithOptions(request: DeleteCenRouteMapRequest, runtime: Util.RuntimeOptions): DeleteCenRouteMapResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['CenRegionId'] = request.cenRegionId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['RouteMapId'] = request.routeMapId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCenRouteMap',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCenRouteMap(request: DeleteCenRouteMapRequest): DeleteCenRouteMapResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCenRouteMapWithOptions(request, runtime);
}

model DeleteFlowlogRequest {
  cenId?: string(name='CenId'),
  clientToken?: string(name='ClientToken'),
  flowLogId?: string(name='FlowLogId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteFlowlogResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model DeleteFlowlogResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowlogResponseBody(name='body'),
}

async function deleteFlowlogWithOptions(request: DeleteFlowlogRequest, runtime: Util.RuntimeOptions): DeleteFlowlogResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ClientToken'] = request.clientToken;
  query['FlowLogId'] = request.flowLogId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFlowlog',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteFlowlog(request: DeleteFlowlogRequest): DeleteFlowlogResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFlowlogWithOptions(request, runtime);
}

model DeleteRouteServiceInCenRequest {
  accessRegionId?: string(name='AccessRegionId'),
  cenId?: string(name='CenId'),
  host?: string(name='Host'),
  hostRegionId?: string(name='HostRegionId'),
  hostVpcId?: string(name='HostVpcId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteRouteServiceInCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRouteServiceInCenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRouteServiceInCenResponseBody(name='body'),
}

async function deleteRouteServiceInCenWithOptions(request: DeleteRouteServiceInCenRequest, runtime: Util.RuntimeOptions): DeleteRouteServiceInCenResponse {
  Util.validateModel(request);
  var query = {};
  query['AccessRegionId'] = request.accessRegionId;
  query['CenId'] = request.cenId;
  query['Host'] = request.host;
  query['HostRegionId'] = request.hostRegionId;
  query['HostVpcId'] = request.hostVpcId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteRouteServiceInCen',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteRouteServiceInCen(request: DeleteRouteServiceInCenRequest): DeleteRouteServiceInCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouteServiceInCenWithOptions(request, runtime);
}

model DeleteTrafficMarkingPolicyRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMarkingPolicyId?: string(name='TrafficMarkingPolicyId'),
}

model DeleteTrafficMarkingPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTrafficMarkingPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTrafficMarkingPolicyResponseBody(name='body'),
}

async function deleteTrafficMarkingPolicyWithOptions(request: DeleteTrafficMarkingPolicyRequest, runtime: Util.RuntimeOptions): DeleteTrafficMarkingPolicyResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TrafficMarkingPolicyId'] = request.trafficMarkingPolicyId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTrafficMarkingPolicy',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTrafficMarkingPolicy(request: DeleteTrafficMarkingPolicyRequest): DeleteTrafficMarkingPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTrafficMarkingPolicyWithOptions(request, runtime);
}

model DeleteTransitRouterPeerAttachmentRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
}

model DeleteTransitRouterPeerAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTransitRouterPeerAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterPeerAttachmentResponseBody(name='body'),
}

async function deleteTransitRouterPeerAttachmentWithOptions(request: DeleteTransitRouterPeerAttachmentRequest, runtime: Util.RuntimeOptions): DeleteTransitRouterPeerAttachmentResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTransitRouterPeerAttachment',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTransitRouterPeerAttachment(request: DeleteTransitRouterPeerAttachmentRequest): DeleteTransitRouterPeerAttachmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTransitRouterPeerAttachmentWithOptions(request, runtime);
}

model DeleteTransitRouterRouteEntryRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterRouteEntryDestinationCidrBlock?: string(name='TransitRouterRouteEntryDestinationCidrBlock'),
  transitRouterRouteEntryId?: string(name='TransitRouterRouteEntryId'),
  transitRouterRouteEntryNextHopId?: string(name='TransitRouterRouteEntryNextHopId'),
  transitRouterRouteEntryNextHopType?: string(name='TransitRouterRouteEntryNextHopType'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
}

model DeleteTransitRouterRouteEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTransitRouterRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterRouteEntryResponseBody(name='body'),
}

async function deleteTransitRouterRouteEntryWithOptions(request: DeleteTransitRouterRouteEntryRequest, runtime: Util.RuntimeOptions): DeleteTransitRouterRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterRouteEntryDestinationCidrBlock'] = request.transitRouterRouteEntryDestinationCidrBlock;
  query['TransitRouterRouteEntryId'] = request.transitRouterRouteEntryId;
  query['TransitRouterRouteEntryNextHopId'] = request.transitRouterRouteEntryNextHopId;
  query['TransitRouterRouteEntryNextHopType'] = request.transitRouterRouteEntryNextHopType;
  query['TransitRouterRouteTableId'] = request.transitRouterRouteTableId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTransitRouterRouteEntry',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTransitRouterRouteEntry(request: DeleteTransitRouterRouteEntryRequest): DeleteTransitRouterRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTransitRouterRouteEntryWithOptions(request, runtime);
}

model DeleteTransitRouterRouteTableRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
}

model DeleteTransitRouterRouteTableResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTransitRouterRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterRouteTableResponseBody(name='body'),
}

async function deleteTransitRouterRouteTableWithOptions(request: DeleteTransitRouterRouteTableRequest, runtime: Util.RuntimeOptions): DeleteTransitRouterRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterRouteTableId'] = request.transitRouterRouteTableId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTransitRouterRouteTable',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTransitRouterRouteTable(request: DeleteTransitRouterRouteTableRequest): DeleteTransitRouterRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTransitRouterRouteTableWithOptions(request, runtime);
}

model DeleteTransitRouterVbrAttachmentRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
}

model DeleteTransitRouterVbrAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTransitRouterVbrAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterVbrAttachmentResponseBody(name='body'),
}

async function deleteTransitRouterVbrAttachmentWithOptions(request: DeleteTransitRouterVbrAttachmentRequest, runtime: Util.RuntimeOptions): DeleteTransitRouterVbrAttachmentResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTransitRouterVbrAttachment',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTransitRouterVbrAttachment(request: DeleteTransitRouterVbrAttachmentRequest): DeleteTransitRouterVbrAttachmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTransitRouterVbrAttachmentWithOptions(request, runtime);
}

model DeleteTransitRouterVpcAttachmentRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
}

model DeleteTransitRouterVpcAttachmentResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteTransitRouterVpcAttachmentResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTransitRouterVpcAttachmentResponseBody(name='body'),
}

async function deleteTransitRouterVpcAttachmentWithOptions(request: DeleteTransitRouterVpcAttachmentRequest, runtime: Util.RuntimeOptions): DeleteTransitRouterVpcAttachmentResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteTransitRouterVpcAttachment',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteTransitRouterVpcAttachment(request: DeleteTransitRouterVpcAttachmentRequest): DeleteTransitRouterVpcAttachmentResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTransitRouterVpcAttachmentWithOptions(request, runtime);
}

model DescribeCenAttachedChildInstanceAttributeRequest {
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceType?: string(name='ChildInstanceType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeCenAttachedChildInstanceAttributeResponseBody = {
  cenId?: string(name='CenId'),
  childInstanceAttachTime?: string(name='ChildInstanceAttachTime'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceName?: string(name='ChildInstanceName'),
  childInstanceOwnerId?: long(name='ChildInstanceOwnerId'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceType?: string(name='ChildInstanceType'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
}

model DescribeCenAttachedChildInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenAttachedChildInstanceAttributeResponseBody(name='body'),
}

async function describeCenAttachedChildInstanceAttributeWithOptions(request: DescribeCenAttachedChildInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeCenAttachedChildInstanceAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ChildInstanceId'] = request.childInstanceId;
  query['ChildInstanceRegionId'] = request.childInstanceRegionId;
  query['ChildInstanceType'] = request.childInstanceType;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCenAttachedChildInstanceAttribute',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCenAttachedChildInstanceAttribute(request: DescribeCenAttachedChildInstanceAttributeRequest): DescribeCenAttachedChildInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenAttachedChildInstanceAttributeWithOptions(request, runtime);
}

model DescribeCenAttachedChildInstancesRequest {
  cenId?: string(name='CenId'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceType?: string(name='ChildInstanceType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeCenAttachedChildInstancesResponseBody = {
  childInstances?: {
    childInstance?: [ 
    {
      cenId?: string(name='CenId'),
      childInstanceAttachTime?: string(name='ChildInstanceAttachTime'),
      childInstanceId?: string(name='ChildInstanceId'),
      childInstanceOwnerId?: long(name='ChildInstanceOwnerId'),
      childInstanceRegionId?: string(name='ChildInstanceRegionId'),
      childInstanceType?: string(name='ChildInstanceType'),
      status?: string(name='Status'),
    }
  ](name='ChildInstance')
  }(name='ChildInstances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenAttachedChildInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenAttachedChildInstancesResponseBody(name='body'),
}

async function describeCenAttachedChildInstancesWithOptions(request: DescribeCenAttachedChildInstancesRequest, runtime: Util.RuntimeOptions): DescribeCenAttachedChildInstancesResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ChildInstanceRegionId'] = request.childInstanceRegionId;
  query['ChildInstanceType'] = request.childInstanceType;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCenAttachedChildInstances',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCenAttachedChildInstances(request: DescribeCenAttachedChildInstancesRequest): DescribeCenAttachedChildInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenAttachedChildInstancesWithOptions(request, runtime);
}

model DescribeCenBandwidthPackagesRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  includeReservationData?: boolean(name='IncludeReservationData'),
  isOrKey?: boolean(name='IsOrKey'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeCenBandwidthPackagesResponseBody = {
  cenBandwidthPackages?: {
    cenBandwidthPackage?: [ 
    {
      bandwidth?: long(name='Bandwidth'),
      bandwidthPackageChargeType?: string(name='BandwidthPackageChargeType'),
      businessStatus?: string(name='BusinessStatus'),
      cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
      cenIds?: {
        cenId?: [ string ](name='CenId')
      }(name='CenIds'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      expiredTime?: string(name='ExpiredTime'),
      geographicRegionAId?: string(name='GeographicRegionAId'),
      geographicRegionBId?: string(name='GeographicRegionBId'),
      geographicSpanId?: string(name='GeographicSpanId'),
      hasReservationData?: string(name='HasReservationData'),
      isCrossBorder?: boolean(name='IsCrossBorder'),
      name?: string(name='Name'),
      orginInterRegionBandwidthLimits?: {
        orginInterRegionBandwidthLimit?: [ 
        {
          bandwidthLimit?: string(name='BandwidthLimit'),
          geographicSpanId?: string(name='GeographicSpanId'),
          localRegionId?: string(name='LocalRegionId'),
          oppositeRegionId?: string(name='OppositeRegionId'),
        }
      ](name='OrginInterRegionBandwidthLimit')
      }(name='OrginInterRegionBandwidthLimits'),
      reservationActiveTime?: string(name='ReservationActiveTime'),
      reservationBandwidth?: string(name='ReservationBandwidth'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType'),
      reservationOrderType?: string(name='ReservationOrderType'),
      status?: string(name='Status'),
    }
  ](name='CenBandwidthPackage')
  }(name='CenBandwidthPackages'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenBandwidthPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenBandwidthPackagesResponseBody(name='body'),
}

async function describeCenBandwidthPackagesWithOptions(request: DescribeCenBandwidthPackagesRequest, runtime: Util.RuntimeOptions): DescribeCenBandwidthPackagesResponse {
  Util.validateModel(request);
  var query = {};
  query['Filter'] = request.filter;
  query['IncludeReservationData'] = request.includeReservationData;
  query['IsOrKey'] = request.isOrKey;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCenBandwidthPackages',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCenBandwidthPackages(request: DescribeCenBandwidthPackagesRequest): DescribeCenBandwidthPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenBandwidthPackagesWithOptions(request, runtime);
}

model DescribeCenChildInstanceRouteEntriesRequest {
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceType?: string(name='ChildInstanceType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
}

model DescribeCenChildInstanceRouteEntriesResponseBody = {
  cenRouteEntries?: {
    cenRouteEntry?: [ 
    {
      asPaths?: {
        asPath?: [ string ](name='AsPath')
      }(name='AsPaths'),
      cenRouteMapRecords?: {
        cenRouteMapRecord?: [ 
        {
          regionId?: string(name='RegionId'),
          routeMapId?: string(name='RouteMapId'),
        }
      ](name='CenRouteMapRecord')
      }(name='CenRouteMapRecords'),
      communities?: {
        community?: [ string ](name='Community')
      }(name='Communities'),
      conflicts?: {
        conflict?: [ 
        {
          destinationCidrBlock?: string(name='DestinationCidrBlock'),
          instanceId?: string(name='InstanceId'),
          instanceType?: string(name='InstanceType'),
          regionId?: string(name='RegionId'),
          status?: string(name='Status'),
        }
      ](name='Conflict')
      }(name='Conflicts'),
      destinationCidrBlock?: string(name='DestinationCidrBlock'),
      nextHopInstanceId?: string(name='NextHopInstanceId'),
      nextHopRegionId?: string(name='NextHopRegionId'),
      nextHopType?: string(name='NextHopType'),
      operationalMode?: boolean(name='OperationalMode'),
      publishStatus?: string(name='PublishStatus'),
      routeTableId?: string(name='RouteTableId'),
      status?: string(name='Status'),
      type?: string(name='Type'),
    }
  ](name='CenRouteEntry')
  }(name='CenRouteEntries'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenChildInstanceRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenChildInstanceRouteEntriesResponseBody(name='body'),
}

async function describeCenChildInstanceRouteEntriesWithOptions(request: DescribeCenChildInstanceRouteEntriesRequest, runtime: Util.RuntimeOptions): DescribeCenChildInstanceRouteEntriesResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ChildInstanceId'] = request.childInstanceId;
  query['ChildInstanceRegionId'] = request.childInstanceRegionId;
  query['ChildInstanceType'] = request.childInstanceType;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['Status'] = request.status;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCenChildInstanceRouteEntries',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCenChildInstanceRouteEntries(request: DescribeCenChildInstanceRouteEntriesRequest): DescribeCenChildInstanceRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenChildInstanceRouteEntriesWithOptions(request, runtime);
}

model DescribeCenGeographicSpanRemainingBandwidthRequest {
  cenId?: string(name='CenId'),
  geographicRegionAId?: string(name='GeographicRegionAId'),
  geographicRegionBId?: string(name='GeographicRegionBId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeCenGeographicSpanRemainingBandwidthResponseBody = {
  remainingBandwidth?: long(name='RemainingBandwidth'),
  requestId?: string(name='RequestId'),
}

model DescribeCenGeographicSpanRemainingBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenGeographicSpanRemainingBandwidthResponseBody(name='body'),
}

async function describeCenGeographicSpanRemainingBandwidthWithOptions(request: DescribeCenGeographicSpanRemainingBandwidthRequest, runtime: Util.RuntimeOptions): DescribeCenGeographicSpanRemainingBandwidthResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['GeographicRegionAId'] = request.geographicRegionAId;
  query['GeographicRegionBId'] = request.geographicRegionBId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCenGeographicSpanRemainingBandwidth',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCenGeographicSpanRemainingBandwidth(request: DescribeCenGeographicSpanRemainingBandwidthRequest): DescribeCenGeographicSpanRemainingBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenGeographicSpanRemainingBandwidthWithOptions(request, runtime);
}

model DescribeCenGeographicSpansRequest {
  geographicSpanId?: string(name='GeographicSpanId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeCenGeographicSpansResponseBody = {
  geographicSpanModels?: {
    geographicSpanModel?: [ 
    {
      geographicSpanId?: string(name='GeographicSpanId'),
      localGeoRegionId?: string(name='LocalGeoRegionId'),
      oppositeGeoRegionId?: string(name='OppositeGeoRegionId'),
    }
  ](name='GeographicSpanModel')
  }(name='GeographicSpanModels'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenGeographicSpansResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenGeographicSpansResponseBody(name='body'),
}

async function describeCenGeographicSpansWithOptions(request: DescribeCenGeographicSpansRequest, runtime: Util.RuntimeOptions): DescribeCenGeographicSpansResponse {
  Util.validateModel(request);
  var query = {};
  query['GeographicSpanId'] = request.geographicSpanId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCenGeographicSpans',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCenGeographicSpans(request: DescribeCenGeographicSpansRequest): DescribeCenGeographicSpansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenGeographicSpansWithOptions(request, runtime);
}

model DescribeCenInterRegionBandwidthLimitsRequest {
  cenId?: string(name='CenId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeCenInterRegionBandwidthLimitsResponseBody = {
  cenInterRegionBandwidthLimits?: {
    cenInterRegionBandwidthLimit?: [ 
    {
      bandwidthLimit?: long(name='BandwidthLimit'),
      bandwidthPackageId?: string(name='BandwidthPackageId'),
      cenId?: string(name='CenId'),
      geographicSpanId?: string(name='GeographicSpanId'),
      localRegionId?: string(name='LocalRegionId'),
      oppositeRegionId?: string(name='OppositeRegionId'),
      status?: string(name='Status'),
    }
  ](name='CenInterRegionBandwidthLimit')
  }(name='CenInterRegionBandwidthLimits'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenInterRegionBandwidthLimitsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenInterRegionBandwidthLimitsResponseBody(name='body'),
}

async function describeCenInterRegionBandwidthLimitsWithOptions(request: DescribeCenInterRegionBandwidthLimitsRequest, runtime: Util.RuntimeOptions): DescribeCenInterRegionBandwidthLimitsResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCenInterRegionBandwidthLimits',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCenInterRegionBandwidthLimits(request: DescribeCenInterRegionBandwidthLimitsRequest): DescribeCenInterRegionBandwidthLimitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenInterRegionBandwidthLimitsWithOptions(request, runtime);
}

model DescribeCenPrivateZoneRoutesRequest {
  accessRegionId?: string(name='AccessRegionId'),
  cenId?: string(name='CenId'),
  hostRegionId?: string(name='HostRegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeCenPrivateZoneRoutesResponseBody = {
  cenId?: string(name='CenId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  privateZoneDnsServers?: string(name='PrivateZoneDnsServers'),
  privateZoneInfos?: {
    privateZoneInfo?: [ 
    {
      accessRegionId?: string(name='AccessRegionId'),
      hostRegionId?: string(name='HostRegionId'),
      hostVpcId?: string(name='HostVpcId'),
      status?: string(name='Status'),
    }
  ](name='PrivateZoneInfo')
  }(name='PrivateZoneInfos'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenPrivateZoneRoutesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenPrivateZoneRoutesResponseBody(name='body'),
}

async function describeCenPrivateZoneRoutesWithOptions(request: DescribeCenPrivateZoneRoutesRequest, runtime: Util.RuntimeOptions): DescribeCenPrivateZoneRoutesResponse {
  Util.validateModel(request);
  var query = {};
  query['AccessRegionId'] = request.accessRegionId;
  query['CenId'] = request.cenId;
  query['HostRegionId'] = request.hostRegionId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCenPrivateZoneRoutes',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCenPrivateZoneRoutes(request: DescribeCenPrivateZoneRoutesRequest): DescribeCenPrivateZoneRoutesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenPrivateZoneRoutesWithOptions(request, runtime);
}

model DescribeCenRegionDomainRouteEntriesRequest {
  cenId?: string(name='CenId'),
  cenRegionId?: string(name='CenRegionId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
}

model DescribeCenRegionDomainRouteEntriesResponseBody = {
  cenRouteEntries?: {
    cenRouteEntry?: [ 
    {
      asPaths?: {
        asPath?: [ string ](name='AsPath')
      }(name='AsPaths'),
      cenOutRouteMapRecords?: {
        cenOutRouteMapRecord?: [ 
        {
          regionId?: string(name='RegionId'),
          routeMapId?: string(name='RouteMapId'),
        }
      ](name='CenOutRouteMapRecord')
      }(name='CenOutRouteMapRecords'),
      cenRouteMapRecords?: {
        cenRouteMapRecord?: [ 
        {
          regionId?: string(name='RegionId'),
          routeMapId?: string(name='RouteMapId'),
        }
      ](name='CenRouteMapRecord')
      }(name='CenRouteMapRecords'),
      communities?: {
        community?: [ string ](name='Community')
      }(name='Communities'),
      destinationCidrBlock?: string(name='DestinationCidrBlock'),
      nextHopInstanceId?: string(name='NextHopInstanceId'),
      nextHopRegionId?: string(name='NextHopRegionId'),
      nextHopType?: string(name='NextHopType'),
      preference?: int32(name='Preference'),
      status?: string(name='Status'),
      toOtherRegionStatus?: string(name='ToOtherRegionStatus'),
      type?: string(name='Type'),
    }
  ](name='CenRouteEntry')
  }(name='CenRouteEntries'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenRegionDomainRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenRegionDomainRouteEntriesResponseBody(name='body'),
}

async function describeCenRegionDomainRouteEntriesWithOptions(request: DescribeCenRegionDomainRouteEntriesRequest, runtime: Util.RuntimeOptions): DescribeCenRegionDomainRouteEntriesResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['CenRegionId'] = request.cenRegionId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['Status'] = request.status;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCenRegionDomainRouteEntries',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCenRegionDomainRouteEntries(request: DescribeCenRegionDomainRouteEntriesRequest): DescribeCenRegionDomainRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenRegionDomainRouteEntriesWithOptions(request, runtime);
}

model DescribeCenRouteMapsRequest {
  cenId?: string(name='CenId'),
  cenRegionId?: string(name='CenRegionId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeMapId?: string(name='RouteMapId'),
  transmitDirection?: string(name='TransmitDirection'),
}

model DescribeCenRouteMapsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  routeMaps?: {
    routeMap?: [ 
    {
      asPathMatchMode?: string(name='AsPathMatchMode'),
      cenId?: string(name='CenId'),
      cenRegionId?: string(name='CenRegionId'),
      cidrMatchMode?: string(name='CidrMatchMode'),
      communityMatchMode?: string(name='CommunityMatchMode'),
      communityOperateMode?: string(name='CommunityOperateMode'),
      description?: string(name='Description'),
      destinationChildInstanceTypes?: {
        destinationChildInstanceType?: [ string ](name='DestinationChildInstanceType')
      }(name='DestinationChildInstanceTypes'),
      destinationCidrBlocks?: {
        destinationCidrBlock?: [ string ](name='DestinationCidrBlock')
      }(name='DestinationCidrBlocks'),
      destinationInstanceIds?: {
        destinationInstanceId?: [ string ](name='DestinationInstanceId')
      }(name='DestinationInstanceIds'),
      destinationInstanceIdsReverseMatch?: boolean(name='DestinationInstanceIdsReverseMatch'),
      destinationRouteTableIds?: {
        destinationRouteTableId?: [ string ](name='DestinationRouteTableId')
      }(name='DestinationRouteTableIds'),
      mapResult?: string(name='MapResult'),
      matchAsns?: {
        matchAsn?: [ string ](name='MatchAsn')
      }(name='MatchAsns'),
      matchCommunitySet?: {
        matchCommunity?: [ string ](name='MatchCommunity')
      }(name='MatchCommunitySet'),
      nextPriority?: int32(name='NextPriority'),
      operateCommunitySet?: {
        operateCommunity?: [ string ](name='OperateCommunity')
      }(name='OperateCommunitySet'),
      preference?: int32(name='Preference'),
      prependAsPath?: {
        asPath?: [ string ](name='AsPath')
      }(name='PrependAsPath'),
      priority?: int32(name='Priority'),
      routeMapId?: string(name='RouteMapId'),
      routeTypes?: {
        routeType?: [ string ](name='RouteType')
      }(name='RouteTypes'),
      sourceChildInstanceTypes?: {
        sourceChildInstanceType?: [ string ](name='SourceChildInstanceType')
      }(name='SourceChildInstanceTypes'),
      sourceInstanceIds?: {
        sourceInstanceId?: [ string ](name='SourceInstanceId')
      }(name='SourceInstanceIds'),
      sourceInstanceIdsReverseMatch?: boolean(name='SourceInstanceIdsReverseMatch'),
      sourceRegionIds?: {
        sourceRegionId?: [ string ](name='SourceRegionId')
      }(name='SourceRegionIds'),
      sourceRouteTableIds?: {
        sourceRouteTableId?: [ string ](name='SourceRouteTableId')
      }(name='SourceRouteTableIds'),
      status?: string(name='Status'),
      transmitDirection?: string(name='TransmitDirection'),
    }
  ](name='RouteMap')
  }(name='RouteMaps'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCenRouteMapsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenRouteMapsResponseBody(name='body'),
}

async function describeCenRouteMapsWithOptions(request: DescribeCenRouteMapsRequest, runtime: Util.RuntimeOptions): DescribeCenRouteMapsResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['CenRegionId'] = request.cenRegionId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['RouteMapId'] = request.routeMapId;
  query['TransmitDirection'] = request.transmitDirection;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCenRouteMaps',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCenRouteMaps(request: DescribeCenRouteMapsRequest): DescribeCenRouteMapsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenRouteMapsWithOptions(request, runtime);
}

model DescribeCenVbrHealthCheckRequest {
  cenId?: string(name='CenId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vbrInstanceId?: string(name='VbrInstanceId'),
  vbrInstanceOwnerId?: long(name='VbrInstanceOwnerId'),
  vbrInstanceRegionId?: string(name='VbrInstanceRegionId'),
}

model DescribeCenVbrHealthCheckResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vbrHealthChecks?: {
    vbrHealthCheck?: [ 
    {
      cenId?: string(name='CenId'),
      healthCheckInterval?: int32(name='HealthCheckInterval'),
      healthCheckOnly?: boolean(name='HealthCheckOnly'),
      healthCheckSourceIp?: string(name='HealthCheckSourceIp'),
      healthCheckTargetIp?: string(name='HealthCheckTargetIp'),
      healthyThreshold?: int32(name='HealthyThreshold'),
      vbrInstanceId?: string(name='VbrInstanceId'),
      vbrInstanceRegionId?: string(name='VbrInstanceRegionId'),
    }
  ](name='VbrHealthCheck')
  }(name='VbrHealthChecks'),
}

model DescribeCenVbrHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenVbrHealthCheckResponseBody(name='body'),
}

async function describeCenVbrHealthCheckWithOptions(request: DescribeCenVbrHealthCheckRequest, runtime: Util.RuntimeOptions): DescribeCenVbrHealthCheckResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['VbrInstanceId'] = request.vbrInstanceId;
  query['VbrInstanceOwnerId'] = request.vbrInstanceOwnerId;
  query['VbrInstanceRegionId'] = request.vbrInstanceRegionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCenVbrHealthCheck',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCenVbrHealthCheck(request: DescribeCenVbrHealthCheckRequest): DescribeCenVbrHealthCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenVbrHealthCheckWithOptions(request, runtime);
}

model DescribeCensRequest {
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeCensResponseBody = {
  cens?: {
    cen?: [ 
    {
      cenBandwidthPackageIds?: {
        cenBandwidthPackageId?: [ string ](name='CenBandwidthPackageId')
      }(name='CenBandwidthPackageIds'),
      cenId?: string(name='CenId'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      name?: string(name='Name'),
      protectionLevel?: string(name='ProtectionLevel'),
      status?: string(name='Status'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
    }
  ](name='Cen')
  }(name='Cens'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeCensResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCensResponseBody(name='body'),
}

async function describeCensWithOptions(request: DescribeCensRequest, runtime: Util.RuntimeOptions): DescribeCensResponse {
  Util.validateModel(request);
  var query = {};
  query['Filter'] = request.filter;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['Tag'] = request.tag;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCens',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCens(request: DescribeCensRequest): DescribeCensResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCensWithOptions(request, runtime);
}

model DescribeChildInstanceRegionsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  productType?: string(name='ProductType'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeChildInstanceRegionsResponseBody = {
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeChildInstanceRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeChildInstanceRegionsResponseBody(name='body'),
}

async function describeChildInstanceRegionsWithOptions(request: DescribeChildInstanceRegionsRequest, runtime: Util.RuntimeOptions): DescribeChildInstanceRegionsResponse {
  Util.validateModel(request);
  var query = {};
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ProductType'] = request.productType;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeChildInstanceRegions',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeChildInstanceRegions(request: DescribeChildInstanceRegionsRequest): DescribeChildInstanceRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChildInstanceRegionsWithOptions(request, runtime);
}

model DescribeFlowlogsRequest {
  cenId?: string(name='CenId'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  flowLogId?: string(name='FlowLogId'),
  flowLogName?: string(name='FlowLogName'),
  logStoreName?: string(name='LogStoreName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  projectName?: string(name='ProjectName'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
}

model DescribeFlowlogsResponseBody = {
  flowLogs?: {
    flowLog?: [ 
    {
      cenId?: string(name='CenId'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      flowLogId?: string(name='FlowLogId'),
      flowLogName?: string(name='FlowLogName'),
      logStoreName?: string(name='LogStoreName'),
      projectName?: string(name='ProjectName'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
    }
  ](name='FlowLog')
  }(name='FlowLogs'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  totalCount?: string(name='TotalCount'),
}

model DescribeFlowlogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowlogsResponseBody(name='body'),
}

async function describeFlowlogsWithOptions(request: DescribeFlowlogsRequest, runtime: Util.RuntimeOptions): DescribeFlowlogsResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ClientToken'] = request.clientToken;
  query['Description'] = request.description;
  query['FlowLogId'] = request.flowLogId;
  query['FlowLogName'] = request.flowLogName;
  query['LogStoreName'] = request.logStoreName;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ProjectName'] = request.projectName;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['Status'] = request.status;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeFlowlogs',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeFlowlogs(request: DescribeFlowlogsRequest): DescribeFlowlogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowlogsWithOptions(request, runtime);
}

model DescribeGeographicRegionMembershipRequest {
  geographicRegionId?: string(name='GeographicRegionId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeGeographicRegionMembershipResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionIds?: {
    regionId?: [ 
    {
      regionId?: string(name='RegionId'),
    }
  ](name='RegionId')
  }(name='RegionIds'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeGeographicRegionMembershipResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGeographicRegionMembershipResponseBody(name='body'),
}

async function describeGeographicRegionMembershipWithOptions(request: DescribeGeographicRegionMembershipRequest, runtime: Util.RuntimeOptions): DescribeGeographicRegionMembershipResponse {
  Util.validateModel(request);
  var query = {};
  query['GeographicRegionId'] = request.geographicRegionId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGeographicRegionMembership',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGeographicRegionMembership(request: DescribeGeographicRegionMembershipRequest): DescribeGeographicRegionMembershipResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGeographicRegionMembershipWithOptions(request, runtime);
}

model DescribeGrantRulesToCenRequest {
  cenId?: string(name='CenId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  productType?: string(name='ProductType'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeGrantRulesToCenResponseBody = {
  grantRules?: {
    grantRule?: [ 
    {
      cenId?: string(name='CenId'),
      childInstanceId?: string(name='ChildInstanceId'),
      childInstanceOwnerId?: long(name='ChildInstanceOwnerId'),
      childInstanceRegionId?: string(name='ChildInstanceRegionId'),
      childInstanceType?: string(name='ChildInstanceType'),
      orderType?: string(name='OrderType'),
    }
  ](name='GrantRule')
  }(name='GrantRules'),
  requestId?: string(name='RequestId'),
}

model DescribeGrantRulesToCenResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGrantRulesToCenResponseBody(name='body'),
}

async function describeGrantRulesToCenWithOptions(request: DescribeGrantRulesToCenRequest, runtime: Util.RuntimeOptions): DescribeGrantRulesToCenResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ProductType'] = request.productType;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeGrantRulesToCen',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeGrantRulesToCen(request: DescribeGrantRulesToCenRequest): DescribeGrantRulesToCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGrantRulesToCenWithOptions(request, runtime);
}

model DescribePublishedRouteEntriesRequest {
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId'),
  childInstanceType?: string(name='ChildInstanceType'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribePublishedRouteEntriesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  publishedRouteEntries?: {
    publishedRouteEntry?: [ 
    {
      childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId'),
      conflicts?: {
        conflict?: [ 
        {
          destinationCidrBlock?: string(name='DestinationCidrBlock'),
          instanceId?: string(name='InstanceId'),
          instanceType?: string(name='InstanceType'),
          regionId?: string(name='RegionId'),
          status?: string(name='Status'),
        }
      ](name='Conflict')
      }(name='Conflicts'),
      destinationCidrBlock?: string(name='DestinationCidrBlock'),
      nextHopId?: string(name='NextHopId'),
      nextHopType?: string(name='NextHopType'),
      operationalMode?: boolean(name='OperationalMode'),
      publishStatus?: string(name='PublishStatus'),
      routeType?: string(name='RouteType'),
    }
  ](name='PublishedRouteEntry')
  }(name='PublishedRouteEntries'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribePublishedRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePublishedRouteEntriesResponseBody(name='body'),
}

async function describePublishedRouteEntriesWithOptions(request: DescribePublishedRouteEntriesRequest, runtime: Util.RuntimeOptions): DescribePublishedRouteEntriesResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ChildInstanceId'] = request.childInstanceId;
  query['ChildInstanceRegionId'] = request.childInstanceRegionId;
  query['ChildInstanceRouteTableId'] = request.childInstanceRouteTableId;
  query['ChildInstanceType'] = request.childInstanceType;
  query['DestinationCidrBlock'] = request.destinationCidrBlock;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePublishedRouteEntries',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePublishedRouteEntries(request: DescribePublishedRouteEntriesRequest): DescribePublishedRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePublishedRouteEntriesWithOptions(request, runtime);
}

model DescribeRouteConflictRequest {
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId'),
  childInstanceType?: string(name='ChildInstanceType'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeRouteConflictResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  routeConflicts?: {
    routeConflict?: [ 
    {
      destinationCidrBlock?: string(name='DestinationCidrBlock'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
    }
  ](name='RouteConflict')
  }(name='RouteConflicts'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRouteConflictResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouteConflictResponseBody(name='body'),
}

async function describeRouteConflictWithOptions(request: DescribeRouteConflictRequest, runtime: Util.RuntimeOptions): DescribeRouteConflictResponse {
  Util.validateModel(request);
  var query = {};
  query['ChildInstanceId'] = request.childInstanceId;
  query['ChildInstanceRegionId'] = request.childInstanceRegionId;
  query['ChildInstanceRouteTableId'] = request.childInstanceRouteTableId;
  query['ChildInstanceType'] = request.childInstanceType;
  query['DestinationCidrBlock'] = request.destinationCidrBlock;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRouteConflict',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRouteConflict(request: DescribeRouteConflictRequest): DescribeRouteConflictResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouteConflictWithOptions(request, runtime);
}

model DescribeRouteServicesInCenRequest {
  accessRegionId?: string(name='AccessRegionId'),
  cenId?: string(name='CenId'),
  host?: string(name='Host'),
  hostRegionId?: string(name='HostRegionId'),
  hostVpcId?: string(name='HostVpcId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeRouteServicesInCenResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  routeServiceEntries?: {
    routeServiceEntry?: [ 
    {
      accessRegionId?: string(name='AccessRegionId'),
      cenId?: string(name='CenId'),
      cidrs?: {
        cidr?: [ string ](name='Cidr')
      }(name='Cidrs'),
      description?: string(name='Description'),
      host?: string(name='Host'),
      hostRegionId?: string(name='HostRegionId'),
      hostVpcId?: string(name='HostVpcId'),
      status?: string(name='Status'),
    }
  ](name='RouteServiceEntry')
  }(name='RouteServiceEntries'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeRouteServicesInCenResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouteServicesInCenResponseBody(name='body'),
}

async function describeRouteServicesInCenWithOptions(request: DescribeRouteServicesInCenRequest, runtime: Util.RuntimeOptions): DescribeRouteServicesInCenResponse {
  Util.validateModel(request);
  var query = {};
  query['AccessRegionId'] = request.accessRegionId;
  query['CenId'] = request.cenId;
  query['Host'] = request.host;
  query['HostRegionId'] = request.hostRegionId;
  query['HostVpcId'] = request.hostVpcId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRouteServicesInCen',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRouteServicesInCen(request: DescribeRouteServicesInCenRequest): DescribeRouteServicesInCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouteServicesInCenWithOptions(request, runtime);
}

model DetachCenChildInstanceRequest {
  cenId?: string(name='CenId'),
  cenOwnerId?: long(name='CenOwnerId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceOwnerId?: long(name='ChildInstanceOwnerId'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceType?: string(name='ChildInstanceType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DetachCenChildInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachCenChildInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DetachCenChildInstanceResponseBody(name='body'),
}

async function detachCenChildInstanceWithOptions(request: DetachCenChildInstanceRequest, runtime: Util.RuntimeOptions): DetachCenChildInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['CenOwnerId'] = request.cenOwnerId;
  query['ChildInstanceId'] = request.childInstanceId;
  query['ChildInstanceOwnerId'] = request.childInstanceOwnerId;
  query['ChildInstanceRegionId'] = request.childInstanceRegionId;
  query['ChildInstanceType'] = request.childInstanceType;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DetachCenChildInstance',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function detachCenChildInstance(request: DetachCenChildInstanceRequest): DetachCenChildInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachCenChildInstanceWithOptions(request, runtime);
}

model DisableCenVbrHealthCheckRequest {
  cenId?: string(name='CenId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vbrInstanceId?: string(name='VbrInstanceId'),
  vbrInstanceOwnerId?: long(name='VbrInstanceOwnerId'),
  vbrInstanceRegionId?: string(name='VbrInstanceRegionId'),
}

model DisableCenVbrHealthCheckResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableCenVbrHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  body: DisableCenVbrHealthCheckResponseBody(name='body'),
}

async function disableCenVbrHealthCheckWithOptions(request: DisableCenVbrHealthCheckRequest, runtime: Util.RuntimeOptions): DisableCenVbrHealthCheckResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['VbrInstanceId'] = request.vbrInstanceId;
  query['VbrInstanceOwnerId'] = request.vbrInstanceOwnerId;
  query['VbrInstanceRegionId'] = request.vbrInstanceRegionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableCenVbrHealthCheck',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableCenVbrHealthCheck(request: DisableCenVbrHealthCheckRequest): DisableCenVbrHealthCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableCenVbrHealthCheckWithOptions(request, runtime);
}

model DisableTransitRouterRouteTablePropagationRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
}

model DisableTransitRouterRouteTablePropagationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableTransitRouterRouteTablePropagationResponse = {
  headers: map[string]string(name='headers'),
  body: DisableTransitRouterRouteTablePropagationResponseBody(name='body'),
}

async function disableTransitRouterRouteTablePropagationWithOptions(request: DisableTransitRouterRouteTablePropagationRequest, runtime: Util.RuntimeOptions): DisableTransitRouterRouteTablePropagationResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterRouteTableId'] = request.transitRouterRouteTableId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DisableTransitRouterRouteTablePropagation',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function disableTransitRouterRouteTablePropagation(request: DisableTransitRouterRouteTablePropagationRequest): DisableTransitRouterRouteTablePropagationResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableTransitRouterRouteTablePropagationWithOptions(request, runtime);
}

model DissociateTransitRouterAttachmentFromRouteTableRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
}

model DissociateTransitRouterAttachmentFromRouteTableResponseBody = {
  requestId?: string(name='RequestId'),
}

model DissociateTransitRouterAttachmentFromRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: DissociateTransitRouterAttachmentFromRouteTableResponseBody(name='body'),
}

async function dissociateTransitRouterAttachmentFromRouteTableWithOptions(request: DissociateTransitRouterAttachmentFromRouteTableRequest, runtime: Util.RuntimeOptions): DissociateTransitRouterAttachmentFromRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterRouteTableId'] = request.transitRouterRouteTableId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DissociateTransitRouterAttachmentFromRouteTable',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function dissociateTransitRouterAttachmentFromRouteTable(request: DissociateTransitRouterAttachmentFromRouteTableRequest): DissociateTransitRouterAttachmentFromRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return dissociateTransitRouterAttachmentFromRouteTableWithOptions(request, runtime);
}

model EnableCenVbrHealthCheckRequest {
  cenId?: string(name='CenId'),
  healthCheckInterval?: int32(name='HealthCheckInterval'),
  healthCheckOnly?: boolean(name='HealthCheckOnly'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp'),
  healthyThreshold?: int32(name='HealthyThreshold'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vbrInstanceId?: string(name='VbrInstanceId'),
  vbrInstanceOwnerId?: long(name='VbrInstanceOwnerId'),
  vbrInstanceRegionId?: string(name='VbrInstanceRegionId'),
}

model EnableCenVbrHealthCheckResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableCenVbrHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  body: EnableCenVbrHealthCheckResponseBody(name='body'),
}

async function enableCenVbrHealthCheckWithOptions(request: EnableCenVbrHealthCheckRequest, runtime: Util.RuntimeOptions): EnableCenVbrHealthCheckResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['HealthCheckInterval'] = request.healthCheckInterval;
  query['HealthCheckOnly'] = request.healthCheckOnly;
  query['HealthCheckSourceIp'] = request.healthCheckSourceIp;
  query['HealthCheckTargetIp'] = request.healthCheckTargetIp;
  query['HealthyThreshold'] = request.healthyThreshold;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['VbrInstanceId'] = request.vbrInstanceId;
  query['VbrInstanceOwnerId'] = request.vbrInstanceOwnerId;
  query['VbrInstanceRegionId'] = request.vbrInstanceRegionId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableCenVbrHealthCheck',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableCenVbrHealthCheck(request: EnableCenVbrHealthCheckRequest): EnableCenVbrHealthCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableCenVbrHealthCheckWithOptions(request, runtime);
}

model EnableTransitRouterRouteTablePropagationRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
}

model EnableTransitRouterRouteTablePropagationResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableTransitRouterRouteTablePropagationResponse = {
  headers: map[string]string(name='headers'),
  body: EnableTransitRouterRouteTablePropagationResponseBody(name='body'),
}

async function enableTransitRouterRouteTablePropagationWithOptions(request: EnableTransitRouterRouteTablePropagationRequest, runtime: Util.RuntimeOptions): EnableTransitRouterRouteTablePropagationResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterRouteTableId'] = request.transitRouterRouteTableId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableTransitRouterRouteTablePropagation',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableTransitRouterRouteTablePropagation(request: EnableTransitRouterRouteTablePropagationRequest): EnableTransitRouterRouteTablePropagationResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableTransitRouterRouteTablePropagationWithOptions(request, runtime);
}

model GrantInstanceToTransitRouterRequest {
  cenId?: string(name='CenId'),
  cenOwnerId?: long(name='CenOwnerId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  orderType?: string(name='OrderType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GrantInstanceToTransitRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model GrantInstanceToTransitRouterResponse = {
  headers: map[string]string(name='headers'),
  body: GrantInstanceToTransitRouterResponseBody(name='body'),
}

async function grantInstanceToTransitRouterWithOptions(request: GrantInstanceToTransitRouterRequest, runtime: Util.RuntimeOptions): GrantInstanceToTransitRouterResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['CenOwnerId'] = request.cenOwnerId;
  query['InstanceId'] = request.instanceId;
  query['InstanceType'] = request.instanceType;
  query['OrderType'] = request.orderType;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GrantInstanceToTransitRouter',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function grantInstanceToTransitRouter(request: GrantInstanceToTransitRouterRequest): GrantInstanceToTransitRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return grantInstanceToTransitRouterWithOptions(request, runtime);
}

model ListCenInterRegionTrafficQosPoliciesRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficQosPolicyDescription?: string(name='TrafficQosPolicyDescription'),
  trafficQosPolicyId?: string(name='TrafficQosPolicyId'),
  trafficQosPolicyName?: string(name='TrafficQosPolicyName'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterId?: string(name='TransitRouterId'),
}

model ListCenInterRegionTrafficQosPoliciesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  trafficQosPolicies?: [ 
    {
      trafficQosPolicyDescription?: string(name='TrafficQosPolicyDescription'),
      trafficQosPolicyId?: string(name='TrafficQosPolicyId'),
      trafficQosPolicyName?: string(name='TrafficQosPolicyName'),
      trafficQosPolicyStatus?: string(name='TrafficQosPolicyStatus'),
      trafficQosQueues?: [ 
        {
          dscps?: [ int32 ](name='Dscps'),
          qosQueueDescription?: string(name='QosQueueDescription'),
          qosQueueId?: string(name='QosQueueId'),
          qosQueueName?: string(name='QosQueueName'),
          remainBandwidthPercent?: int32(name='RemainBandwidthPercent'),
        }
      ](name='TrafficQosQueues'),
    }
  ](name='TrafficQosPolicies'),
}

model ListCenInterRegionTrafficQosPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListCenInterRegionTrafficQosPoliciesResponseBody(name='body'),
}

async function listCenInterRegionTrafficQosPoliciesWithOptions(request: ListCenInterRegionTrafficQosPoliciesRequest, runtime: Util.RuntimeOptions): ListCenInterRegionTrafficQosPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TrafficQosPolicyDescription'] = request.trafficQosPolicyDescription;
  query['TrafficQosPolicyId'] = request.trafficQosPolicyId;
  query['TrafficQosPolicyName'] = request.trafficQosPolicyName;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterId'] = request.transitRouterId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCenInterRegionTrafficQosPolicies',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCenInterRegionTrafficQosPolicies(request: ListCenInterRegionTrafficQosPoliciesRequest): ListCenInterRegionTrafficQosPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCenInterRegionTrafficQosPoliciesWithOptions(request, runtime);
}

model ListGrantVSwitchesToCenRequest {
  cenId?: string(name='CenId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vpcId?: string(name='VpcId'),
  zoneId?: string(name='ZoneId'),
}

model ListGrantVSwitchesToCenResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vSwitches?: [ 
    {
      vSwitchId?: string(name='VSwitchId'),
      vpcId?: string(name='VpcId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='VSwitches'),
}

model ListGrantVSwitchesToCenResponse = {
  headers: map[string]string(name='headers'),
  body: ListGrantVSwitchesToCenResponseBody(name='body'),
}

async function listGrantVSwitchesToCenWithOptions(request: ListGrantVSwitchesToCenRequest, runtime: Util.RuntimeOptions): ListGrantVSwitchesToCenResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['VpcId'] = request.vpcId;
  query['ZoneId'] = request.zoneId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGrantVSwitchesToCen',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listGrantVSwitchesToCen(request: ListGrantVSwitchesToCenRequest): ListGrantVSwitchesToCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGrantVSwitchesToCenWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageSize?: int32(name='PageSize'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  query['NextToken'] = request.nextToken;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageSize'] = request.pageSize;
  query['ResourceId'] = request.resourceId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['ResourceType'] = request.resourceType;
  query['Tag'] = request.tag;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ListTrafficMarkingPoliciesRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMarkingPolicyDescription?: string(name='TrafficMarkingPolicyDescription'),
  trafficMarkingPolicyId?: string(name='TrafficMarkingPolicyId'),
  trafficMarkingPolicyName?: string(name='TrafficMarkingPolicyName'),
  transitRouterId?: string(name='TransitRouterId'),
}

model ListTrafficMarkingPoliciesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  trafficMarkingPolicies?: [ 
    {
      markingDscp?: int32(name='MarkingDscp'),
      priority?: int32(name='Priority'),
      trafficMarkingPolicyDescription?: string(name='TrafficMarkingPolicyDescription'),
      trafficMarkingPolicyId?: string(name='TrafficMarkingPolicyId'),
      trafficMarkingPolicyName?: string(name='TrafficMarkingPolicyName'),
      trafficMarkingPolicyStatus?: string(name='TrafficMarkingPolicyStatus'),
      trafficMatchRules?: [ 
        {
          dstCidr?: string(name='DstCidr'),
          dstPortRange?: [ int32 ](name='DstPortRange'),
          matchDscp?: int32(name='MatchDscp'),
          protocol?: string(name='Protocol'),
          srcCidr?: string(name='SrcCidr'),
          srcPortRange?: [ int32 ](name='SrcPortRange'),
          trafficMatchRuleDescription?: string(name='TrafficMatchRuleDescription'),
          trafficMatchRuleId?: string(name='TrafficMatchRuleId'),
          trafficMatchRuleName?: string(name='TrafficMatchRuleName'),
          trafficMatchRuleStatus?: string(name='TrafficMatchRuleStatus'),
        }
      ](name='TrafficMatchRules'),
    }
  ](name='TrafficMarkingPolicies'),
}

model ListTrafficMarkingPoliciesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTrafficMarkingPoliciesResponseBody(name='body'),
}

async function listTrafficMarkingPoliciesWithOptions(request: ListTrafficMarkingPoliciesRequest, runtime: Util.RuntimeOptions): ListTrafficMarkingPoliciesResponse {
  Util.validateModel(request);
  var query = {};
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TrafficMarkingPolicyDescription'] = request.trafficMarkingPolicyDescription;
  query['TrafficMarkingPolicyId'] = request.trafficMarkingPolicyId;
  query['TrafficMarkingPolicyName'] = request.trafficMarkingPolicyName;
  query['TransitRouterId'] = request.transitRouterId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTrafficMarkingPolicies',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTrafficMarkingPolicies(request: ListTrafficMarkingPoliciesRequest): ListTrafficMarkingPoliciesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTrafficMarkingPoliciesWithOptions(request, runtime);
}

model ListTransitRouterAvailableResourceRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListTransitRouterAvailableResourceResponseBody = {
  masterZones?: [ string ](name='MasterZones'),
  requestId?: string(name='RequestId'),
  slaveZones?: [ string ](name='SlaveZones'),
}

model ListTransitRouterAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterAvailableResourceResponseBody(name='body'),
}

async function listTransitRouterAvailableResourceWithOptions(request: ListTransitRouterAvailableResourceRequest, runtime: Util.RuntimeOptions): ListTransitRouterAvailableResourceResponse {
  Util.validateModel(request);
  var query = {};
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTransitRouterAvailableResource',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTransitRouterAvailableResource(request: ListTransitRouterAvailableResourceRequest): ListTransitRouterAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTransitRouterAvailableResourceWithOptions(request, runtime);
}

model ListTransitRouterPeerAttachmentsRequest {
  cenId?: string(name='CenId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterId?: string(name='TransitRouterId'),
}

model ListTransitRouterPeerAttachmentsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouterAttachments?: [ 
    {
      autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled'),
      bandwidth?: int32(name='Bandwidth'),
      bandwidthType?: string(name='BandwidthType'),
      cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
      creationTime?: string(name='CreationTime'),
      geographicSpanId?: string(name='GeographicSpanId'),
      peerTransitRouterId?: string(name='PeerTransitRouterId'),
      peerTransitRouterOwnerId?: long(name='PeerTransitRouterOwnerId'),
      peerTransitRouterRegionId?: string(name='PeerTransitRouterRegionId'),
      regionId?: string(name='RegionId'),
      resourceType?: string(name='ResourceType'),
      status?: string(name='Status'),
      transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
      transitRouterAttachmentName?: string(name='TransitRouterAttachmentName'),
      transitRouterId?: string(name='TransitRouterId'),
    }
  ](name='TransitRouterAttachments'),
}

model ListTransitRouterPeerAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterPeerAttachmentsResponseBody(name='body'),
}

async function listTransitRouterPeerAttachmentsWithOptions(request: ListTransitRouterPeerAttachmentsRequest, runtime: Util.RuntimeOptions): ListTransitRouterPeerAttachmentsResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterId'] = request.transitRouterId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTransitRouterPeerAttachments',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTransitRouterPeerAttachments(request: ListTransitRouterPeerAttachmentsRequest): ListTransitRouterPeerAttachmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTransitRouterPeerAttachmentsWithOptions(request, runtime);
}

model ListTransitRouterRouteEntriesRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterRouteEntryDestinationCidrBlock?: string(name='TransitRouterRouteEntryDestinationCidrBlock'),
  transitRouterRouteEntryIds?: [ string ](name='TransitRouterRouteEntryIds'),
  transitRouterRouteEntryNames?: [ string ](name='TransitRouterRouteEntryNames'),
  transitRouterRouteEntryStatus?: string(name='TransitRouterRouteEntryStatus'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
}

model ListTransitRouterRouteEntriesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouterRouteEntries?: [ 
    {
      createTime?: string(name='CreateTime'),
      transitRouterRouteEntryDescription?: string(name='TransitRouterRouteEntryDescription'),
      transitRouterRouteEntryDestinationCidrBlock?: string(name='TransitRouterRouteEntryDestinationCidrBlock'),
      transitRouterRouteEntryId?: string(name='TransitRouterRouteEntryId'),
      transitRouterRouteEntryName?: string(name='TransitRouterRouteEntryName'),
      transitRouterRouteEntryNextHopId?: string(name='TransitRouterRouteEntryNextHopId'),
      transitRouterRouteEntryNextHopType?: string(name='TransitRouterRouteEntryNextHopType'),
      transitRouterRouteEntryStatus?: string(name='TransitRouterRouteEntryStatus'),
      transitRouterRouteEntryType?: string(name='TransitRouterRouteEntryType'),
    }
  ](name='TransitRouterRouteEntries'),
}

model ListTransitRouterRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterRouteEntriesResponseBody(name='body'),
}

async function listTransitRouterRouteEntriesWithOptions(request: ListTransitRouterRouteEntriesRequest, runtime: Util.RuntimeOptions): ListTransitRouterRouteEntriesResponse {
  Util.validateModel(request);
  var query = {};
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterRouteEntryDestinationCidrBlock'] = request.transitRouterRouteEntryDestinationCidrBlock;
  query['TransitRouterRouteEntryIds'] = request.transitRouterRouteEntryIds;
  query['TransitRouterRouteEntryNames'] = request.transitRouterRouteEntryNames;
  query['TransitRouterRouteEntryStatus'] = request.transitRouterRouteEntryStatus;
  query['TransitRouterRouteTableId'] = request.transitRouterRouteTableId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTransitRouterRouteEntries',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTransitRouterRouteEntries(request: ListTransitRouterRouteEntriesRequest): ListTransitRouterRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTransitRouterRouteEntriesWithOptions(request, runtime);
}

model ListTransitRouterRouteTableAssociationsRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
}

model ListTransitRouterRouteTableAssociationsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouterAssociations?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      status?: string(name='Status'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
      transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
    }
  ](name='TransitRouterAssociations'),
}

model ListTransitRouterRouteTableAssociationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterRouteTableAssociationsResponseBody(name='body'),
}

async function listTransitRouterRouteTableAssociationsWithOptions(request: ListTransitRouterRouteTableAssociationsRequest, runtime: Util.RuntimeOptions): ListTransitRouterRouteTableAssociationsResponse {
  Util.validateModel(request);
  var query = {};
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterRouteTableId'] = request.transitRouterRouteTableId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTransitRouterRouteTableAssociations',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTransitRouterRouteTableAssociations(request: ListTransitRouterRouteTableAssociationsRequest): ListTransitRouterRouteTableAssociationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTransitRouterRouteTableAssociationsWithOptions(request, runtime);
}

model ListTransitRouterRouteTablePropagationsRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
}

model ListTransitRouterRouteTablePropagationsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouterPropagations?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      status?: string(name='Status'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
      transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
    }
  ](name='TransitRouterPropagations'),
}

model ListTransitRouterRouteTablePropagationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterRouteTablePropagationsResponseBody(name='body'),
}

async function listTransitRouterRouteTablePropagationsWithOptions(request: ListTransitRouterRouteTablePropagationsRequest, runtime: Util.RuntimeOptions): ListTransitRouterRouteTablePropagationsResponse {
  Util.validateModel(request);
  var query = {};
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterRouteTableId'] = request.transitRouterRouteTableId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTransitRouterRouteTablePropagations',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTransitRouterRouteTablePropagations(request: ListTransitRouterRouteTablePropagationsRequest): ListTransitRouterRouteTablePropagationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTransitRouterRouteTablePropagationsWithOptions(request, runtime);
}

model ListTransitRouterRouteTablesRequest {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterId?: string(name='TransitRouterId'),
  transitRouterRouteTableIds?: [ string ](name='TransitRouterRouteTableIds'),
  transitRouterRouteTableNames?: [ string ](name='TransitRouterRouteTableNames'),
  transitRouterRouteTableStatus?: string(name='TransitRouterRouteTableStatus'),
  transitRouterRouteTableType?: string(name='TransitRouterRouteTableType'),
}

model ListTransitRouterRouteTablesResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouterRouteTables?: [ 
    {
      createTime?: string(name='CreateTime'),
      transitRouterRouteTableDescription?: string(name='TransitRouterRouteTableDescription'),
      transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
      transitRouterRouteTableName?: string(name='TransitRouterRouteTableName'),
      transitRouterRouteTableStatus?: string(name='TransitRouterRouteTableStatus'),
      transitRouterRouteTableType?: string(name='TransitRouterRouteTableType'),
    }
  ](name='TransitRouterRouteTables'),
}

model ListTransitRouterRouteTablesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterRouteTablesResponseBody(name='body'),
}

async function listTransitRouterRouteTablesWithOptions(request: ListTransitRouterRouteTablesRequest, runtime: Util.RuntimeOptions): ListTransitRouterRouteTablesResponse {
  Util.validateModel(request);
  var query = {};
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterId'] = request.transitRouterId;
  query['TransitRouterRouteTableIds'] = request.transitRouterRouteTableIds;
  query['TransitRouterRouteTableNames'] = request.transitRouterRouteTableNames;
  query['TransitRouterRouteTableStatus'] = request.transitRouterRouteTableStatus;
  query['TransitRouterRouteTableType'] = request.transitRouterRouteTableType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTransitRouterRouteTables',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTransitRouterRouteTables(request: ListTransitRouterRouteTablesRequest): ListTransitRouterRouteTablesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTransitRouterRouteTablesWithOptions(request, runtime);
}

model ListTransitRouterVbrAttachmentsRequest {
  cenId?: string(name='CenId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterId?: string(name='TransitRouterId'),
}

model ListTransitRouterVbrAttachmentsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouterAttachments?: [ 
    {
      autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled'),
      creationTime?: string(name='CreationTime'),
      resourceType?: string(name='ResourceType'),
      status?: string(name='Status'),
      transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
      transitRouterAttachmentName?: string(name='TransitRouterAttachmentName'),
      transitRouterId?: string(name='TransitRouterId'),
      vbrId?: string(name='VbrId'),
      vbrOwnerId?: long(name='VbrOwnerId'),
      vbrRegionId?: string(name='VbrRegionId'),
    }
  ](name='TransitRouterAttachments'),
}

model ListTransitRouterVbrAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterVbrAttachmentsResponseBody(name='body'),
}

async function listTransitRouterVbrAttachmentsWithOptions(request: ListTransitRouterVbrAttachmentsRequest, runtime: Util.RuntimeOptions): ListTransitRouterVbrAttachmentsResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterId'] = request.transitRouterId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTransitRouterVbrAttachments',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTransitRouterVbrAttachments(request: ListTransitRouterVbrAttachmentsRequest): ListTransitRouterVbrAttachmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTransitRouterVbrAttachmentsWithOptions(request, runtime);
}

model ListTransitRouterVpcAttachmentsRequest {
  cenId?: string(name='CenId'),
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterId?: string(name='TransitRouterId'),
}

model ListTransitRouterVpcAttachmentsResponseBody = {
  maxResults?: int32(name='MaxResults'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouterAttachments?: [ 
    {
      creationTime?: string(name='CreationTime'),
      resourceType?: string(name='ResourceType'),
      status?: string(name='Status'),
      transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription'),
      transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
      transitRouterAttachmentName?: string(name='TransitRouterAttachmentName'),
      transitRouterId?: string(name='TransitRouterId'),
      vpcId?: string(name='VpcId'),
      vpcOwnerId?: long(name='VpcOwnerId'),
      vpcRegionId?: string(name='VpcRegionId'),
      zoneMappings?: [ 
        {
          vSwitchId?: string(name='VSwitchId'),
          zoneId?: string(name='ZoneId'),
        }
      ](name='ZoneMappings'),
    }
  ](name='TransitRouterAttachments'),
}

model ListTransitRouterVpcAttachmentsResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRouterVpcAttachmentsResponseBody(name='body'),
}

async function listTransitRouterVpcAttachmentsWithOptions(request: ListTransitRouterVpcAttachmentsRequest, runtime: Util.RuntimeOptions): ListTransitRouterVpcAttachmentsResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['MaxResults'] = request.maxResults;
  query['NextToken'] = request.nextToken;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterId'] = request.transitRouterId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTransitRouterVpcAttachments',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTransitRouterVpcAttachments(request: ListTransitRouterVpcAttachmentsRequest): ListTransitRouterVpcAttachmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTransitRouterVpcAttachmentsWithOptions(request, runtime);
}

model ListTransitRoutersRequest {
  cenId?: string(name='CenId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterId?: string(name='TransitRouterId'),
}

model ListTransitRoutersResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  transitRouters?: [ 
    {
      aliUid?: long(name='AliUid'),
      cenId?: string(name='CenId'),
      creationTime?: string(name='CreationTime'),
      regionId?: string(name='RegionId'),
      status?: string(name='Status'),
      transitRouterDescription?: string(name='TransitRouterDescription'),
      transitRouterId?: string(name='TransitRouterId'),
      transitRouterName?: string(name='TransitRouterName'),
      type?: string(name='Type'),
    }
  ](name='TransitRouters'),
}

model ListTransitRoutersResponse = {
  headers: map[string]string(name='headers'),
  body: ListTransitRoutersResponseBody(name='body'),
}

async function listTransitRoutersWithOptions(request: ListTransitRoutersRequest, runtime: Util.RuntimeOptions): ListTransitRoutersResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['PageNumber'] = request.pageNumber;
  query['PageSize'] = request.pageSize;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterId'] = request.transitRouterId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTransitRouters',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTransitRouters(request: ListTransitRoutersRequest): ListTransitRoutersResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTransitRoutersWithOptions(request, runtime);
}

model ModifyCenAttributeRequest {
  cenId?: string(name='CenId'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  protectionLevel?: string(name='ProtectionLevel'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyCenAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCenAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenAttributeResponseBody(name='body'),
}

async function modifyCenAttributeWithOptions(request: ModifyCenAttributeRequest, runtime: Util.RuntimeOptions): ModifyCenAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['Description'] = request.description;
  query['Name'] = request.name;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ProtectionLevel'] = request.protectionLevel;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCenAttribute',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCenAttribute(request: ModifyCenAttributeRequest): ModifyCenAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCenAttributeWithOptions(request, runtime);
}

model ModifyCenBandwidthPackageAttributeRequest {
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
  description?: string(name='Description'),
  name?: string(name='Name'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyCenBandwidthPackageAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCenBandwidthPackageAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenBandwidthPackageAttributeResponseBody(name='body'),
}

async function modifyCenBandwidthPackageAttributeWithOptions(request: ModifyCenBandwidthPackageAttributeRequest, runtime: Util.RuntimeOptions): ModifyCenBandwidthPackageAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['CenBandwidthPackageId'] = request.cenBandwidthPackageId;
  query['Description'] = request.description;
  query['Name'] = request.name;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCenBandwidthPackageAttribute',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCenBandwidthPackageAttribute(request: ModifyCenBandwidthPackageAttributeRequest): ModifyCenBandwidthPackageAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCenBandwidthPackageAttributeWithOptions(request, runtime);
}

model ModifyCenBandwidthPackageSpecRequest {
  bandwidth?: int32(name='Bandwidth'),
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyCenBandwidthPackageSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCenBandwidthPackageSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenBandwidthPackageSpecResponseBody(name='body'),
}

async function modifyCenBandwidthPackageSpecWithOptions(request: ModifyCenBandwidthPackageSpecRequest, runtime: Util.RuntimeOptions): ModifyCenBandwidthPackageSpecResponse {
  Util.validateModel(request);
  var query = {};
  query['Bandwidth'] = request.bandwidth;
  query['CenBandwidthPackageId'] = request.cenBandwidthPackageId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCenBandwidthPackageSpec',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCenBandwidthPackageSpec(request: ModifyCenBandwidthPackageSpecRequest): ModifyCenBandwidthPackageSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCenBandwidthPackageSpecWithOptions(request, runtime);
}

model ModifyCenRouteMapRequest {
  asPathMatchMode?: string(name='AsPathMatchMode'),
  cenId?: string(name='CenId'),
  cenRegionId?: string(name='CenRegionId'),
  cidrMatchMode?: string(name='CidrMatchMode'),
  communityMatchMode?: string(name='CommunityMatchMode'),
  communityOperateMode?: string(name='CommunityOperateMode'),
  description?: string(name='Description'),
  destinationChildInstanceTypes?: [ string ](name='DestinationChildInstanceTypes'),
  destinationCidrBlocks?: [ string ](name='DestinationCidrBlocks'),
  destinationInstanceIds?: [ string ](name='DestinationInstanceIds'),
  destinationInstanceIdsReverseMatch?: boolean(name='DestinationInstanceIdsReverseMatch'),
  destinationRouteTableIds?: [ string ](name='DestinationRouteTableIds'),
  mapResult?: string(name='MapResult'),
  matchAsns?: [ int32 ](name='MatchAsns'),
  matchCommunitySet?: [ string ](name='MatchCommunitySet'),
  nextPriority?: int32(name='NextPriority'),
  operateCommunitySet?: [ string ](name='OperateCommunitySet'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  preference?: int32(name='Preference'),
  prependAsPath?: [ long ](name='PrependAsPath'),
  priority?: int32(name='Priority'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  routeMapId?: string(name='RouteMapId'),
  routeTypes?: [ string ](name='RouteTypes'),
  sourceChildInstanceTypes?: [ string ](name='SourceChildInstanceTypes'),
  sourceInstanceIds?: [ string ](name='SourceInstanceIds'),
  sourceInstanceIdsReverseMatch?: boolean(name='SourceInstanceIdsReverseMatch'),
  sourceRegionIds?: [ string ](name='SourceRegionIds'),
  sourceRouteTableIds?: [ string ](name='SourceRouteTableIds'),
}

model ModifyCenRouteMapResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCenRouteMapResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenRouteMapResponseBody(name='body'),
}

async function modifyCenRouteMapWithOptions(request: ModifyCenRouteMapRequest, runtime: Util.RuntimeOptions): ModifyCenRouteMapResponse {
  Util.validateModel(request);
  var query = {};
  query['AsPathMatchMode'] = request.asPathMatchMode;
  query['CenId'] = request.cenId;
  query['CenRegionId'] = request.cenRegionId;
  query['CidrMatchMode'] = request.cidrMatchMode;
  query['CommunityMatchMode'] = request.communityMatchMode;
  query['CommunityOperateMode'] = request.communityOperateMode;
  query['Description'] = request.description;
  query['DestinationChildInstanceTypes'] = request.destinationChildInstanceTypes;
  query['DestinationCidrBlocks'] = request.destinationCidrBlocks;
  query['DestinationInstanceIds'] = request.destinationInstanceIds;
  query['DestinationInstanceIdsReverseMatch'] = request.destinationInstanceIdsReverseMatch;
  query['DestinationRouteTableIds'] = request.destinationRouteTableIds;
  query['MapResult'] = request.mapResult;
  query['MatchAsns'] = request.matchAsns;
  query['MatchCommunitySet'] = request.matchCommunitySet;
  query['NextPriority'] = request.nextPriority;
  query['OperateCommunitySet'] = request.operateCommunitySet;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['Preference'] = request.preference;
  query['PrependAsPath'] = request.prependAsPath;
  query['Priority'] = request.priority;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['RouteMapId'] = request.routeMapId;
  query['RouteTypes'] = request.routeTypes;
  query['SourceChildInstanceTypes'] = request.sourceChildInstanceTypes;
  query['SourceInstanceIds'] = request.sourceInstanceIds;
  query['SourceInstanceIdsReverseMatch'] = request.sourceInstanceIdsReverseMatch;
  query['SourceRegionIds'] = request.sourceRegionIds;
  query['SourceRouteTableIds'] = request.sourceRouteTableIds;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCenRouteMap',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCenRouteMap(request: ModifyCenRouteMapRequest): ModifyCenRouteMapResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCenRouteMapWithOptions(request, runtime);
}

model ModifyFlowLogAttributeRequest {
  cenId?: string(name='CenId'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  flowLogId?: string(name='FlowLogId'),
  flowLogName?: string(name='FlowLogName'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyFlowLogAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model ModifyFlowLogAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFlowLogAttributeResponseBody(name='body'),
}

async function modifyFlowLogAttributeWithOptions(request: ModifyFlowLogAttributeRequest, runtime: Util.RuntimeOptions): ModifyFlowLogAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ClientToken'] = request.clientToken;
  query['Description'] = request.description;
  query['FlowLogId'] = request.flowLogId;
  query['FlowLogName'] = request.flowLogName;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFlowLogAttribute',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyFlowLogAttribute(request: ModifyFlowLogAttributeRequest): ModifyFlowLogAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFlowLogAttributeWithOptions(request, runtime);
}

model MoveResourceGroupRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  newResourceGroupId?: string(name='NewResourceGroupId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceId?: string(name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
}

model MoveResourceGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model MoveResourceGroupResponse = {
  headers: map[string]string(name='headers'),
  body: MoveResourceGroupResponseBody(name='body'),
}

async function moveResourceGroupWithOptions(request: MoveResourceGroupRequest, runtime: Util.RuntimeOptions): MoveResourceGroupResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['NewResourceGroupId'] = request.newResourceGroupId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceId'] = request.resourceId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['ResourceType'] = request.resourceType;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'MoveResourceGroup',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function moveResourceGroup(request: MoveResourceGroupRequest): MoveResourceGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return moveResourceGroupWithOptions(request, runtime);
}

model OpenTransitRouterServiceRequest {
  clientToken?: string(name='ClientToken'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model OpenTransitRouterServiceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model OpenTransitRouterServiceResponse = {
  headers: map[string]string(name='headers'),
  body: OpenTransitRouterServiceResponseBody(name='body'),
}

async function openTransitRouterServiceWithOptions(request: OpenTransitRouterServiceRequest, runtime: Util.RuntimeOptions): OpenTransitRouterServiceResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OpenTransitRouterService',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function openTransitRouterService(request: OpenTransitRouterServiceRequest): OpenTransitRouterServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return openTransitRouterServiceWithOptions(request, runtime);
}

model PublishRouteEntriesRequest {
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId'),
  childInstanceType?: string(name='ChildInstanceType'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PublishRouteEntriesResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: PublishRouteEntriesResponseBody(name='body'),
}

async function publishRouteEntriesWithOptions(request: PublishRouteEntriesRequest, runtime: Util.RuntimeOptions): PublishRouteEntriesResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ChildInstanceId'] = request.childInstanceId;
  query['ChildInstanceRegionId'] = request.childInstanceRegionId;
  query['ChildInstanceRouteTableId'] = request.childInstanceRouteTableId;
  query['ChildInstanceType'] = request.childInstanceType;
  query['DestinationCidrBlock'] = request.destinationCidrBlock;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishRouteEntries',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function publishRouteEntries(request: PublishRouteEntriesRequest): PublishRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishRouteEntriesWithOptions(request, runtime);
}

model RemoveTraficMatchRuleFromTrafficMarkingPolicyRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMarkRuleIds?: [ string ](name='TrafficMarkRuleIds'),
  trafficMarkingPolicyId?: string(name='TrafficMarkingPolicyId'),
}

model RemoveTraficMatchRuleFromTrafficMarkingPolicyResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveTraficMatchRuleFromTrafficMarkingPolicyResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveTraficMatchRuleFromTrafficMarkingPolicyResponseBody(name='body'),
}

async function removeTraficMatchRuleFromTrafficMarkingPolicyWithOptions(request: RemoveTraficMatchRuleFromTrafficMarkingPolicyRequest, runtime: Util.RuntimeOptions): RemoveTraficMatchRuleFromTrafficMarkingPolicyResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TrafficMarkRuleIds'] = request.trafficMarkRuleIds;
  query['TrafficMarkingPolicyId'] = request.trafficMarkingPolicyId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RemoveTraficMatchRuleFromTrafficMarkingPolicy',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function removeTraficMatchRuleFromTrafficMarkingPolicy(request: RemoveTraficMatchRuleFromTrafficMarkingPolicyRequest): RemoveTraficMatchRuleFromTrafficMarkingPolicyResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeTraficMatchRuleFromTrafficMarkingPolicyWithOptions(request, runtime);
}

model ReplaceTransitRouterRouteTableAssociationRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
}

model ReplaceTransitRouterRouteTableAssociationResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReplaceTransitRouterRouteTableAssociationResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceTransitRouterRouteTableAssociationResponseBody(name='body'),
}

async function replaceTransitRouterRouteTableAssociationWithOptions(request: ReplaceTransitRouterRouteTableAssociationRequest, runtime: Util.RuntimeOptions): ReplaceTransitRouterRouteTableAssociationResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterRouteTableId'] = request.transitRouterRouteTableId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReplaceTransitRouterRouteTableAssociation',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function replaceTransitRouterRouteTableAssociation(request: ReplaceTransitRouterRouteTableAssociationRequest): ReplaceTransitRouterRouteTableAssociationResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceTransitRouterRouteTableAssociationWithOptions(request, runtime);
}

model ResolveAndRouteServiceInCenRequest {
  accessRegionIds?: [ string ](name='AccessRegionIds'),
  cenId?: string(name='CenId'),
  clientToken?: string(name='ClientToken'),
  description?: string(name='Description'),
  host?: string(name='Host'),
  hostRegionId?: string(name='HostRegionId'),
  hostVpcId?: string(name='HostVpcId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ResolveAndRouteServiceInCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResolveAndRouteServiceInCenResponse = {
  headers: map[string]string(name='headers'),
  body: ResolveAndRouteServiceInCenResponseBody(name='body'),
}

async function resolveAndRouteServiceInCenWithOptions(request: ResolveAndRouteServiceInCenRequest, runtime: Util.RuntimeOptions): ResolveAndRouteServiceInCenResponse {
  Util.validateModel(request);
  var query = {};
  query['AccessRegionIds'] = request.accessRegionIds;
  query['CenId'] = request.cenId;
  query['ClientToken'] = request.clientToken;
  query['Description'] = request.description;
  query['Host'] = request.host;
  query['HostRegionId'] = request.hostRegionId;
  query['HostVpcId'] = request.hostVpcId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ResolveAndRouteServiceInCen',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function resolveAndRouteServiceInCen(request: ResolveAndRouteServiceInCenRequest): ResolveAndRouteServiceInCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return resolveAndRouteServiceInCenWithOptions(request, runtime);
}

model RevokeInstanceFromTransitRouterRequest {
  cenId?: string(name='CenId'),
  cenOwnerId?: long(name='CenOwnerId'),
  instanceId?: string(name='InstanceId'),
  instanceType?: string(name='InstanceType'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RevokeInstanceFromTransitRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeInstanceFromTransitRouterResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeInstanceFromTransitRouterResponseBody(name='body'),
}

async function revokeInstanceFromTransitRouterWithOptions(request: RevokeInstanceFromTransitRouterRequest, runtime: Util.RuntimeOptions): RevokeInstanceFromTransitRouterResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['CenOwnerId'] = request.cenOwnerId;
  query['InstanceId'] = request.instanceId;
  query['InstanceType'] = request.instanceType;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeInstanceFromTransitRouter',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function revokeInstanceFromTransitRouter(request: RevokeInstanceFromTransitRouterRequest): RevokeInstanceFromTransitRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeInstanceFromTransitRouterWithOptions(request, runtime);
}

model RoutePrivateZoneInCenToVpcRequest {
  accessRegionId?: string(name='AccessRegionId'),
  cenId?: string(name='CenId'),
  hostRegionId?: string(name='HostRegionId'),
  hostVpcId?: string(name='HostVpcId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RoutePrivateZoneInCenToVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model RoutePrivateZoneInCenToVpcResponse = {
  headers: map[string]string(name='headers'),
  body: RoutePrivateZoneInCenToVpcResponseBody(name='body'),
}

async function routePrivateZoneInCenToVpcWithOptions(request: RoutePrivateZoneInCenToVpcRequest, runtime: Util.RuntimeOptions): RoutePrivateZoneInCenToVpcResponse {
  Util.validateModel(request);
  var query = {};
  query['AccessRegionId'] = request.accessRegionId;
  query['CenId'] = request.cenId;
  query['HostRegionId'] = request.hostRegionId;
  query['HostVpcId'] = request.hostVpcId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RoutePrivateZoneInCenToVpc',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function routePrivateZoneInCenToVpc(request: RoutePrivateZoneInCenToVpcRequest): RoutePrivateZoneInCenToVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return routePrivateZoneInCenToVpcWithOptions(request, runtime);
}

model SetCenInterRegionBandwidthLimitRequest {
  bandwidthLimit?: long(name='BandwidthLimit'),
  cenId?: string(name='CenId'),
  localRegionId?: string(name='LocalRegionId'),
  oppositeRegionId?: string(name='OppositeRegionId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model SetCenInterRegionBandwidthLimitResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCenInterRegionBandwidthLimitResponse = {
  headers: map[string]string(name='headers'),
  body: SetCenInterRegionBandwidthLimitResponseBody(name='body'),
}

async function setCenInterRegionBandwidthLimitWithOptions(request: SetCenInterRegionBandwidthLimitRequest, runtime: Util.RuntimeOptions): SetCenInterRegionBandwidthLimitResponse {
  Util.validateModel(request);
  var query = {};
  query['BandwidthLimit'] = request.bandwidthLimit;
  query['CenId'] = request.cenId;
  query['LocalRegionId'] = request.localRegionId;
  query['OppositeRegionId'] = request.oppositeRegionId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetCenInterRegionBandwidthLimit',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setCenInterRegionBandwidthLimit(request: SetCenInterRegionBandwidthLimitRequest): SetCenInterRegionBandwidthLimitResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCenInterRegionBandwidthLimitWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceId'] = request.resourceId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['ResourceType'] = request.resourceType;
  query['Tag'] = request.tag;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model TempUpgradeCenBandwidthPackageSpecRequest {
  bandwidth?: int32(name='Bandwidth'),
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
  endTime?: string(name='EndTime'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model TempUpgradeCenBandwidthPackageSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model TempUpgradeCenBandwidthPackageSpecResponse = {
  headers: map[string]string(name='headers'),
  body: TempUpgradeCenBandwidthPackageSpecResponseBody(name='body'),
}

async function tempUpgradeCenBandwidthPackageSpecWithOptions(request: TempUpgradeCenBandwidthPackageSpecRequest, runtime: Util.RuntimeOptions): TempUpgradeCenBandwidthPackageSpecResponse {
  Util.validateModel(request);
  var query = {};
  query['Bandwidth'] = request.bandwidth;
  query['CenBandwidthPackageId'] = request.cenBandwidthPackageId;
  query['EndTime'] = request.endTime;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TempUpgradeCenBandwidthPackageSpec',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tempUpgradeCenBandwidthPackageSpec(request: TempUpgradeCenBandwidthPackageSpecRequest): TempUpgradeCenBandwidthPackageSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return tempUpgradeCenBandwidthPackageSpecWithOptions(request, runtime);
}

model UnassociateCenBandwidthPackageRequest {
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
  cenId?: string(name='CenId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UnassociateCenBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnassociateCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateCenBandwidthPackageResponseBody(name='body'),
}

async function unassociateCenBandwidthPackageWithOptions(request: UnassociateCenBandwidthPackageRequest, runtime: Util.RuntimeOptions): UnassociateCenBandwidthPackageResponse {
  Util.validateModel(request);
  var query = {};
  query['CenBandwidthPackageId'] = request.cenBandwidthPackageId;
  query['CenId'] = request.cenId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnassociateCenBandwidthPackage',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unassociateCenBandwidthPackage(request: UnassociateCenBandwidthPackageRequest): UnassociateCenBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateCenBandwidthPackageWithOptions(request, runtime);
}

model UnroutePrivateZoneInCenToVpcRequest {
  accessRegionId?: string(name='AccessRegionId'),
  cenId?: string(name='CenId'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UnroutePrivateZoneInCenToVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnroutePrivateZoneInCenToVpcResponse = {
  headers: map[string]string(name='headers'),
  body: UnroutePrivateZoneInCenToVpcResponseBody(name='body'),
}

async function unroutePrivateZoneInCenToVpcWithOptions(request: UnroutePrivateZoneInCenToVpcRequest, runtime: Util.RuntimeOptions): UnroutePrivateZoneInCenToVpcResponse {
  Util.validateModel(request);
  var query = {};
  query['AccessRegionId'] = request.accessRegionId;
  query['CenId'] = request.cenId;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnroutePrivateZoneInCenToVpc',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unroutePrivateZoneInCenToVpc(request: UnroutePrivateZoneInCenToVpcRequest): UnroutePrivateZoneInCenToVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return unroutePrivateZoneInCenToVpcWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  query['All'] = request.all;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceId'] = request.resourceId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['ResourceType'] = request.resourceType;
  query['TagKey'] = request.tagKey;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpdateCenInterRegionTrafficQosPolicyAttributeRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficQosPolicyDescription?: string(name='TrafficQosPolicyDescription'),
  trafficQosPolicyId?: string(name='TrafficQosPolicyId'),
  trafficQosPolicyName?: string(name='TrafficQosPolicyName'),
}

model UpdateCenInterRegionTrafficQosPolicyAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCenInterRegionTrafficQosPolicyAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCenInterRegionTrafficQosPolicyAttributeResponseBody(name='body'),
}

async function updateCenInterRegionTrafficQosPolicyAttributeWithOptions(request: UpdateCenInterRegionTrafficQosPolicyAttributeRequest, runtime: Util.RuntimeOptions): UpdateCenInterRegionTrafficQosPolicyAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TrafficQosPolicyDescription'] = request.trafficQosPolicyDescription;
  query['TrafficQosPolicyId'] = request.trafficQosPolicyId;
  query['TrafficQosPolicyName'] = request.trafficQosPolicyName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCenInterRegionTrafficQosPolicyAttribute',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCenInterRegionTrafficQosPolicyAttribute(request: UpdateCenInterRegionTrafficQosPolicyAttributeRequest): UpdateCenInterRegionTrafficQosPolicyAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCenInterRegionTrafficQosPolicyAttributeWithOptions(request, runtime);
}

model UpdateCenInterRegionTrafficQosQueueAttributeRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  dscps?: [ int32 ](name='Dscps'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  qosQueueDescription?: string(name='QosQueueDescription'),
  qosQueueId?: string(name='QosQueueId'),
  qosQueueName?: string(name='QosQueueName'),
  remainBandwidthPercent?: string(name='RemainBandwidthPercent'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateCenInterRegionTrafficQosQueueAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateCenInterRegionTrafficQosQueueAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateCenInterRegionTrafficQosQueueAttributeResponseBody(name='body'),
}

async function updateCenInterRegionTrafficQosQueueAttributeWithOptions(request: UpdateCenInterRegionTrafficQosQueueAttributeRequest, runtime: Util.RuntimeOptions): UpdateCenInterRegionTrafficQosQueueAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['Dscps'] = request.dscps;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['QosQueueDescription'] = request.qosQueueDescription;
  query['QosQueueId'] = request.qosQueueId;
  query['QosQueueName'] = request.qosQueueName;
  query['RemainBandwidthPercent'] = request.remainBandwidthPercent;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCenInterRegionTrafficQosQueueAttribute',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCenInterRegionTrafficQosQueueAttribute(request: UpdateCenInterRegionTrafficQosQueueAttributeRequest): UpdateCenInterRegionTrafficQosQueueAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCenInterRegionTrafficQosQueueAttributeWithOptions(request, runtime);
}

model UpdateTrafficMarkingPolicyAttributeRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  trafficMarkingPolicyDescription?: string(name='TrafficMarkingPolicyDescription'),
  trafficMarkingPolicyId?: string(name='TrafficMarkingPolicyId'),
  trafficMarkingPolicyName?: string(name='TrafficMarkingPolicyName'),
}

model UpdateTrafficMarkingPolicyAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTrafficMarkingPolicyAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTrafficMarkingPolicyAttributeResponseBody(name='body'),
}

async function updateTrafficMarkingPolicyAttributeWithOptions(request: UpdateTrafficMarkingPolicyAttributeRequest, runtime: Util.RuntimeOptions): UpdateTrafficMarkingPolicyAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TrafficMarkingPolicyDescription'] = request.trafficMarkingPolicyDescription;
  query['TrafficMarkingPolicyId'] = request.trafficMarkingPolicyId;
  query['TrafficMarkingPolicyName'] = request.trafficMarkingPolicyName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTrafficMarkingPolicyAttribute',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTrafficMarkingPolicyAttribute(request: UpdateTrafficMarkingPolicyAttributeRequest): UpdateTrafficMarkingPolicyAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTrafficMarkingPolicyAttributeWithOptions(request, runtime);
}

model UpdateTransitRouterRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterDescription?: string(name='TransitRouterDescription'),
  transitRouterId?: string(name='TransitRouterId'),
  transitRouterName?: string(name='TransitRouterName'),
}

model UpdateTransitRouterResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTransitRouterResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterResponseBody(name='body'),
}

async function updateTransitRouterWithOptions(request: UpdateTransitRouterRequest, runtime: Util.RuntimeOptions): UpdateTransitRouterResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterDescription'] = request.transitRouterDescription;
  query['TransitRouterId'] = request.transitRouterId;
  query['TransitRouterName'] = request.transitRouterName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTransitRouter',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTransitRouter(request: UpdateTransitRouterRequest): UpdateTransitRouterResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTransitRouterWithOptions(request, runtime);
}

model UpdateTransitRouterPeerAttachmentAttributeRequest {
  autoPublishRouteEnabled?: boolean(name='AutoPublishRouteEnabled'),
  bandwidth?: int32(name='Bandwidth'),
  bandwidthType?: string(name='BandwidthType'),
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName'),
}

model UpdateTransitRouterPeerAttachmentAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTransitRouterPeerAttachmentAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterPeerAttachmentAttributeResponseBody(name='body'),
}

async function updateTransitRouterPeerAttachmentAttributeWithOptions(request: UpdateTransitRouterPeerAttachmentAttributeRequest, runtime: Util.RuntimeOptions): UpdateTransitRouterPeerAttachmentAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['AutoPublishRouteEnabled'] = request.autoPublishRouteEnabled;
  query['Bandwidth'] = request.bandwidth;
  query['BandwidthType'] = request.bandwidthType;
  query['CenBandwidthPackageId'] = request.cenBandwidthPackageId;
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentDescription'] = request.transitRouterAttachmentDescription;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterAttachmentName'] = request.transitRouterAttachmentName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTransitRouterPeerAttachmentAttribute',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTransitRouterPeerAttachmentAttribute(request: UpdateTransitRouterPeerAttachmentAttributeRequest): UpdateTransitRouterPeerAttachmentAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTransitRouterPeerAttachmentAttributeWithOptions(request, runtime);
}

model UpdateTransitRouterRouteEntryRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterRouteEntryDescription?: string(name='TransitRouterRouteEntryDescription'),
  transitRouterRouteEntryId?: string(name='TransitRouterRouteEntryId'),
  transitRouterRouteEntryName?: string(name='TransitRouterRouteEntryName'),
}

model UpdateTransitRouterRouteEntryResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTransitRouterRouteEntryResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterRouteEntryResponseBody(name='body'),
}

async function updateTransitRouterRouteEntryWithOptions(request: UpdateTransitRouterRouteEntryRequest, runtime: Util.RuntimeOptions): UpdateTransitRouterRouteEntryResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterRouteEntryDescription'] = request.transitRouterRouteEntryDescription;
  query['TransitRouterRouteEntryId'] = request.transitRouterRouteEntryId;
  query['TransitRouterRouteEntryName'] = request.transitRouterRouteEntryName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTransitRouterRouteEntry',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTransitRouterRouteEntry(request: UpdateTransitRouterRouteEntryRequest): UpdateTransitRouterRouteEntryResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTransitRouterRouteEntryWithOptions(request, runtime);
}

model UpdateTransitRouterRouteTableRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterRouteTableDescription?: string(name='TransitRouterRouteTableDescription'),
  transitRouterRouteTableId?: string(name='TransitRouterRouteTableId'),
  transitRouterRouteTableName?: string(name='TransitRouterRouteTableName'),
}

model UpdateTransitRouterRouteTableResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTransitRouterRouteTableResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterRouteTableResponseBody(name='body'),
}

async function updateTransitRouterRouteTableWithOptions(request: UpdateTransitRouterRouteTableRequest, runtime: Util.RuntimeOptions): UpdateTransitRouterRouteTableResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterRouteTableDescription'] = request.transitRouterRouteTableDescription;
  query['TransitRouterRouteTableId'] = request.transitRouterRouteTableId;
  query['TransitRouterRouteTableName'] = request.transitRouterRouteTableName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTransitRouterRouteTable',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTransitRouterRouteTable(request: UpdateTransitRouterRouteTableRequest): UpdateTransitRouterRouteTableResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTransitRouterRouteTableWithOptions(request, runtime);
}

model UpdateTransitRouterVbrAttachmentAttributeRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName'),
}

model UpdateTransitRouterVbrAttachmentAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTransitRouterVbrAttachmentAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterVbrAttachmentAttributeResponseBody(name='body'),
}

async function updateTransitRouterVbrAttachmentAttributeWithOptions(request: UpdateTransitRouterVbrAttachmentAttributeRequest, runtime: Util.RuntimeOptions): UpdateTransitRouterVbrAttachmentAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentDescription'] = request.transitRouterAttachmentDescription;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterAttachmentName'] = request.transitRouterAttachmentName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTransitRouterVbrAttachmentAttribute',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTransitRouterVbrAttachmentAttribute(request: UpdateTransitRouterVbrAttachmentAttributeRequest): UpdateTransitRouterVbrAttachmentAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTransitRouterVbrAttachmentAttributeWithOptions(request, runtime);
}

model UpdateTransitRouterVpcAttachmentAttributeRequest {
  clientToken?: string(name='ClientToken'),
  dryRun?: boolean(name='DryRun'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  transitRouterAttachmentDescription?: string(name='TransitRouterAttachmentDescription'),
  transitRouterAttachmentId?: string(name='TransitRouterAttachmentId'),
  transitRouterAttachmentName?: string(name='TransitRouterAttachmentName'),
}

model UpdateTransitRouterVpcAttachmentAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdateTransitRouterVpcAttachmentAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTransitRouterVpcAttachmentAttributeResponseBody(name='body'),
}

async function updateTransitRouterVpcAttachmentAttributeWithOptions(request: UpdateTransitRouterVpcAttachmentAttributeRequest, runtime: Util.RuntimeOptions): UpdateTransitRouterVpcAttachmentAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['ClientToken'] = request.clientToken;
  query['DryRun'] = request.dryRun;
  query['OwnerAccount'] = request.ownerAccount;
  query['OwnerId'] = request.ownerId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['TransitRouterAttachmentDescription'] = request.transitRouterAttachmentDescription;
  query['TransitRouterAttachmentId'] = request.transitRouterAttachmentId;
  query['TransitRouterAttachmentName'] = request.transitRouterAttachmentName;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateTransitRouterVpcAttachmentAttribute',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateTransitRouterVpcAttachmentAttribute(request: UpdateTransitRouterVpcAttachmentAttributeRequest): UpdateTransitRouterVpcAttachmentAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTransitRouterVpcAttachmentAttributeWithOptions(request, runtime);
}

model WithdrawPublishedRouteEntriesRequest {
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId'),
  childInstanceType?: string(name='ChildInstanceType'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model WithdrawPublishedRouteEntriesResponseBody = {
  requestId?: string(name='RequestId'),
}

model WithdrawPublishedRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: WithdrawPublishedRouteEntriesResponseBody(name='body'),
}

async function withdrawPublishedRouteEntriesWithOptions(request: WithdrawPublishedRouteEntriesRequest, runtime: Util.RuntimeOptions): WithdrawPublishedRouteEntriesResponse {
  Util.validateModel(request);
  var query = {};
  query['CenId'] = request.cenId;
  query['ChildInstanceId'] = request.childInstanceId;
  query['ChildInstanceRegionId'] = request.childInstanceRegionId;
  query['ChildInstanceRouteTableId'] = request.childInstanceRouteTableId;
  query['ChildInstanceType'] = request.childInstanceType;
  query['DestinationCidrBlock'] = request.destinationCidrBlock;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'WithdrawPublishedRouteEntries',
    version = '2017-09-12',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function withdrawPublishedRouteEntries(request: WithdrawPublishedRouteEntriesRequest): WithdrawPublishedRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return withdrawPublishedRouteEntriesWithOptions(request, runtime);
}

