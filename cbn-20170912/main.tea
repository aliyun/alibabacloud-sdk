/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'central';
  
  checkConfig(config);
  @endpoint = getEndpoint('cbn', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ActiveFlowLogRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  flowLogId?: string(name='FlowLogId'),
  cenId?: string(name='CenId'),
}

model ActiveFlowLogResponseBody = {
  success?: string(name='Success'),
  requestId?: string(name='RequestId'),
}

model ActiveFlowLogResponse = {
  headers: map[string]string(name='headers'),
  body: ActiveFlowLogResponseBody(name='body'),
}

async function activeFlowLogWithOptions(request: ActiveFlowLogRequest, runtime: Util.RuntimeOptions): ActiveFlowLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ActiveFlowLog', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function activeFlowLog(request: ActiveFlowLogRequest): ActiveFlowLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return activeFlowLogWithOptions(request, runtime);
}

model AssociateCenBandwidthPackageRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
}

model AssociateCenBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateCenBandwidthPackageResponseBody(name='body'),
}

async function associateCenBandwidthPackageWithOptions(request: AssociateCenBandwidthPackageRequest, runtime: Util.RuntimeOptions): AssociateCenBandwidthPackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssociateCenBandwidthPackage', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function associateCenBandwidthPackage(request: AssociateCenBandwidthPackageRequest): AssociateCenBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateCenBandwidthPackageWithOptions(request, runtime);
}

model AttachCenChildInstanceRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceType?: string(name='ChildInstanceType'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceOwnerId?: long(name='ChildInstanceOwnerId'),
}

model AttachCenChildInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachCenChildInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: AttachCenChildInstanceResponseBody(name='body'),
}

async function attachCenChildInstanceWithOptions(request: AttachCenChildInstanceRequest, runtime: Util.RuntimeOptions): AttachCenChildInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachCenChildInstance', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachCenChildInstance(request: AttachCenChildInstanceRequest): AttachCenChildInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachCenChildInstanceWithOptions(request, runtime);
}

model CreateCenRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  protectionLevel?: string(name='ProtectionLevel'),
}

model CreateCenResponseBody = {
  cenId?: string(name='CenId'),
  requestId?: string(name='RequestId'),
}

model CreateCenResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenResponseBody(name='body'),
}

async function createCenWithOptions(request: CreateCenRequest, runtime: Util.RuntimeOptions): CreateCenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCen', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCen(request: CreateCenRequest): CreateCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCenWithOptions(request, runtime);
}

model CreateCenBandwidthPackageRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  bandwidth?: int32(name='Bandwidth'),
  geographicRegionAId?: string(name='GeographicRegionAId'),
  geographicRegionBId?: string(name='GeographicRegionBId'),
  bandwidthPackageChargeType?: string(name='BandwidthPackageChargeType'),
  period?: int32(name='Period'),
  pricingCycle?: string(name='PricingCycle'),
  autoPay?: boolean(name='AutoPay'),
  autoRenew?: boolean(name='AutoRenew'),
  autoRenewDuration?: int32(name='AutoRenewDuration'),
}

model CreateCenBandwidthPackageResponseBody = {
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
  cenBandwidthPackageOrderId?: string(name='CenBandwidthPackageOrderId'),
  requestId?: string(name='RequestId'),
}

model CreateCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenBandwidthPackageResponseBody(name='body'),
}

async function createCenBandwidthPackageWithOptions(request: CreateCenBandwidthPackageRequest, runtime: Util.RuntimeOptions): CreateCenBandwidthPackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCenBandwidthPackage', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCenBandwidthPackage(request: CreateCenBandwidthPackageRequest): CreateCenBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCenBandwidthPackageWithOptions(request, runtime);
}

model CreateCenChildInstanceRouteEntryToCenRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceType?: string(name='ChildInstanceType'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceAliUid?: long(name='ChildInstanceAliUid'),
  routeTableId?: string(name='RouteTableId'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
}

model CreateCenChildInstanceRouteEntryToCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateCenChildInstanceRouteEntryToCenResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenChildInstanceRouteEntryToCenResponseBody(name='body'),
}

async function createCenChildInstanceRouteEntryToCenWithOptions(request: CreateCenChildInstanceRouteEntryToCenRequest, runtime: Util.RuntimeOptions): CreateCenChildInstanceRouteEntryToCenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCenChildInstanceRouteEntryToCen', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCenChildInstanceRouteEntryToCen(request: CreateCenChildInstanceRouteEntryToCenRequest): CreateCenChildInstanceRouteEntryToCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCenChildInstanceRouteEntryToCenWithOptions(request, runtime);
}

model CreateCenRouteMapRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  cenRegionId?: string(name='CenRegionId'),
  transmitDirection?: string(name='TransmitDirection'),
  description?: string(name='Description'),
  priority?: int32(name='Priority'),
  mapResult?: string(name='MapResult'),
  nextPriority?: int32(name='NextPriority'),
  cidrMatchMode?: string(name='CidrMatchMode'),
  asPathMatchMode?: string(name='AsPathMatchMode'),
  communityMatchMode?: string(name='CommunityMatchMode'),
  communityOperateMode?: string(name='CommunityOperateMode'),
  preference?: int32(name='Preference'),
  sourceInstanceIdsReverseMatch?: boolean(name='SourceInstanceIdsReverseMatch'),
  destinationInstanceIdsReverseMatch?: boolean(name='DestinationInstanceIdsReverseMatch'),
  sourceInstanceIds?: [ string ](name='SourceInstanceIds'),
  destinationInstanceIds?: [ string ](name='DestinationInstanceIds'),
  sourceRouteTableIds?: [ string ](name='SourceRouteTableIds'),
  destinationRouteTableIds?: [ string ](name='DestinationRouteTableIds'),
  sourceRegionIds?: [ string ](name='SourceRegionIds'),
  sourceChildInstanceTypes?: [ string ](name='SourceChildInstanceTypes'),
  destinationChildInstanceTypes?: [ string ](name='DestinationChildInstanceTypes'),
  destinationCidrBlocks?: [ string ](name='DestinationCidrBlocks'),
  routeTypes?: [ string ](name='RouteTypes'),
  matchAsns?: [ integer ](name='MatchAsns'),
  matchCommunitySet?: [ string ](name='MatchCommunitySet'),
  operateCommunitySet?: [ string ](name='OperateCommunitySet'),
  prependAsPath?: [ integer ](name='PrependAsPath'),
}

model CreateCenRouteMapResponseBody = {
  routeMapId?: string(name='RouteMapId'),
  requestId?: string(name='RequestId'),
}

model CreateCenRouteMapResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCenRouteMapResponseBody(name='body'),
}

async function createCenRouteMapWithOptions(request: CreateCenRouteMapRequest, runtime: Util.RuntimeOptions): CreateCenRouteMapResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCenRouteMap', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCenRouteMap(request: CreateCenRouteMapRequest): CreateCenRouteMapResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCenRouteMapWithOptions(request, runtime);
}

model CreateFlowlogRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  flowLogName?: string(name='FlowLogName'),
  description?: string(name='Description'),
  cenId?: string(name='CenId'),
  projectName?: string(name='ProjectName'),
  logStoreName?: string(name='LogStoreName'),
}

model CreateFlowlogResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  flowLogId?: string(name='FlowLogId'),
}

model CreateFlowlogResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowlogResponseBody(name='body'),
}

async function createFlowlogWithOptions(request: CreateFlowlogRequest, runtime: Util.RuntimeOptions): CreateFlowlogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateFlowlog', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createFlowlog(request: CreateFlowlogRequest): CreateFlowlogResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFlowlogWithOptions(request, runtime);
}

model DeactiveFlowLogRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  flowLogId?: string(name='FlowLogId'),
  cenId?: string(name='CenId'),
}

model DeactiveFlowLogResponseBody = {
  success?: string(name='Success'),
  requestId?: string(name='RequestId'),
}

model DeactiveFlowLogResponse = {
  headers: map[string]string(name='headers'),
  body: DeactiveFlowLogResponseBody(name='body'),
}

async function deactiveFlowLogWithOptions(request: DeactiveFlowLogRequest, runtime: Util.RuntimeOptions): DeactiveFlowLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeactiveFlowLog', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deactiveFlowLog(request: DeactiveFlowLogRequest): DeactiveFlowLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return deactiveFlowLogWithOptions(request, runtime);
}

model DeleteCenRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
}

model DeleteCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenResponseBody(name='body'),
}

async function deleteCenWithOptions(request: DeleteCenRequest, runtime: Util.RuntimeOptions): DeleteCenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCen', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCen(request: DeleteCenRequest): DeleteCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCenWithOptions(request, runtime);
}

model DeleteCenBandwidthPackageRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
}

model DeleteCenBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenBandwidthPackageResponseBody(name='body'),
}

async function deleteCenBandwidthPackageWithOptions(request: DeleteCenBandwidthPackageRequest, runtime: Util.RuntimeOptions): DeleteCenBandwidthPackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCenBandwidthPackage', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCenBandwidthPackage(request: DeleteCenBandwidthPackageRequest): DeleteCenBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCenBandwidthPackageWithOptions(request, runtime);
}

model DeleteCenChildInstanceRouteEntryToCenRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceType?: string(name='ChildInstanceType'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceAliUid?: long(name='ChildInstanceAliUid'),
  routeTableId?: string(name='RouteTableId'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
}

model DeleteCenChildInstanceRouteEntryToCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenChildInstanceRouteEntryToCenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenChildInstanceRouteEntryToCenResponseBody(name='body'),
}

async function deleteCenChildInstanceRouteEntryToCenWithOptions(request: DeleteCenChildInstanceRouteEntryToCenRequest, runtime: Util.RuntimeOptions): DeleteCenChildInstanceRouteEntryToCenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCenChildInstanceRouteEntryToCen', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCenChildInstanceRouteEntryToCen(request: DeleteCenChildInstanceRouteEntryToCenRequest): DeleteCenChildInstanceRouteEntryToCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCenChildInstanceRouteEntryToCenWithOptions(request, runtime);
}

model DeleteCenRouteMapRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  cenRegionId?: string(name='CenRegionId'),
  routeMapId?: string(name='RouteMapId'),
}

model DeleteCenRouteMapResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteCenRouteMapResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCenRouteMapResponseBody(name='body'),
}

async function deleteCenRouteMapWithOptions(request: DeleteCenRouteMapRequest, runtime: Util.RuntimeOptions): DeleteCenRouteMapResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCenRouteMap', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCenRouteMap(request: DeleteCenRouteMapRequest): DeleteCenRouteMapResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCenRouteMapWithOptions(request, runtime);
}

model DeleteFlowlogRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  flowLogId?: string(name='FlowLogId'),
  cenId?: string(name='CenId'),
}

model DeleteFlowlogResponseBody = {
  success?: string(name='Success'),
  requestId?: string(name='RequestId'),
}

model DeleteFlowlogResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteFlowlogResponseBody(name='body'),
}

async function deleteFlowlogWithOptions(request: DeleteFlowlogRequest, runtime: Util.RuntimeOptions): DeleteFlowlogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteFlowlog', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteFlowlog(request: DeleteFlowlogRequest): DeleteFlowlogResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFlowlogWithOptions(request, runtime);
}

model DeleteRouteServiceInCenRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  host?: string(name='Host'),
  hostRegionId?: string(name='HostRegionId'),
  accessRegionId?: string(name='AccessRegionId'),
  hostVpcId?: string(name='HostVpcId'),
}

model DeleteRouteServiceInCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteRouteServiceInCenResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRouteServiceInCenResponseBody(name='body'),
}

async function deleteRouteServiceInCenWithOptions(request: DeleteRouteServiceInCenRequest, runtime: Util.RuntimeOptions): DeleteRouteServiceInCenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRouteServiceInCen', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRouteServiceInCen(request: DeleteRouteServiceInCenRequest): DeleteRouteServiceInCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRouteServiceInCenWithOptions(request, runtime);
}

model DescribeCenAttachedChildInstanceAttributeRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceType?: string(name='ChildInstanceType'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
}

model DescribeCenAttachedChildInstanceAttributeResponseBody = {
  status?: string(name='Status'),
  childInstanceType?: string(name='ChildInstanceType'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  requestId?: string(name='RequestId'),
  childInstanceOwnerId?: long(name='ChildInstanceOwnerId'),
  childInstanceId?: string(name='ChildInstanceId'),
  cenId?: string(name='CenId'),
  childInstanceName?: string(name='ChildInstanceName'),
  childInstanceAttachTime?: string(name='ChildInstanceAttachTime'),
}

model DescribeCenAttachedChildInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenAttachedChildInstanceAttributeResponseBody(name='body'),
}

async function describeCenAttachedChildInstanceAttributeWithOptions(request: DescribeCenAttachedChildInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeCenAttachedChildInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCenAttachedChildInstanceAttribute', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCenAttachedChildInstanceAttribute(request: DescribeCenAttachedChildInstanceAttributeRequest): DescribeCenAttachedChildInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenAttachedChildInstanceAttributeWithOptions(request, runtime);
}

model DescribeCenAttachedChildInstancesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  cenId?: string(name='CenId'),
  childInstanceType?: string(name='ChildInstanceType'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
}

model DescribeCenAttachedChildInstancesResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  childInstances?: {
    childInstance?: [ 
    {
      childInstanceType?: string(name='ChildInstanceType'),
      status?: string(name='Status'),
      childInstanceRegionId?: string(name='ChildInstanceRegionId'),
      childInstanceOwnerId?: long(name='ChildInstanceOwnerId'),
      childInstanceId?: string(name='ChildInstanceId'),
      cenId?: string(name='CenId'),
      childInstanceAttachTime?: string(name='ChildInstanceAttachTime'),
    }
  ](name='ChildInstance')
  }(name='ChildInstances'),
}

model DescribeCenAttachedChildInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenAttachedChildInstancesResponseBody(name='body'),
}

async function describeCenAttachedChildInstancesWithOptions(request: DescribeCenAttachedChildInstancesRequest, runtime: Util.RuntimeOptions): DescribeCenAttachedChildInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCenAttachedChildInstances', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCenAttachedChildInstances(request: DescribeCenAttachedChildInstancesRequest): DescribeCenAttachedChildInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenAttachedChildInstancesWithOptions(request, runtime);
}

model DescribeCenBandwidthPackagesRequest {
  includeReservationData?: boolean(name='IncludeReservationData'),
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  isOrKey?: boolean(name='IsOrKey'),
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
}

model DescribeCenBandwidthPackagesResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  cenBandwidthPackages?: {
    cenBandwidthPackage?: [ 
    {
      reservationActiveTime?: string(name='ReservationActiveTime'),
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      reservationOrderType?: string(name='ReservationOrderType'),
      bandwidthPackageChargeType?: string(name='BandwidthPackageChargeType'),
      cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
      reservationInternetChargeType?: string(name='ReservationInternetChargeType'),
      ratio?: string(name='Ratio'),
      geographicRegionAId?: string(name='GeographicRegionAId'),
      typeFor95?: string(name='TypeFor95'),
      bandwidth?: long(name='Bandwidth'),
      description?: string(name='Description'),
      expiredTime?: string(name='ExpiredTime'),
      reservationBandwidth?: string(name='ReservationBandwidth'),
      geographicSpanId?: string(name='GeographicSpanId'),
      geographicRegionBId?: string(name='GeographicRegionBId'),
      isCrossBorder?: boolean(name='IsCrossBorder'),
      businessStatus?: string(name='BusinessStatus'),
      name?: string(name='Name'),
      hasReservationData?: string(name='HasReservationData'),
      orginInterRegionBandwidthLimits?: {
        orginInterRegionBandwidthLimit?: [ 
        {
          bandwidthLimit?: string(name='BandwidthLimit'),
          oppositeRegionId?: string(name='OppositeRegionId'),
          geographicSpanId?: string(name='GeographicSpanId'),
          localRegionId?: string(name='LocalRegionId'),
        }
      ](name='OrginInterRegionBandwidthLimit')
      }(name='OrginInterRegionBandwidthLimits'),
      cenIds?: {
        cenId?: [ string ](name='CenId')
      }(name='CenIds'),
    }
  ](name='CenBandwidthPackage')
  }(name='CenBandwidthPackages'),
}

model DescribeCenBandwidthPackagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenBandwidthPackagesResponseBody(name='body'),
}

async function describeCenBandwidthPackagesWithOptions(request: DescribeCenBandwidthPackagesRequest, runtime: Util.RuntimeOptions): DescribeCenBandwidthPackagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCenBandwidthPackages', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCenBandwidthPackages(request: DescribeCenBandwidthPackagesRequest): DescribeCenBandwidthPackagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenBandwidthPackagesWithOptions(request, runtime);
}

model DescribeCenChildInstanceRouteEntriesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceType?: string(name='ChildInstanceType'),
  status?: string(name='Status'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
}

model DescribeCenChildInstanceRouteEntriesResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  cenRouteEntries?: {
    cenRouteEntry?: [ 
    {
      status?: string(name='Status'),
      type?: string(name='Type'),
      publishStatus?: string(name='PublishStatus'),
      nextHopType?: string(name='NextHopType'),
      operationalMode?: boolean(name='OperationalMode'),
      nextHopRegionId?: string(name='NextHopRegionId'),
      nextHopInstanceId?: string(name='NextHopInstanceId'),
      destinationCidrBlock?: string(name='DestinationCidrBlock'),
      routeTableId?: string(name='RouteTableId'),
      cenRouteMapRecords?: {
        cenRouteMapRecord?: [ 
        {
          routeMapId?: string(name='RouteMapId'),
          regionId?: string(name='RegionId'),
        }
      ](name='CenRouteMapRecord')
      }(name='CenRouteMapRecords'),
      conflicts?: {
        conflict?: [ 
        {
          status?: string(name='Status'),
          destinationCidrBlock?: string(name='DestinationCidrBlock'),
          instanceId?: string(name='InstanceId'),
          instanceType?: string(name='InstanceType'),
          regionId?: string(name='RegionId'),
        }
      ](name='Conflict')
      }(name='Conflicts'),
      communities?: {
        community?: [ string ](name='Community')
      }(name='Communities'),
      asPaths?: {
        asPath?: [ string ](name='AsPath')
      }(name='AsPaths'),
    }
  ](name='CenRouteEntry')
  }(name='CenRouteEntries'),
}

model DescribeCenChildInstanceRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenChildInstanceRouteEntriesResponseBody(name='body'),
}

async function describeCenChildInstanceRouteEntriesWithOptions(request: DescribeCenChildInstanceRouteEntriesRequest, runtime: Util.RuntimeOptions): DescribeCenChildInstanceRouteEntriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCenChildInstanceRouteEntries', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCenChildInstanceRouteEntries(request: DescribeCenChildInstanceRouteEntriesRequest): DescribeCenChildInstanceRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenChildInstanceRouteEntriesWithOptions(request, runtime);
}

model DescribeCenGeographicSpanRemainingBandwidthRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  cenId?: string(name='CenId'),
  geographicRegionAId?: string(name='GeographicRegionAId'),
  geographicRegionBId?: string(name='GeographicRegionBId'),
}

model DescribeCenGeographicSpanRemainingBandwidthResponseBody = {
  remainingBandwidth?: long(name='RemainingBandwidth'),
  requestId?: string(name='RequestId'),
}

model DescribeCenGeographicSpanRemainingBandwidthResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenGeographicSpanRemainingBandwidthResponseBody(name='body'),
}

async function describeCenGeographicSpanRemainingBandwidthWithOptions(request: DescribeCenGeographicSpanRemainingBandwidthRequest, runtime: Util.RuntimeOptions): DescribeCenGeographicSpanRemainingBandwidthResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCenGeographicSpanRemainingBandwidth', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCenGeographicSpanRemainingBandwidth(request: DescribeCenGeographicSpanRemainingBandwidthRequest): DescribeCenGeographicSpanRemainingBandwidthResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenGeographicSpanRemainingBandwidthWithOptions(request, runtime);
}

model DescribeCenGeographicSpansRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  geographicSpanId?: string(name='GeographicSpanId'),
}

model DescribeCenGeographicSpansResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  geographicSpanModels?: {
    geographicSpanModel?: [ 
    {
      localGeoRegionId?: string(name='LocalGeoRegionId'),
      geographicSpanId?: string(name='GeographicSpanId'),
      oppositeGeoRegionId?: string(name='OppositeGeoRegionId'),
    }
  ](name='GeographicSpanModel')
  }(name='GeographicSpanModels'),
}

model DescribeCenGeographicSpansResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenGeographicSpansResponseBody(name='body'),
}

async function describeCenGeographicSpansWithOptions(request: DescribeCenGeographicSpansRequest, runtime: Util.RuntimeOptions): DescribeCenGeographicSpansResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCenGeographicSpans', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCenGeographicSpans(request: DescribeCenGeographicSpansRequest): DescribeCenGeographicSpansResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenGeographicSpansWithOptions(request, runtime);
}

model DescribeCenInterRegionBandwidthLimitsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  cenId?: string(name='CenId'),
}

model DescribeCenInterRegionBandwidthLimitsResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  cenInterRegionBandwidthLimits?: {
    cenInterRegionBandwidthLimit?: [ 
    {
      status?: string(name='Status'),
      bandwidthPackageId?: string(name='BandwidthPackageId'),
      oppositeRegionId?: string(name='OppositeRegionId'),
      geographicSpanId?: string(name='GeographicSpanId'),
      cenId?: string(name='CenId'),
      localRegionId?: string(name='LocalRegionId'),
      bandwidthLimit?: long(name='BandwidthLimit'),
    }
  ](name='CenInterRegionBandwidthLimit')
  }(name='CenInterRegionBandwidthLimits'),
}

model DescribeCenInterRegionBandwidthLimitsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenInterRegionBandwidthLimitsResponseBody(name='body'),
}

async function describeCenInterRegionBandwidthLimitsWithOptions(request: DescribeCenInterRegionBandwidthLimitsRequest, runtime: Util.RuntimeOptions): DescribeCenInterRegionBandwidthLimitsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCenInterRegionBandwidthLimits', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCenInterRegionBandwidthLimits(request: DescribeCenInterRegionBandwidthLimitsRequest): DescribeCenInterRegionBandwidthLimitsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenInterRegionBandwidthLimitsWithOptions(request, runtime);
}

model DescribeCenPrivateZoneRoutesRequest {
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  cenId?: string(name='CenId'),
  accessRegionId?: string(name='AccessRegionId'),
  hostRegionId?: string(name='HostRegionId'),
}

model DescribeCenPrivateZoneRoutesResponseBody = {
  requestId?: string(name='RequestId'),
  privateZoneDnsServers?: string(name='PrivateZoneDnsServers'),
  cenId?: string(name='CenId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  totalCount?: int32(name='TotalCount'),
  privateZoneInfos?: {
    privateZoneInfo?: [ 
    {
      status?: string(name='Status'),
      accessRegionId?: string(name='AccessRegionId'),
      hostRegionId?: string(name='HostRegionId'),
      hostVpcId?: string(name='HostVpcId'),
    }
  ](name='PrivateZoneInfo')
  }(name='PrivateZoneInfos'),
}

model DescribeCenPrivateZoneRoutesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenPrivateZoneRoutesResponseBody(name='body'),
}

async function describeCenPrivateZoneRoutesWithOptions(request: DescribeCenPrivateZoneRoutesRequest, runtime: Util.RuntimeOptions): DescribeCenPrivateZoneRoutesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCenPrivateZoneRoutes', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCenPrivateZoneRoutes(request: DescribeCenPrivateZoneRoutesRequest): DescribeCenPrivateZoneRoutesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenPrivateZoneRoutesWithOptions(request, runtime);
}

model DescribeCenRegionDomainRouteEntriesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  cenRegionId?: string(name='CenRegionId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  status?: string(name='Status'),
}

model DescribeCenRegionDomainRouteEntriesResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  cenRouteEntries?: {
    cenRouteEntry?: [ 
    {
      toOtherRegionStatus?: string(name='ToOtherRegionStatus'),
      type?: string(name='Type'),
      status?: string(name='Status'),
      nextHopType?: string(name='NextHopType'),
      nextHopInstanceId?: string(name='NextHopInstanceId'),
      nextHopRegionId?: string(name='NextHopRegionId'),
      destinationCidrBlock?: string(name='DestinationCidrBlock'),
      preference?: int32(name='Preference'),
      cenRouteMapRecords?: {
        cenRouteMapRecord?: [ 
        {
          routeMapId?: string(name='RouteMapId'),
          regionId?: string(name='RegionId'),
        }
      ](name='CenRouteMapRecord')
      }(name='CenRouteMapRecords'),
      cenOutRouteMapRecords?: {
        cenOutRouteMapRecord?: [ 
        {
          routeMapId?: string(name='RouteMapId'),
          regionId?: string(name='RegionId'),
        }
      ](name='CenOutRouteMapRecord')
      }(name='CenOutRouteMapRecords'),
      communities?: {
        community?: [ string ](name='Community')
      }(name='Communities'),
      asPaths?: {
        asPath?: [ string ](name='AsPath')
      }(name='AsPaths'),
    }
  ](name='CenRouteEntry')
  }(name='CenRouteEntries'),
}

model DescribeCenRegionDomainRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenRegionDomainRouteEntriesResponseBody(name='body'),
}

async function describeCenRegionDomainRouteEntriesWithOptions(request: DescribeCenRegionDomainRouteEntriesRequest, runtime: Util.RuntimeOptions): DescribeCenRegionDomainRouteEntriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCenRegionDomainRouteEntries', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCenRegionDomainRouteEntries(request: DescribeCenRegionDomainRouteEntriesRequest): DescribeCenRegionDomainRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenRegionDomainRouteEntriesWithOptions(request, runtime);
}

model DescribeCenRouteMapsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  cenId?: string(name='CenId'),
  routeMapId?: string(name='RouteMapId'),
  cenRegionId?: string(name='CenRegionId'),
  transmitDirection?: string(name='TransmitDirection'),
}

model DescribeCenRouteMapsResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  routeMaps?: {
    routeMap?: [ 
    {
      routeMapId?: string(name='RouteMapId'),
      status?: string(name='Status'),
      transmitDirection?: string(name='TransmitDirection'),
      sourceInstanceIdsReverseMatch?: boolean(name='SourceInstanceIdsReverseMatch'),
      cenRegionId?: string(name='CenRegionId'),
      cenId?: string(name='CenId'),
      priority?: int32(name='Priority'),
      communityOperateMode?: string(name='CommunityOperateMode'),
      mapResult?: string(name='MapResult'),
      communityMatchMode?: string(name='CommunityMatchMode'),
      description?: string(name='Description'),
      asPathMatchMode?: string(name='AsPathMatchMode'),
      preference?: int32(name='Preference'),
      destinationInstanceIdsReverseMatch?: boolean(name='DestinationInstanceIdsReverseMatch'),
      cidrMatchMode?: string(name='CidrMatchMode'),
      nextPriority?: int32(name='NextPriority'),
      sourceRegionIds?: {
        sourceRegionId?: [ string ](name='SourceRegionId')
      }(name='SourceRegionIds'),
      sourceChildInstanceTypes?: {
        sourceChildInstanceType?: [ string ](name='SourceChildInstanceType')
      }(name='SourceChildInstanceTypes'),
      destinationRouteTableIds?: {
        destinationRouteTableId?: [ string ](name='DestinationRouteTableId')
      }(name='DestinationRouteTableIds'),
      sourceInstanceIds?: {
        sourceInstanceId?: [ string ](name='SourceInstanceId')
      }(name='SourceInstanceIds'),
      destinationCidrBlocks?: {
        destinationCidrBlock?: [ string ](name='DestinationCidrBlock')
      }(name='DestinationCidrBlocks'),
      sourceRouteTableIds?: {
        sourceRouteTableId?: [ string ](name='SourceRouteTableId')
      }(name='SourceRouteTableIds'),
      matchCommunitySet?: {
        matchCommunity?: [ string ](name='MatchCommunity')
      }(name='MatchCommunitySet'),
      prependAsPath?: {
        asPath?: [ string ](name='AsPath')
      }(name='PrependAsPath'),
      routeTypes?: {
        routeType?: [ string ](name='RouteType')
      }(name='RouteTypes'),
      destinationChildInstanceTypes?: {
        destinationChildInstanceType?: [ string ](name='DestinationChildInstanceType')
      }(name='DestinationChildInstanceTypes'),
      destinationInstanceIds?: {
        destinationInstanceId?: [ string ](name='DestinationInstanceId')
      }(name='DestinationInstanceIds'),
      matchAsns?: {
        matchAsn?: [ string ](name='MatchAsn')
      }(name='MatchAsns'),
      operateCommunitySet?: {
        operateCommunity?: [ string ](name='OperateCommunity')
      }(name='OperateCommunitySet'),
    }
  ](name='RouteMap')
  }(name='RouteMaps'),
}

model DescribeCenRouteMapsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenRouteMapsResponseBody(name='body'),
}

async function describeCenRouteMapsWithOptions(request: DescribeCenRouteMapsRequest, runtime: Util.RuntimeOptions): DescribeCenRouteMapsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCenRouteMaps', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCenRouteMaps(request: DescribeCenRouteMapsRequest): DescribeCenRouteMapsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenRouteMapsWithOptions(request, runtime);
}

model DescribeCensRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  filter?: [ 
    {
      key?: string(name='Key'),
      value?: [ string ](name='Value'),
    }
  ](name='Filter'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model DescribeCensResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  cens?: {
    cen?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      description?: string(name='Description'),
      cenId?: string(name='CenId'),
      protectionLevel?: string(name='ProtectionLevel'),
      name?: string(name='Name'),
      tags?: {
        tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag')
      }(name='Tags'),
      cenBandwidthPackageIds?: {
        cenBandwidthPackageId?: [ string ](name='CenBandwidthPackageId')
      }(name='CenBandwidthPackageIds'),
    }
  ](name='Cen')
  }(name='Cens'),
}

model DescribeCensResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCensResponseBody(name='body'),
}

async function describeCensWithOptions(request: DescribeCensRequest, runtime: Util.RuntimeOptions): DescribeCensResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCens', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCens(request: DescribeCensRequest): DescribeCensResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCensWithOptions(request, runtime);
}

model DescribeCenVbrHealthCheckRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  vbrInstanceRegionId?: string(name='VbrInstanceRegionId'),
  vbrInstanceId?: string(name='VbrInstanceId'),
  vbrInstanceOwnerId?: long(name='VbrInstanceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeCenVbrHealthCheckResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  vbrHealthChecks?: {
    vbrHealthCheck?: [ 
    {
      healthCheckTargetIp?: string(name='HealthCheckTargetIp'),
      vbrInstanceId?: string(name='VbrInstanceId'),
      vbrInstanceRegionId?: string(name='VbrInstanceRegionId'),
      cenId?: string(name='CenId'),
      healthyThreshold?: int32(name='HealthyThreshold'),
      healthCheckInterval?: int32(name='HealthCheckInterval'),
      healthCheckSourceIp?: string(name='HealthCheckSourceIp'),
    }
  ](name='VbrHealthCheck')
  }(name='VbrHealthChecks'),
}

model DescribeCenVbrHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCenVbrHealthCheckResponseBody(name='body'),
}

async function describeCenVbrHealthCheckWithOptions(request: DescribeCenVbrHealthCheckRequest, runtime: Util.RuntimeOptions): DescribeCenVbrHealthCheckResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCenVbrHealthCheck', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCenVbrHealthCheck(request: DescribeCenVbrHealthCheckRequest): DescribeCenVbrHealthCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCenVbrHealthCheckWithOptions(request, runtime);
}

model DescribeChildInstanceRegionsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  productType?: string(name='ProductType'),
}

model DescribeChildInstanceRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    region?: [ 
    {
      localName?: string(name='LocalName'),
      regionId?: string(name='RegionId'),
    }
  ](name='Region')
  }(name='Regions'),
}

model DescribeChildInstanceRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeChildInstanceRegionsResponseBody(name='body'),
}

async function describeChildInstanceRegionsWithOptions(request: DescribeChildInstanceRegionsRequest, runtime: Util.RuntimeOptions): DescribeChildInstanceRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeChildInstanceRegions', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeChildInstanceRegions(request: DescribeChildInstanceRegionsRequest): DescribeChildInstanceRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeChildInstanceRegionsWithOptions(request, runtime);
}

model DescribeFlowlogsRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  regionId?: string(name='RegionId'),
  flowLogName?: string(name='FlowLogName'),
  flowLogId?: string(name='FlowLogId'),
  description?: string(name='Description'),
  cenId?: string(name='CenId'),
  projectName?: string(name='ProjectName'),
  logStoreName?: string(name='LogStoreName'),
  status?: string(name='Status'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeFlowlogsResponseBody = {
  pageSize?: string(name='PageSize'),
  pageNumber?: string(name='PageNumber'),
  requestId?: string(name='RequestId'),
  totalCount?: string(name='TotalCount'),
  success?: string(name='Success'),
  flowLogs?: {
    flowLog?: [ 
    {
      status?: string(name='Status'),
      creationTime?: string(name='CreationTime'),
      flowLogName?: string(name='FlowLogName'),
      description?: string(name='Description'),
      projectName?: string(name='ProjectName'),
      cenId?: string(name='CenId'),
      logStoreName?: string(name='LogStoreName'),
      regionId?: string(name='RegionId'),
      flowLogId?: string(name='FlowLogId'),
    }
  ](name='FlowLog')
  }(name='FlowLogs'),
}

model DescribeFlowlogsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFlowlogsResponseBody(name='body'),
}

async function describeFlowlogsWithOptions(request: DescribeFlowlogsRequest, runtime: Util.RuntimeOptions): DescribeFlowlogsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeFlowlogs', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeFlowlogs(request: DescribeFlowlogsRequest): DescribeFlowlogsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeFlowlogsWithOptions(request, runtime);
}

model DescribeGeographicRegionMembershipRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  geographicRegionId?: string(name='GeographicRegionId'),
}

model DescribeGeographicRegionMembershipResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  regionIds?: {
    regionId?: [ 
    {
      regionId?: string(name='RegionId'),
    }
  ](name='RegionId')
  }(name='RegionIds'),
}

model DescribeGeographicRegionMembershipResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGeographicRegionMembershipResponseBody(name='body'),
}

async function describeGeographicRegionMembershipWithOptions(request: DescribeGeographicRegionMembershipRequest, runtime: Util.RuntimeOptions): DescribeGeographicRegionMembershipResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGeographicRegionMembership', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGeographicRegionMembership(request: DescribeGeographicRegionMembershipRequest): DescribeGeographicRegionMembershipResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGeographicRegionMembershipWithOptions(request, runtime);
}

model DescribeGrantRulesToCenRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  cenId?: string(name='CenId'),
  productType?: string(name='ProductType'),
}

model DescribeGrantRulesToCenResponseBody = {
  requestId?: string(name='RequestId'),
  grantRules?: {
    grantRule?: [ 
    {
      childInstanceType?: string(name='ChildInstanceType'),
      childInstanceRegionId?: string(name='ChildInstanceRegionId'),
      childInstanceOwnerId?: long(name='ChildInstanceOwnerId'),
      childInstanceId?: string(name='ChildInstanceId'),
      cenId?: string(name='CenId'),
    }
  ](name='GrantRule')
  }(name='GrantRules'),
}

model DescribeGrantRulesToCenResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeGrantRulesToCenResponseBody(name='body'),
}

async function describeGrantRulesToCenWithOptions(request: DescribeGrantRulesToCenRequest, runtime: Util.RuntimeOptions): DescribeGrantRulesToCenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeGrantRulesToCen', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeGrantRulesToCen(request: DescribeGrantRulesToCenRequest): DescribeGrantRulesToCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeGrantRulesToCenWithOptions(request, runtime);
}

model DescribePublishedRouteEntriesRequest {
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceType?: string(name='ChildInstanceType'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
}

model DescribePublishedRouteEntriesResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  publishedRouteEntries?: {
    publishedRouteEntry?: [ 
    {
      nextHopId?: string(name='NextHopId'),
      publishStatus?: string(name='PublishStatus'),
      childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId'),
      nextHopType?: string(name='NextHopType'),
      operationalMode?: boolean(name='OperationalMode'),
      destinationCidrBlock?: string(name='DestinationCidrBlock'),
      routeType?: string(name='RouteType'),
      conflicts?: {
        conflict?: [ 
        {
          status?: string(name='Status'),
          destinationCidrBlock?: string(name='DestinationCidrBlock'),
          instanceId?: string(name='InstanceId'),
          instanceType?: string(name='InstanceType'),
          regionId?: string(name='RegionId'),
        }
      ](name='Conflict')
      }(name='Conflicts'),
    }
  ](name='PublishedRouteEntry')
  }(name='PublishedRouteEntries'),
}

model DescribePublishedRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePublishedRouteEntriesResponseBody(name='body'),
}

async function describePublishedRouteEntriesWithOptions(request: DescribePublishedRouteEntriesRequest, runtime: Util.RuntimeOptions): DescribePublishedRouteEntriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePublishedRouteEntries', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePublishedRouteEntries(request: DescribePublishedRouteEntriesRequest): DescribePublishedRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePublishedRouteEntriesWithOptions(request, runtime);
}

model DescribeRouteConflictRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceType?: string(name='ChildInstanceType'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
}

model DescribeRouteConflictResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  routeConflicts?: {
    routeConflict?: [ 
    {
      status?: string(name='Status'),
      destinationCidrBlock?: string(name='DestinationCidrBlock'),
      instanceId?: string(name='InstanceId'),
      instanceType?: string(name='InstanceType'),
      regionId?: string(name='RegionId'),
    }
  ](name='RouteConflict')
  }(name='RouteConflicts'),
}

model DescribeRouteConflictResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouteConflictResponseBody(name='body'),
}

async function describeRouteConflictWithOptions(request: DescribeRouteConflictRequest, runtime: Util.RuntimeOptions): DescribeRouteConflictResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRouteConflict', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRouteConflict(request: DescribeRouteConflictRequest): DescribeRouteConflictResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouteConflictWithOptions(request, runtime);
}

model DescribeRouteServicesInCenRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  cenId?: string(name='CenId'),
  host?: string(name='Host'),
  hostRegionId?: string(name='HostRegionId'),
  accessRegionId?: string(name='AccessRegionId'),
  hostVpcId?: string(name='HostVpcId'),
}

model DescribeRouteServicesInCenResponseBody = {
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumber?: int32(name='PageNumber'),
  totalCount?: int32(name='TotalCount'),
  routeServiceEntries?: {
    routeServiceEntry?: [ 
    {
      status?: string(name='Status'),
      host?: string(name='Host'),
      description?: string(name='Description'),
      hostVpcId?: string(name='HostVpcId'),
      cenId?: string(name='CenId'),
      accessRegionId?: string(name='AccessRegionId'),
      hostRegionId?: string(name='HostRegionId'),
      updateInterval?: string(name='UpdateInterval'),
      cidrs?: {
        cidr?: [ string ](name='Cidr')
      }(name='Cidrs'),
    }
  ](name='RouteServiceEntry')
  }(name='RouteServiceEntries'),
}

model DescribeRouteServicesInCenResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRouteServicesInCenResponseBody(name='body'),
}

async function describeRouteServicesInCenWithOptions(request: DescribeRouteServicesInCenRequest, runtime: Util.RuntimeOptions): DescribeRouteServicesInCenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRouteServicesInCen', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRouteServicesInCen(request: DescribeRouteServicesInCenRequest): DescribeRouteServicesInCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRouteServicesInCenWithOptions(request, runtime);
}

model DetachCenChildInstanceRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceType?: string(name='ChildInstanceType'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceOwnerId?: long(name='ChildInstanceOwnerId'),
  cenOwnerId?: long(name='CenOwnerId'),
}

model DetachCenChildInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DetachCenChildInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DetachCenChildInstanceResponseBody(name='body'),
}

async function detachCenChildInstanceWithOptions(request: DetachCenChildInstanceRequest, runtime: Util.RuntimeOptions): DetachCenChildInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DetachCenChildInstance', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function detachCenChildInstance(request: DetachCenChildInstanceRequest): DetachCenChildInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return detachCenChildInstanceWithOptions(request, runtime);
}

model DisableCenVbrHealthCheckRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  vbrInstanceRegionId?: string(name='VbrInstanceRegionId'),
  vbrInstanceId?: string(name='VbrInstanceId'),
  vbrInstanceOwnerId?: long(name='VbrInstanceOwnerId'),
}

model DisableCenVbrHealthCheckResponseBody = {
  requestId?: string(name='RequestId'),
}

model DisableCenVbrHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  body: DisableCenVbrHealthCheckResponseBody(name='body'),
}

async function disableCenVbrHealthCheckWithOptions(request: DisableCenVbrHealthCheckRequest, runtime: Util.RuntimeOptions): DisableCenVbrHealthCheckResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DisableCenVbrHealthCheck', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function disableCenVbrHealthCheck(request: DisableCenVbrHealthCheckRequest): DisableCenVbrHealthCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return disableCenVbrHealthCheckWithOptions(request, runtime);
}

model EnableCenVbrHealthCheckRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  vbrInstanceRegionId?: string(name='VbrInstanceRegionId'),
  vbrInstanceId?: string(name='VbrInstanceId'),
  healthCheckSourceIp?: string(name='HealthCheckSourceIp'),
  healthCheckTargetIp?: string(name='HealthCheckTargetIp'),
  vbrInstanceOwnerId?: long(name='VbrInstanceOwnerId'),
  healthCheckInterval?: int32(name='HealthCheckInterval'),
  healthyThreshold?: int32(name='HealthyThreshold'),
}

model EnableCenVbrHealthCheckResponseBody = {
  requestId?: string(name='RequestId'),
}

model EnableCenVbrHealthCheckResponse = {
  headers: map[string]string(name='headers'),
  body: EnableCenVbrHealthCheckResponseBody(name='body'),
}

async function enableCenVbrHealthCheckWithOptions(request: EnableCenVbrHealthCheckRequest, runtime: Util.RuntimeOptions): EnableCenVbrHealthCheckResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableCenVbrHealthCheck', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableCenVbrHealthCheck(request: EnableCenVbrHealthCheckRequest): EnableCenVbrHealthCheckResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableCenVbrHealthCheckWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  nextToken?: string(name='NextToken'),
  pageSize?: int32(name='PageSize'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceType?: string(name='ResourceType'),
      tagValue?: string(name='TagValue'),
      resourceId?: string(name='ResourceId'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagResource')
  }(name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTagResources', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyCenAttributeRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  protectionLevel?: string(name='ProtectionLevel'),
}

model ModifyCenAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCenAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenAttributeResponseBody(name='body'),
}

async function modifyCenAttributeWithOptions(request: ModifyCenAttributeRequest, runtime: Util.RuntimeOptions): ModifyCenAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCenAttribute', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCenAttribute(request: ModifyCenAttributeRequest): ModifyCenAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCenAttributeWithOptions(request, runtime);
}

model ModifyCenBandwidthPackageAttributeRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  name?: string(name='Name'),
  description?: string(name='Description'),
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
}

model ModifyCenBandwidthPackageAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCenBandwidthPackageAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenBandwidthPackageAttributeResponseBody(name='body'),
}

async function modifyCenBandwidthPackageAttributeWithOptions(request: ModifyCenBandwidthPackageAttributeRequest, runtime: Util.RuntimeOptions): ModifyCenBandwidthPackageAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCenBandwidthPackageAttribute', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCenBandwidthPackageAttribute(request: ModifyCenBandwidthPackageAttributeRequest): ModifyCenBandwidthPackageAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCenBandwidthPackageAttributeWithOptions(request, runtime);
}

model ModifyCenBandwidthPackageSpecRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
  bandwidth?: int32(name='Bandwidth'),
}

model ModifyCenBandwidthPackageSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCenBandwidthPackageSpecResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenBandwidthPackageSpecResponseBody(name='body'),
}

async function modifyCenBandwidthPackageSpecWithOptions(request: ModifyCenBandwidthPackageSpecRequest, runtime: Util.RuntimeOptions): ModifyCenBandwidthPackageSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCenBandwidthPackageSpec', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCenBandwidthPackageSpec(request: ModifyCenBandwidthPackageSpecRequest): ModifyCenBandwidthPackageSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCenBandwidthPackageSpecWithOptions(request, runtime);
}

model ModifyCenRouteMapRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  cenRegionId?: string(name='CenRegionId'),
  routeMapId?: string(name='RouteMapId'),
  description?: string(name='Description'),
  mapResult?: string(name='MapResult'),
  nextPriority?: int32(name='NextPriority'),
  cidrMatchMode?: string(name='CidrMatchMode'),
  asPathMatchMode?: string(name='AsPathMatchMode'),
  communityMatchMode?: string(name='CommunityMatchMode'),
  communityOperateMode?: string(name='CommunityOperateMode'),
  preference?: int32(name='Preference'),
  priority?: int32(name='Priority'),
  sourceInstanceIdsReverseMatch?: boolean(name='SourceInstanceIdsReverseMatch'),
  destinationInstanceIdsReverseMatch?: boolean(name='DestinationInstanceIdsReverseMatch'),
  sourceInstanceIds?: [ string ](name='SourceInstanceIds'),
  destinationInstanceIds?: [ string ](name='DestinationInstanceIds'),
  sourceRouteTableIds?: [ string ](name='SourceRouteTableIds'),
  destinationRouteTableIds?: [ string ](name='DestinationRouteTableIds'),
  sourceRegionIds?: [ string ](name='SourceRegionIds'),
  sourceChildInstanceTypes?: [ string ](name='SourceChildInstanceTypes'),
  destinationChildInstanceTypes?: [ string ](name='DestinationChildInstanceTypes'),
  destinationCidrBlocks?: [ string ](name='DestinationCidrBlocks'),
  routeTypes?: [ string ](name='RouteTypes'),
  matchAsns?: [ integer ](name='MatchAsns'),
  matchCommunitySet?: [ string ](name='MatchCommunitySet'),
  operateCommunitySet?: [ string ](name='OperateCommunitySet'),
  prependAsPath?: [ integer ](name='PrependAsPath'),
}

model ModifyCenRouteMapResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyCenRouteMapResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCenRouteMapResponseBody(name='body'),
}

async function modifyCenRouteMapWithOptions(request: ModifyCenRouteMapRequest, runtime: Util.RuntimeOptions): ModifyCenRouteMapResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCenRouteMap', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCenRouteMap(request: ModifyCenRouteMapRequest): ModifyCenRouteMapResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCenRouteMapWithOptions(request, runtime);
}

model ModifyFlowLogAttributeRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  flowLogName?: string(name='FlowLogName'),
  description?: string(name='Description'),
  regionId?: string(name='RegionId'),
  flowLogId?: string(name='FlowLogId'),
  cenId?: string(name='CenId'),
}

model ModifyFlowLogAttributeResponseBody = {
  success?: string(name='Success'),
  requestId?: string(name='RequestId'),
}

model ModifyFlowLogAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyFlowLogAttributeResponseBody(name='body'),
}

async function modifyFlowLogAttributeWithOptions(request: ModifyFlowLogAttributeRequest, runtime: Util.RuntimeOptions): ModifyFlowLogAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyFlowLogAttribute', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyFlowLogAttribute(request: ModifyFlowLogAttributeRequest): ModifyFlowLogAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFlowLogAttributeWithOptions(request, runtime);
}

model PublishRouteEntriesRequest {
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceType?: string(name='ChildInstanceType'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
}

model PublishRouteEntriesResponseBody = {
  requestId?: string(name='RequestId'),
}

model PublishRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: PublishRouteEntriesResponseBody(name='body'),
}

async function publishRouteEntriesWithOptions(request: PublishRouteEntriesRequest, runtime: Util.RuntimeOptions): PublishRouteEntriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PublishRouteEntries', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function publishRouteEntries(request: PublishRouteEntriesRequest): PublishRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishRouteEntriesWithOptions(request, runtime);
}

model ResolveAndRouteServiceInCenRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  clientToken?: string(name='ClientToken'),
  cenId?: string(name='CenId'),
  host?: string(name='Host'),
  hostRegionId?: string(name='HostRegionId'),
  hostVpcId?: string(name='HostVpcId'),
  description?: string(name='Description'),
  accessRegionIds?: [ string ](name='AccessRegionIds'),
}

model ResolveAndRouteServiceInCenResponseBody = {
  requestId?: string(name='RequestId'),
}

model ResolveAndRouteServiceInCenResponse = {
  headers: map[string]string(name='headers'),
  body: ResolveAndRouteServiceInCenResponseBody(name='body'),
}

async function resolveAndRouteServiceInCenWithOptions(request: ResolveAndRouteServiceInCenRequest, runtime: Util.RuntimeOptions): ResolveAndRouteServiceInCenResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResolveAndRouteServiceInCen', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resolveAndRouteServiceInCen(request: ResolveAndRouteServiceInCenRequest): ResolveAndRouteServiceInCenResponse {
  var runtime = new Util.RuntimeOptions{};
  return resolveAndRouteServiceInCenWithOptions(request, runtime);
}

model RoutePrivateZoneInCenToVpcRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  accessRegionId?: string(name='AccessRegionId'),
  hostRegionId?: string(name='HostRegionId'),
  hostVpcId?: string(name='HostVpcId'),
}

model RoutePrivateZoneInCenToVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model RoutePrivateZoneInCenToVpcResponse = {
  headers: map[string]string(name='headers'),
  body: RoutePrivateZoneInCenToVpcResponseBody(name='body'),
}

async function routePrivateZoneInCenToVpcWithOptions(request: RoutePrivateZoneInCenToVpcRequest, runtime: Util.RuntimeOptions): RoutePrivateZoneInCenToVpcResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RoutePrivateZoneInCenToVpc', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function routePrivateZoneInCenToVpc(request: RoutePrivateZoneInCenToVpcRequest): RoutePrivateZoneInCenToVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return routePrivateZoneInCenToVpcWithOptions(request, runtime);
}

model SetCenInterRegionBandwidthLimitRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  localRegionId?: string(name='LocalRegionId'),
  oppositeRegionId?: string(name='OppositeRegionId'),
  bandwidthLimit?: long(name='BandwidthLimit'),
}

model SetCenInterRegionBandwidthLimitResponseBody = {
  requestId?: string(name='RequestId'),
}

model SetCenInterRegionBandwidthLimitResponse = {
  headers: map[string]string(name='headers'),
  body: SetCenInterRegionBandwidthLimitResponseBody(name='body'),
}

async function setCenInterRegionBandwidthLimitWithOptions(request: SetCenInterRegionBandwidthLimitRequest, runtime: Util.RuntimeOptions): SetCenInterRegionBandwidthLimitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetCenInterRegionBandwidthLimit', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setCenInterRegionBandwidthLimit(request: SetCenInterRegionBandwidthLimitRequest): SetCenInterRegionBandwidthLimitResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCenInterRegionBandwidthLimitWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model TempUpgradeCenBandwidthPackageSpecRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
  bandwidth?: int32(name='Bandwidth'),
  endTime?: string(name='EndTime'),
}

model TempUpgradeCenBandwidthPackageSpecResponseBody = {
  requestId?: string(name='RequestId'),
}

model TempUpgradeCenBandwidthPackageSpecResponse = {
  headers: map[string]string(name='headers'),
  body: TempUpgradeCenBandwidthPackageSpecResponseBody(name='body'),
}

async function tempUpgradeCenBandwidthPackageSpecWithOptions(request: TempUpgradeCenBandwidthPackageSpecRequest, runtime: Util.RuntimeOptions): TempUpgradeCenBandwidthPackageSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TempUpgradeCenBandwidthPackageSpec', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tempUpgradeCenBandwidthPackageSpec(request: TempUpgradeCenBandwidthPackageSpecRequest): TempUpgradeCenBandwidthPackageSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return tempUpgradeCenBandwidthPackageSpecWithOptions(request, runtime);
}

model UnassociateCenBandwidthPackageRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  cenBandwidthPackageId?: string(name='CenBandwidthPackageId'),
}

model UnassociateCenBandwidthPackageResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnassociateCenBandwidthPackageResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateCenBandwidthPackageResponseBody(name='body'),
}

async function unassociateCenBandwidthPackageWithOptions(request: UnassociateCenBandwidthPackageRequest, runtime: Util.RuntimeOptions): UnassociateCenBandwidthPackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnassociateCenBandwidthPackage', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unassociateCenBandwidthPackage(request: UnassociateCenBandwidthPackageRequest): UnassociateCenBandwidthPackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateCenBandwidthPackageWithOptions(request, runtime);
}

model UnroutePrivateZoneInCenToVpcRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  accessRegionId?: string(name='AccessRegionId'),
}

model UnroutePrivateZoneInCenToVpcResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnroutePrivateZoneInCenToVpcResponse = {
  headers: map[string]string(name='headers'),
  body: UnroutePrivateZoneInCenToVpcResponseBody(name='body'),
}

async function unroutePrivateZoneInCenToVpcWithOptions(request: UnroutePrivateZoneInCenToVpcRequest, runtime: Util.RuntimeOptions): UnroutePrivateZoneInCenToVpcResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnroutePrivateZoneInCenToVpc', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unroutePrivateZoneInCenToVpc(request: UnroutePrivateZoneInCenToVpcRequest): UnroutePrivateZoneInCenToVpcResponse {
  var runtime = new Util.RuntimeOptions{};
  return unroutePrivateZoneInCenToVpcWithOptions(request, runtime);
}

model UntagResourcesRequest {
  ownerAccount?: string(name='OwnerAccount'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model WithdrawPublishedRouteEntriesRequest {
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  cenId?: string(name='CenId'),
  childInstanceId?: string(name='ChildInstanceId'),
  childInstanceType?: string(name='ChildInstanceType'),
  childInstanceRegionId?: string(name='ChildInstanceRegionId'),
  childInstanceRouteTableId?: string(name='ChildInstanceRouteTableId'),
  destinationCidrBlock?: string(name='DestinationCidrBlock'),
}

model WithdrawPublishedRouteEntriesResponseBody = {
  requestId?: string(name='RequestId'),
}

model WithdrawPublishedRouteEntriesResponse = {
  headers: map[string]string(name='headers'),
  body: WithdrawPublishedRouteEntriesResponseBody(name='body'),
}

async function withdrawPublishedRouteEntriesWithOptions(request: WithdrawPublishedRouteEntriesRequest, runtime: Util.RuntimeOptions): WithdrawPublishedRouteEntriesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('WithdrawPublishedRouteEntries', '2017-09-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function withdrawPublishedRouteEntries(request: WithdrawPublishedRouteEntriesRequest): WithdrawPublishedRouteEntriesResponse {
  var runtime = new Util.RuntimeOptions{};
  return withdrawPublishedRouteEntriesWithOptions(request, runtime);
}

