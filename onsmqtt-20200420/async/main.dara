/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'OnsMqtt';
  @version = '2020-04-20';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ApplyTokenRequest {
  actions: string(name='Actions', position='Query'),
  expireTime: long(name='ExpireTime', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  resources: string(name='Resources', position='Query'),
}

model ApplyTokenResponseBody = {
  requestId?: string(name='RequestId'),
  token?: string(name='Token'),
}

model ApplyTokenResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyTokenResponseBody(name='body'),
}

async function applyToken(request: ApplyTokenRequest): ApplyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyToken', 'POST', '/', 'json', false, 'json', request);
}

model BatchQuerySessionByClientIdsRequest {
  clientIdList: [ string ](name='ClientIdList', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model BatchQuerySessionByClientIdsResponseBody = {
  onlineStatusList?: [ 
    {
      clientId?: string(name='ClientId'),
      onlineStatus?: boolean(name='OnlineStatus'),
    }
  ](name='OnlineStatusList'),
  requestId?: string(name='RequestId'),
}

model BatchQuerySessionByClientIdsResponse = {
  headers: map[string]string(name='headers'),
  body: BatchQuerySessionByClientIdsResponseBody(name='body'),
}

async function batchQuerySessionByClientIds(request: BatchQuerySessionByClientIdsRequest): BatchQuerySessionByClientIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchQuerySessionByClientIds', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupIdRequest {
  groupId: string(name='GroupId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model CreateGroupIdResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGroupIdResponseBody(name='body'),
}

async function createGroupId(request: CreateGroupIdRequest): CreateGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroupId', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupIdRequest {
  groupId: string(name='GroupId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model DeleteGroupIdResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteGroupIdResponseBody(name='body'),
}

async function deleteGroupId(request: DeleteGroupIdRequest): DeleteGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroupId', 'POST', '/', 'json', false, 'json', request);
}

model GetDeviceCredentialRequest {
  clientId: string(name='ClientId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model GetDeviceCredentialResponseBody = {
  deviceCredential?: {
    clientId?: string(name='ClientId'),
    createTime?: long(name='CreateTime'),
    deviceAccessKeyId?: string(name='DeviceAccessKeyId'),
    deviceAccessKeySecret?: string(name='DeviceAccessKeySecret'),
    instanceId?: string(name='InstanceId'),
    updateTime?: long(name='UpdateTime'),
  }(name='DeviceCredential'),
  requestId?: string(name='RequestId'),
}

model GetDeviceCredentialResponse = {
  headers: map[string]string(name='headers'),
  body: GetDeviceCredentialResponseBody(name='body'),
}

async function getDeviceCredential(request: GetDeviceCredentialRequest): GetDeviceCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceCredential', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupIdRequest {
  instanceId: string(name='InstanceId', position='Query'),
}

model ListGroupIdResponseBody = {
  data?: [ 
    {
      createTime?: long(name='CreateTime'),
      groupId?: string(name='GroupId'),
      independentNaming?: boolean(name='IndependentNaming'),
      instanceId?: string(name='InstanceId'),
      updateTime?: long(name='UpdateTime'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model ListGroupIdResponse = {
  headers: map[string]string(name='headers'),
  body: ListGroupIdResponseBody(name='body'),
}

async function listGroupId(request: ListGroupIdRequest): ListGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupId', 'POST', '/', 'json', false, 'json', request);
}

model QueryMqttTraceDeviceRequest {
  beginTime: long(name='BeginTime', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  clientId: string(name='ClientId', position='Query'),
  currentPage: int32(name='CurrentPage', minimum=-2147483648, maximum=2147483647, position='Query'),
  endTime: long(name='EndTime', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  mqttRegionId: string(name='MqttRegionId', position='Query'),
  pageSize: int32(name='PageSize', minimum=-2147483648, maximum=2147483647, position='Query'),
  regionId: string(name='RegionId', position='Host'),
  reverse?: boolean(name='Reverse', position='Query'),
}

model QueryMqttTraceDeviceResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  deviceInfoList?: [ 
    {
      action?: string(name='Action'),
      actionCode?: string(name='ActionCode'),
      actionInfo?: string(name='ActionInfo'),
      channelId?: string(name='ChannelId'),
      time?: string(name='Time'),
    }
  ](name='DeviceInfoList'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryMqttTraceDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMqttTraceDeviceResponseBody(name='body'),
}

async function queryMqttTraceDevice(request: QueryMqttTraceDeviceRequest): QueryMqttTraceDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMqttTraceDevice', 'POST', '/', 'json', false, 'json', request);
}

model QueryMqttTraceMessageOfClientRequest {
  beginTime: long(name='BeginTime', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  clientId: string(name='ClientId', position='Query'),
  currentPage: int32(name='CurrentPage', minimum=-2147483648, maximum=2147483647, position='Query'),
  endTime: long(name='EndTime', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  mqttRegionId: string(name='MqttRegionId', position='Query'),
  pageSize: int32(name='PageSize', minimum=-2147483648, maximum=2147483647, position='Query'),
  regionId: string(name='RegionId', position='Host'),
  reverse?: boolean(name='Reverse', position='Query'),
}

model QueryMqttTraceMessageOfClientResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  messageOfClientList?: [ 
    {
      action?: string(name='Action'),
      actionCode?: string(name='ActionCode'),
      actionInfo?: string(name='ActionInfo'),
      clientId?: string(name='ClientId'),
      msgId?: string(name='MsgId'),
      time?: string(name='Time'),
    }
  ](name='MessageOfClientList'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryMqttTraceMessageOfClientResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMqttTraceMessageOfClientResponseBody(name='body'),
}

async function queryMqttTraceMessageOfClient(request: QueryMqttTraceMessageOfClientRequest): QueryMqttTraceMessageOfClientResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMqttTraceMessageOfClient', 'POST', '/', 'json', false, 'json', request);
}

model QueryMqttTraceMessagePublishRequest {
  beginTime: long(name='BeginTime', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  endTime: long(name='EndTime', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  mqttRegionId: string(name='MqttRegionId', position='Query'),
  msgId: string(name='MsgId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model QueryMqttTraceMessagePublishResponseBody = {
  messageTraceLists?: [ 
    {
      action?: string(name='Action'),
      actionCode?: string(name='ActionCode'),
      actionInfo?: string(name='ActionInfo'),
      clientId?: string(name='ClientId'),
      msgId?: string(name='MsgId'),
      time?: string(name='Time'),
    }
  ](name='MessageTraceLists'),
  requestId?: string(name='RequestId'),
}

model QueryMqttTraceMessagePublishResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMqttTraceMessagePublishResponseBody(name='body'),
}

async function queryMqttTraceMessagePublish(request: QueryMqttTraceMessagePublishRequest): QueryMqttTraceMessagePublishResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMqttTraceMessagePublish', 'POST', '/', 'json', false, 'json', request);
}

model QueryMqttTraceMessageSubscribeRequest {
  beginTime: long(name='BeginTime', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  clientId?: string(name='ClientId', position='Query'),
  currentPage: int32(name='CurrentPage', minimum=-2147483648, maximum=2147483647, position='Query'),
  endTime: long(name='EndTime', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  mqttRegionId: string(name='MqttRegionId', position='Query'),
  msgId: string(name='MsgId', minLength=-2147483648, maxLength=2147483647, position='Query'),
  pageSize: int32(name='PageSize', minimum=-2147483648, maximum=2147483647, position='Query'),
  regionId: string(name='RegionId', position='Host'),
  reverse?: boolean(name='Reverse', position='Query'),
}

model QueryMqttTraceMessageSubscribeResponseBody = {
  currentPage?: int32(name='CurrentPage'),
  messageTraceLists?: [ 
    {
      action?: string(name='Action'),
      actionCode?: string(name='ActionCode'),
      actionInfo?: string(name='ActionInfo'),
      clientId?: string(name='ClientId'),
      msgId?: string(name='MsgId'),
      time?: string(name='Time'),
    }
  ](name='MessageTraceLists'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  total?: long(name='Total'),
}

model QueryMqttTraceMessageSubscribeResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMqttTraceMessageSubscribeResponseBody(name='body'),
}

async function queryMqttTraceMessageSubscribe(request: QueryMqttTraceMessageSubscribeRequest): QueryMqttTraceMessageSubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMqttTraceMessageSubscribe', 'POST', '/', 'json', false, 'json', request);
}

model QuerySessionByClientIdRequest {
  clientId: string(name='ClientId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model QuerySessionByClientIdResponseBody = {
  onlineStatus?: boolean(name='OnlineStatus'),
  requestId?: string(name='RequestId'),
}

model QuerySessionByClientIdResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySessionByClientIdResponseBody(name='body'),
}

async function querySessionByClientId(request: QuerySessionByClientIdRequest): QuerySessionByClientIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySessionByClientId', 'POST', '/', 'json', false, 'json', request);
}

model QueryTokenRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  token: string(name='Token', position='Query'),
}

model QueryTokenResponseBody = {
  requestId?: string(name='RequestId'),
  tokenStatus?: boolean(name='TokenStatus'),
}

model QueryTokenResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTokenResponseBody(name='body'),
}

async function queryToken(request: QueryTokenRequest): QueryTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryToken', 'POST', '/', 'json', false, 'json', request);
}

model RefreshDeviceCredentialRequest {
  clientId: string(name='ClientId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model RefreshDeviceCredentialResponseBody = {
  deviceCredential?: {
    clientId?: string(name='ClientId'),
    createTime?: long(name='CreateTime'),
    deviceAccessKeyId?: string(name='DeviceAccessKeyId'),
    deviceAccessKeySecret?: string(name='DeviceAccessKeySecret'),
    instanceId?: string(name='InstanceId'),
    updateTime?: long(name='UpdateTime'),
  }(name='DeviceCredential'),
  requestId?: string(name='RequestId'),
}

model RefreshDeviceCredentialResponse = {
  headers: map[string]string(name='headers'),
  body: RefreshDeviceCredentialResponseBody(name='body'),
}

async function refreshDeviceCredential(request: RefreshDeviceCredentialRequest): RefreshDeviceCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshDeviceCredential', 'POST', '/', 'json', false, 'json', request);
}

model RegisterDeviceCredentialRequest {
  clientId: string(name='ClientId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model RegisterDeviceCredentialResponseBody = {
  deviceCredential?: {
    clientId?: string(name='ClientId'),
    createTime?: long(name='CreateTime'),
    deviceAccessKeyId?: string(name='DeviceAccessKeyId'),
    deviceAccessKeySecret?: string(name='DeviceAccessKeySecret'),
    instanceId?: string(name='InstanceId'),
    updateTime?: long(name='UpdateTime'),
  }(name='DeviceCredential'),
  requestId?: string(name='RequestId'),
}

model RegisterDeviceCredentialResponse = {
  headers: map[string]string(name='headers'),
  body: RegisterDeviceCredentialResponseBody(name='body'),
}

async function registerDeviceCredential(request: RegisterDeviceCredentialRequest): RegisterDeviceCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterDeviceCredential', 'POST', '/', 'json', false, 'json', request);
}

model RevokeTokenRequest {
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
  token: string(name='Token', position='Query'),
}

model RevokeTokenResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeTokenResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeTokenResponseBody(name='body'),
}

async function revokeToken(request: RevokeTokenRequest): RevokeTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeToken', 'POST', '/', 'json', false, 'json', request);
}

model SendMessageRequest {
  instanceId: string(name='InstanceId', position='Query'),
  mqttTopic: string(name='MqttTopic', position='Query'),
  payload: string(name='Payload', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model SendMessageResponseBody = {
  msgId?: string(name='MsgId'),
  requestId?: string(name='RequestId'),
}

model SendMessageResponse = {
  headers: map[string]string(name='headers'),
  body: SendMessageResponseBody(name='body'),
}

async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendMessage', 'POST', '/', 'json', false, 'json', request);
}

model UnRegisterDeviceCredentialRequest {
  clientId: string(name='ClientId', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  regionId: string(name='RegionId', position='Host'),
}

model UnRegisterDeviceCredentialResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnRegisterDeviceCredentialResponse = {
  headers: map[string]string(name='headers'),
  body: UnRegisterDeviceCredentialResponseBody(name='body'),
}

async function unRegisterDeviceCredential(request: UnRegisterDeviceCredentialRequest): UnRegisterDeviceCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnRegisterDeviceCredential', 'POST', '/', 'json', false, 'json', request);
}

