/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'OnsMqtt';
  @version = '2020-04-20';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ActiveCaCertificateRequest {
  mqttInstanceId: string(name='MqttInstanceId', description='CA证书所绑定的实例ID，即云消息队列 MQTT 版的实例ID。

This parameter is required.', example='post-cn-7mz2d******', position='Query'),
  sn: string(name='Sn', description='待激活CA证书的SN序列号，用于唯一标识一个CA证书。

取值范围：不超过128 Byte。

This parameter is required.', example='007269004887******', position='Query'),
}

model ActiveCaCertificateResponseBody = {
  requestId?: string(name='RequestId', description='Public parameters, each request ID is unique and can be used for troubleshooting and problem localization.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
  sn?: string(name='Sn', description='The SN serial number of the activated CA certificate, used to uniquely identify a CA certificate.', example='007269004887******'),
}

model ActiveCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActiveCaCertificateResponseBody(name='body'),
}

/**
  * @description - 仅铂金版和专业版实例支持使用ActiveCaCertificate接口。
  * - 单用户请求频率限制为500次/秒。如有特殊需求，请联系云消息队列 MQTT 版技术支持，钉钉群号：35228338。
  * -  ActiveCaCertificate接口仅支持对已在云消息队列 MQTT 版服务端注册的CA证书进行操作，您可以通过[ListCaCertificate](https://help.aliyun.com/document_detail/436768.html)接口查询指定实例下已注册的CA证书。
  * @param request  the request parameters of ActiveCaCertificate  ActiveCaCertificateRequest
  * @return ActiveCaCertificateResponse
 */
async function activeCaCertificate(request: ActiveCaCertificateRequest): ActiveCaCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActiveCaCertificate', 'POST', '/', 'json', false, 'json', request);
}

model ActiveDeviceCertificateRequest {
  caSn: string(name='CaSn', description='The serial number of the CA certificate to which the device certificate belongs. The serial number is the unique identifier of a CA certificate.

The serial number of a CA certificate cannot exceed 128 bytes in size.

This parameter is required.', example='007269004887******', position='Query'),
  deviceSn: string(name='DeviceSn', description='The serial number of the device certificate that you want to reactivate. The serial number is the unique identifier of a device.

This parameter is required.', example='356217374433******', position='Query'),
  mqttInstanceId: string(name='MqttInstanceId', description='The ID of the ApsaraMQ for MQTT instance to which the device certificate is bound.

This parameter is required.', example='post-cn-7mz2d******', position='Query'),
}

model ActiveDeviceCertificateResponseBody = {
  deviceSn?: string(name='DeviceSn', description='The serial number of the device certificate that you reactivated. The serial number is the unique identifier of a device certificate.', example='356217374433******'),
  requestId?: string(name='RequestId', description='The request ID.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model ActiveDeviceCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActiveDeviceCertificateResponseBody(name='body'),
}

/**
  * @description *   This operation is supported only by ApsaraMQ for MQTT Enterprise Platinum Edition and Professional Edition instances.
  * *   You can call this operation up to 500 times per second per Alibaba Cloud account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * @param request  the request parameters of ActiveDeviceCertificate  ActiveDeviceCertificateRequest
  * @return ActiveDeviceCertificateResponse
 */
async function activeDeviceCertificate(request: ActiveDeviceCertificateRequest): ActiveDeviceCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ActiveDeviceCertificate', 'POST', '/', 'json', false, 'json', request);
}

model AddCustomAuthConnectBlackRequest {
  clientId: string(name='ClientId', description='The client ID of the device whose connections you want to disable.

This parameter is required.', example='GID_test@@@test', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.

This parameter is required.', example='mqtt-cn-i7m26mf****', position='Body'),
}

model AddCustomAuthConnectBlackResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The value 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='82B9E503-F4A1-4F30-976F-C6999FF9****'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. Valid values: true and false.', example='True'),
}

model AddCustomAuthConnectBlackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCustomAuthConnectBlackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddCustomAuthConnectBlack  AddCustomAuthConnectBlackRequest
  * @return AddCustomAuthConnectBlackResponse
 */
async function addCustomAuthConnectBlack(request: AddCustomAuthConnectBlackRequest): AddCustomAuthConnectBlackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCustomAuthConnectBlack', 'POST', '/', 'json', true, 'form', request);
}

model AddCustomAuthIdentityRequest {
  clientId?: string(name='ClientId', description='The client ID if you set IdentityType to CLIENT.', example='GID_test@@@test', position='Body'),
  identityType: string(name='IdentityType', description='The identity type. Valid values: USER and CLIENT.

This parameter is required.', example='USER', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the Message Queue for MQTT instance.

This parameter is required.', example='mqtt-cn-xxxx', position='Body'),
  secret: string(name='Secret', description='The AccessKey secret.

This parameter is required.', example='xxxxx', position='Body'),
  signMode?: string(name='SignMode', description='The signature verification mode. ORIGIN: compares the password and the AccessKey secret. SIGNED: uses the HMAC_SHA1 algorithm to sign the client ID to obtain a password and then compares the password.', example='SIGNED', position='Body'),
  username: string(name='Username', description='The username.

This parameter is required.', example='test', position='Body'),
}

model AddCustomAuthIdentityResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. Valid values: true and false.', example='True'),
}

model AddCustomAuthIdentityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCustomAuthIdentityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddCustomAuthIdentity  AddCustomAuthIdentityRequest
  * @return AddCustomAuthIdentityResponse
 */
async function addCustomAuthIdentity(request: AddCustomAuthIdentityRequest): AddCustomAuthIdentityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCustomAuthIdentity', 'POST', '/', 'json', true, 'form', request);
}

model AddCustomAuthPermissionRequest {
  effect: string(name='Effect', description='Specify whether to allow or deny the permissions.

This parameter is required.', example='ALLOW', position='Body'),
  identity: string(name='Identity', description='The username or client ID.

This parameter is required.', example='test', position='Body'),
  identityType: string(name='IdentityType', description='The identity type. Valid values: USER and CLIENT.

This parameter is required.', example='USER', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.

This parameter is required.', example='mqtt-cn-0pp12gl****', position='Body'),
  permitAction: string(name='PermitAction', description='The permissions that you want to add.

This parameter is required.', example='PUB_SUB', position='Body'),
  topic: string(name='Topic', description='The topic on which you want to add the permissions. Multi-level topics and wildcard characters are supported.

This parameter is required.', example='test/t1', position='Body'),
}

model AddCustomAuthPermissionResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request is successful.', example='200'),
  message?: string(name='Message', description='The error message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='82B9E503-F4A1-4F30-976F-C6999FF9****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='True'),
}

model AddCustomAuthPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddCustomAuthPermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddCustomAuthPermission  AddCustomAuthPermissionRequest
  * @return AddCustomAuthPermissionResponse
 */
async function addCustomAuthPermission(request: AddCustomAuthPermissionRequest): AddCustomAuthPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddCustomAuthPermission', 'POST', '/', 'json', true, 'form', request);
}

model ApplyTokenRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  actions: string(name='Actions', description='The permission type of the token. Valid values:

*   **R**: read-only. You can only subscribe to the specified topics.
*   **W**: write-only. You can only send messages to the specified topics.
*   **R,W**: read and write. You can send messages to and subscribe to the specified topics. Separate **R** and **W** with a comma (,).

This parameter is required.', example='R', position='Query'),
  expireTime: long(name='ExpireTime', description='The timestamp that indicates the point in time when the token expires. Unit: milliseconds. The minimum validity period of a token is 60 seconds, and the maximum validity period of a token is 30 days. If you specify a validity period of more than 30 days for a token, no errors are returned. However, the token is valid only for 30 days.

For example, you want to specify a validity period of 60 seconds for a token. If the current system timestamp is 1609434061000, you must set this parameter to **1609434121000**. The value is calculated by using the following formula: 1609434061000 + 60 x 1000 = 1609434121000.

This parameter is required.', example='1609434121000', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the [ApsaraMQ for MQTT console](https://mqtt.console.aliyun.com/).

This parameter is required.', example='post-cn-0pp12gl****', position='Query'),
  resources: string(name='Resources', description='The topics on the ApsaraMQ for MQTT instance. Separate multiple topics with commas (,). Each token can be used to access up to 100 topics. Multiple topics are sorted in alphabetic order. MQTT wildcards, including single-level wildcards represented by plus signs (+) and multi-level wildcards represented by number signs (#), can be used for the Resources parameter that you register to apply for a token.

For example, if you set the **Resources** parameter to Topic1/+ when you apply for a token, the ApsaraMQ for MQTT client can manage the topics in Topic1/xxx. If you set the **Resources** parameter to Topic1/# when you apply for a token, the ApsaraMQ for MQTT client can manage topics of any level in Topic1/xxx/xxx/xxx.

>  ApsaraMQ for MQTT supports subtopics. You can specify subtopics in the code for messaging instead of configuring them in the ApsaraMQ for MQTT console. Forward slashes (/) are used to separate topics of different levels. For more information, see [Terms](https://help.aliyun.com/document_detail/42420.html).

This parameter is required.', example='TopicA/+', position='Query'),
}

model ApplyTokenResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='31782AAF-D0CC-44C3-ABFD-1B500276****'),
  token?: string(name='Token', description='The token that is returned by the ApsaraMQ for MQTT broker.

>  Do not assume the length, format, or rule of the token to return. The actual returned token shall prevail.', example='LzMT+XLFl5s/YWJ/MlDz4t/Lq5HC1iGU1P28HAMaxYxn8aQbALNtml7QZKl9L9kPe6LqUb95tEVo+zUqOogs9+jZwDUSzsd4X4qaD3n2TrBEuMOqKkk1Xdrvu9VBQQvIYbz7MJWZDYC3DlW7gLEr33Cuj54iIhagtBi3epStJitsssWs7otY9zhKOSZxhr49G3d0bh35mwyP18EMvDas8UlzeSozsSrujNUqZXOGK0PEBSd+rWMGDJlCt6GFmJgm2JFY7PJwf/7OOSmUYIYFs5o/PuPpoTMF+hcVXMs+0yDukIMTOzG9m3t8k36PVrghFmnK6pC3Rt3mibjW****ng=='),
}

model ApplyTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyTokenResponseBody(name='body'),
}

/**
  * @description *   You can call this operation up to 100 times per second per account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * *   Each successful call to the **ApplyToken** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * @param request  the request parameters of ApplyToken  ApplyTokenRequest
  * @return ApplyTokenResponse
 */
async function applyToken(request: ApplyTokenRequest): ApplyTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyToken', 'POST', '/', 'json', false, 'json', request);
}

model BatchQuerySessionByClientIdsRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  clientIdList: [ string ](name='ClientIdList', description='The ApsaraMQ for MQTT clients.

This parameter is required.', example='ClientIdList.1', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the [ApsaraMQ for MQTT console](https://mqtt.console.aliyun.com).

This parameter is required.', example='post-cn-0pp12gl****', position='Query'),
}

model BatchQuerySessionByClientIdsResponseBody = {
  onlineStatusList?: [ 
    {
      clientId?: string(name='ClientId', description='The ID of the ApsaraMQ for MQTT client. For more information about client IDs, see [Terms](https://help.aliyun.com/document_detail/42420.html).', example='GID_test@0001'),
      onlineStatus?: boolean(name='OnlineStatus', description='Indicates whether the ApsaraMQ for MQTT client is online. Valid values:

*   **true**
*   **false**', example='true'),
    }
  ](name='OnlineStatusList', description='The status list of all queried ApsaraMQ for MQTT clients.'),
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='63309FDB-ED6C-46AE-B31C-A172FBA0****'),
}

model BatchQuerySessionByClientIdsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchQuerySessionByClientIdsResponseBody(name='body'),
}

/**
  * @description *   You can call the **BatchQuerySessionByClientIds** operation up to 100 times per second. For more information, see [Limits on QPS](https://help.aliyun.com/document_detail/163047.html).
  * *   You can call the **BatchQuerySessionByClientIds** operation to query the status of up to 10 ApsaraMQ for MQTT clients in a single query.
  * *   Each successful call to the **BatchQuerySessionByClientIds** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * @param request  the request parameters of BatchQuerySessionByClientIds  BatchQuerySessionByClientIdsRequest
  * @return BatchQuerySessionByClientIdsResponse
 */
async function batchQuerySessionByClientIds(request: BatchQuerySessionByClientIdsRequest): BatchQuerySessionByClientIdsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchQuerySessionByClientIds', 'POST', '/', 'json', false, 'json', request);
}

model CloseConnectionRequest {
  clientId: string(name='ClientId', description='Client ID of the device

This parameter is required.', example='GID_test@@@test', position='Query'),
  instanceId: string(name='InstanceId', description='ID of the Micro Message Queue MQTT version instance.

This parameter is required.', example='post-cn-0pp12gl****', position='Query'),
}

model CloseConnectionResponseBody = {
  code?: int32(name='Code', description='Return code of the interface: 200 indicates success. Other values indicate error codes. For details about the error codes, see Error Codes.', example='200'),
  message?: string(name='Message', description='Call result information', example='operation success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='82B9E503-F4A1-4F30-976F-C6999FF9****'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. true means success, false means failure.', example='True'),
}

model CloseConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CloseConnectionResponseBody(name='body'),
}

/**
  * @description This API is still in the testing phase and is only available for Professional Edition instances in the Shanghai region. Legacy instances are not supported at this time.
  * @param request  the request parameters of CloseConnection  CloseConnectionRequest
  * @return CloseConnectionResponse
 */
async function closeConnection(request: CloseConnectionRequest): CloseConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CloseConnection', 'POST', '/', 'json', false, 'json', request);
}

model CreateGroupIdRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  groupId: string(name='GroupId', description='The ID of the group that you want to create. The group ID must meet the following conventions:

*   The ID must be 7 to 64 characters in length. It must start with GID_ or GID- and can contain only letters, digits, hyphens (-), and underscores (_).
*   The ID cannot be changed after the group is created. For more information, see [Terms](https://help.aliyun.com/document_detail/42420.html).

This parameter is required.', example='GID_test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance to which the group belongs.

This parameter is required.', example='mqtt-cn-0pp1ldu****', position='Query'),
}

model CreateGroupIdResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='2C7D722D-0F3D-4415-A9CD-A464D82C****'),
}

model CreateGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGroupIdResponseBody(name='body'),
}

/**
  * @description Each successful call to the **CreateGroupId** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * @param request  the request parameters of CreateGroupId  CreateGroupIdRequest
  * @return CreateGroupIdResponse
 */
async function createGroupId(request: CreateGroupIdRequest): CreateGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGroupId', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCaCertificateRequest {
  mqttInstanceId: string(name='MqttInstanceId', description='The ID of the ApsaraMQ for MQTT instance to which the CA certificate is bound.

This parameter is required.', example='post-cn-7mz2d******', position='Query'),
  sn: string(name='Sn', description='The serial number of the CA certificate that you want to delete. The serial number is the unique identifier of a CA certificate.

The serial number of a CA certificate cannot exceed 128 bytes in size.

This parameter is required.', example='007269004887******', position='Query'),
}

model DeleteCaCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
  sn?: string(name='Sn', description='The serial number of the CA certificate that you deleted. The serial number is the unique identifier of a CA certificate.', example='007269004887******'),
}

model DeleteCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCaCertificateResponseBody(name='body'),
}

/**
  * @description *   This operation is supported only by ApsaraMQ for MQTT Enterprise Platinum Edition and Professional Edition instances.
  * *   You can call this operation up to 500 times per second per Alibaba Cloud account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * *   You can call this operation to delete only CA certificates that are registered with ApsaraMQ for MQTT brokers. You can call the [ListCaCertificate](https://help.aliyun.com/document_detail/436768.html) operation to query CA certificates that are registered with an ApsaraMQ for MQTT instance.
  * *   If you delete a specific CA certificate from an ApsaraMQ for MQTT broker, all device certificates that are issued by the CA certificate and are registered with the ApsaraMQ for MQTT broker are automatically deleted.
  * @param request  the request parameters of DeleteCaCertificate  DeleteCaCertificateRequest
  * @return DeleteCaCertificateResponse
 */
async function deleteCaCertificate(request: DeleteCaCertificateRequest): DeleteCaCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCaCertificate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCustomAuthConnectBlackRequest {
  clientId: string(name='ClientId', description='The ID of the ApsaraMQ for MQTT client.

This parameter is required.', example='GID_test@@@test', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.

This parameter is required.', example='post-cn-0pp12gl****', position='Body'),
}

model DeleteCustomAuthConnectBlackResponseBody = {
  code?: int32(name='Code', description='The response code. The status code 200 indicates that the request was successful.', example='200'),
  message?: string(name='Message', description='The error message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='317076B7-F946-46BC-A98F-4CF9777C****'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Valid values: true and false.', example='True'),
}

model DeleteCustomAuthConnectBlackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomAuthConnectBlackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCustomAuthConnectBlack  DeleteCustomAuthConnectBlackRequest
  * @return DeleteCustomAuthConnectBlackResponse
 */
async function deleteCustomAuthConnectBlack(request: DeleteCustomAuthConnectBlackRequest): DeleteCustomAuthConnectBlackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomAuthConnectBlack', 'POST', '/', 'json', true, 'form', request);
}

model DeleteCustomAuthIdentityRequest {
  clientId?: string(name='ClientId', description='The client ID if you set IdentityType to CLIENT.', example='GID_test@@@test', position='Body'),
  identityType: string(name='IdentityType', description='The identity type. Valid values:

*   USER
*   CLIENT

This parameter is required.', example='USER', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.

This parameter is required.', example='post-cn-0pp12gl****', position='Body'),
  username: string(name='Username', description='The username.

This parameter is required.', example='test', position='Body'),
}

model DeleteCustomAuthIdentityResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request is successful. Other status codes indicate that the request failed.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='11568B5B-13A8-4E72-9DBA-3A14F7D3****'),
  success?: boolean(name='Success', description='Indicates whether the operation is successful. Valid values: true and false.', example='True'),
}

model DeleteCustomAuthIdentityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomAuthIdentityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCustomAuthIdentity  DeleteCustomAuthIdentityRequest
  * @return DeleteCustomAuthIdentityResponse
 */
async function deleteCustomAuthIdentity(request: DeleteCustomAuthIdentityRequest): DeleteCustomAuthIdentityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomAuthIdentity', 'POST', '/', 'json', true, 'form', request);
}

model DeleteCustomAuthPermissionRequest {
  identity: string(name='Identity', description='The username or client ID.

This parameter is required.', example='test', position='Body'),
  identityType: string(name='IdentityType', description='The identity type. Valid values:

*   USER
*   CLIENT

This parameter is required.', example='USER', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.

This parameter is required.', example='mqtt-cn-0pp1ldu****', position='Body'),
  topic: string(name='Topic', description='The topic on which you want to grant permissions. Multi-level topics and Wildcard characters are supported.

This parameter is required.', example='test/t1', position='Body'),
}

model DeleteCustomAuthPermissionResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The message returned.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='34063BCA-0946-49C1-B824-2ED2C905****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='True'),
}

model DeleteCustomAuthPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCustomAuthPermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteCustomAuthPermission  DeleteCustomAuthPermissionRequest
  * @return DeleteCustomAuthPermissionResponse
 */
async function deleteCustomAuthPermission(request: DeleteCustomAuthPermissionRequest): DeleteCustomAuthPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCustomAuthPermission', 'POST', '/', 'json', true, 'form', request);
}

model DeleteDeviceCertificateRequest {
  caSn: string(name='CaSn', description='The serial number of the CA certificate to which the device certificate belongs. The serial number is the unique identifier of a CA certificate. CA certificates are used to validate device certificates.

The serial number of a CA certificate cannot exceed 128 bytes in size.

This parameter is required.', example='007269004887******', position='Query'),
  deviceSn: string(name='DeviceSn', description='The serial number of the device certificate whose registration information you want to delete. The serial number is the unique identifier of a device.

The serial number of a device certificate cannot exceed 128 bytes in size.

This parameter is required.', example='356217374433****', position='Query'),
  mqttInstanceId: string(name='MqttInstanceId', description='The ID of the ApsaraMQ for MQTT instance to which the device certificate is bound.

This parameter is required.', example='post-cn-7mz2d******', position='Query'),
}

model DeleteDeviceCertificateResponseBody = {
  deviceSn?: string(name='DeviceSn', description='The serial number of the device certificate whose registration information is deleted. The serial number is the unique identifier of a device certificate.', example='356217374433******'),
  requestId?: string(name='RequestId', description='The request ID.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model DeleteDeviceCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDeviceCertificateResponseBody(name='body'),
}

/**
  * @description *   This operation is supported only by ApsaraMQ for MQTT Enterprise Platinum Edition and Professional Edition instances.
  * *   You can call this operation up to 500 times per second per Alibaba Cloud account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * @param request  the request parameters of DeleteDeviceCertificate  DeleteDeviceCertificateRequest
  * @return DeleteDeviceCertificateResponse
 */
async function deleteDeviceCertificate(request: DeleteDeviceCertificateRequest): DeleteDeviceCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDeviceCertificate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteGroupIdRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  groupId: string(name='GroupId', description='The ID of the group that you want to delete.

This parameter is required.', example='GID_test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance from which you want to delete a group.

This parameter is required.', example='mqtt-cn-0pp1ldu****', position='Query'),
}

model DeleteGroupIdResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='0621DDD7-F0E9-4D35-8900-518116D6****'),
}

model DeleteGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGroupIdResponseBody(name='body'),
}

/**
  * @description Each successful call to the **DeleteGroupId** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * @param request  the request parameters of DeleteGroupId  DeleteGroupIdRequest
  * @return DeleteGroupIdResponse
 */
async function deleteGroupId(request: DeleteGroupIdRequest): DeleteGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteGroupId', 'POST', '/', 'json', false, 'json', request);
}

model GetCaCertificateRequest {
  mqttInstanceId: string(name='MqttInstanceId', description='The instance ID bound to the CA certificate, which is the instance ID of the MQTT version of the cloud message queue.

This parameter is required.', example='post-cn-7mz2d******', position='Query'),
  sn: string(name='Sn', description='The SN serial number of the CA certificate to be queried, used to uniquely identify a CA certificate.

This parameter is required.', example='007269004887******', position='Query'),
}

model GetCaCertificateResponseBody = {
  data?: {
    caContent?: string(name='CaContent', description='Content of the CA certificate.
> \\n represents a new line.', example='-----BEGIN CERTIFICATE-----\\nMIIDuzCCAqdGVzdC5jbi1xaW5n******\\n-----END CERTIFICATE-----'),
    caName?: string(name='CaName', description='Name of the CA certificate', example='mqtt_ca'),
    registrationCode?: string(name='RegistrationCode', description='Registration code of the CA certificate', example='13274673-8f90-4630-bea1-9cccb25756ad2089******'),
    sn?: string(name='Sn', description='The SN serial number of the CA certificate, used to uniquely identify a CA certificate. Value range: no more than 128 bytes.', example='00f26900ba87******'),
    status?: string(name='Status', description='The status of the CA certificate. The values are as follows:
- **0**: Indicates that the certificate is in an inactive state. - **1**: Indicates that the certificate is in an active state.
> After the CA certificate is registered, it is in an active state by default.', example='1'),
    validBegin?: string(name='ValidBegin', description='The start time when the CA certificate becomes effective. The format is a Unix timestamp in milliseconds.', example='1654137303000'),
    validEnd?: string(name='ValidEnd', description='The end time when the CA certificate becomes effective. The format is a Unix timestamp in milliseconds.', example='1969497303000'),
    verificationContent?: string(name='VerificationContent', description='Content of the Verification certificate.
> \\n represents a new line.', example='-----BEGIN CERTIFICATE-----\\nMIID/DCCAu+Y5sRMpp9tnd+4s******\\n-----END CERTIFICATE-----'),
  }(name='Data', description='Certificate details.'),
  requestId?: string(name='RequestId', description='Public parameters, each request ID is unique and can be used for troubleshooting and problem localization.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model GetCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCaCertificateResponseBody(name='body'),
}

/**
  * @description - 仅铂金版和专业版实例支持使用GetCaCertificate接口。
  * - 单用户请求频率限制为500次/秒。如有特殊需求，请联系云消息队列 MQTT 版技术支持，钉钉群号：35228338。
  * @param request  the request parameters of GetCaCertificate  GetCaCertificateRequest
  * @return GetCaCertificateResponse
 */
async function getCaCertificate(request: GetCaCertificateRequest): GetCaCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCaCertificate', 'GET', '/', 'json', false, 'json', request);
}

model GetDeviceCertificateRequest {
  caSn: string(name='CaSn', description='The SN serial number of the CA certificate to which the device certificate to be queried belongs, used to uniquely identify a CA certificate. Value range: no more than 128 bytes.

This parameter is required.', example='007269004887******', position='Query'),
  deviceSn: string(name='DeviceSn', description='The SN serial number of the device certificate to be queried, used to uniquely identify a device certificate. Value range: no more than 128 bytes.

This parameter is required.', example='356217374433******', position='Query'),
  mqttInstanceId: string(name='MqttInstanceId', description='The instance ID to which the device certificate is bound, i.e., the instance ID of the Cloud Message Queue MQTT version.

This parameter is required.', example='post-cn-7mz2d******', position='Query'),
}

model GetDeviceCertificateResponseBody = {
  data?: {
    caSn?: string(name='CaSn', description='The SN serial number of the CA certificate to which the device certificate belongs, used to uniquely identify a CA certificate.', example='00f26900ba87******'),
    deviceContent?: string(name='DeviceContent', description='Content of the device certificate.

 represents a new line.', example='-----BEGIN DEVICECERTIFICATE-----\\nMIIDuzCCAqdGVzdC5jbi1xaW5n******\\n-----END DEVICECERTIFICATE-----'),
    deviceName?: string(name='DeviceName', description='Name of the device certificate.', example='mqtt_device'),
    deviceSn?: string(name='DeviceSn', description='The SN serial number of the device certificate, used to uniquely identify a device certificate.', example='356217374433******'),
    status?: string(name='Status', description='The status of the device certificate. The values are as follows:
- **0**: Indicates that the certificate is in an inactive state. - **1**: Indicates that the certificate is in an active state.
> After the device certificate is registered, it is in an active state by default.', example='1'),
    validBegin?: string(name='ValidBegin', description='The start time when the device certificate becomes effective. The format is a Unix timestamp in milliseconds.', example='1654137303000'),
    validEnd?: string(name='ValidEnd', description='The end time when the device certificate becomes effective. The format is a Unix timestamp in milliseconds.', example='1969497303000'),
  }(name='Data', description='Certificate details.'),
  requestId?: string(name='RequestId', description='Public parameters, each request ID is unique and can be used for troubleshooting and problem localization.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model GetDeviceCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceCertificateResponseBody(name='body'),
}

/**
  * @description - Only Platinum edition instances support the use of the GetDeviceCertificate interface. - The request frequency limit per user is 500 requests/second. For special requirements, please contact Cloud Message Queue MQTT version technical support, DingTalk group number: 35228338.
  * @param request  the request parameters of GetDeviceCertificate  GetDeviceCertificateRequest
  * @return GetDeviceCertificateResponse
 */
async function getDeviceCertificate(request: GetDeviceCertificateRequest): GetDeviceCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceCertificate', 'GET', '/', 'json', false, 'json', request);
}

model GetDeviceCredentialRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  clientId: string(name='ClientId', description='The client ID of the device whose access credential you want to query.

This parameter is required.', example='GID_test@@@test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.

This parameter is required.', example='post-cn-0pp12gl****', position='Query'),
}

model GetDeviceCredentialResponseBody = {
  deviceCredential?: {
    clientId?: string(name='ClientId', description='The client ID of the device.', example='GID_test@@@test'),
    createTime?: long(name='CreateTime', description='The timestamp that indicates when the access credential of the device was created. Unit: milliseconds.', example='1605541382000'),
    deviceAccessKeyId?: string(name='DeviceAccessKeyId', description='The AccessKey ID of the device.', example='DC.Z5fXh9sRRVufyLi6wo****'),
    deviceAccessKeySecret?: string(name='DeviceAccessKeySecret', description='The AccessKey secret of the device.', example='DC.BJMkn4eMQJK2vaApTS****'),
    instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.', example='post-cn-0pp12gl****'),
    updateTime?: long(name='UpdateTime', description='The timestamp that indicates when the access credential of the device was last updated. The value of this parameter is a UNIX timestamp in milliseconds.', example='1605541382000'),
  }(name='DeviceCredential', description='The information about the access credential of the device.'),
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='E4581CCF-62AF-44D9-B5B4-D1DQDC0E****'),
}

model GetDeviceCredentialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceCredentialResponseBody(name='body'),
}

/**
  * @description *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](https://help.aliyun.com/document_detail/163047.html).
  * *   Each successful call to the **GetDeviceCredential** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * @param request  the request parameters of GetDeviceCredential  GetDeviceCredentialRequest
  * @return GetDeviceCredentialResponse
 */
async function getDeviceCredential(request: GetDeviceCredentialRequest): GetDeviceCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDeviceCredential', 'POST', '/', 'json', false, 'json', request);
}

model GetRegisterCodeRequest {
  mqttInstanceId: string(name='MqttInstanceId', description='The ID of the ApsaraMQ for MQTT instance.

This parameter is required.', example='post-cn-7mz2d******', position='Query'),
}

model GetRegisterCodeResponseBody = {
  registerCode?: string(name='RegisterCode', description='The registration code of the CA certificate.', example='13274673-8f90-4630-bea1-9cccb25756ad2089******'),
  requestId?: string(name='RequestId', description='The request ID.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model GetRegisterCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRegisterCodeResponseBody(name='body'),
}

/**
  * @description *   This API operation is supported only by ApsaraMQ for MQTT Enterprise Platinum Edition and Professional Edition instances.
  * *   You can call this operation up to 500 times per second per Alibaba Cloud account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * @param request  the request parameters of GetRegisterCode  GetRegisterCodeRequest
  * @return GetRegisterCodeResponse
 */
async function getRegisterCode(request: GetRegisterCodeRequest): GetRegisterCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRegisterCode', 'GET', '/', 'json', false, 'json', request);
}

model InactivateCaCertificateRequest {
  mqttInstanceId: string(name='MqttInstanceId', description='The ID of the ApsaraMQ for MQTT instance to which the CA certificate is bound.

This parameter is required.', example='post-cn-7mz2d******', position='Query'),
  sn: string(name='Sn', description='The serial number of the CA certificate that you want to deregister. The serial number is the unique identifier of a CA certificate.

The serial number of a CA certificate cannot exceed 128 bytes in size.

This parameter is required.', example='007269004887******', position='Query'),
}

model InactivateCaCertificateResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
  sn?: string(name='Sn', description='The serial number of the CA certificate that is deregistered. The serial number is the unique identifier of a CA certificate.', example='007269004887******'),
}

model InactivateCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InactivateCaCertificateResponseBody(name='body'),
}

/**
  * @description *   This operation is supported only by ApsaraMQ for MQTT Enterprise Platinum Edition and Professional Edition instances.
  * *   You can call this operation up to 500 times per second per Alibaba Cloud account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * *   You can call this operation to deregister only CA certificates that are registered with ApsaraMQ for MQTT brokers. You can call the [ListCaCertificate](https://help.aliyun.com/document_detail/436768.html) operation to query CA certificates that are registered with an ApsaraMQ for MQTT instance.
  * @param request  the request parameters of InactivateCaCertificate  InactivateCaCertificateRequest
  * @return InactivateCaCertificateResponse
 */
async function inactivateCaCertificate(request: InactivateCaCertificateRequest): InactivateCaCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InactivateCaCertificate', 'POST', '/', 'json', false, 'json', request);
}

model InactivateDeviceCertificateRequest {
  caSn: string(name='CaSn', description='The serial number of the CA certificate to which the device certificate that you want to deregister belongs. The serial number is the unique identifier of a CA certificate.

The serial number of a CA certificate cannot exceed 128 bytes in size.

This parameter is required.', example='007269004887******', position='Query'),
  deviceSn: string(name='DeviceSn', description='The serial number of the device certificate that you want to deregister. The serial number is the unique identifier of a device.

This parameter is required.', example='356217374433******', position='Query'),
  mqttInstanceId: string(name='MqttInstanceId', description='The ID of the ApsaraMQ for MQTT instance to which the device certificate that you want to deregister is bound.

This parameter is required.', example='post-cn-7mz2d******', position='Query'),
}

model InactivateDeviceCertificateResponseBody = {
  deviceSn?: string(name='DeviceSn', description='The serial number of the device certificate that is deregistered. The serial number is the unique identifier of a device certificate.', example='356217374433******'),
  requestId?: string(name='RequestId', description='The request ID.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model InactivateDeviceCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InactivateDeviceCertificateResponseBody(name='body'),
}

/**
  * @description *   This operation is supported only by ApsaraMQ for MQTT Enterprise Platinum Edition and Professional Edition instances.
  * *   You can call this operation up to 500 times per second per Alibaba Cloud account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * @param request  the request parameters of InactivateDeviceCertificate  InactivateDeviceCertificateRequest
  * @return InactivateDeviceCertificateResponse
 */
async function inactivateDeviceCertificate(request: InactivateDeviceCertificateRequest): InactivateDeviceCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InactivateDeviceCertificate', 'POST', '/', 'json', false, 'json', request);
}

model ListCaCertificateRequest {
  mqttInstanceId: string(name='MqttInstanceId', description='The instance ID of the Cloud Message Queue MQTT version, indicating which instance\\"s CA certificates need to be viewed.

This parameter is required.', example='post-cn-7mz2d******', position='Query'),
  pageNo: string(name='PageNo', description='Indicates the page number of the returned results. The starting page is counted from 1.

This parameter is required.', example='2', position='Query'),
  pageSize: string(name='PageSize', description='The maximum number of query records to display per page. Value range: 1 to 100.

This parameter is required.', example='10', position='Query'),
}

model ListCaCertificateResponseBody = {
  data?: {
    caCertificateVOS?: [ 
      {
        caContent?: string(name='CaContent', description='Content of the CA certificate. 
> \\n represents a new line.', example='-----BEGIN CERTIFICATE-----\\nMIIDuzCCAqdGVzdC5jbi1xaW5n******\\n-----END CERTIFICATE-----'),
        caName?: string(name='CaName', description='Name of the CA certificate', example='mqtt_ca'),
        registrationCode?: string(name='RegistrationCode', description='Registration code of the CA certificate', example='13274673-8f90-4630-bea1-9cccb25756ad2089******'),
        sn?: string(name='Sn', description='SN serial number of the CA certificate', example='007269004887******'),
        status?: string(name='Status', description='The status of the CA certificate. The values are as follows:
- **0**: Indicates that the certificate is in an inactive state. - **1**: Indicates that the certificate is in an active state.
> After the CA certificate is registered, it is in an active state by default.', example='1'),
        validBegin?: string(name='ValidBegin', description='The start time when the CA certificate becomes effective. The format is a Unix timestamp in milliseconds.', example='1654137303000'),
        validEnd?: string(name='ValidEnd', description='The end time when the CA certificate becomes effective. The format is a Unix timestamp in milliseconds.', example='1969497303000'),
        verificationContent?: string(name='VerificationContent', description='Verify the content of the certificate. 
> \\n represents a new line.', example='-----BEGIN CERTIFICATE-----\\nMIID/DCCAu+Y5sRMpp9tnd+4s******\\n-----END CERTIFICATE-----'),
      }
    ](name='CaCertificateVOS', description='Details of the CA certificate'),
    pageNo?: int32(name='PageNo', description='The current page number of the returned query records.', example='2'),
    pageSize?: int32(name='PageSize', description='The maximum number of results to display per page.', example='10'),
    total?: int32(name='Total', description='Maximum number of pages in the query result.', example='1'),
  }(name='Data', description='Query result.'),
  requestId?: string(name='RequestId', description='Public parameters, each request ID is unique and can be used for troubleshooting and problem localization.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model ListCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCaCertificateResponseBody(name='body'),
}

/**
  * @description - Only Platinum and Professional instances support using the ListCaCertificate interface. - The request frequency limit per user is 500 times/second. For special requirements, please contact the Micro Message Queue MQTT version technical support, DingTalk group number: 35228338.
  * @param request  the request parameters of ListCaCertificate  ListCaCertificateRequest
  * @return ListCaCertificateResponse
 */
async function listCaCertificate(request: ListCaCertificateRequest): ListCaCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListCaCertificate', 'GET', '/', 'json', false, 'json', request);
}

model ListDeviceCertificateRequest {
  mqttInstanceId: string(name='MqttInstanceId', description='The instance ID of the Cloud Message Queue MQTT version, indicating which instance\\"s device certificates need to be viewed.

This parameter is required.', example='post-cn-7mz2d******', position='Query'),
  pageNo: string(name='PageNo', description='Indicates which page of the results to return. The starting page is counted from 1.

This parameter is required.', example='2', position='Query'),
  pageSize: string(name='PageSize', description='The maximum number of query records to display per page. Value range: 1 to 100.

This parameter is required.', example='10', position='Query'),
}

model ListDeviceCertificateResponseBody = {
  data?: {
    deviceCertificateVOS?: [ 
      {
        caSn?: string(name='CaSn', description='The SN serial number of the CA certificate to which the device certificate belongs, used to uniquely identify a CA certificate.', example='00f26900ba87******'),
        deviceContent?: string(name='DeviceContent', description='Content of the device certificate.

 represents a new line.', example='-----BEGIN DEVICECERTIFICATE-----\\nMIIDuzCCAqdGVzdC5jbi1xaW5n******\\n-----END DEVICECERTIFICATE-----'),
        deviceName?: string(name='DeviceName', description='Name of the device certificate.', example='mqtt_device'),
        deviceSn?: string(name='DeviceSn', description='The SN serial number of the device certificate, used to uniquely identify a device certificate.', example='356217374433******'),
        status?: string(name='Status', description='The status of the device certificate. The values are as follows:
- 0: indicates that the certificate is in an inactive state. - 1: indicates that the certificate is in an active state.
After the device certificate is registered, it defaults to the active state.', example='1'),
        validBegin?: string(name='ValidBegin', description='The start time when the device certificate becomes effective. The format is a Unix timestamp in milliseconds.', example='1654137303000'),
        validEnd?: string(name='ValidEnd', description='The end time when the device certificate becomes effective. Formatted as a Unix timestamp in milliseconds.', example='1969497303000'),
      }
    ](name='DeviceCertificateVOS', description='Details of the device certificate.'),
    pageNo?: int32(name='PageNo', description='The current page number of the returned query records.', example='2'),
    pageSize?: int32(name='PageSize', description='The maximum number of results to display per page.', example='10'),
    total?: int32(name='Total', description='Maximum number of pages in the query result.', example='1'),
  }(name='Data', description='Query result.'),
  requestId?: string(name='RequestId', description='Public parameters, each request ID is unique and can be used for troubleshooting and problem localization.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model ListDeviceCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeviceCertificateResponseBody(name='body'),
}

/**
  * @description - Only Platinum and Professional instances support using the ListDeviceCertificate interface. - The request frequency limit per user is 500 times/second. For special requirements, please contact Cloud Message Queue MQTT version technical support, DingTalk group number: 35228338.
  * @param request  the request parameters of ListDeviceCertificate  ListDeviceCertificateRequest
  * @return ListDeviceCertificateResponse
 */
async function listDeviceCertificate(request: ListDeviceCertificateRequest): ListDeviceCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceCertificate', 'GET', '/', 'json', false, 'json', request);
}

model ListDeviceCertificateByCaSnRequest {
  caSn: string(name='CaSn', description='The SN serial number of the CA certificate to be queried, indicating which CA certificate\\"s registered device certificates are to be retrieved.

This parameter is required.', example='007269004887******', position='Query'),
  mqttInstanceId: string(name='MqttInstanceId', description='The instance ID bound to the CA certificate, which is the instance ID of the MQTT version of the cloud message queue.

This parameter is required.', example='post-cn-7mz2d******', position='Query'),
  pageNo: string(name='PageNo', description='Indicates the page number of the returned results. The starting page is counted from 1.

This parameter is required.', example='2', position='Query'),
  pageSize: string(name='PageSize', description='The maximum number of query records to display per page. Value range: 1 to 100.

This parameter is required.', example='10', position='Query'),
}

model ListDeviceCertificateByCaSnResponseBody = {
  data?: {
    deviceCertificateVOS?: [ 
      {
        caSn?: string(name='CaSn', description='The SN serial number of the CA certificate to which the device certificate belongs, used to uniquely identify a CA certificate.', example='00f26900ba87******'),
        deviceContent?: string(name='DeviceContent', description='Content of the device certificate.

 represents a new line.', example='-----BEGIN DEVICECERTIFICATE-----\\nMIIDuzCCAqdGVzdC5jbi1xaW5n******\\n-----END DEVICECERTIFICATE-----'),
        deviceName?: string(name='DeviceName', description='Name of the device certificate.', example='mqtt_device'),
        deviceSn?: string(name='DeviceSn', description='The SN serial number of the device certificate, used to uniquely identify a device certificate.', example='356217374433******'),
        status?: string(name='Status', description='The status of the device certificate. The values are as follows:
- 0: indicates that the certificate is in an inactive state. 
- 1: indicates that the certificate is in an active state.

After the device certificate is registered, it is in an active state by default.', example='1'),
        validBegin?: string(name='ValidBegin', description='The start time when the device certificate becomes effective. The format is a Unix timestamp in milliseconds.', example='1654137303000'),
        validEnd?: string(name='ValidEnd', description='The end time when the device certificate becomes effective. The format is a Unix timestamp in milliseconds.', example='1969497303000'),
      }
    ](name='DeviceCertificateVOS', description='Details of the device certificate.'),
    pageNo?: int32(name='PageNo', description='The current page number of the returned query records.', example='2'),
    pageSize?: int32(name='PageSize', description='The maximum number of results to display per page.', example='10'),
    total?: int32(name='Total', description='Total number of query results.', example='1'),
  }(name='Data', description='Query result.'),
  requestId?: string(name='RequestId', description='Public parameters, each request ID is unique and can be used for troubleshooting and problem localization.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model ListDeviceCertificateByCaSnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeviceCertificateByCaSnResponseBody(name='body'),
}

/**
  * @description - Only Platinum and Professional edition instances support using the ListDeviceCertificateByCaSn interface. - The request frequency limit for a single user is 500 times/second. For special requirements, please contact Cloud Message Queue MQTT version technical support, DingTalk group number: 35228338.
  * @param request  the request parameters of ListDeviceCertificateByCaSn  ListDeviceCertificateByCaSnRequest
  * @return ListDeviceCertificateByCaSnResponse
 */
async function listDeviceCertificateByCaSn(request: ListDeviceCertificateByCaSnRequest): ListDeviceCertificateByCaSnResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceCertificateByCaSn', 'GET', '/', 'json', false, 'json', request);
}

model ListDeviceCredentialClientIdRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  groupId: string(name='GroupId', description='Group ID of the MQTT version of the micro message queue.

This parameter is required.', example='GID_xxx', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the Cloud Message Queue MQTT version instance, which must match the actual instance ID used by the client. You can obtain this ID from the **Instance Details** page in the console.

This parameter is required.', example='mqtt-xxxxxxxx', position='Query'),
  nextToken?: string(name='NextToken', description='Token for starting the next page query.', example='FFdXXXXXWa', position='Query'),
  pageNo?: string(name='PageNo', description='Indicates the page number of the returned results. The starting page is counted from 1.', example='1', position='Query'),
  pageSize: string(name='PageSize', description='The maximum number of query records to display per page. 
Value range: 1 to 100.

This parameter is required.', example='100', position='Query'),
}

model ListDeviceCredentialClientIdResponseBody = {
  deviceCredentialClientIdList?: {
    clientIdList?: [ string ](name='ClientIdList', description='Client list.'),
    nextToken?: string(name='NextToken', description='Indicates whether there is a token (Token) for the next query. Values: 
- For the first query and when there is no next query, this field does not need to be filled. 
- If there is a next query, the value should be the NextToken returned from the previous API call.', example='634dxxxxx75b5f'),
    pageNo?: string(name='PageNo', description='The current page number of the returned query records.', example='1'),
    pageSize?: string(name='PageSize', description='The maximum number of results to display per page.', example='100'),
    total?: string(name='Total', description='Total number of query results.', example='10'),
  }(name='DeviceCredentialClientIdList', description='Returns the information list.'),
  requestId?: string(name='RequestId', description='Public parameters, each request ID is unique and can be used for troubleshooting and problem localization.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model ListDeviceCredentialClientIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeviceCredentialClientIdResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListDeviceCredentialClientId  ListDeviceCredentialClientIdRequest
  * @return ListDeviceCredentialClientIdResponse
 */
async function listDeviceCredentialClientId(request: ListDeviceCredentialClientIdRequest): ListDeviceCredentialClientIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDeviceCredentialClientId', 'POST', '/', 'json', false, 'json', request);
}

model ListGroupIdRequest {
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance whose groups you want to query.

This parameter is required.', example='mqtt-cn-0pp1ldu****', position='Query'),
}

model ListGroupIdResponseBody = {
  data?: [ 
    {
      createTime?: long(name='CreateTime', description='The time when the group was created.', example='1564577317000'),
      groupId?: string(name='GroupId', description='The queried group that belongs to the ApsaraMQ for MQTT instance.', example='GID_test1'),
      independentNaming?: boolean(name='IndependentNaming', description='Indicates whether a separate namespace is configured for the ApsaraMQ for MQTT instance. Valid values:

*   **true**: A separate namespace is configured for the ApsaraMQ for MQTT instance. Resource names must be unique within an ApsaraMQ for MQTT instance but can be the same across ApsaraMQ for MQTT instances.
*   **false**: No separate namespace is configured for the ApsaraMQ for MQTT instance. Resource names must be globally unique within an ApsaraMQ for MQTT instance and across ApsaraMQ for MQTT instances.', example='true'),
      instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance to which the group belongs.', example='post-cn-45910tj****'),
      updateTime?: long(name='UpdateTime', description='The time when the group was last updated.', example='1564577317000'),
    }
  ](name='Data', description='The details of a queried group.'),
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='95996EEB-D894-44FA-A87C-940F5CD9****'),
}

model ListGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupIdResponseBody(name='body'),
}

/**
  * @description Each successful call to the **ListGroupId** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * @param request  the request parameters of ListGroupId  ListGroupIdRequest
  * @return ListGroupIdResponse
 */
async function listGroupId(request: ListGroupIdRequest): ListGroupIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGroupId', 'POST', '/', 'json', false, 'json', request);
}

model QueryCustomAuthConnectBlackRequest {
  clientId?: string(name='ClientId', description='The ID of the client to be queried.', example='GID_test@@@test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.

This parameter is required.', example='post-111****', position='Query'),
  nextToken?: string(name='NextToken', description='The token that marks the end position of the previous returned page. To obtain the next batch of data, call the operation again by using the value of NextToken returned by the previous request. If you call this operation for the first time or want to query all results, set NextToken to an empty string.', example='xOfRU60sGEwN1OlFBIL8Ew==', position='Query'),
  size: int32(name='Size', description='The number of clients to be queried. Maximum value: 100.

This parameter is required.', example='100', minimum=1, maximum=100, position='Query'),
}

model QueryCustomAuthConnectBlackResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request is successful. Other status codes indicate that the request failed. For a list of error codes, see Error codes.', example='200'),
  data?: {
    nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='AAAAAZ0cM0HTqLXvgm7oMHWXcvc='),
    results?: [ 
      {
        clientId?: string(name='ClientId', description='The client ID.', example='GID_TEST@@@test'),
        effect?: string(name='Effect', description='Indicates whether to allow or deny access.', example='ALLOW'),
        permitAction?: string(name='PermitAction', description='The authorized permissions.', example='CONNECT'),
      }
    ](name='Results', description='The returned results.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='True'),
}

model QueryCustomAuthConnectBlackResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCustomAuthConnectBlackResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCustomAuthConnectBlack  QueryCustomAuthConnectBlackRequest
  * @return QueryCustomAuthConnectBlackResponse
 */
async function queryCustomAuthConnectBlack(request: QueryCustomAuthConnectBlackRequest): QueryCustomAuthConnectBlackResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCustomAuthConnectBlack', 'GET', '/', 'json', false, 'json', request);
}

model QueryCustomAuthIdentityRequest {
  clientId?: string(name='ClientId', description='The client ID if you set IdentityType to CLIENT.', example='GID_test@@@test', position='Query'),
  identityType?: string(name='IdentityType', description='The identity type.

Valid values:

*   USER
*   CLIENT', example='USER', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.

This parameter is required.', example='post-111****', position='Query'),
  nextToken?: string(name='NextToken', description='The token that marks the end position of the previous returned page. To obtain the next batch of data, call the operation again by using the value of NextToken returned by the previous request. If you call this operation for the first time or want to query all results, set NextToken to an empty string.', example='eyJhY2NvdW50IjoiMTM4MTcxODk3NDQzMjQ1OSIsImV2ZW50SWQiOiJGMkUxOUE3QS1FM0Q0LTVCOEYtQkU4OS1CNkMyM0RBM0UyRjIiLCJsb2dJZCI6IjY2LTEzODE3MTg5NzQ0MzI0NTkiLCJydyI6IlciLCJ0aW1lIjoxNjc4MzI2MTI1MDAwfQ', position='Query'),
  size: int32(name='Size', description='The number of identities to be queried. Maximum value: 100.

This parameter is required.', example='100', minimum=1, maximum=100, position='Query'),
  username?: string(name='Username', description='The username.', example='test', position='Query'),
}

model QueryCustomAuthIdentityResponseBody = {
  code?: int32(name='Code', description='The HTTP status code. The status code 200 indicates that the request is successful. Other status codes indicate that the request failed. For a list of error codes, see Error codes.', example='200'),
  data?: {
    nextToken?: string(name='NextToken', description='If excess return values exist, this parameter is returned.', example='AAAAAXA+GzVqTutYpgkFjBrchKzuvSbpuTqtt6OF9tsC9QnJ'),
    results?: [ 
      {
        clientId?: string(name='ClientId', description='The client ID if IdentityType is set to CLIENT.', example='GID_ICP@@@4d378084'),
        identityType?: string(name='IdentityType', description='The identity type. Valid values:

*   USER
*   CLIENT', example='USER'),
        secret?: string(name='Secret', description='The AccessKey secret.', example='62a5916d71767185b48907d85c2efae2'),
        signMode?: string(name='SignMode', description='The signature verification mode. ORIGIN: compares the password and the AccessKey secret. SIGNED: uses the HMAC_SHA1 algorithm to sign the client ID to obtain a password and then compares the password.', example='SIGNED'),
        username?: string(name='Username', description='The username.', example='test'),
      }
    ](name='Results', description='The returned results.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='11568B5B-13A8-4E72-9DBA-3A14F7D3****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='True'),
}

model QueryCustomAuthIdentityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCustomAuthIdentityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCustomAuthIdentity  QueryCustomAuthIdentityRequest
  * @return QueryCustomAuthIdentityResponse
 */
async function queryCustomAuthIdentity(request: QueryCustomAuthIdentityRequest): QueryCustomAuthIdentityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCustomAuthIdentity', 'GET', '/', 'json', false, 'json', request);
}

model QueryCustomAuthPermissionRequest {
  identity?: string(name='Identity', description='The username or client ID.', example='test', position='Query'),
  identityType?: string(name='IdentityType', description='The identity type.

Valid values:

*   USER
*   CLIENT', example='USER', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.

This parameter is required.', example='post-cn-0pp12gl****', position='Query'),
  nextToken?: string(name='NextToken', description='The token that marks the end position of the previous returned page. To obtain the next batch of data, call the operation again by using the value of NextToken returned by the previous request. If you call this operation for the first time or want to query all results, set NextToken to an empty string.', example='AAAAAThmKW2HkRgzo4G7IRRTK2fC6zZmAk6y0bwoNPFOOcSP', position='Query'),
  size: int32(name='Size', description='The number of queries to be returned. Maximum value: 100.

This parameter is required.', example='100', minimum=1, maximum=100, position='Query'),
  topic?: string(name='Topic', description='The topic whose authorization information you want to query. Multi-level topics and wildcard characters are supported.', example='test', position='Query'),
}

model QueryCustomAuthPermissionResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    nextToken?: string(name='NextToken', description='The token that marks the end position of the previous returned page. To obtain the next batch of data, call the operation again by using the value of NextToken returned by the previous request. If you call this operation for the first time or want to query all results, set NextToken to an empty string.', example='AAAAAV/vsqTyeMlX1MIk7/b6NrZLIlsSVf49O04ac7HAmlBoaYspakK7ZZkR3vRDp5Y9Nz0EmuWYrtF+1qkUwuJzPk/qEto/FGxl5Kd+qdwNt3t8'),
    results?: [ 
      {
        effect?: string(name='Effect', description='Indicates whether to allow or deny access.', example='ALLOW'),
        identity?: string(name='Identity', description='The username or client ID.', example='test'),
        identityType?: string(name='IdentityType', description='The identity type. Valid values:

*   USER
*   CLIENT', example='USER'),
        permitAction?: string(name='PermitAction', description='The authorized permissions.', example='PUB_SUB'),
        topic?: string(name='Topic', description='The topic name. Multi-level topics and wildcard characters are supported.', example='test'),
      }
    ](name='Results', description='The response results.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='63309FDB-ED6C-46AE-B31C-A172FBA0****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='True'),
}

model QueryCustomAuthPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryCustomAuthPermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryCustomAuthPermission  QueryCustomAuthPermissionRequest
  * @return QueryCustomAuthPermissionResponse
 */
async function queryCustomAuthPermission(request: QueryCustomAuthPermissionRequest): QueryCustomAuthPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCustomAuthPermission', 'GET', '/', 'json', false, 'json', request);
}

model QueryMqttTraceDeviceRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  beginTime: long(name='BeginTime', description='The beginning of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.

This parameter is required.', example='1621580400000', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  clientId: string(name='ClientId', description='The client ID of the device whose trace you want to query.

This parameter is required.', example='GID_test@@@producer', position='Query'),
  currentPage: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. If the input parameter value is greater than the total number of pages, the returned result is empty.

This parameter is required.', example='1', minimum=-2147483648, maximum=2147483647, position='Query'),
  endTime: long(name='EndTime', description='The end of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.

This parameter is required.', example='1621584000000', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can view the instance ID in the **Basic Information** section on the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.

This parameter is required.', example='mqtt-cn-i7m26mf****', position='Query'),
  mqttRegionId: string(name='MqttRegionId', description='The ID of the region where the ApsaraMQ for MQTT instance resides. For more information, see [Endpoints](https://help.aliyun.com/document_detail/181438.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

This parameter is required.', example='5', minimum=-2147483648, maximum=2147483647, position='Query'),
  reverse?: boolean(name='Reverse', description='Specifies whether the returned results are displayed in reverse chronological order. Valid values:

*   **true**: The returned results are displayed in reverse time order of actions on the device. This means that the information about the latest action on the device is displayed as the first entry and the information about the earliest action on the device is displayed as the last entry.
*   **false**: The returned results are displayed in time order of actions on the device. This means that the information about the earliest action on the device is displayed as the first entry and the information about the latest action on the device is displayed as the last entry.

If you do not specify this parameter, the returned results are displayed in time order of actions on the device by default.', example='false', position='Query'),
}

model QueryMqttTraceDeviceResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  deviceInfoList?: [ 
    {
      action?: string(name='Action', description='The action on the device. Valid values:

*   **connect**: The ApsaraMQ for MQTT client requests a connection to the ApsaraMQ for MQTT broker.
*   **close**: The TCP connection is closed.
*   **disconnect**: The ApsaraMQ for MQTT client requests a disconnection from the ApsaraMQ for MQTT broker.', example='connect'),
      actionCode?: string(name='ActionCode', description='The returned code for the action on the device. Valid values:

*   **mqtt.trace.action.connect**: This value is returned if the value of Action is **connect**.
*   **mqtt.trace.action.close**: This value is returned if the value of Action is **close**.
*   **mqtt.trace.action.disconnect**: This value is returned if the value of Action is **disconnect**.', example='mqtt.trace.action.connect'),
      actionInfo?: string(name='ActionInfo', description='The returned information for the action on the device. Valid values:

*   **accepted**: The ApsaraMQ for MQTT broker accepts the connection request from the ApsaraMQ for MQTT client.
*   **not authorized**: The TCP connection is closed because the permission verification of the client to access the instance fails.
*   **clientId conflict**: The TCP connection is closed due to a conflict in the ID of the ApsaraMQ for MQTT client.
*   **resource auth failed**: The TCP connection is closed because the permission verification for the ApsaraMQ for MQTT client to access the topic or group fails.
*   **no heart**: The TCP connection is closed because no heartbeat is detected on the client.
*   **closed by client**: The TCP connection is closed because an exception occurs on the client.
*   **disconnected by client**: The client requests a disconnection.
*   **invalid param**: The TCP connection is closed due to invalid request parameters.
*   **Socket IOException**: The TCP connection is closed due to network jitter or packet loss.', example='accept'),
      channelId?: string(name='ChannelId', description='The connection ID.', example='c69fe839209547fa9d073781b9cd****'),
      time?: string(name='Time', description='The time when the action occurred on the device.', example='2021-05-21 15:51:54.867'),
    }
  ](name='DeviceInfoList', description='The details of the action on the device.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues. This parameter is a common parameter.', example='317076B7-F946-46BC-A98F-4CF9777C****'),
  total?: long(name='Total', description='The total number of returned actions on the device.', example='3'),
}

model QueryMqttTraceDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMqttTraceDeviceResponseBody(name='body'),
}

/**
  * @description *   Each successful call to the **QueryMqttTraceDevice** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](https://help.aliyun.com/document_detail/163047.html).
  * @param request  the request parameters of QueryMqttTraceDevice  QueryMqttTraceDeviceRequest
  * @return QueryMqttTraceDeviceResponse
 */
async function queryMqttTraceDevice(request: QueryMqttTraceDeviceRequest): QueryMqttTraceDeviceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMqttTraceDevice', 'POST', '/', 'json', false, 'json', request);
}

model QueryMqttTraceMessageOfClientRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  beginTime: long(name='BeginTime', description='The beginning of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.

This parameter is required.', example='1618646400000', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  clientId: string(name='ClientId', description='The client ID of the device whose messages you want to query.

This parameter is required.', example='GID_test@@@producer', position='Query'),
  currentPage: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. If the input parameter value is greater than the total number of pages, the returned result is empty.

This parameter is required.', example='1', minimum=-2147483648, maximum=2147483647, position='Query'),
  endTime: long(name='EndTime', description='The end of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.

This parameter is required.', example='1621591200000', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can view the instance ID in the **Basic Information** section of the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.

This parameter is required.', example='mqtt-cn-i7m26mf****', position='Query'),
  mqttRegionId: string(name='MqttRegionId', description='The ID of the region where the ApsaraMQ for MQTT instance resides. For more information, see [Endpoints](https://help.aliyun.com/document_detail/181438.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

This parameter is required.', example='5', minimum=-2147483648, maximum=2147483647, position='Query'),
  reverse?: boolean(name='Reverse', description='Specifies whether the returned results are displayed in reverse chronological order. Valid values:

*   **true**: The returned results are displayed in reverse order of the time when messages are sent or received. This means that the latest sent or received message is displayed as the first entry and the earliest sent or received message is displayed as the last entry.
*   **false**: The returned results are displayed in order of the time when messages are sent or received. This means that the earliest sent or received message is displayed as the first entry and the latest sent or received message is displayed as the last entry.

If this parameter is not specified, the returned results are displayed in order of the time when messages are sent or received.', example='false', position='Query'),
}

model QueryMqttTraceMessageOfClientResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  messageOfClientList?: [ 
    {
      action?: string(name='Action', description='The action on the message. Valid values:

*   **pub_mqtt**: The ApsaraMQ for MQTT client sends the message.
*   **sub**: The ApsaraMQ for MQTT client subscribes to the message.
*   **push_offline**: The ApsaraMQ for MQTT broker pushes the offline message to the ApsaraMQ for MQTT client.', example='pub_mqtt'),
      actionCode?: string(name='ActionCode', description='The returned code for the action on the message. Valid values:

*   **mqtt.trace.action.msg.pub.mqtt**: This value is returned if the value of Action is **pub_mqtt**.
*   **mqtt.trace.action.msg.sub**: This value is returned if the value of Action is **sub**.
*   **mqtt.trace.action.msg.push.offline**: This value is returned if the value of Action is **push_offline**.', example='mqtt.trace.action.msg.pub.mqtt'),
      actionInfo?: string(name='ActionInfo', description='The information returned for the action on the message. Valid values:

*   **Pub From Mqtt Client**: This value is returned if the value of Action is **pub_mqtt**.
*   **Push To Mqtt Client**: This value is returned if the value of Action is **sub**.
*   **Push Offline Msg To Mqtt Client**: This value is returned if the value of Action is **push_offline**.', example='Pub From Mqtt Client'),
      clientId?: string(name='ClientId', description='The client ID of the device.', example='GID_test@@@producer'),
      msgId?: string(name='MsgId', description='The message ID.', example='AC1EC0030EAB78308DB16A3EC773****'),
      time?: string(name='Time', description='The time when the message was sent or received.', example='2021-05-21 15:08:19.234'),
    }
  ](name='MessageOfClientList', description='The returned messages.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues. This parameter is a common parameter.', example='B096B9D6-62F3-4567-BB59-58D1362E****'),
  total?: long(name='Total', description='The total number of messages returned.', example='5'),
}

model QueryMqttTraceMessageOfClientResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMqttTraceMessageOfClientResponseBody(name='body'),
}

/**
  * @description *   Each successful call to the **QueryMqttTraceMessageOfClient** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](https://help.aliyun.com/document_detail/163047.html).
  * @param request  the request parameters of QueryMqttTraceMessageOfClient  QueryMqttTraceMessageOfClientRequest
  * @return QueryMqttTraceMessageOfClientResponse
 */
async function queryMqttTraceMessageOfClient(request: QueryMqttTraceMessageOfClientRequest): QueryMqttTraceMessageOfClientResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMqttTraceMessageOfClient', 'POST', '/', 'json', false, 'json', request);
}

model QueryMqttTraceMessagePublishRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  beginTime: long(name='BeginTime', description='The beginning of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.

This parameter is required.', example='1618646400000', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  endTime: long(name='EndTime', description='The end of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.

This parameter is required.', example='1621591200000', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can view the instance ID in the **Basic Information** section on the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.

This parameter is required.', example='mqtt-cn-i7m26mf****', position='Query'),
  mqttRegionId: string(name='MqttRegionId', description='The ID of the region where the ApsaraMQ for MQTT instance resides. For more information, see [Endpoints](https://help.aliyun.com/document_detail/181438.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  msgId: string(name='MsgId', description='The message ID.

This parameter is required.', example='AC1EC0030EAB78308DB16A3EC773****', position='Query'),
}

model QueryMqttTraceMessagePublishResponseBody = {
  messageTraceLists?: [ 
    {
      action?: string(name='Action', description='The action on the message. Valid values:

*   **pub_mqtt**: indicates that the message was sent by an ApsaraMQ for MQTT client.
*   **pub_mq**: indicates that the message was sent by an ApsaraMQ for RocketMQ client.', example='pub_mqtt'),
      actionCode?: string(name='ActionCode', description='The returned code for the action on the message. Valid values:

*   **mqtt.trace.action.msg.pub.mqtt**: This value is returned if the value of Action is **pub_mqtt**.
*   **mqtt.trace.action.msg.pub.mq**: This value is returned if the value of Action is **pub_mq**.', example='mqtt.trace.action.msg.pub.mqtt'),
      actionInfo?: string(name='ActionInfo', description='The returned information for the action on the message. Valid values:

*   **Pub From Mqtt Client**: This value is returned if the value of Action is **pub_mqtt**.
*   **Pub From MQ**: This value is returned if the value of Action is **pub_mq**.', example='Pub From Mqtt Client'),
      clientId?: string(name='ClientId', description='The ID of the client that sends the message.', example='GID_test@@@producer'),
      msgId?: string(name='MsgId', description='The message ID.', example='AC1EC0030EAB78308DB16A3EC773BD95'),
      time?: string(name='Time', description='The time when the message was sent.', example='2021-05-21 15:08:19.210'),
    }
  ](name='MessageTraceLists', description='The message traces.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues. This parameter is a common parameter.', example='69AD5550-BF22-438A-9202-A6E89185****'),
}

model QueryMqttTraceMessagePublishResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMqttTraceMessagePublishResponseBody(name='body'),
}

/**
  * @description *   Each successful call to the **QueryMqttTraceMessagePublish** operation increases the messaging transactions per second (TPS). This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](https://help.aliyun.com/document_detail/163047.html).
  * @param request  the request parameters of QueryMqttTraceMessagePublish  QueryMqttTraceMessagePublishRequest
  * @return QueryMqttTraceMessagePublishResponse
 */
async function queryMqttTraceMessagePublish(request: QueryMqttTraceMessagePublishRequest): QueryMqttTraceMessagePublishResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMqttTraceMessagePublish', 'POST', '/', 'json', false, 'json', request);
}

model QueryMqttTraceMessageSubscribeRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  beginTime: long(name='BeginTime', description='The beginning of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.

This parameter is required.', example='1621936800000', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  clientId?: string(name='ClientId', description='The ID of the client that subscribes to the message. If you do not specify this parameter, the IDs of all clients that subscribe to the message are returned.', example='GID_test@@@consumer', position='Query'),
  currentPage: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. If the input parameter value is greater than the total number of pages, the returned result is empty.

This parameter is required.', example='1', minimum=-2147483648, maximum=2147483647, position='Query'),
  endTime: long(name='EndTime', description='The end of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.

This parameter is required.', example='1618646400000', minimum=-9223372036854774808, maximum=9223372036854774807, position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can view the instance ID in the **Basic Information** section of the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.

This parameter is required.', example='mqtt-cn-i7m26mf****', position='Query'),
  mqttRegionId: string(name='MqttRegionId', description='The ID of the region where the ApsaraMQ for MQTT instance resides. For more information, see [Endpoints](https://help.aliyun.com/document_detail/181438.html).

This parameter is required.', example='cn-hangzhou', position='Query'),
  msgId: string(name='MsgId', description='The message ID.

This parameter is required.', example='AC1EC1B33D5978308DB17F3245E4****', maxLength=2147483647, position='Query'),
  pageSize: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.

This parameter is required.', example='5', minimum=-2147483648, maximum=2147483647, position='Query'),
  reverse?: boolean(name='Reverse', description='Specifies whether the returned results are displayed in reverse chronological order. Valid values:

*   **true**: The returned results are displayed in reverse order of the time when messages are delivered. This means that the latest consumed message is displayed as the first entry and the earliest consumed message is displayed as the last entry.
*   **false**: The returned results are displayed in order of the time when messages are delivered. This means that the earliest consumed message is displayed as the first entry and the latest consumed message is displayed as the last entry.

If you do not specify this parameter, the returned results are displayed in order of time when messages are delivered.', example='false', position='Query'),
}

model QueryMqttTraceMessageSubscribeResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  messageTraceLists?: [ 
    {
      action?: string(name='Action', description='The action on the message. Valid values:

*   **sub**: The ApsaraMQ for MQTT client subscribes to the message.
*   **push_offline**: The ApsaraMQ for MQTT broker pushes the offline message to the ApsaraMQ for MQTT client.', example='sub'),
      actionCode?: string(name='ActionCode', description='The code returned for the action on the message. Valid values:

*   **mqtt.trace.action.msg.sub**: The value that is returned if the value of Action is **sub**.
*   **mqtt.trace.action.msg.push.offline**: The value that is returned if the value of Action is **push_offline**.', example='mqtt.trace.action.msg.sub'),
      actionInfo?: string(name='ActionInfo', description='The returned information for the action on the message. Valid values:

*   **Push To Mqtt Client**: The value that is returned if the value of Action is **sub**.
*   **Push Offline Msg To Mqtt Client**: The value that is returned if the value of Action is **push_offline**.', example='Push To Mqtt Client'),
      clientId?: string(name='ClientId', description='The ID of the client that subscribes to the message.', example='GID_test@@@consumer'),
      msgId?: string(name='MsgId', description='The message ID.', example='AC1EC1B33D5978308DB17F3245E4****'),
      time?: string(name='Time', description='The time when the message was delivered.', example='2021-05-25 16:46:41.274'),
    }
  ](name='MessageTraceLists', description='The delivery trace of the queried message.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The unique ID that the system generates for the request. You can use the ID to troubleshoot issues. This parameter is a common parameter.', example='4E685844-ADAF-4D85-9EAC-F9471E8C****'),
  total?: long(name='Total', description='The returned delivery traces.', example='2'),
}

model QueryMqttTraceMessageSubscribeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMqttTraceMessageSubscribeResponseBody(name='body'),
}

/**
  * @description *   Each successful call to the **QueryMqttTraceMessageSubscribe** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](https://help.aliyun.com/document_detail/163047.html).
  * @param request  the request parameters of QueryMqttTraceMessageSubscribe  QueryMqttTraceMessageSubscribeRequest
  * @return QueryMqttTraceMessageSubscribeResponse
 */
async function queryMqttTraceMessageSubscribe(request: QueryMqttTraceMessageSubscribeRequest): QueryMqttTraceMessageSubscribeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMqttTraceMessageSubscribe', 'POST', '/', 'json', false, 'json', request);
}

model QuerySessionByClientIdRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  clientId: string(name='ClientId', description='The ID of the ApsaraMQ for MQTT client that you want to query.

This parameter is required.', example='GID_test@@@test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the [ApsaraMQ for MQTT console](https://mqtt.console.aliyun.com).

This parameter is required.', example='post-cn-0pp12gl****', position='Query'),
}

model QuerySessionByClientIdResponseBody = {
  onlineStatus?: boolean(name='OnlineStatus', description='Indicates whether the ApsaraMQ for MQTT client is connected to the ApsaraMQ for MQTT broker. Valid values:

*   **true**
*   **false**', example='true'),
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='E4581CCF-62AF-44D9-B5B4-D1DBBC0E****'),
}

model QuerySessionByClientIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySessionByClientIdResponseBody(name='body'),
}

/**
  * @description *   You can call this operation up to 500 times per second.**** For more information, see [Limits on QPS](https://help.aliyun.com/document_detail/163047.html).
  * *   Each successful call to the **QuerySessionByClientId** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * @param request  the request parameters of QuerySessionByClientId  QuerySessionByClientIdRequest
  * @return QuerySessionByClientIdResponse
 */
async function querySessionByClientId(request: QuerySessionByClientIdRequest): QuerySessionByClientIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySessionByClientId', 'POST', '/', 'json', false, 'json', request);
}

model QueryTokenRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the [ApsaraMQ for MQTT console](https://mqtt.console.aliyun.com/).

This parameter is required.', example='post-cn-0pp12gl****', position='Query'),
  token: string(name='Token', description='The token that you want to query.

This parameter is required.', example='LzMT+XLFl5s/YWJ/MlDz4t/Lq5HC1iGU1P28HAMaxYxn8aQbALNtml7QZKl9L9kPe6LqUb95tEVo+zUqOogs9+jZwDUSzsd4X4qaD3n2TrBEuMOqKkk1Xdrvu9VBQQvIYbz7MJWZDYC3DlW7gLEr33Cuj54iIhagtBi3epStJitsssWs7otY9zhKOSZxhr49G3d0bh35mwyP18EMvDas8UlzeSozsSrujNUqZXOGK0PEBSd+rWMGDJlCt6GFmJgm2JFY7PJwf/7OOSmUYIYFs5o/PuPpoTMF+hcVXMs+0yDukIMTOzG9m3t8k36PVrghFmnK6pC3Rt3mibjW****ng==', position='Query'),
}

model QueryTokenResponseBody = {
  requestId?: string(name='RequestId', description='The unique ID that the system generates for the request. This parameter is a common parameter.', example='5C8AADD0-6A95-436D-AFA0-3405CCE3****'),
  tokenStatus?: boolean(name='TokenStatus', description='The status of the queried token. Valid values:

*   **true**: indicates the token is valid.
*   **false**: indicates the token is invalid.', example='true'),
}

model QueryTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTokenResponseBody(name='body'),
}

/**
  * @description *   You can call this operation up to 100 times per second per account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * *   Each successful call to the **QueryToken** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * @param request  the request parameters of QueryToken  QueryTokenRequest
  * @return QueryTokenResponse
 */
async function queryToken(request: QueryTokenRequest): QueryTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryToken', 'POST', '/', 'json', false, 'json', request);
}

model RefreshDeviceCredentialRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  clientId: string(name='ClientId', description='The client ID of the device whose access credential you want to update.

This parameter is required.', example='GID_test@@@test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.

This parameter is required.', example='post-cn-0pp12gl****', position='Query'),
}

model RefreshDeviceCredentialResponseBody = {
  deviceCredential?: {
    clientId?: string(name='ClientId', description='The client ID of the device.', example='GID_test@@@test'),
    createTime?: long(name='CreateTime', description='The timestamp that indicates when the access credential of the device was created. The value of this parameter is a UNIX timestamp in milliseconds.', example='1605541382000'),
    deviceAccessKeyId?: string(name='DeviceAccessKeyId', description='The AccessKey ID of the device.', example='DC.Z5fXh9sRRVufyLi6wo****'),
    deviceAccessKeySecret?: string(name='DeviceAccessKeySecret', description='The AccessKey secret of the device.', example='DC.BJMkn4eMQJK2vaApTS****'),
    instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.', example='post-cn-0pp12gl****'),
    updateTime?: long(name='UpdateTime', description='The timestamp that indicates when the access credential of the device was last updated. The value of this parameter is a UNIX timestamp in milliseconds.', example='1605541382000'),
  }(name='DeviceCredential', description='The access credential of the device.'),
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='E4581CCF-62AF-44D9-B5B4-D1DBDC0F****'),
}

model RefreshDeviceCredentialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshDeviceCredentialResponseBody(name='body'),
}

/**
  * @description ## [](#)Limits
  * You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](https://help.aliyun.com/document_detail/163047.html).
  * >  Each successful call to the **RefreshDeviceCredential** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * @param request  the request parameters of RefreshDeviceCredential  RefreshDeviceCredentialRequest
  * @return RefreshDeviceCredentialResponse
 */
async function refreshDeviceCredential(request: RefreshDeviceCredentialRequest): RefreshDeviceCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefreshDeviceCredential', 'POST', '/', 'json', false, 'json', request);
}

model RegisterCaCertificateRequest {
  caContent: string(name='CaContent', description='Content of the CA certificate to be registered.
> Note that \\n in the example represents a new line.

This parameter is required.', example='-----BEGIN CERTIFICATE-----\\nMIIDuzCCAqdGVzdC5jbi1xaW5n******\\n-----END CERTIFICATE-----', position='Query'),
  caName: string(name='CaName', description='Name of the CA certificate to be registered

This parameter is required.', example='mqtt_ca', position='Query'),
  mqttInstanceId: string(name='MqttInstanceId', description='The instance ID of the Cloud Message Queue MQTT version. When registering a CA certificate, you need to specify an instance to bind with.

This parameter is required.', example='post-cn-7mz2d******', position='Query'),
  verificationContent: string(name='VerificationContent', description='Content of the verification certificate for the CA certificate to be registered. It is used together with the registration code of the CA certificate to verify that the user possesses the private key of this CA certificate. 
>  in the example represents a line break.

This parameter is required.', example='-----BEGIN CERTIFICATE-----\\nMIID/DCCAu+Y5sRMpp9tnd+4s******\\n-----END CERTIFICATE-----', position='Query'),
}

model RegisterCaCertificateResponseBody = {
  requestId?: string(name='RequestId', description='Public parameters, each request ID is unique and can be used for troubleshooting and problem localization.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
  sn?: string(name='Sn', description='The SN serial number of the registered CA certificate, used to uniquely identify a CA certificate.', example='007269004887******'),
}

model RegisterCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterCaCertificateResponseBody(name='body'),
}

/**
  * @description - Only Platinum and Professional instances support using the RegisterCaCertificate interface. - The request frequency limit per user is 500 times/second. For special requirements, please contact Cloud Message Queue MQTT version technical support, DingTalk group number: 35228338.
  * @param request  the request parameters of RegisterCaCertificate  RegisterCaCertificateRequest
  * @return RegisterCaCertificateResponse
 */
async function registerCaCertificate(request: RegisterCaCertificateRequest): RegisterCaCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterCaCertificate', 'POST', '/', 'json', false, 'json', request);
}

model RegisterDeviceCredentialRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  clientId: string(name='ClientId', description='The client ID of the device for which you want to create an access credential.

This parameter is required.', example='GID_test@@@test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.

This parameter is required.', example='post-cn-0pp12gl****', position='Query'),
}

model RegisterDeviceCredentialResponseBody = {
  deviceCredential?: {
    clientId?: string(name='ClientId', description='The client ID of the device.', example='GID_test@@@test'),
    createTime?: long(name='CreateTime', description='The timestamp that indicates when the access credential of the device was created. Unit: milliseconds.', example='1605541382000'),
    deviceAccessKeyId?: string(name='DeviceAccessKeyId', description='The AccessKey ID of the device.', example='DC.Z5fXh9sRRVufyLi6wo****'),
    deviceAccessKeySecret?: string(name='DeviceAccessKeySecret', description='The AccessKey secret of the device.', example='DC.BJMkn4eMQJK2vaApTS****'),
    instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.', example='post-cn-0pp12gl****'),
    updateTime?: long(name='UpdateTime', description='The timestamp that indicates when the access credential of the device was last updated. Unit: milliseconds.', example='1605541382000'),
  }(name='DeviceCredential', description='The access credential of the device.'),
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='E4581CCF-62AF-44D9-B5B4-D1DBDC0E****'),
}

model RegisterDeviceCredentialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterDeviceCredentialResponseBody(name='body'),
}

/**
  * @description *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](https://help.aliyun.com/document_detail/163047.html).
  * *   Each successful call to the **RegisterDeviceCredential** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * @param request  the request parameters of RegisterDeviceCredential  RegisterDeviceCredentialRequest
  * @return RegisterDeviceCredentialResponse
 */
async function registerDeviceCredential(request: RegisterDeviceCredentialRequest): RegisterDeviceCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterDeviceCredential', 'POST', '/', 'json', false, 'json', request);
}

model RevokeTokenRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the [ApsaraMQ for MQTT console](https://mqtt.console.aliyun.com/).

This parameter is required.', example='post-cn-0pp12gl****', position='Query'),
  token: string(name='Token', description='The token that you want to revoke.

This parameter is required.', example='LzMT+XLFl5s/YWJ/MlDz4t/Lq5HC1iGU1P28HAMaxYxn8aQbALNtml7QZKl9L9kPe6LqUb95tEVo+zUqOogs9+jZwDUSzsd4X4qaD3n2TrBEuMOqKkk1Xdrvu9VBQQvIYbz7MJWZDYC3DlW7gLEr33Cuj54iIhagtBi3epStJitsssWs7otY9zhKOSZxhr49G3d0bh35mwyP18EMvDas8UlzeSozsSrujNUqZXOGK0PEBSd+rWMGDJlCt6GFmJgm2JFY7PJwf/7OOSmUYIYFs5o/PuPpoTMF+hcVXMs+0yDukIMTOzG9m3t8k36PVrghFmnK6pC3Rt3mibjW****ng==', position='Query'),
}

model RevokeTokenResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='833EDFCB-C447-4CE3-B21F-3A4C2D1B****'),
}

model RevokeTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeTokenResponseBody(name='body'),
}

/**
  * @description *   You can call this operation up to 5 times per second per account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * *   Each successful call to the **RevokeToken** operation increases the messaging transactions per second (TPS). This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * @param request  the request parameters of RevokeToken  RevokeTokenRequest
  * @return RevokeTokenResponse
 */
async function revokeToken(request: RevokeTokenRequest): RevokeTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RevokeToken', 'POST', '/', 'json', false, 'json', request);
}

model SendMessageRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can view the instance ID in the **Basic Information** section on the **Instance Details** page that corresponds to the instance in the [ApsaraMQ for MQTT console](https://mqtt.console.aliyun.com).

This parameter is required.', example='post-cn-0pp12gl****', position='Query'),
  mqttTopic: string(name='MqttTopic', description='The topic to which you want to send a message on the ApsaraMQ for MQTT instance.

This parameter is required.', example='TopicA', position='Query'),
  payload: string(name='Payload', description='The message content, which is the payload of the message. We recommend that you encode the content in Base64 to prevent non-printable characters from being transmitted.

This parameter is required.', example='test', position='Query'),
}

model SendMessageResponseBody = {
  msgId?: string(name='MsgId', description='The unique message ID that is returned by the ApsaraMQ for MQTT broker after the message is sent.', example='0B736D997B7F45FF54E61C1C1B58****'),
  requestId?: string(name='RequestId', description='The unique ID that the system generates for the request. This parameter is a common parameter.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model SendMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendMessageResponseBody(name='body'),
}

/**
  * @description *   The **SendMessage** operation is called by applications on cloud servers. It is complementary to the operation that is called by ApsaraMQ for MQTT clients to send messages. For information about the differences between the scenarios of sending messages from applications on cloud servers and the scenarios of sending messages from ApsaraMQ for MQTT clients, see [Developer guide](https://help.aliyun.com/document_detail/179160.html).
  * *   Before you call the **SendMessage** operation, make sure that the kernel version of your ApsaraMQ for MQTT instance is 3.3.0 or later. You can obtain the information about the kernel version on the [Instance Details](https://mqtt.console.aliyun.com) page that corresponds to the instance in the **ApsaraMQ for MQTT console**.
  * *   Messages that are sent by calling the **SendMessage** operation cannot be forwarded to ApsaraMQ for RocketMQ. If you want to use an ApsaraMQ for MQTT to forward messages to ApsaraMQ for RocketMQ, send the messages by using an SDK. For more information, see [Export data from ApsaraMQ for MQTT to other Alibaba Cloud services](https://help.aliyun.com/document_detail/174527.html). You can call the **SendMessage** operation up to 1,000 times per second. For more information, see [Limits on QPS](https://help.aliyun.com/document_detail/163047.html).
  * *   Each successful call to the **SendMessage** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For information about the billing details, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * @param request  the request parameters of SendMessage  SendMessageRequest
  * @return SendMessageResponse
 */
async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendMessage', 'POST', '/', 'json', false, 'json', request);
}

model SetSniConfigRequest {
  regionId?: string(name='RegionId', position='Host'),
  defaultCertificate: string(name='DefaultCertificate', description='This parameter is required.', position='Query'),
  mqttInstanceId: string(name='MqttInstanceId', description='This parameter is required.', position='Query'),
  sniConfig?: string(name='SniConfig', position='Query'),
}

model SetSniConfigResponseBody = {
  accessDeniedDetail?: {
    authAction?: string(name='AuthAction'),
    authPrincipalDisplayName?: string(name='AuthPrincipalDisplayName'),
    authPrincipalOwnerId?: string(name='AuthPrincipalOwnerId'),
    authPrincipalType?: string(name='AuthPrincipalType'),
    encodedDiagnosticMessage?: string(name='EncodedDiagnosticMessage'),
    noPermissionType?: string(name='NoPermissionType'),
    policyType?: string(name='PolicyType'),
  }(name='AccessDeniedDetail'),
  requestId?: string(name='RequestId', description='Id of the request'),
  success?: string(name='Success'),
}

model SetSniConfigResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetSniConfigResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetSniConfig  SetSniConfigRequest
  * @return SetSniConfigResponse
 */
async function setSniConfig(request: SetSniConfigRequest): SetSniConfigResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetSniConfig', 'POST', '/', 'json', false, 'json', request);
}

model UnRegisterDeviceCredentialRequest {
  regionId?: string(name='RegionId', description='This parameter is required.', position='Host'),
  clientId: string(name='ClientId', description='The client ID of the device whose access credential you want to deregister.

This parameter is required.', example='GID_test@@@test', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.

This parameter is required.', example='post-cn-0pp12gl****', position='Query'),
}

model UnRegisterDeviceCredentialResponseBody = {
  requestId?: string(name='RequestId', description='The unique ID that the system generates for the request. This parameter is a common parameter.', example='E4581CCD-62AF-44D9-B5B4-D1DBDC0E****'),
}

model UnRegisterDeviceCredentialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnRegisterDeviceCredentialResponseBody(name='body'),
}

/**
  * @description *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](https://help.aliyun.com/document_detail/163047.html).
  * *   Each successful call to the **UnRegisterDeviceCredential** operation increases the number of transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](https://help.aliyun.com/document_detail/52819.html).
  * @param request  the request parameters of UnRegisterDeviceCredential  UnRegisterDeviceCredentialRequest
  * @return UnRegisterDeviceCredentialResponse
 */
async function unRegisterDeviceCredential(request: UnRegisterDeviceCredentialRequest): UnRegisterDeviceCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnRegisterDeviceCredential', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCustomAuthIdentityRequest {
  clientId?: string(name='ClientId', description='The client ID if you set IdentityType to CLIENT.', example='GID_test@@@test', position='Body'),
  identityType: string(name='IdentityType', description='The identity type. Valid values:

*   USER
*   CLIENT

This parameter is required.', example='USER', position='Body'),
  instanceId: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.

This parameter is required.', example='post-111****', position='Body'),
  secret: string(name='Secret', description='The AccessKey secret.

This parameter is required.', example='xxxx', position='Body'),
  signMode: string(name='SignMode', description='The signature verification mode. ORIGIN: compares the password and AccessKey secret. SIGNED: uses the HMAC_SHA1 algorithm to sign the client ID to obtain a password and then compares the password.

This parameter is required.', example='SIGNED', position='Body'),
  username: string(name='Username', description='The username.

This parameter is required.', example='test', position='Body'),
}

model UpdateCustomAuthIdentityResponseBody = {
  code?: int32(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The returned message.', example='operation success.'),
  requestId?: string(name='RequestId', description='The request ID.', example='3F00084A-7F07-4B15-BADA-8903A4FB****'),
  success?: boolean(name='Success', description='Indicates whether the request is successful. Valid values: true and false.', example='True'),
}

model UpdateCustomAuthIdentityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomAuthIdentityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCustomAuthIdentity  UpdateCustomAuthIdentityRequest
  * @return UpdateCustomAuthIdentityResponse
 */
async function updateCustomAuthIdentity(request: UpdateCustomAuthIdentityRequest): UpdateCustomAuthIdentityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomAuthIdentity', 'POST', '/', 'json', true, 'form', request);
}

model UpdateCustomAuthPermissionRequest {
  effect: string(name='Effect', description='Specifies whether to allow or deny access.

This parameter is required.', example='ALLOW', position='Body'),
  identity: string(name='Identity', description='Username or Client ID.

This parameter is required.', example='test', position='Body'),
  identityType: string(name='IdentityType', description='The identity type. Valid values:

*   USER
*   CLIENT

This parameter is required.', example='USER', position='Body'),
  instanceId: string(name='InstanceId', description='ID of the Cloud Message Queue MQTT version instance.

This parameter is required.', example='post-cn-0pp12gl****', position='Body'),
  permitAction: string(name='PermitAction', description='The permissions that you want to grant.

This parameter is required.', example='PUB_SUB', position='Body'),
  topic: string(name='Topic', description='Authorized Topic, supporting multi-level MQTT topics and wildcards.

This parameter is required.', example='test/t1', position='Body'),
}

model UpdateCustomAuthPermissionResponseBody = {
  code?: int32(name='Code', description='Error code returned upon failed invocation. For more information, see Error Codes.', example='200'),
  message?: string(name='Message', description='Information', example='operation success.'),
  requestId?: string(name='RequestId', description='Id of the request', example='8CC04203-679B-4DED-89D9-E7C2E979****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. true: Call succeeded. false: Call failed.', example='True'),
}

model UpdateCustomAuthPermissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCustomAuthPermissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateCustomAuthPermission  UpdateCustomAuthPermissionRequest
  * @return UpdateCustomAuthPermissionResponse
 */
async function updateCustomAuthPermission(request: UpdateCustomAuthPermissionRequest): UpdateCustomAuthPermissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCustomAuthPermission', 'POST', '/', 'json', true, 'form', request);
}

