/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('onsmqtt', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ActiveCaCertificateRequest {
  mqttInstanceId?: string(name='MqttInstanceId', example='post-cn-7mz2d******'),
  sn?: string(name='Sn', example='007269004887******'),
}

model ActiveCaCertificateResponseBody = {
  requestId?: string(name='RequestId', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
  sn?: string(name='Sn', example='007269004887******'),
}

model ActiveCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActiveCaCertificateResponseBody(name='body'),
}

async function activeCaCertificateWithOptions(request: ActiveCaCertificateRequest, runtime: Util.RuntimeOptions): ActiveCaCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mqttInstanceId)) {
    query['MqttInstanceId'] = request.mqttInstanceId;
  }
  if (!Util.isUnset(request.sn)) {
    query['Sn'] = request.sn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActiveCaCertificate',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activeCaCertificate(request: ActiveCaCertificateRequest): ActiveCaCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return activeCaCertificateWithOptions(request, runtime);
}

model ActiveDeviceCertificateRequest {
  caSn?: string(name='CaSn', example='007269004887******'),
  deviceSn?: string(name='DeviceSn', example='356217374433******'),
  mqttInstanceId?: string(name='MqttInstanceId', example='post-cn-7mz2d******'),
}

model ActiveDeviceCertificateResponseBody = {
  deviceSn?: string(name='DeviceSn', example='356217374433******'),
  requestId?: string(name='RequestId', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model ActiveDeviceCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ActiveDeviceCertificateResponseBody(name='body'),
}

async function activeDeviceCertificateWithOptions(request: ActiveDeviceCertificateRequest, runtime: Util.RuntimeOptions): ActiveDeviceCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.caSn)) {
    query['CaSn'] = request.caSn;
  }
  if (!Util.isUnset(request.deviceSn)) {
    query['DeviceSn'] = request.deviceSn;
  }
  if (!Util.isUnset(request.mqttInstanceId)) {
    query['MqttInstanceId'] = request.mqttInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ActiveDeviceCertificate',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function activeDeviceCertificate(request: ActiveDeviceCertificateRequest): ActiveDeviceCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return activeDeviceCertificateWithOptions(request, runtime);
}

model ApplyTokenRequest {
  actions?: string(name='Actions', description='The permission type of the token. Valid values:

*   **R**: read-only. You can only subscribe to the specified topics.
*   **W**: write-only. You can only send messages to the specified topics.
*   **R,W**: read and write. You can send messages to and subscribe to the specified topics. Separate **R** and **W** with a comma (,).', example='R'),
  expireTime?: long(name='ExpireTime', description='The timestamp that indicates the point in time when the token expires. Unit: milliseconds. The minimum validity period of a token is 60 seconds, and the maximum validity period of a token is 30 days. If you specify a validity period of more than 30 days for a token, no errors are returned. However, the token is valid only for 30 days.

For example, you want to specify a validity period of 60 seconds for a token. If the current system timestamp is 1609434061000, you must set this parameter to **1609434121000**. The value is calculated by using the following formula: 1609434061000 + 60 x 1000 = 1609434121000.', example='1609434121000'),
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the [ApsaraMQ for MQTT console](https://mqtt.console.aliyun.com/).', example='post-cn-0pp12gl****'),
  resources?: string(name='Resources', description='The topics on the ApsaraMQ for MQTT instance. Separate multiple topics with commas (,). Each token can be used to access up to 100 topics. Multiple topics are sorted in alphabetic order. MQTT wildcards, including single-level wildcards represented by plus signs (+) and multi-level wildcards represented by number signs (#), can be used for the Resources parameter that you register to apply for a token.

For example, if you set the **Resources** parameter to Topic1/+ when you apply for a token, the ApsaraMQ for MQTT client can manage the topics in Topic1/xxx. If you set the **Resources** parameter to Topic1/# when you apply for a token, the ApsaraMQ for MQTT client can manage topics of any level in Topic1/xxx/xxx/xxx.

>  ApsaraMQ for MQTT supports subtopics. You can specify subtopics in the code for messaging instead of configuring them in the ApsaraMQ for MQTT console. Forward slashes (/) are used to separate topics of different levels. For more information, see [Terms](~~42420~~).', example='TopicA/+'),
}

model ApplyTokenResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='31782AAF-D0CC-44C3-ABFD-1B500276****'),
  token?: string(name='Token', description='The token that is returned by the ApsaraMQ for MQTT broker.

>  Do not assume the length, format, or rule of the token to return. The actual returned token shall prevail.', example='LzMT+XLFl5s/YWJ/MlDz4t/Lq5HC1iGU1P28HAMaxYxn8aQbALNtml7QZKl9L9kPe6LqUb95tEVo+zUqOogs9+jZwDUSzsd4X4qaD3n2TrBEuMOqKkk1Xdrvu9VBQQvIYbz7MJWZDYC3DlW7gLEr33Cuj54iIhagtBi3epStJitsssWs7otY9zhKOSZxhr49G3d0bh35mwyP18EMvDas8UlzeSozsSrujNUqZXOGK0PEBSd+rWMGDJlCt6GFmJgm2JFY7PJwf/7OOSmUYIYFs5o/PuPpoTMF+hcVXMs+0yDukIMTOzG9m3t8k36PVrghFmnK6pC3Rt3mibjW****ng=='),
}

model ApplyTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyTokenResponseBody(name='body'),
}

/**
  * *   You can call this operation up to 100 times per second per account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * *   Each successful call to the **ApplyToken** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request ApplyTokenRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ApplyTokenResponse
 */
async function applyTokenWithOptions(request: ApplyTokenRequest, runtime: Util.RuntimeOptions): ApplyTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actions)) {
    query['Actions'] = request.actions;
  }
  if (!Util.isUnset(request.expireTime)) {
    query['ExpireTime'] = request.expireTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.resources)) {
    query['Resources'] = request.resources;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyToken',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation up to 100 times per second per account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * *   Each successful call to the **ApplyToken** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request ApplyTokenRequest
  * @return ApplyTokenResponse
 */
async function applyToken(request: ApplyTokenRequest): ApplyTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyTokenWithOptions(request, runtime);
}

model BatchQuerySessionByClientIdsRequest {
  clientIdList?: [ string ](name='ClientIdList', description='The ApsaraMQ for MQTT clients.', example='ClientIdList.1'),
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the [ApsaraMQ for MQTT console](https://mqtt.console.aliyun.com).', example='post-cn-0pp12gl****'),
}

model BatchQuerySessionByClientIdsResponseBody = {
  onlineStatusList?: [ 
    {
      clientId?: string(name='ClientId', description='The ID of the ApsaraMQ for MQTT client. For more information about client IDs, see [Terms](~~42420~~).', example='GID_test@0001'),
      onlineStatus?: boolean(name='OnlineStatus', description='Indicates whether the ApsaraMQ for MQTT client is online. Valid values:

*   **true**
*   **false**', example='true'),
    }
  ](name='OnlineStatusList', description='The status list of all queried ApsaraMQ for MQTT clients.'),
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='63309FDB-ED6C-46AE-B31C-A172FBA0****'),
}

model BatchQuerySessionByClientIdsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchQuerySessionByClientIdsResponseBody(name='body'),
}

/**
  * *   You can call the **BatchQuerySessionByClientIds** operation up to 100 times per second. For more information, see [Limits on QPS](~~163047~~).
  * *   You can call the **BatchQuerySessionByClientIds** operation to query the status of up to 10 ApsaraMQ for MQTT clients in a single query.
  * *   Each successful call to the **BatchQuerySessionByClientIds** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request BatchQuerySessionByClientIdsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BatchQuerySessionByClientIdsResponse
 */
async function batchQuerySessionByClientIdsWithOptions(request: BatchQuerySessionByClientIdsRequest, runtime: Util.RuntimeOptions): BatchQuerySessionByClientIdsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientIdList)) {
    query['ClientIdList'] = request.clientIdList;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'BatchQuerySessionByClientIds',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call the **BatchQuerySessionByClientIds** operation up to 100 times per second. For more information, see [Limits on QPS](~~163047~~).
  * *   You can call the **BatchQuerySessionByClientIds** operation to query the status of up to 10 ApsaraMQ for MQTT clients in a single query.
  * *   Each successful call to the **BatchQuerySessionByClientIds** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request BatchQuerySessionByClientIdsRequest
  * @return BatchQuerySessionByClientIdsResponse
 */
async function batchQuerySessionByClientIds(request: BatchQuerySessionByClientIdsRequest): BatchQuerySessionByClientIdsResponse {
  var runtime = new Util.RuntimeOptions{};
  return batchQuerySessionByClientIdsWithOptions(request, runtime);
}

model CreateGroupIdRequest {
  groupId?: string(name='GroupId', description='The ID of the group that you want to create. The group ID must meet the following conventions:

*   The ID must be 7 to 64 characters in length. It must start with GID\\_ or GID- and can contain only letters, digits, hyphens (-), and underscores (\\_).
*   The ID cannot be changed after the group is created. For more information, see [Terms](~~42420~~).', example='GID_test'),
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance to which the group belongs.', example='mqtt-cn-0pp1ldu****'),
}

model CreateGroupIdResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='2C7D722D-0F3D-4415-A9CD-A464D82C****'),
}

model CreateGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateGroupIdResponseBody(name='body'),
}

/**
  * Each successful call to the **CreateGroupId** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request CreateGroupIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateGroupIdResponse
 */
async function createGroupIdWithOptions(request: CreateGroupIdRequest, runtime: Util.RuntimeOptions): CreateGroupIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateGroupId',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Each successful call to the **CreateGroupId** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request CreateGroupIdRequest
  * @return CreateGroupIdResponse
 */
async function createGroupId(request: CreateGroupIdRequest): CreateGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return createGroupIdWithOptions(request, runtime);
}

model DeleteCaCertificateRequest {
  mqttInstanceId?: string(name='MqttInstanceId', example='post-cn-7mz2d******'),
  sn?: string(name='Sn', example='007269004887******'),
}

model DeleteCaCertificateResponseBody = {
  requestId?: string(name='RequestId', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
  sn?: string(name='Sn', example='007269004887******'),
}

model DeleteCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCaCertificateResponseBody(name='body'),
}

async function deleteCaCertificateWithOptions(request: DeleteCaCertificateRequest, runtime: Util.RuntimeOptions): DeleteCaCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mqttInstanceId)) {
    query['MqttInstanceId'] = request.mqttInstanceId;
  }
  if (!Util.isUnset(request.sn)) {
    query['Sn'] = request.sn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCaCertificate',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCaCertificate(request: DeleteCaCertificateRequest): DeleteCaCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCaCertificateWithOptions(request, runtime);
}

model DeleteDeviceCertificateRequest {
  caSn?: string(name='CaSn', example='007269004887******'),
  deviceSn?: string(name='DeviceSn', example='356217374433****'),
  mqttInstanceId?: string(name='MqttInstanceId', example='post-cn-7mz2d******'),
}

model DeleteDeviceCertificateResponseBody = {
  deviceSn?: string(name='DeviceSn', example='356217374433******'),
  requestId?: string(name='RequestId', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model DeleteDeviceCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteDeviceCertificateResponseBody(name='body'),
}

async function deleteDeviceCertificateWithOptions(request: DeleteDeviceCertificateRequest, runtime: Util.RuntimeOptions): DeleteDeviceCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.caSn)) {
    query['CaSn'] = request.caSn;
  }
  if (!Util.isUnset(request.deviceSn)) {
    query['DeviceSn'] = request.deviceSn;
  }
  if (!Util.isUnset(request.mqttInstanceId)) {
    query['MqttInstanceId'] = request.mqttInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDeviceCertificate',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDeviceCertificate(request: DeleteDeviceCertificateRequest): DeleteDeviceCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDeviceCertificateWithOptions(request, runtime);
}

model DeleteGroupIdRequest {
  groupId?: string(name='GroupId', description='The ID of the group that you want to delete.', example='GID_test'),
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance from which you want to delete a group.', example='mqtt-cn-0pp1ldu****'),
}

model DeleteGroupIdResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='0621DDD7-F0E9-4D35-8900-518116D6****'),
}

model DeleteGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteGroupIdResponseBody(name='body'),
}

/**
  * Each successful call to the **DeleteGroupId** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request DeleteGroupIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteGroupIdResponse
 */
async function deleteGroupIdWithOptions(request: DeleteGroupIdRequest, runtime: Util.RuntimeOptions): DeleteGroupIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteGroupId',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Each successful call to the **DeleteGroupId** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request DeleteGroupIdRequest
  * @return DeleteGroupIdResponse
 */
async function deleteGroupId(request: DeleteGroupIdRequest): DeleteGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteGroupIdWithOptions(request, runtime);
}

model GetCaCertificateRequest {
  mqttInstanceId?: string(name='MqttInstanceId', example='post-cn-7mz2d******'),
  sn?: string(name='Sn', example='007269004887******'),
}

model GetCaCertificateResponseBody = {
  data?: {
    caContent?: string(name='CaContent', example='-----BEGIN CERTIFICATE-----\\nMIIDuzCCAqdGVzdC5jbi1xaW5n******\\n-----END CERTIFICATE-----'),
    caName?: string(name='CaName', example='mqtt_ca'),
    registrationCode?: string(name='RegistrationCode', example='13274673-8f90-4630-bea1-9cccb25756ad2089******'),
    sn?: string(name='Sn', example='00f26900ba87******'),
    status?: string(name='Status', example='1'),
    validBegin?: string(name='ValidBegin', example='1654137303000'),
    validEnd?: string(name='ValidEnd', example='1969497303000'),
    verificationContent?: string(name='VerificationContent', example='-----BEGIN CERTIFICATE-----\\nMIID/DCCAu+Y5sRMpp9tnd+4s******\\n-----END CERTIFICATE-----'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model GetCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCaCertificateResponseBody(name='body'),
}

async function getCaCertificateWithOptions(request: GetCaCertificateRequest, runtime: Util.RuntimeOptions): GetCaCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCaCertificate',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCaCertificate(request: GetCaCertificateRequest): GetCaCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCaCertificateWithOptions(request, runtime);
}

model GetDeviceCertificateRequest {
  caSn?: string(name='CaSn', example='007269004887******'),
  deviceSn?: string(name='DeviceSn', example='356217374433******'),
  mqttInstanceId?: string(name='MqttInstanceId', example='post-cn-7mz2d******'),
}

model GetDeviceCertificateResponseBody = {
  data?: {
    caSn?: string(name='CaSn', example='00f26900ba87******'),
    deviceContent?: string(name='DeviceContent', example='-----BEGIN DEVICECERTIFICATE-----\\nMIIDuzCCAqdGVzdC5jbi1xaW5n******\\n-----END DEVICECERTIFICATE-----'),
    deviceName?: string(name='DeviceName', example='mqtt_device'),
    deviceSn?: string(name='DeviceSn', example='356217374433******'),
    status?: string(name='Status', example='1'),
    validBegin?: string(name='ValidBegin', example='1654137303000'),
    validEnd?: string(name='ValidEnd', example='1969497303000'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model GetDeviceCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceCertificateResponseBody(name='body'),
}

async function getDeviceCertificateWithOptions(request: GetDeviceCertificateRequest, runtime: Util.RuntimeOptions): GetDeviceCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceCertificate',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getDeviceCertificate(request: GetDeviceCertificateRequest): GetDeviceCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceCertificateWithOptions(request, runtime);
}

model GetDeviceCredentialRequest {
  clientId?: string(name='ClientId', description='The client ID of the device whose access credential you want to query.', example='GID_test@@@test'),
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.', example='post-cn-0pp12gl****'),
}

model GetDeviceCredentialResponseBody = {
  deviceCredential?: {
    clientId?: string(name='ClientId', description='The client ID of the device.', example='GID_test@@@test'),
    createTime?: long(name='CreateTime', description='The timestamp that indicates when the access credential of the device was created. Unit: milliseconds.', example='1605541382000'),
    deviceAccessKeyId?: string(name='DeviceAccessKeyId', description='The AccessKey ID of the device.', example='DC.Z5fXh9sRRVufyLi6wo****'),
    deviceAccessKeySecret?: string(name='DeviceAccessKeySecret', description='The AccessKey secret of the device.', example='DC.BJMkn4eMQJK2vaApTS****'),
    instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.', example='post-cn-0pp12gl****'),
    updateTime?: long(name='UpdateTime', description='The timestamp that indicates when the access credential of the device was last updated. The value of this parameter is a UNIX timestamp in milliseconds.', example='1605541382000'),
  }(name='DeviceCredential', description='The information about the access credential of the device.'),
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='E4581CCF-62AF-44D9-B5B4-D1DQDC0E****'),
}

model GetDeviceCredentialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetDeviceCredentialResponseBody(name='body'),
}

/**
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  * *   Each successful call to the **GetDeviceCredential** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request GetDeviceCredentialRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetDeviceCredentialResponse
 */
async function getDeviceCredentialWithOptions(request: GetDeviceCredentialRequest, runtime: Util.RuntimeOptions): GetDeviceCredentialResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetDeviceCredential',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  * *   Each successful call to the **GetDeviceCredential** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request GetDeviceCredentialRequest
  * @return GetDeviceCredentialResponse
 */
async function getDeviceCredential(request: GetDeviceCredentialRequest): GetDeviceCredentialResponse {
  var runtime = new Util.RuntimeOptions{};
  return getDeviceCredentialWithOptions(request, runtime);
}

model GetRegisterCodeRequest {
  mqttInstanceId?: string(name='MqttInstanceId', example='post-cn-7mz2d******'),
}

model GetRegisterCodeResponseBody = {
  registerCode?: string(name='RegisterCode', example='13274673-8f90-4630-bea1-9cccb25756ad2089******'),
  requestId?: string(name='RequestId', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model GetRegisterCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRegisterCodeResponseBody(name='body'),
}

async function getRegisterCodeWithOptions(request: GetRegisterCodeRequest, runtime: Util.RuntimeOptions): GetRegisterCodeResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetRegisterCode',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getRegisterCode(request: GetRegisterCodeRequest): GetRegisterCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRegisterCodeWithOptions(request, runtime);
}

model InactivateCaCertificateRequest {
  mqttInstanceId?: string(name='MqttInstanceId', example='post-cn-7mz2d******'),
  sn?: string(name='Sn', example='007269004887******'),
}

model InactivateCaCertificateResponseBody = {
  requestId?: string(name='RequestId', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
  sn?: string(name='Sn', example='007269004887******'),
}

model InactivateCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InactivateCaCertificateResponseBody(name='body'),
}

async function inactivateCaCertificateWithOptions(request: InactivateCaCertificateRequest, runtime: Util.RuntimeOptions): InactivateCaCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.mqttInstanceId)) {
    query['MqttInstanceId'] = request.mqttInstanceId;
  }
  if (!Util.isUnset(request.sn)) {
    query['Sn'] = request.sn;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InactivateCaCertificate',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function inactivateCaCertificate(request: InactivateCaCertificateRequest): InactivateCaCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return inactivateCaCertificateWithOptions(request, runtime);
}

model InactivateDeviceCertificateRequest {
  caSn?: string(name='CaSn', example='007269004887******'),
  deviceSn?: string(name='DeviceSn', example='356217374433******'),
  mqttInstanceId?: string(name='MqttInstanceId', example='post-cn-7mz2d******'),
}

model InactivateDeviceCertificateResponseBody = {
  deviceSn?: string(name='DeviceSn', example='356217374433******'),
  requestId?: string(name='RequestId', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model InactivateDeviceCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InactivateDeviceCertificateResponseBody(name='body'),
}

async function inactivateDeviceCertificateWithOptions(request: InactivateDeviceCertificateRequest, runtime: Util.RuntimeOptions): InactivateDeviceCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.caSn)) {
    query['CaSn'] = request.caSn;
  }
  if (!Util.isUnset(request.deviceSn)) {
    query['DeviceSn'] = request.deviceSn;
  }
  if (!Util.isUnset(request.mqttInstanceId)) {
    query['MqttInstanceId'] = request.mqttInstanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InactivateDeviceCertificate',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function inactivateDeviceCertificate(request: InactivateDeviceCertificateRequest): InactivateDeviceCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return inactivateDeviceCertificateWithOptions(request, runtime);
}

model ListCaCertificateRequest {
  mqttInstanceId?: string(name='MqttInstanceId', example='post-cn-7mz2d******'),
  pageNo?: string(name='PageNo', example='2'),
  pageSize?: string(name='PageSize', example='10'),
}

model ListCaCertificateResponseBody = {
  data?: {
    caCertificateVOS?: [ 
      {
        caContent?: string(name='CaContent', example='-----BEGIN CERTIFICATE-----\\nMIIDuzCCAqdGVzdC5jbi1xaW5n******\\n-----END CERTIFICATE-----'),
        caName?: string(name='CaName', example='mqtt_ca'),
        registrationCode?: string(name='RegistrationCode', example='13274673-8f90-4630-bea1-9cccb25756ad2089******'),
        sn?: string(name='Sn', example='007269004887******'),
        status?: string(name='Status', example='1'),
        validBegin?: string(name='ValidBegin', example='1654137303000'),
        validEnd?: string(name='ValidEnd', example='1969497303000'),
        verificationContent?: string(name='VerificationContent', example='-----BEGIN CERTIFICATE-----\\nMIID/DCCAu+Y5sRMpp9tnd+4s******\\n-----END CERTIFICATE-----'),
      }
    ](name='CaCertificateVOS'),
    pageNo?: int32(name='PageNo', example='2'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model ListCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCaCertificateResponseBody(name='body'),
}

async function listCaCertificateWithOptions(request: ListCaCertificateRequest, runtime: Util.RuntimeOptions): ListCaCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCaCertificate',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listCaCertificate(request: ListCaCertificateRequest): ListCaCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listCaCertificateWithOptions(request, runtime);
}

model ListDeviceCertificateRequest {
  mqttInstanceId?: string(name='MqttInstanceId', example='post-cn-7mz2d******'),
  pageNo?: string(name='PageNo', example='2'),
  pageSize?: string(name='PageSize', example='10'),
}

model ListDeviceCertificateResponseBody = {
  data?: {
    deviceCertificateVOS?: [ 
      {
        caSn?: string(name='CaSn', example='00f26900ba87******'),
        deviceContent?: string(name='DeviceContent', example='-----BEGIN DEVICECERTIFICATE-----\\nMIIDuzCCAqdGVzdC5jbi1xaW5n******\\n-----END DEVICECERTIFICATE-----'),
        deviceName?: string(name='DeviceName', example='mqtt_device'),
        deviceSn?: string(name='DeviceSn', example='356217374433******'),
        status?: string(name='Status', example='1'),
        validBegin?: string(name='ValidBegin', example='1654137303000'),
        validEnd?: string(name='ValidEnd', example='1969497303000'),
      }
    ](name='DeviceCertificateVOS'),
    pageNo?: int32(name='PageNo', example='2'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model ListDeviceCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeviceCertificateResponseBody(name='body'),
}

async function listDeviceCertificateWithOptions(request: ListDeviceCertificateRequest, runtime: Util.RuntimeOptions): ListDeviceCertificateResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDeviceCertificate',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDeviceCertificate(request: ListDeviceCertificateRequest): ListDeviceCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceCertificateWithOptions(request, runtime);
}

model ListDeviceCertificateByCaSnRequest {
  caSn?: string(name='CaSn', example='007269004887******'),
  mqttInstanceId?: string(name='MqttInstanceId', example='post-cn-7mz2d******'),
  pageNo?: string(name='PageNo', example='2'),
  pageSize?: string(name='PageSize', example='10'),
}

model ListDeviceCertificateByCaSnResponseBody = {
  data?: {
    deviceCertificateVOS?: [ 
      {
        caSn?: string(name='CaSn', example='00f26900ba87******'),
        deviceContent?: string(name='DeviceContent', example='-----BEGIN DEVICECERTIFICATE-----\\nMIIDuzCCAqdGVzdC5jbi1xaW5n******\\n-----END DEVICECERTIFICATE-----'),
        deviceName?: string(name='DeviceName', example='mqtt_device'),
        deviceSn?: string(name='DeviceSn', example='356217374433******'),
        status?: string(name='Status', example='1'),
        validBegin?: string(name='ValidBegin', example='1654137303000'),
        validEnd?: string(name='ValidEnd', example='1969497303000'),
      }
    ](name='DeviceCertificateVOS'),
    pageNo?: int32(name='PageNo', example='2'),
    pageSize?: int32(name='PageSize', example='10'),
    total?: int32(name='Total', example='1'),
  }(name='Data'),
  requestId?: string(name='RequestId', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model ListDeviceCertificateByCaSnResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeviceCertificateByCaSnResponseBody(name='body'),
}

async function listDeviceCertificateByCaSnWithOptions(request: ListDeviceCertificateByCaSnRequest, runtime: Util.RuntimeOptions): ListDeviceCertificateByCaSnResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDeviceCertificateByCaSn',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDeviceCertificateByCaSn(request: ListDeviceCertificateByCaSnRequest): ListDeviceCertificateByCaSnResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceCertificateByCaSnWithOptions(request, runtime);
}

model ListDeviceCredentialClientIdRequest {
  groupId?: string(name='GroupId', example='GID_xxx'),
  instanceId?: string(name='InstanceId', example='mqtt-xxxxxxxx'),
  nextToken?: string(name='NextToken'),
  pageNo?: string(name='PageNo', example='1'),
  pageSize?: string(name='PageSize', example='100'),
}

model ListDeviceCredentialClientIdResponseBody = {
  deviceCredentialClientIdList?: {
    clientIdList?: [ string ](name='ClientIdList'),
    nextToken?: string(name='NextToken'),
    pageNo?: string(name='PageNo', example='1'),
    pageSize?: string(name='PageSize', example='100'),
    total?: string(name='Total', example='10'),
  }(name='DeviceCredentialClientIdList'),
  requestId?: string(name='RequestId', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model ListDeviceCredentialClientIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListDeviceCredentialClientIdResponseBody(name='body'),
}

async function listDeviceCredentialClientIdWithOptions(request: ListDeviceCredentialClientIdRequest, runtime: Util.RuntimeOptions): ListDeviceCredentialClientIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDeviceCredentialClientId',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDeviceCredentialClientId(request: ListDeviceCredentialClientIdRequest): ListDeviceCredentialClientIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDeviceCredentialClientIdWithOptions(request, runtime);
}

model ListGroupIdRequest {
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance whose groups you want to query.', example='mqtt-cn-0pp1ldu****'),
}

model ListGroupIdResponseBody = {
  data?: [ 
    {
      createTime?: long(name='CreateTime', description='The time when the group was created.', example='1564577317000'),
      groupId?: string(name='GroupId', description='The queried group that belongs to the ApsaraMQ for MQTT instance.', example='GID_test1'),
      independentNaming?: boolean(name='IndependentNaming', description='Indicates whether a separate namespace is configured for the ApsaraMQ for MQTT instance. Valid values:

*   **true**: A separate namespace is configured for the ApsaraMQ for MQTT instance. Resource names must be unique within an ApsaraMQ for MQTT instance but can be the same across ApsaraMQ for MQTT instances.
*   **false**: No separate namespace is configured for the ApsaraMQ for MQTT instance. Resource names must be globally unique within an ApsaraMQ for MQTT instance and across ApsaraMQ for MQTT instances.', example='true'),
      instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance to which the group belongs.', example='post-cn-45910tj****'),
      updateTime?: long(name='UpdateTime', description='The time when the group was last updated.', example='1564577317000'),
    }
  ](name='Data', description='The details of a queried group.'),
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='95996EEB-D894-44FA-A87C-940F5CD9****'),
}

model ListGroupIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGroupIdResponseBody(name='body'),
}

/**
  * Each successful call to the **ListGroupId** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request ListGroupIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListGroupIdResponse
 */
async function listGroupIdWithOptions(request: ListGroupIdRequest, runtime: Util.RuntimeOptions): ListGroupIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListGroupId',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Each successful call to the **ListGroupId** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request ListGroupIdRequest
  * @return ListGroupIdResponse
 */
async function listGroupId(request: ListGroupIdRequest): ListGroupIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGroupIdWithOptions(request, runtime);
}

model QueryMqttTraceDeviceRequest {
  beginTime?: long(name='BeginTime', description='The beginning of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.', example='1621580400000'),
  clientId?: string(name='ClientId', description='The client ID of the device whose trace you want to query.', example='GID_test@@@producer'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. If the input parameter value is greater than the total number of pages, the returned result is empty.', example='1'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.', example='1621584000000'),
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can view the instance ID in the **Basic Information** section on the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.', example='mqtt-cn-i7m26mf****'),
  mqttRegionId?: string(name='MqttRegionId', description='The ID of the region where the ApsaraMQ for MQTT instance resides. For more information, see [Endpoints](~~181438~~).', example='cn-hangzhou'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.', example='5'),
  reverse?: boolean(name='Reverse', description='Specifies whether the returned results are displayed in reverse chronological order. Valid values:

*   **true**: The returned results are displayed in reverse time order of actions on the device. This means that the information about the latest action on the device is displayed as the first entry and the information about the earliest action on the device is displayed as the last entry.
*   **false**: The returned results are displayed in time order of actions on the device. This means that the information about the earliest action on the device is displayed as the first entry and the information about the latest action on the device is displayed as the last entry.

If you do not specify this parameter, the returned results are displayed in time order of actions on the device by default.', example='false'),
}

model QueryMqttTraceDeviceResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  deviceInfoList?: [ 
    {
      action?: string(name='Action', description='The action on the device. Valid values:

*   **connect**: The ApsaraMQ for MQTT client requests a connection to the ApsaraMQ for MQTT broker.
*   **close**: The TCP connection is closed.
*   **disconnect**: The ApsaraMQ for MQTT client requests a disconnection from the ApsaraMQ for MQTT broker.', example='connect'),
      actionCode?: string(name='ActionCode', description='The returned code for the action on the device. Valid values:

*   **mqtt.trace.action.connect**: This value is returned if the value of Action is **connect**.
*   **mqtt.trace.action.close**: This value is returned if the value of Action is **close**.
*   **mqtt.trace.action.disconnect**: This value is returned if the value of Action is **disconnect**.', example='mqtt.trace.action.connect'),
      actionInfo?: string(name='ActionInfo', description='The returned information for the action on the device. Valid values:

*   **accepted**: The ApsaraMQ for MQTT broker accepts the connection request from the ApsaraMQ for MQTT client.
*   **not authorized**: The TCP connection is closed because the permission verification of the client to access the instance fails.
*   **clientId conflict**: The TCP connection is closed due to a conflict in the ID of the ApsaraMQ for MQTT client.
*   **resource auth failed**: The TCP connection is closed because the permission verification for the ApsaraMQ for MQTT client to access the topic or group fails.
*   **no heart**: The TCP connection is closed because no heartbeat is detected on the client.
*   **closed by client**: The TCP connection is closed because an exception occurs on the client.
*   **disconnected by client**: The client requests a disconnection.
*   **invalid param**: The TCP connection is closed due to invalid request parameters.
*   **Socket IOException**: The TCP connection is closed due to network jitter or packet loss.', example='accept'),
      channelId?: string(name='ChannelId', description='The connection ID.', example='c69fe839209547fa9d073781b9cd****'),
      time?: string(name='Time', description='The time when the action occurred on the device.', example='2021-05-21 15:51:54.867'),
    }
  ](name='DeviceInfoList', description='The details of the action on the device.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='2'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues. This parameter is a common parameter.', example='317076B7-F946-46BC-A98F-4CF9777C****'),
  total?: long(name='Total', description='The total number of returned actions on the device.', example='3'),
}

model QueryMqttTraceDeviceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMqttTraceDeviceResponseBody(name='body'),
}

/**
  * *   Each successful call to the **QueryMqttTraceDevice** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  *
  * @param request QueryMqttTraceDeviceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryMqttTraceDeviceResponse
 */
async function queryMqttTraceDeviceWithOptions(request: QueryMqttTraceDeviceRequest, runtime: Util.RuntimeOptions): QueryMqttTraceDeviceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.mqttRegionId)) {
    query['MqttRegionId'] = request.mqttRegionId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.reverse)) {
    query['Reverse'] = request.reverse;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMqttTraceDevice',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Each successful call to the **QueryMqttTraceDevice** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  *
  * @param request QueryMqttTraceDeviceRequest
  * @return QueryMqttTraceDeviceResponse
 */
async function queryMqttTraceDevice(request: QueryMqttTraceDeviceRequest): QueryMqttTraceDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMqttTraceDeviceWithOptions(request, runtime);
}

model QueryMqttTraceMessageOfClientRequest {
  beginTime?: long(name='BeginTime', description='The beginning of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.', example='1618646400000'),
  clientId?: string(name='ClientId', description='The client ID of the device whose messages you want to query.', example='GID_test@@@producer'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. If the input parameter value is greater than the total number of pages, the returned result is empty.', example='1'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.', example='1621591200000'),
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can view the instance ID in the **Basic Information** section of the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.', example='mqtt-cn-i7m26mf****'),
  mqttRegionId?: string(name='MqttRegionId', description='The ID of the region where the ApsaraMQ for MQTT instance resides. For more information, see [Endpoints](~~181438~~).', example='cn-hangzhou'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.', example='5'),
  reverse?: boolean(name='Reverse', description='Specifies whether the returned results are displayed in reverse chronological order. Valid values:

*   **true**: The returned results are displayed in reverse order of the time when messages are sent or received. This means that the latest sent or received message is displayed as the first entry and the earliest sent or received message is displayed as the last entry.
*   **false**: The returned results are displayed in order of the time when messages are sent or received. This means that the earliest sent or received message is displayed as the first entry and the latest sent or received message is displayed as the last entry.

If this parameter is not specified, the returned results are displayed in order of the time when messages are sent or received.', example='false'),
}

model QueryMqttTraceMessageOfClientResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  messageOfClientList?: [ 
    {
      action?: string(name='Action', description='The action on the message. Valid values:

*   **pub_mqtt**: The ApsaraMQ for MQTT client sends the message.
*   **sub**: The ApsaraMQ for MQTT client subscribes to the message.
*   **push_offline**: The ApsaraMQ for MQTT broker pushes the offline message to the ApsaraMQ for MQTT client.', example='pub_mqtt'),
      actionCode?: string(name='ActionCode', description='The returned code for the action on the message. Valid values:

*   **mqtt.trace.action.msg.pub.mqtt**: This value is returned if the value of Action is **pub_mqtt**.
*   **mqtt.trace.action.msg.sub**: This value is returned if the value of Action is **sub**.
*   **mqtt.trace.action.msg.push.offline**: This value is returned if the value of Action is **push_offline**.', example='mqtt.trace.action.msg.pub.mqtt'),
      actionInfo?: string(name='ActionInfo', description='The information returned for the action on the message. Valid values:

*   **Pub From Mqtt Client**: This value is returned if the value of Action is **pub_mqtt**.
*   **Push To Mqtt Client**: This value is returned if the value of Action is **sub**.
*   **Push Offline Msg To Mqtt Client**: This value is returned if the value of Action is **push_offline**.', example='Pub From Mqtt Client'),
      clientId?: string(name='ClientId', description='The client ID of the device.', example='GID_test@@@producer'),
      msgId?: string(name='MsgId', description='The message ID.', example='AC1EC0030EAB78308DB16A3EC773****'),
      time?: string(name='Time', description='The time when the message was sent or received.', example='2021-05-21 15:08:19.234'),
    }
  ](name='MessageOfClientList', description='The returned messages.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues. This parameter is a common parameter.', example='B096B9D6-62F3-4567-BB59-58D1362E****'),
  total?: long(name='Total', description='The total number of messages returned.', example='5'),
}

model QueryMqttTraceMessageOfClientResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMqttTraceMessageOfClientResponseBody(name='body'),
}

/**
  * *   Each successful call to the **QueryMqttTraceMessageOfClient** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  *
  * @param request QueryMqttTraceMessageOfClientRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryMqttTraceMessageOfClientResponse
 */
async function queryMqttTraceMessageOfClientWithOptions(request: QueryMqttTraceMessageOfClientRequest, runtime: Util.RuntimeOptions): QueryMqttTraceMessageOfClientResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.mqttRegionId)) {
    query['MqttRegionId'] = request.mqttRegionId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.reverse)) {
    query['Reverse'] = request.reverse;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMqttTraceMessageOfClient',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Each successful call to the **QueryMqttTraceMessageOfClient** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  *
  * @param request QueryMqttTraceMessageOfClientRequest
  * @return QueryMqttTraceMessageOfClientResponse
 */
async function queryMqttTraceMessageOfClient(request: QueryMqttTraceMessageOfClientRequest): QueryMqttTraceMessageOfClientResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMqttTraceMessageOfClientWithOptions(request, runtime);
}

model QueryMqttTraceMessagePublishRequest {
  beginTime?: long(name='BeginTime', description='The beginning of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.', example='1618646400000'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.', example='1621591200000'),
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can view the instance ID in the **Basic Information** section on the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.', example='mqtt-cn-i7m26mf****'),
  mqttRegionId?: string(name='MqttRegionId', description='The ID of the region where the ApsaraMQ for MQTT instance resides. For more information, see [Endpoints](~~181438~~).', example='cn-hangzhou'),
  msgId?: string(name='MsgId', description='The message ID.', example='AC1EC0030EAB78308DB16A3EC773****'),
}

model QueryMqttTraceMessagePublishResponseBody = {
  messageTraceLists?: [ 
    {
      action?: string(name='Action', description='The action on the message. Valid values:

*   **pub_mqtt**: indicates that the message was sent by an ApsaraMQ for MQTT client.
*   **pub_mq**: indicates that the message was sent by an ApsaraMQ for RocketMQ client.', example='pub_mqtt'),
      actionCode?: string(name='ActionCode', description='The returned code for the action on the message. Valid values:

*   **mqtt.trace.action.msg.pub.mqtt**: This value is returned if the value of Action is **pub_mqtt**.
*   **mqtt.trace.action.msg.pub.mq**: This value is returned if the value of Action is **pub_mq**.', example='mqtt.trace.action.msg.pub.mqtt'),
      actionInfo?: string(name='ActionInfo', description='The returned information for the action on the message. Valid values:

*   **Pub From Mqtt Client**: This value is returned if the value of Action is **pub_mqtt**.
*   **Pub From MQ**: This value is returned if the value of Action is **pub_mq**.', example='Pub From Mqtt Client'),
      clientId?: string(name='ClientId', description='The ID of the client that sends the message.', example='GID_test@@@producer'),
      msgId?: string(name='MsgId', description='The message ID.', example='AC1EC0030EAB78308DB16A3EC773BD95'),
      time?: string(name='Time', description='The time when the message was sent.', example='2021-05-21 15:08:19.210'),
    }
  ](name='MessageTraceLists', description='The message traces.'),
  requestId?: string(name='RequestId', description='The request ID. You can use the ID to troubleshoot issues. This parameter is a common parameter.', example='69AD5550-BF22-438A-9202-A6E89185****'),
}

model QueryMqttTraceMessagePublishResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMqttTraceMessagePublishResponseBody(name='body'),
}

/**
  * *   Each successful call to the **QueryMqttTraceMessagePublish** operation increases the messaging transactions per second (TPS). This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  *
  * @param request QueryMqttTraceMessagePublishRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryMqttTraceMessagePublishResponse
 */
async function queryMqttTraceMessagePublishWithOptions(request: QueryMqttTraceMessagePublishRequest, runtime: Util.RuntimeOptions): QueryMqttTraceMessagePublishResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.mqttRegionId)) {
    query['MqttRegionId'] = request.mqttRegionId;
  }
  if (!Util.isUnset(request.msgId)) {
    query['MsgId'] = request.msgId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMqttTraceMessagePublish',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Each successful call to the **QueryMqttTraceMessagePublish** operation increases the messaging transactions per second (TPS). This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  *
  * @param request QueryMqttTraceMessagePublishRequest
  * @return QueryMqttTraceMessagePublishResponse
 */
async function queryMqttTraceMessagePublish(request: QueryMqttTraceMessagePublishRequest): QueryMqttTraceMessagePublishResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMqttTraceMessagePublishWithOptions(request, runtime);
}

model QueryMqttTraceMessageSubscribeRequest {
  beginTime?: long(name='BeginTime', description='The beginning of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.', example='1621936800000'),
  clientId?: string(name='ClientId', description='The ID of the client that subscribes to the message. If you do not specify this parameter, the IDs of all clients that subscribe to the message are returned.', example='GID_test@@@consumer'),
  currentPage?: int32(name='CurrentPage', description='The number of the page to return. Pages start from page 1. If the input parameter value is greater than the total number of pages, the returned result is empty.', example='1'),
  endTime?: long(name='EndTime', description='The end of the time range to query. The value of this parameter is a UNIX timestamp in milliseconds.', example='1618646400000'),
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can view the instance ID in the **Basic Information** section of the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.', example='mqtt-cn-i7m26mf****'),
  mqttRegionId?: string(name='MqttRegionId', description='The ID of the region where the ApsaraMQ for MQTT instance resides. For more information, see [Endpoints](~~181438~~).', example='cn-hangzhou'),
  msgId?: string(name='MsgId', description='The message ID.', example='AC1EC1B33D5978308DB17F3245E4****'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 100.', example='5'),
  reverse?: boolean(name='Reverse', description='Specifies whether the returned results are displayed in reverse chronological order. Valid values:

*   **true**: The returned results are displayed in reverse order of the time when messages are delivered. This means that the latest consumed message is displayed as the first entry and the earliest consumed message is displayed as the last entry.
*   **false**: The returned results are displayed in order of the time when messages are delivered. This means that the earliest consumed message is displayed as the first entry and the latest consumed message is displayed as the last entry.

If you do not specify this parameter, the returned results are displayed in order of time when messages are delivered.', example='false'),
}

model QueryMqttTraceMessageSubscribeResponseBody = {
  currentPage?: int32(name='CurrentPage', description='The page number of the returned page.', example='1'),
  messageTraceLists?: [ 
    {
      action?: string(name='Action', description='The action on the message. Valid values:

*   **sub**: The ApsaraMQ for MQTT client subscribes to the message.
*   **push_offline**: The ApsaraMQ for MQTT broker pushes the offline message to the ApsaraMQ for MQTT client.', example='sub'),
      actionCode?: string(name='ActionCode', description='The code returned for the action on the message. Valid values:

*   **mqtt.trace.action.msg.sub**: The value that is returned if the value of Action is **sub**.
*   **mqtt.trace.action.msg.push.offline**: The value that is returned if the value of Action is **push_offline**.', example='mqtt.trace.action.msg.sub'),
      actionInfo?: string(name='ActionInfo', description='The returned information for the action on the message. Valid values:

*   **Push To Mqtt Client**: The value that is returned if the value of Action is **sub**.
*   **Push Offline Msg To Mqtt Client**: The value that is returned if the value of Action is **push_offline**.', example='Push To Mqtt Client'),
      clientId?: string(name='ClientId', description='The ID of the client that subscribes to the message.', example='GID_test@@@consumer'),
      msgId?: string(name='MsgId', description='The message ID.', example='AC1EC1B33D5978308DB17F3245E4****'),
      time?: string(name='Time', description='The time when the message was delivered.', example='2021-05-25 16:46:41.274'),
    }
  ](name='MessageTraceLists', description='The delivery trace of the queried message.'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='5'),
  requestId?: string(name='RequestId', description='The unique ID that the system generates for the request. You can use the ID to troubleshoot issues. This parameter is a common parameter.', example='4E685844-ADAF-4D85-9EAC-F9471E8C****'),
  total?: long(name='Total', description='The returned delivery traces.', example='2'),
}

model QueryMqttTraceMessageSubscribeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryMqttTraceMessageSubscribeResponseBody(name='body'),
}

/**
  * *   Each successful call to the **QueryMqttTraceMessageSubscribe** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  *
  * @param request QueryMqttTraceMessageSubscribeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryMqttTraceMessageSubscribeResponse
 */
async function queryMqttTraceMessageSubscribeWithOptions(request: QueryMqttTraceMessageSubscribeRequest, runtime: Util.RuntimeOptions): QueryMqttTraceMessageSubscribeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginTime)) {
    query['BeginTime'] = request.beginTime;
  }
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.currentPage)) {
    query['CurrentPage'] = request.currentPage;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.mqttRegionId)) {
    query['MqttRegionId'] = request.mqttRegionId;
  }
  if (!Util.isUnset(request.msgId)) {
    query['MsgId'] = request.msgId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.reverse)) {
    query['Reverse'] = request.reverse;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryMqttTraceMessageSubscribe',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Each successful call to the **QueryMqttTraceMessageSubscribe** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  *
  * @param request QueryMqttTraceMessageSubscribeRequest
  * @return QueryMqttTraceMessageSubscribeResponse
 */
async function queryMqttTraceMessageSubscribe(request: QueryMqttTraceMessageSubscribeRequest): QueryMqttTraceMessageSubscribeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMqttTraceMessageSubscribeWithOptions(request, runtime);
}

model QuerySessionByClientIdRequest {
  clientId?: string(name='ClientId', description='The ID of the ApsaraMQ for MQTT client that you want to query.', example='GID_test@@@test'),
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the [ApsaraMQ for MQTT console](https://mqtt.console.aliyun.com).', example='post-cn-0pp12gl****'),
}

model QuerySessionByClientIdResponseBody = {
  onlineStatus?: boolean(name='OnlineStatus', description='Indicates whether the ApsaraMQ for MQTT client is connected to the ApsaraMQ for MQTT broker. Valid values:

*   **true**
*   **false**', example='true'),
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='E4581CCF-62AF-44D9-B5B4-D1DBBC0E****'),
}

model QuerySessionByClientIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QuerySessionByClientIdResponseBody(name='body'),
}

/**
  * *   You can call this operation up to 500 times per second.**** For more information, see [Limits on QPS](~~163047~~).
  * *   Each successful call to the **QuerySessionByClientId** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request QuerySessionByClientIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QuerySessionByClientIdResponse
 */
async function querySessionByClientIdWithOptions(request: QuerySessionByClientIdRequest, runtime: Util.RuntimeOptions): QuerySessionByClientIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySessionByClientId',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation up to 500 times per second.**** For more information, see [Limits on QPS](~~163047~~).
  * *   Each successful call to the **QuerySessionByClientId** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request QuerySessionByClientIdRequest
  * @return QuerySessionByClientIdResponse
 */
async function querySessionByClientId(request: QuerySessionByClientIdRequest): QuerySessionByClientIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySessionByClientIdWithOptions(request, runtime);
}

model QueryTokenRequest {
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the [ApsaraMQ for MQTT console](https://mqtt.console.aliyun.com/).', example='post-cn-0pp12gl****'),
  token?: string(name='Token', description='The token that you want to query.', example='LzMT+XLFl5s/YWJ/MlDz4t/Lq5HC1iGU1P28HAMaxYxn8aQbALNtml7QZKl9L9kPe6LqUb95tEVo+zUqOogs9+jZwDUSzsd4X4qaD3n2TrBEuMOqKkk1Xdrvu9VBQQvIYbz7MJWZDYC3DlW7gLEr33Cuj54iIhagtBi3epStJitsssWs7otY9zhKOSZxhr49G3d0bh35mwyP18EMvDas8UlzeSozsSrujNUqZXOGK0PEBSd+rWMGDJlCt6GFmJgm2JFY7PJwf/7OOSmUYIYFs5o/PuPpoTMF+hcVXMs+0yDukIMTOzG9m3t8k36PVrghFmnK6pC3Rt3mibjW****ng=='),
}

model QueryTokenResponseBody = {
  requestId?: string(name='RequestId', description='The unique ID that the system generates for the request. This parameter is a common parameter.', example='5C8AADD0-6A95-436D-AFA0-3405CCE3****'),
  tokenStatus?: boolean(name='TokenStatus', description='The status of the queried token. Valid values:

*   **true**: indicates the token is valid.
*   **false**: indicates the token is invalid.', example='true'),
}

model QueryTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryTokenResponseBody(name='body'),
}

/**
  * *   You can call this operation up to 100 times per second per account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * *   Each successful call to the **QueryToken** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request QueryTokenRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryTokenResponse
 */
async function queryTokenWithOptions(request: QueryTokenRequest, runtime: Util.RuntimeOptions): QueryTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryToken',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation up to 100 times per second per account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * *   Each successful call to the **QueryToken** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request QueryTokenRequest
  * @return QueryTokenResponse
 */
async function queryToken(request: QueryTokenRequest): QueryTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTokenWithOptions(request, runtime);
}

model RefreshDeviceCredentialRequest {
  clientId?: string(name='ClientId', description='The client ID of the device whose access credential you want to update.', example='GID_test@@@test'),
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.', example='post-cn-0pp12gl****'),
}

model RefreshDeviceCredentialResponseBody = {
  deviceCredential?: {
    clientId?: string(name='ClientId', description='The client ID of the device.', example='GID_test@@@test'),
    createTime?: long(name='CreateTime', description='The timestamp that indicates when the access credential of the device was created. The value of this parameter is a UNIX timestamp in milliseconds.', example='1605541382000'),
    deviceAccessKeyId?: string(name='DeviceAccessKeyId', description='The AccessKey ID of the device.', example='DC.Z5fXh9sRRVufyLi6wo****'),
    deviceAccessKeySecret?: string(name='DeviceAccessKeySecret', description='The AccessKey secret of the device.', example='DC.BJMkn4eMQJK2vaApTS****'),
    instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.', example='post-cn-0pp12gl****'),
    updateTime?: long(name='UpdateTime', description='The timestamp that indicates when the access credential of the device was last updated. The value of this parameter is a UNIX timestamp in milliseconds.', example='1605541382000'),
  }(name='DeviceCredential', description='The access credential of the device.'),
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='E4581CCF-62AF-44D9-B5B4-D1DBDC0F****'),
}

model RefreshDeviceCredentialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefreshDeviceCredentialResponseBody(name='body'),
}

/**
  * ## [](#)Limits
  * You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  * >  Each successful call to the **RefreshDeviceCredential** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request RefreshDeviceCredentialRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RefreshDeviceCredentialResponse
 */
async function refreshDeviceCredentialWithOptions(request: RefreshDeviceCredentialRequest, runtime: Util.RuntimeOptions): RefreshDeviceCredentialResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefreshDeviceCredential',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ## [](#)Limits
  * You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  * >  Each successful call to the **RefreshDeviceCredential** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request RefreshDeviceCredentialRequest
  * @return RefreshDeviceCredentialResponse
 */
async function refreshDeviceCredential(request: RefreshDeviceCredentialRequest): RefreshDeviceCredentialResponse {
  var runtime = new Util.RuntimeOptions{};
  return refreshDeviceCredentialWithOptions(request, runtime);
}

model RegisterCaCertificateRequest {
  caContent?: string(name='CaContent', example='-----BEGIN CERTIFICATE-----\\nMIIDuzCCAqdGVzdC5jbi1xaW5n******\\n-----END CERTIFICATE-----'),
  caName?: string(name='CaName', example='mqtt_ca'),
  mqttInstanceId?: string(name='MqttInstanceId', example='post-cn-7mz2d******'),
  verificationContent?: string(name='VerificationContent', example='-----BEGIN CERTIFICATE-----\\nMIID/DCCAu+Y5sRMpp9tnd+4s******\\n-----END CERTIFICATE-----'),
}

model RegisterCaCertificateResponseBody = {
  requestId?: string(name='RequestId', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
  sn?: string(name='Sn', example='007269004887******'),
}

model RegisterCaCertificateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterCaCertificateResponseBody(name='body'),
}

async function registerCaCertificateWithOptions(request: RegisterCaCertificateRequest, runtime: Util.RuntimeOptions): RegisterCaCertificateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.caContent)) {
    query['CaContent'] = request.caContent;
  }
  if (!Util.isUnset(request.caName)) {
    query['CaName'] = request.caName;
  }
  if (!Util.isUnset(request.mqttInstanceId)) {
    query['MqttInstanceId'] = request.mqttInstanceId;
  }
  if (!Util.isUnset(request.verificationContent)) {
    query['VerificationContent'] = request.verificationContent;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterCaCertificate',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function registerCaCertificate(request: RegisterCaCertificateRequest): RegisterCaCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerCaCertificateWithOptions(request, runtime);
}

model RegisterDeviceCredentialRequest {
  clientId?: string(name='ClientId', description='The client ID of the device for which you want to create an access credential.', example='GID_test@@@test'),
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.', example='post-cn-0pp12gl****'),
}

model RegisterDeviceCredentialResponseBody = {
  deviceCredential?: {
    clientId?: string(name='ClientId', description='The client ID of the device.', example='GID_test@@@test'),
    createTime?: long(name='CreateTime', description='The timestamp that indicates when the access credential of the device was created. Unit: milliseconds.', example='1605541382000'),
    deviceAccessKeyId?: string(name='DeviceAccessKeyId', description='The AccessKey ID of the device.', example='DC.Z5fXh9sRRVufyLi6wo****'),
    deviceAccessKeySecret?: string(name='DeviceAccessKeySecret', description='The AccessKey secret of the device.', example='DC.BJMkn4eMQJK2vaApTS****'),
    instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance.', example='post-cn-0pp12gl****'),
    updateTime?: long(name='UpdateTime', description='The timestamp that indicates when the access credential of the device was last updated. Unit: milliseconds.', example='1605541382000'),
  }(name='DeviceCredential', description='The access credential of the device.'),
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='E4581CCF-62AF-44D9-B5B4-D1DBDC0E****'),
}

model RegisterDeviceCredentialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterDeviceCredentialResponseBody(name='body'),
}

/**
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  * *   Each successful call to the **RegisterDeviceCredential** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request RegisterDeviceCredentialRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RegisterDeviceCredentialResponse
 */
async function registerDeviceCredentialWithOptions(request: RegisterDeviceCredentialRequest, runtime: Util.RuntimeOptions): RegisterDeviceCredentialResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RegisterDeviceCredential',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  * *   Each successful call to the **RegisterDeviceCredential** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request RegisterDeviceCredentialRequest
  * @return RegisterDeviceCredentialResponse
 */
async function registerDeviceCredential(request: RegisterDeviceCredentialRequest): RegisterDeviceCredentialResponse {
  var runtime = new Util.RuntimeOptions{};
  return registerDeviceCredentialWithOptions(request, runtime);
}

model RevokeTokenRequest {
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the [ApsaraMQ for MQTT console](https://mqtt.console.aliyun.com/).', example='post-cn-0pp12gl****'),
  token?: string(name='Token', description='The token that you want to revoke.', example='LzMT+XLFl5s/YWJ/MlDz4t/Lq5HC1iGU1P28HAMaxYxn8aQbALNtml7QZKl9L9kPe6LqUb95tEVo+zUqOogs9+jZwDUSzsd4X4qaD3n2TrBEuMOqKkk1Xdrvu9VBQQvIYbz7MJWZDYC3DlW7gLEr33Cuj54iIhagtBi3epStJitsssWs7otY9zhKOSZxhr49G3d0bh35mwyP18EMvDas8UlzeSozsSrujNUqZXOGK0PEBSd+rWMGDJlCt6GFmJgm2JFY7PJwf/7OOSmUYIYFs5o/PuPpoTMF+hcVXMs+0yDukIMTOzG9m3t8k36PVrghFmnK6pC3Rt3mibjW****ng=='),
}

model RevokeTokenResponseBody = {
  requestId?: string(name='RequestId', description='The request ID. This parameter is a common parameter.', example='833EDFCB-C447-4CE3-B21F-3A4C2D1B****'),
}

model RevokeTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RevokeTokenResponseBody(name='body'),
}

/**
  * *   You can call this operation up to 5 times per second per account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * *   Each successful call to the **RevokeToken** operation increases the messaging transactions per second (TPS). This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request RevokeTokenRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RevokeTokenResponse
 */
async function revokeTokenWithOptions(request: RevokeTokenRequest, runtime: Util.RuntimeOptions): RevokeTokenResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RevokeToken',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation up to 5 times per second per account. If you want to increase the limit, join the DingTalk group 35228338 to contact ApsaraMQ for MQTT technical support.
  * *   Each successful call to the **RevokeToken** operation increases the messaging transactions per second (TPS). This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request RevokeTokenRequest
  * @return RevokeTokenResponse
 */
async function revokeToken(request: RevokeTokenRequest): RevokeTokenResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeTokenWithOptions(request, runtime);
}

model SendMessageRequest {
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can view the instance ID in the **Basic Information** section on the **Instance Details** page that corresponds to the instance in the [ApsaraMQ for MQTT console](https://mqtt.console.aliyun.com).', example='post-cn-0pp12gl****'),
  mqttTopic?: string(name='MqttTopic', description='The topic to which you want to send a message on the ApsaraMQ for MQTT instance.', example='TopicA'),
  payload?: string(name='Payload', description='The message content, which is the payload of the message. We recommend that you encode the content in Base64 to prevent non-printable characters from being transmitted.', example='test'),
}

model SendMessageResponseBody = {
  msgId?: string(name='MsgId', description='The unique message ID that is returned by the ApsaraMQ for MQTT broker after the message is sent.', example='0B736D997B7F45FF54E61C1C1B58****'),
  requestId?: string(name='RequestId', description='The unique ID that the system generates for the request. This parameter is a common parameter.', example='020F6A43-19E6-4B6E-B846-44EB31DF****'),
}

model SendMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendMessageResponseBody(name='body'),
}

/**
  * *   The **SendMessage** operation is called by applications on cloud servers. It is complementary to the operation that is called by ApsaraMQ for MQTT clients to send messages. For information about the differences between the scenarios of sending messages from applications on cloud servers and the scenarios of sending messages from ApsaraMQ for MQTT clients, see [Developer guide](~~179160~~).
  * *   Before you call the **SendMessage** operation, make sure that the kernel version of your ApsaraMQ for MQTT instance is 3.3.0 or later. You can obtain the information about the kernel version on the [Instance Details](https://mqtt.console.aliyun.com) page that corresponds to the instance in the **ApsaraMQ for MQTT console**.
  * *   Messages that are sent by calling the **SendMessage** operation cannot be forwarded to ApsaraMQ for RocketMQ. If you want to use an ApsaraMQ for MQTT to forward messages to ApsaraMQ for RocketMQ, send the messages by using an SDK. For more information, see [Export data from ApsaraMQ for MQTT to other Alibaba Cloud services](~~174527~~). You can call the **SendMessage** operation up to 1,000 times per second. For more information, see [Limits on QPS](~~163047~~).
  * *   Each successful call to the **SendMessage** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For information about the billing details, see [Billing rules](~~52819~~).
  *
  * @param request SendMessageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SendMessageResponse
 */
async function sendMessageWithOptions(request: SendMessageRequest, runtime: Util.RuntimeOptions): SendMessageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.mqttTopic)) {
    query['MqttTopic'] = request.mqttTopic;
  }
  if (!Util.isUnset(request.payload)) {
    query['Payload'] = request.payload;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendMessage',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The **SendMessage** operation is called by applications on cloud servers. It is complementary to the operation that is called by ApsaraMQ for MQTT clients to send messages. For information about the differences between the scenarios of sending messages from applications on cloud servers and the scenarios of sending messages from ApsaraMQ for MQTT clients, see [Developer guide](~~179160~~).
  * *   Before you call the **SendMessage** operation, make sure that the kernel version of your ApsaraMQ for MQTT instance is 3.3.0 or later. You can obtain the information about the kernel version on the [Instance Details](https://mqtt.console.aliyun.com) page that corresponds to the instance in the **ApsaraMQ for MQTT console**.
  * *   Messages that are sent by calling the **SendMessage** operation cannot be forwarded to ApsaraMQ for RocketMQ. If you want to use an ApsaraMQ for MQTT to forward messages to ApsaraMQ for RocketMQ, send the messages by using an SDK. For more information, see [Export data from ApsaraMQ for MQTT to other Alibaba Cloud services](~~174527~~). You can call the **SendMessage** operation up to 1,000 times per second. For more information, see [Limits on QPS](~~163047~~).
  * *   Each successful call to the **SendMessage** operation increases the messaging transactions per second (TPS) by one. This affects the billing of your instance. For information about the billing details, see [Billing rules](~~52819~~).
  *
  * @param request SendMessageRequest
  * @return SendMessageResponse
 */
async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendMessageWithOptions(request, runtime);
}

model UnRegisterDeviceCredentialRequest {
  clientId?: string(name='ClientId', description='The client ID of the device whose access credential you want to deregister.', example='GID_test@@@test'),
  instanceId?: string(name='InstanceId', description='The ID of the ApsaraMQ for MQTT instance. The ID must be consistent with the ID of the instance that the ApsaraMQ for MQTT client uses. You can obtain the instance ID on the **Instance Details** page that corresponds to the instance in the ApsaraMQ for MQTT console.', example='post-cn-0pp12gl****'),
}

model UnRegisterDeviceCredentialResponseBody = {
  requestId?: string(name='RequestId', description='The unique ID that the system generates for the request. This parameter is a common parameter.', example='E4581CCD-62AF-44D9-B5B4-D1DBDC0E****'),
}

model UnRegisterDeviceCredentialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UnRegisterDeviceCredentialResponseBody(name='body'),
}

/**
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  * *   Each successful call to the **UnRegisterDeviceCredential** operation increases the number of transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request UnRegisterDeviceCredentialRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UnRegisterDeviceCredentialResponse
 */
async function unRegisterDeviceCredentialWithOptions(request: UnRegisterDeviceCredentialRequest, runtime: Util.RuntimeOptions): UnRegisterDeviceCredentialResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientId)) {
    query['ClientId'] = request.clientId;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnRegisterDeviceCredential',
    version = '2020-04-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   You can call this operation up to 500 times per second per account. If the limit is exceeded, throttling is triggered. This may affect your business. We recommend that you take note of this limit when you call this operation. For more information, see [Limits on QPS](~~163047~~).
  * *   Each successful call to the **UnRegisterDeviceCredential** operation increases the number of transactions per second (TPS) by one. This affects the billing of your instance. For more information, see [Billing rules](~~52819~~).
  *
  * @param request UnRegisterDeviceCredentialRequest
  * @return UnRegisterDeviceCredentialResponse
 */
async function unRegisterDeviceCredential(request: UnRegisterDeviceCredentialRequest): UnRegisterDeviceCredentialResponse {
  var runtime = new Util.RuntimeOptions{};
  return unRegisterDeviceCredentialWithOptions(request, runtime);
}

