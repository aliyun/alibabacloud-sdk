/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
@endpointMap = {
    cn-hangzhou = 'cas.aliyuncs.com',
    ap-northeast-2-pop = 'cas.aliyuncs.com',
    ap-southeast-1 = 'cas.aliyuncs.com',
    ap-southeast-3 = 'cas.aliyuncs.com',
    ap-southeast-5 = 'cas.aliyuncs.com',
    cn-beijing = 'cas.aliyuncs.com',
    cn-beijing-finance-1 = 'cas.aliyuncs.com',
    cn-beijing-finance-pop = 'cas.aliyuncs.com',
    cn-beijing-gov-1 = 'cas.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cas.aliyuncs.com',
    cn-chengdu = 'cas.aliyuncs.com',
    cn-edge-1 = 'cas.aliyuncs.com',
    cn-fujian = 'cas.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cas.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cas.aliyuncs.com',
    cn-hangzhou-finance = 'cas.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cas.aliyuncs.com',
    cn-hangzhou-test-306 = 'cas.aliyuncs.com',
    cn-hongkong = 'cas.aliyuncs.com',
    cn-hongkong-finance-pop = 'cas.aliyuncs.com',
    cn-huhehaote = 'cas.aliyuncs.com',
    cn-north-2-gov-1 = 'cas.aliyuncs.com',
    cn-qingdao = 'cas.aliyuncs.com',
    cn-qingdao-nebula = 'cas.aliyuncs.com',
    cn-shanghai = 'cas.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cas.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cas.aliyuncs.com',
    cn-shanghai-finance-1 = 'cas.aliyuncs.com',
    cn-shanghai-inner = 'cas.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cas.aliyuncs.com',
    cn-shenzhen = 'cas.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cas.aliyuncs.com',
    cn-shenzhen-inner = 'cas.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cas.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cas.aliyuncs.com',
    cn-wuhan = 'cas.aliyuncs.com',
    cn-yushanfang = 'cas.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cas.aliyuncs.com',
    cn-zhangjiakou = 'cas.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cas.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cas.aliyuncs.com',
    eu-west-1 = 'cas.aliyuncs.com',
    eu-west-1-oxs = 'cas.aliyuncs.com',
    rus-west-1-pop = 'cas.aliyuncs.com',
    us-east-1 = 'cas.aliyuncs.com',
    us-west-1 = 'cas.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('cas', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CreateDVOrderAuditRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
  domain?: string(name='Domain'),
  domainVerifyType?: string(name='DomainVerifyType'),
  username?: string(name='Username'),
  email?: string(name='Email'),
  mobile?: string(name='Mobile'),
  province?: string(name='Province'),
  city?: string(name='City'),
}

model CreateDVOrderAuditResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDVOrderAuditResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDVOrderAuditResponseBody(name='body'),
}

async function createDVOrderAuditWithOptions(request: CreateDVOrderAuditRequest, runtime: Util.RuntimeOptions): CreateDVOrderAuditResponse {
  Util.validateModel(request);
  var query = {};
  query["SourceIp"] = request.sourceIp;
  query["Lang"] = request.lang;
  query["InstanceId"] = request.instanceId;
  query["Domain"] = request.domain;
  query["DomainVerifyType"] = request.domainVerifyType;
  query["Username"] = request.username;
  query["Email"] = request.email;
  query["Mobile"] = request.mobile;
  query["Province"] = request.province;
  query["City"] = request.city;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateDVOrderAudit',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDVOrderAudit(request: CreateDVOrderAuditRequest): CreateDVOrderAuditResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDVOrderAuditWithOptions(request, runtime);
}

model CreateUserCertificateRequest {
  name?: string(name='Name'),
  cert?: string(name='Cert'),
  key?: string(name='Key'),
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
}

model CreateUserCertificateResponseBody = {
  requestId?: string(name='RequestId'),
  certId?: long(name='CertId'),
}

model CreateUserCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserCertificateResponseBody(name='body'),
}

async function createUserCertificateWithOptions(request: CreateUserCertificateRequest, runtime: Util.RuntimeOptions): CreateUserCertificateResponse {
  Util.validateModel(request);
  var query = {};
  query["Name"] = request.name;
  query["Cert"] = request.cert;
  query["Key"] = request.key;
  query["SourceIp"] = request.sourceIp;
  query["Lang"] = request.lang;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CreateUserCertificate',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createUserCertificate(request: CreateUserCertificateRequest): CreateUserCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserCertificateWithOptions(request, runtime);
}

model DeleteUserCertificateRequest {
  certId?: long(name='CertId'),
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
}

model DeleteUserCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUserCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserCertificateResponseBody(name='body'),
}

async function deleteUserCertificateWithOptions(request: DeleteUserCertificateRequest, runtime: Util.RuntimeOptions): DeleteUserCertificateResponse {
  Util.validateModel(request);
  var query = {};
  query["CertId"] = request.certId;
  query["SourceIp"] = request.sourceIp;
  query["Lang"] = request.lang;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DeleteUserCertificate',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteUserCertificate(request: DeleteUserCertificateRequest): DeleteUserCertificateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserCertificateWithOptions(request, runtime);
}

model DescribeDVOrderResultRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  instanceId?: string(name='InstanceId'),
}

model DescribeDVOrderResultResponseBody = {
  orderStatus?: string(name='OrderStatus'),
  checkName?: string(name='CheckName'),
  privateKey?: string(name='PrivateKey'),
  requestId?: string(name='RequestId'),
  checkType?: string(name='CheckType'),
  checkValue?: string(name='CheckValue'),
  certificate?: string(name='Certificate'),
}

model DescribeDVOrderResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDVOrderResultResponseBody(name='body'),
}

async function describeDVOrderResultWithOptions(request: DescribeDVOrderResultRequest, runtime: Util.RuntimeOptions): DescribeDVOrderResultResponse {
  Util.validateModel(request);
  var query = {};
  query["SourceIp"] = request.sourceIp;
  query["Lang"] = request.lang;
  query["InstanceId"] = request.instanceId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDVOrderResult',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDVOrderResult(request: DescribeDVOrderResultRequest): DescribeDVOrderResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDVOrderResultWithOptions(request, runtime);
}

model DescribeOrderInstanceListRequest {
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
  startIndex?: int32(name='StartIndex'),
}

model DescribeOrderInstanceListResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  orderList?: [ 
    {
      status?: string(name='Status'),
      certType?: string(name='CertType'),
      instanceId?: string(name='InstanceId'),
      source?: string(name='Source'),
      id?: long(name='Id'),
    }
  ](name='OrderList'),
}

model DescribeOrderInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOrderInstanceListResponseBody(name='body'),
}

async function describeOrderInstanceListWithOptions(request: DescribeOrderInstanceListRequest, runtime: Util.RuntimeOptions): DescribeOrderInstanceListResponse {
  Util.validateModel(request);
  var query = {};
  query["SourceIp"] = request.sourceIp;
  query["Lang"] = request.lang;
  query["StartIndex"] = request.startIndex;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeOrderInstanceList',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeOrderInstanceList(request: DescribeOrderInstanceListRequest): DescribeOrderInstanceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeOrderInstanceListWithOptions(request, runtime);
}

model DescribeUserCertificateDetailRequest {
  certId?: long(name='CertId'),
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
}

model DescribeUserCertificateDetailResponseBody = {
  fingerprint?: string(name='Fingerprint'),
  requestId?: string(name='RequestId'),
  issuer?: string(name='Issuer'),
  expired?: boolean(name='Expired'),
  orgName?: string(name='OrgName'),
  city?: string(name='City'),
  endDate?: string(name='EndDate'),
  province?: string(name='Province'),
  buyInAliyun?: boolean(name='BuyInAliyun'),
  common?: string(name='Common'),
  name?: string(name='Name'),
  startDate?: string(name='StartDate'),
  sans?: string(name='Sans'),
  country?: string(name='Country'),
  cert?: string(name='Cert'),
  id?: long(name='Id'),
  key?: string(name='Key'),
}

model DescribeUserCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserCertificateDetailResponseBody(name='body'),
}

async function describeUserCertificateDetailWithOptions(request: DescribeUserCertificateDetailRequest, runtime: Util.RuntimeOptions): DescribeUserCertificateDetailResponse {
  Util.validateModel(request);
  var query = {};
  query["CertId"] = request.certId;
  query["SourceIp"] = request.sourceIp;
  query["Lang"] = request.lang;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserCertificateDetail',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserCertificateDetail(request: DescribeUserCertificateDetailRequest): DescribeUserCertificateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserCertificateDetailWithOptions(request, runtime);
}

model DescribeUserCertificateListRequest {
  showSize?: int32(name='ShowSize'),
  currentPage?: int32(name='CurrentPage'),
  sourceIp?: string(name='SourceIp'),
  lang?: string(name='Lang'),
}

model DescribeUserCertificateListResponseBody = {
  totalCount?: int32(name='TotalCount'),
  requestId?: string(name='RequestId'),
  currentPage?: int32(name='CurrentPage'),
  certificateList?: [ 
    {
      startDate?: string(name='startDate'),
      province?: string(name='province'),
      sans?: string(name='sans'),
      common?: string(name='common'),
      id?: long(name='id'),
      country?: string(name='country'),
      issuer?: string(name='issuer'),
      buyInAliyun?: boolean(name='buyInAliyun'),
      endDate?: string(name='endDate'),
      expired?: boolean(name='expired'),
      fingerprint?: string(name='fingerprint'),
      name?: string(name='name'),
      city?: string(name='city'),
      orgName?: string(name='orgName'),
    }
  ](name='CertificateList'),
  showSize?: int32(name='ShowSize'),
}

model DescribeUserCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserCertificateListResponseBody(name='body'),
}

async function describeUserCertificateListWithOptions(request: DescribeUserCertificateListRequest, runtime: Util.RuntimeOptions): DescribeUserCertificateListResponse {
  Util.validateModel(request);
  var query = {};
  query["ShowSize"] = request.showSize;
  query["CurrentPage"] = request.currentPage;
  query["SourceIp"] = request.sourceIp;
  query["Lang"] = request.lang;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'DescribeUserCertificateList',
    version = '2018-07-13',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeUserCertificateList(request: DescribeUserCertificateListRequest): DescribeUserCertificateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserCertificateListWithOptions(request, runtime);
}

