/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cas';
  @version = '2018-07-13';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'cas.aliyuncs.com',
    ap-northeast-2-pop = 'cas.aliyuncs.com',
    ap-southeast-1 = 'cas.aliyuncs.com',
    ap-southeast-3 = 'cas.aliyuncs.com',
    ap-southeast-5 = 'cas.aliyuncs.com',
    cn-beijing = 'cas.aliyuncs.com',
    cn-beijing-finance-1 = 'cas.aliyuncs.com',
    cn-beijing-finance-pop = 'cas.aliyuncs.com',
    cn-beijing-gov-1 = 'cas.aliyuncs.com',
    cn-beijing-nu16-b01 = 'cas.aliyuncs.com',
    cn-chengdu = 'cas.aliyuncs.com',
    cn-edge-1 = 'cas.aliyuncs.com',
    cn-fujian = 'cas.aliyuncs.com',
    cn-haidian-cm12-c01 = 'cas.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'cas.aliyuncs.com',
    cn-hangzhou-finance = 'cas.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'cas.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'cas.aliyuncs.com',
    cn-hangzhou-test-306 = 'cas.aliyuncs.com',
    cn-hongkong = 'cas.aliyuncs.com',
    cn-hongkong-finance-pop = 'cas.aliyuncs.com',
    cn-huhehaote = 'cas.aliyuncs.com',
    cn-north-2-gov-1 = 'cas.aliyuncs.com',
    cn-qingdao = 'cas.aliyuncs.com',
    cn-qingdao-nebula = 'cas.aliyuncs.com',
    cn-shanghai = 'cas.aliyuncs.com',
    cn-shanghai-et15-b01 = 'cas.aliyuncs.com',
    cn-shanghai-et2-b01 = 'cas.aliyuncs.com',
    cn-shanghai-finance-1 = 'cas.aliyuncs.com',
    cn-shanghai-inner = 'cas.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'cas.aliyuncs.com',
    cn-shenzhen = 'cas.aliyuncs.com',
    cn-shenzhen-finance-1 = 'cas.aliyuncs.com',
    cn-shenzhen-inner = 'cas.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'cas.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'cas.aliyuncs.com',
    cn-wuhan = 'cas.aliyuncs.com',
    cn-yushanfang = 'cas.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'cas.aliyuncs.com',
    cn-zhangjiakou = 'cas.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'cas.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'cas.aliyuncs.com',
    eu-west-1 = 'cas.aliyuncs.com',
    eu-west-1-oxs = 'cas.aliyuncs.com',
    rus-west-1-pop = 'cas.aliyuncs.com',
    us-east-1 = 'cas.aliyuncs.com',
    us-west-1 = 'cas.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateDVOrderAuditRequest {
  city: string(name='City', position='Query'),
  domain: string(name='Domain', position='Query'),
  domainVerifyType: string(name='DomainVerifyType', position='Query'),
  email: string(name='Email', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  mobile: string(name='Mobile', position='Query'),
  province: string(name='Province', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  username: string(name='Username', position='Query'),
}

model CreateDVOrderAuditResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDVOrderAuditResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDVOrderAuditResponseBody(name='body'),
}

async function createDVOrderAudit(request: CreateDVOrderAuditRequest): CreateDVOrderAuditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDVOrderAudit', 'POST', '/', 'json', false, 'json', request);
}

model CreateUserCertificateRequest {
  cert: string(name='Cert', position='Query'),
  key: string(name='Key', position='Query'),
  lang?: string(name='Lang', position='Query'),
  name: string(name='Name', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model CreateUserCertificateResponseBody = {
  certId?: long(name='CertId'),
  requestId?: string(name='RequestId'),
}

model CreateUserCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserCertificateResponseBody(name='body'),
}

async function createUserCertificate(request: CreateUserCertificateRequest): CreateUserCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateUserCertificate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteUserCertificateRequest {
  certId: long(name='CertId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DeleteUserCertificateResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteUserCertificateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserCertificateResponseBody(name='body'),
}

async function deleteUserCertificate(request: DeleteUserCertificateRequest): DeleteUserCertificateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteUserCertificate', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDVOrderResultRequest {
  instanceId: string(name='InstanceId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeDVOrderResultResponseBody = {
  certificate?: string(name='Certificate'),
  checkName?: string(name='CheckName'),
  checkType?: string(name='CheckType'),
  checkValue?: string(name='CheckValue'),
  orderStatus?: string(name='OrderStatus'),
  privateKey?: string(name='PrivateKey'),
  requestId?: string(name='RequestId'),
}

model DescribeDVOrderResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDVOrderResultResponseBody(name='body'),
}

async function describeDVOrderResult(request: DescribeDVOrderResultRequest): DescribeDVOrderResultResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDVOrderResult', 'POST', '/', 'json', false, 'json', request);
}

model DescribeOrderInstanceListRequest {
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
  startIndex: int32(name='StartIndex', position='Query'),
}

model DescribeOrderInstanceListResponseBody = {
  orderList?: [ 
    {
      certType?: string(name='CertType'),
      id?: long(name='Id'),
      instanceId?: string(name='InstanceId'),
      source?: string(name='Source'),
      status?: string(name='Status'),
    }
  ](name='OrderList'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeOrderInstanceListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeOrderInstanceListResponseBody(name='body'),
}

async function describeOrderInstanceList(request: DescribeOrderInstanceListRequest): DescribeOrderInstanceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeOrderInstanceList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserCertificateDetailRequest {
  certId: long(name='CertId', position='Query'),
  lang?: string(name='Lang', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeUserCertificateDetailResponseBody = {
  buyInAliyun?: boolean(name='BuyInAliyun'),
  cert?: string(name='Cert'),
  city?: string(name='City'),
  common?: string(name='Common'),
  country?: string(name='Country'),
  endDate?: string(name='EndDate'),
  expired?: boolean(name='Expired'),
  fingerprint?: string(name='Fingerprint'),
  id?: long(name='Id'),
  issuer?: string(name='Issuer'),
  key?: string(name='Key'),
  name?: string(name='Name'),
  orgName?: string(name='OrgName'),
  province?: string(name='Province'),
  requestId?: string(name='RequestId'),
  sans?: string(name='Sans'),
  startDate?: string(name='StartDate'),
}

model DescribeUserCertificateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserCertificateDetailResponseBody(name='body'),
}

async function describeUserCertificateDetail(request: DescribeUserCertificateDetailRequest): DescribeUserCertificateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserCertificateDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeUserCertificateListRequest {
  currentPage: int32(name='CurrentPage', position='Query'),
  lang?: string(name='Lang', position='Query'),
  showSize: int32(name='ShowSize', position='Query'),
  sourceIp?: string(name='SourceIp', position='Query'),
}

model DescribeUserCertificateListResponseBody = {
  certificateList?: [ 
    {
      buyInAliyun?: boolean(name='buyInAliyun'),
      city?: string(name='city'),
      common?: string(name='common'),
      country?: string(name='country'),
      endDate?: string(name='endDate'),
      expired?: boolean(name='expired'),
      fingerprint?: string(name='fingerprint'),
      id?: long(name='id'),
      issuer?: string(name='issuer'),
      name?: string(name='name'),
      orgName?: string(name='orgName'),
      province?: string(name='province'),
      sans?: string(name='sans'),
      startDate?: string(name='startDate'),
    }
  ](name='CertificateList'),
  currentPage?: int32(name='CurrentPage'),
  requestId?: string(name='RequestId'),
  showSize?: int32(name='ShowSize'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeUserCertificateListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserCertificateListResponseBody(name='body'),
}

async function describeUserCertificateList(request: DescribeUserCertificateListRequest): DescribeUserCertificateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeUserCertificateList', 'POST', '/', 'json', false, 'json', request);
}

