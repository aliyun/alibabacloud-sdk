/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AliGenie';
  @version = 'aiso_1.0';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AppAuthRequest {
  accessKey?: string(name='AccessKey', position='Body'),
  appId?: string(name='AppId', position='Body'),
}

model AppAuthResponseBody = {
  code?: int32(name='Code'),
  extendInfo?: map[string]any(name='ExtendInfo'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    accessKey?: string(name='AccessKey'),
    accessToken?: string(name='AccessToken'),
    accessTokenExpire?: long(name='AccessTokenExpire'),
    appId?: string(name='AppId'),
    refreshToken?: string(name='RefreshToken'),
    refreshTokenExpire?: long(name='RefreshTokenExpire'),
    uuid?: string(name='Uuid'),
  }(name='Result'),
}

model AppAuthResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AppAuthResponseBody(name='body'),
}

async function appAuth(request: AppAuthRequest): AppAuthResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AppAuth', 'POST', '/v1.0/aiso/AppAuth', 'json', true, 'form', request);
}

model FaceActionRecognizeRequest {
  jsonString: string(name='JsonString', position='Body'),
  uuid: string(name='Uuid', position='Body'),
}

model FaceActionRecognizeResponseBody = {
  code?: int32(name='Code'),
  extendInfo?: map[string]any(name='ExtendInfo'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  result?: {
    actionResult?: string(name='ActionResult'),
    faceResult?: string(name='FaceResult'),
  }(name='Result'),
}

model FaceActionRecognizeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: FaceActionRecognizeResponseBody(name='body'),
}

async function faceActionRecognize(request: FaceActionRecognizeRequest): FaceActionRecognizeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FaceActionRecognize', 'POST', '/v1.0/aiso/FaceActionRecognize', 'json', true, 'form', request);
}

