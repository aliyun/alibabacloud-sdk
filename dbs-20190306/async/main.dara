/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Dbs';
  @version = '2019-03-06';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-beijing = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-chengdu = 'dbs-api.cn-chengdu.aliyuncs.com',
    cn-zhangjiakou = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-huhehaote = 'dbs-api.cn-huhehaote.aliyuncs.com',
    cn-hangzhou = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'dbs-api.cn-hangzhou.aliyuncs.com',
    ap-southeast-1 = 'dbs-api.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'dbs-api.ap-southeast-2.aliyuncs.com',
    ap-southeast-3 = 'dbs-api.ap-southeast-3.aliyuncs.com',
    ap-southeast-5 = 'dbs-api.ap-southeast-5.aliyuncs.com',
    ap-northeast-1 = 'dbs-api.ap-northeast-1.aliyuncs.com',
    us-west-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    us-east-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    eu-central-1 = 'dbs-api.eu-central-1.aliyuncs.com',
    cn-hangzhou-finance = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shanghai-finance-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'dbs-api.cn-hangzhou.aliyuncs.com',
    ap-south-1 = 'dbs-api.ap-south-1.aliyuncs.com',
    eu-west-1 = 'dbs-api.eu-west-1.aliyuncs.com',
    me-east-1 = 'dbs-api.me-east-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model ConfigureBackupPlanRequest {
  autoStartBackup?: boolean(name='AutoStartBackup', position='Query'),
  backupGatewayId?: long(name='BackupGatewayId', position='Query'),
  backupLogIntervalSeconds?: int32(name='BackupLogIntervalSeconds', position='Query'),
  backupObjects?: string(name='BackupObjects', position='Query'),
  backupPeriod?: string(name='BackupPeriod', position='Query'),
  backupPlanId: string(name='BackupPlanId', position='Query'),
  backupPlanName: string(name='BackupPlanName', position='Query'),
  backupRateLimit?: long(name='BackupRateLimit', position='Query'),
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod', position='Query'),
  backupSpeedLimit?: long(name='BackupSpeedLimit', position='Query'),
  backupStartTime?: string(name='BackupStartTime', position='Query'),
  backupStorageType?: string(name='BackupStorageType', position='Query'),
  backupStrategyType?: string(name='BackupStrategyType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  crossAliyunId?: string(name='CrossAliyunId', position='Query'),
  crossRoleName?: string(name='CrossRoleName', position='Query'),
  duplicationArchivePeriod?: int32(name='DuplicationArchivePeriod', position='Query'),
  duplicationInfrequentAccessPeriod?: int32(name='DuplicationInfrequentAccessPeriod', position='Query'),
  enableBackupLog?: boolean(name='EnableBackupLog', position='Query'),
  OSSBucketName?: string(name='OSSBucketName', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName', position='Query'),
  sourceEndpointIP?: string(name='SourceEndpointIP', position='Query'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID', position='Query'),
  sourceEndpointInstanceType: string(name='SourceEndpointInstanceType', position='Query'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID', position='Query'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword', position='Query'),
  sourceEndpointPort?: int32(name='SourceEndpointPort', position='Query'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion', position='Query'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName', position='Query'),
}

model ConfigureBackupPlanResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConfigureBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: ConfigureBackupPlanResponseBody(name='body'),
}

async function configureBackupPlan(request: ConfigureBackupPlanRequest): ConfigureBackupPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfigureBackupPlan', 'POST', '/', 'json', false, 'json', request);
}

model CreateAndStartBackupPlanRequest {
  backupGatewayId?: long(name='BackupGatewayId', position='Query'),
  backupLogIntervalSeconds?: int32(name='BackupLogIntervalSeconds', position='Query'),
  backupMethod: string(name='BackupMethod', position='Query'),
  backupObjects?: string(name='BackupObjects', position='Query'),
  backupPeriod?: string(name='BackupPeriod', position='Query'),
  backupPlanId?: string(name='BackupPlanId', position='Query'),
  backupPlanName: string(name='BackupPlanName', position='Query'),
  backupRateLimit?: long(name='BackupRateLimit', position='Query'),
  backupRetentionPeriod?: int32(name='BackupRetentionPeriod', position='Query'),
  backupSpeedLimit?: long(name='BackupSpeedLimit', position='Query'),
  backupStartTime?: string(name='BackupStartTime', position='Query'),
  backupStorageType?: string(name='BackupStorageType', position='Query'),
  backupStrategyType?: string(name='BackupStrategyType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  crossAliyunId?: string(name='CrossAliyunId', position='Query'),
  crossRoleName?: string(name='CrossRoleName', position='Query'),
  databaseRegion?: string(name='DatabaseRegion', position='Query'),
  databaseType: string(name='DatabaseType', position='Query'),
  duplicationArchivePeriod?: int32(name='DuplicationArchivePeriod', position='Query'),
  duplicationInfrequentAccessPeriod?: int32(name='DuplicationInfrequentAccessPeriod', position='Query'),
  enableBackupLog?: boolean(name='EnableBackupLog', position='Query'),
  fromApp?: string(name='FromApp', position='Query'),
  instanceClass: string(name='InstanceClass', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  OSSBucketName?: string(name='OSSBucketName', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  payType?: string(name='PayType', position='Query'),
  period?: string(name='Period', position='Query'),
  region?: string(name='Region', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName', position='Query'),
  sourceEndpointIP?: string(name='SourceEndpointIP', position='Query'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID', position='Query'),
  sourceEndpointInstanceType: string(name='SourceEndpointInstanceType', position='Query'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID', position='Query'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword', position='Query'),
  sourceEndpointPort?: int32(name='SourceEndpointPort', position='Query'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion', position='Query'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName', position='Query'),
  storageRegion?: string(name='StorageRegion', position='Query'),
  storageType?: string(name='StorageType', position='Query'),
  usedTime?: int32(name='UsedTime', position='Query'),
}

model CreateAndStartBackupPlanResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  createBackupSet?: boolean(name='CreateBackupSet'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAndStartBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAndStartBackupPlanResponseBody(name='body'),
}

async function createAndStartBackupPlan(request: CreateAndStartBackupPlanRequest): CreateAndStartBackupPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAndStartBackupPlan', 'POST', '/', 'json', false, 'json', request);
}

model CreateBackupPlanRequest {
  backupMethod: string(name='BackupMethod', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  databaseRegion?: string(name='DatabaseRegion', position='Query'),
  databaseType: string(name='DatabaseType', position='Query'),
  fromApp?: string(name='FromApp', position='Query'),
  instanceClass: string(name='InstanceClass', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  payType?: string(name='PayType', position='Query'),
  period?: string(name='Period', position='Query'),
  region?: string(name='Region', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
  storageRegion?: string(name='StorageRegion', position='Query'),
  storageType?: string(name='StorageType', position='Query'),
  usedTime?: int32(name='UsedTime', position='Query'),
}

model CreateBackupPlanResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: CreateBackupPlanResponseBody(name='body'),
}

async function createBackupPlan(request: CreateBackupPlanRequest): CreateBackupPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateBackupPlan', 'POST', '/', 'json', false, 'json', request);
}

model CreateFullBackupSetDownloadRequest {
  backupSetDataFormat?: string(name='BackupSetDataFormat', position='Query'),
  backupSetId: string(name='BackupSetId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateFullBackupSetDownloadResponseBody = {
  backupSetDownloadTaskId?: string(name='BackupSetDownloadTaskId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateFullBackupSetDownloadResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFullBackupSetDownloadResponseBody(name='body'),
}

async function createFullBackupSetDownload(request: CreateFullBackupSetDownloadRequest): CreateFullBackupSetDownloadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFullBackupSetDownload', 'POST', '/', 'json', false, 'json', request);
}

model CreateGetDBListFromAgentTaskRequest {
  backupGatewayId?: long(name='BackupGatewayId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  databaseType?: string(name='DatabaseType', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  sourceEndpointIP?: string(name='SourceEndpointIP', position='Query'),
  sourceEndpointPort?: int32(name='SourceEndpointPort', position='Query'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion', position='Query'),
}

model CreateGetDBListFromAgentTaskResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  taskId?: long(name='TaskId'),
}

model CreateGetDBListFromAgentTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateGetDBListFromAgentTaskResponseBody(name='body'),
}

async function createGetDBListFromAgentTask(request: CreateGetDBListFromAgentTaskRequest): CreateGetDBListFromAgentTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateGetDBListFromAgentTask', 'POST', '/', 'json', false, 'json', request);
}

model CreateIncrementBackupSetDownloadRequest {
  backupSetDataFormat?: string(name='BackupSetDataFormat', position='Query'),
  backupSetId: string(name='BackupSetId', position='Query'),
  backupSetName: string(name='BackupSetName', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model CreateIncrementBackupSetDownloadResponseBody = {
  backupSetDownloadTaskId?: string(name='BackupSetDownloadTaskId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateIncrementBackupSetDownloadResponse = {
  headers: map[string]string(name='headers'),
  body: CreateIncrementBackupSetDownloadResponseBody(name='body'),
}

async function createIncrementBackupSetDownload(request: CreateIncrementBackupSetDownloadRequest): CreateIncrementBackupSetDownloadResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateIncrementBackupSetDownload', 'POST', '/', 'json', false, 'json', request);
}

model CreateRestoreTaskRequest {
  backupGatewayId?: long(name='BackupGatewayId', position='Query'),
  backupPlanId: string(name='BackupPlanId', position='Query'),
  backupSetId?: string(name='BackupSetId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  crossAliyunId?: string(name='CrossAliyunId', position='Query'),
  crossRoleName?: string(name='CrossRoleName', position='Query'),
  destinationEndpointDatabaseName?: string(name='DestinationEndpointDatabaseName', position='Query'),
  destinationEndpointIP?: string(name='DestinationEndpointIP', position='Query'),
  destinationEndpointInstanceID?: string(name='DestinationEndpointInstanceID', position='Query'),
  destinationEndpointInstanceType: string(name='DestinationEndpointInstanceType', position='Query'),
  destinationEndpointOracleSID?: string(name='DestinationEndpointOracleSID', position='Query'),
  destinationEndpointPassword?: string(name='DestinationEndpointPassword', position='Query'),
  destinationEndpointPort?: int32(name='DestinationEndpointPort', position='Query'),
  destinationEndpointRegion?: string(name='DestinationEndpointRegion', position='Query'),
  destinationEndpointUserName?: string(name='DestinationEndpointUserName', position='Query'),
  duplicateConflict?: string(name='DuplicateConflict', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  restoreDir?: string(name='RestoreDir', position='Query'),
  restoreHome?: string(name='RestoreHome', position='Query'),
  restoreObjects?: string(name='RestoreObjects', position='Query'),
  restoreTaskName: string(name='RestoreTaskName', position='Query'),
  restoreTime?: long(name='RestoreTime', position='Query'),
}

model CreateRestoreTaskResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  restoreTaskId?: string(name='RestoreTaskId'),
  success?: boolean(name='Success'),
}

model CreateRestoreTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRestoreTaskResponseBody(name='body'),
}

async function createRestoreTask(request: CreateRestoreTaskRequest): CreateRestoreTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRestoreTask', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupGatewayListRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  identifier?: string(name='Identifier', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  region: string(name='Region', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeBackupGatewayListResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  items?: {
    backupGateway?: [ 
    {
      backupGatewayCreateTime?: long(name='BackupGatewayCreateTime'),
      backupGatewayId?: string(name='BackupGatewayId'),
      backupGatewayStatus?: string(name='BackupGatewayStatus'),
      displayName?: string(name='DisplayName'),
      identifier?: string(name='Identifier'),
      lastHeartbeatTime?: long(name='LastHeartbeatTime'),
      region?: string(name='Region'),
      sourceEndpointHostname?: string(name='SourceEndpointHostname'),
      sourceEndpointInternetIP?: string(name='SourceEndpointInternetIP'),
      sourceEndpointIntranetIP?: string(name='SourceEndpointIntranetIP'),
    }
  ](name='BackupGateway')
  }(name='Items'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalElements?: int32(name='TotalElements'),
  totalPages?: int32(name='TotalPages'),
}

model DescribeBackupGatewayListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupGatewayListResponseBody(name='body'),
}

async function describeBackupGatewayList(request: DescribeBackupGatewayListRequest): DescribeBackupGatewayListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupGatewayList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPlanBillingRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  showStorageType?: boolean(name='ShowStorageType', position='Query'),
}

model DescribeBackupPlanBillingResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  item?: {
    buyChargeType?: string(name='BuyChargeType'),
    buyCreateTimestamp?: long(name='BuyCreateTimestamp'),
    buyExpiredTimestamp?: long(name='BuyExpiredTimestamp'),
    buySpec?: string(name='BuySpec'),
    contStorageSize?: long(name='ContStorageSize'),
    fullStorageSize?: long(name='FullStorageSize'),
    isExpired?: boolean(name='IsExpired'),
    isFreeBytesUnlimited?: boolean(name='IsFreeBytesUnlimited'),
    paiedBytes?: long(name='PaiedBytes'),
    quotaEndTimestamp?: long(name='QuotaEndTimestamp'),
    quotaStartTimestamp?: long(name='QuotaStartTimestamp'),
    resourceGroupId?: string(name='ResourceGroupId'),
    totalFreeBytes?: long(name='TotalFreeBytes'),
    usedFullBytes?: long(name='UsedFullBytes'),
    usedIncrementBytes?: long(name='UsedIncrementBytes'),
  }(name='Item'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeBackupPlanBillingResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPlanBillingResponseBody(name='body'),
}

async function describeBackupPlanBilling(request: DescribeBackupPlanBillingRequest): DescribeBackupPlanBillingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPlanBilling', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupPlanListRequest {
  backupPlanId?: string(name='BackupPlanId', position='Query'),
  backupPlanName?: string(name='BackupPlanName', position='Query'),
  backupPlanStatus?: string(name='BackupPlanStatus', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  region?: string(name='Region', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  resourceGroupId?: string(name='ResourceGroupId', position='Query'),
}

model DescribeBackupPlanListResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  items?: {
    backupPlanDetail?: [ 
    {
      backupGatewayId?: long(name='BackupGatewayId'),
      backupMethod?: string(name='BackupMethod'),
      backupObjects?: string(name='BackupObjects'),
      backupPeriod?: string(name='BackupPeriod'),
      backupPlanCreateTime?: long(name='BackupPlanCreateTime'),
      backupPlanId?: string(name='BackupPlanId'),
      backupPlanName?: string(name='BackupPlanName'),
      backupPlanStatus?: string(name='BackupPlanStatus'),
      backupRetentionPeriod?: int32(name='BackupRetentionPeriod'),
      backupSetDownloadDir?: string(name='BackupSetDownloadDir'),
      backupSetDownloadFullDataFormat?: string(name='BackupSetDownloadFullDataFormat'),
      backupSetDownloadGatewayId?: long(name='BackupSetDownloadGatewayId'),
      backupSetDownloadIncrementDataFormat?: string(name='BackupSetDownloadIncrementDataFormat'),
      backupSetDownloadTargetType?: string(name='BackupSetDownloadTargetType'),
      backupStartTime?: string(name='BackupStartTime'),
      backupStorageType?: string(name='BackupStorageType'),
      beginTimestampForRestore?: long(name='BeginTimestampForRestore'),
      crossAliyunId?: string(name='CrossAliyunId'),
      crossRoleName?: string(name='CrossRoleName'),
      duplicationArchivePeriod?: int32(name='DuplicationArchivePeriod'),
      duplicationInfrequentAccessPeriod?: int32(name='DuplicationInfrequentAccessPeriod'),
      enableBackupLog?: boolean(name='EnableBackupLog'),
      endTimestampForRestore?: long(name='EndTimestampForRestore'),
      errMessage?: string(name='ErrMessage'),
      instanceClass?: string(name='InstanceClass'),
      OSSBucketName?: string(name='OSSBucketName'),
      OSSBucketRegion?: string(name='OSSBucketRegion'),
      openBackupSetAutoDownload?: boolean(name='OpenBackupSetAutoDownload'),
      resourceGroupId?: string(name='ResourceGroupId'),
      sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName'),
      sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID'),
      sourceEndpointInstanceType?: string(name='SourceEndpointInstanceType'),
      sourceEndpointIpPort?: string(name='SourceEndpointIpPort'),
      sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID'),
      sourceEndpointRegion?: string(name='SourceEndpointRegion'),
      sourceEndpointUserName?: string(name='SourceEndpointUserName'),
    }
  ](name='BackupPlanDetail')
  }(name='Items'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalElements?: int32(name='TotalElements'),
  totalPages?: int32(name='TotalPages'),
}

model DescribeBackupPlanListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupPlanListResponseBody(name='body'),
}

async function describeBackupPlanList(request: DescribeBackupPlanListRequest): DescribeBackupPlanListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupPlanList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeBackupSetDownloadTaskListRequest {
  backupPlanId?: string(name='BackupPlanId', position='Query'),
  backupSetDownloadTaskId?: string(name='BackupSetDownloadTaskId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeBackupSetDownloadTaskListResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  items?: {
    backupSetDownloadTaskDetail?: [ 
    {
      backupGatewayId?: long(name='BackupGatewayId'),
      backupPlanId?: string(name='BackupPlanId'),
      backupSetCode?: string(name='BackupSetCode'),
      backupSetDataFormat?: string(name='BackupSetDataFormat'),
      backupSetDataSize?: long(name='BackupSetDataSize'),
      backupSetDbType?: string(name='BackupSetDbType'),
      backupSetDownloadCreateTime?: long(name='BackupSetDownloadCreateTime'),
      backupSetDownloadDir?: string(name='BackupSetDownloadDir'),
      backupSetDownloadFinishTime?: long(name='BackupSetDownloadFinishTime'),
      backupSetDownloadInternetUrl?: string(name='BackupSetDownloadInternetUrl'),
      backupSetDownloadIntranetUrl?: string(name='BackupSetDownloadIntranetUrl'),
      backupSetDownloadStatus?: string(name='BackupSetDownloadStatus'),
      backupSetDownloadTargetType?: string(name='BackupSetDownloadTargetType'),
      backupSetDownloadTaskId?: string(name='BackupSetDownloadTaskId'),
      backupSetDownloadTaskName?: string(name='BackupSetDownloadTaskName'),
      backupSetDownloadWay?: string(name='BackupSetDownloadWay'),
      backupSetId?: string(name='BackupSetId'),
      backupSetJobType?: string(name='BackupSetJobType'),
      errMessage?: string(name='ErrMessage'),
    }
  ](name='BackupSetDownloadTaskDetail')
  }(name='Items'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalElements?: int32(name='TotalElements'),
  totalPages?: int32(name='TotalPages'),
}

model DescribeBackupSetDownloadTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBackupSetDownloadTaskListResponseBody(name='body'),
}

async function describeBackupSetDownloadTaskList(request: DescribeBackupSetDownloadTaskListRequest): DescribeBackupSetDownloadTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeBackupSetDownloadTaskList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDLAServiceRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeDLAServiceResponseBody = {
  autoAdd?: boolean(name='AutoAdd'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  haveJobFailed?: boolean(name='HaveJobFailed'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  state?: string(name='State'),
  success?: boolean(name='Success'),
}

model DescribeDLAServiceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDLAServiceResponseBody(name='body'),
}

async function describeDLAService(request: DescribeDLAServiceRequest): DescribeDLAServiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDLAService', 'POST', '/', 'json', false, 'json', request);
}

model DescribeFullBackupListRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  backupSetId?: string(name='BackupSetId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  endTimestamp?: long(name='EndTimestamp', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  showStorageType?: boolean(name='ShowStorageType', position='Query'),
  startTimestamp?: long(name='StartTimestamp', position='Query'),
}

model DescribeFullBackupListResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  items?: {
    fullBackupFile?: [ 
    {
      backupObjects?: string(name='BackupObjects'),
      backupSetExpiredTime?: long(name='BackupSetExpiredTime'),
      backupSetId?: string(name='BackupSetId'),
      backupSize?: long(name='BackupSize'),
      backupStatus?: string(name='BackupStatus'),
      createTime?: long(name='CreateTime'),
      endTime?: long(name='EndTime'),
      errMessage?: string(name='ErrMessage'),
      finishTime?: long(name='FinishTime'),
      sourceEndpointIpPort?: string(name='SourceEndpointIpPort'),
      startTime?: long(name='StartTime'),
      storageMethod?: string(name='StorageMethod'),
    }
  ](name='FullBackupFile')
  }(name='Items'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalElements?: int32(name='TotalElements'),
  totalPages?: int32(name='TotalPages'),
}

model DescribeFullBackupListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeFullBackupListResponseBody(name='body'),
}

async function describeFullBackupList(request: DescribeFullBackupListRequest): DescribeFullBackupListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeFullBackupList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeIncrementBackupListRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  endTimestamp?: long(name='EndTimestamp', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  showStorageType?: boolean(name='ShowStorageType', position='Query'),
  startTimestamp?: long(name='StartTimestamp', position='Query'),
}

model DescribeIncrementBackupListResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  items?: {
    incrementBackupFile?: [ 
    {
      backupSetExpiredTime?: long(name='BackupSetExpiredTime'),
      backupSetId?: string(name='BackupSetId'),
      backupSetJobId?: string(name='BackupSetJobId'),
      backupSize?: long(name='BackupSize'),
      backupStatus?: string(name='BackupStatus'),
      endTime?: long(name='EndTime'),
      sourceEndpointIpPort?: string(name='SourceEndpointIpPort'),
      startTime?: long(name='StartTime'),
      storageMethod?: string(name='StorageMethod'),
    }
  ](name='IncrementBackupFile')
  }(name='Items'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalElements?: int32(name='TotalElements'),
  totalPages?: int32(name='TotalPages'),
}

model DescribeIncrementBackupListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeIncrementBackupListResponseBody(name='body'),
}

async function describeIncrementBackupList(request: DescribeIncrementBackupListRequest): DescribeIncrementBackupListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeIncrementBackupList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeJobErrorCodeRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  language?: string(name='Language', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  taskId: string(name='TaskId', position='Query'),
}

model DescribeJobErrorCodeResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  item?: {
    errorCode?: string(name='ErrorCode'),
    errorMessage?: string(name='ErrorMessage'),
    jobId?: string(name='JobId'),
    jobState?: string(name='JobState'),
    jobType?: string(name='JobType'),
    language?: string(name='Language'),
  }(name='Item'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeJobErrorCodeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeJobErrorCodeResponseBody(name='body'),
}

async function describeJobErrorCode(request: DescribeJobErrorCodeRequest): DescribeJobErrorCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeJobErrorCode', 'POST', '/', 'json', false, 'json', request);
}

model DescribeNodeCidrListRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  region: string(name='Region', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeNodeCidrListResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  internetIPs?: {
    internetIP?: [ string ](name='InternetIP')
  }(name='InternetIPs'),
  intranetIPs?: {
    intranetIP?: [ string ](name='IntranetIP')
  }(name='IntranetIPs'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeNodeCidrListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNodeCidrListResponseBody(name='body'),
}

async function describeNodeCidrList(request: DescribeNodeCidrListRequest): DescribeNodeCidrListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeNodeCidrList', 'POST', '/', 'json', false, 'json', request);
}

model DescribePreCheckProgressListRequest {
  backupPlanId?: string(name='BackupPlanId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  restoreTaskId?: string(name='RestoreTaskId', position='Query'),
}

model DescribePreCheckProgressListResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  items?: {
    preCheckProgressDetail?: [ 
    {
      bootTime?: long(name='BootTime'),
      errMsg?: string(name='ErrMsg'),
      finishTime?: long(name='FinishTime'),
      item?: string(name='Item'),
      jobId?: string(name='JobId'),
      names?: string(name='Names'),
      orderNum?: string(name='OrderNum'),
      state?: string(name='State'),
    }
  ](name='PreCheckProgressDetail')
  }(name='Items'),
  progress?: int32(name='Progress'),
  requestId?: string(name='RequestId'),
  status?: string(name='Status'),
  success?: boolean(name='Success'),
}

model DescribePreCheckProgressListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePreCheckProgressListResponseBody(name='body'),
}

async function describePreCheckProgressList(request: DescribePreCheckProgressListRequest): DescribePreCheckProgressListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePreCheckProgressList', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeRegionsResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  regions?: {
    regionCode?: [ string ](name='RegionCode')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRestoreRangeInfoRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  beginTimestampForRestore: long(name='BeginTimestampForRestore', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  endTimestampForRestore: long(name='EndTimestampForRestore', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  recentlyRestore?: boolean(name='RecentlyRestore', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DescribeRestoreRangeInfoResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  items?: {
    DBSRecoverRange?: [ 
    {
      beginTimestampForRestore?: long(name='BeginTimestampForRestore'),
      endTimestampForRestore?: long(name='EndTimestampForRestore'),
      fullBackupList?: {
        fullBackupDetail?: [ 
        {
          backupSetId?: string(name='BackupSetId'),
          endTime?: long(name='EndTime'),
          startTime?: long(name='StartTime'),
        }
      ](name='FullBackupDetail')
      }(name='FullBackupList'),
      rangeType?: string(name='RangeType'),
      sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID'),
      sourceEndpointInstanceType?: string(name='SourceEndpointInstanceType'),
    }
  ](name='DBSRecoverRange')
  }(name='Items'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeRestoreRangeInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRestoreRangeInfoResponseBody(name='body'),
}

async function describeRestoreRangeInfo(request: DescribeRestoreRangeInfoRequest): DescribeRestoreRangeInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRestoreRangeInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRestoreTaskListRequest {
  backupPlanId?: string(name='BackupPlanId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  endTimestamp?: long(name='EndTimestamp', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  restoreTaskId?: string(name='RestoreTaskId', position='Query'),
  startTimestamp?: long(name='StartTimestamp', position='Query'),
}

model DescribeRestoreTaskListResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  items?: {
    restoreTaskDetail?: [ 
    {
      backupGatewayId?: long(name='BackupGatewayId'),
      backupPlanId?: string(name='BackupPlanId'),
      backupSetId?: string(name='BackupSetId'),
      continuousRestoreProgress?: int32(name='ContinuousRestoreProgress'),
      crossAliyunId?: string(name='CrossAliyunId'),
      crossRoleName?: string(name='CrossRoleName'),
      destinationEndpointDatabaseName?: string(name='DestinationEndpointDatabaseName'),
      destinationEndpointInstanceID?: string(name='DestinationEndpointInstanceID'),
      destinationEndpointInstanceType?: string(name='DestinationEndpointInstanceType'),
      destinationEndpointIpPort?: string(name='DestinationEndpointIpPort'),
      destinationEndpointOracleSID?: string(name='DestinationEndpointOracleSID'),
      destinationEndpointRegion?: string(name='DestinationEndpointRegion'),
      destinationEndpointUserName?: string(name='DestinationEndpointUserName'),
      errMessage?: string(name='ErrMessage'),
      fullDataRestoreProgress?: int32(name='FullDataRestoreProgress'),
      fullStruAfterRestoreProgress?: int32(name='FullStruAfterRestoreProgress'),
      fullStruforeRestoreProgress?: int32(name='FullStruforeRestoreProgress'),
      restoreDir?: string(name='RestoreDir'),
      restoreObjects?: string(name='RestoreObjects'),
      restoreStatus?: string(name='RestoreStatus'),
      restoreTaskCreateTime?: long(name='RestoreTaskCreateTime'),
      restoreTaskFinishTime?: long(name='RestoreTaskFinishTime'),
      restoreTaskId?: string(name='RestoreTaskId'),
      restoreTaskName?: string(name='RestoreTaskName'),
      restoreTime?: long(name='RestoreTime'),
    }
  ](name='RestoreTaskDetail')
  }(name='Items'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  totalElements?: int32(name='TotalElements'),
  totalPages?: int32(name='TotalPages'),
}

model DescribeRestoreTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRestoreTaskListResponseBody(name='body'),
}

async function describeRestoreTaskList(request: DescribeRestoreTaskListRequest): DescribeRestoreTaskListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRestoreTaskList', 'POST', '/', 'json', false, 'json', request);
}

model DisableBackupLogRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model DisableBackupLogResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  needPrecheck?: boolean(name='NeedPrecheck'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DisableBackupLogResponse = {
  headers: map[string]string(name='headers'),
  body: DisableBackupLogResponseBody(name='body'),
}

async function disableBackupLog(request: DisableBackupLogRequest): DisableBackupLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DisableBackupLog', 'POST', '/', 'json', false, 'json', request);
}

model EnableBackupLogRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model EnableBackupLogResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  needPrecheck?: boolean(name='NeedPrecheck'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableBackupLogResponse = {
  headers: map[string]string(name='headers'),
  body: EnableBackupLogResponseBody(name='body'),
}

async function enableBackupLog(request: EnableBackupLogRequest): EnableBackupLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableBackupLog', 'POST', '/', 'json', false, 'json', request);
}

model GetDBListFromAgentRequest {
  backupGatewayId?: long(name='BackupGatewayId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion', position='Query'),
  taskId?: long(name='TaskId', position='Query'),
}

model GetDBListFromAgentResponseBody = {
  dbList?: {
    dbName?: [ string ](name='dbName')
  }(name='DbList'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetDBListFromAgentResponse = {
  headers: map[string]string(name='headers'),
  body: GetDBListFromAgentResponseBody(name='body'),
}

async function getDBListFromAgent(request: GetDBListFromAgentRequest): GetDBListFromAgentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetDBListFromAgent', 'POST', '/', 'json', false, 'json', request);
}

model InitializeDbsServiceLinkedRoleRequest {
}

model InitializeDbsServiceLinkedRoleResponseBody = {
  data?: string(name='Data'),
  errMessage?: string(name='ErrMessage'),
  errorCode?: string(name='ErrorCode'),
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
}

model InitializeDbsServiceLinkedRoleResponse = {
  headers: map[string]string(name='headers'),
  body: InitializeDbsServiceLinkedRoleResponseBody(name='body'),
}

async function initializeDbsServiceLinkedRole(request: InitializeDbsServiceLinkedRoleRequest): InitializeDbsServiceLinkedRoleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InitializeDbsServiceLinkedRole', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupObjectsRequest {
  backupObjects: string(name='BackupObjects', position='Query'),
  backupPlanId: string(name='BackupPlanId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ModifyBackupObjectsResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  needPrecheck?: boolean(name='NeedPrecheck'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyBackupObjectsResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupObjectsResponseBody(name='body'),
}

async function modifyBackupObjects(request: ModifyBackupObjectsRequest): ModifyBackupObjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupObjects', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupPlanNameRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  backupPlanName: string(name='BackupPlanName', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ModifyBackupPlanNameResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyBackupPlanNameResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupPlanNameResponseBody(name='body'),
}

async function modifyBackupPlanName(request: ModifyBackupPlanNameRequest): ModifyBackupPlanNameResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupPlanName', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupSetDownloadRulesRequest {
  backupGatewayId?: long(name='BackupGatewayId', position='Query'),
  backupPlanId: string(name='BackupPlanId', position='Query'),
  backupSetDownloadDir?: string(name='BackupSetDownloadDir', position='Query'),
  backupSetDownloadTargetType?: string(name='BackupSetDownloadTargetType', position='Query'),
  backupSetDownloadTargetTypeLocation?: string(name='BackupSetDownloadTargetTypeLocation', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  fullDataFormat?: string(name='FullDataFormat', position='Query'),
  incrementDataFormat?: string(name='IncrementDataFormat', position='Query'),
  openAutoDownload?: boolean(name='OpenAutoDownload', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ModifyBackupSetDownloadRulesResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyBackupSetDownloadRulesResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupSetDownloadRulesResponseBody(name='body'),
}

async function modifyBackupSetDownloadRules(request: ModifyBackupSetDownloadRulesRequest): ModifyBackupSetDownloadRulesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupSetDownloadRules', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupSourceEndpointRequest {
  backupGatewayId?: long(name='BackupGatewayId', position='Query'),
  backupObjects?: string(name='BackupObjects', position='Query'),
  backupPlanId: string(name='BackupPlanId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  crossAliyunId?: string(name='CrossAliyunId', position='Query'),
  crossRoleName?: string(name='CrossRoleName', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  sourceEndpointDatabaseName?: string(name='SourceEndpointDatabaseName', position='Query'),
  sourceEndpointIP?: string(name='SourceEndpointIP', position='Query'),
  sourceEndpointInstanceID?: string(name='SourceEndpointInstanceID', position='Query'),
  sourceEndpointInstanceType: string(name='SourceEndpointInstanceType', position='Query'),
  sourceEndpointOracleSID?: string(name='SourceEndpointOracleSID', position='Query'),
  sourceEndpointPassword?: string(name='SourceEndpointPassword', position='Query'),
  sourceEndpointPort?: int32(name='SourceEndpointPort', position='Query'),
  sourceEndpointRegion?: string(name='SourceEndpointRegion', position='Query'),
  sourceEndpointUserName?: string(name='SourceEndpointUserName', position='Query'),
}

model ModifyBackupSourceEndpointResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  needPrecheck?: boolean(name='NeedPrecheck'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyBackupSourceEndpointResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupSourceEndpointResponseBody(name='body'),
}

async function modifyBackupSourceEndpoint(request: ModifyBackupSourceEndpointRequest): ModifyBackupSourceEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupSourceEndpoint', 'POST', '/', 'json', false, 'json', request);
}

model ModifyBackupStrategyRequest {
  backupLogIntervalSeconds?: int32(name='BackupLogIntervalSeconds', position='Query'),
  backupPeriod: string(name='BackupPeriod', position='Query'),
  backupPlanId: string(name='BackupPlanId', position='Query'),
  backupStartTime?: string(name='BackupStartTime', position='Query'),
  backupStrategyType?: string(name='BackupStrategyType', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ModifyBackupStrategyResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  needPrecheck?: boolean(name='NeedPrecheck'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyBackupStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyBackupStrategyResponseBody(name='body'),
}

async function modifyBackupStrategy(request: ModifyBackupStrategyRequest): ModifyBackupStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyBackupStrategy', 'POST', '/', 'json', false, 'json', request);
}

model ModifyStorageStrategyRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  backupRetentionPeriod: int32(name='BackupRetentionPeriod', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  duplicationArchivePeriod: int32(name='DuplicationArchivePeriod', position='Query'),
  duplicationInfrequentAccessPeriod: int32(name='DuplicationInfrequentAccessPeriod', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ModifyStorageStrategyResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  needPrecheck?: boolean(name='NeedPrecheck'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyStorageStrategyResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyStorageStrategyResponseBody(name='body'),
}

async function modifyStorageStrategy(request: ModifyStorageStrategyRequest): ModifyStorageStrategyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyStorageStrategy', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseBackupPlanRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model ReleaseBackupPlanResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReleaseBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseBackupPlanResponseBody(name='body'),
}

async function releaseBackupPlan(request: ReleaseBackupPlanRequest): ReleaseBackupPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseBackupPlan', 'POST', '/', 'json', false, 'json', request);
}

model RenewBackupPlanRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  period: string(name='Period', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  usedTime: int32(name='UsedTime', position='Query'),
}

model RenewBackupPlanResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RenewBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: RenewBackupPlanResponseBody(name='body'),
}

async function renewBackupPlan(request: RenewBackupPlanRequest): RenewBackupPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewBackupPlan', 'POST', '/', 'json', false, 'json', request);
}

model StartBackupPlanRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model StartBackupPlanResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  createdFullBackupsetId?: string(name='CreatedFullBackupsetId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StartBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: StartBackupPlanResponseBody(name='body'),
}

async function startBackupPlan(request: StartBackupPlanRequest): StartBackupPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartBackupPlan', 'POST', '/', 'json', false, 'json', request);
}

model StartRestoreTaskRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  restoreTaskId: string(name='RestoreTaskId', position='Query'),
}

model StartRestoreTaskResponseBody = {
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  restoreTaskId?: string(name='RestoreTaskId'),
  success?: boolean(name='Success'),
}

model StartRestoreTaskResponse = {
  headers: map[string]string(name='headers'),
  body: StartRestoreTaskResponseBody(name='body'),
}

async function startRestoreTask(request: StartRestoreTaskRequest): StartRestoreTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartRestoreTask', 'POST', '/', 'json', false, 'json', request);
}

model StopBackupPlanRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
  stopMethod: string(name='StopMethod', position='Query'),
}

model StopBackupPlanResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model StopBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: StopBackupPlanResponseBody(name='body'),
}

async function stopBackupPlan(request: StopBackupPlanRequest): StopBackupPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StopBackupPlan', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeBackupPlanRequest {
  backupPlanId: string(name='BackupPlanId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  instanceClass: string(name='InstanceClass', position='Query'),
  ownerId?: string(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Host'),
}

model UpgradeBackupPlanResponseBody = {
  backupPlanId?: string(name='BackupPlanId'),
  errCode?: string(name='ErrCode'),
  errMessage?: string(name='ErrMessage'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpgradeBackupPlanResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeBackupPlanResponseBody(name='body'),
}

async function upgradeBackupPlan(request: UpgradeBackupPlanRequest): UpgradeBackupPlanResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeBackupPlan', 'POST', '/', 'json', false, 'json', request);
}

