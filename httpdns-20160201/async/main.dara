/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Httpdns';
  @version = '2016-02-01';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddDomainRequest {
  accountId?: string(name='AccountId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
}

model AddDomainResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
}

model AddDomainResponse = {
  headers: map[string]string(name='headers'),
  body: AddDomainResponseBody(name='body'),
}

async function addDomain(request: AddDomainRequest): AddDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddDomain', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDomainRequest {
  accountId?: string(name='AccountId', position='Query'),
  domainName: string(name='DomainName', position='Query'),
}

model DeleteDomainResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDomain', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDomainsRequest {
  accountId?: string(name='AccountId', position='Query'),
  pageNumber?: long(name='PageNumber', minimum=1, position='Query'),
  pageSize?: long(name='PageSize', minimum=1, maximum=100, position='Query'),
}

model DescribeDomainsResponseBody = {
  domains?: {
    domain?: [ 
    {
      domainName?: string(name='DomainName'),
    }
  ](name='Domain')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDomainsResponseBody(name='body'),
}

async function describeDomains(request: DescribeDomainsRequest): DescribeDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDomains', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountInfoRequest {
}

model GetAccountInfoResponseBody = {
  accountInfo?: {
    accountId?: string(name='AccountId'),
    monthFreeCount?: int32(name='MonthFreeCount'),
    monthHttpsResolveCount?: int32(name='MonthHttpsResolveCount'),
    monthResolveCount?: int32(name='MonthResolveCount'),
    signSecret?: string(name='SignSecret'),
    signedCount?: long(name='SignedCount'),
    unsignedCount?: long(name='UnsignedCount'),
    unsignedEnabled?: boolean(name='UnsignedEnabled'),
  }(name='AccountInfo'),
  requestId?: string(name='RequestId'),
}

model GetAccountInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountInfoResponseBody(name='body'),
}

async function getAccountInfo(request: GetAccountInfoRequest): GetAccountInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetResolveCountSummaryRequest {
  granularity: string(name='Granularity', position='Query'),
  timeSpan: int32(name='TimeSpan', position='Query'),
}

model GetResolveCountSummaryResponseBody = {
  requestId?: string(name='RequestId'),
  resolveSummary?: {
    http?: long(name='Http'),
    http6?: long(name='Http6'),
    https?: long(name='Https'),
    https6?: long(name='Https6'),
  }(name='ResolveSummary'),
}

model GetResolveCountSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: GetResolveCountSummaryResponseBody(name='body'),
}

async function getResolveCountSummary(request: GetResolveCountSummaryRequest): GetResolveCountSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResolveCountSummary', 'POST', '/', 'json', false, 'json', request);
}

model GetResolveStatisticsRequest {
  domainName: string(name='DomainName', position='Query'),
  granularity: string(name='Granularity', position='Query'),
  protocolName?: string(name='ProtocolName', position='Query'),
  timeSpan: int32(name='TimeSpan', position='Query'),
}

model GetResolveStatisticsResponseBody = {
  dataPoints?: {
    dataPoint?: [ 
    {
      count?: int32(name='Count'),
      time?: int32(name='Time'),
    }
  ](name='DataPoint')
  }(name='DataPoints'),
  requestId?: string(name='RequestId'),
}

model GetResolveStatisticsResponse = {
  headers: map[string]string(name='headers'),
  body: GetResolveStatisticsResponseBody(name='body'),
}

async function getResolveStatistics(request: GetResolveStatisticsRequest): GetResolveStatisticsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResolveStatistics', 'POST', '/', 'json', false, 'json', request);
}

model ListDomainsRequest {
  pageNumber?: int32(name='PageNumber', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
}

model ListDomainsResponseBody = {
  domainInfos?: {
    domainInfo?: [ 
    {
      domainName?: string(name='DomainName'),
      resolved?: long(name='Resolved'),
      resolved6?: long(name='Resolved6'),
      resolvedHttps?: long(name='ResolvedHttps'),
      resolvedHttps6?: long(name='ResolvedHttps6'),
    }
  ](name='DomainInfo')
  }(name='DomainInfos'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDomainsResponse = {
  headers: map[string]string(name='headers'),
  body: ListDomainsResponseBody(name='body'),
}

async function listDomains(request: ListDomainsRequest): ListDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListDomains', 'POST', '/', 'json', false, 'json', request);
}

