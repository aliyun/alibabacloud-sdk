/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('httpdns', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddDomainRequest {
  accountId?: string(name='AccountId'),
  domainName?: string(name='DomainName'),
}

model AddDomainResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
}

model AddDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddDomainResponseBody(name='body'),
}

async function addDomainWithOptions(request: AddDomainRequest, runtime: Util.RuntimeOptions): AddDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddDomain',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addDomain(request: AddDomainRequest): AddDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return addDomainWithOptions(request, runtime);
}

model DeleteDomainRequest {
  accountId?: string(name='AccountId'),
  domainName?: string(name='DomainName'),
}

model DeleteDomainResponseBody = {
  domainName?: string(name='DomainName'),
  requestId?: string(name='RequestId'),
}

model DeleteDomainResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDomainResponseBody(name='body'),
}

async function deleteDomainWithOptions(request: DeleteDomainRequest, runtime: Util.RuntimeOptions): DeleteDomainResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDomain',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDomain(request: DeleteDomainRequest): DeleteDomainResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDomainWithOptions(request, runtime);
}

model DescribeDomainsRequest {
  accountId?: string(name='AccountId'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
}

model DescribeDomainsResponseBody = {
  domains?: {
    domain?: [ 
    {
      domainName?: string(name='DomainName'),
    }
  ](name='Domain')
  }(name='Domains'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model DescribeDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDomainsResponseBody(name='body'),
}

async function describeDomainsWithOptions(request: DescribeDomainsRequest, runtime: Util.RuntimeOptions): DescribeDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountId)) {
    query['AccountId'] = request.accountId;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDomains',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDomains(request: DescribeDomainsRequest): DescribeDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDomainsWithOptions(request, runtime);
}

model GetAccountInfoResponseBody = {
  accountInfo?: {
    accountId?: string(name='AccountId'),
    monthFreeCount?: int32(name='MonthFreeCount'),
    monthHttpsResolveCount?: int32(name='MonthHttpsResolveCount'),
    monthResolveCount?: int32(name='MonthResolveCount'),
    signSecret?: string(name='SignSecret'),
    signedCount?: long(name='SignedCount'),
    unsignedCount?: long(name='UnsignedCount'),
    unsignedEnabled?: boolean(name='UnsignedEnabled'),
  }(name='AccountInfo'),
  requestId?: string(name='RequestId'),
}

model GetAccountInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccountInfoResponseBody(name='body'),
}

async function getAccountInfoWithOptions(runtime: Util.RuntimeOptions): GetAccountInfoResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetAccountInfo',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccountInfo(): GetAccountInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountInfoWithOptions(runtime);
}

model GetResolveCountSummaryRequest {
  granularity?: string(name='Granularity'),
  timeSpan?: int32(name='TimeSpan'),
}

model GetResolveCountSummaryResponseBody = {
  requestId?: string(name='RequestId'),
  resolveSummary?: {
    http?: long(name='Http'),
    http6?: long(name='Http6'),
    https?: long(name='Https'),
    https6?: long(name='Https6'),
  }(name='ResolveSummary'),
}

model GetResolveCountSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResolveCountSummaryResponseBody(name='body'),
}

async function getResolveCountSummaryWithOptions(request: GetResolveCountSummaryRequest, runtime: Util.RuntimeOptions): GetResolveCountSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.timeSpan)) {
    query['TimeSpan'] = request.timeSpan;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResolveCountSummary',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResolveCountSummary(request: GetResolveCountSummaryRequest): GetResolveCountSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResolveCountSummaryWithOptions(request, runtime);
}

model GetResolveStatisticsRequest {
  domainName?: string(name='DomainName'),
  granularity?: string(name='Granularity'),
  protocolName?: string(name='ProtocolName'),
  timeSpan?: int32(name='TimeSpan'),
}

model GetResolveStatisticsResponseBody = {
  dataPoints?: {
    dataPoint?: [ 
    {
      count?: int32(name='Count'),
      time?: int32(name='Time'),
    }
  ](name='DataPoint')
  }(name='DataPoints'),
  requestId?: string(name='RequestId'),
}

model GetResolveStatisticsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResolveStatisticsResponseBody(name='body'),
}

async function getResolveStatisticsWithOptions(request: GetResolveStatisticsRequest, runtime: Util.RuntimeOptions): GetResolveStatisticsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.domainName)) {
    query['DomainName'] = request.domainName;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.protocolName)) {
    query['ProtocolName'] = request.protocolName;
  }
  if (!Util.isUnset(request.timeSpan)) {
    query['TimeSpan'] = request.timeSpan;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResolveStatistics',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResolveStatistics(request: GetResolveStatisticsRequest): GetResolveStatisticsResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResolveStatisticsWithOptions(request, runtime);
}

model ListDomainsRequest {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model ListDomainsResponseBody = {
  domainInfos?: {
    domainInfo?: [ 
    {
      domainName?: string(name='DomainName'),
      resolved?: long(name='Resolved'),
      resolved6?: long(name='Resolved6'),
      resolvedHttps?: long(name='ResolvedHttps'),
      resolvedHttps6?: long(name='ResolvedHttps6'),
    }
  ](name='DomainInfo')
  }(name='DomainInfos'),
  pageNumber?: long(name='PageNumber'),
  pageSize?: long(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: long(name='TotalCount'),
}

model ListDomainsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDomainsResponseBody(name='body'),
}

async function listDomainsWithOptions(request: ListDomainsRequest, runtime: Util.RuntimeOptions): ListDomainsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['PageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListDomains',
    version = '2016-02-01',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listDomains(request: ListDomainsRequest): ListDomainsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listDomainsWithOptions(request, runtime);
}

