/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'EasyGene';
  @version = '2021-03-15';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AbortRunRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  runId: string(name='RunId', description='This parameter is required.', example='run-13BeYuxc0fxO24uA75UppTiMRoQ', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model AbortRunResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
}

model AbortRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AbortRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AbortRun  AbortRunRequest
  * @return AbortRunResponse
 */
async function abortRun(request: AbortRunRequest): AbortRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AbortRun', 'POST', '/', 'json', false, 'json', request);
}

model AbortSubmissionRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  submissionId: string(name='SubmissionId', description='This parameter is required.', example='sub-13BeXWnGvrOl3MC124tazcJVKaV', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model AbortSubmissionResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='easygene.cn-beijing.aliyuncs.com'),
}

model AbortSubmissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AbortSubmissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AbortSubmission  AbortSubmissionRequest
  * @return AbortSubmissionResponse
 */
async function abortSubmission(request: AbortSubmissionRequest): AbortSubmissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AbortSubmission', 'POST', '/', 'json', false, 'json', request);
}

model CopyPublicEntityRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  dataset: string(name='Dataset', description='This parameter is required.', example='TestDataset', position='Query'),
  entityType: string(name='EntityType', description='This parameter is required.', example='sample', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model CopyPublicEntityResponseBody = {
  entityType?: string(name='EntityType', example='sample'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  workspace?: string(name='Workspace', example='test-workspace'),
}

model CopyPublicEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CopyPublicEntityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CopyPublicEntity  CopyPublicEntityRequest
  * @return CopyPublicEntityResponse
 */
async function copyPublicEntity(request: CopyPublicEntityRequest): CopyPublicEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CopyPublicEntity', 'POST', '/', 'json', false, 'json', request);
}

model CreateAppRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='TestApp', position='Query'),
  appType?: string(name='AppType', example='App', position='Query'),
  clientToken?: string(name='ClientToken', example='TestToken', position='Query'),
  configs?: [ 
    {
      content?: string(name='Content', example='{     "wgs.apply_bqsr.cpu": 4,     "wgs.apply_bqsr.disks": "local-disk 250 cloud_ssd",     "wgs.apply_bqsr.gatk_Launcher": "/usr/local/bin/gatk-4.1.4.1/gatk",     "wgs.apply_bqsr.java_opts": "\\"-XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -Xms3000m -Djava.io.tmpdir=/mnt\\"",     "wgs.apply_bqsr.memory": "8G"}'),
      path?: string(name='Path', example='./config/example.json'),
    }
  ](name='Configs', shrink='json', position='Body'),
  definition: string(name='Definition', description='This parameter is required.', example='import "./task/echo.wdl" as echo workflow wf_echo {   call echo.echo }', position='Body'),
  dependencies?: [ 
    {
      content?: string(name='Content', example='task echo {   String txt_out = "default_txt_out"   String dd_out = "default_dd_out"    command {     echo Hello > ${txt_out}     /bin/bash -c "dd if=/dev/zero of=${dd_out} bs=1M count=15"     echo "This is a test std out."   }    runtime {     cpu: "2"     memory: "4G"     autoReleaseJob: false     reserveOnFail: true     userData: "key1 value1"     disks: "local-disk 40 cloud_ssd, /home/mount/ 40 cloud_efficiency"     tag: "TestTag"   }    output {     File outTxtFile = "${txt_out}"     File outDdFile = "${dd_out}"   } }'),
      path?: string(name='Path', example='./task/echo.wdl'),
    }
  ](name='Dependencies', shrink='json', position='Body'),
  description?: string(name='Description', example='This is a test app', position='Query'),
  documentation?: string(name='Documentation', example='Example documentation content', position='Body'),
  labels?: string(name='Labels', example='{"key":"value"}', position='Query'),
  language?: string(name='Language', example='WDL', position='Query'),
  languageVersion?: string(name='LanguageVersion', example='1.0', position='Query'),
  path: string(name='Path', description='This parameter is required.', example='main.wdl', position='Query'),
  revisionComment?: string(name='RevisionComment', example='Example revision comment', position='Query'),
  revisionTag?: string(name='RevisionTag', example='ProduceVersion', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='TestWorkspace', position='Query'),
}

model CreateAppResponseBody = {
  appName?: string(name='AppName', example='TestApp'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  revision?: string(name='Revision', example='1'),
  revisionTag?: string(name='RevisionTag', example='ProduceVersion'),
  workspace?: string(name='Workspace', example='TestWorkspace'),
}

model CreateAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateApp  CreateAppRequest
  * @return CreateAppResponse
 */
async function createApp(request: CreateAppRequest): CreateAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApp', 'POST', '/', 'json', true, 'form', request);
}

model CreateEntityRequest {
  regionId?: string(name='RegionId', position='Host'),
  clientToken?: string(name='ClientToken', example='T93cy1mMDE4OTgxNGU1ZTkK', position='Query'),
  entityItems: [ 
    {
      entityData?: map[string]string(name='EntityData'),
      entityName?: string(name='EntityName', example='s1'),
    }
  ](name='EntityItems', description='This parameter is required.', shrink='json', position='Body'),
  entityType: string(name='EntityType', description='This parameter is required.', example='sample', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model CreateEntityResponseBody = {
  entityType?: string(name='EntityType', example='sample'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  workspace?: string(name='Workspace', example='test-workspace'),
}

model CreateEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateEntityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateEntity  CreateEntityRequest
  * @return CreateEntityResponse
 */
async function createEntity(request: CreateEntityRequest): CreateEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateEntity', 'POST', '/', 'json', true, 'form', request);
}

model CreateRunRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='Sentieon', position='Query'),
  appRevision?: string(name='AppRevision', example='16', minimum=0, maximum=9223372036854775807, position='Query'),
  clientToken?: string(name='ClientToken', example='MTIzNDU2P1dvcmtzcGFjZT93cy1mMDE4OTgxNGU1ZTkK', position='Query'),
  defaultRuntime?: string(name='DefaultRuntime', example='{}', position='Query'),
  description?: string(name='Description', example='test run', position='Query'),
  executeDirectory?: string(name='ExecuteDirectory', example='oss://my-bucket/exec/', position='Query'),
  executeOptions?: {
    callCaching?: boolean(name='CallCaching', example='True'),
    dataLoader?: string(name='DataLoader', example='Mount'),
    deleteIntermediateResults?: boolean(name='DeleteIntermediateResults', example='True'),
    failureMode?: string(name='FailureMode', example='NoNewCalls'),
    useRelativeOutputPaths?: boolean(name='UseRelativeOutputPaths', example='True'),
  }(name='ExecuteOptions', example='{ 	"CallCaching": true,     "FailureMode": "NoNewCalls" }', shrink='json', position='Query'),
  inputs: string(name='Inputs', description='This parameter is required.', example='{         "workflow1.task1.param1": "helloooo.txt",         "workflow1.task1.param2": "abc",         "workflow1.task2.param1": "new_helloooo.txt",         "workflow1.task2.param2": "def"     }', position='Query'),
  labels?: string(name='Labels', example='{"env": "test"}', position='Query'),
  outputFolder?: string(name='OutputFolder', example='oss://my-bucket/output/', position='Query'),
  revisionTag?: string(name='RevisionTag', example='ProduceVersion', position='Query'),
  role?: string(name='Role', example='TestRole', position='Query'),
  runName?: string(name='RunName', example='wgs_sentieon_hc_with_qc_NGPTS1900029301', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model CreateRunResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  runId?: string(name='RunId', example='run-13BeYuxc0fxO24uA75UppTiMRoQ'),
  workspace?: string(name='Workspace', example='test-workspace'),
}

model CreateRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateRun  CreateRunRequest
  * @return CreateRunResponse
 */
async function createRun(request: CreateRunRequest): CreateRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateRun', 'POST', '/', 'json', false, 'json', request);
}

model CreateSubmissionRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='TestApp', position='Query'),
  clientToken?: string(name='ClientToken', example='TestToken', position='Query'),
  defaultRuntime?: string(name='DefaultRuntime', example='{}', position='Query'),
  entityNames?: [ string ](name='EntityNames', shrink='json', position='Query'),
  entityType: string(name='EntityType', description='This parameter is required.', example='TestEntityType', position='Query'),
  executeDirectory?: string(name='ExecuteDirectory', example='oss://my-bucket/my-exe-dir/', position='Query'),
  executeOptions?: string(name='ExecuteOptions', example='{ 	        "CallCaching": false, 	        "DeleteIntermediateResults": true, 	        "FailureMode": "NoNewCalls"         }', position='Query'),
  inputs?: string(name='Inputs', example='{}', position='Query'),
  outputFolder?: string(name='OutputFolder', example='oss://my-bucket/my-output-dir/', position='Query'),
  outputs?: string(name='Outputs', example='{}', position='Query'),
  revision?: string(name='Revision', example='1', minimum=0, maximum=9223372036854775807, position='Query'),
  revisionTag?: string(name='RevisionTag', example='ProduceVersion', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='TestWorkspace', position='Query'),
}

model CreateSubmissionResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  submissionId?: string(name='SubmissionId', example='sub-13BeXWnGvrOl3MC124tazcJVKaV'),
  workspace?: string(name='Workspace', example='TestWorkspace'),
}

model CreateSubmissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSubmissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSubmission  CreateSubmissionRequest
  * @return CreateSubmissionResponse
 */
async function createSubmission(request: CreateSubmissionRequest): CreateSubmissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSubmission', 'POST', '/', 'json', false, 'json', request);
}

model CreateTemplateRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='MyApp', position='Query'),
  appRevision?: string(name='AppRevision', example='4.1.4.1-v1.0', position='Query'),
  clientToken?: string(name='ClientToken', example='GFjZT93cy1mMDE4OTgxNGU1ZTkK', position='Query'),
  description?: string(name='Description', example='This is a test template', position='Query'),
  inputsExpression: [ 
    {
      help?: string(name='Help', example='test help'),
      required: boolean(name='Required', description='This parameter is required.', example='true'),
      stepOrder?: int32(name='StepOrder', example='0'),
      taskName: string(name='TaskName', description='This parameter is required.', example='Task1'),
      variableName: string(name='VariableName', description='This parameter is required.', example='fastq1'),
      variableType: string(name='VariableType', description='This parameter is required.', example='File'),
      variableValue: string(name='VariableValue', description='This parameter is required.', example='oss://bucket/file1.fastq'),
    }
  ](name='InputsExpression', description='This parameter is required.', shrink='json', position='Body'),
  labels?: string(name='Labels', example='{"key1": "value1"}', position='Query'),
  outputsExpression: [ 
    {
      help?: string(name='Help', example='test help'),
      required: boolean(name='Required', description='This parameter is required.', example='true'),
      stepOrder?: int32(name='StepOrder', example='1'),
      taskName: string(name='TaskName', description='This parameter is required.', example='Task1'),
      variableName: string(name='VariableName', description='This parameter is required.', example='bam'),
      variableType: string(name='VariableType', description='This parameter is required.', example='File'),
      variableValue: string(name='VariableValue', description='This parameter is required.', example='oss://bucket/file.bam'),
    }
  ](name='OutputsExpression', description='This parameter is required.', shrink='json', position='Body'),
  revisionTag?: string(name='RevisionTag', example='ProduceVersion', position='Query'),
  rootEntity?: string(name='RootEntity', example='TestEntity', position='Query'),
  templateName: string(name='TemplateName', description='This parameter is required.', example='test-template', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model CreateTemplateResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  templateName?: string(name='TemplateName', example='test-template'),
  workspace?: string(name='Workspace', example='test-workspace'),
}

model CreateTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTemplate  CreateTemplateRequest
  * @return CreateTemplateResponse
 */
async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTemplate', 'POST', '/', 'json', true, 'form', request);
}

model CreateWorkspaceRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  clientToken?: string(name='ClientToken', example='TestToken', position='Query'),
  description?: string(name='Description', example='This is a test workspace', position='Query'),
  jobLifecycle?: int32(name='JobLifecycle', example='30', position='Query'),
  labels?: string(name='Labels', example='{"key":"value"}', position='Query'),
  role?: string(name='Role', example='TestRole', position='Query'),
  storage: string(name='Storage', description='This parameter is required.', example='oss://gstor-default-workspace-cn-shanghai-bae3193d/', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='TestWorkspace', position='Query'),
}

model CreateWorkspaceResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  workspace?: string(name='Workspace', example='TestWorkspace'),
}

model CreateWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateWorkspace  CreateWorkspaceRequest
  * @return CreateWorkspaceResponse
 */
async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model DeleteAppRequest {
  regionId?: string(name='RegionId', example='cn-shenzhen', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='TestApp', position='Query'),
  revision?: string(name='Revision', example='1', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='TestWorkspace', position='Query'),
}

model DeleteAppResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
}

model DeleteAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteApp  DeleteAppRequest
  * @return DeleteAppResponse
 */
async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApp', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEntityRequest {
  regionId?: string(name='RegionId', position='Host'),
  entityType: string(name='EntityType', description='This parameter is required.', example='sample', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='default-workspace', position='Query'),
}

model DeleteEntityResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
}

model DeleteEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEntityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteEntity  DeleteEntityRequest
  * @return DeleteEntityResponse
 */
async function deleteEntity(request: DeleteEntityRequest): DeleteEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEntity', 'POST', '/', 'json', false, 'json', request);
}

model DeleteEntityItemsRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  entityNames: [ string ](name='EntityNames', description='This parameter is required.', shrink='json', position='Query'),
  entityType: string(name='EntityType', description='This parameter is required.', example='sample', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model DeleteEntityItemsResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
}

model DeleteEntityItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteEntityItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteEntityItems  DeleteEntityItemsRequest
  * @return DeleteEntityItemsResponse
 */
async function deleteEntityItems(request: DeleteEntityItemsRequest): DeleteEntityItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteEntityItems', 'POST', '/', 'json', false, 'json', request);
}

model DeleteRunRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  runId: string(name='RunId', description='This parameter is required.', example='run-13BeYuxc0fxO24uA75UppTiMRoQ', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model DeleteRunResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
}

model DeleteRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteRun  DeleteRunRequest
  * @return DeleteRunResponse
 */
async function deleteRun(request: DeleteRunRequest): DeleteRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteRun', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSubmissionRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  submissionId: string(name='SubmissionId', description='This parameter is required.', example='sub-13BeXWnGvrOl3MC124tazcJVKaV', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='TestWorkspace', position='Query'),
}

model DeleteSubmissionResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
}

model DeleteSubmissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSubmissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSubmission  DeleteSubmissionRequest
  * @return DeleteSubmissionResponse
 */
async function deleteSubmission(request: DeleteSubmissionRequest): DeleteSubmissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSubmission', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTemplateRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  templateName: string(name='TemplateName', description='This parameter is required.', example='test-template', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model DeleteTemplateResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
}

model DeleteTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTemplate  DeleteTemplateRequest
  * @return DeleteTemplateResponse
 */
async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteWorkspaceRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  workspace: string(name='Workspace', description='This parameter is required.', example='MyTestWorkspace', position='Query'),
}

model DeleteWorkspaceResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
}

model DeleteWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteWorkspace  DeleteWorkspaceRequest
  * @return DeleteWorkspaceResponse
 */
async function deleteWorkspace(request: DeleteWorkspaceRequest): DeleteWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model DownloadEntityRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  entityNames?: [ string ](name='EntityNames', shrink='json', position='Query'),
  entityType: string(name='EntityType', description='This parameter is required.', example='sample', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model DownloadEntityResponseBody = {
  entityCSVFile?: string(name='EntityCSVFile', example='https://my-bucket.oss.aliyucs.com/entity.csv'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
}

model DownloadEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DownloadEntityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DownloadEntity  DownloadEntityRequest
  * @return DownloadEntityResponse
 */
async function downloadEntity(request: DownloadEntityRequest): DownloadEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DownloadEntity', 'POST', '/', 'json', false, 'json', request);
}

model GetAppRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='TestApp', position='Query'),
  revision?: string(name='Revision', example='0', position='Query'),
  revisionTag?: string(name='RevisionTag', example='TestTag', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='TestWorkspace', position='Query'),
}

model GetAppResponseBody = {
  appName?: string(name='AppName', example='MyTestApp'),
  appType?: string(name='AppType', example='App'),
  configs?: [ 
    {
      content?: string(name='Content', example='{     "wgs.apply_bqsr.cpu": 4,     "wgs.apply_bqsr.disks": "local-disk 250 cloud_ssd",     "wgs.apply_bqsr.gatk_Launcher": "/usr/local/bin/gatk-4.1.4.1/gatk",     "wgs.apply_bqsr.java_opts": "\\"-XX:GCTimeLimit=50 -XX:GCHeapFreeLimit=10 -Xms3000m -Djava.io.tmpdir=/mnt\\"",     "wgs.apply_bqsr.memory": "8G"}'),
      path?: string(name='Path', example='./config/example.json'),
    }
  ](name='Configs'),
  createTime?: string(name='CreateTime', example='2021-06-16T15:09:14.378297+08:00'),
  definition?: string(name='Definition', example='WDL content'),
  dependencies?: [ 
    {
      content?: string(name='Content', example='task echo {   String txt_out = "default_txt_out"   String dd_out = "default_dd_out"    command {     echo Hello > ${txt_out}     /bin/bash -c "dd if=/dev/zero of=${dd_out} bs=1M count=15"     echo "This is a test std out."   }    runtime {     cpu: "2"     memory: "4G"     autoReleaseJob: false     reserveOnFail: true     userData: "key1 value1"     disks: "local-disk 40 cloud_ssd, /home/mount/ 40 cloud_efficiency"     tag: "TestTag"   }    output {     File outTxtFile = "${txt_out}"     File outDdFile = "${dd_out}"   } }'),
      path?: string(name='Path', example='./task/echo.wdl'),
    }
  ](name='Dependencies'),
  description?: string(name='Description', example='This is a test app'),
  documentation?: string(name='Documentation', example='example documentation content'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  inputs?: [ 
    {
      help?: string(name='Help', example='help information'),
      required?: boolean(name='Required', example='true'),
      stepOrder?: long(name='StepOrder', example='1'),
      taskName?: string(name='TaskName', example='TestTaskName'),
      variableName?: string(name='VariableName', example='TestVariableName'),
      variableType?: string(name='VariableType', example='TestVariableType'),
      variableValue?: string(name='VariableValue', example='TestVariableValue'),
    }
  ](name='Inputs'),
  labels?: map[string]string(name='Labels'),
  language?: string(name='Language', example='WDL'),
  languageVersion?: string(name='LanguageVersion', example='1.0'),
  lastModifiedTime?: string(name='LastModifiedTime', example='2021-06-16T15:09:14.378297+08:00'),
  outputs?: [ 
    {
      help?: string(name='Help', example='Example help information'),
      required?: boolean(name='Required', example='true'),
      stepOrder?: long(name='StepOrder', example='1'),
      taskName?: string(name='TaskName', example='TestTaskName'),
      variableName?: string(name='VariableName', example='TestVariableName'),
      variableType?: string(name='VariableType', example='Int'),
      variableValue?: string(name='VariableValue', example='ExampleValue'),
    }
  ](name='Outputs'),
  path?: string(name='Path', example='main.wdl'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  revision?: string(name='Revision', example='1'),
  revisionComment?: string(name='RevisionComment', example='Example revision comment'),
  revisionTag?: string(name='RevisionTag', example='TestTag'),
  revisions?: [ 
    {
      createTime?: string(name='CreateTime', example='2021-06-16T15:09:14.378297+08:00'),
      revision?: string(name='Revision', example='1'),
      revisionComment?: string(name='RevisionComment', example='Example revision comment'),
      revisionTag?: string(name='RevisionTag', example='ProduceVersion'),
    }
  ](name='Revisions'),
  scope?: string(name='Scope', example='Public'),
  source?: string(name='Source', example='EasyGene'),
  URL?: string(name='URL', example='Example url'),
  workflowName?: string(name='WorkflowName', example='MyTestWorkflow'),
  workspace?: string(name='Workspace', example='TestWorkspace'),
}

model GetAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetApp  GetAppRequest
  * @return GetAppResponse
 */
async function getApp(request: GetAppRequest): GetAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApp', 'POST', '/', 'json', false, 'json', request);
}

model GetEntityRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  entityType: string(name='EntityType', description='This parameter is required.', example='sample', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model GetEntityResponseBody = {
  attributes?: [ string ](name='Attributes'),
  entityType?: string(name='EntityType', example='sample'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  totalCount?: int32(name='TotalCount', example='100'),
  workspace?: string(name='Workspace', example='test-workspace'),
}

model GetEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetEntityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetEntity  GetEntityRequest
  * @return GetEntityResponse
 */
async function getEntity(request: GetEntityRequest): GetEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetEntity', 'POST', '/', 'json', false, 'json', request);
}

model GetGlobalAppRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='joint-calling', position='Query'),
  appVersion?: string(name='AppVersion', example='1.0', position='Query'),
  attributes?: [ string ](name='Attributes', example='AppVersion, AppDescriptorFiles, DescriptorType, DAG, Document, Comment, Alias, NamespaceName, AppScope, AppName, AppDescription, RegionIds, Categories, Toolkit, AppVersions, AppDefaultVersion, AppFee, LastModified, Pinned, Contact, Links, AppType', shrink='json', position='Query'),
  location?: string(name='Location', example='cn-shenzhen', position='Query'),
  namespaceName: string(name='NamespaceName', description='This parameter is required.', example='sentieon', position='Query'),
}

model GetGlobalAppResponseBody = {
  appDefaultVersion?: string(name='AppDefaultVersion', example='1.0'),
  appDescription?: string(name='AppDescription', example='This is app description.'),
  appDescriptorFiles?: [ 
    {
      checksum?: string(name='Checksum'),
      content?: string(name='Content'),
      fileType?: string(name='FileType', example='PRIMARY_DESCRIPTOR（主WDL） SECONDARY_DESCRIPTOR（依赖WDL）  CONFIG（推荐的输入参数）  CONTAINERFILE（镜像制作文件）  DATA（输入参数中引用的参考文件）  OTHER（其他）'),
      path?: string(name='Path', example='./main.wdl'),
      url?: string(name='Url'),
    }
  ](name='AppDescriptorFiles'),
  appDescriptorType?: string(name='AppDescriptorType', example='WDL / CWL'),
  appFee?: string(name='AppFee', example='实际使用时，计算该应用消耗的资源费用'),
  appName?: string(name='AppName', example='joint-calling'),
  appScope?: string(name='AppScope', example='OpenAccess / Protected'),
  appType?: string(name='AppType', example='workflow'),
  appVersion?: string(name='AppVersion', example='1.2a-3'),
  appVersions?: [ 
    {
      appVersion?: string(name='AppVersion', example='1.0'),
      comment?: string(name='Comment', example='初始版本'),
      lastModified?: string(name='LastModified', example='yyyy/MM/dd HH:mm:ss'),
    }
  ](name='AppVersions'),
  categories?: [ string ](name='Categories'),
  comment?: string(name='Comment', example='初始版本'),
  contact?: string(name='Contact', example='support@sentieon.com'),
  DAG?: string(name='DAG', example='DAG'),
  document?: string(name='Document', example='The app details.'),
  hostId?: string(name='HostId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  lastModified?: string(name='LastModified', example='yyyy/MM/dd HH:mm:ss'),
  links?: [ string ](name='Links'),
  locations?: [ string ](name='Locations'),
  namespaceName?: string(name='NamespaceName', example='sentieon'),
  pinned?: boolean(name='Pinned', example='true'),
  requestId?: string(name='RequestId', example='easygene.cn-beijing.aliyuncs.com'),
  toolkit?: string(name='Toolkit', example='Sentieon'),
}

model GetGlobalAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetGlobalAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetGlobalApp  GetGlobalAppRequest
  * @return GetGlobalAppResponse
 */
async function getGlobalApp(request: GetGlobalAppRequest): GetGlobalAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetGlobalApp', 'GET', '/', 'json', false, 'json', request);
}

model GetPublicDatasetRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  attributes?: [ string ](name='Attributes', shrink='json', position='Query'),
  datasetName: string(name='DatasetName', description='This parameter is required.', example='西蒙斯基因组多样性计划', position='Query'),
}

model GetPublicDatasetResponseBody = {
  about?: string(name='About', example='This is description about dataset.'),
  accessRequirements?: string(name='AccessRequirements', example='This are dataset access requirements.'),
  copyright?: string(name='Copyright', example='This is dataset copyright.'),
  datasetDescription?: string(name='DatasetDescription', example='This is dataset description.'),
  datasetName?: string(name='DatasetName', example='西蒙斯基因组多样性计划'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  lastModified?: string(name='LastModified', example='yyyy/MM/dd HH:mm:ss'),
  locations?: [ string ](name='Locations'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  tags?: [ string ](name='Tags'),
  updateFrequency?: string(name='UpdateFrequency', example='源站更新后及时同步'),
}

model GetPublicDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPublicDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPublicDataset  GetPublicDatasetRequest
  * @return GetPublicDatasetResponse
 */
async function getPublicDataset(request: GetPublicDatasetRequest): GetPublicDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPublicDataset', 'GET', '/', 'json', false, 'json', request);
}

model GetPublicDatasetEntityRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  datasetName: string(name='DatasetName', description='This parameter is required.', example='西蒙斯基因组多样性计划', position='Query'),
  entityType: string(name='EntityType', description='This parameter is required.', example='sample', position='Query'),
  location?: string(name='Location', example='cn-shanghai', position='Query'),
}

model GetPublicDatasetEntityResponseBody = {
  attributes?: [ string ](name='Attributes'),
  datasetName?: string(name='DatasetName', example='西蒙斯基因组多样性计划'),
  entityType?: string(name='EntityType', example='sample'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model GetPublicDatasetEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPublicDatasetEntityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPublicDatasetEntity  GetPublicDatasetEntityRequest
  * @return GetPublicDatasetEntityResponse
 */
async function getPublicDatasetEntity(request: GetPublicDatasetEntityRequest): GetPublicDatasetEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPublicDatasetEntity', 'GET', '/', 'json', false, 'json', request);
}

model GetRunRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  runId: string(name='RunId', description='This parameter is required.', example='run-12kDbbqp5O9dfsH0sEdQeRclGQb', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='default-workspace', position='Query'),
}

model GetRunResponseBody = {
  appName?: string(name='AppName', example='Sentieon'),
  appRevision?: string(name='AppRevision', example='1'),
  billingInstanceIds?: [ string ](name='BillingInstanceIds'),
  calls?: string(name='Calls', example='{}'),
  createTime?: string(name='CreateTime', example='2021-06-10T13:30:20.414557061Z'),
  defaultRuntime?: string(name='DefaultRuntime', example='{}'),
  description?: string(name='Description', example='test run'),
  endTime?: string(name='EndTime', example='2021-06-10T13:36:20.405878292Z'),
  entityName?: string(name='EntityName', example='s1'),
  entityType?: string(name='EntityType', example='sample'),
  executeDirectory?: string(name='ExecuteDirectory', example='oss://my-bucket/exec/'),
  executeOptions?: {
    callCaching?: boolean(name='CallCaching', example='false'),
    dataLoader?: string(name='DataLoader'),
    deleteIntermediateResults?: boolean(name='DeleteIntermediateResults', example='false'),
    failureMode?: string(name='FailureMode', example='NoNewCalls'),
    useRelativeOutputPaths?: boolean(name='UseRelativeOutputPaths', example='false'),
  }(name='ExecuteOptions'),
  failures?: string(name='Failures', example='{}'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  inputs?: string(name='Inputs', example='{     "workflow1.task1.param1": "helloooo.txt",     "workflow1.task1.param2": "abc",     "workflow1.task2.param1": "new_helloooo.txt",     "workflow1.task2.param2": "def" }'),
  labels?: map[string]string(name='Labels'),
  outputFolder?: string(name='OutputFolder', example='oss://my-bucket/output/'),
  outputs?: string(name='Outputs', example='{         "workflow1.bam": "oss://my-bucket/test.bam",         "workflow1.vcf": "oss://my-bucket/test.vcf"     }'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  runId?: string(name='RunId', example='run-13BeYuxc0fxO24uA75UppTiMRoQ'),
  runName?: string(name='RunName', example='test-run'),
  source?: string(name='Source', example='EasyGene'),
  startTime?: string(name='StartTime', example='2021-06-10T13:30:24.414557061Z'),
  status?: string(name='Status', example='Running'),
  submissionId?: string(name='SubmissionId', example='sub-13BeXWnGvrOl3MC124tazcJVKaV'),
  timing?: string(name='Timing', example='{}'),
  user?: string(name='User', example='13579222'),
  workspace?: string(name='Workspace', example='test-workspace'),
}

model GetRunResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetRunResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetRun  GetRunRequest
  * @return GetRunResponse
 */
async function getRun(request: GetRunRequest): GetRunResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetRun', 'GET', '/', 'json', false, 'json', request);
}

model GetSubmissionRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  submissionId: string(name='SubmissionId', description='This parameter is required.', example='sub-13BeXWnGvrOl3MC124tazcJVKaV', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='TestWorkspace', position='Query'),
}

model GetSubmissionResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  submission?: {
    createTime?: string(name='CreateTime', example='2021-06-16T15:09:14.378297+08:00'),
    endTime?: string(name='EndTime', example='2021-06-16T15:09:14.378297+08:00'),
    entityType?: string(name='EntityType', example='TestEntityType'),
    runStats?: {
      aborted?: long(name='Aborted', example='5'),
      aborting?: long(name='Aborting', example='5'),
      failed?: long(name='Failed', example='5'),
      pending?: long(name='Pending', example='5'),
      running?: long(name='Running', example='5'),
      submitted?: long(name='Submitted', example='5'),
      succeeded?: long(name='Succeeded', example='5'),
    }(name='RunStats'),
    startTime?: string(name='StartTime', example='2021-06-16T15:09:14.378297+08:00'),
    status?: string(name='Status', example='Succeeded'),
    submissionId?: string(name='SubmissionId', example='sub-13BeXWnGvrOl3MC124tazcJVKaV'),
    workspace?: string(name='Workspace', example='TestWorkspace'),
  }(name='Submission'),
}

model GetSubmissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSubmissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSubmission  GetSubmissionRequest
  * @return GetSubmissionResponse
 */
async function getSubmission(request: GetSubmissionRequest): GetSubmissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSubmission', 'GET', '/', 'json', false, 'json', request);
}

model GetTemplateRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  templateName: string(name='TemplateName', description='This parameter is required.', example='test-template', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model GetTemplateResponseBody = {
  appName?: string(name='AppName', example='MyApp'),
  appRevision?: string(name='AppRevision', example='1'),
  createTime?: string(name='CreateTime', example='2021-06-10T13:30:20.414557061Z'),
  description?: string(name='Description', example='test template'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  inputsExpression?: [ 
    {
      help?: string(name='Help', example='test help'),
      required?: boolean(name='Required', example='true'),
      stepOrder?: long(name='StepOrder', example='0'),
      taskName?: string(name='TaskName', example='Task1'),
      variableName?: string(name='VariableName', example='v1'),
      variableType?: string(name='VariableType', example='File'),
      variableValue?: string(name='VariableValue', example='oss://bucket/file1.fastq'),
    }
  ](name='InputsExpression'),
  labels?: map[string]string(name='Labels'),
  lastModifiedTime?: string(name='LastModifiedTime', example='2021-06-10T13:30:20.405878292Z'),
  outputsExpression?: [ 
    {
      help?: string(name='Help'),
      required?: boolean(name='Required', example='true'),
      stepOrder?: long(name='StepOrder', example='2'),
      taskName?: string(name='TaskName', example='jobname'),
      variableName?: string(name='VariableName', example='fastq1'),
      variableType?: string(name='VariableType', example='string'),
      variableValue?: string(name='VariableValue', example='abc_1.fastq.gz'),
    }
  ](name='OutputsExpression'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  revisionTag?: string(name='RevisionTag', example='produceVersion'),
  rootEntity?: string(name='RootEntity', example='test-entity'),
  source?: string(name='Source', example='EasyGene'),
  templateName?: string(name='TemplateName', example='test-template'),
  workspace?: string(name='Workspace', example='test-workspace'),
}

model GetTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTemplate  GetTemplateRequest
  * @return GetTemplateResponse
 */
async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetWorkspaceRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  workspace: string(name='Workspace', description='This parameter is required.', example='MyTestWorkspace', position='Query'),
}

model GetWorkspaceResponseBody = {
  bucketName?: string(name='BucketName', example='my-bucket'),
  createTime?: string(name='CreateTime', example='2021-06-16T15:09:14.378297+08:00'),
  description?: string(name='Description', example='This is a test workspace'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  jobLifecycle?: int32(name='JobLifecycle', example='30'),
  labels?: map[string]string(name='Labels'),
  lastModifiedTime?: string(name='LastModifiedTime', example='2021-06-16T15:09:14.378297+08:00'),
  location?: string(name='Location', example='cn-beijing'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  role?: string(name='Role', example='TestRole'),
  status?: string(name='Status', example='Active'),
  storage?: string(name='Storage', example='oss://my-bucket/my-path/'),
  workspace?: string(name='Workspace', example='TestWorkspace'),
}

model GetWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetWorkspace  GetWorkspaceRequest
  * @return GetWorkspaceResponse
 */
async function getWorkspace(request: GetWorkspaceRequest): GetWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model ImportAppRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='fastp', position='Query'),
  source: string(name='Source', description='This parameter is required.', example='easygene:opengene/fastp', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='TestWorkspace', position='Query'),
}

model ImportAppResponseBody = {
  appName?: string(name='AppName', example='InstalledApp'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  workspace?: string(name='Workspace', example='TestWorkspace'),
}

model ImportAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ImportAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ImportApp  ImportAppRequest
  * @return ImportAppResponse
 */
async function importApp(request: ImportAppRequest): ImportAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ImportApp', 'POST', '/', 'json', false, 'json', request);
}

model InstallGlobalAppRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='joint-calling', position='Query'),
  installedAppName: string(name='InstalledAppName', description='This parameter is required.', example='joint-calling', position='Query'),
  namespaceName: string(name='NamespaceName', description='This parameter is required.', example='sentieon', position='Query'),
  source: string(name='Source', description='This parameter is required.', example='EasyGene', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='default-workspace', position='Query'),
}

model InstallGlobalAppResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  installedAppName?: string(name='InstalledAppName', example='InstalledApp'),
  regionId?: string(name='RegionId', example='cn-beijing'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  workspace?: string(name='Workspace', example='TestWorkspace'),
}

model InstallGlobalAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: InstallGlobalAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of InstallGlobalApp  InstallGlobalAppRequest
  * @return InstallGlobalAppResponse
 */
async function installGlobalApp(request: InstallGlobalAppRequest): InstallGlobalAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InstallGlobalApp', 'POST', '/', 'json', false, 'json', request);
}

model ListAppsRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  appType?: string(name='AppType', example='App', position='Query'),
  isReversed?: boolean(name='IsReversed', example='true', position='Query'),
  labelSelector?: string(name='LabelSelector', example='env=test', position='Query'),
  language?: string(name='Language', example='WDL', position='Query'),
  maxResults?: int32(name='MaxResults', example='5', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='Next Token', example='TestToken', position='Query'),
  orderBy?: string(name='OrderBy', example='createtime', position='Query'),
  scope?: string(name='Scope', example='Public', position='Query'),
  search?: string(name='Search', example='TestName', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='TestWorkspace', position='Query'),
}

model ListAppsResponseBody = {
  apps?: [ 
    {
      appDefaultVersion?: string(name='AppDefaultVersion', example='v1'),
      appName?: string(name='AppName', example='TestApp'),
      appType?: string(name='AppType', example='App'),
      createTime?: string(name='CreateTime', example='2021-06-10T13:30:20.414557061Z'),
      description?: string(name='Description', example='This is a test app'),
      labels?: map[string]string(name='Labels'),
      language?: string(name='Language', example='WDL'),
      scope?: string(name='Scope', example='Public'),
      source?: string(name='Source', example='EasyGene'),
      workspace?: string(name='Workspace', example='TestWorkspace'),
    }
  ](name='Apps'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='5'),
  nextToken?: string(name='NextToken', description='Next Token', example='TestToken'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model ListAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAppsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApps  ListAppsRequest
  * @return ListAppsResponse
 */
async function listApps(request: ListAppsRequest): ListAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApps', 'POST', '/', 'json', false, 'json', request);
}

model ListAuthorizedSoftwareRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  isReversed?: boolean(name='IsReversed', example='true', position='Query'),
  location: string(name='Location', description='This parameter is required.', example='cn-shanghai', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=2147483647, position='Query'),
  nextToken?: string(name='NextToken', example='0f2cc944-67db-4fb1-bb10-f136cda74bda', position='Query'),
  orderBy?: string(name='OrderBy', example='LastModified', position='Query'),
  search?: string(name='Search', example='Sentieon', position='Query'),
}

model ListAuthorizedSoftwareResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='ba6d88e2-a6f2-4d2c-a2ae-68b76b078445'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  softwares?: [ 
    {
      helpLink?: string(name='HelpLink', example='https://help.aliyun.com/document_detail/257750.html'),
      lastModified?: string(name='LastModified', example='yyyy/MM/dd HH:mm:ss'),
      locations?: [ string ](name='Locations'),
      promotion?: string(name='Promotion'),
      softwareDefaultVersion?: string(name='SoftwareDefaultVersion', example='201911'),
      softwareDescription?: string(name='SoftwareDescription', example='NGS数据二级分析软件，提供基于CPU的加速方案，可替代BWA，GATK，HaplotypeCaller，Mutect和Mutect2等分析流程。包括DNASeq，DNAScope，TNScope等工具'),
      softwareIcon?: string(name='SoftwareIcon', example='https://img.alicdn.com/imgextra/i2/O1CN01mmZovA1UJfeKQAYvF_!!6000000002497-2-tps-256-256.png'),
      softwareLicenseFee?: float(name='SoftwareLicenseFee', example='0.15'),
      softwareLongName?: string(name='SoftwareLongName', example='Sentieon加速软件'),
      softwareName?: string(name='SoftwareName', example='sentieon'),
      softwareVersions?: [ string ](name='SoftwareVersions'),
    }
  ](name='Softwares'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListAuthorizedSoftwareResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAuthorizedSoftwareResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListAuthorizedSoftware  ListAuthorizedSoftwareRequest
  * @return ListAuthorizedSoftwareResponse
 */
async function listAuthorizedSoftware(request: ListAuthorizedSoftwareRequest): ListAuthorizedSoftwareResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListAuthorizedSoftware', 'GET', '/', 'json', false, 'json', request);
}

model ListContainerImagesRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  location: string(name='Location', description='This parameter is required.', example='cn-shanghai', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=2147483647, position='Query'),
  nextToken?: string(name='NextToken', example='0f2cc944-67db-4fb1-bb10-f136cda74bda', position='Query'),
}

model ListContainerImagesResponseBody = {
  containerImages?: [ 
    {
      containerImageDescription?: string(name='ContainerImageDescription', example='a suite of programs for interacting with high-throughput sequencing data.'),
      containerImageName?: string(name='ContainerImageName', example='samtools'),
      containerImageNamespace?: string(name='ContainerImageNamespace', example='samtools'),
      containerImageVersions?: [ string ](name='ContainerImageVersions'),
      containerRegistry?: string(name='ContainerRegistry', example='registry-vpc.cn-shenzhen.aliyuncs.com'),
      lastModified?: string(name='LastModified', example='yyyy/MM/dd HH:mm:ss'),
      location?: string(name='Location', example='cn-shenzhen'),
    }
  ](name='ContainerImages'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='ba6d88e2-a6f2-4d2c-a2ae-68b76b078445'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListContainerImagesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListContainerImagesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListContainerImages  ListContainerImagesRequest
  * @return ListContainerImagesResponse
 */
async function listContainerImages(request: ListContainerImagesRequest): ListContainerImagesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListContainerImages', 'GET', '/', 'json', false, 'json', request);
}

model ListEntitiesRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  isReversed?: boolean(name='IsReversed', example='false', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=2147483647, position='Query'),
  nextToken?: string(name='NextToken', example='MTIzNDU2P1dvcmtzcGFjZT93cy1mMDE4OTgxNGU1ZTkK', position='Query'),
  orderBy?: string(name='OrderBy', example='createtime', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model ListEntitiesResponseBody = {
  entities?: [ 
    {
      entityType?: string(name='EntityType', example='sample'),
    }
  ](name='Entities'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='1'),
  nextToken?: string(name='NextToken', example='MTIzNDU2P1dvcmtzcGFjZT93cy1mMDE4OTgxNGU1ZTkK'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  totalCount?: int32(name='TotalCount', example='1'),
}

model ListEntitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEntitiesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEntities  ListEntitiesRequest
  * @return ListEntitiesResponse
 */
async function listEntities(request: ListEntitiesRequest): ListEntitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEntities', 'GET', '/', 'json', false, 'json', request);
}

model ListEntityItemsRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  entityType: string(name='EntityType', description='This parameter is required.', example='sample', position='Query'),
  isReversed?: boolean(name='IsReversed', example='false', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=2147483647, position='Query'),
  nextToken?: string(name='NextToken', example='MTIzNDU2P1dvcmtzcGFjZT93cy1mMDE4OTgxNGU1ZTkK', position='Query'),
  orderBy?: string(name='OrderBy', example='createtime', position='Query'),
  search?: string(name='Search', example='test', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model ListEntityItemsResponseBody = {
  entityItems?: [ 
    {
      entityData?: map[string]string(name='EntityData'),
      entityName?: string(name='EntityName', example='s1'),
    }
  ](name='EntityItems'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='MTIzNDU2P1dvcmtzcGFjZT93cy1mMDE4OTgxNGU1ZTkK'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListEntityItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEntityItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEntityItems  ListEntityItemsRequest
  * @return ListEntityItemsResponse
 */
async function listEntityItems(request: ListEntityItemsRequest): ListEntityItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListEntityItems', 'POST', '/', 'json', false, 'json', request);
}

model ListGlobalAppsRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  appScope?: string(name='AppScope', example='OpenAccess', position='Query'),
  category?: string(name='Category', example='群体变异', position='Query'),
  isReversed?: boolean(name='IsReversed', example='true', position='Query'),
  location?: string(name='Location', example='cn-shenzhen', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=2147483647, position='Query'),
  nextToken?: string(name='NextToken', example='0f2cc944-67db-4fb1-bb10-f136cda74bda', position='Query'),
  orderBy?: string(name='OrderBy', example='AppName, LastModified, Used', position='Query'),
  search?: string(name='Search', example='群体变异', position='Query'),
  toolkit?: string(name='Toolkit', example='Sentieon', position='Query'),
}

model ListGlobalAppsResponseBody = {
  globalApps?: [ 
    {
      appDefaultVersion?: string(name='AppDefaultVersion', example='1.0'),
      appDescription?: string(name='AppDescription', example='This is app description.'),
      appFee?: string(name='AppFee', example='实际使用时，计算该应用消耗的资源费用。'),
      appName?: string(name='AppName', example='joint-calling'),
      appScope?: string(name='AppScope', example='OpenAccess'),
      categories?: [ string ](name='Categories'),
      lastModified?: string(name='LastModified', example='yyyy/MM/dd HH:mm:ss'),
      locations?: [ string ](name='Locations'),
      namespaceName?: string(name='NamespaceName', example='sentieon'),
      pinned?: boolean(name='Pinned', example='true'),
      toolkit?: string(name='Toolkit', example='Sentieon'),
    }
  ](name='GlobalApps'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='ba6d88e2-a6f2-4d2c-a2ae-68b76b078445'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  totalCount?: long(name='TotalCount', example='100'),
}

model ListGlobalAppsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListGlobalAppsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListGlobalApps  ListGlobalAppsRequest
  * @return ListGlobalAppsResponse
 */
async function listGlobalApps(request: ListGlobalAppsRequest): ListGlobalAppsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListGlobalApps', 'GET', '/', 'json', false, 'json', request);
}

model ListPublicDatasetRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  isReversed?: boolean(name='IsReversed', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=2147483647, position='Query'),
  nextToken?: string(name='NextToken', example='0f2cc944-67db-4fb1-bb10-f136cda74bda', position='Query'),
  orderBy?: string(name='OrderBy', example='LastModified, DatasetName', position='Query'),
  search?: string(name='Search', example='西蒙斯基因组多样性计划', position='Query'),
  tag?: string(name='Tag', example='遗传多样性', position='Query'),
}

model ListPublicDatasetResponseBody = {
  datasets?: [ 
    {
      about?: string(name='About', example='This is description about dataset.'),
      accessRequirements?: string(name='AccessRequirements', example='This are access requirements.'),
      copyright?: string(name='Copyright', example='This is copyright.'),
      datasetDescription?: string(name='DatasetDescription', example='This are access requirements'),
      datasetId?: string(name='DatasetId'),
      datasetName?: string(name='DatasetName', example='西蒙斯基因组多样性计划'),
      lastModified?: string(name='LastModified', example='yyyy/MM/dd HH:mm:ss'),
      locations?: [ string ](name='Locations'),
      tags?: [ string ](name='Tags'),
      updateFrequency?: string(name='UpdateFrequency', example='源站更新后及时同步'),
    }
  ](name='Datasets'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='ba6d88e2-a6f2-4d2c-a2ae-68b76b078445'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListPublicDatasetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublicDatasetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPublicDataset  ListPublicDatasetRequest
  * @return ListPublicDatasetResponse
 */
async function listPublicDataset(request: ListPublicDatasetRequest): ListPublicDatasetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPublicDataset', 'GET', '/', 'json', false, 'json', request);
}

model ListPublicDatasetEntitiesRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  datasetName: string(name='DatasetName', description='This parameter is required.', example='西蒙斯基因组多样性计划', position='Query'),
  isReversed?: boolean(name='IsReversed', example='true', position='Query'),
  location?: string(name='Location', example='cn-shanghai', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=2147483647, position='Query'),
  nextToken?: string(name='NextToken', example='0f2cc944-67db-4fb1-bb10-f136cda74bda', position='Query'),
  orderBy?: string(name='OrderBy', example='LastModified', position='Query'),
}

model ListPublicDatasetEntitiesResponseBody = {
  datasetName?: string(name='DatasetName', example='西蒙斯基因组多样性计划'),
  entities?: [ 
    {
      entityType?: string(name='EntityType', example='sample'),
    }
  ](name='Entities'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='ba6d88e2-a6f2-4d2c-a2ae-68b76b078445'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListPublicDatasetEntitiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublicDatasetEntitiesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPublicDatasetEntities  ListPublicDatasetEntitiesRequest
  * @return ListPublicDatasetEntitiesResponse
 */
async function listPublicDatasetEntities(request: ListPublicDatasetEntitiesRequest): ListPublicDatasetEntitiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPublicDatasetEntities', 'GET', '/', 'json', false, 'json', request);
}

model ListPublicDatasetEntityItemsRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  datasetName: string(name='DatasetName', description='This parameter is required.', example='西蒙斯基因组多样性计划', position='Query'),
  entityType: string(name='EntityType', description='This parameter is required.', example='sample', position='Query'),
  isReversed?: boolean(name='IsReversed', example='true', position='Query'),
  location?: string(name='Location', example='cn-shanghai', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=2147483647, position='Query'),
  nextToken?: string(name='NextToken', example='0f2cc944-67db-4fb1-bb10-f136cda74bda', position='Query'),
  orderBy?: string(name='OrderBy', example='LastModified', position='Query'),
  search?: string(name='Search', example='s1', position='Query'),
}

model ListPublicDatasetEntityItemsResponseBody = {
  datasetName?: string(name='DatasetName', example='西蒙斯基因组多样性计划'),
  entityItems?: [ 
    {
      entityData?: map[string]string(name='EntityData'),
      entityName?: string(name='EntityName', example='sample'),
    }
  ](name='EntityItems'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='ba6d88e2-a6f2-4d2c-a2ae-68b76b078445'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListPublicDatasetEntityItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublicDatasetEntityItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPublicDatasetEntityItems  ListPublicDatasetEntityItemsRequest
  * @return ListPublicDatasetEntityItemsResponse
 */
async function listPublicDatasetEntityItems(request: ListPublicDatasetEntityItemsRequest): ListPublicDatasetEntityItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPublicDatasetEntityItems', 'GET', '/', 'json', false, 'json', request);
}

model ListPublicDatasetTagsRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  isReversed?: boolean(name='IsReversed', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=2147483647, position='Query'),
  nextToken?: string(name='NextToken', example='0f2cc944-67db-4fb1-bb10-f136cda74bda', position='Query'),
  orderBy?: string(name='OrderBy', example='LastModified', position='Query'),
  search?: string(name='Search', example='遗传多样性', position='Query'),
}

model ListPublicDatasetTagsResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='ba6d88e2-a6f2-4d2c-a2ae-68b76b078445'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  tags?: [ string ](name='Tags'),
  totalCount?: int32(name='TotalCount', example='100'),
}

model ListPublicDatasetTagsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPublicDatasetTagsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPublicDatasetTags  ListPublicDatasetTagsRequest
  * @return ListPublicDatasetTagsResponse
 */
async function listPublicDatasetTags(request: ListPublicDatasetTagsRequest): ListPublicDatasetTagsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPublicDatasetTags', 'GET', '/', 'json', false, 'json', request);
}

model ListRegionsRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
}

model ListRegionsResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  regions?: [ 
    {
      localName?: string(name='LocalName', example='华北2-北京'),
      regionEndpoint?: string(name='RegionEndpoint', example='easygene.cn-beijing.aliyuncs.com'),
      regionId?: string(name='RegionId', example='cn-beijing'),
    }
  ](name='Regions'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
}

model ListRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRegions  ListRegionsRequest
  * @return ListRegionsResponse
 */
async function listRegions(request: ListRegionsRequest): ListRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRegions', 'GET', '/', 'json', false, 'json', request);
}

model ListRunsRequest {
  regionId?: string(name='RegionId', example='c\\"n-beijing', position='Host'),
  appName?: string(name='AppName', example='MyApp', position='Query'),
  appRevision?: string(name='AppRevision', example='4.1.4.1-v1.0', position='Query'),
  entityName?: string(name='EntityName', example='S001', position='Query'),
  entityType?: string(name='EntityType', example='sample', position='Query'),
  getTotal?: boolean(name='GetTotal', example='false', position='Query'),
  isReversed?: boolean(name='IsReversed', example='false', position='Query'),
  labelSelector?: string(name='LabelSelector', example='env=test', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=1, maximum=2147483647, position='Query'),
  nextToken?: string(name='NextToken', example='MTIzNDU2P1dvcmtzcGFjZT93cy1mMDE4OTgxNGU1ZTkK', position='Query'),
  orderBy?: string(name='OrderBy', example='createtime', position='Query'),
  search?: string(name='Search', example='run-13BeYuxc0fxO24uA75UppTiMRoQ', position='Query'),
  status?: string(name='Status', example='Running', position='Query'),
  submissionId?: string(name='SubmissionId', example='sub-13BeXWnGvrOl3MC124tazcJVKaV', position='Query'),
  workspace?: string(name='Workspace', example='test-workspace', position='Query'),
}

model ListRunsResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='MTIzNDU2P1dvcmtzcGFjZT93cy1mMDE4OTgxNGU1ZTkK'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  runs?: [ 
    {
      appName?: string(name='AppName', example='MyApp'),
      appRevision?: string(name='AppRevision', example='1'),
      createTime?: string(name='CreateTime', example='2021-06-10T13:30:20.414557061Z'),
      defaultRuntime?: string(name='DefaultRuntime', example='{}'),
      endTime?: string(name='EndTime', example='2021-06-10T13:38:20.414557061Z'),
      entityName?: string(name='EntityName', example='s1'),
      entityType?: string(name='EntityType', example='sample'),
      executeDirectory?: string(name='ExecuteDirectory', example='oss://my-bucket/my-execdir/'),
      executeOptions?: {
        callCaching?: boolean(name='CallCaching', example='false'),
        deleteIntermediateResults?: boolean(name='DeleteIntermediateResults', example='false'),
        failureMode?: string(name='FailureMode', example='NoNewCalls'),
        useRelativeOutputPaths?: boolean(name='UseRelativeOutputPaths', example='false'),
      }(name='ExecuteOptions'),
      inputs?: string(name='Inputs', example='{     "workflow1.task1.param1": "helloooo.txt",     "workflow1.task1.param2": "abc",     "workflow1.task2.param1": "new_helloooo.txt",     "workflow1.task2.param2": "def" }'),
      labels?: map[string]string(name='Labels'),
      regionId?: string(name='RegionId', example='cn-beijing'),
      runId?: string(name='RunId', example='run-13BeYuxc0fxO24uA75UppTiMRoQ'),
      runName?: string(name='RunName', example='test-run'),
      source?: string(name='Source', example='EasyGene'),
      startTime?: string(name='StartTime', example='2021-06-10T13:31:20.414557061Z'),
      status?: string(name='Status', example='Running'),
      submissionId?: string(name='SubmissionId', example='sub-13BeXWnGvrOl3MC124tazcJVKaV'),
      workspace?: string(name='Workspace', example='test-workspace'),
    }
  ](name='Runs'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListRunsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRunsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListRuns  ListRunsRequest
  * @return ListRunsResponse
 */
async function listRuns(request: ListRunsRequest): ListRunsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListRuns', 'GET', '/', 'json', false, 'json', request);
}

model ListSubmissionsRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  isReversed?: boolean(name='IsReversed', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', example='5', minimum=1, maximum=2147483647, position='Query'),
  nextToken?: string(name='NextToken', description='Next Token', example='TestToken', position='Query'),
  orderBy?: string(name='OrderBy', example='createtime', position='Query'),
  search?: string(name='Search', example='sub-13BeXWnGvrOl3MC124tazcJVKaV', position='Query'),
  status?: string(name='Status', example='Failed', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='TestWorkspace', position='Query'),
}

model ListSubmissionsResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='5'),
  nextToken?: string(name='NextToken', example='TestToken'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  submissions?: [ 
    {
      createTime?: string(name='CreateTime', example='2021-06-16T15:09:14.378297+08:00'),
      endTime?: string(name='EndTime', example='2021-06-16T15:09:14.378297+08:00'),
      entityType?: string(name='EntityType', example='TestEntityType'),
      runStats?: {
        aborted?: long(name='Aborted', example='5'),
        aborting?: long(name='Aborting', example='5'),
        failed?: long(name='Failed', example='5'),
        pending?: long(name='Pending', example='5'),
        running?: long(name='Running', example='5'),
        submitted?: long(name='Submitted', example='5'),
        succeeded?: long(name='Succeeded', example='5'),
      }(name='RunStats'),
      startTime?: string(name='StartTime', example='2021-06-16T15:09:14.378297+08:00'),
      status?: string(name='Status', example='Succeeded'),
      submissionId?: string(name='SubmissionId', example='sub-13BeXWnGvrOl3MC124tazcJVKaV'),
      workspace?: string(name='Workspace', example='TestWorkspace'),
    }
  ](name='Submissions'),
  totalCount?: int32(name='TotalCount', example='5'),
}

model ListSubmissionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSubmissionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSubmissions  ListSubmissionsRequest
  * @return ListSubmissionsResponse
 */
async function listSubmissions(request: ListSubmissionsRequest): ListSubmissionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSubmissions', 'GET', '/', 'json', false, 'json', request);
}

model ListTemplatesRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  isReversed?: boolean(name='IsReversed', example='false', position='Query'),
  labelSelector?: string(name='LabelSelector', example='key1=value1', position='Query'),
  maxResults?: int32(name='MaxResults', example='10', minimum=0, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', example='MTIzNDU2P1dvcmtzcGFjZT93cy1mMDE4OTgxNGU1ZTkK', position='Query'),
  orderBy?: string(name='OrderBy', example='createtime', position='Query'),
  search?: string(name='Search', example='test', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model ListTemplatesResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='MTIzNDU2P1dvcmtzcGFjZT93cy1mMDE4OTgxNGU1ZTkK'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  templates?: [ 
    {
      appName?: string(name='AppName', example='my-app'),
      appRevision?: string(name='AppRevision', example='1'),
      createTime?: string(name='CreateTime', example='2021-06-10T13:30:20.414557061Z'),
      description?: string(name='Description', example='This is a test template'),
      inputsExpression?: [ 
        {
          help?: string(name='Help', example='help test'),
          required?: boolean(name='Required', example='true'),
          stepOrder?: long(name='StepOrder', example='0'),
          taskName?: string(name='TaskName', example='task1'),
          variableName?: string(name='VariableName', example='fastq1'),
          variableType?: string(name='VariableType', example='File'),
          variableValue?: string(name='VariableValue', example='oss://bucket/file1.fastq'),
        }
      ](name='InputsExpression'),
      labels?: map[string]string(name='Labels'),
      lastModifiedTime?: string(name='LastModifiedTime', example='2021-06-10T13:30:20.414557061Z'),
      outputsExpression?: [ 
        {
          help?: string(name='Help', example='help test'),
          required?: boolean(name='Required', example='true'),
          stepOrder?: long(name='StepOrder', example='1'),
          taskName?: string(name='TaskName', example='task1'),
          variableName?: string(name='VariableName', example='v1'),
          variableType?: string(name='VariableType', example='File'),
          variableValue?: string(name='VariableValue', example='oss://bucket/test.vcf'),
        }
      ](name='OutputsExpression'),
      revisionTag?: string(name='RevisionTag', example='ProduceVersion'),
      rootEntity?: string(name='RootEntity', example='test-entity'),
      templateName?: string(name='TemplateName', example='test-template'),
      workspace?: string(name='Workspace', example='test-workspace'),
    }
  ](name='Templates'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTemplates  ListTemplatesRequest
  * @return ListTemplatesResponse
 */
async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTemplates', 'POST', '/', 'json', false, 'json', request);
}

model ListUserActiveRunsRequest {
  regionId?: string(name='RegionId', position='Host'),
  maxResults?: int32(name='MaxResults', example='3', minimum=1, maximum=2147483647, position='Query'),
}

model ListUserActiveRunsResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='10'),
  nextToken?: string(name='NextToken', example='MTIzNDU2P1dvcmtzcGFjZT93cy1mMDE4OTgxNGU1ZTkK'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  runs?: [ 
    {
      appName?: string(name='AppName', example='MyApp'),
      appRevision?: string(name='AppRevision', example='1'),
      createTime?: string(name='CreateTime', example='2021-06-10T13:30:20.414557061Z'),
      defaultRuntime?: string(name='DefaultRuntime', example='{}'),
      endTime?: string(name='EndTime', example='2021-06-10T13:30:20.414557061Z'),
      entityName?: string(name='EntityName', example='s1'),
      entityType?: string(name='EntityType', example='sample'),
      executeDirectory?: string(name='ExecuteDirectory'),
      executeOptions?: {
        callCaching?: boolean(name='CallCaching', example='false'),
        deleteIntermediateResults?: boolean(name='DeleteIntermediateResults', example='false'),
        failureMode?: string(name='FailureMode', example='NoNewCalls'),
        useRelativeOutputPaths?: boolean(name='UseRelativeOutputPaths', example='false'),
      }(name='ExecuteOptions'),
      inputs?: string(name='Inputs', example='{ "workflow1.task1.param1": "helloooo.txt", "workflow1.task1.param2": "abc", "workflow1.task2.param1": "new_helloooo.txt", "workflow1.task2.param2": "def" }'),
      labels?: map[string]string(name='Labels'),
      regionId?: string(name='RegionId', example='cn-beijing'),
      runId?: string(name='RunId', example='run-13BeYuxc0fxO24uA75UppTiMRoQ'),
      runName?: string(name='RunName', example='test-run'),
      source?: string(name='Source', example='EasyGene'),
      startTime?: string(name='StartTime', example='2021-06-10T13:30:20.414557061Z'),
      status?: string(name='Status', example='Running'),
      submissionId?: string(name='SubmissionId', example='sub-13BeXWnGvrOl3MC124tazcJVKaV'),
      workspace?: string(name='Workspace', example='test-workspace'),
    }
  ](name='Runs'),
  totalCount?: int32(name='TotalCount', example='10'),
}

model ListUserActiveRunsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListUserActiveRunsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListUserActiveRuns  ListUserActiveRunsRequest
  * @return ListUserActiveRunsResponse
 */
async function listUserActiveRuns(request: ListUserActiveRunsRequest): ListUserActiveRunsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListUserActiveRuns', 'GET', '/', 'json', false, 'json', request);
}

model ListWorkspacesRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  isReversed?: boolean(name='IsReversed', example='true', position='Query'),
  labelSelector?: string(name='LabelSelector', example='env=test', position='Query'),
  maxResults?: int32(name='MaxResults', example='5', minimum=1, maximum=2147483647, position='Query'),
  nextToken?: string(name='NextToken', description='NextToken', example='TestToken', position='Query'),
  orderBy?: string(name='OrderBy', example='createtime', position='Query'),
  search?: string(name='Search', example='TestName', position='Query'),
}

model ListWorkspacesResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  maxResults?: int32(name='MaxResults', example='5'),
  nextToken?: string(name='NextToken', example='TestToken'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  totalCount?: int32(name='TotalCount', example='5'),
  workspaces?: [ 
    {
      bucketName?: string(name='BucketName', example='my-bucket'),
      createTime?: string(name='CreateTime', example='2021-06-16T15:09:14.378297+08:00'),
      description?: string(name='Description', example='This is a test workspace'),
      jobLifecycle?: int32(name='JobLifecycle', example='30'),
      labels?: map[string]string(name='Labels'),
      lastModifiedTime?: string(name='LastModifiedTime', example='2021-06-16T15:09:14.378297+08:00'),
      location?: string(name='Location', example='cn-beijing'),
      role?: string(name='Role', description='RAM Role', example='TestRole'),
      status?: string(name='Status', example='Active'),
      storage?: string(name='Storage', example='oss://my-bucket/my-path/'),
      workspace?: string(name='Workspace', example='TestWorkspace'),
    }
  ](name='Workspaces'),
}

model ListWorkspacesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListWorkspacesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListWorkspaces  ListWorkspacesRequest
  * @return ListWorkspacesResponse
 */
async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListWorkspaces', 'GET', '/', 'json', false, 'json', request);
}

model ResumeSubmissionRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  submissionId: string(name='SubmissionId', description='This parameter is required.', example='sub-13BeXWnGvrOl3MC124tazcJVKaV', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='TestWorkspace', position='Query'),
}

model ResumeSubmissionResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
}

model ResumeSubmissionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ResumeSubmissionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ResumeSubmission  ResumeSubmissionRequest
  * @return ResumeSubmissionResponse
 */
async function resumeSubmission(request: ResumeSubmissionRequest): ResumeSubmissionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ResumeSubmission', 'POST', '/', 'json', false, 'json', request);
}

model TagAppRequest {
  regionId?: string(name='RegionId', position='Host'),
  appName: string(name='AppName', description='This parameter is required.', example='TestApp', position='Query'),
  appRevision: string(name='AppRevision', description='This parameter is required.', example='1', position='Query'),
  revisionTag: string(name='RevisionTag', description='This parameter is required.', example='ProduceVersion', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='TestWorkspace', position='Query'),
}

model TagAppResponseBody = {
  appName?: string(name='AppName', example='TestApp'),
  appRevision?: string(name='AppRevision', example='1'),
  formerRevision?: string(name='FormerRevision', example='0'),
  formerTag?: string(name='FormerTag', example='TestTag'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  revisionTag?: string(name='RevisionTag', example='ProduceVersion'),
  workspace?: string(name='Workspace', example='TestWorkspace'),
}

model TagAppResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagAppResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagApp  TagAppRequest
  * @return TagAppResponse
 */
async function tagApp(request: TagAppRequest): TagAppResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagApp', 'POST', '/', 'json', false, 'json', request);
}

model UpdateEntityRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  entityItems: [ 
    {
      entityData?: map[string]string(name='EntityData'),
      entityName?: string(name='EntityName', example='s1'),
    }
  ](name='EntityItems', description='This parameter is required.', shrink='json', position='Body'),
  entityType: string(name='EntityType', description='This parameter is required.', example='sample', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model UpdateEntityResponseBody = {
  entityType?: string(name='EntityType', example='sample'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  workspace?: string(name='Workspace', example='test-workspace'),
}

model UpdateEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEntityResponseBody(name='body'),
}

/**
  * @deprecated OpenAPI UpdateEntity is deprecated, please use EasyGene::2021-03-15::UpdateEntityItems instead.  * @param request  the request parameters of UpdateEntity  UpdateEntityRequest
  * @return UpdateEntityResponse
 */
// Deprecated
async function updateEntity(request: UpdateEntityRequest): UpdateEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEntity', 'POST', '/', 'json', true, 'form', request);
}

model UpdateEntityItemsRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  entityItems: [ 
    {
      entityData?: map[string]string(name='EntityData'),
      entityName?: string(name='EntityName', example='s1'),
    }
  ](name='EntityItems', description='This parameter is required.', shrink='json', position='Body'),
  entityType: string(name='EntityType', description='This parameter is required.', example='sample', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model UpdateEntityItemsResponseBody = {
  entityType?: string(name='EntityType', example='sample'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  workspace?: string(name='Workspace', example='test-workspace'),
}

model UpdateEntityItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateEntityItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateEntityItems  UpdateEntityItemsRequest
  * @return UpdateEntityItemsResponse
 */
async function updateEntityItems(request: UpdateEntityItemsRequest): UpdateEntityItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateEntityItems', 'POST', '/', 'json', true, 'form', request);
}

model UpdateTemplateRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  description?: string(name='Description', example='This is a test template', position='Query'),
  inputsExpression: [ 
    {
      help?: string(name='Help'),
      required: boolean(name='Required', description='This parameter is required.', example='True'),
      stepOrder?: int32(name='StepOrder', example='2'),
      taskName: string(name='TaskName', description='This parameter is required.', example='Task1'),
      variableName: string(name='VariableName', description='This parameter is required.', example='fastq1'),
      variableType: string(name='VariableType', description='This parameter is required.', example='String'),
      variableValue: string(name='VariableValue', description='This parameter is required.', example='read_1.fastq.gz'),
    }
  ](name='InputsExpression', description='This parameter is required.', shrink='json', position='Body'),
  labels?: string(name='Labels', example='{"key": "value"}', position='Query'),
  outputsExpression: [ 
    {
      help?: string(name='Help'),
      required: boolean(name='Required', description='This parameter is required.', example='True'),
      stepOrder?: int32(name='StepOrder'),
      taskName: string(name='TaskName', description='This parameter is required.', example='Task1'),
      variableName: string(name='VariableName', description='This parameter is required.', example='Bam'),
      variableType: string(name='VariableType', description='This parameter is required.', example='String'),
      variableValue: string(name='VariableValue', description='This parameter is required.', example='out.bam'),
    }
  ](name='OutputsExpression', description='This parameter is required.', shrink='json', position='Body'),
  rootEntity?: string(name='RootEntity', example='test-entity', position='Query'),
  templateName: string(name='TemplateName', description='This parameter is required.', example='test-template', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model UpdateTemplateResponseBody = {
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
}

model UpdateTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTemplate  UpdateTemplateRequest
  * @return UpdateTemplateResponse
 */
async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTemplate', 'POST', '/', 'json', true, 'form', request);
}

model UpdateWorkspaceRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  description?: string(name='Description', example='This is a test workspace', position='Query'),
  jobLifecycle?: int32(name='JobLifecycle', example='30', position='Query'),
  labels?: string(name='Labels', example='{"env":"test"}', position='Query'),
  role?: string(name='Role', example='MyTestRamRole', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='MyTestWorkspace', position='Query'),
}

model UpdateWorkspaceResponseBody = {
  hostId?: string(name='HostId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  requestId?: string(name='RequestId', example='easygene.cn-beijing.aliyuncs.com'),
}

model UpdateWorkspaceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateWorkspaceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateWorkspace  UpdateWorkspaceRequest
  * @return UpdateWorkspaceResponse
 */
async function updateWorkspace(request: UpdateWorkspaceRequest): UpdateWorkspaceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateWorkspace', 'POST', '/', 'json', false, 'json', request);
}

model UploadEntityRequest {
  regionId?: string(name='RegionId', example='cn-beijing', position='Host'),
  entityCSVFile: string(name='EntityCSVFile', description='This parameter is required.', example='https://my-bucket.oss.aliyucs.com/entity.csv', position='Query'),
  workspace: string(name='Workspace', description='This parameter is required.', example='test-workspace', position='Query'),
}

model UploadEntityResponseBody = {
  entityType?: string(name='EntityType', example='sample'),
  hostId?: string(name='HostId', example='easygene.cn-beijing.aliyuncs.com'),
  requestId?: string(name='RequestId', example='DA980AD0-158F-44F3-847D-5EAB96C0EB6B'),
  workspace?: string(name='Workspace', example='test-workspace'),
}

model UploadEntityResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UploadEntityResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UploadEntity  UploadEntityRequest
  * @return UploadEntityResponse
 */
async function uploadEntity(request: UploadEntityRequest): UploadEntityResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UploadEntity', 'POST', '/', 'json', false, 'json', request);
}

