/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('easygene', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AbortRunRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  runId?: string(name='RunId', description='任务ID'),
}

model AbortRunResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model AbortRunResponse = {
  headers: map[string]string(name='headers'),
  body: AbortRunResponseBody(name='body'),
}

async function abortRunWithOptions(request: AbortRunRequest, runtime: Util.RuntimeOptions): AbortRunResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AbortRun', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function abortRun(request: AbortRunRequest): AbortRunResponse {
  var runtime = new Util.RuntimeOptions{};
  return abortRunWithOptions(request, runtime);
}

model AbortSubmissionRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  submissionId?: string(name='SubmissionId', description='投递ID'),
}

model AbortSubmissionResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model AbortSubmissionResponse = {
  headers: map[string]string(name='headers'),
  body: AbortSubmissionResponseBody(name='body'),
}

async function abortSubmissionWithOptions(request: AbortSubmissionRequest, runtime: Util.RuntimeOptions): AbortSubmissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AbortSubmission', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function abortSubmission(request: AbortSubmissionRequest): AbortSubmissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return abortSubmissionWithOptions(request, runtime);
}

model CreateAppRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  appName?: string(name='AppName', description='应用名称'),
  description?: string(name='Description', description='应用描述'),
  definition?: string(name='Definition', description='应用定义'),
  language?: string(name='Language', description='应用描述语言'),
  languageVersion?: string(name='LanguageVersion', description='应用描述语语言版本'),
  appType?: string(name='AppType', description='应用类型'),
  documentation?: string(name='Documentation', description='应用使用文档'),
  revisionComment?: string(name='RevisionComment', description='应用当前版本说明'),
  labels?: string(name='Labels', description='应用标签'),
  clientToken?: string(name='ClientToken', description='幂等Token'),
  dependencies?: [ 
    {
      path?: string(name='Path', description='依赖路径'),
      content?: string(name='Content', description='依赖内容'),
    }
  ](name='Dependencies', description='依赖应用'),
  configs?: [ 
    {
      path?: string(name='Path'),
      content?: string(name='Content'),
    }
  ](name='Configs', description='参考输入'),
  path?: string(name='Path', description='主WDL路径'),
}

model CreateAppShrinkRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  appName?: string(name='AppName', description='应用名称'),
  description?: string(name='Description', description='应用描述'),
  definition?: string(name='Definition', description='应用定义'),
  language?: string(name='Language', description='应用描述语言'),
  languageVersion?: string(name='LanguageVersion', description='应用描述语语言版本'),
  appType?: string(name='AppType', description='应用类型'),
  documentation?: string(name='Documentation', description='应用使用文档'),
  revisionComment?: string(name='RevisionComment', description='应用当前版本说明'),
  labels?: string(name='Labels', description='应用标签'),
  clientToken?: string(name='ClientToken', description='幂等Token'),
  dependenciesShrink?: string(name='Dependencies', description='依赖应用'),
  configsShrink?: string(name='Configs', description='参考输入'),
  path?: string(name='Path', description='主WDL路径'),
}

model CreateAppResponseBody = {
  workspace?: string(name='Workspace', description='工作空间'),
  appName?: string(name='AppName', description='应用名称'),
  hostId?: string(name='HostId', description='主机 ID'),
  requestId?: string(name='RequestId', description='请求 ID'),
  revision?: string(name='Revision', description='应用版本号'),
}

model CreateAppResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAppResponseBody(name='body'),
}

async function createAppWithOptions(tmpReq: CreateAppRequest, runtime: Util.RuntimeOptions): CreateAppResponse {
  Util.validateModel(tmpReq);
  var request = new CreateAppShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dependencies)) {
    request.dependenciesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dependencies, 'Dependencies', 'json');
  }
  if (!Util.isUnset(tmpReq.configs)) {
    request.configsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.configs, 'Configs', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateApp', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createApp(request: CreateAppRequest): CreateAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAppWithOptions(request, runtime);
}

model CreateEntityRequest {
  workspace?: string(name='Workspace'),
  entityType?: string(name='EntityType'),
  entityItems?: [ 
    {
      entityName?: string(name='EntityName'),
      entityData?: map[string]string(name='EntityData'),
    }
  ](name='EntityItems'),
  clientToken?: string(name='ClientToken'),
}

model CreateEntityShrinkRequest {
  workspace?: string(name='Workspace'),
  entityType?: string(name='EntityType'),
  entityItemsShrink?: string(name='EntityItems'),
  clientToken?: string(name='ClientToken'),
}

model CreateEntityResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  workspace?: string(name='Workspace'),
  entityType?: string(name='EntityType'),
}

model CreateEntityResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEntityResponseBody(name='body'),
}

async function createEntityWithOptions(tmpReq: CreateEntityRequest, runtime: Util.RuntimeOptions): CreateEntityResponse {
  Util.validateModel(tmpReq);
  var request = new CreateEntityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entityItems)) {
    request.entityItemsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityItems, 'EntityItems', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEntity', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEntity(request: CreateEntityRequest): CreateEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEntityWithOptions(request, runtime);
}

model CreateRunRequest {
  workspace?: string(name='Workspace', description='工作空间名字'),
  name?: string(name='Name', description='任务名称'),
  appName?: string(name='AppName', description='应用名称'),
  revision?: string(name='Revision', description='应用版本号'),
  description?: string(name='Description', description='任务描述'),
  labels?: string(name='Labels', description='任务标签'),
  executeOptions?: string(name='ExecuteOptions', description='任务配置'),
  executeDirectory?: string(name='ExecuteDirectory', description='任务执行目录'),
  outputFolder?: string(name='OutputFolder', description='任务输出拷贝目录'),
  defaultRuntime?: string(name='DefaultRuntime', description='默认运行时'),
  inputs?: string(name='Inputs', description='任务输入'),
  clientToken?: string(name='ClientToken', description='任务幂等token'),
}

model CreateRunResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  hostId?: string(name='HostId', description='主机ID'),
  workspace?: string(name='Workspace', description='工作空间'),
  runId?: string(name='RunId', description='任务ID'),
}

model CreateRunResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRunResponseBody(name='body'),
}

async function createRunWithOptions(request: CreateRunRequest, runtime: Util.RuntimeOptions): CreateRunResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRun', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRun(request: CreateRunRequest): CreateRunResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRunWithOptions(request, runtime);
}

model CreateSubmissionRequest {
  workspace?: string(name='Workspace', description='工作空间名字'),
  appName?: string(name='AppName', description='应用名称'),
  revision?: string(name='Revision', description='应用版本号'),
  entityType?: string(name='EntityType', description='实体类型'),
  entityNames?: [ string ](name='EntityNames'),
  executeOptions?: string(name='ExecuteOptions', description='任务配置'),
  executeDirectory?: string(name='ExecuteDirectory', description='任务执行目录'),
  outputFolder?: string(name='OutputFolder', description='任务输出拷贝目录'),
  defaultRuntime?: string(name='DefaultRuntime', description='默认运行时'),
  inputs?: string(name='Inputs', description='任务输入'),
  outputs?: string(name='Outputs', description='任务输出'),
  clientToken?: string(name='ClientToken', description='任务幂等token'),
}

model CreateSubmissionShrinkRequest {
  workspace?: string(name='Workspace', description='工作空间名字'),
  appName?: string(name='AppName', description='应用名称'),
  revision?: string(name='Revision', description='应用版本号'),
  entityType?: string(name='EntityType', description='实体类型'),
  entityNamesShrink?: string(name='EntityNames'),
  executeOptions?: string(name='ExecuteOptions', description='任务配置'),
  executeDirectory?: string(name='ExecuteDirectory', description='任务执行目录'),
  outputFolder?: string(name='OutputFolder', description='任务输出拷贝目录'),
  defaultRuntime?: string(name='DefaultRuntime', description='默认运行时'),
  inputs?: string(name='Inputs', description='任务输入'),
  outputs?: string(name='Outputs', description='任务输出'),
  clientToken?: string(name='ClientToken', description='任务幂等token'),
}

model CreateSubmissionResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  hostId?: string(name='HostId', description='主机ID'),
  workspace?: string(name='Workspace', description='工作空间'),
  submissionId?: string(name='SubmissionId', description='投递ID'),
}

model CreateSubmissionResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSubmissionResponseBody(name='body'),
}

async function createSubmissionWithOptions(tmpReq: CreateSubmissionRequest, runtime: Util.RuntimeOptions): CreateSubmissionResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSubmissionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entityNames)) {
    request.entityNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityNames, 'EntityNames', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSubmission', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSubmission(request: CreateSubmissionRequest): CreateSubmissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSubmissionWithOptions(request, runtime);
}

model CreateTemplateRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  templateName?: string(name='TemplateName', description='应用模板名称'),
  description?: string(name='Description', description='应用模板描述'),
  appName?: string(name='AppName', description='应用的名称'),
  revision?: string(name='Revision', description='应用的版本'),
  rootEntity?: string(name='RootEntity', description='根实体类型'),
  inputs?: [ 
    {
      taskName?: string(name='TaskName', description='任务名称'),
      variableName?: string(name='VariableName', description='变量名'),
      variableType?: string(name='VariableType', description='变量类型'),
      variableValue?: string(name='VariableValue', description='变量值'),
      required?: boolean(name='Required', description='是否必填'),
      help?: string(name='Help', description='帮助信息'),
      stepOrder?: int32(name='StepOrder', description='步骤顺序'),
    }
  ](name='Inputs', description='应用的输入'),
  outputs?: [ 
    {
      taskName?: string(name='TaskName', description='任务名称'),
      variableName?: string(name='VariableName', description='变量名'),
      variableType?: string(name='VariableType', description='变量类型'),
      variableValue?: string(name='VariableValue', description='变量值'),
      required?: boolean(name='Required', description='是否必填'),
      help?: string(name='Help', description='帮助信息'),
      stepOrder?: int32(name='StepOrder', description='步骤顺序'),
    }
  ](name='Outputs', description='应用的输出'),
  labels?: string(name='Labels', description='应用标签'),
  clientToken?: string(name='ClientToken', description='幂等Token'),
}

model CreateTemplateShrinkRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  templateName?: string(name='TemplateName', description='应用模板名称'),
  description?: string(name='Description', description='应用模板描述'),
  appName?: string(name='AppName', description='应用的名称'),
  revision?: string(name='Revision', description='应用的版本'),
  rootEntity?: string(name='RootEntity', description='根实体类型'),
  inputsShrink?: string(name='Inputs', description='应用的输入'),
  outputsShrink?: string(name='Outputs', description='应用的输出'),
  labels?: string(name='Labels', description='应用标签'),
  clientToken?: string(name='ClientToken', description='幂等Token'),
}

model CreateTemplateResponseBody = {
  workspace?: string(name='Workspace', description='工作空间名称'),
  templateName?: string(name='TemplateName', description='应用模板名称'),
  hostId?: string(name='HostId', description='主机 ID'),
  requestId?: string(name='RequestId', description='请求 ID'),
}

model CreateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTemplateResponseBody(name='body'),
}

async function createTemplateWithOptions(tmpReq: CreateTemplateRequest, runtime: Util.RuntimeOptions): CreateTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreateTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.inputs)) {
    request.inputsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputs, 'Inputs', 'json');
  }
  if (!Util.isUnset(tmpReq.outputs)) {
    request.outputsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.outputs, 'Outputs', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTemplate', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTemplateWithOptions(request, runtime);
}

model CreateWorkspaceRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  description?: string(name='Description', description='工作空间描述'),
  clientToken?: string(name='ClientToken', description='幂等Token'),
  ossRoot?: string(name='OssRoot', description='工作空间的OSS工作路径'),
  jobLifecycle?: int32(name='JobLifecycle', description='工作空间任务生命周期'),
  role?: string(name='Role', description='工作空间内的ram角色'),
  labels?: string(name='Labels', description='工作空间标签'),
}

model CreateWorkspaceResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  workspace?: string(name='Workspace', description='创建成功的工作空间名称'),
}

model CreateWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateWorkspaceResponseBody(name='body'),
}

async function createWorkspaceWithOptions(request: CreateWorkspaceRequest, runtime: Util.RuntimeOptions): CreateWorkspaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateWorkspace', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createWorkspace(request: CreateWorkspaceRequest): CreateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createWorkspaceWithOptions(request, runtime);
}

model DeleteAppRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  appName?: string(name='AppName', description='应用名称'),
  revision?: string(name='Revision', description='应用版本'),
}

model DeleteAppResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteAppResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteAppResponseBody(name='body'),
}

async function deleteAppWithOptions(request: DeleteAppRequest, runtime: Util.RuntimeOptions): DeleteAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteApp', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteApp(request: DeleteAppRequest): DeleteAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteAppWithOptions(request, runtime);
}

model DeleteEntityItemsRequest {
  workspace?: string(name='Workspace'),
  entityType?: string(name='EntityType'),
  entityNames?: [ string ](name='EntityNames'),
}

model DeleteEntityItemsShrinkRequest {
  workspace?: string(name='Workspace'),
  entityType?: string(name='EntityType'),
  entityNamesShrink?: string(name='EntityNames'),
}

model DeleteEntityItemsResponseBody = {
  hostId?: string(name='HostId'),
  requestId?: string(name='RequestId'),
}

model DeleteEntityItemsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEntityItemsResponseBody(name='body'),
}

async function deleteEntityItemsWithOptions(tmpReq: DeleteEntityItemsRequest, runtime: Util.RuntimeOptions): DeleteEntityItemsResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteEntityItemsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entityNames)) {
    request.entityNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityNames, 'EntityNames', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteEntityItems', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteEntityItems(request: DeleteEntityItemsRequest): DeleteEntityItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEntityItemsWithOptions(request, runtime);
}

model DeleteRunRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  runId?: string(name='RunId', description='任务ID'),
}

model DeleteRunResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteRunResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRunResponseBody(name='body'),
}

async function deleteRunWithOptions(request: DeleteRunRequest, runtime: Util.RuntimeOptions): DeleteRunResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRun', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRun(request: DeleteRunRequest): DeleteRunResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRunWithOptions(request, runtime);
}

model DeleteSubmissionRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  submissionId?: string(name='SubmissionId', description='投递ID'),
}

model DeleteSubmissionResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteSubmissionResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSubmissionResponseBody(name='body'),
}

async function deleteSubmissionWithOptions(request: DeleteSubmissionRequest, runtime: Util.RuntimeOptions): DeleteSubmissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSubmission', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSubmission(request: DeleteSubmissionRequest): DeleteSubmissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSubmissionWithOptions(request, runtime);
}

model DeleteTemplateRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  templateName?: string(name='TemplateName', description='应用名称'),
}

model DeleteTemplateResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteTemplateResponseBody(name='body'),
}

async function deleteTemplateWithOptions(request: DeleteTemplateRequest, runtime: Util.RuntimeOptions): DeleteTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteTemplate', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteTemplateWithOptions(request, runtime);
}

model DeleteWorkspaceRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
}

model DeleteWorkspaceResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteWorkspaceResponseBody(name='body'),
}

async function deleteWorkspaceWithOptions(request: DeleteWorkspaceRequest, runtime: Util.RuntimeOptions): DeleteWorkspaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteWorkspace', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteWorkspace(request: DeleteWorkspaceRequest): DeleteWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteWorkspaceWithOptions(request, runtime);
}

model DownloadEntityRequest {
  workspace?: string(name='Workspace'),
  entityType?: string(name='EntityType'),
  entityNames?: [ string ](name='EntityNames'),
}

model DownloadEntityShrinkRequest {
  workspace?: string(name='Workspace'),
  entityType?: string(name='EntityType'),
  entityNamesShrink?: string(name='EntityNames'),
}

model DownloadEntityResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  entityTSVFile?: string(name='EntityTSVFile'),
}

model DownloadEntityResponse = {
  headers: map[string]string(name='headers'),
  body: DownloadEntityResponseBody(name='body'),
}

async function downloadEntityWithOptions(tmpReq: DownloadEntityRequest, runtime: Util.RuntimeOptions): DownloadEntityResponse {
  Util.validateModel(tmpReq);
  var request = new DownloadEntityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entityNames)) {
    request.entityNamesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityNames, 'EntityNames', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DownloadEntity', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function downloadEntity(request: DownloadEntityRequest): DownloadEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return downloadEntityWithOptions(request, runtime);
}

model GetAppRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  appName?: string(name='AppName', description='应用名称'),
  revision?: string(name='Revision', description='应用版本号'),
}

model GetAppResponseBody = {
  workflowName?: string(name='WorkflowName', description='工作流名称'),
  appName?: string(name='AppName', description='应用名称'),
  createTime?: string(name='CreateTime', description='创建时间'),
  definition?: string(name='Definition', description='应用定义'),
  description?: string(name='Description', description='应用简要描述'),
  documentation?: string(name='Documentation', description='应用详细文档'),
  hostId?: string(name='HostId', description='主机ID'),
  inputs?: [ 
    {
      taskName?: string(name='TaskName'),
      variableName?: string(name='VariableName'),
      variableType?: string(name='VariableType'),
      variableValue?: string(name='VariableValue'),
      required?: boolean(name='Required'),
      help?: string(name='Help'),
      stepOrder?: long(name='StepOrder'),
    }
  ](name='Inputs', description='应用输入'),
  labels?: map[string]string(name='Labels', description='应用标签'),
  language?: string(name='Language', description='应用描述语言'),
  languageVersion?: string(name='LanguageVersion', description='应用描述语言版本'),
  lastModifiedTime?: string(name='LastModifiedTime', description='应用最后修改时间'),
  outputs?: [ 
    {
      taskName?: string(name='TaskName'),
      variableName?: string(name='VariableName'),
      variableType?: string(name='VariableType'),
      variableValue?: string(name='VariableValue'),
      required?: boolean(name='Required'),
      help?: string(name='Help'),
      stepOrder?: long(name='StepOrder'),
    }
  ](name='Outputs', description='应用的输出参数'),
  requestId?: string(name='RequestId', description='请求ID'),
  revision?: string(name='Revision', description='应用版本号'),
  revisionComment?: string(name='RevisionComment', description='应用当前版本修改'),
  revisions?: [ 
    {
      createTime?: string(name='CreateTime', description='创建时间'),
      revision?: string(name='Revision', description='版本号'),
      revisionComment?: string(name='RevisionComment', description='版本描述'),
    }
  ](name='Revisions', description='应用的所有版本号'),
  scope?: string(name='Scope', description='应用可见范围'),
  URL?: string(name='URL', description='应用URL'),
  workspace?: string(name='Workspace', description='工作空间名称'),
  source?: string(name='Source', description='应用来源'),
  namespace?: string(name='Namespace', description='命名空间'),
  appOrigName?: string(name='AppOrigName', description='应用原名'),
  appType?: string(name='AppType', description='实体类型'),
  dependencies?: [ 
    {
      path?: string(name='Path', description='依赖路径'),
      content?: string(name='Content', description='wdl内容'),
    }
  ](name='Dependencies', description='依赖应用'),
  configs?: [ 
    {
      path?: string(name='Path'),
      content?: string(name='Content'),
    }
  ](name='Configs', description='参考输入'),
  path?: string(name='Path', description='主WDL路径'),
}

model GetAppResponse = {
  headers: map[string]string(name='headers'),
  body: GetAppResponseBody(name='body'),
}

async function getAppWithOptions(request: GetAppRequest, runtime: Util.RuntimeOptions): GetAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetApp', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getApp(request: GetAppRequest): GetAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAppWithOptions(request, runtime);
}

model GetEntityRequest {
  workspace?: string(name='Workspace'),
  entityType?: string(name='EntityType'),
}

model GetEntityResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  workspace?: string(name='Workspace'),
  entityType?: string(name='EntityType'),
  attributes?: [ string ](name='Attributes'),
  totalCount?: int32(name='TotalCount'),
}

model GetEntityResponse = {
  headers: map[string]string(name='headers'),
  body: GetEntityResponseBody(name='body'),
}

async function getEntityWithOptions(request: GetEntityRequest, runtime: Util.RuntimeOptions): GetEntityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetEntity', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getEntity(request: GetEntityRequest): GetEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getEntityWithOptions(request, runtime);
}

model GetGlobalAppRequest {
  attributes?: string(name='Attributes', description='查询字段信息'),
  namespaceName?: string(name='NamespaceName', description='命名空间'),
  appName?: string(name='AppName', description='应用名称'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  region?: string(name='Region', description='应用可用区域'),
}

model GetGlobalAppResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  lastModified?: string(name='LastModified', description='更新时间'),
  namespaceName?: string(name='NamespaceName', description='命名空间名称'),
  appScope?: string(name='AppScope', description='应用权限'),
  appName?: string(name='AppName', description='应用名称'),
  regionIds?: [ string ](name='RegionIds', description='应用支持的区域'),
  appVersion?: string(name='AppVersion', description='应用版本'),
  appType?: string(name='AppType', description='应用类型'),
  appFee?: string(name='AppFee', description='应用计费说明'),
  appDescription?: string(name='AppDescription', description='应用描述'),
  categories?: [ string ](name='Categories', description='应用所属分类'),
  toolkit?: string(name='Toolkit', description='应用所属工具合集'),
  contact?: string(name='Contact', description='应用联系人信息'),
  links?: [ string ](name='Links', description='应用主页信息'),
  appVersions?: [ 
    {
      appVersion?: string(name='AppVersion', description='应用版本'),
      comment?: string(name='Comment', description='版本描述'),
      lastModified?: string(name='LastModified', description='更新时间'),
    }
  ](name='AppVersions', description='应用的所有版本列表'),
  appDefaultVersion?: string(name='AppDefaultVersion', description='默认版本'),
  appDescriptorType?: string(name='AppDescriptorType', description='应用描述语言标准(WDL/CWL)'),
  appDescriptorFiles?: [ 
    {
      fileType?: string(name='FileType', description='应用文件的类型'),
      path?: string(name='Path', description='应用文件的路径，除PRIMARY_DESCRIPTOR外，其他均为相对于PRIMARY_DESCRIPTOR的相对路径'),
      content?: string(name='Content', description='应用文件内容'),
      url?: string(name='Url', description='应用文件链接'),
      checksum?: string(name='Checksum', description='应用文件内容的完整性校验码，如MD5值'),
    }
  ](name='AppDescriptorFiles', description='应用的描述文件内容'),
  document?: string(name='Document', description='应用的帮助文档'),
  comment?: string(name='Comment', description='应用的备注信息'),
  DAG?: string(name='DAG', description='应用的DAG信息'),
  dynamicMessage?: string(name='DynamicMessage'),
  code?: string(name='Code'),
  hostId?: string(name='HostId'),
  pinned?: boolean(name='Pinned', description='应用收藏置顶标记'),
}

model GetGlobalAppResponse = {
  headers: map[string]string(name='headers'),
  body: GetGlobalAppResponseBody(name='body'),
}

async function getGlobalAppWithOptions(request: GetGlobalAppRequest, runtime: Util.RuntimeOptions): GetGlobalAppResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetGlobalApp', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getGlobalApp(request: GetGlobalAppRequest): GetGlobalAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return getGlobalAppWithOptions(request, runtime);
}

model GetPublicDatasetRequest {
  datasetName?: string(name='DatasetName', description='数据集名称'),
  attributes?: [ string ](name='Attributes', description='查询的字段名'),
}

model GetPublicDatasetShrinkRequest {
  datasetName?: string(name='DatasetName', description='数据集名称'),
  attributesShrink?: string(name='Attributes', description='查询的字段名'),
}

model GetPublicDatasetResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  httpCode?: int32(name='HttpCode'),
  code?: string(name='Code', description='错误码'),
  message?: string(name='Message', description='错误消息'),
  success?: boolean(name='Success', description='是否调用成功'),
  datasetDescription?: string(name='DatasetDescription', description='公共数据集描述'),
  copyright?: string(name='Copyright', description='公共数据集版权信息'),
  accessRequirements?: string(name='AccessRequirements', description='公共数据集访问要求'),
  about?: string(name='About', description='关于公共数据集'),
  tags?: [ string ](name='Tags', description='公共数据集标签'),
  datasetName?: string(name='DatasetName', description='公共数据集名称'),
  updateFrequency?: string(name='UpdateFrequency', description='公共数据集更新频率'),
  regionIds?: [ string ](name='RegionIds', description='公共数据集可用区域'),
  lastModified?: string(name='LastModified', description='最后更新时间'),
}

model GetPublicDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: GetPublicDatasetResponseBody(name='body'),
}

async function getPublicDatasetWithOptions(tmpReq: GetPublicDatasetRequest, runtime: Util.RuntimeOptions): GetPublicDatasetResponse {
  Util.validateModel(tmpReq);
  var request = new GetPublicDatasetShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.attributes)) {
    request.attributesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.attributes, 'Attributes', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetPublicDataset', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getPublicDataset(request: GetPublicDatasetRequest): GetPublicDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPublicDatasetWithOptions(request, runtime);
}

model GetPublicDatasetEntityRequest {
  datasetName?: string(name='DatasetName', description='数据集名称'),
  entityType?: string(name='EntityType', description='实体类型'),
}

model GetPublicDatasetEntityResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  httpCode?: int32(name='HttpCode'),
  code?: string(name='Code', description='错误码'),
  message?: string(name='Message', description='错误消息'),
  datasetName?: string(name='DatasetName', description='公共数据集名称'),
  entityType?: string(name='EntityType', description='实体类型'),
  attributes?: [ string ](name='Attributes', description='实体属性名称列表'),
  totalCount?: int32(name='TotalCount', description='该类型实体总数'),
}

model GetPublicDatasetEntityResponse = {
  headers: map[string]string(name='headers'),
  body: GetPublicDatasetEntityResponseBody(name='body'),
}

async function getPublicDatasetEntityWithOptions(request: GetPublicDatasetEntityRequest, runtime: Util.RuntimeOptions): GetPublicDatasetEntityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPublicDatasetEntity', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPublicDatasetEntity(request: GetPublicDatasetEntityRequest): GetPublicDatasetEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPublicDatasetEntityWithOptions(request, runtime);
}

model GetRunRequest {
  workspace?: string(name='Workspace', description='工作空间名字'),
  runId?: string(name='RunId', description='任务ID'),
  attributes?: string(name='Attributes'),
}

model GetRunResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  hostId?: string(name='HostId', description='主机ID'),
  workspace?: string(name='Workspace', description='工作空间名字'),
  runId?: string(name='RunId', description='任务ID'),
  name?: string(name='Name', description='任务名称'),
  submissionId?: string(name='SubmissionId', description='提交ID'),
  source?: string(name='Source', description='应用来源'),
  namespace?: string(name='Namespace', description='命名空间'),
  appOrigName?: string(name='AppOrigName', description='应用原名'),
  appName?: string(name='AppName', description='应用名称'),
  revision?: string(name='Revision', description='应用版本'),
  entityType?: string(name='EntityType', description='实体类型'),
  entityName?: string(name='EntityName', description='实体对象名称'),
  user?: string(name='User', description='用户ID'),
  status?: string(name='Status', description='任务状态'),
  createTime?: string(name='CreateTime', description='提交时间'),
  startTime?: string(name='StartTime', description='开始时间'),
  endTime?: string(name='EndTime', description='结束时间'),
  executeOptions?: {
    callCaching?: boolean(name='CallCaching'),
    deleteIntermediateResults?: boolean(name='DeleteIntermediateResults'),
    failureMode?: string(name='FailureMode'),
  }(name='ExecuteOptions', description='任务配置'),
  inputs?: string(name='Inputs'),
  outputs?: string(name='Outputs'),
  labels?: map[string]string(name='Labels', description='任务标签'),
  outputFolder?: string(name='OutputFolder', description='输出拷贝目录'),
  executeDirectory?: string(name='ExecuteDirectory', description='任务执行目录'),
  defaultRuntime?: string(name='DefaultRuntime', description='默认runtime值'),
  description?: string(name='Description', description='任务描述'),
  timing?: string(name='Timing', description='时序信息'),
  calls?: string(name='Calls'),
  failures?: string(name='Failures'),
}

model GetRunResponse = {
  headers: map[string]string(name='headers'),
  body: GetRunResponseBody(name='body'),
}

async function getRunWithOptions(request: GetRunRequest, runtime: Util.RuntimeOptions): GetRunResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetRun', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getRun(request: GetRunRequest): GetRunResponse {
  var runtime = new Util.RuntimeOptions{};
  return getRunWithOptions(request, runtime);
}

model GetSubmissionRequest {
  workspace?: string(name='Workspace', description='工作空间'),
  submissionId?: string(name='SubmissionId', description='投递ID'),
}

model GetSubmissionResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  hostId?: string(name='HostId', description='主机ID'),
  submission?: {
    workspace?: string(name='Workspace', description='提交ID'),
    submissionId?: string(name='SubmissionId', description='提交ID'),
    status?: string(name='Status', description='任务状态'),
    createTime?: string(name='CreateTime', description='提交时间'),
    startTime?: string(name='StartTime', description='开始时间'),
    endTime?: string(name='EndTime', description='结束时间'),
    entityType?: string(name='EntityType', description='实体类型'),
    runStats?: {
      submitted?: long(name='Submitted'),
      pending?: long(name='Pending'),
      running?: long(name='Running'),
      succeeded?: long(name='Succeeded'),
      failed?: long(name='Failed'),
      aborting?: long(name='Aborting'),
      aborted?: long(name='Aborted'),
    }(name='RunStats'),
  }(name='Submission', description='投递列表'),
}

model GetSubmissionResponse = {
  headers: map[string]string(name='headers'),
  body: GetSubmissionResponseBody(name='body'),
}

async function getSubmissionWithOptions(request: GetSubmissionRequest, runtime: Util.RuntimeOptions): GetSubmissionResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetSubmission', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getSubmission(request: GetSubmissionRequest): GetSubmissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSubmissionWithOptions(request, runtime);
}

model GetTemplateRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  templateName?: string(name='TemplateName', description='应用模板名称'),
}

model GetTemplateResponseBody = {
  templateName?: string(name='TemplateName', description='应用模板名称'),
  createTime?: string(name='CreateTime', description='创建时间'),
  description?: string(name='Description', description='应用简要描述'),
  appName?: string(name='AppName', description='应用的名称'),
  revision?: string(name='Revision', description='应用的版本'),
  hostId?: string(name='HostId', description='主机ID'),
  inputs?: [ 
    {
      taskName?: string(name='TaskName', description='任务名称'),
      variableName?: string(name='VariableName', description='变量名称'),
      variableType?: string(name='VariableType', description='变量类型'),
      variableValue?: string(name='VariableValue', description='变量值'),
      required?: boolean(name='Required', description='是否必须参数'),
      help?: string(name='Help', description='帮助信息'),
      stepOrder?: long(name='StepOrder', description='步骤顺序'),
    }
  ](name='Inputs', description='应用输入'),
  labels?: map[string]string(name='Labels', description='应用标签'),
  lastModifiedTime?: string(name='LastModifiedTime', description='应用最后修改时间'),
  outputs?: [ 
    {
      taskName?: string(name='TaskName', description='任务名称'),
      variableName?: string(name='VariableName', description='变量名称'),
      variableType?: string(name='VariableType', description='变量类型'),
      variableValue?: string(name='VariableValue', description='变量值'),
      required?: boolean(name='Required', description='是否必须参数'),
      help?: string(name='Help', description='帮助信息'),
      stepOrder?: long(name='StepOrder', description='步骤顺序'),
    }
  ](name='Outputs', description='应用的输出参数'),
  requestId?: string(name='RequestId', description='请求ID'),
  source?: string(name='Source', description='应用来源'),
  workspace?: string(name='Workspace', description='工作空间名称'),
  rootEntity?: string(name='RootEntity', description='实体类型'),
}

model GetTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: GetTemplateResponseBody(name='body'),
}

async function getTemplateWithOptions(request: GetTemplateRequest, runtime: Util.RuntimeOptions): GetTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetTemplate', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getTemplateWithOptions(request, runtime);
}

model GetWorkspaceRequest {
  workspace?: string(name='Workspace'),
}

model GetWorkspaceResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  description?: string(name='Description', description='工作空间简要描述'),
  hostId?: string(name='HostId', description='主机ID'),
  jobLifecycle?: int32(name='JobLifecycle', description='工作空间内作业生命周期'),
  labels?: map[string]string(name='Labels', description='工作空间标签'),
  ossRoot?: string(name='OssRoot', description='工作空间内OSS上的工作路径'),
  bucketName?: string(name='BucketName', description='工作空间Bucket'),
  role?: string(name='Role', description='工作空间内默认的RAM服务角色'),
  createTime?: string(name='CreateTime', description='创建时间'),
  lastModifiedTime?: string(name='LastModifiedTime', description='最后修改时间'),
  workspace?: string(name='Workspace', description='工作空间名称'),
  status?: string(name='Status', description='工作空间状态'),
  regionId?: string(name='RegionId', description='地域ID'),
}

model GetWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: GetWorkspaceResponseBody(name='body'),
}

async function getWorkspaceWithOptions(request: GetWorkspaceRequest, runtime: Util.RuntimeOptions): GetWorkspaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetWorkspace', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getWorkspace(request: GetWorkspaceRequest): GetWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWorkspaceWithOptions(request, runtime);
}

model InstallGlobalAppRequest {
  source?: string(name='Source', description='来源'),
  namespaceName?: string(name='NamespaceName', description='命名空间名称'),
  appName?: string(name='AppName', description='应用描述'),
  workspace?: string(name='Workspace', description='工作空间'),
  installedAppName?: string(name='InstalledAppName', description='安装后应用名'),
}

model InstallGlobalAppResponseBody = {
  hostId?: string(name='HostId', description='主机 ID'),
  requestId?: string(name='RequestId', description='请求 ID'),
  installedAppName?: string(name='InstalledAppName', description='安装后应用名'),
  workspace?: string(name='Workspace', description='工作空间'),
  regionId?: string(name='RegionId', description='区域名'),
}

model InstallGlobalAppResponse = {
  headers: map[string]string(name='headers'),
  body: InstallGlobalAppResponseBody(name='body'),
}

async function installGlobalAppWithOptions(request: InstallGlobalAppRequest, runtime: Util.RuntimeOptions): InstallGlobalAppResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('InstallGlobalApp', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function installGlobalApp(request: InstallGlobalAppRequest): InstallGlobalAppResponse {
  var runtime = new Util.RuntimeOptions{};
  return installGlobalAppWithOptions(request, runtime);
}

model ListAppsRequest {
  workspace?: string(name='Workspace', description='工作空间'),
  nextToken?: string(name='NextToken', description='Next Token'),
  maxResults?: int32(name='MaxResults', description='最大返回结果数'),
  orderBy?: string(name='OrderBy', description='排序依据'),
  isReversed?: boolean(name='IsReversed', description='是否逆序'),
  labelSelector?: string(name='LabelSelector', description='Label 选择器'),
  scope?: string(name='Scope', description='应用范围'),
  language?: string(name='Language', description='应用描述语言'),
  appType?: string(name='AppType', description='应用类型'),
  name?: string(name='Name', description='按照名字匹配'),
}

model ListAppsResponseBody = {
  apps?: [ 
    {
      appName?: string(name='AppName', description='应用名称'),
      createTime?: string(name='CreateTime', description='创建时间'),
      description?: string(name='Description', description='应用描述'),
      appType?: string(name='AppType', description='应用类型'),
      language?: string(name='Language', description='应用描述语言'),
      scope?: string(name='Scope', description='应用可见范围'),
      workspace?: string(name='Workspace', description='应用所在工作空间'),
      source?: string(name='Source', description='应用来源'),
      namespace?: string(name='Namespace', description='命名空间'),
      appOrigName?: string(name='AppOrigName', description='应用原名'),
      appDefaultVersion?: string(name='AppDefaultVersion', description='默认版本'),
      labels?: map[string]string(name='Labels', description='标签'),
    }
  ](name='Apps', description='应用数组'),
  hostId?: string(name='HostId', description='主机ID'),
  maxResults?: int32(name='MaxResults', description='最大返回个数'),
  nextToken?: string(name='NextToken', description='Next Token'),
  requestId?: string(name='RequestId', description='请求ID'),
  totalCount?: int32(name='TotalCount', description='返回个数'),
}

model ListAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListAppsResponseBody(name='body'),
}

async function listAppsWithOptions(request: ListAppsRequest, runtime: Util.RuntimeOptions): ListAppsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListApps', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listApps(request: ListAppsRequest): ListAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAppsWithOptions(request, runtime);
}

model ListAuthorizedSoftwareRequest {
  region?: string(name='Region', description='区域'),
  search?: string(name='Search', description='软件名称、软件长名称中搜索的关键字'),
  orderBy?: string(name='OrderBy', description='排序字段'),
  isReversed?: boolean(name='IsReversed', description='是否反转'),
  nextToken?: string(name='NextToken', description='翻页Token'),
  maxResults?: int32(name='MaxResults', description='分页数量'),
}

model ListAuthorizedSoftwareResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  httpCode?: int32(name='HttpCode'),
  code?: string(name='Code', description='错误码'),
  message?: string(name='Message', description='错误消息'),
  success?: boolean(name='Success', description='是否调用成功'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  nextToken?: string(name='NextToken', description='翻页TOKEN'),
  maxResults?: int32(name='MaxResults', description='分页数'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
  softwares?: [ 
    {
      softwareName?: string(name='SoftwareName', description='软件名称'),
      softwareLongName?: string(name='SoftwareLongName', description='软件长名称'),
      softwareDescription?: string(name='SoftwareDescription', description='软件描述'),
      softwareDefaultVersion?: string(name='SoftwareDefaultVersion', description='软件默认版本'),
      softwareVersions?: [ string ](name='SoftwareVersions', description='软件所有版本'),
      softwareLicenseFee?: float(name='SoftwareLicenseFee', description='软件使用费用'),
      regionIds?: [ string ](name='RegionIds', description='软件可用区域'),
      helpLink?: string(name='HelpLink', description='帮助链接'),
      softwareIcon?: string(name='SoftwareIcon', description='软件图标链接'),
      lastModified?: string(name='LastModified', description='最后更新时间'),
    }
  ](name='Softwares', description='软件信息'),
}

model ListAuthorizedSoftwareResponse = {
  headers: map[string]string(name='headers'),
  body: ListAuthorizedSoftwareResponseBody(name='body'),
}

async function listAuthorizedSoftwareWithOptions(request: ListAuthorizedSoftwareRequest, runtime: Util.RuntimeOptions): ListAuthorizedSoftwareResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListAuthorizedSoftware', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listAuthorizedSoftware(request: ListAuthorizedSoftwareRequest): ListAuthorizedSoftwareResponse {
  var runtime = new Util.RuntimeOptions{};
  return listAuthorizedSoftwareWithOptions(request, runtime);
}

model ListContainerImagesRequest {
  region?: string(name='Region', description='区域'),
  nextToken?: string(name='NextToken', description='翻页Token'),
  maxResults?: int32(name='MaxResults', description='分页数量'),
}

model ListContainerImagesResponseBody = {
  hostId?: string(name='HostId'),
  requestId?: string(name='RequestId'),
  httpCode?: int32(name='HttpCode'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  success?: boolean(name='Success'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  totalCount?: int32(name='TotalCount'),
  containerImages?: [ 
    {
      containerImageNamespace?: string(name='ContainerImageNamespace', description='容器镜像名称空间名称'),
      containerImageName?: string(name='ContainerImageName', description='容器镜像名称'),
      containerImageDescription?: string(name='ContainerImageDescription', description='容器镜像描述'),
      containerImageVersions?: [ string ](name='ContainerImageVersions', description='容器镜像版本'),
      regionId?: string(name='RegionId', description='容器镜像所在区域'),
      containerRegistry?: string(name='ContainerRegistry', description='容器镜像仓库名称'),
      lastModified?: string(name='LastModified', description='最后更新时间'),
    }
  ](name='ContainerImages', description='容器镜像'),
}

model ListContainerImagesResponse = {
  headers: map[string]string(name='headers'),
  body: ListContainerImagesResponseBody(name='body'),
}

async function listContainerImagesWithOptions(request: ListContainerImagesRequest, runtime: Util.RuntimeOptions): ListContainerImagesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListContainerImages', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listContainerImages(request: ListContainerImagesRequest): ListContainerImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listContainerImagesWithOptions(request, runtime);
}

model ListEntitiesRequest {
  workspace?: string(name='Workspace'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  orderBy?: string(name='OrderBy'),
  isReversed?: boolean(name='IsReversed'),
}

model ListEntitiesResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  totalCount?: int32(name='TotalCount'),
  entities?: [ 
    {
      entityType?: string(name='EntityType', description='实体类型'),
    }
  ](name='Entities'),
}

model ListEntitiesResponse = {
  headers: map[string]string(name='headers'),
  body: ListEntitiesResponseBody(name='body'),
}

async function listEntitiesWithOptions(request: ListEntitiesRequest, runtime: Util.RuntimeOptions): ListEntitiesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListEntities', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listEntities(request: ListEntitiesRequest): ListEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEntitiesWithOptions(request, runtime);
}

model ListEntityItemsRequest {
  workspace?: string(name='Workspace'),
  entityType?: string(name='EntityType'),
  search?: string(name='Search'),
  orderBy?: string(name='OrderBy'),
  isReversed?: boolean(name='IsReversed'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
}

model ListEntityItemsResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  maxResults?: int32(name='MaxResults', description='请求的最大结果数'),
  nextToken?: string(name='NextToken', description='下次查询的起始Token'),
  totalCount?: int32(name='TotalCount', description='返回总个数'),
  entityItems?: [ 
    {
      entityName?: string(name='EntityName'),
      entityData?: map[string]string(name='EntityData'),
    }
  ](name='EntityItems', description='实体类型数组'),
}

model ListEntityItemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListEntityItemsResponseBody(name='body'),
}

async function listEntityItemsWithOptions(request: ListEntityItemsRequest, runtime: Util.RuntimeOptions): ListEntityItemsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListEntityItems', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listEntityItems(request: ListEntityItemsRequest): ListEntityItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listEntityItemsWithOptions(request, runtime);
}

model ListGlobalAppsRequest {
  search?: string(name='Search', description='模糊查询字段：NamesapceName  AppName  Categories AppDescription'),
  orderBy?: string(name='OrderBy', description='排序'),
  isReversed?: boolean(name='IsReversed', description='是否倒序，默认倒序排列'),
  nextToken?: string(name='NextToken', description='用来标记当前开始读取的位置，置空表示从头开始。'),
  maxResults?: int32(name='MaxResults', description='一批返回的最大数据量'),
  appScope?: string(name='AppScope', description='可见范围'),
  category?: string(name='Category', description='分类'),
  toolkit?: string(name='Toolkit', description='工具集'),
  region?: string(name='Region', description='区域Id'),
}

model ListGlobalAppsResponseBody = {
  requestId?: string(name='RequestId'),
  message?: string(name='Message'),
  dynamicCode?: string(name='DynamicCode'),
  globalApps?: [ 
    {
      namespaceName?: string(name='NamespaceName', description='命名空间名称'),
      appScope?: string(name='AppScope', description='应用权限'),
      appName?: string(name='AppName', description='应用名称'),
      appDescription?: string(name='AppDescription', description='应用描述'),
      toolkit?: string(name='Toolkit', description='应用工具合集'),
      appFee?: string(name='AppFee', description='应用计费说明'),
      appDefaultVersion?: string(name='AppDefaultVersion', description='应用默认版本'),
      pinned?: boolean(name='Pinned', description='应用收藏置顶标记'),
      lastModified?: string(name='LastModified', description='更新时间'),
      regionIds?: [ string ](name='RegionIds', description='应用支持的区域ids'),
      categories?: [ string ](name='Categories', description='应用所属分类'),
    }
  ](name='GlobalApps', description='公共应用集合'),
  nextToken?: string(name='NextToken', description='用来表示当前调用返回读取到的位置，空代表数据已经读取完毕'),
  maxResults?: int32(name='MaxResults', description='本次请求所返回的最大记录条数'),
  totalCount?: long(name='TotalCount', description='本次请求条件下的数据总量'),
  dynamicMessage?: string(name='DynamicMessage'),
  code?: string(name='Code'),
  success?: boolean(name='Success'),
  hostId?: string(name='HostId'),
}

model ListGlobalAppsResponse = {
  headers: map[string]string(name='headers'),
  body: ListGlobalAppsResponseBody(name='body'),
}

async function listGlobalAppsWithOptions(request: ListGlobalAppsRequest, runtime: Util.RuntimeOptions): ListGlobalAppsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListGlobalApps', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listGlobalApps(request: ListGlobalAppsRequest): ListGlobalAppsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listGlobalAppsWithOptions(request, runtime);
}

model ListPublicDatasetRequest {
  search?: string(name='Search', description='名称、描述中搜索的关键字'),
  tag?: string(name='Tag', description='公共数据集标签名'),
  orderBy?: string(name='OrderBy', description='排序字段'),
  isReversed?: boolean(name='IsReversed', description='排序是否反转'),
  nextToken?: string(name='NextToken', description='翻页Token'),
  maxResults?: int32(name='MaxResults', description='分页数量'),
}

model ListPublicDatasetResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  httpCode?: int32(name='HttpCode'),
  code?: string(name='Code', description='错误码'),
  message?: string(name='Message', description='错误消息'),
  success?: boolean(name='Success', description='是否调用成功'),
  nextToken?: string(name='NextToken', description='翻页Token'),
  maxResults?: int32(name='MaxResults', description='分页数'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
  datasets?: [ 
    {
      lastModified?: string(name='LastModified', description='最后更新时间'),
      copyright?: string(name='Copyright', description='公共数据集版权信息'),
      accessRequirements?: string(name='AccessRequirements', description='公共数据集访问要求'),
      about?: string(name='About', description='关于公共数据集'),
      tags?: [ string ](name='Tags', description='公共数据集标签'),
      datasetName?: string(name='DatasetName', description='公共数据集名称'),
      datasetDescription?: string(name='DatasetDescription', description='公共数据集描述'),
      updateFrequency?: string(name='UpdateFrequency', description='公共数据集更新频率'),
      regionIds?: [ string ](name='RegionIds', description='公共数据集可用区域'),
    }
  ](name='Datasets', description='公共数据集信息'),
}

model ListPublicDatasetResponse = {
  headers: map[string]string(name='headers'),
  body: ListPublicDatasetResponseBody(name='body'),
}

async function listPublicDatasetWithOptions(request: ListPublicDatasetRequest, runtime: Util.RuntimeOptions): ListPublicDatasetResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListPublicDataset', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listPublicDataset(request: ListPublicDatasetRequest): ListPublicDatasetResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPublicDatasetWithOptions(request, runtime);
}

model ListPublicDatasetEntitiesRequest {
  datasetName?: string(name='DatasetName', description='数据集名称'),
  orderBy?: string(name='OrderBy', description='排序字段'),
  isReversed?: boolean(name='IsReversed', description='排序是否反转'),
  nextToken?: string(name='NextToken', description='翻页Token'),
  maxResults?: int32(name='MaxResults', description='分页数量'),
}

model ListPublicDatasetEntitiesResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  httpCode?: int32(name='HttpCode'),
  code?: string(name='Code', description='错误码'),
  message?: string(name='Message', description='错误消息'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  nextToken?: string(name='NextToken', description='翻页Token'),
  maxResults?: int32(name='MaxResults', description='分页数'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
  datasetName?: string(name='DatasetName', description='公共数据集名称'),
  entities?: [ 
    {
      entityType?: string(name='EntityType', description='实体类型'),
    }
  ](name='Entities', description='该实体包含的所有类型'),
}

model ListPublicDatasetEntitiesResponse = {
  headers: map[string]string(name='headers'),
  body: ListPublicDatasetEntitiesResponseBody(name='body'),
}

async function listPublicDatasetEntitiesWithOptions(request: ListPublicDatasetEntitiesRequest, runtime: Util.RuntimeOptions): ListPublicDatasetEntitiesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListPublicDatasetEntities', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listPublicDatasetEntities(request: ListPublicDatasetEntitiesRequest): ListPublicDatasetEntitiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPublicDatasetEntitiesWithOptions(request, runtime);
}

model ListPublicDatasetEntityItemsRequest {
  datasetName?: string(name='DatasetName', description='数据集名称'),
  entityType?: string(name='EntityType', description='实体类型'),
  search?: string(name='Search', description='实体名中搜索的关键字'),
  orderBy?: string(name='OrderBy', description='排序字段'),
  isReversed?: boolean(name='IsReversed', description='是否反转'),
  nextToken?: string(name='NextToken', description='翻页Token'),
  maxResults?: int32(name='MaxResults', description='分页数量'),
}

model ListPublicDatasetEntityItemsResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  httpCode?: int32(name='HttpCode'),
  code?: string(name='Code', description='错误码'),
  message?: string(name='Message', description='错误消息'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  nextToken?: string(name='NextToken', description='翻页Token'),
  maxResults?: int32(name='MaxResults', description='分页数'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
  datasetName?: string(name='DatasetName', description='公共数据集名称'),
  entityItems?: [ 
    {
      entityName?: string(name='EntityName', description='实体名称'),
      entityData?: map[string]string(name='EntityData', description='实体属性值'),
    }
  ](name='EntityItems', description='该实体包含的所有对象'),
}

model ListPublicDatasetEntityItemsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPublicDatasetEntityItemsResponseBody(name='body'),
}

async function listPublicDatasetEntityItemsWithOptions(request: ListPublicDatasetEntityItemsRequest, runtime: Util.RuntimeOptions): ListPublicDatasetEntityItemsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListPublicDatasetEntityItems', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listPublicDatasetEntityItems(request: ListPublicDatasetEntityItemsRequest): ListPublicDatasetEntityItemsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPublicDatasetEntityItemsWithOptions(request, runtime);
}

model ListPublicDatasetTagsRequest {
  search?: string(name='Search', description='标签名中搜索的关键字'),
  orderBy?: string(name='OrderBy', description='排序字段'),
  isReversed?: boolean(name='IsReversed', description='是否反转'),
  nextToken?: string(name='NextToken', description='翻页Token'),
  maxResults?: int32(name='MaxResults', description='分页数量'),
}

model ListPublicDatasetTagsResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  httpCode?: int32(name='HttpCode'),
  code?: string(name='Code', description='错误码'),
  message?: string(name='Message', description='错误消息'),
  success?: boolean(name='Success', description='是否调用成功'),
  nextToken?: string(name='NextToken', description='翻页Token'),
  maxResults?: int32(name='MaxResults', description='分页数'),
  totalCount?: int32(name='TotalCount', description='总记录数'),
  tags?: [ string ](name='Tags', description='公共数据集标签'),
}

model ListPublicDatasetTagsResponse = {
  headers: map[string]string(name='headers'),
  body: ListPublicDatasetTagsResponseBody(name='body'),
}

async function listPublicDatasetTagsWithOptions(request: ListPublicDatasetTagsRequest, runtime: Util.RuntimeOptions): ListPublicDatasetTagsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListPublicDatasetTags', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listPublicDatasetTags(request: ListPublicDatasetTagsRequest): ListPublicDatasetTagsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPublicDatasetTagsWithOptions(request, runtime);
}

model ListRegionsResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  code?: string(name='Code', description='错误码'),
  message?: string(name='Message', description='错误消息'),
  success?: boolean(name='Success', description='是否调用成功'),
  regions?: [ 
    {
      localName?: string(name='LocalName'),
      regionEndpoint?: string(name='RegionEndpoint'),
      regionId?: string(name='RegionId'),
    }
  ](name='Regions', description='基因云产品上线区域'),
}

model ListRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRegionsResponseBody(name='body'),
}

async function listRegionsWithOptions(runtime: Util.RuntimeOptions): ListRegionsResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('ListRegions', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listRegions(): ListRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRegionsWithOptions(runtime);
}

model ListRunsRequest {
  workspace?: string(name='Workspace', description='工作空间'),
  name?: string(name='Name', description='任务名字'),
  status?: string(name='Status', description='状态'),
  submissionId?: string(name='SubmissionId', description='提交ID'),
  search?: string(name='Search', description='搜索ID'),
  labelSelector?: string(name='LabelSelector', description='标签选择'),
  appName?: string(name='AppName', description='应用名称'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  orderBy?: string(name='OrderBy'),
  isReversed?: boolean(name='IsReversed'),
  getTotal?: boolean(name='GetTotal'),
}

model ListRunsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  hostId?: string(name='HostId', description='主机ID'),
  maxResults?: int32(name='MaxResults', description='最大返回结果'),
  nextToken?: string(name='NextToken', description='下次查询Token'),
  totalCount?: int32(name='TotalCount', description='返回个数'),
  runs?: [ 
    {
      appName?: string(name='AppName', description='应用名称'),
      source?: string(name='Source', description='应用来源'),
      namespace?: string(name='Namespace', description='应用命名空间'),
      appOrigName?: string(name='AppOrigName', description='应用原名'),
      labels?: map[string]string(name='Labels', description='任务标签'),
      name?: string(name='Name', description='任务名称'),
      revision?: string(name='Revision', description='应用版本号'),
      runId?: string(name='RunId', description='任务ID'),
      status?: string(name='Status', description='任务状态'),
      createTime?: string(name='CreateTime', description='提交时间'),
      startTime?: string(name='StartTime', description='开始时间'),
      endTime?: string(name='EndTime', description='结束时间'),
      submissionId?: string(name='SubmissionId', description='提交ID'),
      entityName?: string(name='EntityName', description='实体名称'),
      entityType?: string(name='EntityType', description='实体对象ID'),
      executeDirectory?: string(name='ExecuteDirectory', description='运行目录'),
      executeOptions?: {
        callCaching?: boolean(name='CallCaching'),
        deleteIntermediateResults?: boolean(name='DeleteIntermediateResults'),
        failureMode?: string(name='FailureMode'),
      }(name='ExecuteOptions'),
      inputs?: string(name='Inputs', description='输入参数'),
      defaultRuntime?: string(name='DefaultRuntime'),
      workspace?: string(name='Workspace'),
      regionId?: string(name='RegionId'),
    }
  ](name='Runs', description='任务列表'),
}

model ListRunsResponse = {
  headers: map[string]string(name='headers'),
  body: ListRunsResponseBody(name='body'),
}

async function listRunsWithOptions(request: ListRunsRequest, runtime: Util.RuntimeOptions): ListRunsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListRuns', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listRuns(request: ListRunsRequest): ListRunsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRunsWithOptions(request, runtime);
}

model ListSubmissionsRequest {
  workspace?: string(name='Workspace', description='工作空间'),
  status?: string(name='Status', description='状态'),
  search?: string(name='Search', description='搜索ID'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  orderBy?: string(name='OrderBy'),
  isReversed?: boolean(name='IsReversed'),
}

model ListSubmissionsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  hostId?: string(name='HostId', description='主机ID'),
  maxResults?: int32(name='MaxResults', description='最大返回结果'),
  nextToken?: string(name='NextToken', description='下次查询Token'),
  totalCount?: int32(name='TotalCount', description='返回个数'),
  submissions?: [ 
    {
      workspace?: string(name='Workspace', description='提交ID'),
      submissionId?: string(name='SubmissionId', description='提交ID'),
      status?: string(name='Status', description='任务状态'),
      createTime?: string(name='CreateTime', description='提交时间'),
      startTime?: string(name='StartTime', description='开始时间'),
      endTime?: string(name='EndTime', description='结束时间'),
      entityType?: string(name='EntityType', description='实体类型'),
      runStats?: {
        submitted?: long(name='Submitted'),
        pending?: long(name='Pending'),
        running?: long(name='Running'),
        succeeded?: long(name='Succeeded'),
        failed?: long(name='Failed'),
        aborting?: long(name='Aborting'),
        aborted?: long(name='Aborted'),
      }(name='RunStats'),
    }
  ](name='Submissions', description='投递列表'),
}

model ListSubmissionsResponse = {
  headers: map[string]string(name='headers'),
  body: ListSubmissionsResponseBody(name='body'),
}

async function listSubmissionsWithOptions(request: ListSubmissionsRequest, runtime: Util.RuntimeOptions): ListSubmissionsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListSubmissions', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listSubmissions(request: ListSubmissionsRequest): ListSubmissionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSubmissionsWithOptions(request, runtime);
}

model ListTemplatesRequest {
  workspace?: string(name='Workspace', description='工作空间'),
  nextToken?: string(name='NextToken', description='Next Token'),
  maxResults?: int32(name='MaxResults', description='最大返回结果数'),
  orderBy?: string(name='OrderBy', description='排序依据'),
  isReversed?: boolean(name='IsReversed', description='是否逆序'),
  labelSelector?: string(name='LabelSelector', description='Label 选择器'),
  search?: string(name='Search', description='查找条件'),
}

model ListTemplatesResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  maxResults?: int32(name='MaxResults', description='最大返回结果'),
  nextToken?: string(name='NextToken', description='下次查询Token'),
  requestId?: string(name='RequestId', description='请求ID'),
  templates?: [ 
    {
      workspace?: string(name='Workspace', description='工作空间'),
      templateName?: string(name='TemplateName', description='应用模板名称'),
      labels?: map[string]string(name='Labels', description='标签'),
      appName?: string(name='AppName', description='应用名称'),
      revision?: string(name='Revision', description='应用版本'),
      rootEntity?: string(name='RootEntity', description='实体类型'),
      inputs?: [ 
        {
          taskName?: string(name='TaskName', description='任务名称'),
          variableName?: string(name='VariableName', description='变量名称'),
          variableType?: string(name='VariableType', description='变量类型'),
          variableValue?: string(name='VariableValue', description='变量值'),
          required?: boolean(name='Required', description='是否必须参数'),
          help?: string(name='Help', description='帮助信息'),
          stepOrder?: long(name='StepOrder', description='步骤顺序'),
        }
      ](name='Inputs', description='应用输入'),
      outputs?: [ 
        {
          taskName?: string(name='TaskName', description='任务名称'),
          variableName?: string(name='VariableName', description='变量名称'),
          variableType?: string(name='VariableType', description='变量类型'),
          variableValue?: string(name='VariableValue', description='变量值'),
          required?: boolean(name='Required', description='是否必须参数'),
          help?: string(name='Help', description='帮助信息'),
          stepOrder?: long(name='StepOrder', description='步骤顺序'),
        }
      ](name='Outputs', description='应用的输出参数'),
      description?: string(name='Description', description='模板描述信息'),
      createTime?: string(name='CreateTime', description='创建时间'),
      lastModifiedTime?: string(name='LastModifiedTime', description='最后修改时间'),
    }
  ](name='Templates', description='应用模板列表'),
  totalCount?: int32(name='TotalCount', description='返回个数'),
}

model ListTemplatesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTemplatesResponseBody(name='body'),
}

async function listTemplatesWithOptions(request: ListTemplatesRequest, runtime: Util.RuntimeOptions): ListTemplatesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTemplates', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTemplatesWithOptions(request, runtime);
}

model ListUserActiveRunsRequest {
  workspace?: string(name='Workspace', description='工作空间'),
  name?: string(name='Name', description='任务名字'),
  status?: string(name='Status', description='状态'),
  submissionId?: string(name='SubmissionId', description='提交ID'),
  search?: string(name='Search', description='搜索ID'),
  labelSelector?: string(name='LabelSelector', description='标签选择'),
  appName?: string(name='AppName', description='应用名称'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  orderBy?: string(name='OrderBy'),
  isReversed?: boolean(name='IsReversed'),
}

model ListUserActiveRunsResponseBody = {
  requestId?: string(name='RequestId', description='请求ID'),
  hostId?: string(name='HostId', description='主机ID'),
  maxResults?: int32(name='MaxResults', description='最大返回结果'),
  nextToken?: string(name='NextToken', description='下次查询Token'),
  totalCount?: int32(name='TotalCount', description='返回个数'),
  runs?: [ 
    {
      appName?: string(name='AppName', description='应用名称'),
      source?: string(name='Source', description='应用来源'),
      namespace?: string(name='Namespace', description='应用命名空间'),
      appOrigName?: string(name='AppOrigName', description='应用原名'),
      labels?: map[string]string(name='Labels', description='任务标签'),
      name?: string(name='Name', description='任务名称'),
      revision?: string(name='Revision', description='应用版本号'),
      runId?: string(name='RunId', description='任务ID'),
      status?: string(name='Status', description='任务状态'),
      createTime?: string(name='CreateTime', description='提交时间'),
      startTime?: string(name='StartTime', description='开始时间'),
      endTime?: string(name='EndTime', description='结束时间'),
      submissionId?: string(name='SubmissionId', description='提交ID'),
      entityName?: string(name='EntityName', description='实体名称'),
      entityType?: string(name='EntityType', description='实体对象ID'),
      executeDirectory?: string(name='ExecuteDirectory', description='运行目录'),
      executeOptions?: {
        callCaching?: boolean(name='CallCaching'),
        deleteIntermediateResults?: boolean(name='DeleteIntermediateResults'),
        failureMode?: string(name='FailureMode'),
      }(name='ExecuteOptions'),
      inputs?: string(name='Inputs', description='输入参数'),
      defaultRuntime?: string(name='DefaultRuntime'),
      workspace?: string(name='Workspace'),
      regionId?: string(name='RegionId'),
    }
  ](name='Runs', description='任务列表'),
}

model ListUserActiveRunsResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserActiveRunsResponseBody(name='body'),
}

async function listUserActiveRunsWithOptions(request: ListUserActiveRunsRequest, runtime: Util.RuntimeOptions): ListUserActiveRunsResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListUserActiveRuns', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listUserActiveRuns(request: ListUserActiveRunsRequest): ListUserActiveRunsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserActiveRunsWithOptions(request, runtime);
}

model ListWorkspacesRequest {
  name?: string(name='Name'),
  orderBy?: string(name='OrderBy'),
  isReversed?: boolean(name='IsReversed'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  labelSelector?: string(name='LabelSelector', description='Label选择器'),
}

model ListWorkspacesResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  maxResults?: int32(name='MaxResults', description='最大结果数'),
  requestId?: string(name='RequestId'),
  nextToken?: string(name='NextToken', description='下次查询的起始Token'),
  totalCount?: int32(name='TotalCount', description='返回总个数'),
  workspaces?: [ 
    {
      description?: string(name='Description', description='工作空间描述'),
      jobLifecycle?: int32(name='JobLifecycle', description='任务生命周期'),
      labels?: map[string]string(name='Labels', description='工作空间标签'),
      ossRoot?: string(name='OssRoot', description='OSS工作路径'),
      bucketName?: string(name='BucketName', description='工作空间Bucket名字'),
      role?: string(name='Role', description='RAM Role'),
      createTime?: string(name='CreateTime', description='创建时间'),
      lastModifiedTime?: string(name='LastModifiedTime', description='最后修改时间'),
      workspace?: string(name='Workspace', description='工作空间名称'),
      status?: string(name='Status', description='工作空间状态'),
      regionId?: string(name='RegionId', description='地域ID'),
    }
  ](name='Workspaces', description='工作空间数组'),
}

model ListWorkspacesResponse = {
  headers: map[string]string(name='headers'),
  body: ListWorkspacesResponseBody(name='body'),
}

async function listWorkspacesWithOptions(request: ListWorkspacesRequest, runtime: Util.RuntimeOptions): ListWorkspacesResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('ListWorkspaces', '2021-03-15', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function listWorkspaces(request: ListWorkspacesRequest): ListWorkspacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listWorkspacesWithOptions(request, runtime);
}

model ParseAppInputsRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  appName?: string(name='AppName', description='应用名称'),
  path?: string(name='Path', description='文件路径'),
  definition?: string(name='Definition', description='应用定义'),
  dependencies?: [ 
    {
      path?: string(name='Path', description='依赖路径'),
      content?: string(name='Content', description='依赖内容'),
    }
  ](name='Dependencies', description='依赖应用'),
}

model ParseAppInputsShrinkRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  appName?: string(name='AppName', description='应用名称'),
  path?: string(name='Path', description='文件路径'),
  definition?: string(name='Definition', description='应用定义'),
  dependenciesShrink?: string(name='Dependencies', description='依赖应用'),
}

model ParseAppInputsResponseBody = {
  hostId?: string(name='HostId', description='主机 ID'),
  requestId?: string(name='RequestId', description='请求 ID'),
  inputs?: [ 
    {
      taskName?: string(name='TaskName', description='参数名称'),
      variableName?: string(name='VariableName'),
      variableType?: string(name='VariableType'),
      variableValue?: string(name='VariableValue'),
      required?: boolean(name='Required'),
      help?: string(name='Help'),
      stepOrder?: long(name='StepOrder'),
    }
  ](name='Inputs', description='应用输入参数'),
}

model ParseAppInputsResponse = {
  headers: map[string]string(name='headers'),
  body: ParseAppInputsResponseBody(name='body'),
}

async function parseAppInputsWithOptions(tmpReq: ParseAppInputsRequest, runtime: Util.RuntimeOptions): ParseAppInputsResponse {
  Util.validateModel(tmpReq);
  var request = new ParseAppInputsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.dependencies)) {
    request.dependenciesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.dependencies, 'Dependencies', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ParseAppInputs', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function parseAppInputs(request: ParseAppInputsRequest): ParseAppInputsResponse {
  var runtime = new Util.RuntimeOptions{};
  return parseAppInputsWithOptions(request, runtime);
}

model ResumeSubmissionRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  submissionId?: string(name='SubmissionId', description='投递ID'),
}

model ResumeSubmissionResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model ResumeSubmissionResponse = {
  headers: map[string]string(name='headers'),
  body: ResumeSubmissionResponseBody(name='body'),
}

async function resumeSubmissionWithOptions(request: ResumeSubmissionRequest, runtime: Util.RuntimeOptions): ResumeSubmissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ResumeSubmission', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function resumeSubmission(request: ResumeSubmissionRequest): ResumeSubmissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return resumeSubmissionWithOptions(request, runtime);
}

model UpdateEntityRequest {
  workspace?: string(name='Workspace'),
  entityType?: string(name='EntityType'),
  entityItems?: [ 
    {
      entityName?: string(name='EntityName'),
      entityData?: map[string]string(name='EntityData'),
    }
  ](name='EntityItems'),
}

model UpdateEntityShrinkRequest {
  workspace?: string(name='Workspace'),
  entityType?: string(name='EntityType'),
  entityItemsShrink?: string(name='EntityItems'),
}

model UpdateEntityResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  workspace?: string(name='Workspace'),
  entityType?: string(name='EntityType'),
}

model UpdateEntityResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateEntityResponseBody(name='body'),
}

async function updateEntityWithOptions(tmpReq: UpdateEntityRequest, runtime: Util.RuntimeOptions): UpdateEntityResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateEntityShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.entityItems)) {
    request.entityItemsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.entityItems, 'EntityItems', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateEntity', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateEntity(request: UpdateEntityRequest): UpdateEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateEntityWithOptions(request, runtime);
}

model UpdateTemplateRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  templateName?: string(name='TemplateName', description='应用模板名称'),
  description?: string(name='Description', description='工作空间描述'),
  rootEntity?: string(name='RootEntity', description='实体类型'),
  inputs?: [ 
    {
      taskName?: string(name='TaskName', description='任务名称'),
      variableName?: string(name='VariableName', description='变量名'),
      variableType?: string(name='VariableType', description='变量类型'),
      variableValue?: string(name='VariableValue', description='变量值'),
      required?: boolean(name='Required', description='是否必填'),
      help?: string(name='Help', description='帮助信息'),
      stepOrder?: int32(name='StepOrder', description='步骤顺序'),
    }
  ](name='Inputs', description='应用的输入'),
  outputs?: [ 
    {
      taskName?: string(name='TaskName', description='任务名称'),
      variableName?: string(name='VariableName', description='变量名'),
      variableType?: string(name='VariableType', description='变量类型'),
      variableValue?: string(name='VariableValue', description='变量值'),
      required?: boolean(name='Required', description='是否必填'),
      help?: string(name='Help', description='帮助信息'),
      stepOrder?: int32(name='StepOrder', description='步骤顺序'),
    }
  ](name='Outputs', description='应用的输出'),
  labels?: string(name='Labels', description='工作空间标签'),
}

model UpdateTemplateShrinkRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  templateName?: string(name='TemplateName', description='应用模板名称'),
  description?: string(name='Description', description='工作空间描述'),
  rootEntity?: string(name='RootEntity', description='实体类型'),
  inputsShrink?: string(name='Inputs', description='应用的输入'),
  outputsShrink?: string(name='Outputs', description='应用的输出'),
  labels?: string(name='Labels', description='工作空间标签'),
}

model UpdateTemplateResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateTemplateResponseBody(name='body'),
}

async function updateTemplateWithOptions(tmpReq: UpdateTemplateRequest, runtime: Util.RuntimeOptions): UpdateTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.inputs)) {
    request.inputsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.inputs, 'Inputs', 'json');
  }
  if (!Util.isUnset(tmpReq.outputs)) {
    request.outputsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.outputs, 'Outputs', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateTemplate', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateTemplateWithOptions(request, runtime);
}

model UpdateWorkspaceRequest {
  workspace?: string(name='Workspace', description='工作空间名称'),
  description?: string(name='Description', description='工作空间描述'),
  ossRoot?: string(name='OssRoot', description='工作空间OSS工作路径'),
  jobLifecycle?: int32(name='JobLifecycle', description='工作空间内任务生命周期'),
  role?: string(name='Role', description='工作空间内Ram角色'),
  labels?: string(name='Labels', description='工作空间标签'),
}

model UpdateWorkspaceResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model UpdateWorkspaceResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateWorkspaceResponseBody(name='body'),
}

async function updateWorkspaceWithOptions(request: UpdateWorkspaceRequest, runtime: Util.RuntimeOptions): UpdateWorkspaceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateWorkspace', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateWorkspace(request: UpdateWorkspaceRequest): UpdateWorkspaceResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateWorkspaceWithOptions(request, runtime);
}

model UploadEntityRequest {
  workspace?: string(name='Workspace'),
  entityTSVFile?: string(name='EntityTSVFile'),
}

model UploadEntityResponseBody = {
  hostId?: string(name='HostId', description='主机ID'),
  requestId?: string(name='RequestId', description='请求ID'),
  workspace?: string(name='Workspace'),
  entityType?: string(name='EntityType'),
}

model UploadEntityResponse = {
  headers: map[string]string(name='headers'),
  body: UploadEntityResponseBody(name='body'),
}

async function uploadEntityWithOptions(request: UploadEntityRequest, runtime: Util.RuntimeOptions): UploadEntityResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UploadEntity', '2021-03-15', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function uploadEntity(request: UploadEntityRequest): UploadEntityResponse {
  var runtime = new Util.RuntimeOptions{};
  return uploadEntityWithOptions(request, runtime);
}

