/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('aicontent', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model OpenApiMultiResponse {
  data?: [ 
    {
      createTime?: string(name='createTime'),
      id?: string(name='id', example='456'),
      imageUrl?: [ string ](name='imageUrl'),
      inferenceImageCount?: int32(name='inferenceImageCount'),
      inferenceJobList?: [ 
        {
          createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
          id?: string(name='id', example='3220'),
          jobStatus?: string(name='jobStatus', example='FINISHED'),
          jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
          modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
          promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
          resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
        }
      ](name='inferenceJobList'),
      jobStatus?: string(name='jobStatus', example='TRAINING'),
      jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
      modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
      name?: string(name='name', example='可爱熊猫模型训练任务'),
      objectType?: string(name='objectType', example='panda'),
    }
  ](name='data', example='[]'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model OpenApiSingleResponse {
  data?: {
    modelTrainStatus?: string(name='modelTrainStatus', example='FINISHED'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model Personalizedtxt2imgAddInferenceJobCmd {
  imageNumber?: int32(name='imageNumber', example='1'),
  modelId?: string(name='modelId', description='This parameter is required.', example='xxxx-xxxx-xxxx'),
  prompt?: string(name='prompt', description='This parameter is required.', example='a <special-token> in the snow'),
  seed?: int32(name='seed', example='1'),
}

model Personalizedtxt2imgAddModelTrainJobCmd {
  imageUrl?: [ string ](name='imageUrl', description='This parameter is required.'),
  name?: string(name='name', description='This parameter is required.', example='熊猫图片生成'),
  objectType?: string(name='objectType', description='This parameter is required.', example='dog'),
}

model Personalizedtxt2imgInferenceJobInfoDTO {
  createUserId?: string(name='createUserId', example='123456'),
  id?: string(name='id', example='123456'),
  jobStatus?: string(name='jobStatus', example='123456'),
  modelId?: string(name='modelId', example='123456'),
  resultImageUrl?: [ string ](name='resultImageUrl', example='123456'),
}

model Personalizedtxt2imgModelTrainJobInfoDTO {
  createTime?: string(name='CreateTime'),
  createUserId?: string(name='CreateUserId'),
  imageUrl?: [ string ](name='ImageUrl'),
  inferenceJobList?: [
    Personalizedtxt2imgInferenceJobInfoDTO
  ](name='InferenceJobList'),
  jobStatus?: string(name='JobStatus'),
  name?: string(name='Name'),
  objectType?: string(name='ObjectType'),
  id?: string(name='id', example='123456'),
}

model AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponseBody = {
  data?: [ 
    {
      freeConcurrencyCount?: int32(name='FreeConcurrencyCount', example='10'),
      freeCount?: int32(name='FreeCount', example='100'),
      serviceCode?: string(name='ServiceCode', example='online_ai_algorithm_personalized_text_to_image_call_count'),
      serviceName?: string(name='ServiceName', example='AI算法模型-个性化文生图-在线按量调用'),
    }
  ](name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponseBody(name='body'),
}

/**
 * @summary 阿里云控制台/列出阿里云控制台上可使用的服务列表
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponse
 */
async function aliyunConsoleOpenApiQueryAliyunConsoleServcieListWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'AliyunConsoleOpenApiQueryAliyunConsoleServcieList',
    version = '20240611',
    protocol = 'HTTPS',
    pathname = `/api/v1/aliyunconsole/queryAliyunConsoleServcieList`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 阿里云控制台/列出阿里云控制台上可使用的服务列表
 *
 * @return AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponse
 */
async function aliyunConsoleOpenApiQueryAliyunConsoleServcieList(): AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return aliyunConsoleOpenApiQueryAliyunConsoleServcieListWithOptions(headers, runtime);
}

model AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponseBody = {
  data?: [ 
    {
      freeConcurrencyCount?: int32(name='FreeConcurrencyCount', example='10'),
      freeCount?: int32(name='FreeCount', example='100'),
      serviceCode?: string(name='ServiceCode', example='online_ai_algorithm_personalized_text_to_image_call_count'),
      serviceName?: string(name='ServiceName', example='AI算法模型-个性化文生图-在线按量调用'),
    }
  ](name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponseBody(name='body'),
}

/**
 * @summary 阿里云控制台/列出阿里云控制台上可使用的服务列表
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponse
 */
async function aliyunConsoleOpenApiQueryAliyunConsoleServiceListWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'AliyunConsoleOpenApiQueryAliyunConsoleServiceList',
    version = '20240611',
    protocol = 'HTTPS',
    pathname = `/api/v1/aliyunconsole/queryAliyunConsoleServiceList`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 阿里云控制台/列出阿里云控制台上可使用的服务列表
 *
 * @return AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponse
 */
async function aliyunConsoleOpenApiQueryAliyunConsoleServiceList(): AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return aliyunConsoleOpenApiQueryAliyunConsoleServiceListWithOptions(headers, runtime);
}

model PersonalizedTextToImageAddInferenceJobRequest {
  imageNumber?: int32(name='imageNumber', example='1'),
  imageUrl?: [ string ](name='imageUrl', description='This parameter is required.'),
  prompt?: string(name='prompt', description='This parameter is required.', example='a <special-token> in the snow'),
  seed?: long(name='seed', example='1'),
  strength?: double(name='strength', example='1'),
  trainSteps?: int32(name='trainSteps', example='800'),
}

model PersonalizedTextToImageAddInferenceJobResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
    id?: string(name='id', example='3220'),
    jobStatus?: string(name='jobStatus', example='FINISHED'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    promptId?: string(name='promptId', description='promptId', example='promptId-xxxx-xxxx-xxxx'),
    resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model PersonalizedTextToImageAddInferenceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PersonalizedTextToImageAddInferenceJobResponseBody(name='body'),
}

/**
 * @summary 个性化文生图/基于一个预训练模型创建图片推理任务
 *
 * @param request PersonalizedTextToImageAddInferenceJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PersonalizedTextToImageAddInferenceJobResponse
 */
async function personalizedTextToImageAddInferenceJobWithOptions(request: PersonalizedTextToImageAddInferenceJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PersonalizedTextToImageAddInferenceJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageNumber)) {
    body['imageNumber'] = request.imageNumber;
  }
  if (!Util.isUnset(request.imageUrl)) {
    body['imageUrl'] = request.imageUrl;
  }
  if (!Util.isUnset(request.prompt)) {
    body['prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.seed)) {
    body['seed'] = request.seed;
  }
  if (!Util.isUnset(request.strength)) {
    body['strength'] = request.strength;
  }
  if (!Util.isUnset(request.trainSteps)) {
    body['trainSteps'] = request.trainSteps;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'PersonalizedTextToImageAddInferenceJob',
    version = '20240611',
    protocol = 'HTTPS',
    pathname = `/api/v1/personalizedtxt2img/addPreModelInferenceJob`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 个性化文生图/基于一个预训练模型创建图片推理任务
 *
 * @param request PersonalizedTextToImageAddInferenceJobRequest
 * @return PersonalizedTextToImageAddInferenceJobResponse
 */
async function personalizedTextToImageAddInferenceJob(request: PersonalizedTextToImageAddInferenceJobRequest): PersonalizedTextToImageAddInferenceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return personalizedTextToImageAddInferenceJobWithOptions(request, headers, runtime);
}

model PersonalizedTextToImageQueryImageAssetRequest {
  encodeFormat?: string(name='encodeFormat', example='base64'),
  imageId?: string(name='imageId', description='This parameter is required.', example='0000.png'),
}

model PersonalizedTextToImageQueryImageAssetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: any(name='body'),
}

/**
 * @summary 个性化文生图/通过唯一的图片编号获取图片内容
 *
 * @param request PersonalizedTextToImageQueryImageAssetRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PersonalizedTextToImageQueryImageAssetResponse
 */
async function personalizedTextToImageQueryImageAssetWithOptions(request: PersonalizedTextToImageQueryImageAssetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PersonalizedTextToImageQueryImageAssetResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.encodeFormat)) {
    query['encodeFormat'] = request.encodeFormat;
  }
  if (!Util.isUnset(request.imageId)) {
    query['imageId'] = request.imageId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PersonalizedTextToImageQueryImageAsset',
    version = '20240611',
    protocol = 'HTTPS',
    pathname = `/api/v1/personalizedtxt2img/queryImageAssetFromImageId`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'any',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 个性化文生图/通过唯一的图片编号获取图片内容
 *
 * @param request PersonalizedTextToImageQueryImageAssetRequest
 * @return PersonalizedTextToImageQueryImageAssetResponse
 */
async function personalizedTextToImageQueryImageAsset(request: PersonalizedTextToImageQueryImageAssetRequest): PersonalizedTextToImageQueryImageAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return personalizedTextToImageQueryImageAssetWithOptions(request, headers, runtime);
}

model PersonalizedTextToImageQueryPreModelInferenceJobInfoRequest {
  inferenceJobId?: string(name='inferenceJobId', description='This parameter is required.', example='girl-xxxx-xxxx-xxxx-xxxx'),
}

model PersonalizedTextToImageQueryPreModelInferenceJobInfoResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
    id?: string(name='id', example='3220'),
    jobStatus?: string(name='jobStatus', example='FINISHED'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    promptId?: string(name='promptId', description='promptId', example='promptId-xxxx-xxxx-xxxx'),
    resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model PersonalizedTextToImageQueryPreModelInferenceJobInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PersonalizedTextToImageQueryPreModelInferenceJobInfoResponseBody(name='body'),
}

/**
 * @summary 个性化文生图/查询预制模型推理任务的状态
 *
 * @param request PersonalizedTextToImageQueryPreModelInferenceJobInfoRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PersonalizedTextToImageQueryPreModelInferenceJobInfoResponse
 */
async function personalizedTextToImageQueryPreModelInferenceJobInfoWithOptions(request: PersonalizedTextToImageQueryPreModelInferenceJobInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PersonalizedTextToImageQueryPreModelInferenceJobInfoResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.inferenceJobId)) {
    query['inferenceJobId'] = request.inferenceJobId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PersonalizedTextToImageQueryPreModelInferenceJobInfo',
    version = '20240611',
    protocol = 'HTTPS',
    pathname = `/api/v1/personalizedtxt2img/queryPreModelInferenceJobInfo`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 个性化文生图/查询预制模型推理任务的状态
 *
 * @param request PersonalizedTextToImageQueryPreModelInferenceJobInfoRequest
 * @return PersonalizedTextToImageQueryPreModelInferenceJobInfoResponse
 */
async function personalizedTextToImageQueryPreModelInferenceJobInfo(request: PersonalizedTextToImageQueryPreModelInferenceJobInfoRequest): PersonalizedTextToImageQueryPreModelInferenceJobInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return personalizedTextToImageQueryPreModelInferenceJobInfoWithOptions(request, headers, runtime);
}

model Personalizedtxt2imgAddInferenceJobRequest {
  imageNumber?: int32(name='imageNumber', example='1'),
  modelId?: string(name='modelId', description='This parameter is required.', example='xxxx-xxxx-xxxx'),
  prompt?: string(name='prompt', description='This parameter is required.', example='a <special-token> in the snow'),
  seed?: long(name='seed', example='1'),
}

model Personalizedtxt2imgAddInferenceJobResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
    id?: string(name='id', example='3220'),
    jobStatus?: string(name='jobStatus', example='FINISHED'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
    resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgAddInferenceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgAddInferenceJobResponseBody(name='body'),
}

/**
 * @summary 个性化文生图/基于一个模型创建图片推理任务
 *
 * @param request Personalizedtxt2imgAddInferenceJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return Personalizedtxt2imgAddInferenceJobResponse
 */
async function personalizedtxt2imgAddInferenceJobWithOptions(request: Personalizedtxt2imgAddInferenceJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): Personalizedtxt2imgAddInferenceJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageNumber)) {
    body['imageNumber'] = request.imageNumber;
  }
  if (!Util.isUnset(request.modelId)) {
    body['modelId'] = request.modelId;
  }
  if (!Util.isUnset(request.prompt)) {
    body['prompt'] = request.prompt;
  }
  if (!Util.isUnset(request.seed)) {
    body['seed'] = request.seed;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Personalizedtxt2imgAddInferenceJob',
    version = '20240611',
    protocol = 'HTTPS',
    pathname = `/api/v1/personalizedtxt2img/addInferenceJob`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 个性化文生图/基于一个模型创建图片推理任务
 *
 * @param request Personalizedtxt2imgAddInferenceJobRequest
 * @return Personalizedtxt2imgAddInferenceJobResponse
 */
async function personalizedtxt2imgAddInferenceJob(request: Personalizedtxt2imgAddInferenceJobRequest): Personalizedtxt2imgAddInferenceJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return personalizedtxt2imgAddInferenceJobWithOptions(request, headers, runtime);
}

model Personalizedtxt2imgAddModelTrainJobRequest {
  imageUrl?: [ string ](name='imageUrl', description='This parameter is required.'),
  name?: string(name='name', description='This parameter is required.', example='熊猫图片生成'),
  objectType?: string(name='objectType', description='This parameter is required.', example='dog'),
  trainSteps?: int32(name='trainSteps', example='800'),
}

model Personalizedtxt2imgAddModelTrainJobResponseBody = {
  data?: {
    createTime?: string(name='createTime'),
    id?: string(name='id', example='456'),
    imageUrl?: [ string ](name='imageUrl'),
    inferenceImageCount?: int32(name='inferenceImageCount'),
    inferenceJobList?: [ 
      {
        createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
        id?: string(name='id', example='3220'),
        jobStatus?: string(name='jobStatus', example='FINISHED'),
        jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
        modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
        promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
        resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
      }
    ](name='inferenceJobList'),
    jobStatus?: string(name='jobStatus', example='TRAINING'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    name?: string(name='name', example='可爱熊猫模型训练任务'),
    objectType?: string(name='objectType', example='panda'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgAddModelTrainJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgAddModelTrainJobResponseBody(name='body'),
}

/**
 * @summary 个性化文生图/创建一个模型训练任务
 *
 * @param request Personalizedtxt2imgAddModelTrainJobRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return Personalizedtxt2imgAddModelTrainJobResponse
 */
async function personalizedtxt2imgAddModelTrainJobWithOptions(request: Personalizedtxt2imgAddModelTrainJobRequest, headers: map[string]string, runtime: Util.RuntimeOptions): Personalizedtxt2imgAddModelTrainJobResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.imageUrl)) {
    body['imageUrl'] = request.imageUrl;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.objectType)) {
    body['objectType'] = request.objectType;
  }
  if (!Util.isUnset(request.trainSteps)) {
    body['trainSteps'] = request.trainSteps;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'Personalizedtxt2imgAddModelTrainJob',
    version = '20240611',
    protocol = 'HTTPS',
    pathname = `/api/v1/personalizedtxt2img/addModelTrainJob`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 个性化文生图/创建一个模型训练任务
 *
 * @param request Personalizedtxt2imgAddModelTrainJobRequest
 * @return Personalizedtxt2imgAddModelTrainJobResponse
 */
async function personalizedtxt2imgAddModelTrainJob(request: Personalizedtxt2imgAddModelTrainJobRequest): Personalizedtxt2imgAddModelTrainJobResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return personalizedtxt2imgAddModelTrainJobWithOptions(request, headers, runtime);
}

model Personalizedtxt2imgQueryImageAssetRequest {
  encodeFormat?: string(name='encodeFormat', example='base64'),
  imageId?: string(name='imageId', description='This parameter is required.', example='0000.png'),
  modelId?: string(name='modelId', description='This parameter is required.', example='girl-xxxx-xxxx-xxxx-xxxx'),
  promptId?: string(name='promptId', description='This parameter is required.', example='xxxx-xxxx-xxxx-xxxx'),
}

model Personalizedtxt2imgQueryImageAssetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: any(name='body'),
}

/**
 * @summary 个性化文生图/图片二进制内容获取
 *
 * @param request Personalizedtxt2imgQueryImageAssetRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return Personalizedtxt2imgQueryImageAssetResponse
 */
async function personalizedtxt2imgQueryImageAssetWithOptions(request: Personalizedtxt2imgQueryImageAssetRequest, headers: map[string]string, runtime: Util.RuntimeOptions): Personalizedtxt2imgQueryImageAssetResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.encodeFormat)) {
    query['encodeFormat'] = request.encodeFormat;
  }
  if (!Util.isUnset(request.imageId)) {
    query['imageId'] = request.imageId;
  }
  if (!Util.isUnset(request.modelId)) {
    query['modelId'] = request.modelId;
  }
  if (!Util.isUnset(request.promptId)) {
    query['promptId'] = request.promptId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Personalizedtxt2imgQueryImageAsset',
    version = '20240611',
    protocol = 'HTTPS',
    pathname = `/api/v1/personalizedtxt2img/queryImageAsset`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'any',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 个性化文生图/图片二进制内容获取
 *
 * @param request Personalizedtxt2imgQueryImageAssetRequest
 * @return Personalizedtxt2imgQueryImageAssetResponse
 */
async function personalizedtxt2imgQueryImageAsset(request: Personalizedtxt2imgQueryImageAssetRequest): Personalizedtxt2imgQueryImageAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return personalizedtxt2imgQueryImageAssetWithOptions(request, headers, runtime);
}

model Personalizedtxt2imgQueryInferenceJobInfoRequest {
  inferenceJobId?: string(name='inferenceJobId', description='This parameter is required.', example='180'),
}

model Personalizedtxt2imgQueryInferenceJobInfoResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
    id?: string(name='id', example='3220'),
    jobStatus?: string(name='jobStatus', example='FINISHED'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
    resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgQueryInferenceJobInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgQueryInferenceJobInfoResponseBody(name='body'),
}

/**
 * @summary 个性化文生图/查询模型推理任务的状态和结果信息
 *
 * @param request Personalizedtxt2imgQueryInferenceJobInfoRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return Personalizedtxt2imgQueryInferenceJobInfoResponse
 */
async function personalizedtxt2imgQueryInferenceJobInfoWithOptions(request: Personalizedtxt2imgQueryInferenceJobInfoRequest, headers: map[string]string, runtime: Util.RuntimeOptions): Personalizedtxt2imgQueryInferenceJobInfoResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.inferenceJobId)) {
    query['inferenceJobId'] = request.inferenceJobId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Personalizedtxt2imgQueryInferenceJobInfo',
    version = '20240611',
    protocol = 'HTTPS',
    pathname = `/api/v1/personalizedtxt2img/queryInferenceJobInfo`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 个性化文生图/查询模型推理任务的状态和结果信息
 *
 * @param request Personalizedtxt2imgQueryInferenceJobInfoRequest
 * @return Personalizedtxt2imgQueryInferenceJobInfoResponse
 */
async function personalizedtxt2imgQueryInferenceJobInfo(request: Personalizedtxt2imgQueryInferenceJobInfoRequest): Personalizedtxt2imgQueryInferenceJobInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return personalizedtxt2imgQueryInferenceJobInfoWithOptions(request, headers, runtime);
}

model Personalizedtxt2imgQueryModelTrainJobListResponseBody = {
  data?: [ 
    {
      createTime?: string(name='createTime'),
      id?: string(name='id', example='456'),
      imageUrl?: [ string ](name='imageUrl'),
      inferenceImageCount?: int32(name='inferenceImageCount'),
      inferenceJobList?: [ 
        {
          createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
          id?: string(name='id', example='3220'),
          jobStatus?: string(name='jobStatus', example='FINISHED'),
          jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
          modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
          promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
          resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
        }
      ](name='inferenceJobList'),
      jobStatus?: string(name='jobStatus', example='TRAINING'),
      jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
      modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
      name?: string(name='name', example='可爱熊猫模型训练任务'),
      objectType?: string(name='objectType', example='panda'),
    }
  ](name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgQueryModelTrainJobListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgQueryModelTrainJobListResponseBody(name='body'),
}

/**
 * @summary 个性化文生图/查询模型训练任务列表
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return Personalizedtxt2imgQueryModelTrainJobListResponse
 */
async function personalizedtxt2imgQueryModelTrainJobListWithOptions(headers: map[string]string, runtime: Util.RuntimeOptions): Personalizedtxt2imgQueryModelTrainJobListResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'Personalizedtxt2imgQueryModelTrainJobList',
    version = '20240611',
    protocol = 'HTTPS',
    pathname = `/api/v1/personalizedtxt2img/queryModelTrainJobList`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 个性化文生图/查询模型训练任务列表
 *
 * @return Personalizedtxt2imgQueryModelTrainJobListResponse
 */
async function personalizedtxt2imgQueryModelTrainJobList(): Personalizedtxt2imgQueryModelTrainJobListResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return personalizedtxt2imgQueryModelTrainJobListWithOptions(headers, runtime);
}

model Personalizedtxt2imgQueryModelTrainStatusRequest {
  modelId?: string(name='modelId', description='This parameter is required.', example='modelId-xxxx-xxxx-xxxx'),
}

model Personalizedtxt2imgQueryModelTrainStatusResponseBody = {
  data?: {
    modelTrainStatus?: string(name='modelTrainStatus', example='FINISHED'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgQueryModelTrainStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgQueryModelTrainStatusResponseBody(name='body'),
}

/**
 * @summary 个性化文生图/模型训练状态查询
 *
 * @param request Personalizedtxt2imgQueryModelTrainStatusRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return Personalizedtxt2imgQueryModelTrainStatusResponse
 */
async function personalizedtxt2imgQueryModelTrainStatusWithOptions(request: Personalizedtxt2imgQueryModelTrainStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): Personalizedtxt2imgQueryModelTrainStatusResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.modelId)) {
    query['modelId'] = request.modelId;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'Personalizedtxt2imgQueryModelTrainStatus',
    version = '20240611',
    protocol = 'HTTPS',
    pathname = `/api/v1/personalizedtxt2img/queryModelTrainStatus`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 个性化文生图/模型训练状态查询
 *
 * @param request Personalizedtxt2imgQueryModelTrainStatusRequest
 * @return Personalizedtxt2imgQueryModelTrainStatusResponse
 */
async function personalizedtxt2imgQueryModelTrainStatus(request: Personalizedtxt2imgQueryModelTrainStatusRequest): Personalizedtxt2imgQueryModelTrainStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return personalizedtxt2imgQueryModelTrainStatusWithOptions(request, headers, runtime);
}

