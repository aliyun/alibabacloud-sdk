/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AiContent';
  @version = '20240611';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model OpenApiMultiResponse {
  data?: [ 
    {
      createTime?: string(name='createTime'),
      id?: string(name='id', example='456'),
      imageUrl?: [ string ](name='imageUrl'),
      inferenceImageCount?: int32(name='inferenceImageCount'),
      inferenceJobList?: [ 
        {
          createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
          id?: string(name='id', example='3220'),
          jobStatus?: string(name='jobStatus', example='FINISHED'),
          jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
          modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
          promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
          resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
        }
      ](name='inferenceJobList'),
      jobStatus?: string(name='jobStatus', example='TRAINING'),
      jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
      modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
      name?: string(name='name', example='可爱熊猫模型训练任务'),
      objectType?: string(name='objectType', example='panda'),
    }
  ](name='data', example='[]'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model OpenApiSingleResponse {
  data?: {
    modelTrainStatus?: string(name='modelTrainStatus', example='FINISHED'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model Personalizedtxt2imgAddInferenceJobCmd {
  imageNumber?: int32(name='imageNumber', example='1'),
  modelId: string(name='modelId', description='This parameter is required.', example='xxxx-xxxx-xxxx'),
  prompt: string(name='prompt', description='This parameter is required.', example='a <special-token> in the snow'),
  seed?: int32(name='seed', example='1'),
}

model Personalizedtxt2imgAddModelTrainJobCmd {
  imageUrl: [ string ](name='imageUrl', description='This parameter is required.'),
  name: string(name='name', description='This parameter is required.', example='熊猫图片生成'),
  objectType: string(name='objectType', description='This parameter is required.', example='dog'),
}

model Personalizedtxt2imgInferenceJobInfoDTO {
  createUserId?: string(name='createUserId', example='123456'),
  id?: string(name='id', example='123456'),
  jobStatus?: string(name='jobStatus', example='123456'),
  modelId?: string(name='modelId', example='123456'),
  resultImageUrl?: [ string ](name='resultImageUrl', example='123456'),
}

model Personalizedtxt2imgModelTrainJobInfoDTO {
  createTime?: string(name='CreateTime'),
  createUserId?: string(name='CreateUserId'),
  imageUrl?: [ string ](name='ImageUrl'),
  inferenceJobList?: [
    Personalizedtxt2imgInferenceJobInfoDTO
  ](name='InferenceJobList'),
  jobStatus?: string(name='JobStatus'),
  name?: string(name='Name'),
  objectType?: string(name='ObjectType'),
  id?: string(name='id', example='123456'),
}

model AliyunConsoleOpenApiQueryAliyunConsoleServcieListRequest {
}

model AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponseBody = {
  data?: [ 
    {
      freeConcurrencyCount?: int32(name='FreeConcurrencyCount', example='10'),
      freeCount?: int32(name='FreeCount', example='100'),
      serviceCode?: string(name='ServiceCode', example='online_ai_algorithm_personalized_text_to_image_call_count'),
      serviceName?: string(name='ServiceName', example='AI算法模型-个性化文生图-在线按量调用'),
    }
  ](name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AliyunConsoleOpenApiQueryAliyunConsoleServcieList  AliyunConsoleOpenApiQueryAliyunConsoleServcieListRequest
  * @return AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponse
 */
async function aliyunConsoleOpenApiQueryAliyunConsoleServcieList(request: AliyunConsoleOpenApiQueryAliyunConsoleServcieListRequest): AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AliyunConsoleOpenApiQueryAliyunConsoleServcieList', 'GET', '/api/v1/aliyunconsole/queryAliyunConsoleServcieList', 'json', false, 'json', request);
}

model AliyunConsoleOpenApiQueryAliyunConsoleServiceListRequest {
}

model AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponseBody = {
  data?: [ 
    {
      freeConcurrencyCount?: int32(name='FreeConcurrencyCount', example='10'),
      freeCount?: int32(name='FreeCount', example='100'),
      serviceCode?: string(name='ServiceCode', example='online_ai_algorithm_personalized_text_to_image_call_count'),
      serviceName?: string(name='ServiceName', example='AI算法模型-个性化文生图-在线按量调用'),
    }
  ](name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AliyunConsoleOpenApiQueryAliyunConsoleServiceList  AliyunConsoleOpenApiQueryAliyunConsoleServiceListRequest
  * @return AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponse
 */
async function aliyunConsoleOpenApiQueryAliyunConsoleServiceList(request: AliyunConsoleOpenApiQueryAliyunConsoleServiceListRequest): AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AliyunConsoleOpenApiQueryAliyunConsoleServiceList', 'GET', '/api/v1/aliyunconsole/queryAliyunConsoleServiceList', 'json', false, 'json', request);
}

model PersonalizedTextToImageAddInferenceJobRequest {
  imageNumber?: int32(name='imageNumber', example='1', position='Body'),
  imageUrl: [ string ](name='imageUrl', description='This parameter is required.', position='Body'),
  prompt: string(name='prompt', description='This parameter is required.', example='a <special-token> in the snow', position='Body'),
  seed?: long(name='seed', example='1', position='Body'),
  strength?: double(name='strength', example='1', position='Body'),
  trainSteps?: int32(name='trainSteps', example='800', position='Body'),
}

model PersonalizedTextToImageAddInferenceJobResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
    id?: string(name='id', example='3220'),
    jobStatus?: string(name='jobStatus', example='FINISHED'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    promptId?: string(name='promptId', description='promptId', example='promptId-xxxx-xxxx-xxxx'),
    resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model PersonalizedTextToImageAddInferenceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PersonalizedTextToImageAddInferenceJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PersonalizedTextToImageAddInferenceJob  PersonalizedTextToImageAddInferenceJobRequest
  * @return PersonalizedTextToImageAddInferenceJobResponse
 */
async function personalizedTextToImageAddInferenceJob(request: PersonalizedTextToImageAddInferenceJobRequest): PersonalizedTextToImageAddInferenceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PersonalizedTextToImageAddInferenceJob', 'POST', '/api/v1/personalizedtxt2img/addPreModelInferenceJob', 'json', false, 'json', request);
}

model PersonalizedTextToImageQueryImageAssetRequest {
  encodeFormat?: string(name='encodeFormat', example='base64', position='Query'),
  imageId: string(name='imageId', description='This parameter is required.', example='0000.png', position='Query'),
}

model PersonalizedTextToImageQueryImageAssetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: any(name='body'),
}

/**
  * @param request  the request parameters of PersonalizedTextToImageQueryImageAsset  PersonalizedTextToImageQueryImageAssetRequest
  * @return PersonalizedTextToImageQueryImageAssetResponse
 */
async function personalizedTextToImageQueryImageAsset(request: PersonalizedTextToImageQueryImageAssetRequest): PersonalizedTextToImageQueryImageAssetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PersonalizedTextToImageQueryImageAsset', 'GET', '/api/v1/personalizedtxt2img/queryImageAssetFromImageId', 'any', false, 'json', request);
}

model PersonalizedTextToImageQueryPreModelInferenceJobInfoRequest {
  inferenceJobId: string(name='inferenceJobId', description='This parameter is required.', example='girl-xxxx-xxxx-xxxx-xxxx', position='Query'),
}

model PersonalizedTextToImageQueryPreModelInferenceJobInfoResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
    id?: string(name='id', example='3220'),
    jobStatus?: string(name='jobStatus', example='FINISHED'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    promptId?: string(name='promptId', description='promptId', example='promptId-xxxx-xxxx-xxxx'),
    resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model PersonalizedTextToImageQueryPreModelInferenceJobInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PersonalizedTextToImageQueryPreModelInferenceJobInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PersonalizedTextToImageQueryPreModelInferenceJobInfo  PersonalizedTextToImageQueryPreModelInferenceJobInfoRequest
  * @return PersonalizedTextToImageQueryPreModelInferenceJobInfoResponse
 */
async function personalizedTextToImageQueryPreModelInferenceJobInfo(request: PersonalizedTextToImageQueryPreModelInferenceJobInfoRequest): PersonalizedTextToImageQueryPreModelInferenceJobInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PersonalizedTextToImageQueryPreModelInferenceJobInfo', 'GET', '/api/v1/personalizedtxt2img/queryPreModelInferenceJobInfo', 'json', false, 'json', request);
}

model Personalizedtxt2imgAddInferenceJobRequest {
  imageNumber?: int32(name='imageNumber', example='1', position='Body'),
  modelId: string(name='modelId', description='This parameter is required.', example='xxxx-xxxx-xxxx', position='Body'),
  prompt: string(name='prompt', description='This parameter is required.', example='a <special-token> in the snow', position='Body'),
  seed?: long(name='seed', example='1', position='Body'),
}

model Personalizedtxt2imgAddInferenceJobResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
    id?: string(name='id', example='3220'),
    jobStatus?: string(name='jobStatus', example='FINISHED'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
    resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgAddInferenceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgAddInferenceJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Personalizedtxt2imgAddInferenceJob  Personalizedtxt2imgAddInferenceJobRequest
  * @return Personalizedtxt2imgAddInferenceJobResponse
 */
async function personalizedtxt2imgAddInferenceJob(request: Personalizedtxt2imgAddInferenceJobRequest): Personalizedtxt2imgAddInferenceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Personalizedtxt2imgAddInferenceJob', 'POST', '/api/v1/personalizedtxt2img/addInferenceJob', 'json', false, 'json', request);
}

model Personalizedtxt2imgAddModelTrainJobRequest {
  imageUrl: [ string ](name='imageUrl', description='This parameter is required.', position='Body'),
  name: string(name='name', description='This parameter is required.', example='熊猫图片生成', position='Body'),
  objectType: string(name='objectType', description='This parameter is required.', example='dog', position='Body'),
  trainSteps?: int32(name='trainSteps', example='800', position='Body'),
}

model Personalizedtxt2imgAddModelTrainJobResponseBody = {
  data?: {
    createTime?: string(name='createTime'),
    id?: string(name='id', example='456'),
    imageUrl?: [ string ](name='imageUrl'),
    inferenceImageCount?: int32(name='inferenceImageCount'),
    inferenceJobList?: [ 
      {
        createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
        id?: string(name='id', example='3220'),
        jobStatus?: string(name='jobStatus', example='FINISHED'),
        jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
        modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
        promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
        resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
      }
    ](name='inferenceJobList'),
    jobStatus?: string(name='jobStatus', example='TRAINING'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    name?: string(name='name', example='可爱熊猫模型训练任务'),
    objectType?: string(name='objectType', example='panda'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgAddModelTrainJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgAddModelTrainJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Personalizedtxt2imgAddModelTrainJob  Personalizedtxt2imgAddModelTrainJobRequest
  * @return Personalizedtxt2imgAddModelTrainJobResponse
 */
async function personalizedtxt2imgAddModelTrainJob(request: Personalizedtxt2imgAddModelTrainJobRequest): Personalizedtxt2imgAddModelTrainJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Personalizedtxt2imgAddModelTrainJob', 'POST', '/api/v1/personalizedtxt2img/addModelTrainJob', 'json', false, 'json', request);
}

model Personalizedtxt2imgQueryImageAssetRequest {
  encodeFormat?: string(name='encodeFormat', example='base64', position='Query'),
  imageId: string(name='imageId', description='This parameter is required.', example='0000.png', position='Query'),
  modelId: string(name='modelId', description='This parameter is required.', example='girl-xxxx-xxxx-xxxx-xxxx', position='Query'),
  promptId: string(name='promptId', description='This parameter is required.', example='xxxx-xxxx-xxxx-xxxx', position='Query'),
}

model Personalizedtxt2imgQueryImageAssetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: any(name='body'),
}

/**
  * @param request  the request parameters of Personalizedtxt2imgQueryImageAsset  Personalizedtxt2imgQueryImageAssetRequest
  * @return Personalizedtxt2imgQueryImageAssetResponse
 */
async function personalizedtxt2imgQueryImageAsset(request: Personalizedtxt2imgQueryImageAssetRequest): Personalizedtxt2imgQueryImageAssetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Personalizedtxt2imgQueryImageAsset', 'GET', '/api/v1/personalizedtxt2img/queryImageAsset', 'any', false, 'json', request);
}

model Personalizedtxt2imgQueryInferenceJobInfoRequest {
  inferenceJobId: string(name='inferenceJobId', description='This parameter is required.', example='180', position='Query'),
}

model Personalizedtxt2imgQueryInferenceJobInfoResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
    id?: string(name='id', example='3220'),
    jobStatus?: string(name='jobStatus', example='FINISHED'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
    resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgQueryInferenceJobInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgQueryInferenceJobInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Personalizedtxt2imgQueryInferenceJobInfo  Personalizedtxt2imgQueryInferenceJobInfoRequest
  * @return Personalizedtxt2imgQueryInferenceJobInfoResponse
 */
async function personalizedtxt2imgQueryInferenceJobInfo(request: Personalizedtxt2imgQueryInferenceJobInfoRequest): Personalizedtxt2imgQueryInferenceJobInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Personalizedtxt2imgQueryInferenceJobInfo', 'GET', '/api/v1/personalizedtxt2img/queryInferenceJobInfo', 'json', false, 'json', request);
}

model Personalizedtxt2imgQueryModelTrainJobListRequest {
}

model Personalizedtxt2imgQueryModelTrainJobListResponseBody = {
  data?: [ 
    {
      createTime?: string(name='createTime'),
      id?: string(name='id', example='456'),
      imageUrl?: [ string ](name='imageUrl'),
      inferenceImageCount?: int32(name='inferenceImageCount'),
      inferenceJobList?: [ 
        {
          createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
          id?: string(name='id', example='3220'),
          jobStatus?: string(name='jobStatus', example='FINISHED'),
          jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
          modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
          promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
          resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
        }
      ](name='inferenceJobList'),
      jobStatus?: string(name='jobStatus', example='TRAINING'),
      jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
      modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
      name?: string(name='name', example='可爱熊猫模型训练任务'),
      objectType?: string(name='objectType', example='panda'),
    }
  ](name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgQueryModelTrainJobListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgQueryModelTrainJobListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Personalizedtxt2imgQueryModelTrainJobList  Personalizedtxt2imgQueryModelTrainJobListRequest
  * @return Personalizedtxt2imgQueryModelTrainJobListResponse
 */
async function personalizedtxt2imgQueryModelTrainJobList(request: Personalizedtxt2imgQueryModelTrainJobListRequest): Personalizedtxt2imgQueryModelTrainJobListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Personalizedtxt2imgQueryModelTrainJobList', 'GET', '/api/v1/personalizedtxt2img/queryModelTrainJobList', 'json', false, 'json', request);
}

model Personalizedtxt2imgQueryModelTrainStatusRequest {
  modelId: string(name='modelId', description='This parameter is required.', example='modelId-xxxx-xxxx-xxxx', position='Query'),
}

model Personalizedtxt2imgQueryModelTrainStatusResponseBody = {
  data?: {
    modelTrainStatus?: string(name='modelTrainStatus', example='FINISHED'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgQueryModelTrainStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgQueryModelTrainStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Personalizedtxt2imgQueryModelTrainStatus  Personalizedtxt2imgQueryModelTrainStatusRequest
  * @return Personalizedtxt2imgQueryModelTrainStatusResponse
 */
async function personalizedtxt2imgQueryModelTrainStatus(request: Personalizedtxt2imgQueryModelTrainStatusRequest): Personalizedtxt2imgQueryModelTrainStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Personalizedtxt2imgQueryModelTrainStatus', 'GET', '/api/v1/personalizedtxt2img/queryModelTrainStatus', 'json', false, 'json', request);
}

