/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AiContent';
  @version = '20240611';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model OpenApiMultiResponse {
  data?: [ 
    {
      createTime?: string(name='createTime'),
      id?: string(name='id', example='456'),
      imageUrl?: [ string ](name='imageUrl'),
      inferenceImageCount?: int32(name='inferenceImageCount'),
      inferenceJobList?: [ 
        {
          createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
          id?: string(name='id', example='3220'),
          jobStatus?: string(name='jobStatus', example='FINISHED'),
          jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
          modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
          promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
          resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
        }
      ](name='inferenceJobList'),
      jobStatus?: string(name='jobStatus', example='TRAINING'),
      jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
      modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
      name?: string(name='name', example='可爱熊猫模型训练任务'),
      objectType?: string(name='objectType', example='panda'),
    }
  ](name='data', example='[]'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model OpenApiSingleResponse {
  data?: {
    modelTrainStatus?: string(name='modelTrainStatus', example='FINISHED'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode'),
  errMessage?: string(name='errMessage'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model Personalizedtxt2imgAddInferenceJobCmd {
  imageNumber?: int32(name='imageNumber', example='1'),
  modelId: string(name='modelId', description='This parameter is required.', example='xxxx-xxxx-xxxx'),
  prompt: string(name='prompt', description='This parameter is required.', example='a <special-token> in the snow'),
  seed?: int32(name='seed', example='1'),
}

model Personalizedtxt2imgAddModelTrainJobCmd {
  imageUrl: [ string ](name='imageUrl', description='This parameter is required.'),
  name: string(name='name', description='This parameter is required.', example='熊猫图片生成'),
  objectType: string(name='objectType', description='This parameter is required.', example='dog'),
}

model Personalizedtxt2imgInferenceJobInfoDTO {
  createUserId?: string(name='createUserId', example='123456'),
  id?: string(name='id', example='123456'),
  jobStatus?: string(name='jobStatus', example='123456'),
  modelId?: string(name='modelId', example='123456'),
  resultImageUrl?: [ string ](name='resultImageUrl', example='123456'),
}

model Personalizedtxt2imgModelTrainJobInfoDTO {
  createTime?: string(name='CreateTime'),
  createUserId?: string(name='CreateUserId'),
  imageUrl?: [ string ](name='ImageUrl'),
  inferenceJobList?: [
    Personalizedtxt2imgInferenceJobInfoDTO
  ](name='InferenceJobList'),
  jobStatus?: string(name='JobStatus'),
  name?: string(name='Name'),
  objectType?: string(name='ObjectType'),
  id?: string(name='id', example='123456'),
}

model AITeacherExpansionPracticeTaskGenerateRequest {
  grade: string(name='grade', description='This parameter is required.', example='13', position='Body'),
  keySentences?: [ string ](name='keySentences', position='Body'),
  keyWords?: [ string ](name='keyWords', position='Body'),
  learningObject?: string(name='learningObject', example='Understanding unique professions such as dog walkers, hotel test sleepers, and food tasters, including their job responsibilities and the benefits or challenges associated with each role.', position='Body'),
  textContent: string(name='textContent', description='This parameter is required.', example='Dog walker Dog walking, as a profession, originated in the US. Some may think that it\\"s a perfect job, because dog walkers won\\"t be imprisoned in an office. But it\\"s actually manual labour. At their busiest, dog walkers may have more than ten dogs to take care of in a day. Hotel test sleeper A hotel test sleeper, as the name suggests, has to write expert reviews about the facilities, locations, prices, dining and other services of hotels, in order to provide evaluations and guides for travelers. Hotel test sleepers don\\"t need to punch in for work and they get about ten thousand yuan as income every month. What a comfortable job! Food taster In ancient times, a food taster was a person who tasted foods (or drinks) to be served to someone else, to confirm that it was safe to eat. But now, those working as food tasters just get to taste various new foods and drinks aimed at specific regions across the world. They then give their opinions on these products to the companies and suggest improvements.', position='Body'),
  textbook?: string(name='textbook', position='Body'),
  topic: string(name='topic', description='This parameter is required.', example='talk about your dream job.', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='6440xxxxxxxxxx5fafc98c421', position='Body'),
}

model AITeacherExpansionPracticeTaskGenerateResponseBody = {
  data?: {
    backgroundDescription?: string(name='backgroundDescription', example='In a career counseling session, we are going to discuss our dream jobs and the responsibilities associated with them. Alex, who dreams of becoming a professional travel blogger, will share the tasks and skills required for this role, while Jamie, aspiring to be a wildlife photographer, will outline the responsibilities and challenges of capturing nature\\"s moments. Both will explore how their interests align with the practical aspects of their chosen careers, discussing the potential for travel, creativity, and the impact of their work on society and the environment.'),
    roleSet?: {
      assistant?: string(name='assistant', example='Alex'),
      user?: string(name='user', example='Jamie'),
    }(name='roleSet'),
    startSentence?: string(name='startSentence', example='Hey Jamie, do you know what a travel blogger does?'),
    taskContent?: [ 
      {
        assistant?: string(name='assistant', example='Why might some people think dog walking is a great job?'),
        user?: string(name='user', example='They think it\\"s great because they won\\"t be stuck in an office.'),
      }
    ](name='taskContent'),
    taskType?: string(name='taskType', example='textbook_dialogue'),
  }(name='data'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model AITeacherExpansionPracticeTaskGenerateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AITeacherExpansionPracticeTaskGenerateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AITeacherExpansionPracticeTaskGenerate  AITeacherExpansionPracticeTaskGenerateRequest
  * @return AITeacherExpansionPracticeTaskGenerateResponse
 */
async function aITeacherExpansionPracticeTaskGenerate(request: AITeacherExpansionPracticeTaskGenerateRequest): AITeacherExpansionPracticeTaskGenerateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AITeacherExpansionPracticeTaskGenerate', 'POST', '/api/v1/aiteacher/expansionPractice/generateTask', 'json', false, 'json', request);
}

model AITeacherSyncPracticeTaskGenerateRequest {
  grade: string(name='grade', description='This parameter is required.', example='13', position='Body'),
  keySentences?: [ string ](name='keySentences', position='Body'),
  keyWords?: [ string ](name='keyWords', position='Body'),
  learningObject?: string(name='learningObject', example='Understanding unique professions such as dog walkers, hotel test sleepers, and food tasters, including their job responsibilities and the benefits or challenges associated with each role.', position='Body'),
  textContent: string(name='textContent', description='This parameter is required.', example='Dog walker Dog walking, as a profession, originated in the US. Some may think that it\\"s a perfect job, because dog walkers won\\"t be imprisoned in an office. But it\\"s actually manual labour. At their busiest, dog walkers may have more than ten dogs to take care of in a day. Hotel test sleeper A hotel test sleeper, as the name suggests, has to write expert reviews about the facilities, locations, prices, dining and other services of hotels, in order to provide evaluations and guides for travelers. Hotel test sleepers don\\"t need to punch in for work and they get about ten thousand yuan as income every month. What a comfortable job! Food taster In ancient times, a food taster was a person who tasted foods (or drinks) to be served to someone else, to confirm that it was safe to eat. But now, those working as food tasters just get to taste various new foods and drinks aimed at specific regions across the world. They then give their opinions on these products to the companies and suggest improvements.', position='Body'),
  textbook?: string(name='textbook', position='Body'),
  topic: string(name='topic', description='This parameter is required.', example='talk about your dream job.', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='6440xxxxxxxxxx5fafc98c421', position='Body'),
}

model AITeacherSyncPracticeTaskGenerateResponseBody = {
  data?: {
    taskContent?: [ 
      {
        assistant?: string(name='assistant', example='Why might some people think dog walking is a great job?'),
        user?: string(name='user', example='They think it\\"s great because they won\\"t be stuck in an office.'),
      }
    ](name='taskContent'),
    taskType?: string(name='taskType', example='textbook_question_answering'),
  }(name='data'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model AITeacherSyncPracticeTaskGenerateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AITeacherSyncPracticeTaskGenerateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AITeacherSyncPracticeTaskGenerate  AITeacherSyncPracticeTaskGenerateRequest
  * @return AITeacherSyncPracticeTaskGenerateResponse
 */
async function aITeacherSyncPracticeTaskGenerate(request: AITeacherSyncPracticeTaskGenerateRequest): AITeacherSyncPracticeTaskGenerateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AITeacherSyncPracticeTaskGenerate', 'POST', '/api/v1/aiteacher/syncPractice/generateTask', 'json', false, 'json', request);
}

model AliyunConsoleOpenApiQueryAliyunConsoleServcieListRequest {
}

model AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponseBody = {
  data?: [ 
    {
      freeConcurrencyCount?: int32(name='FreeConcurrencyCount', example='10'),
      freeCount?: int32(name='FreeCount', example='100'),
      serviceCode?: string(name='ServiceCode', example='online_ai_algorithm_personalized_text_to_image_call_count'),
      serviceName?: string(name='ServiceName', example='AI算法模型-个性化文生图-在线按量调用'),
    }
  ](name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AliyunConsoleOpenApiQueryAliyunConsoleServcieList  AliyunConsoleOpenApiQueryAliyunConsoleServcieListRequest
  * @return AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponse
 */
async function aliyunConsoleOpenApiQueryAliyunConsoleServcieList(request: AliyunConsoleOpenApiQueryAliyunConsoleServcieListRequest): AliyunConsoleOpenApiQueryAliyunConsoleServcieListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AliyunConsoleOpenApiQueryAliyunConsoleServcieList', 'GET', '/api/v1/aliyunconsole/queryAliyunConsoleServcieList', 'json', false, 'json', request);
}

model AliyunConsoleOpenApiQueryAliyunConsoleServiceListRequest {
}

model AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponseBody = {
  data?: [ 
    {
      freeConcurrencyCount?: int32(name='FreeConcurrencyCount', example='10'),
      freeCount?: int32(name='FreeCount', example='100'),
      serviceCode?: string(name='ServiceCode', example='online_ai_algorithm_personalized_text_to_image_call_count'),
      serviceName?: string(name='ServiceName', example='AI算法模型-个性化文生图-在线按量调用'),
    }
  ](name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AliyunConsoleOpenApiQueryAliyunConsoleServiceList  AliyunConsoleOpenApiQueryAliyunConsoleServiceListRequest
  * @return AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponse
 */
async function aliyunConsoleOpenApiQueryAliyunConsoleServiceList(request: AliyunConsoleOpenApiQueryAliyunConsoleServiceListRequest): AliyunConsoleOpenApiQueryAliyunConsoleServiceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'AliyunConsoleOpenApiQueryAliyunConsoleServiceList', 'GET', '/api/v1/aliyunconsole/queryAliyunConsoleServiceList', 'json', false, 'json', request);
}

model ExecuteAITeacherExpansionDialogueRequest {
  background: string(name='background', description='This parameter is required.', example='In a career counseling session, we are going to discuss our dream jobs and the responsibilities associated with them. Alex, who dreams of becoming a professional travel blogger, will share the tasks and skills required for this role, while Jamie, aspiring to be a wildlife photographer, will outline the responsibilities and challenges of capturing nature\\"s moments. Both will explore how their interests align with the practical aspects of their chosen careers, discussing the potential for travel, creativity, and the impact of their work on society and the environment.', position='Body'),
  dialogueTasks: [ 
    {
      assistant: string(name='assistant', description='This parameter is required.', example='Why might some people think dog walking is a great job?'),
      assistantTranslate?: string(name='assistantTranslate', example='为什么有些人认为遛狗是份好差事?'),
      order: int32(name='order', description='This parameter is required.', example='1'),
      user: string(name='user', description='This parameter is required.', example='They think it\\"s great because they won\\"t be stuck in an office.'),
    }
  ](name='dialogueTasks', description='This parameter is required.', position='Body'),
  languageCode?: string(name='languageCode', example='en-gb', position='Body'),
  records?: [ 
    {
      content: string(name='content', description='This parameter is required.', example='Ask Mark if he has thought about what his dream job might be.'),
      isOffTopicControl?: boolean(name='isOffTopicControl', example='跑题：true, 不跑题：false'),
      isOnTopic?: boolean(name='isOnTopic', example='扣题：true, 不扣题：false'),
      order: int32(name='order', description='This parameter is required.', example='1'),
      role: string(name='role', description='This parameter is required.', example='老师：assistant；学生：user'),
    }
  ](name='records', position='Body'),
  roleInfo: {
    assistant: string(name='assistant', description='This parameter is required.', example='Alex'),
    user: string(name='user', description='This parameter is required.', example='Jamie'),
  }(name='roleInfo', description='This parameter is required.', position='Body'),
  startSentence?: string(name='startSentence', example='Hello Lily, could you please come to the kitchen for a moment?', position='Body'),
  topic: string(name='topic', description='This parameter is required.', example='Let\\"s talk about traffic rules.', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='886eba3702xxxxxxxxx4ba52a87a525', position='Body'),
}

model ExecuteAITeacherExpansionDialogueResponseBody = {
  data?: {
    chineseResult?: string(name='chineseResult', example='1'),
    englishResult?: string(name='englishResult', example='1'),
    isFinish?: boolean(name='isFinish', example='true'),
    isOffTopicControl?: boolean(name='isOffTopicControl', example='true'),
    isOnTopic?: boolean(name='isOnTopic', example='true'),
    questionIndex?: int32(name='questionIndex', example='2'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model ExecuteAITeacherExpansionDialogueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteAITeacherExpansionDialogueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteAITeacherExpansionDialogue  ExecuteAITeacherExpansionDialogueRequest
  * @return ExecuteAITeacherExpansionDialogueResponse
 */
async function executeAITeacherExpansionDialogue(request: ExecuteAITeacherExpansionDialogueRequest): ExecuteAITeacherExpansionDialogueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteAITeacherExpansionDialogue', 'POST', '/api/v1/aiteacher/expansionPractice/executeExpansionTraining', 'json', false, 'json', request);
}

model ExecuteAITeacherExpansionDialogueRefineRequest {
  background: string(name='background', description='This parameter is required.', example='In a career counseling session, we are going to discuss our dream jobs and the responsibilities associated with them. Alex, who dreams of becoming a professional travel blogger, will share the tasks and skills required for this role, while Jamie, aspiring to be a wildlife photographer, will outline the responsibilities and challenges of capturing nature\\"s moments. Both will explore how their interests align with the practical aspects of their chosen careers, discussing the potential for travel, creativity, and the impact of their work on society and the environment.', position='Body'),
  dialogueTasks: [ 
    {
      assistant: string(name='assistant', description='This parameter is required.', example='Why might some people think dog walking is a great job?'),
      assistantTranslate?: string(name='assistantTranslate', example='为什么有些人认为遛狗是份好差事?'),
      order: int32(name='order', description='This parameter is required.', example='1'),
      user: string(name='user', description='This parameter is required.', example='They think it\\"s great because they won\\"t be stuck in an office.'),
    }
  ](name='dialogueTasks', description='This parameter is required.', position='Body'),
  languageCode?: string(name='languageCode', example='en-gb', position='Body'),
  records: [ 
    {
      content: string(name='content', description='This parameter is required.', example='Ask Mark if he has thought about what his dream job might be.'),
      isOffTopicControl?: boolean(name='isOffTopicControl', example='跑题：true, 不跑题：false'),
      isOnTopic?: boolean(name='isOnTopic', example='扣题：true, 不扣题：false'),
      order: int32(name='order', description='This parameter is required.', example='1'),
      role: string(name='role', description='This parameter is required.', example='老师：assistant；学生：user'),
    }
  ](name='records', description='This parameter is required.', position='Body'),
  roleInfo: {
    assistant: string(name='assistant', description='This parameter is required.', example='Jane, a caring mother'),
    user: string(name='user', description='This parameter is required.', example='Lily, a friendly student'),
  }(name='roleInfo', description='This parameter is required.', position='Body'),
  startSentence?: string(name='startSentence', example='Hello Lily, could you please come to the kitchen for a moment?', position='Body'),
  topic: string(name='topic', description='This parameter is required.', example='talk about your dream job.', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='886eba3702xxxxxxxxx4ba52a87a525', position='Body'),
}

model ExecuteAITeacherExpansionDialogueRefineResponseBody = {
  data?: {
    result?: string(name='result', example='Yes, I\\"ll be right there.'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model ExecuteAITeacherExpansionDialogueRefineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteAITeacherExpansionDialogueRefineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteAITeacherExpansionDialogueRefine  ExecuteAITeacherExpansionDialogueRefineRequest
  * @return ExecuteAITeacherExpansionDialogueRefineResponse
 */
async function executeAITeacherExpansionDialogueRefine(request: ExecuteAITeacherExpansionDialogueRefineRequest): ExecuteAITeacherExpansionDialogueRefineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteAITeacherExpansionDialogueRefine', 'POST', '/api/v1/aiteacher/expansionPractice/refineByContext', 'json', false, 'json', request);
}

model ExecuteAITeacherExpansionDialogueTranslateRequest {
  background: string(name='background', description='This parameter is required.', example='In this dialogue, you will be playing the role of Lily, a young girl. I will be Jane, Lily\\"s mother. We are in the kitchen, where I am preparing dinner. I am asking you about your food preferences, specifically if you like meat, fish, and milk. You like meat and milk, but you don\\"t like fish because of its smell. I explain to you the nutritional benefits of these foods and suggest alternatives for the ones you don\\"t like. Finally, I invite you to start eating.', position='Body'),
  dialogueTasks: [ 
    {
      assistant: string(name='assistant', description='This parameter is required.', example='Why might some people think dog walking is a great job?'),
      assistantTranslate?: string(name='assistantTranslate', example='为什么有些人认为遛狗是份好差事?'),
      order: int32(name='order', description='This parameter is required.', example='1'),
      user: string(name='user', description='This parameter is required.', example='They think it\\"s great because they won\\"t be stuck in an office.'),
    }
  ](name='dialogueTasks', description='This parameter is required.', position='Body'),
  records?: [ 
    {
      content: string(name='content', description='This parameter is required.', example='Ask Mark if he has thought about what his dream job might be.'),
      isOffTopicControl?: boolean(name='isOffTopicControl', example='跑题：true, 不跑题：false'),
      isOnTopic?: boolean(name='isOnTopic', example='扣题：true, 不扣题：false'),
      order: int32(name='order', description='This parameter is required.', example='1'),
      role: string(name='role', description='This parameter is required.', example='老师：assistant；学生：user'),
    }
  ](name='records', position='Body'),
  roleInfo: {
    assistant: string(name='assistant', description='This parameter is required.', example='Jane, a caring mother'),
    user: string(name='user', description='This parameter is required.', example='Lily, a friendly student'),
  }(name='roleInfo', description='This parameter is required.', position='Body'),
  startSentence?: string(name='startSentence', example='Hello Lily, could you please come to the kitchen for a moment?', position='Body'),
  topic: string(name='topic', description='This parameter is required.', example='talk about food.', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='886eba3702xxxxxxxxx4ba52a87a525', position='Body'),
}

model ExecuteAITeacherExpansionDialogueTranslateResponseBody = {
  data?: {
    result?: string(name='result', example='太好了，谢谢你过来，莉莉。你喜欢吃肉吗？'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model ExecuteAITeacherExpansionDialogueTranslateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteAITeacherExpansionDialogueTranslateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteAITeacherExpansionDialogueTranslate  ExecuteAITeacherExpansionDialogueTranslateRequest
  * @return ExecuteAITeacherExpansionDialogueTranslateResponse
 */
async function executeAITeacherExpansionDialogueTranslate(request: ExecuteAITeacherExpansionDialogueTranslateRequest): ExecuteAITeacherExpansionDialogueTranslateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteAITeacherExpansionDialogueTranslate', 'POST', '/api/v1/aiteacher/expansionPractice/translate', 'json', false, 'json', request);
}

model ExecuteAITeacherGrammarCheckRequest {
  content: string(name='content', description='This parameter is required.', example='i is good', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='886eba3702xxxxxxxxx4ba52a87a525', position='Body'),
}

model ExecuteAITeacherGrammarCheckResponseBody = {
  data?: {
    analysis?: string(name='analysis', example='主语 "I" 对应的动词应该是 "am" 而不是 "is"。'),
    correction?: string(name='correction', example='I am good.'),
    correctionStatus?: string(name='correctionStatus', example='Has_Error'),
    errorReason?: string(name='errorReason'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model ExecuteAITeacherGrammarCheckResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteAITeacherGrammarCheckResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteAITeacherGrammarCheck  ExecuteAITeacherGrammarCheckRequest
  * @return ExecuteAITeacherGrammarCheckResponse
 */
async function executeAITeacherGrammarCheck(request: ExecuteAITeacherGrammarCheckRequest): ExecuteAITeacherGrammarCheckResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteAITeacherGrammarCheck', 'POST', '/api/v1/aiteacher/common/grammarChecking', 'json', false, 'json', request);
}

model ExecuteAITeacherSyncDialogueRequest {
  dialogueTasks: [ 
    {
      assistant: string(name='assistant', description='This parameter is required.', example='Why might some people think dog walking is a great job?'),
      assistantTranslate?: string(name='assistantTranslate', example='为什么有些人认为遛狗是份好差事?'),
      order: int32(name='order', description='This parameter is required.', example='1'),
      user: string(name='user', description='This parameter is required.', example='They think it\\"s great because they won\\"t be stuck in an office.'),
    }
  ](name='dialogueTasks', description='This parameter is required.', position='Body'),
  languageCode?: string(name='languageCode', example='en-gb', position='Body'),
  records?: [ 
    {
      content: string(name='content', description='This parameter is required.', example='Ask Mark if he has thought about what his dream job might be.'),
      isOffTopicControl?: boolean(name='isOffTopicControl', example='跑题：true, 不跑题：false'),
      isOnTopic?: boolean(name='isOnTopic', example='扣题：true, 不扣题：false'),
      order: int32(name='order', description='This parameter is required.', example='1'),
      role: string(name='role', description='This parameter is required.', example='老师：assistant；学生：user'),
    }
  ](name='records', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='886eba3702xxxxxxxxx4ba52a87a525', position='Body'),
}

model ExecuteAITeacherSyncDialogueResponseBody = {
  data?: {
    englishResult?: string(name='englishResult', example='Thanks, Lily. Do you like meat, Lily?'),
    isFinish?: boolean(name='isFinish', example='true'),
    isOnTopic?: boolean(name='isOnTopic', example='true'),
    questionIndex?: int32(name='questionIndex', example='2'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model ExecuteAITeacherSyncDialogueResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteAITeacherSyncDialogueResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteAITeacherSyncDialogue  ExecuteAITeacherSyncDialogueRequest
  * @return ExecuteAITeacherSyncDialogueResponse
 */
async function executeAITeacherSyncDialogue(request: ExecuteAITeacherSyncDialogueRequest): ExecuteAITeacherSyncDialogueResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteAITeacherSyncDialogue', 'POST', '/api/v1/aiteacher/syncPractice/executeSyncTraining', 'json', false, 'json', request);
}

model ExecuteAITeacherSyncDialogueTranslateRequest {
  dialogueTasks: [ 
    {
      assistant: string(name='assistant', description='This parameter is required.', example='Why might some people think dog walking is a great job?'),
      assistantTranslate?: string(name='assistantTranslate', example='为什么有些人认为遛狗是份好差事?'),
      order: int32(name='order', description='This parameter is required.', example='1'),
      user: string(name='user', description='This parameter is required.', example='They think it\\"s great because they won\\"t be stuck in an office.'),
    }
  ](name='dialogueTasks', description='This parameter is required.', position='Body'),
  records?: [ 
    {
      content: string(name='content', description='This parameter is required.', example='Ask Mark if he has thought about what his dream job might be.'),
      isOffTopicControl?: boolean(name='isOffTopicControl', example='跑题：true, 不跑题：false'),
      isOnTopic?: boolean(name='isOnTopic', example='扣题：true, 不扣题：false'),
      order: int32(name='order', description='This parameter is required.', example='1'),
      role: string(name='role', description='This parameter is required.', example='老师：assistant；学生：user'),
    }
  ](name='records', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='886eba3702xxxxxxxxx4ba52a87a525', position='Body'),
}

model ExecuteAITeacherSyncDialogueTranslateResponseBody = {
  data?: {
    result?: string(name='result', example='太好了，谢谢你过来，莉莉。你喜欢吃肉吗？'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model ExecuteAITeacherSyncDialogueTranslateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ExecuteAITeacherSyncDialogueTranslateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ExecuteAITeacherSyncDialogueTranslate  ExecuteAITeacherSyncDialogueTranslateRequest
  * @return ExecuteAITeacherSyncDialogueTranslateResponse
 */
async function executeAITeacherSyncDialogueTranslate(request: ExecuteAITeacherSyncDialogueTranslateRequest): ExecuteAITeacherSyncDialogueTranslateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ExecuteAITeacherSyncDialogueTranslate', 'POST', '/api/v1/aiteacher/syncPractice/translate', 'json', false, 'json', request);
}

model GetAITeacherExpansionDialogueSuggestionRequest {
  background: string(name='background', description='This parameter is required.', example='In a career counseling session, we are going to discuss our dream jobs and the responsibilities associated with them. Alex, who dreams of becoming a professional travel blogger, will share the tasks and skills required for this role, while Jamie, aspiring to be a wildlife photographer, will outline the responsibilities and challenges of capturing nature\\"s moments. Both will explore how their interests align with the practical aspects of their chosen careers, discussing the potential for travel, creativity, and the impact of their work on society and the environment.', position='Body'),
  dialogueTasks: [ 
    {
      assistant: string(name='assistant', description='This parameter is required.', example='Why might some people think dog walking is a great job?'),
      assistantTranslate?: string(name='assistantTranslate', example='为什么有些人认为遛狗是份好差事?'),
      order: int32(name='order', description='This parameter is required.', example='1'),
      user: string(name='user', description='This parameter is required.', example='They think it\\"s great because they won\\"t be stuck in an office.'),
    }
  ](name='dialogueTasks', description='This parameter is required.', position='Body'),
  languageCode?: string(name='languageCode', example='en-gb', position='Body'),
  records: [ 
    {
      content: string(name='content', description='This parameter is required.', example='Ask Mark if he has thought about what his dream job might be.'),
      isOffTopicControl?: boolean(name='isOffTopicControl', example='跑题：true, 不跑题：false'),
      isOnTopic?: boolean(name='isOnTopic', example='扣题：true, 不扣题：false'),
      order: int32(name='order', description='This parameter is required.', example='1'),
      role: string(name='role', description='This parameter is required.', example='老师：assistant；学生：user'),
    }
  ](name='records', description='This parameter is required.', position='Body'),
  roleInfo: {
    assistant: string(name='assistant', description='This parameter is required.', example='Alex'),
    user: string(name='user', description='This parameter is required.', example='Jamie'),
  }(name='roleInfo', description='This parameter is required.', position='Body'),
  startSentence?: string(name='startSentence', example='Hello Lily, could you please come to the kitchen for a moment?', position='Body'),
  topic: string(name='topic', description='This parameter is required.', example='Let\\"s talk about traffic rules.', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='886eba3702xxxxxxxxx4ba52a87a525', position='Body'),
}

model GetAITeacherExpansionDialogueSuggestionResponseBody = {
  data?: {
    chineseResult?: string(name='chineseResult', example='谢谢莉莉.你喜欢吃肉吗，莉莉？'),
    englishResult?: string(name='englishResult', example='Thanks, Lily. Do you like meat, Lily?'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model GetAITeacherExpansionDialogueSuggestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAITeacherExpansionDialogueSuggestionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAITeacherExpansionDialogueSuggestion  GetAITeacherExpansionDialogueSuggestionRequest
  * @return GetAITeacherExpansionDialogueSuggestionResponse
 */
async function getAITeacherExpansionDialogueSuggestion(request: GetAITeacherExpansionDialogueSuggestionRequest): GetAITeacherExpansionDialogueSuggestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAITeacherExpansionDialogueSuggestion', 'POST', '/api/v1/aiteacher/expansionPractice/suggestion', 'json', false, 'json', request);
}

model GetAITeacherSyncDialogueSuggestionRequest {
  dialogueTasks: [ 
    {
      assistant: string(name='assistant', description='This parameter is required.', example='Why might some people think dog walking is a great job?'),
      assistantTranslate?: string(name='assistantTranslate', example='为什么有些人认为遛狗是份好差事?'),
      order: int32(name='order', description='This parameter is required.', example='1'),
      user: string(name='user', description='This parameter is required.', example='They think it\\"s great because they won\\"t be stuck in an office.'),
    }
  ](name='dialogueTasks', description='This parameter is required.', position='Body'),
  languageCode?: string(name='languageCode', example='en-gb', position='Body'),
  records: [ 
    {
      content: string(name='content', description='This parameter is required.', example='Ask Mark if he has thought about what his dream job might be.'),
      isOffTopicControl?: boolean(name='isOffTopicControl', example='跑题：true, 不跑题：false'),
      isOnTopic?: boolean(name='isOnTopic', example='扣题：true, 不扣题：false'),
      order: int32(name='order', description='This parameter is required.', example='1'),
      role: string(name='role', description='This parameter is required.', example='老师：assistant；学生：user'),
    }
  ](name='records', description='This parameter is required.', position='Body'),
  userId: string(name='userId', description='This parameter is required.', example='886eba3702xxxxxxxxx4ba52a87a525', position='Body'),
}

model GetAITeacherSyncDialogueSuggestionResponseBody = {
  data?: {
    englishResult?: string(name='englishResult', example='Thanks, Lily. Do you like meat, Lily?'),
    englishResult1?: string(name='englishResult1', example='谢谢莉莉.你喜欢吃肉吗，莉莉？'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model GetAITeacherSyncDialogueSuggestionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetAITeacherSyncDialogueSuggestionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetAITeacherSyncDialogueSuggestion  GetAITeacherSyncDialogueSuggestionRequest
  * @return GetAITeacherSyncDialogueSuggestionResponse
 */
async function getAITeacherSyncDialogueSuggestion(request: GetAITeacherSyncDialogueSuggestionRequest): GetAITeacherSyncDialogueSuggestionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAITeacherSyncDialogueSuggestion', 'POST', '/api/v1/aiteacher/syncPractice/suggestion', 'json', false, 'json', request);
}

model PersonalizedTextToImageAddInferenceJobRequest {
  imageNumber?: int32(name='imageNumber', example='1', position='Body'),
  imageUrl: [ string ](name='imageUrl', description='This parameter is required.', position='Body'),
  prompt: string(name='prompt', description='This parameter is required.', example='a <special-token> in the snow', position='Body'),
  seed?: long(name='seed', example='1', position='Body'),
  strength?: double(name='strength', example='1', position='Body'),
  trainSteps?: int32(name='trainSteps', example='800', position='Body'),
}

model PersonalizedTextToImageAddInferenceJobResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
    id?: string(name='id', example='3220'),
    jobStatus?: string(name='jobStatus', example='FINISHED'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    promptId?: string(name='promptId', description='promptId', example='promptId-xxxx-xxxx-xxxx'),
    resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model PersonalizedTextToImageAddInferenceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PersonalizedTextToImageAddInferenceJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PersonalizedTextToImageAddInferenceJob  PersonalizedTextToImageAddInferenceJobRequest
  * @return PersonalizedTextToImageAddInferenceJobResponse
 */
async function personalizedTextToImageAddInferenceJob(request: PersonalizedTextToImageAddInferenceJobRequest): PersonalizedTextToImageAddInferenceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PersonalizedTextToImageAddInferenceJob', 'POST', '/api/v1/personalizedtxt2img/addPreModelInferenceJob', 'json', false, 'json', request);
}

model PersonalizedTextToImageQueryImageAssetRequest {
  encodeFormat?: string(name='encodeFormat', example='base64', position='Query'),
  imageId: string(name='imageId', description='This parameter is required.', example='0000.png', position='Query'),
}

model PersonalizedTextToImageQueryImageAssetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: any(name='body'),
}

/**
  * @param request  the request parameters of PersonalizedTextToImageQueryImageAsset  PersonalizedTextToImageQueryImageAssetRequest
  * @return PersonalizedTextToImageQueryImageAssetResponse
 */
async function personalizedTextToImageQueryImageAsset(request: PersonalizedTextToImageQueryImageAssetRequest): PersonalizedTextToImageQueryImageAssetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PersonalizedTextToImageQueryImageAsset', 'GET', '/api/v1/personalizedtxt2img/queryImageAssetFromImageId', 'any', false, 'json', request);
}

model PersonalizedTextToImageQueryPreModelInferenceJobInfoRequest {
  inferenceJobId: string(name='inferenceJobId', description='This parameter is required.', example='girl-xxxx-xxxx-xxxx-xxxx', position='Query'),
}

model PersonalizedTextToImageQueryPreModelInferenceJobInfoResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
    id?: string(name='id', example='3220'),
    jobStatus?: string(name='jobStatus', example='FINISHED'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    promptId?: string(name='promptId', description='promptId', example='promptId-xxxx-xxxx-xxxx'),
    resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model PersonalizedTextToImageQueryPreModelInferenceJobInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PersonalizedTextToImageQueryPreModelInferenceJobInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PersonalizedTextToImageQueryPreModelInferenceJobInfo  PersonalizedTextToImageQueryPreModelInferenceJobInfoRequest
  * @return PersonalizedTextToImageQueryPreModelInferenceJobInfoResponse
 */
async function personalizedTextToImageQueryPreModelInferenceJobInfo(request: PersonalizedTextToImageQueryPreModelInferenceJobInfoRequest): PersonalizedTextToImageQueryPreModelInferenceJobInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PersonalizedTextToImageQueryPreModelInferenceJobInfo', 'GET', '/api/v1/personalizedtxt2img/queryPreModelInferenceJobInfo', 'json', false, 'json', request);
}

model Personalizedtxt2imgAddInferenceJobRequest {
  imageNumber?: int32(name='imageNumber', example='1', position='Body'),
  modelId: string(name='modelId', description='This parameter is required.', example='xxxx-xxxx-xxxx', position='Body'),
  prompt: string(name='prompt', description='This parameter is required.', example='a <special-token> in the snow', position='Body'),
  seed?: long(name='seed', example='1', position='Body'),
}

model Personalizedtxt2imgAddInferenceJobResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
    id?: string(name='id', example='3220'),
    jobStatus?: string(name='jobStatus', example='FINISHED'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
    resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgAddInferenceJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgAddInferenceJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Personalizedtxt2imgAddInferenceJob  Personalizedtxt2imgAddInferenceJobRequest
  * @return Personalizedtxt2imgAddInferenceJobResponse
 */
async function personalizedtxt2imgAddInferenceJob(request: Personalizedtxt2imgAddInferenceJobRequest): Personalizedtxt2imgAddInferenceJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Personalizedtxt2imgAddInferenceJob', 'POST', '/api/v1/personalizedtxt2img/addInferenceJob', 'json', false, 'json', request);
}

model Personalizedtxt2imgAddModelTrainJobRequest {
  imageUrl: [ string ](name='imageUrl', description='This parameter is required.', position='Body'),
  name: string(name='name', description='This parameter is required.', example='熊猫图片生成', position='Body'),
  objectType: string(name='objectType', description='This parameter is required.', example='dog', position='Body'),
  trainSteps?: int32(name='trainSteps', example='800', position='Body'),
}

model Personalizedtxt2imgAddModelTrainJobResponseBody = {
  data?: {
    createTime?: string(name='createTime'),
    id?: string(name='id', example='456'),
    imageUrl?: [ string ](name='imageUrl'),
    inferenceImageCount?: int32(name='inferenceImageCount'),
    inferenceJobList?: [ 
      {
        createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
        id?: string(name='id', example='3220'),
        jobStatus?: string(name='jobStatus', example='FINISHED'),
        jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
        modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
        promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
        resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
      }
    ](name='inferenceJobList'),
    jobStatus?: string(name='jobStatus', example='TRAINING'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    name?: string(name='name', example='可爱熊猫模型训练任务'),
    objectType?: string(name='objectType', example='panda'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgAddModelTrainJobResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgAddModelTrainJobResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Personalizedtxt2imgAddModelTrainJob  Personalizedtxt2imgAddModelTrainJobRequest
  * @return Personalizedtxt2imgAddModelTrainJobResponse
 */
async function personalizedtxt2imgAddModelTrainJob(request: Personalizedtxt2imgAddModelTrainJobRequest): Personalizedtxt2imgAddModelTrainJobResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Personalizedtxt2imgAddModelTrainJob', 'POST', '/api/v1/personalizedtxt2img/addModelTrainJob', 'json', false, 'json', request);
}

model Personalizedtxt2imgQueryImageAssetRequest {
  encodeFormat?: string(name='encodeFormat', example='base64', position='Query'),
  imageId: string(name='imageId', description='This parameter is required.', example='0000.png', position='Query'),
  modelId: string(name='modelId', description='This parameter is required.', example='girl-xxxx-xxxx-xxxx-xxxx', position='Query'),
  promptId: string(name='promptId', description='This parameter is required.', example='xxxx-xxxx-xxxx-xxxx', position='Query'),
}

model Personalizedtxt2imgQueryImageAssetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: any(name='body'),
}

/**
  * @param request  the request parameters of Personalizedtxt2imgQueryImageAsset  Personalizedtxt2imgQueryImageAssetRequest
  * @return Personalizedtxt2imgQueryImageAssetResponse
 */
async function personalizedtxt2imgQueryImageAsset(request: Personalizedtxt2imgQueryImageAssetRequest): Personalizedtxt2imgQueryImageAssetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Personalizedtxt2imgQueryImageAsset', 'GET', '/api/v1/personalizedtxt2img/queryImageAsset', 'any', false, 'json', request);
}

model Personalizedtxt2imgQueryInferenceJobInfoRequest {
  inferenceJobId: string(name='inferenceJobId', description='This parameter is required.', example='180', position='Query'),
}

model Personalizedtxt2imgQueryInferenceJobInfoResponseBody = {
  data?: {
    createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
    id?: string(name='id', example='3220'),
    jobStatus?: string(name='jobStatus', example='FINISHED'),
    jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
    modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
    promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
    resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgQueryInferenceJobInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgQueryInferenceJobInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Personalizedtxt2imgQueryInferenceJobInfo  Personalizedtxt2imgQueryInferenceJobInfoRequest
  * @return Personalizedtxt2imgQueryInferenceJobInfoResponse
 */
async function personalizedtxt2imgQueryInferenceJobInfo(request: Personalizedtxt2imgQueryInferenceJobInfoRequest): Personalizedtxt2imgQueryInferenceJobInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Personalizedtxt2imgQueryInferenceJobInfo', 'GET', '/api/v1/personalizedtxt2img/queryInferenceJobInfo', 'json', false, 'json', request);
}

model Personalizedtxt2imgQueryModelTrainJobListRequest {
}

model Personalizedtxt2imgQueryModelTrainJobListResponseBody = {
  data?: [ 
    {
      createTime?: string(name='createTime'),
      id?: string(name='id', example='456'),
      imageUrl?: [ string ](name='imageUrl'),
      inferenceImageCount?: int32(name='inferenceImageCount'),
      inferenceJobList?: [ 
        {
          createTime?: string(name='createTime', example='2023-12-25T12:00:00'),
          id?: string(name='id', example='3220'),
          jobStatus?: string(name='jobStatus', example='FINISHED'),
          jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
          modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
          promptId?: string(name='promptId', example='promptId-xxxx-xxxx-xxxx'),
          resultImageUrl?: [ string ](name='resultImageUrl', example='0000.png'),
        }
      ](name='inferenceJobList'),
      jobStatus?: string(name='jobStatus', example='TRAINING'),
      jobTrainProgress?: double(name='jobTrainProgress', example='0.5'),
      modelId?: string(name='modelId', example='modelId-xxxx-xxxx-xxxx'),
      name?: string(name='name', example='可爱熊猫模型训练任务'),
      objectType?: string(name='objectType', example='panda'),
    }
  ](name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgQueryModelTrainJobListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgQueryModelTrainJobListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Personalizedtxt2imgQueryModelTrainJobList  Personalizedtxt2imgQueryModelTrainJobListRequest
  * @return Personalizedtxt2imgQueryModelTrainJobListResponse
 */
async function personalizedtxt2imgQueryModelTrainJobList(request: Personalizedtxt2imgQueryModelTrainJobListRequest): Personalizedtxt2imgQueryModelTrainJobListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Personalizedtxt2imgQueryModelTrainJobList', 'GET', '/api/v1/personalizedtxt2img/queryModelTrainJobList', 'json', false, 'json', request);
}

model Personalizedtxt2imgQueryModelTrainStatusRequest {
  modelId: string(name='modelId', description='This parameter is required.', example='modelId-xxxx-xxxx-xxxx', position='Query'),
}

model Personalizedtxt2imgQueryModelTrainStatusResponseBody = {
  data?: {
    modelTrainStatus?: string(name='modelTrainStatus', example='FINISHED'),
  }(name='data', example='[]'),
  errCode?: string(name='errCode', example='UNKNOWN_ERROR'),
  errMessage?: string(name='errMessage', example='未知错误'),
  httpStatusCode?: int32(name='httpStatusCode', example='200'),
  requestId?: string(name='requestId', example='xxxx-xxxx-xxxx-xxxxxxxx'),
  success?: boolean(name='success', example='true'),
}

model Personalizedtxt2imgQueryModelTrainStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Personalizedtxt2imgQueryModelTrainStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of Personalizedtxt2imgQueryModelTrainStatus  Personalizedtxt2imgQueryModelTrainStatusRequest
  * @return Personalizedtxt2imgQueryModelTrainStatusResponse
 */
async function personalizedtxt2imgQueryModelTrainStatus(request: Personalizedtxt2imgQueryModelTrainStatusRequest): Personalizedtxt2imgQueryModelTrainStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'Personalizedtxt2imgQueryModelTrainStatus', 'GET', '/api/v1/personalizedtxt2img/queryModelTrainStatus', 'json', false, 'json', request);
}

