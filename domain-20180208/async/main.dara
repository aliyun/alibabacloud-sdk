/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Domain';
  @version = '2018-02-08';
  @endpointRule = 'central';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AcceptDemandRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='SE20183A0Q7C5556', position='Query'),
  message?: string(name='Message', minLength=1, position='Query'),
}

model AcceptDemandResponseBody = {
  bindUrl?: string(name='BindUrl'),
  requestId?: string(name='RequestId', example='497F7522-82B0-4BD4-84FE-AE8749E4C2F9'),
}

model AcceptDemandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AcceptDemandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AcceptDemand  AcceptDemandRequest
  * @return AcceptDemandResponse
 */
async function acceptDemand(request: AcceptDemandRequest): AcceptDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AcceptDemand', 'POST', '/', 'json', false, 'json', request);
}

model BatchIntrudeDomainsRequest {
  domainNames?: [ string ](name='DomainNames', shrink='json', position='Query'),
}

model BatchIntrudeDomainsResponseBody = {
  data?: {
    failureCount?: int32(name='FailureCount'),
    failureList?: [ 
      {
        domainName?: string(name='DomainName'),
        errorCode?: string(name='ErrorCode'),
        errorMsg?: string(name='ErrorMsg'),
        success?: boolean(name='Success'),
      }
    ](name='FailureList'),
    successCount?: int32(name='SuccessCount'),
    successList?: [ 
      {
        domainName?: string(name='DomainName'),
        errorCode?: string(name='ErrorCode'),
        errorMsg?: string(name='ErrorMsg'),
        success?: boolean(name='Success'),
      }
    ](name='SuccessList'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
}

model BatchIntrudeDomainsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchIntrudeDomainsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchIntrudeDomains  BatchIntrudeDomainsRequest
  * @return BatchIntrudeDomainsResponse
 */
async function batchIntrudeDomains(request: BatchIntrudeDomainsRequest): BatchIntrudeDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchIntrudeDomains', 'POST', '/', 'json', false, 'json', request);
}

model BatchQueryPushStatusRequest {
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='FFqBJBxE8I0PE0IUO6K69k7pmbXbaAXBUMUwC3LZW7xPBVA7dWZKlxBcjUwOV0imSM', position='Query'),
  outBizIds: [ string ](name='OutBizIds', description='This parameter is required.', example='["NL202501", "NL202502"]', shrink='json', position='Query'),
  pageNum?: long(name='PageNum', example='1', position='Query'),
  pageSize?: long(name='PageSize', example='50', position='Query'),
}

model BatchQueryPushStatusResponseBody = {
  allowRetry?: boolean(name='AllowRetry', example='False'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  maxResults?: int32(name='MaxResults', example='10'),
  module?: {
    pushResults?: [ 
      {
        outBizId?: string(name='OutBizId', example='20250518100817SjskYtIe'),
        pushNo?: string(name='PushNo', example='123213231123'),
        status?: string(name='Status', example='RECEIVE_SUCCESS'),
        statusDesc?: string(name='StatusDesc', example='接收成功'),
      }
    ](name='PushResults'),
  }(name='Module'),
  nextToken?: string(name='NextToken', example='AAAAAdDWBF2w6Olxc+cMPjUtUMpkYDWvKnFIdUFubQkRvn9xkmy/JSvFWO/sGLK3bhha5w=='),
  requestId?: string(name='RequestId', example='2DEDFF32-7827-46B1-BE90-3DB8ABD91A58'),
  success?: boolean(name='Success', example='true'),
}

model BatchQueryPushStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchQueryPushStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchQueryPushStatus  BatchQueryPushStatusRequest
  * @return BatchQueryPushStatusResponse
 */
async function batchQueryPushStatus(request: BatchQueryPushStatusRequest): BatchQueryPushStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchQueryPushStatus', 'POST', '/', 'json', false, 'json', request);
}

model BatchRecallPushRequest {
  outBizIds: [ string ](name='OutBizIds', description='This parameter is required.', example='["NL12312323123", "NL12312323124"]', shrink='json', position='Query'),
}

model BatchRecallPushResponseBody = {
  allowRetry?: boolean(name='AllowRetry', example='False'),
  httpStatusCode?: long(name='HttpStatusCode', example='200'),
  module?: {
    recallResults?: [ 
      {
        code?: string(name='Code', example='SUCCESS'),
        message?: string(name='Message', example='成功'),
        outBizId?: string(name='OutBizId', example='NL20250508100515000002'),
        success?: boolean(name='Success', example='True'),
      }
    ](name='RecallResults'),
  }(name='Module'),
  requestId?: string(name='RequestId', example='C39ECA8A-BB5E-4F92-B013-6A032FA06B04'),
  success?: boolean(name='Success', example='True'),
}

model BatchRecallPushResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BatchRecallPushResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BatchRecallPush  BatchRecallPushRequest
  * @return BatchRecallPushResponse
 */
async function batchRecallPush(request: BatchRecallPushRequest): BatchRecallPushResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BatchRecallPush', 'POST', '/', 'json', false, 'json', request);
}

model BidDomainRequest {
  auctionId: string(name='AuctionId', description='This parameter is required.', example='12345678', position='Body'),
  currency: string(name='Currency', description='This parameter is required.', example='RMB', position='Body'),
  maxBid: float(name='MaxBid', description='This parameter is required.', example='100', position='Body'),
}

model BidDomainResponseBody = {
  auctionId?: string(name='AuctionId', example='12345678'),
  requestId?: string(name='RequestId', example='CC615585-9D93-4179-BD16-09337E32A3A7'),
}

model BidDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BidDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of BidDomain  BidDomainRequest
  * @return BidDomainResponse
 */
async function bidDomain(request: BidDomainRequest): BidDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BidDomain', 'POST', '/', 'json', true, 'form', request);
}

model ChangeAuctionRequest {
  auctionList?: [ 
    {
      bidRecords?: [ 
        {
          createTime: string(name='CreateTime', description='This parameter is required.'),
          price: float(name='Price', description='This parameter is required.'),
          userId: string(name='UserId', description='This parameter is required.'),
        }
      ](name='BidRecords'),
      domainName: string(name='DomainName', description='This parameter is required.'),
      endTime: string(name='EndTime', description='This parameter is required.'),
      isReserve?: int32(name='IsReserve'),
      reservePrice?: float(name='ReservePrice'),
      reserveRange?: string(name='ReserveRange'),
      status?: string(name='Status'),
      timeLeft?: long(name='TimeLeft'),
      winner: string(name='Winner', description='This parameter is required.'),
      winnerPrice: float(name='WinnerPrice', description='This parameter is required.'),
    }
  ](name='AuctionList', position='Body'),
}

model ChangeAuctionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ChangeAuctionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeAuctionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeAuction  ChangeAuctionRequest
  * @return ChangeAuctionResponse
 */
async function changeAuction(request: ChangeAuctionRequest): ChangeAuctionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeAuction', 'POST', '/', 'json', true, 'form', request);
}

model CheckDomainStatusRequest {
  domain: string(name='Domain', description='This parameter is required.', position='Query'),
}

model CheckDomainStatusResponseBody = {
  errorCode?: string(name='ErrorCode'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  module?: {
    deadDate?: long(name='DeadDate'),
    domain?: string(name='Domain'),
    endTime?: long(name='EndTime'),
    price?: float(name='Price'),
    regDate?: long(name='RegDate'),
  }(name='Module'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckDomainStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckDomainStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckDomainStatus  CheckDomainStatusRequest
  * @return CheckDomainStatusResponse
 */
async function checkDomainStatus(request: CheckDomainStatusRequest): CheckDomainStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckDomainStatus', 'GET', '/', 'json', false, 'json', request);
}

model CheckPushReceiverRequest {
  receiverAccount: string(name='ReceiverAccount', description='This parameter is required.', example='破天荒的土豆', position='Query'),
}

model CheckPushReceiverResponseBody = {
  module?: {
    canReceivePush?: boolean(name='CanReceivePush', example='true'),
    maskedMobile?: string(name='MaskedMobile', example='130****8600'),
    reasonCode?: string(name='ReasonCode', example='None'),
  }(name='Module'),
  requestId?: string(name='RequestId', example='78C60CC3-FF0A-44E2-989A-DDE0597791C3'),
}

model CheckPushReceiverResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckPushReceiverResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckPushReceiver  CheckPushReceiverRequest
  * @return CheckPushReceiverResponse
 */
async function checkPushReceiver(request: CheckPushReceiverRequest): CheckPushReceiverResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckPushReceiver', 'POST', '/', 'json', false, 'json', request);
}

model CheckSelectedDomainStatusRequest {
  domain: string(name='Domain', description='This parameter is required.', example='example.com', position='Query'),
}

model CheckSelectedDomainStatusResponseBody = {
  errorCode?: string(name='ErrorCode', example='OssFileNotFound'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  module?: {
    deadDate?: long(name='DeadDate', example='1567353497'),
    domain?: string(name='Domain', example='example.com'),
    endTime?: long(name='EndTime', example='1567353497'),
    premium?: boolean(name='Premium'),
    price?: double(name='Price', example='20.00'),
    regDate?: long(name='RegDate', example='1566353497'),
  }(name='Module'),
  requestId?: string(name='RequestId', example='E2598CAF-DBFE-494E-95EF-B42A33C178AA'),
  success?: boolean(name='Success', example='True'),
}

model CheckSelectedDomainStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CheckSelectedDomainStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CheckSelectedDomainStatus  CheckSelectedDomainStatusRequest
  * @return CheckSelectedDomainStatusResponse
 */
async function checkSelectedDomainStatus(request: CheckSelectedDomainStatusRequest): CheckSelectedDomainStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CheckSelectedDomainStatus', 'POST', '/', 'json', false, 'json', request);
}

model CreateFixedPriceDemandOrderRequest {
  code?: string(name='Code', position='Query'),
  contactId?: string(name='ContactId', position='Query'),
  domain?: string(name='Domain', position='Query'),
  source?: string(name='Source', position='Query'),
}

model CreateFixedPriceDemandOrderResponseBody = {
  errorCode?: string(name='ErrorCode'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  module?: {
    domain?: string(name='Domain'),
    orderNo?: string(name='OrderNo'),
    price?: long(name='Price'),
  }(name='Module'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateFixedPriceDemandOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFixedPriceDemandOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateFixedPriceDemandOrder  CreateFixedPriceDemandOrderRequest
  * @return CreateFixedPriceDemandOrderResponse
 */
async function createFixedPriceDemandOrder(request: CreateFixedPriceDemandOrderRequest): CreateFixedPriceDemandOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFixedPriceDemandOrder', 'POST', '/', 'json', false, 'json', request);
}

model CreateFixedPriceSelectedOrderRequest {
  code?: string(name='Code', example='DX123456', position='Query'),
  contactId: string(name='ContactId', description='This parameter is required.', example='11935401', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='example.com', position='Query'),
  expectedPrice: double(name='ExpectedPrice', description='This parameter is required.', example='20.00', position='Query'),
  source?: string(name='Source', example='partnername', position='Query'),
}

model CreateFixedPriceSelectedOrderResponseBody = {
  errorCode?: string(name='ErrorCode', example='DomainNotOnSale'),
  httpStatusCode?: int32(name='HttpStatusCode', example='200'),
  module?: {
    domain?: string(name='Domain', example='example.com'),
    domainBlockTrade?: [ string ](name='DomainBlockTrade'),
    orderNo?: string(name='OrderNo', example='31199295f2074ce895645d386cb22c36'),
    price?: long(name='Price', example='20.00'),
  }(name='Module'),
  requestId?: string(name='RequestId', example='C50E41A0-09F1-4491-8DB8-AF55BD2D0CC8'),
  success?: boolean(name='Success', example='True'),
}

model CreateFixedPriceSelectedOrderResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFixedPriceSelectedOrderResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateFixedPriceSelectedOrder  CreateFixedPriceSelectedOrderRequest
  * @return CreateFixedPriceSelectedOrderResponse
 */
async function createFixedPriceSelectedOrder(request: CreateFixedPriceSelectedOrderRequest): CreateFixedPriceSelectedOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFixedPriceSelectedOrder', 'POST', '/', 'json', false, 'json', request);
}

model FailDemandRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='SE20183A0Q7C5556', position='Query'),
  message?: string(name='Message', example='some message', minLength=1, position='Query'),
}

model FailDemandResponseBody = {
  requestId?: string(name='RequestId', example='497F7522-82B0-4BD4-84FE-AE8749E4C2F9'),
}

model FailDemandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FailDemandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FailDemand  FailDemandRequest
  * @return FailDemandResponse
 */
async function failDemand(request: FailDemandRequest): FailDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FailDemand', 'POST', '/', 'json', false, 'json', request);
}

model FinishDemandRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='SE20183A0Q7C5556', position='Query'),
  message?: string(name='Message', example='some message', minLength=1, position='Query'),
}

model FinishDemandResponseBody = {
  requestId?: string(name='RequestId', example='497F7522-82B0-4BD4-84FE-AE8749E4C2F9'),
}

model FinishDemandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FinishDemandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FinishDemand  FinishDemandRequest
  * @return FinishDemandResponse
 */
async function finishDemand(request: FinishDemandRequest): FinishDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FinishDemand', 'POST', '/', 'json', false, 'json', request);
}

model GetIntlDomainDownloadUrlRequest {
}

model GetIntlDomainDownloadUrlResponseBody = {
  allowRetry?: boolean(name='AllowRetry'),
  appName?: string(name='AppName'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorArgs?: [ any ](name='ErrorArgs'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  url?: string(name='Url'),
}

model GetIntlDomainDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetIntlDomainDownloadUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetIntlDomainDownloadUrl  GetIntlDomainDownloadUrlRequest
  * @return GetIntlDomainDownloadUrlResponse
 */
async function getIntlDomainDownloadUrl(request: GetIntlDomainDownloadUrlRequest): GetIntlDomainDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetIntlDomainDownloadUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetReserveDomainUrlRequest {
}

model GetReserveDomainUrlResponseBody = {
  requestId?: string(name='RequestId', example='D34B02AE-09AF-41C1-A6D3-951A2233EDB0'),
  url?: string(name='Url', example='http://example.com'),
}

model GetReserveDomainUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetReserveDomainUrlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetReserveDomainUrl  GetReserveDomainUrlRequest
  * @return GetReserveDomainUrlResponse
 */
async function getReserveDomainUrl(request: GetReserveDomainUrlRequest): GetReserveDomainUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetReserveDomainUrl', 'POST', '/', 'json', false, 'json', request);
}

model PurchaseIntlDomainRequest {
  auctionId: string(name='AuctionId', description='This parameter is required.', position='Body'),
  currency: string(name='Currency', description='This parameter is required.', position='Body'),
  price: double(name='Price', description='This parameter is required.', minimum=1, maximum=99999999, position='Body'),
}

model PurchaseIntlDomainResponseBody = {
  allowRetry?: boolean(name='AllowRetry'),
  appName?: string(name='AppName'),
  auctionId?: string(name='AuctionId'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorArgs?: [ any ](name='ErrorArgs'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model PurchaseIntlDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PurchaseIntlDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PurchaseIntlDomain  PurchaseIntlDomainRequest
  * @return PurchaseIntlDomainResponse
 */
async function purchaseIntlDomain(request: PurchaseIntlDomainRequest): PurchaseIntlDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PurchaseIntlDomain', 'POST', '/', 'json', true, 'form', request);
}

model PushDomainsRequest {
  domainList: [ string ](name='DomainList', description='This parameter is required.', example='["example1.cn", "example2.cn"]', shrink='json', position='Query'),
  outBizId: string(name='OutBizId', description='This parameter is required.', example='NL123456', position='Query'),
  publishRemark?: string(name='PublishRemark', example='外站用户xxx转移', position='Query'),
  receiverAccount: string(name='ReceiverAccount', description='This parameter is required.', example='破天荒的土豆', position='Query'),
}

model PushDomainsResponseBody = {
  module?: {
    failedResults?: [ 
      {
        domainName?: string(name='DomainName', example='cdxuanfeng.cn'),
        errorCode?: string(name='ErrorCode', example='NoPermission'),
        errorMsg?: string(name='ErrorMsg', example='connect timed out'),
      }
    ](name='FailedResults'),
    outBizId?: string(name='OutBizId', example='20250124100136aYCj4hdA'),
    pushNo?: string(name='PushNo', example='21301203021303120201'),
    success?: boolean(name='Success', example='True'),
    successDomains?: [ string ](name='SuccessDomains', example='["a.com",  "b.com"]'),
  }(name='Module'),
  requestId?: string(name='RequestId', example='F51977F9-2B40-462B-BCCD-CF5BB1E9DB56'),
}

model PushDomainsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PushDomainsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of PushDomains  PushDomainsRequest
  * @return PushDomainsResponse
 */
async function pushDomains(request: PushDomainsRequest): PushDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PushDomains', 'POST', '/', 'json', false, 'json', request);
}

model QueryAuctionDetailRequest {
  auctionId: string(name='AuctionId', description='This parameter is required.', example='123456', position='Body'),
}

model QueryAuctionDetailResponseBody = {
  auctionEndTime?: long(name='AuctionEndTime', example='1515961936000'),
  auctionId?: string(name='AuctionId', example='123456'),
  bookEndTime?: long(name='BookEndTime', example='1515961936000'),
  bookedPartner?: string(name='BookedPartner', example='4'),
  currency?: string(name='Currency', example='RMB'),
  deliveryTime?: long(name='DeliveryTime', example='1515961936000'),
  domainName?: string(name='DomainName', example='test.com'),
  domainType?: string(name='DomainType', example='0'),
  failCode?: string(name='FailCode', example='0'),
  highBid?: float(name='HighBid', example='100'),
  highBidder?: string(name='HighBidder', example='abc'),
  nextValidBid?: float(name='NextValidBid', example='110'),
  partnerType?: string(name='PartnerType', example='4'),
  payEndTime?: long(name='PayEndTime', example='1515961936000'),
  payPrice?: float(name='PayPrice', example='200'),
  payStatus?: string(name='PayStatus', example='1'),
  produceStatus?: string(name='ProduceStatus', example='0'),
  requestId?: string(name='RequestId', example='UUID'),
  reserveMet?: boolean(name='ReserveMet', example='true'),
  reservePrice?: float(name='ReservePrice'),
  status?: string(name='Status', example='2'),
  transferInPrice?: float(name='TransferInPrice', example='50'),
  yourCurrentBid?: float(name='YourCurrentBid', example='100'),
  yourMaxBid?: float(name='YourMaxBid', example='120'),
}

model QueryAuctionDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAuctionDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAuctionDetail  QueryAuctionDetailRequest
  * @return QueryAuctionDetailResponse
 */
async function queryAuctionDetail(request: QueryAuctionDetailRequest): QueryAuctionDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAuctionDetail', 'POST', '/', 'json', true, 'form', request);
}

model QueryAuctionsRequest {
  auctionEndTimeOrder?: string(name='AuctionEndTimeOrder', position='Body'),
  currentPage?: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=1000, position='Body'),
  status?: string(name='Status', example='0', position='Body'),
  statuses?: string(name='Statuses', position='Body'),
}

model QueryAuctionsResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: [ 
    {
      auctionEndTime?: long(name='AuctionEndTime', example='1515961936000'),
      auctionId?: string(name='AuctionId', example='123456'),
      bookEndTime?: long(name='BookEndTime', example='1515961936000'),
      bookedPartner?: string(name='BookedPartner', example='4'),
      currency?: string(name='Currency', example='RMB'),
      deliveryTime?: long(name='DeliveryTime', example='1515961936000'),
      domainName?: string(name='DomainName', example='test.com'),
      domainType?: string(name='DomainType', example='0'),
      failCode?: string(name='FailCode', example='0'),
      highBid?: float(name='HighBid', example='100'),
      highBidder?: string(name='HighBidder', example='abc'),
      nextValidBid?: float(name='NextValidBid', example='110'),
      partnerType?: string(name='PartnerType', example='4'),
      payEndTime?: long(name='PayEndTime', example='1515961936000'),
      payPrice?: float(name='PayPrice', example='200'),
      payStatus?: string(name='PayStatus', example='1'),
      produceStatus?: string(name='ProduceStatus', example='0'),
      reserveMax?: long(name='ReserveMax'),
      reserveMet?: boolean(name='ReserveMet', example='true'),
      reserveMin?: long(name='ReserveMin'),
      reservePrice?: long(name='ReservePrice'),
      status?: string(name='Status', example='2'),
      transferInPrice?: float(name='TransferInPrice', example='50'),
      yourCurrentBid?: float(name='YourCurrentBid', example='100'),
      yourMaxBid?: float(name='YourMaxBid', example='120'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='UUID'),
  totalItemNum?: int32(name='TotalItemNum', example='5'),
  totalPageNum?: int32(name='TotalPageNum', example='1'),
}

model QueryAuctionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryAuctionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryAuctions  QueryAuctionsRequest
  * @return QueryAuctionsResponse
 */
async function queryAuctions(request: QueryAuctionsRequest): QueryAuctionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAuctions', 'POST', '/', 'json', true, 'form', request);
}

model QueryBidRecordsRequest {
  auctionId: string(name='AuctionId', description='This parameter is required.', example='123456', position='Body'),
  currentPage?: int32(name='CurrentPage', example='1', minimum=1, position='Body'),
  pageSize?: int32(name='PageSize', example='10', minimum=10, maximum=200, position='Body'),
}

model QueryBidRecordsResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: [ 
    {
      bid?: float(name='Bid', example='50'),
      bidTime?: long(name='BidTime', example='1515961936000'),
      bidder?: string(name='Bidder', example='abc'),
      currency?: string(name='Currency', example='RMB'),
      domainName?: string(name='DomainName', example='test.com'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize', example='10'),
  requestId?: string(name='RequestId', example='UUID'),
  totalItemNum?: int32(name='TotalItemNum', example='5'),
  totalPageNum?: int32(name='TotalPageNum', example='1'),
}

model QueryBidRecordsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBidRecordsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBidRecords  QueryBidRecordsRequest
  * @return QueryBidRecordsResponse
 */
async function queryBidRecords(request: QueryBidRecordsRequest): QueryBidRecordsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBidRecords', 'POST', '/', 'json', true, 'form', request);
}

model QueryBookingDomainInfoRequest {
  domainName: string(name='DomainName', description='This parameter is required.', example='abc.com', position='Body'),
}

model QueryBookingDomainInfoResponseBody = {
  auctionId?: int32(name='AuctionId', example='1234'),
  bookEndTime?: long(name='BookEndTime', example='1517985730419'),
  currency?: string(name='Currency', example='USD'),
  maxBid?: float(name='MaxBid', example='15'),
  partnerType?: string(name='PartnerType', example='4'),
  requestId?: string(name='RequestId', example='234234njhjkhkj'),
  snatchNo?: string(name='SnatchNo'),
  transferInPrice?: float(name='TransferInPrice', example='17'),
}

model QueryBookingDomainInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBookingDomainInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBookingDomainInfo  QueryBookingDomainInfoRequest
  * @return QueryBookingDomainInfoResponse
 */
async function queryBookingDomainInfo(request: QueryBookingDomainInfoRequest): QueryBookingDomainInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBookingDomainInfo', 'POST', '/', 'json', true, 'form', request);
}

model QueryBrokerDemandRequest {
  bizId?: string(name='BizId', example='SE20183915FI0178', position='Query'),
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', minimum=10, maximum=200, position='Query'),
  status?: string(name='Status', example='1', position='Query'),
}

model QueryBrokerDemandResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: [ 
    {
      auditStatus?: int32(name='AuditStatus'),
      bargainSellerMobile?: string(name='BargainSellerMobile', example='13300000001'),
      bargainSellerPrice?: float(name='BargainSellerPrice', example='100'),
      bizId?: string(name='BizId', example='SE20183915FI0178'),
      demandDomain?: string(name='DemandDomain', example='taobao.com'),
      demandPrice?: float(name='DemandPrice', example='1'),
      description?: string(name='Description'),
      email?: string(name='Email'),
      mobile?: string(name='Mobile', example='13300000000'),
      orderType?: int32(name='OrderType'),
      partnerDomain?: string(name='PartnerDomain'),
      payDomain?: string(name='PayDomain', example='test.com'),
      payPrice?: float(name='PayPrice', example='100'),
      payTime?: long(name='PayTime', example='1524800053000'),
      produceType?: int32(name='ProduceType', example='1'),
      publishTime?: long(name='PublishTime', example='1524800053000'),
      purchaseStatus?: int32(name='PurchaseStatus'),
      servicePayPrice?: float(name='ServicePayPrice', example='18800'),
      settleBasePrice?: float(name='SettleBasePrice'),
      status?: string(name='Status', example='1'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='497F7522-82B0-4BD4-84FE-AE8749E4C2F9'),
  totalItemNum?: int32(name='TotalItemNum', example='20'),
  totalPageNum?: int32(name='TotalPageNum', example='1'),
}

model QueryBrokerDemandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBrokerDemandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBrokerDemand  QueryBrokerDemandRequest
  * @return QueryBrokerDemandResponse
 */
async function queryBrokerDemand(request: QueryBrokerDemandRequest): QueryBrokerDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBrokerDemand', 'POST', '/', 'json', false, 'json', request);
}

model QueryBrokerDemandRecordRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='SE20183A0Q7C5556', position='Query'),
  currentPage?: int32(name='CurrentPage', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
}

model QueryBrokerDemandRecordResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum', example='1'),
  data?: {
    brokerDemandRecord?: [ 
    {
      bizId?: string(name='BizId', example='SE20183A0Q7C5556'),
      createTime?: long(name='CreateTime', example='1525249317000'),
      description?: string(name='Description'),
    }
  ](name='BrokerDemandRecord')
  }(name='Data'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='497F7522-82B0-4BD4-84FE-AE8749E4C2F9'),
  totalItemNum?: int32(name='TotalItemNum', example='20'),
  totalPageNum?: int32(name='TotalPageNum', example='1'),
}

model QueryBrokerDemandRecordResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryBrokerDemandRecordResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryBrokerDemandRecord  QueryBrokerDemandRecordRequest
  * @return QueryBrokerDemandRecordResponse
 */
async function queryBrokerDemandRecord(request: QueryBrokerDemandRecordRequest): QueryBrokerDemandRecordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBrokerDemandRecord', 'POST', '/', 'json', false, 'json', request);
}

model QueryDomainTransferStatusRequest {
  domainName?: string(name='DomainName', position='Body'),
}

model QueryDomainTransferStatusResponseBody = {
  domainTransferStatus?: [ 
    {
      domainName?: string(name='DomainName'),
      domainStatusDescription?: string(name='DomainStatusDescription'),
    }
  ](name='DomainTransferStatus'),
  requestId?: string(name='RequestId'),
}

model QueryDomainTransferStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryDomainTransferStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryDomainTransferStatus  QueryDomainTransferStatusRequest
  * @return QueryDomainTransferStatusResponse
 */
async function queryDomainTransferStatus(request: QueryDomainTransferStatusRequest): QueryDomainTransferStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDomainTransferStatus', 'POST', '/', 'json', true, 'form', request);
}

model QueryExchangeRateRequest {
  fromCurrency: string(name='FromCurrency', description='This parameter is required.', example='USD', position='Query'),
  toCurrency: string(name='ToCurrency', description='This parameter is required.', example='CNY', position='Query'),
}

model QueryExchangeRateResponseBody = {
  exchangeRate?: double(name='ExchangeRate', example='7.12'),
  requestId?: string(name='RequestId', example='D200000-C0B9-4CD3-B92A-9B44A000000'),
}

model QueryExchangeRateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryExchangeRateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryExchangeRate  QueryExchangeRateRequest
  * @return QueryExchangeRateResponse
 */
async function queryExchangeRate(request: QueryExchangeRateRequest): QueryExchangeRateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryExchangeRate', 'POST', '/', 'json', false, 'json', request);
}

model QueryExportAuctionDetailRequest {
  auctionId?: string(name='AuctionId', position='Query'),
}

model QueryExportAuctionDetailResponseBody = {
  auctionEndTime?: string(name='AuctionEndTime'),
  auctionId?: string(name='AuctionId'),
  auctionStatus?: string(name='AuctionStatus'),
  bookEndTime?: string(name='BookEndTime'),
  buyerStatus?: string(name='BuyerStatus'),
  currentPrice?: double(name='CurrentPrice'),
  increasePrice?: double(name='IncreasePrice'),
  myPrice?: double(name='MyPrice'),
  myProxyPrice?: double(name='MyProxyPrice'),
  othersMaxProxyPrice?: double(name='OthersMaxProxyPrice'),
  proxyPrice?: double(name='ProxyPrice'),
  requestId?: string(name='RequestId'),
}

model QueryExportAuctionDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryExportAuctionDetailResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryExportAuctionDetail  QueryExportAuctionDetailRequest
  * @return QueryExportAuctionDetailResponse
 */
async function queryExportAuctionDetail(request: QueryExportAuctionDetailRequest): QueryExportAuctionDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryExportAuctionDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryExportDomainExpireSnatchsRequest {
  currentId: long(name='CurrentId', description='This parameter is required.', example='1', minimum=0, position='Query'),
  maxResults?: int32(name='MaxResults', example='50', position='Query'),
  nextToken: string(name='NextToken', description='This parameter is required.', example='f07b150eadfa1d7a', position='Query'),
  pageSize: int32(name='PageSize', description='This parameter is required.', example='1', maximum=3000, position='Query'),
}

model QueryExportDomainExpireSnatchsResponseBody = {
  data?: [ 
    {
      auctionEndTime?: string(name='AuctionEndTime'),
      auctionRemainingSeconds?: long(name='AuctionRemainingSeconds'),
      baiduAntiLink?: int32(name='BaiduAntiLink'),
      baiduExLink?: int32(name='BaiduExLink'),
      baiduIndex?: int32(name='BaiduIndex'),
      baiduWeight?: int32(name='BaiduWeight'),
      bookEndTime?: string(name='BookEndTime'),
      bookRemainingSeconds?: long(name='BookRemainingSeconds'),
      bookedNum?: int32(name='BookedNum'),
      bookedPartners?: string(name='BookedPartners'),
      constitute?: string(name='Constitute'),
      currencyType?: string(name='CurrencyType'),
      deliveryTime?: string(name='DeliveryTime'),
      domainId?: string(name='DomainId'),
      domainLen?: int32(name='DomainLen'),
      domainName?: string(name='DomainName'),
      domainType?: string(name='DomainType'),
      endDate?: string(name='EndDate'),
      expireDate?: string(name='ExpireDate'),
      extend?: string(name='Extend'),
      freezeAmount?: double(name='FreezeAmount'),
      introduction?: string(name='Introduction'),
      isPremium?: boolean(name='IsPremium'),
      partnerTypes?: string(name='PartnerTypes'),
      price?: double(name='Price'),
      productId?: string(name='ProductId'),
      publishTime?: string(name='PublishTime'),
      regDate?: string(name='RegDate'),
      registrar?: string(name='Registrar'),
      renewPrice?: double(name='RenewPrice'),
      reserved?: boolean(name='Reserved'),
      rmbPrice?: double(name='RmbPrice'),
      s360Weight?: int32(name='S360Weight'),
      seoAttributes?: string(name='SeoAttributes'),
      shortName?: string(name='ShortName'),
      snatchNo?: string(name='SnatchNo'),
      snatchTypeDesc?: string(name='SnatchTypeDesc'),
      sougouAntiLink?: int32(name='SougouAntiLink'),
      sougouIndex?: int32(name='SougouIndex'),
      sougouWeight?: int32(name='SougouWeight'),
      suffix?: string(name='Suffix'),
      weight?: int32(name='Weight'),
    }
  ](name='Data'),
  requestId?: string(name='RequestId'),
}

model QueryExportDomainExpireSnatchsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryExportDomainExpireSnatchsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryExportDomainExpireSnatchs  QueryExportDomainExpireSnatchsRequest
  * @return QueryExportDomainExpireSnatchsResponse
 */
async function queryExportDomainExpireSnatchs(request: QueryExportDomainExpireSnatchsRequest): QueryExportDomainExpireSnatchsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryExportDomainExpireSnatchs', 'POST', '/', 'json', false, 'json', request);
}

model QueryPurchasedDomainsRequest {
  currentPage?: int32(name='CurrentPage', position='Body'),
  domainName?: string(name='DomainName', position='Body'),
  endOperationTime?: string(name='EndOperationTime', position='Body'),
  opTimeOrder?: boolean(name='OpTimeOrder', position='Body'),
  operationStatus?: int32(name='OperationStatus', position='Body'),
  pageSize?: int32(name='PageSize', position='Body'),
  productType?: int32(name='ProductType', position='Body'),
  startOperationTime?: string(name='StartOperationTime', position='Body'),
  updateTimeOrder?: boolean(name='UpdateTimeOrder', position='Body'),
}

model QueryPurchasedDomainsResponseBody = {
  currentPageNum?: int32(name='CurrentPageNum'),
  data?: [ 
    {
      deliveryTime?: string(name='DeliveryTime'),
      domainName?: string(name='DomainName'),
      operationStatus?: string(name='OperationStatus'),
      operationTime?: string(name='OperationTime'),
      productType?: string(name='ProductType'),
      tradeMoney?: double(name='TradeMoney'),
    }
  ](name='Data'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalItemNum?: int32(name='TotalItemNum'),
  totalPageNum?: int32(name='TotalPageNum'),
}

model QueryPurchasedDomainsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPurchasedDomainsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of QueryPurchasedDomains  QueryPurchasedDomainsRequest
  * @return QueryPurchasedDomainsResponse
 */
async function queryPurchasedDomains(request: QueryPurchasedDomainsRequest): QueryPurchasedDomainsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPurchasedDomains', 'POST', '/', 'json', true, 'form', request);
}

model RecordDemandRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='SE20183A0Q7C5556', position='Query'),
  message: string(name='Message', description='This parameter is required.', example='some message', minLength=1, position='Query'),
}

model RecordDemandResponseBody = {
  requestId?: string(name='RequestId', example='497F7522-82B0-4BD4-84FE-AE8749E4C2F9'),
}

model RecordDemandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RecordDemandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RecordDemand  RecordDemandRequest
  * @return RecordDemandResponse
 */
async function recordDemand(request: RecordDemandRequest): RecordDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RecordDemand', 'POST', '/', 'json', false, 'json', request);
}

model RefuseDemandRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='SE20183A0Q7C5556', position='Query'),
  message?: string(name='Message', example='some message', minLength=1, position='Query'),
}

model RefuseDemandResponseBody = {
  requestId?: string(name='RequestId', example='497F7522-82B0-4BD4-84FE-AE8749E4C2F9'),
}

model RefuseDemandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RefuseDemandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RefuseDemand  RefuseDemandRequest
  * @return RefuseDemandResponse
 */
async function refuseDemand(request: RefuseDemandRequest): RefuseDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefuseDemand', 'POST', '/', 'json', false, 'json', request);
}

model RequestPayDemandRequest {
  bizId: string(name='BizId', description='This parameter is required.', example='SE20183A0Q7C5556', position='Query'),
  domainName: string(name='DomainName', description='This parameter is required.', example='test.com', position='Query'),
  message?: string(name='Message', example='some message', minLength=1, position='Query'),
  price: float(name='Price', description='This parameter is required.', example='100', minimum=0, position='Query'),
  produceType?: int32(name='ProduceType', example='1', position='Query'),
}

model RequestPayDemandResponseBody = {
  requestId?: string(name='RequestId', example='497F7522-82B0-4BD4-84FE-AE8749E4C2F9'),
}

model RequestPayDemandResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RequestPayDemandResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RequestPayDemand  RequestPayDemandRequest
  * @return RequestPayDemandResponse
 */
async function requestPayDemand(request: RequestPayDemandRequest): RequestPayDemandResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RequestPayDemand', 'POST', '/', 'json', false, 'json', request);
}

model ReserveDomainRequest {
  channels?: [ string ](name='Channels', example='4', position='Body'),
  domainName: string(name='DomainName', description='This parameter is required.', example='aliyun.com', position='Body'),
}

model ReserveDomainResponseBody = {
  auctionId?: string(name='AuctionId', example='12080761'),
  requestId?: string(name='RequestId', example='64F63E07-3AF6-4D59-8616-55DF1A9E03ED'),
}

model ReserveDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReserveDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReserveDomain  ReserveDomainRequest
  * @return ReserveDomainResponse
 */
async function reserveDomain(request: ReserveDomainRequest): ReserveDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReserveDomain', 'POST', '/', 'json', true, 'form', request);
}

model ReserveIntlDomainRequest {
  domainName: string(name='DomainName', description='This parameter is required.', position='Body'),
}

model ReserveIntlDomainResponseBody = {
  allowRetry?: boolean(name='AllowRetry'),
  appName?: string(name='AppName'),
  auctionId?: string(name='AuctionId'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorArgs?: [ any ](name='ErrorArgs'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReserveIntlDomainResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReserveIntlDomainResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReserveIntlDomain  ReserveIntlDomainRequest
  * @return ReserveIntlDomainResponse
 */
async function reserveIntlDomain(request: ReserveIntlDomainRequest): ReserveIntlDomainResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReserveIntlDomain', 'POST', '/', 'json', true, 'form', request);
}

model SelectedDomainListRequest {
  listDate: string(name='ListDate', description='This parameter is required.', example='20231109', position='Query'),
}

model SelectedDomainListResponseBody = {
  errorCode?: string(name='ErrorCode', example='OssFileNotFound'),
  module?: {
    downloadUrl?: string(name='DownloadUrl', example='http://selected-domain.oss-cn-zhangjiakou.aliyuncs.com/aliyun_selected_domain_20231109.gz?Expires=1699524493&OSSAccessKeyId=LTAI5tPMAybR4gfSEjdfAk1F&Signature=2Tpo7Eaf%2BqIop8SuMtI91m%2FAFpY%3D'),
  }(name='Module'),
  requestId?: string(name='RequestId', description='Id of the request', example='80011ABC-F573-4795-B0E8-377BFBBA3422'),
  success?: boolean(name='Success', example='True'),
}

model SelectedDomainListResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SelectedDomainListResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SelectedDomainList  SelectedDomainListRequest
  * @return SelectedDomainListResponse
 */
async function selectedDomainList(request: SelectedDomainListRequest): SelectedDomainListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SelectedDomainList', 'POST', '/', 'json', false, 'json', request);
}

model SubmitPurchaseInfoRequest {
  bizId?: string(name='BizId', position='Body'),
  purchaseCurrency?: string(name='PurchaseCurrency', position='Body'),
  purchasePrice?: double(name='PurchasePrice', position='Body'),
  purchaseProofs?: [ string ](name='PurchaseProofs', position='Body'),
}

model SubmitPurchaseInfoResponseBody = {
  allowRetry?: boolean(name='AllowRetry'),
  appName?: string(name='AppName'),
  dynamicCode?: string(name='DynamicCode'),
  dynamicMessage?: string(name='DynamicMessage'),
  errorArgs?: [ any ](name='ErrorArgs'),
  errorCode?: string(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  httpStatusCode?: int32(name='HttpStatusCode'),
  module?: any(name='Module'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubmitPurchaseInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitPurchaseInfoResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SubmitPurchaseInfo  SubmitPurchaseInfoRequest
  * @return SubmitPurchaseInfoResponse
 */
async function submitPurchaseInfo(request: SubmitPurchaseInfoRequest): SubmitPurchaseInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitPurchaseInfo', 'POST', '/', 'json', true, 'form', request);
}

model UpdatePartnerReservePriceRequest {
  biddingId: int32(name='BiddingId', description='This parameter is required.', position='Body'),
  domainName: string(name='DomainName', description='This parameter is required.', position='Body'),
  partnerType: string(name='PartnerType', description='This parameter is required.', position='Body'),
  reservePrice: double(name='ReservePrice', description='This parameter is required.', position='Body'),
}

model UpdatePartnerReservePriceResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpdatePartnerReservePriceResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePartnerReservePriceResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePartnerReservePrice  UpdatePartnerReservePriceRequest
  * @return UpdatePartnerReservePriceResponse
 */
async function updatePartnerReservePrice(request: UpdatePartnerReservePriceRequest): UpdatePartnerReservePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePartnerReservePrice', 'POST', '/', 'json', true, 'form', request);
}

