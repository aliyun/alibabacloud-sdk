/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'AgentRun';
  @version = '2025-09-10';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AgentRuntime {
  agentRuntimeArn?: string(name='agentRuntimeArn', description='智能体运行时的全局唯一资源名称'),
  agentRuntimeId?: string(name='agentRuntimeId', description='智能体运行时的唯一标识符'),
  agentRuntimeName?: string(name='agentRuntimeName', description='智能体运行时的名称，用于标识和区分不同的运行时实例'),
  agentRuntimeVersion?: string(name='agentRuntimeVersion', description='智能体运行时的版本号，用于版本管理和回滚'),
  artifactType?: string(name='artifactType', description='智能体运行时的部署类型，支持Code（代码模式）和Container（容器模式）'),
  codeConfiguration?: CodeConfiguration(name='codeConfiguration', description='当artifactType为Code时的代码配置信息'),
  containerConfiguration?: ContainerConfiguration(name='containerConfiguration', description='当artifactType为Container时的容器配置信息'),
  cpu?: float(name='cpu', description='智能体运行时分配的CPU资源，单位为核数'),
  createdAt?: string(name='createdAt', description='智能体运行时的创建时间，采用ISO 8601格式'),
  description?: string(name='description', description='智能体运行时的描述信息，说明该运行时的用途和功能'),
  environmentVariables?: map[string]string(name='environmentVariables', description='智能体运行时的环境变量配置'),
  executionRoleArn?: string(name='executionRoleArn', description='为智能体运行时提供访问云服务权限的执行角色ARN'),
  healthCheckConfiguration?: HealthCheckConfiguration(name='healthCheckConfiguration', description='智能体运行时的健康检查配置，用于监控运行时实例的健康状态'),
  lastUpdatedAt?: string(name='lastUpdatedAt', description='智能体运行时最后一次更新的时间，采用ISO 8601格式'),
  logConfiguration?: LogConfiguration(name='logConfiguration', description='SLS（简单日志服务）配置'),
  memory?: integer(name='memory', description='智能体运行时分配的内存资源，单位为MB'),
  networkConfiguration?: NetworkConfiguration(name='networkConfiguration', description='智能体运行时的网络配置信息'),
  port?: integer(name='port', description='智能体运行时监听的端口号'),
  protocolConfiguration?: ProtocolConfiguration(name='protocolConfiguration', description='智能体运行时的通信协议配置'),
  sessionConcurrencyLimitPerInstance?: integer(name='sessionConcurrencyLimitPerInstance', description='每个运行时实例允许的最大并发会话数', minimum=1, maximum=200),
  sessionIdleTimeoutSeconds?: int32(name='sessionIdleTimeoutSeconds', description='会话的空闲超时时间，单位为秒。实例没有会话请求后处于空闲状态，空闲态为闲置计费模式，超过此超时时间后会话自动过期，不可继续使用'),
  status?: string(name='status', description='智能体运行时的当前状态，如READY（就绪）、CREATING（创建中）、FAILED（失败）等'),
  statusReason?: string(name='statusReason', description='当前状态的原因说明（如适用）'),
}

model AgentRuntimeEndpoint {
  agentRuntimeEndpointArn?: string(name='agentRuntimeEndpointArn'),
  agentRuntimeEndpointId?: string(name='agentRuntimeEndpointId'),
  agentRuntimeEndpointName?: string(name='agentRuntimeEndpointName'),
  agentRuntimeId?: string(name='agentRuntimeId'),
  description?: string(name='description'),
  endpointPublicUrl?: string(name='endpointPublicUrl', description='智能体运行时端点的公网访问地址'),
  routingConfiguration?: RoutingConfiguration(name='routingConfiguration', description='智能体运行时端点的路由配置，支持多版本权重分配'),
  status?: string(name='status'),
  statusReason?: string(name='statusReason'),
  targetVersion?: string(name='targetVersion'),
}

model AgentRuntimeEndpointResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: AgentRuntimeEndpoint(name='data', description='智能体运行时端点的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model AgentRuntimeResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: AgentRuntime(name='data', description='智能体运行时的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model AgentRuntimeVersion {
  agentRuntimeArn?: string(name='agentRuntimeArn', description='智能体运行时的ARN'),
  agentRuntimeId?: string(name='agentRuntimeId', description='智能体运行时的ID'),
  agentRuntimeName?: string(name='agentRuntimeName', description='智能体运行时的名称'),
  agentRuntimeVersion?: string(name='agentRuntimeVersion', description='已发布版本的版本号'),
  description?: string(name='description', description='此版本的描述'),
  lastUpdatedAt?: string(name='lastUpdatedAt', description='最后更新的时间戳'),
}

model AgentRuntimeVersionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: AgentRuntimeVersion(name='data', description='智能体运行时版本的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model AiFallbackConfig {
  serviceConfigs?: [
    AiFallbackServiceConfig
  ](name='serviceConfigs'),
}

model AiFallbackServiceConfig {
  passThroughModelName?: boolean(name='passThroughModelName'),
  serviceId?: string(name='serviceId'),
  targetModelName?: string(name='targetModelName'),
}

model AiServiceConfig {
  address?: string(name='address'),
  apiKeys?: [ string ](name='apiKeys'),
  enableHealthCheck?: boolean(name='enableHealthCheck'),
  protocols?: [ string ](name='protocols'),
  provider?: string(name='provider'),
}

model AttachPolicyConfig {
  className?: string(name='className'),
  config?: string(name='config'),
  name?: string(name='name'),
}

model Browser {
  browserId?: string(name='browserId'),
  browserName?: string(name='browserName'),
  cpu?: float(name='cpu'),
  createdAt?: string(name='createdAt'),
  credentialId?: string(name='credentialId'),
  description?: string(name='description'),
  executionRoleArn?: string(name='executionRoleArn'),
  lastUpdatedAt?: string(name='lastUpdatedAt'),
  memory?: int32(name='memory', description='内存资源配置（单位：MB）'),
  networkConfiguration?: NetworkConfiguration(name='networkConfiguration'),
  recording?: BrowserRecordingConfiguration(name='recording'),
  status?: string(name='status'),
  statusReason?: string(name='statusReason', description='当前状态的原因说明（如适用）'),
  tenantId?: string(name='tenantId'),
}

model BrowserAutomationStream {
  streamEndpoint?: string(name='streamEndpoint'),
  streamStatus?: string(name='streamStatus'),
}

model BrowserLiveViewStream {
  streamEndpoint?: string(name='streamEndpoint'),
}

model BrowserOssLocation {
  bucket?: string(name='bucket'),
  prefix?: string(name='prefix'),
}

model BrowserRecordingConfiguration {
  enabled?: boolean(name='enabled'),
  ossLocation?: BrowserOssLocation(name='ossLocation'),
}

model BrowserResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: Browser(name='data', description='浏览器的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model BrowserSessionListOut {
  items?: [
    BrowserSessionOut
  ](name='items'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  total?: long(name='total'),
}

model BrowserSessionOut {
  browserId?: string(name='browserId'),
  browserName?: string(name='browserName'),
  createdAt?: string(name='createdAt'),
  lastUpdatedAt?: string(name='lastUpdatedAt'),
  sessionId: string(name='sessionId', description='This parameter is required.'),
  sessionIdleTimeoutSeconds?: int32(name='sessionIdleTimeoutSeconds', description='会话空闲超时时间，单位为秒'),
  status?: string(name='status'),
}

model BrowserStreams {
  automationStream?: BrowserAutomationStream(name='automationStream'),
  liveViewStream?: BrowserLiveViewStream(name='liveViewStream'),
}

model BrowserViewPort {
  height?: double(name='height'),
  width?: double(name='width'),
}

model CAPConfig {
  functionName?: string(name='functionName'),
  name?: string(name='name'),
  templateId?: int32(name='templateId'),
}

model CodeConfiguration {
  checksum?: string(name='checksum', description='代码包的CRC-64校验值。如果提供了checksum，则函数计算会校验代码包的checksum是否和提供的一致'),
  command?: [ string ](name='command', description='在运行时中运行的命令（例如：[\\"python\\"]）'),
  language?: string(name='language', description='代码运行时的编程语言，如 python3、nodejs 等'),
  zipFile?: string(name='zipFile', description='智能体代码ZIP包的Base64编码', example='UEsDBAoAAAAAANF'),
}

model CodeInfo {
  ossBucketName?: string(name='ossBucketName'),
  ossObjectName?: string(name='ossObjectName'),
}

model CodeInterpreter {
  codeInterpreterId?: string(name='codeInterpreterId', description='代码解释器的唯一标识符'),
  codeInterpreterName?: string(name='codeInterpreterName', description='代码解释器的名称，用于标识和区分不同的代码解释器实例'),
  cpu?: float(name='cpu'),
  createdAt?: string(name='createdAt', description='代码解释器的创建时间，采用ISO 8601格式'),
  description?: string(name='description', description='代码解释器的描述信息，说明该解释器的用途和功能'),
  executionRoleArn?: string(name='executionRoleArn', description='此代码解释器的执行角色'),
  lastUpdatedAt?: string(name='lastUpdatedAt', description='代码解释器的最后更新时间，采用ISO 8601格式'),
  memory?: int32(name='memory', description='内存资源配置（单位：MB）'),
  networkConfiguration?: NetworkConfiguration(name='networkConfiguration', description='代码解释器的网络配置信息'),
  status?: string(name='status', description='代码解释器的当前状态，如READY（就绪）、TERMINATED（已终止）等'),
  statusReason?: string(name='statusReason', description='当前状态的原因说明（如适用）'),
  tenantId?: string(name='tenantId'),
}

model CodeInterpreterResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: CodeInterpreter(name='data', description='代码解释器的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model CodeInterpreterSessionConfig {
  environment?: map[string]string(name='environment', description='代码解释器会话的环境变量配置'),
  timeout?: int32(name='timeout', description='代码解释器会话的超时时间，单位为秒'),
  workingDirectory?: string(name='workingDirectory', description='代码解释器会话的工作目录路径'),
}

model CodeInterpreterSessionListOut {
  items?: [
    CodeInterpreterSessionOut
  ](name='items'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  total?: long(name='total'),
}

model CodeInterpreterSessionOut {
  codeInterpreterId: string(name='codeInterpreterId', description='关联的代码解释器的唯一标识符

This parameter is required.'),
  codeInterpreterName?: string(name='codeInterpreterName', description='代码解释器会话的名称'),
  createdAt?: string(name='createdAt', description='代码解释器会话的创建时间，采用ISO 8601格式'),
  lastUpdatedAt?: string(name='lastUpdatedAt', description='代码解释器会话的最后更新时间，采用ISO 8601格式'),
  sessionId: string(name='sessionId', description='代码解释器会话的唯一标识符

This parameter is required.'),
  sessionIdleTimeoutSeconds?: int32(name='sessionIdleTimeoutSeconds', description='代码解释器会话的空闲超时时间，单位为秒。实例没有会话请求后处于空闲状态，空闲态为闲置计费模式，超过此超时时间后会话自动过期，不可继续使用'),
  status: string(name='status', description='代码解释器会话的当前状态

This parameter is required.'),
}

model CommonResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: any(name='data', description='实际的业务数据内容'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model ContainerConfiguration {
  command?: [ string ](name='command', description='在容器中运行的命令（例如：[\\"python3\\", \\"app.py\\"]）'),
  image?: string(name='image'),
}

model CreateAgentRuntimeEndpointInput {
  agentRuntimeEndpointName?: string(name='agentRuntimeEndpointName'),
  description?: string(name='description'),
  routingConfiguration?: RoutingConfiguration(name='routingConfiguration', description='智能体运行时端点的路由配置，支持多版本权重分配'),
  targetVersion?: string(name='targetVersion', description='智能体运行时的目标版本'),
}

model CreateAgentRuntimeInput {
  agentRuntimeName: string(name='agentRuntimeName', description='智能体运行时的唯一标识名称，用于区分不同的智能体运行时实例

This parameter is required.'),
  artifactType: string(name='artifactType', description='指定智能体运行时的部署类型，支持Code（代码模式）和Container（容器模式）

This parameter is required.'),
  codeConfiguration?: CodeConfiguration(name='codeConfiguration', description='当artifactType为Code时的代码配置信息，包括代码源、入口文件等'),
  containerConfiguration?: ContainerConfiguration(name='containerConfiguration', description='当artifactType为Container时的容器配置信息，包括镜像地址、启动命令等'),
  cpu: float(name='cpu', description='为智能体运行时分配的CPU资源，单位为核数

This parameter is required.'),
  credentialId?: string(name='credentialId', description='用于访问外部服务的凭证ID，智能体运行时将使用此凭证进行身份验证'),
  description?: string(name='description', description='智能体运行时的描述信息，用于说明该运行时的用途和功能'),
  environmentVariables?: map[string]string(name='environmentVariables', description='智能体运行时的环境变量配置，用于在运行时传递配置参数'),
  executionRoleArn?: string(name='executionRoleArn', description='为智能体运行时提供访问云服务权限的执行角色ARN'),
  healthCheckConfiguration?: HealthCheckConfiguration(name='healthCheckConfiguration', description='智能体运行时的健康检查配置，用于监控运行时实例的健康状态'),
  logConfiguration?: LogConfiguration(name='logConfiguration', description='SLS（简单日志服务）配置'),
  memory: int32(name='memory', description='为智能体运行时分配的内存资源，单位为MB

This parameter is required.'),
  networkConfiguration: NetworkConfiguration(name='networkConfiguration', description='智能体运行时的网络配置，包括VPC、安全组等网络访问设置

This parameter is required.'),
  port: int32(name='port', description='智能体运行时监听的端口号，用于接收外部请求

This parameter is required.'),
  protocolConfiguration?: ProtocolConfiguration(name='protocolConfiguration', description='智能体运行时的通信协议配置，定义运行时如何与外部系统交互'),
  sessionConcurrencyLimitPerInstance?: int32(name='sessionConcurrencyLimitPerInstance', description='每个运行时实例允许的最大并发会话数', minimum=1, maximum=200),
  sessionIdleTimeoutSeconds?: int32(name='sessionIdleTimeoutSeconds', description='会话的空闲超时时间，单位为秒。实例没有会话请求后处于空闲状态，空闲态为闲置计费模式，超过此超时时间后会话自动过期，不可继续使用'),
}

model CreateAgentRuntimeVersionInput {
  description?: string(name='description', description='版本描述'),
}

model CreateBrowserInput {
  browserName: string(name='browserName', description='This parameter is required.'),
  cpu: float(name='cpu', description='CPU资源配置（单位：核）

This parameter is required.'),
  credentialId?: string(name='credentialId'),
  description?: string(name='description'),
  executionRoleArn?: string(name='executionRoleArn'),
  memory: int32(name='memory', description='内存资源配置（单位：MB）

This parameter is required.', minimum=1024, maximum=16384),
  networkConfiguration: NetworkConfiguration(name='networkConfiguration', description='This parameter is required.'),
  sessionIdleTimeoutSeconds?: int32(name='sessionIdleTimeoutSeconds', description='会话的空闲超时时间，单位为秒。实例没有会话请求后处于空闲状态，空闲态为闲置计费模式，超过此超时时间后会话自动过期，不可继续使用'),
}

model CreateCodeInterpreterInput {
  codeInterpreterName: string(name='codeInterpreterName', description='代码解释器的名称，用于标识和区分不同的代码解释器实例

This parameter is required.'),
  cpu: float(name='cpu', description='CPU资源配置（单位：核数）

This parameter is required.', minimum=2.0, maximum=16.0),
  credentialId?: string(name='credentialId'),
  description?: string(name='description', description='代码解释器的描述信息，说明该解释器的用途和功能'),
  executionRoleArn?: string(name='executionRoleArn', description='此代码解释器的执行角色'),
  memory: int32(name='memory', description='内存资源配置（单位：MB）

This parameter is required.', minimum=128, maximum=16384),
  networkConfiguration: NetworkConfiguration(name='networkConfiguration', description='代码解释器的网络配置，包括VPC、安全组等网络访问设置

This parameter is required.'),
  sessionIdleTimeoutSeconds?: int32(name='sessionIdleTimeoutSeconds', description='会话的空闲超时时间，单位为秒。实例没有会话请求后处于空闲状态，空闲态为闲置计费模式，超过此超时时间后会话自动过期，不可继续使用'),
}

model CreateCredentialInput {
  config?: map[string]string(name='config'),
  description?: string(name='description'),
  name?: string(name='name'),
  secret?: string(name='secret'),
  type?: string(name='type'),
}

model CreateCredentialOutput {
  createdAt?: string(name='createdAt'),
  id?: string(name='id'),
  name?: string(name='name'),
  type?: string(name='type'),
}

model CreateDomainInput {
  certIdentifier?: string(name='certIdentifier'),
  name?: string(name='name'),
  protocol?: string(name='protocol'),
}

model CreateGatewayInput {
  identityId?: string(name='identityId'),
  name?: string(name='name'),
  networkConfiguration?: GatewayNetworkConfiguration(name='networkConfiguration'),
  type?: string(name='type'),
}

model CreateGatewayTargetInput {
  domainId?: string(name='domainId'),
  name?: string(name='name'),
  targetConfiguration?: TargetConfiguration(name='targetConfiguration'),
}

model CreateModelInput {
  address?: string(name='address'),
  apiKey?: string(name='apiKey'),
  desc?: string(name='desc'),
  models?: [ string ](name='models'),
  name?: string(name='name'),
  provider?: string(name='provider'),
  type?: string(name='type'),
}

model CreateToolData {
  createdAt?: string(name='createdAt'),
  id?: string(name='id'),
  name?: string(name='name'),
  sourceType?: string(name='sourceType'),
  toolType?: string(name='toolType'),
}

model CreateToolInput {
  CAPConfig?: CAPConfig(name='CAPConfig'),
  description?: string(name='description'),
  name: string(name='name', description='This parameter is required.'),
  schema: string(name='schema', description='This parameter is required.'),
  sourceType: string(name='sourceType', description='This parameter is required.'),
  toolType: string(name='toolType', description='This parameter is required.'),
}

model CreateToolOutput {
  data?: CreateToolData(name='data'),
  message?: string(name='message'),
  success?: boolean(name='success'),
}

model CredentialListItem {
  createdAt?: string(name='createdAt'),
  id?: string(name='id'),
  name?: string(name='name'),
  relatedWorloads?: [
    RelatedWorkload
  ](name='relatedWorloads'),
  type?: string(name='type'),
  updatedAt?: string(name='updatedAt'),
}

model CustomRuntimeConfig {
  args?: [ string ](name='args'),
  command?: [ string ](name='command'),
  port?: int32(name='port'),
}

model DeleteBrowserOut {
  browserId?: string(name='browserId'),
  browserName?: string(name='browserName'),
  status?: string(name='status'),
}

model DeleteBrowserResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: Browser(name='data'),
  requestId?: string(name='requestId'),
}

model DeleteCodeInterpreterOut {
  codeInterpreterId?: string(name='codeInterpreterId'),
  codeInterpreterName?: string(name='codeInterpreterName'),
  status?: string(name='status'),
}

model DeleteCodeInterpreterResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: CodeInterpreter(name='data'),
  requestId?: string(name='requestId'),
}

model DomainInfo {
  certIdentifier?: string(name='certIdentifier'),
  domainId?: string(name='domainId'),
  name?: string(name='name'),
  protocol?: string(name='protocol'),
}

model ErrorResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  message?: string(name='message', description='错误信息描述'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model FCLinkConfig {
  functionName?: string(name='functionName'),
  version?: string(name='version'),
}

model Gateway {
  createdAt?: string(name='createdAt'),
  gatewayId?: string(name='gatewayId'),
  internetUrl?: string(name='internetUrl'),
  intranetUrl?: string(name='intranetUrl'),
  name?: string(name='name'),
  status?: string(name='status'),
  updatedAt?: string(name='updatedAt'),
}

model GatewayNetworkConfiguration {
  networkMode?: string(name='networkMode'),
  vpcId?: string(name='vpcId'),
  vswitchIds?: [ string ](name='vswitchIds'),
}

model GetBrowserSessionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: BrowserSessionOut(name='data'),
  requestId?: string(name='requestId'),
}

model GetCodeInterpreterSessionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: CodeInterpreterSessionOut(name='data'),
  requestId?: string(name='requestId'),
}

model GetCredentialOutput {
  config?: map[string]string(name='config'),
  createdAt?: string(name='createdAt'),
  description?: string(name='description'),
  id?: string(name='id'),
  name?: string(name='name'),
  secret?: string(name='secret'),
  type?: string(name='type'),
  updatedAt?: string(name='updatedAt'),
}

model GetToolOutput {
  data?: ToolInfo(name='data'),
  success?: boolean(name='success'),
}

model GrayTrafficWeight {
  version?: string(name='version', description='灰度版本号'),
  weight?: float(name='weight', description='流量权重比例（0.0-1.0）', minimum=0, maximum=1),
}

model HealthCheckConfig {
  failureThreshold?: int32(name='failureThreshold', description='在将容器视为不健康之前，连续失败的健康检查次数', minimum=1, maximum=120),
  httpGetUrl?: string(name='httpGetUrl', description='用于健康检查的HTTP GET请求的URL地址', maximum=2048),
  initialDelaySeconds?: int32(name='initialDelaySeconds', description='在容器启动后，首次执行健康检查前的延迟时间（秒）', minimum=0, maximum=120),
  periodSeconds?: int32(name='periodSeconds', description='执行健康检查的时间间隔（秒）', minimum=1, maximum=120),
  successThreshold?: int32(name='successThreshold', description='在将容器视为健康之前，连续成功的健康检查次数', minimum=1, maximum=120),
  timeoutSeconds?: int32(name='timeoutSeconds', description='健康检查的超时时间（秒）', minimum=1, maximum=3),
}

model HealthCheckConfiguration {
  failureThreshold?: int32(name='failureThreshold', description='在将容器视为不健康之前，连续失败的健康检查次数', minimum=1, maximum=120),
  httpGetUrl?: string(name='httpGetUrl', description='用于健康检查的HTTP GET请求的URL地址', maximum=2048),
  initialDelaySeconds?: int32(name='initialDelaySeconds', description='在容器启动后，首次执行健康检查前的延迟时间（秒）', minimum=0, maximum=120),
  periodSeconds?: int32(name='periodSeconds', description='执行健康检查的时间间隔（秒）', minimum=1, maximum=120),
  successThreshold?: int32(name='successThreshold', description='在将容器视为健康之前，连续成功的健康检查次数', minimum=1, maximum=120),
  timeoutSeconds?: int32(name='timeoutSeconds', description='健康检查的超时时间（秒）', minimum=1, maximum=3),
}

model LLMAPIConfiguration {
  aiProtocols?: [ string ](name='aiProtocols'),
  attachPolicyConfigs?: [
    AttachPolicyConfig
  ](name='attachPolicyConfigs'),
  basePath?: string(name='basePath'),
  deployConfigs?: [
    LLMDeployConfig
  ](name='deployConfigs'),
  modelCategory?: string(name='modelCategory'),
  removeBasePathOnForward?: boolean(name='removeBasePathOnForward'),
  type?: string(name='type'),
}

model LLMDeployConfig {
  autoDeploy?: boolean(name='autoDeploy'),
  backendScene?: string(name='backendScene'),
  customDomainIds?: [ string ](name='customDomainIds'),
  gatewayType?: string(name='gatewayType'),
  policyConfigs?: [
    PolicyConfig
  ](name='policyConfigs'),
  serviceConfigs?: [
    TargetServiceConfig
  ](name='serviceConfigs'),
}

model ListAgentRuntimeEndpointsInput {
  endpointName?: string(name='endpointName', description='按端点名称过滤'),
  pageNumber?: integer(name='pageNumber', description='页码'),
  pageSize?: integer(name='pageSize', description='每页记录数'),
  statuses?: [ string ](name='statuses', description='按状态过滤'),
}

model ListAgentRuntimeEndpointsOutput {
  items?: [
    AgentRuntimeEndpoint
  ](name='items'),
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
  total?: integer(name='total'),
}

model ListAgentRuntimeEndpointsResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: ListAgentRuntimeEndpointsOutput(name='data', description='智能体运行时端点列表的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model ListAgentRuntimeVersionsInput {
  pageNumber?: integer(name='pageNumber', description='页码'),
  pageSize?: integer(name='pageSize', description='每页记录数'),
}

model ListAgentRuntimeVersionsOutput {
  items?: [
    AgentRuntimeVersion
  ](name='items'),
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
  total?: integer(name='total'),
}

model ListAgentRuntimeVersionsResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: ListAgentRuntimeVersionsOutput(name='data', description='智能体运行时版本列表的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model ListAgentRuntimesInput {
  agentRuntimeName?: string(name='agentRuntimeName', description='按名称过滤'),
  pageNumber?: integer(name='pageNumber', description='页码'),
  pageSize?: integer(name='pageSize', description='每页记录数'),
  statuses?: [ string ](name='statuses', description='按状态过滤'),
}

model ListAgentRuntimesOutput {
  items?: [
    AgentRuntime
  ](name='items'),
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
  total?: integer(name='total'),
}

model ListAgentRuntimesResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: ListAgentRuntimesOutput(name='data', description='智能体运行时列表的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model ListBrowserSessionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: BrowserSessionListOut(name='data'),
  requestId?: string(name='requestId'),
}

model ListBrowsersInput {
  browserName?: string(name='browserName', description='按浏览器名称过滤'),
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
}

model ListBrowsersOutput {
  items?: [
    Browser
  ](name='items'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  total?: long(name='total'),
}

model ListBrowsersResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: ListBrowsersOutput(name='data', description='浏览器列表的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model ListCodeInterpreterSessionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: CodeInterpreterSessionListOut(name='data'),
  requestId?: string(name='requestId'),
}

model ListCodeInterpretersInput {
  codeInterpreterName?: string(name='codeInterpreterName', description='按代码解释器名称过滤'),
  pageNumber?: integer(name='pageNumber', minimum=1),
  pageSize?: integer(name='pageSize', minimum=1),
}

model ListCodeInterpretersOutput {
  items?: [
    CodeInterpreter
  ](name='items'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  total?: long(name='total'),
}

model ListCodeInterpretersResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: ListCodeInterpretersOutput(name='data', description='代码解释器列表的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model ListCredentialsOutput {
  items?: CredentialListItem(name='items'),
  pageNum?: string(name='pageNum'),
  pageSize?: string(name='pageSize'),
  total?: string(name='total'),
}

model ListDomainsOutput {
  items?: [
    DomainInfo
  ](name='items'),
  pageNumber?: string(name='pageNumber'),
  pageSize?: string(name='pageSize'),
  totalCount?: string(name='totalCount'),
}

model ListGatewaysOutput {
  items?: Gateway(name='items'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  total?: int32(name='total'),
}

model ListToolsOutput {
  data?: [
    ToolListItem
  ](name='data'),
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
  total?: int32(name='total'),
}

model LogConfiguration {
  logstore?: string(name='logstore', description='SLS日志库名称'),
  project?: string(name='project', description='SLS项目名称'),
}

model MCPAPI {
  backendConfig?: MCPBackendConfig(name='backendConfig'),
  description?: string(name='description'),
  exposedUriPath?: string(name='exposedUriPath'),
  match?: MCPMatch(name='match'),
  mcpStatisticsEnable?: boolean(name='mcpStatisticsEnable'),
  protocol?: string(name='protocol'),
  toolId?: string(name='toolId'),
  toolsConfig?: string(name='toolsConfig'),
}

model MCPAPIConfiguration {
  description?: string(name='description'),
  exposedUriPath?: string(name='exposedUriPath'),
  mcpStatisticsEnable?: boolean(name='mcpStatisticsEnable'),
  protocol?: string(name='protocol'),
  toolId?: string(name='toolId'),
}

model MCPBackendConfig {
  scene?: string(name='scene'),
  services?: [
    MCPServiceConfig
  ](name='services'),
}

model MCPMatch {
  path?: MCPPathMatch(name='path'),
}

model MCPPathMatch {
  type?: string(name='type'),
  value?: string(name='value'),
}

model MCPServerConfig {
  serverUrl?: string(name='serverUrl'),
  ssePath?: string(name='ssePath'),
  transportType?: string(name='transportType'),
}

model MCPServiceConfig {
  serviceId?: string(name='serviceId'),
}

model Model {
  address?: string(name='address'),
  apiKey?: string(name='apiKey'),
  createdTime?: string(name='createdTime'),
  desc?: string(name='desc'),
  gatewayId?: string(name='gatewayId'),
  modelId?: string(name='modelId'),
  models?: string(name='models'),
  modelsWeight?: string(name='modelsWeight'),
  name?: string(name='name'),
  provider?: string(name='provider'),
  targetId?: string(name='targetId'),
  tenantId?: string(name='tenantId'),
  type?: string(name='type'),
  updateTime?: string(name='updateTime'),
}

model NetworkConfiguration {
  networkMode?: string(name='networkMode'),
  securityGroupId?: string(name='securityGroupId'),
  vpcId?: string(name='vpcId'),
  vswitchIds?: [ string ](name='vswitchIds'),
}

model PaginationInfo {
  limit?: int32(name='limit'),
  page?: int32(name='page'),
  total?: int32(name='total'),
  totalPages?: int32(name='totalPages'),
}

model PolicyConfig {
  aiFallbackConfig?: AiFallbackConfig(name='aiFallbackConfig'),
  enable?: boolean(name='enable'),
  type?: string(name='type'),
}

model ProtocolConfiguration {
  type?: string(name='type'),
}

model PublishRuntimeVersionInput {
  description?: string(name='description', description='此版本的描述'),
}

model RelatedWorkload {
  workloadId?: string(name='workloadId'),
  workloadName?: string(name='workloadName'),
  workloadType?: string(name='workloadType'),
}

model RoutingConfiguration {
  versionWeights?: [
    VersionWeight
  ](name='versionWeights', description='不同版本的流量权重配置'),
}

model ServiceConfig {
  aiServiceConfig?: AiServiceConfig(name='aiServiceConfig'),
  name?: string(name='name'),
}

model StartBrowserSessionInput {
  name?: string(name='name'),
}

model StartBrowserSessionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: BrowserSessionOut(name='data'),
  requestId?: string(name='requestId'),
}

model StartCodeInterpreterSessionInput {
  name?: string(name='name', description='代码解释器会话的名称，用于标识和区分不同的会话实例'),
}

model StartCodeInterpreterSessionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: CodeInterpreterSessionOut(name='data'),
  requestId?: string(name='requestId'),
}

model StopCodeInterpreterSessionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  requestId?: string(name='requestId'),
}

model Target {
  llmConfig?: LLMAPIConfiguration(name='llmConfig'),
  mcpAPI?: MCPAPI(name='mcpAPI'),
  targetType?: string(name='targetType'),
}

model TargetConfiguration {
  llmAPIConfig?: LLMAPIConfiguration(name='llmAPIConfig'),
  mcpAPIConfig?: MCPAPIConfiguration(name='mcpAPIConfig'),
  targetType?: string(name='targetType'),
}

model TargetServiceConfig {
  modelId?: string(name='modelId'),
  modelName?: string(name='modelName'),
  modelNamePattern?: string(name='modelNamePattern'),
  weight?: long(name='weight'),
}

model Template {
  templateID?: string(name='templateID'),
  templateVersion?: string(name='templateVersion'),
}

model ToolInfo {
  CAPConfig?: CAPConfig(name='CAPConfig'),
  createdAt?: string(name='createdAt'),
  description?: string(name='description'),
  id?: string(name='id'),
  name?: string(name='name'),
  schema?: string(name='schema'),
  sourceType?: string(name='sourceType'),
  toolType?: string(name='toolType'),
  updatedAt?: string(name='updatedAt'),
}

model ToolListItem {
  CAPConfig?: CAPConfig(name='CAPConfig'),
  createdAt?: string(name='createdAt'),
  description?: string(name='description'),
  id?: string(name='id'),
  name?: string(name='name'),
  schema?: string(name='schema'),
  sourceType?: string(name='sourceType'),
  toolType?: string(name='toolType'),
  updatedAt?: string(name='updatedAt'),
}

model TriggerConfig {
  authType?: string(name='authType'),
  methods?: [ string ](name='methods'),
}

model UpdateAgentRuntimeEndpointInput {
  agentRuntimeEndpointName?: string(name='agentRuntimeEndpointName'),
  description?: string(name='description'),
  routingConfiguration?: RoutingConfiguration(name='routingConfiguration', description='智能体运行时端点的路由配置，支持多版本权重分配'),
  targetVersion?: string(name='targetVersion', description='智能体运行时的目标版本'),
}

model UpdateAgentRuntimeInput {
  agentRuntimeName?: string(name='agentRuntimeName'),
  artifactType?: string(name='artifactType'),
  codeConfiguration?: CodeConfiguration(name='codeConfiguration'),
  containerConfiguration?: ContainerConfiguration(name='containerConfiguration'),
  cpu: float(name='cpu', description='This parameter is required.'),
  description?: string(name='description'),
  environmentVariables?: map[string]string(name='environmentVariables'),
  executionRoleArn?: string(name='executionRoleArn', description='为智能体运行时提供访问云服务权限的执行角色ARN'),
  healthCheckConfiguration?: HealthCheckConfiguration(name='healthCheckConfiguration', description='智能体运行时的健康检查配置，用于监控运行时实例的健康状态'),
  logConfiguration?: LogConfiguration(name='logConfiguration', description='SLS（简单日志服务）配置'),
  memory?: int32(name='memory'),
  networkConfiguration?: NetworkConfiguration(name='networkConfiguration'),
  port?: int32(name='port'),
  protocolConfiguration?: ProtocolConfiguration(name='protocolConfiguration'),
  sessionConcurrencyLimitPerInstance?: int32(name='sessionConcurrencyLimitPerInstance', description='每个运行时实例允许的最大并发会话数', minimum=1, maximum=200),
  sessionIdleTimeoutSeconds?: int32(name='sessionIdleTimeoutSeconds', description='会话的空闲超时时间，单位为秒。实例没有会话请求后处于空闲状态，空闲态为闲置计费模式，超过此超时时间后会话自动过期，不可继续使用'),
}

model UpdateCredentialInput {
  config?: map[string]string(name='config'),
  description?: string(name='description'),
  name?: string(name='name'),
  secret?: string(name='secret'),
  type?: string(name='type'),
}

model UpdateCredentialOutput {
  id?: string(name='id'),
  name?: string(name='name'),
  type?: string(name='type'),
  updatedAt?: string(name='updatedAt'),
}

model UpdateDomainInput {
  certIdentifier?: string(name='certIdentifier'),
  protocol?: string(name='protocol'),
}

model UpdateModelInput {
  address?: string(name='address'),
  apiKey?: string(name='apiKey'),
  desc?: string(name='desc'),
  models?: [ string ](name='models'),
  name?: string(name='name'),
  provider?: string(name='provider'),
  type?: string(name='type'),
}

model UpdateTargetConfigurationInput {
  domainId?: string(name='domainId'),
  targetConfiguration?: TargetConfiguration(name='targetConfiguration'),
}

model UpdateToolData {
  id?: string(name='id'),
  name?: string(name='name'),
  sourceType?: string(name='sourceType'),
  toolType?: string(name='toolType'),
  updatedAt?: string(name='updatedAt'),
}

model UpdateToolInput {
  description?: string(name='description'),
  name?: string(name='name'),
  schema?: string(name='schema'),
}

model UpdateToolOutput {
  data?: UpdateToolData(name='data'),
  message?: string(name='message'),
  success?: boolean(name='success'),
}

model VersionWeight {
  version?: string(name='version', description='智能体运行时版本号'),
  weight?: float(name='weight', description='流量权重比例（0.0-1.0）', minimum=0, maximum=1),
}

model CreateAgentRuntimeRequest {
  body: CreateAgentRuntimeInput(name='body', description='创建智能体运行时所需的完整配置信息，包括运行时名称、资源规格、网络配置、协议配置等

This parameter is required.', position='Body'),
}

model CreateAgentRuntimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeResult  
}

/**
  * @description 创建一个新的智能体运行时实例，用于执行AI代理任务。智能体运行时是AgentRun服务的核心组件，提供代码执行、浏览器操作、内存管理等能力。
  * @param request  the request parameters of CreateAgentRuntime  CreateAgentRuntimeRequest
  * @return CreateAgentRuntimeResponse
 */
async function createAgentRuntime(request: CreateAgentRuntimeRequest): CreateAgentRuntimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAgentRuntime', 'POST', '/2025-09-10/agents/runtimes', 'json', false, 'json', request);
}

model CreateAgentRuntimeEndpointRequest {
  agentRuntimeId: string(name='agentRuntimeId', description='要创建端点的智能体运行时实例的唯一标识符

This parameter is required.', example='12345678-1234-1234-1234-123456789abc', position='Path'),
  body: CreateAgentRuntimeEndpointInput(name='body', description='包含要创建的智能体运行时端点配置信息的请求体

This parameter is required.', position='Body'),
}

model CreateAgentRuntimeEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeEndpointResult  
}

/**
  * @description 为指定的智能体运行时创建新的端点，用于外部访问和调用。端点是智能体运行时对外提供服务的入口。
  * @param request  the request parameters of CreateAgentRuntimeEndpoint  CreateAgentRuntimeEndpointRequest
  * @return CreateAgentRuntimeEndpointResponse
 */
async function createAgentRuntimeEndpoint(request: CreateAgentRuntimeEndpointRequest): CreateAgentRuntimeEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateAgentRuntimeEndpoint', 'POST', '/2025-09-10/agents/runtimes/{agentRuntimeId}/endpoints', 'json', false, 'json', request);
}

model CreateBrowserRequest {
  body: CreateBrowserInput(name='body', description='This parameter is required.', position='Body'),
}

model CreateBrowserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BrowserResult  
}

/**
  * @description 创建一个新的浏览器实例，用于执行网页自动化任务。浏览器实例提供网页浏览、元素操作、截图录制等功能。
  * @param request  the request parameters of CreateBrowser  CreateBrowserRequest
  * @return CreateBrowserResponse
 */
async function createBrowser(request: CreateBrowserRequest): CreateBrowserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateBrowser', 'POST', '/2025-09-10/agents/browsers', 'json', false, 'json', request);
}

model CreateCodeInterpreterRequest {
  body: CreateCodeInterpreterInput(name='body', description='This parameter is required.', position='Body'),
}

model CreateCodeInterpreterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CodeInterpreterResult  
}

/**
  * @description 创建一个新的代码解释器实例，用于执行代码解释和运行任务。代码解释器提供Python代码执行、数据处理、机器学习等功能。
  * @param request  the request parameters of CreateCodeInterpreter  CreateCodeInterpreterRequest
  * @return CreateCodeInterpreterResponse
 */
async function createCodeInterpreter(request: CreateCodeInterpreterRequest): CreateCodeInterpreterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateCodeInterpreter', 'POST', '/2025-09-10/agents/code-interpreters', 'json', false, 'json', request);
}

model CreateMemoryRequest {
  longTtl: int32(name='longTtl', description='This parameter is required.', example='365', position='Body'),
  name: string(name='name', description='This parameter is required.', example='test-memory', position='Body'),
  shortTtl: int32(name='shortTtl', description='This parameter is required.', example='30', position='Body'),
}

model CreateMemoryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  requestId?: string(name='requestId', description='Id of the request', example='0FB1162C-D50B-5DA7-AD04-3417ABBF133A'),
}

model CreateMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMemory  CreateMemoryRequest
  * @return CreateMemoryResponse
 */
async function createMemory(request: CreateMemoryRequest): CreateMemoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMemory', 'POST', '/2025-09-10/agents/memories', 'json', false, 'json', request);
}

model CreateMemoryEventRequest {
  memoryName: string(name='memoryName', description='This parameter is required.', example='test-memory', position='Path'),
  events: [ 
    {
      eventId: string(name='eventId', description='This parameter is required.', example='33.63.112.139_29914368_MTEE3_1754878127662_117007'),
      message?: [ map[string]string ](name='message'),
      metadata?: map[string]any(name='metadata'),
      sessionId: string(name='sessionId', description='This parameter is required.', example='fd0bbf26-3c0c-4d91-a392-42d59501e12b'),
      userId: string(name='userId', description='This parameter is required.', example='uid1'),
    }
  ](name='events', description='This parameter is required.', position='Body'),
}

model CreateMemoryEventResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  requestId?: string(name='requestId', description='Id of the request', example='A8B33FA2-43F2-5E56-9032-51283F08018E'),
}

model CreateMemoryEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemoryEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateMemoryEvent  CreateMemoryEventRequest
  * @return CreateMemoryEventResponse
 */
async function createMemoryEvent(request: CreateMemoryEventRequest): CreateMemoryEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateMemoryEvent', 'POST', '/2025-09-10/agents/memories/{memoryName}/events', 'json', false, 'json', request);
}

model DeleteAgentRuntimeRequest {
  agentRuntimeId: string(name='agentRuntimeId', description='要删除的智能体运行时实例的唯一标识符

This parameter is required.', example='12345678-1234-1234-1234-123456789abc', position='Path'),
}

model DeleteAgentRuntimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeResult  
}

/**
  * @description 删除指定的智能体运行时实例，包括其所有相关资源和数据。删除操作不可逆，请谨慎操作。
  * @param request  the request parameters of DeleteAgentRuntime  DeleteAgentRuntimeRequest
  * @return DeleteAgentRuntimeResponse
 */
async function deleteAgentRuntime(request: DeleteAgentRuntimeRequest): DeleteAgentRuntimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAgentRuntime', 'DELETE', '/2025-09-10/agents/runtimes/{agentRuntimeId}', 'json', false, 'json', request);
}

model DeleteAgentRuntimeEndpointRequest {
  agentRuntimeId: string(name='agentRuntimeId', description='智能体运行时实例的唯一标识符

This parameter is required.', example='12345678-1234-1234-1234-123456789abc', position='Path'),
  agentRuntimeEndpointId: string(name='agentRuntimeEndpointId', description='要删除的智能体运行时端点的唯一标识符

This parameter is required.', example='87654321-4321-4321-4321-210987654321', position='Path'),
}

model DeleteAgentRuntimeEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeEndpointResult  
}

/**
  * @param request  the request parameters of DeleteAgentRuntimeEndpoint  DeleteAgentRuntimeEndpointRequest
  * @return DeleteAgentRuntimeEndpointResponse
 */
async function deleteAgentRuntimeEndpoint(request: DeleteAgentRuntimeEndpointRequest): DeleteAgentRuntimeEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteAgentRuntimeEndpoint', 'DELETE', '/2025-09-10/agents/runtimes/{agentRuntimeId}/endpoints/{agentRuntimeEndpointId}', 'json', false, 'json', request);
}

model DeleteBrowserRequest {
  browserId: string(name='browserId', description='要删除的浏览器实例的唯一标识符

This parameter is required.', example='12345678-1234-1234-1234-123456789abc', position='Path'),
}

model DeleteBrowserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBrowserResult  
}

/**
  * @description 删除指定的浏览器实例，包括其所有相关资源和数据。删除操作不可逆，请谨慎操作。
  * @param request  the request parameters of DeleteBrowser  DeleteBrowserRequest
  * @return DeleteBrowserResponse
 */
async function deleteBrowser(request: DeleteBrowserRequest): DeleteBrowserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteBrowser', 'DELETE', '/2025-09-10/agents/browsers/{browserId}', 'json', false, 'json', request);
}

model DeleteCodeInterpreterRequest {
  codeInterpreterId: string(name='codeInterpreterId', description='要删除的代码解释器实例的唯一标识符

This parameter is required.', example='12345678-1234-1234-1234-123456789abc', position='Path'),
}

model DeleteCodeInterpreterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCodeInterpreterResult  
}

/**
  * @description 删除指定的代码解释器实例，包括其所有相关资源和数据。删除操作不可逆，请谨慎操作。
  * @param request  the request parameters of DeleteCodeInterpreter  DeleteCodeInterpreterRequest
  * @return DeleteCodeInterpreterResponse
 */
async function deleteCodeInterpreter(request: DeleteCodeInterpreterRequest): DeleteCodeInterpreterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteCodeInterpreter', 'DELETE', '/2025-09-10/agents/code-interpreters/{codeInterpreterId}', 'json', false, 'json', request);
}

model DeleteMemoryRequest {
  memoryName: string(name='memoryName', description='This parameter is required.', example='test-memory', position='Path'),
}

model DeleteMemoryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  requestId?: string(name='requestId', description='Id of the request', example='970F08C9-EB28-5A3D-A228-D541AEC4C807'),
}

model DeleteMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMemoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteMemory  DeleteMemoryRequest
  * @return DeleteMemoryResponse
 */
async function deleteMemory(request: DeleteMemoryRequest): DeleteMemoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteMemory', 'DELETE', '/2025-09-10/agents/memories/{memoryName}', 'json', false, 'json', request);
}

model GetAgentRuntimeRequest {
  agentRuntimeId: string(name='agentRuntimeId', description='要获取详情的智能体运行时实例的唯一标识符

This parameter is required.', example='12345678-1234-1234-1234-123456789abc', position='Path'),
  agentRuntimeVersion?: string(name='agentRuntimeVersion', description='指定要获取的智能体运行时版本，如果不指定则返回最新版本', example='v1.0.0', position='Query'),
}

model GetAgentRuntimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeResult  
}

/**
  * @description 根据智能体运行时ID获取指定智能体运行时的详细信息，包括配置、状态、资源使用情况等。
  * @param request  the request parameters of GetAgentRuntime  GetAgentRuntimeRequest
  * @return GetAgentRuntimeResponse
 */
async function getAgentRuntime(request: GetAgentRuntimeRequest): GetAgentRuntimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAgentRuntime', 'GET', '/2025-09-10/agents/runtimes/{agentRuntimeId}', 'json', false, 'json', request);
}

model GetAgentRuntimeEndpointRequest {
  agentRuntimeId: string(name='agentRuntimeId', description='智能体运行时实例的唯一标识符

This parameter is required.', example='12345678-1234-1234-1234-123456789abc', position='Path'),
  agentRuntimeEndpointId: string(name='agentRuntimeEndpointId', description='要获取的智能体运行时端点的唯一标识符

This parameter is required.', example='87654321-4321-4321-4321-210987654321', position='Path'),
}

model GetAgentRuntimeEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeEndpointResult  
}

/**
  * @param request  the request parameters of GetAgentRuntimeEndpoint  GetAgentRuntimeEndpointRequest
  * @return GetAgentRuntimeEndpointResponse
 */
async function getAgentRuntimeEndpoint(request: GetAgentRuntimeEndpointRequest): GetAgentRuntimeEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetAgentRuntimeEndpoint', 'GET', '/2025-09-10/agents/runtimes/{agentRuntimeId}/endpoints/{agentRuntimeEndpointId}', 'json', false, 'json', request);
}

model GetBrowserRequest {
  browserId: string(name='browserId', description='要获取详情的浏览器实例的唯一标识符

This parameter is required.', example='12345678-1234-1234-1234-123456789abc', position='Path'),
}

model GetBrowserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BrowserResult  
}

/**
  * @description 根据浏览器ID获取指定浏览器实例的详细信息，包括配置、状态、资源使用情况等。
  * @param request  the request parameters of GetBrowser  GetBrowserRequest
  * @return GetBrowserResponse
 */
async function getBrowser(request: GetBrowserRequest): GetBrowserResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetBrowser', 'GET', '/2025-09-10/agents/browsers/{browserId}', 'json', false, 'json', request);
}

model GetCodeInterpreterRequest {
  codeInterpreterId: string(name='codeInterpreterId', description='要获取详情的代码解释器实例的唯一标识符

This parameter is required.', example='12345678-1234-1234-1234-123456789abc', position='Path'),
}

model GetCodeInterpreterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CodeInterpreterResult  
}

/**
  * @description 根据代码解释器ID获取指定代码解释器实例的详细信息，包括配置、状态、资源使用情况等。
  * @param request  the request parameters of GetCodeInterpreter  GetCodeInterpreterRequest
  * @return GetCodeInterpreterResponse
 */
async function getCodeInterpreter(request: GetCodeInterpreterRequest): GetCodeInterpreterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetCodeInterpreter', 'GET', '/2025-09-10/agents/code-interpreters/{codeInterpreterId}', 'json', false, 'json', request);
}

model GetMemoryRequest {
  memoryName: string(name='memoryName', description='This parameter is required.', example='test-memory', position='Path'),
}

model GetMemoryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    createTime?: int32(name='createTime'),
    longTtl?: int32(name='longTtl', example='365'),
    name?: string(name='name', example='test-memory'),
    shortTtl?: int32(name='shortTtl', example='30'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='5A362ADD-51FC-5F4A-B858-D77F6EFAE2E6'),
}

model GetMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMemory  GetMemoryRequest
  * @return GetMemoryResponse
 */
async function getMemory(request: GetMemoryRequest): GetMemoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMemory', 'GET', '/2025-09-10/agents/memories/{memoryName}', 'json', false, 'json', request);
}

model GetMemoryEventRequest {
  memoryName: string(name='memoryName', description='This parameter is required.', example='test-memory', position='Path'),
  sessionId: string(name='sessionId', description='This parameter is required.', example='0e070a4f-a912-4368-9c37-232bf4940894', position='Path'),
  eventId: string(name='eventId', description='This parameter is required.', example='33.7.34.254_195956675_MTEE3_1757556035917_4082', position='Path'),
  from?: long(name='from', example='1758273080', position='Query'),
  to?: long(name='to', example='1758273680', position='Query'),
}

model GetMemoryEventResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    event?: map[string]any(name='event'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='BF2A63E4-FCE9-5A65-A60E-4086C8EDBC06'),
}

model GetMemoryEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemoryEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetMemoryEvent  GetMemoryEventRequest
  * @return GetMemoryEventResponse
 */
async function getMemoryEvent(request: GetMemoryEventRequest): GetMemoryEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMemoryEvent', 'GET', '/2025-09-10/agents/memories/{memoryName}/sessions/{sessionId}/events/{eventId}', 'json', false, 'json', request);
}

model GetMemorySessionRequest {
  memoryName: string(name='memoryName', description='This parameter is required.', example='test-memory', position='Path'),
  sessionId: string(name='sessionId', description='This parameter is required.', example='9fdb0de3-a0f0-4ff1-8d46-18ec5db78c5d', position='Path'),
  from?: long(name='from', example='1736558346', position='Query'),
  size?: int32(name='size', example='20', position='Query'),
  to?: long(name='to', example='1736561898', position='Query'),
}

model GetMemorySessionResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    events?: [ map[string]any ](name='events'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='55D4BE40-2811-5CFB-8482-E0E98D575B1E'),
}

model GetMemorySessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemorySessionResponseBody(name='body'),
}

/**
  * @description 根据会话ID获取指定内存会话的详细信息，包括会话中的事件记录、时间戳等。用于查看和管理对话历史。
  * @param request  the request parameters of GetMemorySession  GetMemorySessionRequest
  * @return GetMemorySessionResponse
 */
async function getMemorySession(request: GetMemorySessionRequest): GetMemorySessionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetMemorySession', 'GET', '/2025-09-10/agents/memories/{memoryName}/sessions/{sessionId}', 'json', false, 'json', request);
}

model ListAgentRuntimeEndpointsRequest {
  agentRuntimeId: string(name='agentRuntimeId', description='智能体运行时实例的唯一标识符

This parameter is required.', example='12345678-1234-1234-1234-123456789abc', position='Path'),
  endpointName?: string(name='endpointName', description='根据端点名称进行模糊匹配过滤', example='my-endpoint', position='Query'),
  pageNumber?: int32(name='pageNumber', description='当前页码，从1开始计数', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='每页返回的记录数量', example='10', position='Query'),
}

model ListAgentRuntimeEndpointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAgentRuntimeEndpointsResult  
}

/**
  * @description 获取指定智能体运行时的所有端点列表，支持按名称过滤和分页查询。端点用于外部系统访问智能体运行时服务。
  * @param request  the request parameters of ListAgentRuntimeEndpoints  ListAgentRuntimeEndpointsRequest
  * @return ListAgentRuntimeEndpointsResponse
 */
async function listAgentRuntimeEndpoints(request: ListAgentRuntimeEndpointsRequest): ListAgentRuntimeEndpointsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAgentRuntimeEndpoints', 'GET', '/2025-09-10/agents/runtimes/{agentRuntimeId}/endpoints', 'json', false, 'json', request);
}

model ListAgentRuntimeVersionsRequest {
  agentRuntimeId: string(name='agentRuntimeId', description='智能体运行时实例的唯一标识符

This parameter is required.', example='12345678-1234-1234-1234-123456789abc', position='Path'),
  pageNumber?: int32(name='pageNumber', description='当前页码，从1开始计数', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='每页返回的记录数量', example='10', position='Query'),
}

model ListAgentRuntimeVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAgentRuntimeVersionsResult  
}

/**
  * @param request  the request parameters of ListAgentRuntimeVersions  ListAgentRuntimeVersionsRequest
  * @return ListAgentRuntimeVersionsResponse
 */
async function listAgentRuntimeVersions(request: ListAgentRuntimeVersionsRequest): ListAgentRuntimeVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAgentRuntimeVersions', 'GET', '/2025-09-10/agents/runtimes/{agentRuntimeId}/versions', 'json', false, 'json', request);
}

model ListAgentRuntimesRequest {
  agentRuntimeName?: string(name='agentRuntimeName', description='根据智能体运行时名称进行模糊匹配过滤', example='my-runtime', position='Query'),
  pageNumber?: int32(name='pageNumber', description='当前页码，从1开始计数', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='每页返回的记录数量', example='10', position='Query'),
}

model ListAgentRuntimesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAgentRuntimesResult  
}

/**
  * @description 获取当前用户的所有智能体运行时列表，支持按名称、标签等条件过滤，支持分页查询。
  * @param request  the request parameters of ListAgentRuntimes  ListAgentRuntimesRequest
  * @return ListAgentRuntimesResponse
 */
async function listAgentRuntimes(request: ListAgentRuntimesRequest): ListAgentRuntimesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListAgentRuntimes', 'GET', '/2025-09-10/agents/runtimes', 'json', false, 'json', request);
}

model ListBrowsersRequest {
  browserName?: string(name='browserName', description='根据浏览器实例名称进行模糊匹配过滤', example='browser', position='Query'),
  pageNumber?: int32(name='pageNumber', description='当前页码，从1开始计数', example='10', position='Query'),
  pageSize?: int32(name='pageSize', description='每页返回的记录数量', example='1', position='Query'),
  status?: string(name='status', description='根据浏览器实例的运行状态进行过滤，可选值：CREATING、READY、DELETING等', example='CREATING', position='Query'),
}

model ListBrowsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBrowsersResult  
}

/**
  * @description 获取当前用户的所有浏览器实例列表，支持按名称、状态等条件过滤，支持分页查询。
  * @param request  the request parameters of ListBrowsers  ListBrowsersRequest
  * @return ListBrowsersResponse
 */
async function listBrowsers(request: ListBrowsersRequest): ListBrowsersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListBrowsers', 'GET', '/2025-09-10/agents/browsers', 'json', false, 'json', request);
}

model ListCodeInterpretersRequest {
  codeInterpreterName?: string(name='codeInterpreterName', description='根据代码解释器实例名称进行模糊匹配过滤', example='code', position='Query'),
  pageNumber?: int32(name='pageNumber', description='当前页码，从1开始计数', example='1', position='Query'),
  pageSize?: int32(name='pageSize', description='每页返回的记录数量', example='10', position='Query'),
}

model ListCodeInterpretersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCodeInterpretersResult  
}

/**
  * @description 获取当前用户的所有代码解释器实例列表，支持按名称等条件过滤，支持分页查询。
  * @param request  the request parameters of ListCodeInterpreters  ListCodeInterpretersRequest
  * @return ListCodeInterpretersResponse
 */
async function listCodeInterpreters(request: ListCodeInterpretersRequest): ListCodeInterpretersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListCodeInterpreters', 'GET', '/2025-09-10/agents/code-interpreters', 'json', false, 'json', request);
}

model ListMemoryRequest {
  namePrefix?: string(name='namePrefix', example='test', position='Query'),
  pageNumber: int32(name='pageNumber', description='This parameter is required.', example='1', position='Query'),
  pageSize: int32(name='pageSize', description='This parameter is required.', example='0', position='Query'),
}

model ListMemoryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    items?: [ string ](name='items'),
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: long(name='total', example='284'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='55D4BE40-2811-5CFB-8482-E0E98D575B1E'),
}

model ListMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMemoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMemory  ListMemoryRequest
  * @return ListMemoryResponse
 */
async function listMemory(request: ListMemoryRequest): ListMemoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMemory', 'GET', '/2025-09-10/agents/memories', 'json', false, 'json', request);
}

model ListMemoryEventRequest {
  memoryName: string(name='memoryName', description='This parameter is required.', example='test-memory', position='Path'),
  sessionId: string(name='sessionId', description='This parameter is required.', example='hh309d0li5c4ctpsxlcbismaipcwx4i0s0qxj6wfns6u583zehb7jyxiqt879sf40ucl0r1jytle3tn53lwdmdcxcwpmhnk51a2w8zipv51vu8pcj6t8g84smv5o6d2i080b62bkftam9xtjtdajokhacy6mbggxzu002i4a3jy67ijq7fhqgmyejexikfp80si', position='Path'),
  from?: long(name='from', example='1742347023', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='10', position='Query'),
  to?: long(name='to', example='1736561650', position='Query'),
}

model ListMemoryEventResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    items?: [ string ](name='items'),
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='20'),
    total?: long(name='total', example='2'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='0FB1162C-D50B-5DA7-AD04-3417ABBF133A'),
}

model ListMemoryEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMemoryEventResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListMemoryEvent  ListMemoryEventRequest
  * @return ListMemoryEventResponse
 */
async function listMemoryEvent(request: ListMemoryEventRequest): ListMemoryEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMemoryEvent', 'GET', '/2025-09-10/agents/memories/{memoryName}/sessions/{sessionId}/events', 'json', false, 'json', request);
}

model ListMemorySessionsRequest {
  memoryName: string(name='memoryName', description='This parameter is required.', example='test-memory', position='Path'),
  from?: long(name='from', example='1740622996', position='Query'),
  pageNumber?: int32(name='pageNumber', example='1', position='Query'),
  pageSize?: int32(name='pageSize', example='20', position='Query'),
  to?: long(name='to', example='1747275768', position='Query'),
}

model ListMemorySessionsResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    items?: [ string ](name='items'),
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: long(name='total', example='211'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='E2C43519-6095-5487-9526-051AB8F50B4A'),
}

model ListMemorySessionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMemorySessionsResponseBody(name='body'),
}

/**
  * @description 获取指定内存实例的所有会话列表，支持按时间范围过滤和分页查询。会话是AgentRun中用于存储对话历史和管理上下文的重要组件。
  * @param request  the request parameters of ListMemorySessions  ListMemorySessionsRequest
  * @return ListMemorySessionsResponse
 */
async function listMemorySessions(request: ListMemorySessionsRequest): ListMemorySessionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListMemorySessions', 'GET', '/2025-09-10/agents/memories/{memoryName}/sessions', 'json', false, 'json', request);
}

model PublishRuntimeVersionRequest {
  agentRuntimeId: string(name='agentRuntimeId', description='要发布版本的智能体运行时实例的唯一标识符

This parameter is required.', example='12345678-1234-1234-1234-123456789abc', position='Path'),
  body?: PublishRuntimeVersionInput(name='body', position='Body'),
}

model PublishRuntimeVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeVersionResult  
}

/**
  * @description 为指定的智能体运行时发布新版本，用于版本管理和部署。新版本可以包含代码更新、配置变更等内容。
  * @param request  the request parameters of PublishRuntimeVersion  PublishRuntimeVersionRequest
  * @return PublishRuntimeVersionResponse
 */
async function publishRuntimeVersion(request: PublishRuntimeVersionRequest): PublishRuntimeVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishRuntimeVersion', 'POST', '/2025-09-10/agents/runtimes/{agentRuntimeId}/versions', 'json', false, 'json', request);
}

model RetrieveMemoryRequest {
  memoryName: string(name='memoryName', description='This parameter is required.', example='test-memory', position='Path'),
  from?: int32(name='from', example='1756431013', position='Body'),
  query: {
    memory?: string(name='memory', example='10'),
    metadata?: map[string]string(name='metadata'),
    namespace?: string(name='namespace', example='preference'),
    userId: string(name='userId', description='This parameter is required.', example='uid1'),
  }(name='query', description='This parameter is required.', position='Body'),
  store?: string(name='store', example='memory', position='Body'),
  to?: int32(name='to', example='1737856802', position='Body'),
  topk?: int32(name='topk', example='10', position='Body'),
}

model RetrieveMemoryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    events?: [ map[string]string ](name='events'),
    memories?: [ map[string]string ](name='memories'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='BC65E49E-1F6A-55E0-8A0E-7255DBFAA8F9'),
}

model RetrieveMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetrieveMemoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RetrieveMemory  RetrieveMemoryRequest
  * @return RetrieveMemoryResponse
 */
async function retrieveMemory(request: RetrieveMemoryRequest): RetrieveMemoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RetrieveMemory', 'POST', '/2025-09-10/agents/memories/{memoryName}/records', 'json', false, 'json', request);
}

model UpdateAgentRuntimeRequest {
  agentRuntimeId: string(name='agentRuntimeId', description='要更新的智能体运行时实例的唯一标识符

This parameter is required.', example='12345678-1234-1234-1234-123456789abc', position='Path'),
  body: UpdateAgentRuntimeInput(name='body', description='包含要更新的智能体运行时配置信息的请求体

This parameter is required.', position='Body'),
}

model UpdateAgentRuntimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeResult  
}

/**
  * @description 更新指定智能体运行时的配置信息，包括资源分配、网络配置、环境变量等。更新操作会触发运行时重启。
  * @param request  the request parameters of UpdateAgentRuntime  UpdateAgentRuntimeRequest
  * @return UpdateAgentRuntimeResponse
 */
async function updateAgentRuntime(request: UpdateAgentRuntimeRequest): UpdateAgentRuntimeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAgentRuntime', 'PUT', '/2025-09-10/agents/runtimes/{agentRuntimeId}', 'json', false, 'json', request);
}

model UpdateAgentRuntimeEndpointRequest {
  agentRuntimeId: string(name='agentRuntimeId', description='智能体运行时实例的唯一标识符

This parameter is required.', example='12345678-1234-1234-1234-123456789abc', position='Path'),
  agentRuntimeEndpointId: string(name='agentRuntimeEndpointId', description='要更新的智能体运行时端点的唯一标识符

This parameter is required.', example='87654321-4321-4321-4321-210987654321', position='Path'),
  body: UpdateAgentRuntimeEndpointInput(name='body', description='包含要更新的智能体运行时端点配置信息的请求体

This parameter is required.', position='Body'),
}

model UpdateAgentRuntimeEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeEndpointResult  
}

/**
  * @param request  the request parameters of UpdateAgentRuntimeEndpoint  UpdateAgentRuntimeEndpointRequest
  * @return UpdateAgentRuntimeEndpointResponse
 */
async function updateAgentRuntimeEndpoint(request: UpdateAgentRuntimeEndpointRequest): UpdateAgentRuntimeEndpointResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateAgentRuntimeEndpoint', 'PUT', '/2025-09-10/agents/runtimes/{agentRuntimeId}/endpoints/{agentRuntimeEndpointId}', 'json', false, 'json', request);
}

model UpdateMemoryRequest {
  memoryName: string(name='memoryName', description='This parameter is required.', example='test-memory', position='Path'),
  longTtl: int32(name='longTtl', description='This parameter is required.', example='365', position='Query'),
  shortTtl: int32(name='shortTtl', description='This parameter is required.', example='30', position='Query'),
}

model UpdateMemoryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  requestId?: string(name='requestId', description='Id of the request', example='C0595DB0-D1EE-55C3-8DDD-790872C7EC2F'),
}

model UpdateMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMemoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateMemory  UpdateMemoryRequest
  * @return UpdateMemoryResponse
 */
async function updateMemory(request: UpdateMemoryRequest): UpdateMemoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateMemory', 'PUT', '/2025-09-10/agents/memories/{memoryName}', 'json', false, 'json', request);
}

