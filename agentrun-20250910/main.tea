/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('agentrun', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AgentRuntime {
  agentRuntimeArn?: string(name='agentRuntimeArn', description='智能体运行时的全局唯一资源名称'),
  agentRuntimeId?: string(name='agentRuntimeId', description='智能体运行时的唯一标识符'),
  agentRuntimeName?: string(name='agentRuntimeName', description='智能体运行时的名称，用于标识和区分不同的运行时实例'),
  agentRuntimeVersion?: string(name='agentRuntimeVersion', description='智能体运行时的版本号，用于版本管理和回滚'),
  artifactType?: string(name='artifactType', description='智能体运行时的部署类型，支持Code（代码模式）和Container（容器模式）'),
  codeConfiguration?: CodeConfiguration(name='codeConfiguration', description='当artifactType为Code时的代码配置信息'),
  containerConfiguration?: ContainerConfiguration(name='containerConfiguration', description='当artifactType为Container时的容器配置信息'),
  cpu?: float(name='cpu', description='智能体运行时分配的CPU资源，单位为核数'),
  createdAt?: string(name='createdAt', description='智能体运行时的创建时间，采用ISO 8601格式'),
  description?: string(name='description', description='智能体运行时的描述信息，说明该运行时的用途和功能'),
  environmentVariables?: map[string]string(name='environmentVariables', description='智能体运行时的环境变量配置'),
  executionRoleArn?: string(name='executionRoleArn', description='为智能体运行时提供访问云服务权限的执行角色ARN'),
  healthCheckConfiguration?: HealthCheckConfiguration(name='healthCheckConfiguration', description='智能体运行时的健康检查配置，用于监控运行时实例的健康状态'),
  lastUpdatedAt?: string(name='lastUpdatedAt', description='智能体运行时最后一次更新的时间，采用ISO 8601格式'),
  logConfiguration?: LogConfiguration(name='logConfiguration', description='SLS（简单日志服务）配置'),
  memory?: integer(name='memory', description='智能体运行时分配的内存资源，单位为MB'),
  networkConfiguration?: NetworkConfiguration(name='networkConfiguration', description='智能体运行时的网络配置信息'),
  port?: integer(name='port', description='智能体运行时监听的端口号'),
  protocolConfiguration?: ProtocolConfiguration(name='protocolConfiguration', description='智能体运行时的通信协议配置'),
  sessionConcurrencyLimitPerInstance?: integer(name='sessionConcurrencyLimitPerInstance', description='每个运行时实例允许的最大并发会话数'),
  sessionIdleTimeoutSeconds?: int32(name='sessionIdleTimeoutSeconds', description='会话的空闲超时时间，单位为秒。实例没有会话请求后处于空闲状态，空闲态为闲置计费模式，超过此超时时间后会话自动过期，不可继续使用'),
  status?: string(name='status', description='智能体运行时的当前状态，如READY（就绪）、CREATING（创建中）、FAILED（失败）等'),
  statusReason?: string(name='statusReason', description='当前状态的原因说明（如适用）'),
}

model AgentRuntimeEndpoint {
  agentRuntimeEndpointArn?: string(name='agentRuntimeEndpointArn'),
  agentRuntimeEndpointId?: string(name='agentRuntimeEndpointId'),
  agentRuntimeEndpointName?: string(name='agentRuntimeEndpointName'),
  agentRuntimeId?: string(name='agentRuntimeId'),
  description?: string(name='description'),
  endpointPublicUrl?: string(name='endpointPublicUrl', description='智能体运行时端点的公网访问地址'),
  routingConfiguration?: RoutingConfiguration(name='routingConfiguration', description='智能体运行时端点的路由配置，支持多版本权重分配'),
  status?: string(name='status'),
  statusReason?: string(name='statusReason'),
  targetVersion?: string(name='targetVersion'),
}

model AgentRuntimeEndpointResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: AgentRuntimeEndpoint(name='data', description='智能体运行时端点的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model AgentRuntimeResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: AgentRuntime(name='data', description='智能体运行时的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model AgentRuntimeVersion {
  agentRuntimeArn?: string(name='agentRuntimeArn', description='智能体运行时的ARN'),
  agentRuntimeId?: string(name='agentRuntimeId', description='智能体运行时的ID'),
  agentRuntimeName?: string(name='agentRuntimeName', description='智能体运行时的名称'),
  agentRuntimeVersion?: string(name='agentRuntimeVersion', description='已发布版本的版本号'),
  description?: string(name='description', description='此版本的描述'),
  lastUpdatedAt?: string(name='lastUpdatedAt', description='最后更新的时间戳'),
}

model AgentRuntimeVersionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: AgentRuntimeVersion(name='data', description='智能体运行时版本的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model AiFallbackConfig {
  serviceConfigs?: [
    AiFallbackServiceConfig
  ](name='serviceConfigs'),
}

model AiFallbackServiceConfig {
  passThroughModelName?: boolean(name='passThroughModelName'),
  serviceId?: string(name='serviceId'),
  targetModelName?: string(name='targetModelName'),
}

model AiServiceConfig {
  address?: string(name='address'),
  apiKeys?: [ string ](name='apiKeys'),
  enableHealthCheck?: boolean(name='enableHealthCheck'),
  protocols?: [ string ](name='protocols'),
  provider?: string(name='provider'),
}

model AttachPolicyConfig {
  className?: string(name='className'),
  config?: string(name='config'),
  name?: string(name='name'),
}

model Browser {
  browserId?: string(name='browserId'),
  browserName?: string(name='browserName'),
  cpu?: float(name='cpu'),
  createdAt?: string(name='createdAt'),
  credentialId?: string(name='credentialId'),
  description?: string(name='description'),
  executionRoleArn?: string(name='executionRoleArn'),
  lastUpdatedAt?: string(name='lastUpdatedAt'),
  memory?: int32(name='memory', description='内存资源配置（单位：MB）'),
  networkConfiguration?: NetworkConfiguration(name='networkConfiguration'),
  recording?: BrowserRecordingConfiguration(name='recording'),
  status?: string(name='status'),
  statusReason?: string(name='statusReason', description='当前状态的原因说明（如适用）'),
  tenantId?: string(name='tenantId'),
}

model BrowserAutomationStream {
  streamEndpoint?: string(name='streamEndpoint'),
  streamStatus?: string(name='streamStatus'),
}

model BrowserLiveViewStream {
  streamEndpoint?: string(name='streamEndpoint'),
}

model BrowserOssLocation {
  bucket?: string(name='bucket'),
  prefix?: string(name='prefix'),
}

model BrowserRecordingConfiguration {
  enabled?: boolean(name='enabled'),
  ossLocation?: BrowserOssLocation(name='ossLocation'),
}

model BrowserResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: Browser(name='data', description='浏览器的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model BrowserSessionListOut {
  items?: [
    BrowserSessionOut
  ](name='items'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  total?: long(name='total'),
}

model BrowserSessionOut {
  browserId?: string(name='browserId'),
  browserName?: string(name='browserName'),
  createdAt?: string(name='createdAt'),
  lastUpdatedAt?: string(name='lastUpdatedAt'),
  sessionId?: string(name='sessionId', description='This parameter is required.'),
  sessionIdleTimeoutSeconds?: int32(name='sessionIdleTimeoutSeconds', description='会话空闲超时时间，单位为秒'),
  status?: string(name='status'),
}

model BrowserStreams {
  automationStream?: BrowserAutomationStream(name='automationStream'),
  liveViewStream?: BrowserLiveViewStream(name='liveViewStream'),
}

model BrowserViewPort {
  height?: double(name='height'),
  width?: double(name='width'),
}

model CAPConfig {
  functionName?: string(name='functionName'),
  name?: string(name='name'),
  templateId?: int32(name='templateId'),
}

model CodeConfiguration {
  checksum?: string(name='checksum', description='代码包的CRC-64校验值。如果提供了checksum，则函数计算会校验代码包的checksum是否和提供的一致'),
  command?: [ string ](name='command', description='在运行时中运行的命令（例如：[\\"python\\"]）'),
  language?: string(name='language', description='代码运行时的编程语言，如 python3、nodejs 等'),
  zipFile?: string(name='zipFile', description='智能体代码ZIP包的Base64编码', example='UEsDBAoAAAAAANF'),
}

model CodeInfo {
  ossBucketName?: string(name='ossBucketName'),
  ossObjectName?: string(name='ossObjectName'),
}

model CodeInterpreter {
  codeInterpreterId?: string(name='codeInterpreterId', description='代码解释器的唯一标识符'),
  codeInterpreterName?: string(name='codeInterpreterName', description='代码解释器的名称，用于标识和区分不同的代码解释器实例'),
  cpu?: float(name='cpu'),
  createdAt?: string(name='createdAt', description='代码解释器的创建时间，采用ISO 8601格式'),
  description?: string(name='description', description='代码解释器的描述信息，说明该解释器的用途和功能'),
  executionRoleArn?: string(name='executionRoleArn', description='此代码解释器的执行角色'),
  lastUpdatedAt?: string(name='lastUpdatedAt', description='代码解释器的最后更新时间，采用ISO 8601格式'),
  memory?: int32(name='memory', description='内存资源配置（单位：MB）'),
  networkConfiguration?: NetworkConfiguration(name='networkConfiguration', description='代码解释器的网络配置信息'),
  status?: string(name='status', description='代码解释器的当前状态，如READY（就绪）、TERMINATED（已终止）等'),
  statusReason?: string(name='statusReason', description='当前状态的原因说明（如适用）'),
  tenantId?: string(name='tenantId'),
}

model CodeInterpreterResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: CodeInterpreter(name='data', description='代码解释器的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model CodeInterpreterSessionConfig {
  environment?: map[string]string(name='environment', description='代码解释器会话的环境变量配置'),
  timeout?: int32(name='timeout', description='代码解释器会话的超时时间，单位为秒'),
  workingDirectory?: string(name='workingDirectory', description='代码解释器会话的工作目录路径'),
}

model CodeInterpreterSessionListOut {
  items?: [
    CodeInterpreterSessionOut
  ](name='items'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  total?: long(name='total'),
}

model CodeInterpreterSessionOut {
  codeInterpreterId?: string(name='codeInterpreterId', description='关联的代码解释器的唯一标识符

This parameter is required.'),
  codeInterpreterName?: string(name='codeInterpreterName', description='代码解释器会话的名称'),
  createdAt?: string(name='createdAt', description='代码解释器会话的创建时间，采用ISO 8601格式'),
  lastUpdatedAt?: string(name='lastUpdatedAt', description='代码解释器会话的最后更新时间，采用ISO 8601格式'),
  sessionId?: string(name='sessionId', description='代码解释器会话的唯一标识符

This parameter is required.'),
  sessionIdleTimeoutSeconds?: int32(name='sessionIdleTimeoutSeconds', description='代码解释器会话的空闲超时时间，单位为秒。实例没有会话请求后处于空闲状态，空闲态为闲置计费模式，超过此超时时间后会话自动过期，不可继续使用'),
  status?: string(name='status', description='代码解释器会话的当前状态

This parameter is required.'),
}

model CommonResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: any(name='data', description='实际的业务数据内容'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model ContainerConfiguration {
  command?: [ string ](name='command', description='在容器中运行的命令（例如：[\\"python3\\", \\"app.py\\"]）'),
  image?: string(name='image'),
}

model CreateAgentRuntimeEndpointInput {
  agentRuntimeEndpointName?: string(name='agentRuntimeEndpointName'),
  description?: string(name='description'),
  routingConfiguration?: RoutingConfiguration(name='routingConfiguration', description='智能体运行时端点的路由配置，支持多版本权重分配'),
  targetVersion?: string(name='targetVersion', description='智能体运行时的目标版本'),
}

model CreateAgentRuntimeInput {
  agentRuntimeName?: string(name='agentRuntimeName', description='智能体运行时的唯一标识名称，用于区分不同的智能体运行时实例

This parameter is required.'),
  artifactType?: string(name='artifactType', description='指定智能体运行时的部署类型，支持Code（代码模式）和Container（容器模式）

This parameter is required.'),
  codeConfiguration?: CodeConfiguration(name='codeConfiguration', description='当artifactType为Code时的代码配置信息，包括代码源、入口文件等'),
  containerConfiguration?: ContainerConfiguration(name='containerConfiguration', description='当artifactType为Container时的容器配置信息，包括镜像地址、启动命令等'),
  cpu?: float(name='cpu', description='为智能体运行时分配的CPU资源，单位为核数

This parameter is required.'),
  credentialId?: string(name='credentialId', description='用于访问外部服务的凭证ID，智能体运行时将使用此凭证进行身份验证'),
  description?: string(name='description', description='智能体运行时的描述信息，用于说明该运行时的用途和功能'),
  environmentVariables?: map[string]string(name='environmentVariables', description='智能体运行时的环境变量配置，用于在运行时传递配置参数'),
  executionRoleArn?: string(name='executionRoleArn', description='为智能体运行时提供访问云服务权限的执行角色ARN'),
  healthCheckConfiguration?: HealthCheckConfiguration(name='healthCheckConfiguration', description='智能体运行时的健康检查配置，用于监控运行时实例的健康状态'),
  logConfiguration?: LogConfiguration(name='logConfiguration', description='SLS（简单日志服务）配置'),
  memory?: int32(name='memory', description='为智能体运行时分配的内存资源，单位为MB

This parameter is required.'),
  networkConfiguration?: NetworkConfiguration(name='networkConfiguration', description='智能体运行时的网络配置，包括VPC、安全组等网络访问设置

This parameter is required.'),
  port?: int32(name='port', description='智能体运行时监听的端口号，用于接收外部请求

This parameter is required.'),
  protocolConfiguration?: ProtocolConfiguration(name='protocolConfiguration', description='智能体运行时的通信协议配置，定义运行时如何与外部系统交互'),
  sessionConcurrencyLimitPerInstance?: int32(name='sessionConcurrencyLimitPerInstance', description='每个运行时实例允许的最大并发会话数'),
  sessionIdleTimeoutSeconds?: int32(name='sessionIdleTimeoutSeconds', description='会话的空闲超时时间，单位为秒。实例没有会话请求后处于空闲状态，空闲态为闲置计费模式，超过此超时时间后会话自动过期，不可继续使用'),
}

model CreateAgentRuntimeVersionInput {
  description?: string(name='description', description='版本描述'),
}

model CreateBrowserInput {
  browserName?: string(name='browserName', description='This parameter is required.'),
  cpu?: float(name='cpu', description='CPU资源配置（单位：核）

This parameter is required.'),
  credentialId?: string(name='credentialId'),
  description?: string(name='description'),
  executionRoleArn?: string(name='executionRoleArn'),
  memory?: int32(name='memory', description='内存资源配置（单位：MB）

This parameter is required.'),
  networkConfiguration?: NetworkConfiguration(name='networkConfiguration', description='This parameter is required.'),
  sessionIdleTimeoutSeconds?: int32(name='sessionIdleTimeoutSeconds', description='会话的空闲超时时间，单位为秒。实例没有会话请求后处于空闲状态，空闲态为闲置计费模式，超过此超时时间后会话自动过期，不可继续使用'),
}

model CreateCodeInterpreterInput {
  codeInterpreterName?: string(name='codeInterpreterName', description='代码解释器的名称，用于标识和区分不同的代码解释器实例

This parameter is required.'),
  cpu?: float(name='cpu', description='CPU资源配置（单位：核数）

This parameter is required.'),
  credentialId?: string(name='credentialId'),
  description?: string(name='description', description='代码解释器的描述信息，说明该解释器的用途和功能'),
  executionRoleArn?: string(name='executionRoleArn', description='此代码解释器的执行角色'),
  memory?: int32(name='memory', description='内存资源配置（单位：MB）

This parameter is required.'),
  networkConfiguration?: NetworkConfiguration(name='networkConfiguration', description='代码解释器的网络配置，包括VPC、安全组等网络访问设置

This parameter is required.'),
  sessionIdleTimeoutSeconds?: int32(name='sessionIdleTimeoutSeconds', description='会话的空闲超时时间，单位为秒。实例没有会话请求后处于空闲状态，空闲态为闲置计费模式，超过此超时时间后会话自动过期，不可继续使用'),
}

model CreateCredentialInput {
  config?: map[string]string(name='config'),
  description?: string(name='description'),
  name?: string(name='name'),
  secret?: string(name='secret'),
  type?: string(name='type'),
}

model CreateCredentialOutput {
  createdAt?: string(name='createdAt'),
  id?: string(name='id'),
  name?: string(name='name'),
  type?: string(name='type'),
}

model CreateDomainInput {
  certIdentifier?: string(name='certIdentifier'),
  name?: string(name='name'),
  protocol?: string(name='protocol'),
}

model CreateGatewayInput {
  identityId?: string(name='identityId'),
  name?: string(name='name'),
  networkConfiguration?: GatewayNetworkConfiguration(name='networkConfiguration'),
  type?: string(name='type'),
}

model CreateGatewayTargetInput {
  domainId?: string(name='domainId'),
  name?: string(name='name'),
  targetConfiguration?: TargetConfiguration(name='targetConfiguration'),
}

model CreateModelInput {
  address?: string(name='address'),
  apiKey?: string(name='apiKey'),
  desc?: string(name='desc'),
  models?: [ string ](name='models'),
  name?: string(name='name'),
  provider?: string(name='provider'),
  type?: string(name='type'),
}

model CreateToolData {
  createdAt?: string(name='createdAt'),
  id?: string(name='id'),
  name?: string(name='name'),
  sourceType?: string(name='sourceType'),
  toolType?: string(name='toolType'),
}

model CreateToolInput {
  CAPConfig?: CAPConfig(name='CAPConfig'),
  description?: string(name='description'),
  name?: string(name='name', description='This parameter is required.'),
  schema?: string(name='schema', description='This parameter is required.'),
  sourceType?: string(name='sourceType', description='This parameter is required.'),
  toolType?: string(name='toolType', description='This parameter is required.'),
}

model CreateToolOutput {
  data?: CreateToolData(name='data'),
  message?: string(name='message'),
  success?: boolean(name='success'),
}

model CredentialListItem {
  createdAt?: string(name='createdAt'),
  id?: string(name='id'),
  name?: string(name='name'),
  relatedWorloads?: [
    RelatedWorkload
  ](name='relatedWorloads'),
  type?: string(name='type'),
  updatedAt?: string(name='updatedAt'),
}

model CustomRuntimeConfig {
  args?: [ string ](name='args'),
  command?: [ string ](name='command'),
  port?: int32(name='port'),
}

model DeleteBrowserOut {
  browserId?: string(name='browserId'),
  browserName?: string(name='browserName'),
  status?: string(name='status'),
}

model DeleteBrowserResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: Browser(name='data'),
  requestId?: string(name='requestId'),
}

model DeleteCodeInterpreterOut {
  codeInterpreterId?: string(name='codeInterpreterId'),
  codeInterpreterName?: string(name='codeInterpreterName'),
  status?: string(name='status'),
}

model DeleteCodeInterpreterResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: CodeInterpreter(name='data'),
  requestId?: string(name='requestId'),
}

model DomainInfo {
  certIdentifier?: string(name='certIdentifier'),
  domainId?: string(name='domainId'),
  name?: string(name='name'),
  protocol?: string(name='protocol'),
}

model ErrorResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  message?: string(name='message', description='错误信息描述'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model FCLinkConfig {
  functionName?: string(name='functionName'),
  version?: string(name='version'),
}

model Gateway {
  createdAt?: string(name='createdAt'),
  gatewayId?: string(name='gatewayId'),
  internetUrl?: string(name='internetUrl'),
  intranetUrl?: string(name='intranetUrl'),
  name?: string(name='name'),
  status?: string(name='status'),
  updatedAt?: string(name='updatedAt'),
}

model GatewayNetworkConfiguration {
  networkMode?: string(name='networkMode'),
  vpcId?: string(name='vpcId'),
  vswitchIds?: [ string ](name='vswitchIds'),
}

model GetBrowserSessionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: BrowserSessionOut(name='data'),
  requestId?: string(name='requestId'),
}

model GetCodeInterpreterSessionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: CodeInterpreterSessionOut(name='data'),
  requestId?: string(name='requestId'),
}

model GetCredentialOutput {
  config?: map[string]string(name='config'),
  createdAt?: string(name='createdAt'),
  description?: string(name='description'),
  id?: string(name='id'),
  name?: string(name='name'),
  secret?: string(name='secret'),
  type?: string(name='type'),
  updatedAt?: string(name='updatedAt'),
}

model GetToolOutput {
  data?: ToolInfo(name='data'),
  success?: boolean(name='success'),
}

model GrayTrafficWeight {
  version?: string(name='version', description='灰度版本号'),
  weight?: float(name='weight', description='流量权重比例（0.0-1.0）'),
}

model HealthCheckConfig {
  failureThreshold?: int32(name='failureThreshold', description='在将容器视为不健康之前，连续失败的健康检查次数'),
  httpGetUrl?: string(name='httpGetUrl', description='用于健康检查的HTTP GET请求的URL地址'),
  initialDelaySeconds?: int32(name='initialDelaySeconds', description='在容器启动后，首次执行健康检查前的延迟时间（秒）'),
  periodSeconds?: int32(name='periodSeconds', description='执行健康检查的时间间隔（秒）'),
  successThreshold?: int32(name='successThreshold', description='在将容器视为健康之前，连续成功的健康检查次数'),
  timeoutSeconds?: int32(name='timeoutSeconds', description='健康检查的超时时间（秒）'),
}

model HealthCheckConfiguration {
  failureThreshold?: int32(name='failureThreshold', description='在将容器视为不健康之前，连续失败的健康检查次数'),
  httpGetUrl?: string(name='httpGetUrl', description='用于健康检查的HTTP GET请求的URL地址'),
  initialDelaySeconds?: int32(name='initialDelaySeconds', description='在容器启动后，首次执行健康检查前的延迟时间（秒）'),
  periodSeconds?: int32(name='periodSeconds', description='执行健康检查的时间间隔（秒）'),
  successThreshold?: int32(name='successThreshold', description='在将容器视为健康之前，连续成功的健康检查次数'),
  timeoutSeconds?: int32(name='timeoutSeconds', description='健康检查的超时时间（秒）'),
}

model LLMAPIConfiguration {
  aiProtocols?: [ string ](name='aiProtocols'),
  attachPolicyConfigs?: [
    AttachPolicyConfig
  ](name='attachPolicyConfigs'),
  basePath?: string(name='basePath'),
  deployConfigs?: [
    LLMDeployConfig
  ](name='deployConfigs'),
  modelCategory?: string(name='modelCategory'),
  removeBasePathOnForward?: boolean(name='removeBasePathOnForward'),
  type?: string(name='type'),
}

model LLMDeployConfig {
  autoDeploy?: boolean(name='autoDeploy'),
  backendScene?: string(name='backendScene'),
  customDomainIds?: [ string ](name='customDomainIds'),
  gatewayType?: string(name='gatewayType'),
  policyConfigs?: [
    PolicyConfig
  ](name='policyConfigs'),
  serviceConfigs?: [
    TargetServiceConfig
  ](name='serviceConfigs'),
}

model ListAgentRuntimeEndpointsInput {
  endpointName?: string(name='endpointName', description='按端点名称过滤'),
  pageNumber?: integer(name='pageNumber', description='页码'),
  pageSize?: integer(name='pageSize', description='每页记录数'),
  statuses?: [ string ](name='statuses', description='按状态过滤'),
}

model ListAgentRuntimeEndpointsOutput {
  items?: [
    AgentRuntimeEndpoint
  ](name='items'),
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
  total?: integer(name='total'),
}

model ListAgentRuntimeEndpointsResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: ListAgentRuntimeEndpointsOutput(name='data', description='智能体运行时端点列表的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model ListAgentRuntimeVersionsInput {
  pageNumber?: integer(name='pageNumber', description='页码'),
  pageSize?: integer(name='pageSize', description='每页记录数'),
}

model ListAgentRuntimeVersionsOutput {
  items?: [
    AgentRuntimeVersion
  ](name='items'),
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
  total?: integer(name='total'),
}

model ListAgentRuntimeVersionsResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: ListAgentRuntimeVersionsOutput(name='data', description='智能体运行时版本列表的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model ListAgentRuntimesInput {
  agentRuntimeName?: string(name='agentRuntimeName', description='按名称过滤'),
  pageNumber?: integer(name='pageNumber', description='页码'),
  pageSize?: integer(name='pageSize', description='每页记录数'),
  statuses?: [ string ](name='statuses', description='按状态过滤'),
}

model ListAgentRuntimesOutput {
  items?: [
    AgentRuntime
  ](name='items'),
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
  total?: integer(name='total'),
}

model ListAgentRuntimesResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: ListAgentRuntimesOutput(name='data', description='智能体运行时列表的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model ListBrowserSessionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: BrowserSessionListOut(name='data'),
  requestId?: string(name='requestId'),
}

model ListBrowsersInput {
  browserName?: string(name='browserName', description='按浏览器名称过滤'),
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
}

model ListBrowsersOutput {
  items?: [
    Browser
  ](name='items'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  total?: long(name='total'),
}

model ListBrowsersResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: ListBrowsersOutput(name='data', description='浏览器列表的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model ListCodeInterpreterSessionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: CodeInterpreterSessionListOut(name='data'),
  requestId?: string(name='requestId'),
}

model ListCodeInterpretersInput {
  codeInterpreterName?: string(name='codeInterpreterName', description='按代码解释器名称过滤'),
  pageNumber?: integer(name='pageNumber'),
  pageSize?: integer(name='pageSize'),
}

model ListCodeInterpretersOutput {
  items?: [
    CodeInterpreter
  ](name='items'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  total?: long(name='total'),
}

model ListCodeInterpretersResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: ListCodeInterpretersOutput(name='data', description='代码解释器列表的详细信息'),
  requestId?: string(name='requestId', description='唯一的请求标识符，用于问题追踪'),
}

model ListCredentialsOutput {
  items?: CredentialListItem(name='items'),
  pageNum?: string(name='pageNum'),
  pageSize?: string(name='pageSize'),
  total?: string(name='total'),
}

model ListDomainsOutput {
  items?: [
    DomainInfo
  ](name='items'),
  pageNumber?: string(name='pageNumber'),
  pageSize?: string(name='pageSize'),
  totalCount?: string(name='totalCount'),
}

model ListGatewaysOutput {
  items?: Gateway(name='items'),
  pageNumber?: int32(name='pageNumber'),
  pageSize?: int32(name='pageSize'),
  total?: int32(name='total'),
}

model ListToolsOutput {
  data?: [
    ToolListItem
  ](name='data'),
  pageNum?: int32(name='pageNum'),
  pageSize?: int32(name='pageSize'),
  total?: int32(name='total'),
}

model LogConfiguration {
  logstore?: string(name='logstore', description='SLS日志库名称'),
  project?: string(name='project', description='SLS项目名称'),
}

model MCPAPI {
  backendConfig?: MCPBackendConfig(name='backendConfig'),
  description?: string(name='description'),
  exposedUriPath?: string(name='exposedUriPath'),
  match?: MCPMatch(name='match'),
  mcpStatisticsEnable?: boolean(name='mcpStatisticsEnable'),
  protocol?: string(name='protocol'),
  toolId?: string(name='toolId'),
  toolsConfig?: string(name='toolsConfig'),
}

model MCPAPIConfiguration {
  description?: string(name='description'),
  exposedUriPath?: string(name='exposedUriPath'),
  mcpStatisticsEnable?: boolean(name='mcpStatisticsEnable'),
  protocol?: string(name='protocol'),
  toolId?: string(name='toolId'),
}

model MCPBackendConfig {
  scene?: string(name='scene'),
  services?: [
    MCPServiceConfig
  ](name='services'),
}

model MCPMatch {
  path?: MCPPathMatch(name='path'),
}

model MCPPathMatch {
  type?: string(name='type'),
  value?: string(name='value'),
}

model MCPServerConfig {
  serverUrl?: string(name='serverUrl'),
  ssePath?: string(name='ssePath'),
  transportType?: string(name='transportType'),
}

model MCPServiceConfig {
  serviceId?: string(name='serviceId'),
}

model Model {
  address?: string(name='address'),
  apiKey?: string(name='apiKey'),
  createdTime?: string(name='createdTime'),
  desc?: string(name='desc'),
  gatewayId?: string(name='gatewayId'),
  modelId?: string(name='modelId'),
  models?: string(name='models'),
  modelsWeight?: string(name='modelsWeight'),
  name?: string(name='name'),
  provider?: string(name='provider'),
  targetId?: string(name='targetId'),
  tenantId?: string(name='tenantId'),
  type?: string(name='type'),
  updateTime?: string(name='updateTime'),
}

model NetworkConfiguration {
  networkMode?: string(name='networkMode'),
  securityGroupId?: string(name='securityGroupId'),
  vpcId?: string(name='vpcId'),
  vswitchIds?: [ string ](name='vswitchIds'),
}

model PaginationInfo {
  limit?: int32(name='limit'),
  page?: int32(name='page'),
  total?: int32(name='total'),
  totalPages?: int32(name='totalPages'),
}

model PolicyConfig {
  aiFallbackConfig?: AiFallbackConfig(name='aiFallbackConfig'),
  enable?: boolean(name='enable'),
  type?: string(name='type'),
}

model ProtocolConfiguration {
  type?: string(name='type'),
}

model PublishRuntimeVersionInput {
  description?: string(name='description', description='此版本的描述'),
}

model RelatedWorkload {
  workloadId?: string(name='workloadId'),
  workloadName?: string(name='workloadName'),
  workloadType?: string(name='workloadType'),
}

model RoutingConfiguration {
  versionWeights?: [
    VersionWeight
  ](name='versionWeights', description='不同版本的流量权重配置'),
}

model ServiceConfig {
  aiServiceConfig?: AiServiceConfig(name='aiServiceConfig'),
  name?: string(name='name'),
}

model StartBrowserSessionInput {
  name?: string(name='name', nullable=true),
}

model StartBrowserSessionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: BrowserSessionOut(name='data'),
  requestId?: string(name='requestId'),
}

model StartCodeInterpreterSessionInput {
  name?: string(name='name', description='代码解释器会话的名称，用于标识和区分不同的会话实例', nullable=true),
}

model StartCodeInterpreterSessionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  data?: CodeInterpreterSessionOut(name='data'),
  requestId?: string(name='requestId'),
}

model StopCodeInterpreterSessionResult {
  code?: string(name='code', description='SUCCESS 为成功，失败情况返回对应错误类型，比如 ERR_BAD_REQUEST ERR_VALIDATION_FAILED ERR_INTERNAL_SERVER_ERROR'),
  requestId?: string(name='requestId'),
}

model Target {
  llmConfig?: LLMAPIConfiguration(name='llmConfig'),
  mcpAPI?: MCPAPI(name='mcpAPI'),
  targetType?: string(name='targetType'),
}

model TargetConfiguration {
  llmAPIConfig?: LLMAPIConfiguration(name='llmAPIConfig'),
  mcpAPIConfig?: MCPAPIConfiguration(name='mcpAPIConfig'),
  targetType?: string(name='targetType'),
}

model TargetServiceConfig {
  modelId?: string(name='modelId'),
  modelName?: string(name='modelName'),
  modelNamePattern?: string(name='modelNamePattern'),
  weight?: long(name='weight'),
}

model Template {
  templateID?: string(name='templateID'),
  templateVersion?: string(name='templateVersion'),
}

model ToolInfo {
  CAPConfig?: CAPConfig(name='CAPConfig'),
  createdAt?: string(name='createdAt'),
  description?: string(name='description'),
  id?: string(name='id'),
  name?: string(name='name'),
  schema?: string(name='schema'),
  sourceType?: string(name='sourceType'),
  toolType?: string(name='toolType'),
  updatedAt?: string(name='updatedAt'),
}

model ToolListItem {
  CAPConfig?: CAPConfig(name='CAPConfig'),
  createdAt?: string(name='createdAt'),
  description?: string(name='description'),
  id?: string(name='id'),
  name?: string(name='name'),
  schema?: string(name='schema'),
  sourceType?: string(name='sourceType'),
  toolType?: string(name='toolType'),
  updatedAt?: string(name='updatedAt'),
}

model TriggerConfig {
  authType?: string(name='authType'),
  methods?: [ string ](name='methods'),
}

model UpdateAgentRuntimeEndpointInput {
  agentRuntimeEndpointName?: string(name='agentRuntimeEndpointName'),
  description?: string(name='description'),
  routingConfiguration?: RoutingConfiguration(name='routingConfiguration', description='智能体运行时端点的路由配置，支持多版本权重分配'),
  targetVersion?: string(name='targetVersion', description='智能体运行时的目标版本'),
}

model UpdateAgentRuntimeInput {
  agentRuntimeName?: string(name='agentRuntimeName'),
  artifactType?: string(name='artifactType'),
  codeConfiguration?: CodeConfiguration(name='codeConfiguration'),
  containerConfiguration?: ContainerConfiguration(name='containerConfiguration'),
  cpu?: float(name='cpu', description='This parameter is required.'),
  description?: string(name='description'),
  environmentVariables?: map[string]string(name='environmentVariables'),
  executionRoleArn?: string(name='executionRoleArn', description='为智能体运行时提供访问云服务权限的执行角色ARN'),
  healthCheckConfiguration?: HealthCheckConfiguration(name='healthCheckConfiguration', description='智能体运行时的健康检查配置，用于监控运行时实例的健康状态'),
  logConfiguration?: LogConfiguration(name='logConfiguration', description='SLS（简单日志服务）配置'),
  memory?: int32(name='memory'),
  networkConfiguration?: NetworkConfiguration(name='networkConfiguration'),
  port?: int32(name='port'),
  protocolConfiguration?: ProtocolConfiguration(name='protocolConfiguration'),
  sessionConcurrencyLimitPerInstance?: int32(name='sessionConcurrencyLimitPerInstance', description='每个运行时实例允许的最大并发会话数'),
  sessionIdleTimeoutSeconds?: int32(name='sessionIdleTimeoutSeconds', description='会话的空闲超时时间，单位为秒。实例没有会话请求后处于空闲状态，空闲态为闲置计费模式，超过此超时时间后会话自动过期，不可继续使用'),
}

model UpdateCredentialInput {
  config?: map[string]string(name='config'),
  description?: string(name='description'),
  name?: string(name='name'),
  secret?: string(name='secret'),
  type?: string(name='type'),
}

model UpdateCredentialOutput {
  id?: string(name='id'),
  name?: string(name='name'),
  type?: string(name='type'),
  updatedAt?: string(name='updatedAt'),
}

model UpdateDomainInput {
  certIdentifier?: string(name='certIdentifier'),
  protocol?: string(name='protocol'),
}

model UpdateModelInput {
  address?: string(name='address'),
  apiKey?: string(name='apiKey'),
  desc?: string(name='desc'),
  models?: [ string ](name='models'),
  name?: string(name='name'),
  provider?: string(name='provider'),
  type?: string(name='type'),
}

model UpdateTargetConfigurationInput {
  domainId?: string(name='domainId'),
  targetConfiguration?: TargetConfiguration(name='targetConfiguration'),
}

model UpdateToolData {
  id?: string(name='id'),
  name?: string(name='name'),
  sourceType?: string(name='sourceType'),
  toolType?: string(name='toolType'),
  updatedAt?: string(name='updatedAt'),
}

model UpdateToolInput {
  description?: string(name='description'),
  name?: string(name='name'),
  schema?: string(name='schema'),
}

model UpdateToolOutput {
  data?: UpdateToolData(name='data'),
  message?: string(name='message'),
  success?: boolean(name='success'),
}

model VersionWeight {
  version?: string(name='version', description='智能体运行时版本号'),
  weight?: float(name='weight', description='流量权重比例（0.0-1.0）'),
}

model CreateAgentRuntimeRequest {
  body?: CreateAgentRuntimeInput(name='body', description='创建智能体运行时所需的完整配置信息，包括运行时名称、资源规格、网络配置、协议配置等

This parameter is required.'),
}

model CreateAgentRuntimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeResult  
}

/**
 * @summary Create an agent runtime
 *
 * @description 创建一个新的智能体运行时实例，用于执行AI代理任务。智能体运行时是AgentRun服务的核心组件，提供代码执行、浏览器操作、内存管理等能力。
 *
 * @param request CreateAgentRuntimeRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAgentRuntimeResponse
 */
async function createAgentRuntimeWithOptions(request: CreateAgentRuntimeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAgentRuntimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAgentRuntime',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/runtimes`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create an agent runtime
 *
 * @description 创建一个新的智能体运行时实例，用于执行AI代理任务。智能体运行时是AgentRun服务的核心组件，提供代码执行、浏览器操作、内存管理等能力。
 *
 * @param request CreateAgentRuntimeRequest
 * @return CreateAgentRuntimeResponse
 */
async function createAgentRuntime(request: CreateAgentRuntimeRequest): CreateAgentRuntimeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createAgentRuntimeWithOptions(request, headers, runtime);
}

model CreateAgentRuntimeEndpointRequest {
  body?: CreateAgentRuntimeEndpointInput(name='body', description='包含要创建的智能体运行时端点配置信息的请求体

This parameter is required.'),
}

model CreateAgentRuntimeEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeEndpointResult  
}

/**
 * @summary 创建智能体运行时端点
 *
 * @description 为指定的智能体运行时创建新的端点，用于外部访问和调用。端点是智能体运行时对外提供服务的入口。
 *
 * @param request CreateAgentRuntimeEndpointRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateAgentRuntimeEndpointResponse
 */
async function createAgentRuntimeEndpointWithOptions(agentRuntimeId: string, request: CreateAgentRuntimeEndpointRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateAgentRuntimeEndpointResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateAgentRuntimeEndpoint',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/runtimes/${OpenApiUtil.getEncodeParam(agentRuntimeId)}/endpoints`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建智能体运行时端点
 *
 * @description 为指定的智能体运行时创建新的端点，用于外部访问和调用。端点是智能体运行时对外提供服务的入口。
 *
 * @param request CreateAgentRuntimeEndpointRequest
 * @return CreateAgentRuntimeEndpointResponse
 */
async function createAgentRuntimeEndpoint(agentRuntimeId: string, request: CreateAgentRuntimeEndpointRequest): CreateAgentRuntimeEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createAgentRuntimeEndpointWithOptions(agentRuntimeId, request, headers, runtime);
}

model CreateBrowserRequest {
  body?: CreateBrowserInput(name='body', description='This parameter is required.'),
}

model CreateBrowserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BrowserResult  
}

/**
 * @summary 创建浏览器实例
 *
 * @description 创建一个新的浏览器实例，用于执行网页自动化任务。浏览器实例提供网页浏览、元素操作、截图录制等功能。
 *
 * @param request CreateBrowserRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateBrowserResponse
 */
async function createBrowserWithOptions(request: CreateBrowserRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateBrowserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateBrowser',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/browsers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建浏览器实例
 *
 * @description 创建一个新的浏览器实例，用于执行网页自动化任务。浏览器实例提供网页浏览、元素操作、截图录制等功能。
 *
 * @param request CreateBrowserRequest
 * @return CreateBrowserResponse
 */
async function createBrowser(request: CreateBrowserRequest): CreateBrowserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createBrowserWithOptions(request, headers, runtime);
}

model CreateCodeInterpreterRequest {
  body?: CreateCodeInterpreterInput(name='body', description='This parameter is required.'),
}

model CreateCodeInterpreterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CodeInterpreterResult  
}

/**
 * @summary 创建代码解释器
 *
 * @description 创建一个新的代码解释器实例，用于执行代码解释和运行任务。代码解释器提供Python代码执行、数据处理、机器学习等功能。
 *
 * @param request CreateCodeInterpreterRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateCodeInterpreterResponse
 */
async function createCodeInterpreterWithOptions(request: CreateCodeInterpreterRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateCodeInterpreterResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateCodeInterpreter',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/code-interpreters`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建代码解释器
 *
 * @description 创建一个新的代码解释器实例，用于执行代码解释和运行任务。代码解释器提供Python代码执行、数据处理、机器学习等功能。
 *
 * @param request CreateCodeInterpreterRequest
 * @return CreateCodeInterpreterResponse
 */
async function createCodeInterpreter(request: CreateCodeInterpreterRequest): CreateCodeInterpreterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createCodeInterpreterWithOptions(request, headers, runtime);
}

model CreateMemoryRequest {
  longTtl?: int32(name='longTtl', description='This parameter is required.', example='365'),
  name?: string(name='name', description='This parameter is required.', example='test-memory'),
  shortTtl?: int32(name='shortTtl', description='This parameter is required.', example='30'),
}

model CreateMemoryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  requestId?: string(name='requestId', description='Id of the request', example='0FB1162C-D50B-5DA7-AD04-3417ABBF133A'),
}

model CreateMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemoryResponseBody(name='body'),
}

/**
 * @summary create memory store
 *
 * @param request CreateMemoryRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMemoryResponse
 */
async function createMemoryWithOptions(request: CreateMemoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMemoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.longTtl)) {
    body['longTtl'] = request.longTtl;
  }
  if (!Util.isUnset(request.name)) {
    body['name'] = request.name;
  }
  if (!Util.isUnset(request.shortTtl)) {
    body['shortTtl'] = request.shortTtl;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMemory',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/memories`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary create memory store
 *
 * @param request CreateMemoryRequest
 * @return CreateMemoryResponse
 */
async function createMemory(request: CreateMemoryRequest): CreateMemoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createMemoryWithOptions(request, headers, runtime);
}

model CreateMemoryEventRequest {
  events?: [ 
    {
      eventId?: string(name='eventId', description='This parameter is required.', example='33.63.112.139_29914368_MTEE3_1754878127662_117007'),
      message?: [ map[string]string ](name='message'),
      metadata?: map[string]any(name='metadata'),
      sessionId?: string(name='sessionId', description='This parameter is required.', example='fd0bbf26-3c0c-4d91-a392-42d59501e12b'),
      userId?: string(name='userId', description='This parameter is required.', example='uid1'),
    }
  ](name='events', description='This parameter is required.'),
}

model CreateMemoryEventResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  requestId?: string(name='requestId', description='Id of the request', example='A8B33FA2-43F2-5E56-9032-51283F08018E'),
}

model CreateMemoryEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateMemoryEventResponseBody(name='body'),
}

/**
 * @summary create event
 *
 * @param request CreateMemoryEventRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateMemoryEventResponse
 */
async function createMemoryEventWithOptions(memoryName: string, request: CreateMemoryEventRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateMemoryEventResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.events)) {
    body['events'] = request.events;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateMemoryEvent',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/memories/${OpenApiUtil.getEncodeParam(memoryName)}/events`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary create event
 *
 * @param request CreateMemoryEventRequest
 * @return CreateMemoryEventResponse
 */
async function createMemoryEvent(memoryName: string, request: CreateMemoryEventRequest): CreateMemoryEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createMemoryEventWithOptions(memoryName, request, headers, runtime);
}

model DeleteAgentRuntimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeResult  
}

/**
 * @summary 删除智能体运行时
 *
 * @description 删除指定的智能体运行时实例，包括其所有相关资源和数据。删除操作不可逆，请谨慎操作。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAgentRuntimeResponse
 */
async function deleteAgentRuntimeWithOptions(agentRuntimeId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAgentRuntimeResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteAgentRuntime',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/runtimes/${OpenApiUtil.getEncodeParam(agentRuntimeId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除智能体运行时
 *
 * @description 删除指定的智能体运行时实例，包括其所有相关资源和数据。删除操作不可逆，请谨慎操作。
 *
 * @return DeleteAgentRuntimeResponse
 */
async function deleteAgentRuntime(agentRuntimeId: string): DeleteAgentRuntimeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteAgentRuntimeWithOptions(agentRuntimeId, headers, runtime);
}

model DeleteAgentRuntimeEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeEndpointResult  
}

/**
 * @summary Delete an agent runtime endpoint
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteAgentRuntimeEndpointResponse
 */
async function deleteAgentRuntimeEndpointWithOptions(agentRuntimeId: string, agentRuntimeEndpointId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteAgentRuntimeEndpointResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteAgentRuntimeEndpoint',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/runtimes/${OpenApiUtil.getEncodeParam(agentRuntimeId)}/endpoints/${OpenApiUtil.getEncodeParam(agentRuntimeEndpointId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete an agent runtime endpoint
 *
 * @return DeleteAgentRuntimeEndpointResponse
 */
async function deleteAgentRuntimeEndpoint(agentRuntimeId: string, agentRuntimeEndpointId: string): DeleteAgentRuntimeEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteAgentRuntimeEndpointWithOptions(agentRuntimeId, agentRuntimeEndpointId, headers, runtime);
}

model DeleteBrowserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteBrowserResult  
}

/**
 * @summary 删除浏览器实例
 *
 * @description 删除指定的浏览器实例，包括其所有相关资源和数据。删除操作不可逆，请谨慎操作。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteBrowserResponse
 */
async function deleteBrowserWithOptions(browserId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteBrowserResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteBrowser',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/browsers/${OpenApiUtil.getEncodeParam(browserId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除浏览器实例
 *
 * @description 删除指定的浏览器实例，包括其所有相关资源和数据。删除操作不可逆，请谨慎操作。
 *
 * @return DeleteBrowserResponse
 */
async function deleteBrowser(browserId: string): DeleteBrowserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteBrowserWithOptions(browserId, headers, runtime);
}

model DeleteCodeInterpreterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteCodeInterpreterResult  
}

/**
 * @summary 删除代码解释器
 *
 * @description 删除指定的代码解释器实例，包括其所有相关资源和数据。删除操作不可逆，请谨慎操作。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteCodeInterpreterResponse
 */
async function deleteCodeInterpreterWithOptions(codeInterpreterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteCodeInterpreterResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteCodeInterpreter',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/code-interpreters/${OpenApiUtil.getEncodeParam(codeInterpreterId)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除代码解释器
 *
 * @description 删除指定的代码解释器实例，包括其所有相关资源和数据。删除操作不可逆，请谨慎操作。
 *
 * @return DeleteCodeInterpreterResponse
 */
async function deleteCodeInterpreter(codeInterpreterId: string): DeleteCodeInterpreterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteCodeInterpreterWithOptions(codeInterpreterId, headers, runtime);
}

model DeleteMemoryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  requestId?: string(name='requestId', description='Id of the request', example='970F08C9-EB28-5A3D-A228-D541AEC4C807'),
}

model DeleteMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteMemoryResponseBody(name='body'),
}

/**
 * @summary delete memory store
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteMemoryResponse
 */
async function deleteMemoryWithOptions(memoryName: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteMemoryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteMemory',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/memories/${OpenApiUtil.getEncodeParam(memoryName)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary delete memory store
 *
 * @return DeleteMemoryResponse
 */
async function deleteMemory(memoryName: string): DeleteMemoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteMemoryWithOptions(memoryName, headers, runtime);
}

model GetAgentRuntimeRequest {
  agentRuntimeVersion?: string(name='agentRuntimeVersion', description='指定要获取的智能体运行时版本，如果不指定则返回最新版本', example='v1.0.0'),
}

model GetAgentRuntimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeResult  
}

/**
 * @summary 获取智能体运行时详情
 *
 * @description 根据智能体运行时ID获取指定智能体运行时的详细信息，包括配置、状态、资源使用情况等。
 *
 * @param request GetAgentRuntimeRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAgentRuntimeResponse
 */
async function getAgentRuntimeWithOptions(agentRuntimeId: string, request: GetAgentRuntimeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetAgentRuntimeResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.agentRuntimeVersion)) {
    query['agentRuntimeVersion'] = request.agentRuntimeVersion;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAgentRuntime',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/runtimes/${OpenApiUtil.getEncodeParam(agentRuntimeId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取智能体运行时详情
 *
 * @description 根据智能体运行时ID获取指定智能体运行时的详细信息，包括配置、状态、资源使用情况等。
 *
 * @param request GetAgentRuntimeRequest
 * @return GetAgentRuntimeResponse
 */
async function getAgentRuntime(agentRuntimeId: string, request: GetAgentRuntimeRequest): GetAgentRuntimeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAgentRuntimeWithOptions(agentRuntimeId, request, headers, runtime);
}

model GetAgentRuntimeEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeEndpointResult  
}

/**
 * @summary Get an agent runtime endpoint
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetAgentRuntimeEndpointResponse
 */
async function getAgentRuntimeEndpointWithOptions(agentRuntimeId: string, agentRuntimeEndpointId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetAgentRuntimeEndpointResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetAgentRuntimeEndpoint',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/runtimes/${OpenApiUtil.getEncodeParam(agentRuntimeId)}/endpoints/${OpenApiUtil.getEncodeParam(agentRuntimeEndpointId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get an agent runtime endpoint
 *
 * @return GetAgentRuntimeEndpointResponse
 */
async function getAgentRuntimeEndpoint(agentRuntimeId: string, agentRuntimeEndpointId: string): GetAgentRuntimeEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getAgentRuntimeEndpointWithOptions(agentRuntimeId, agentRuntimeEndpointId, headers, runtime);
}

model GetBrowserResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: BrowserResult  
}

/**
 * @summary 获取浏览器实例详情
 *
 * @description 根据浏览器ID获取指定浏览器实例的详细信息，包括配置、状态、资源使用情况等。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetBrowserResponse
 */
async function getBrowserWithOptions(browserId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetBrowserResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetBrowser',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/browsers/${OpenApiUtil.getEncodeParam(browserId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取浏览器实例详情
 *
 * @description 根据浏览器ID获取指定浏览器实例的详细信息，包括配置、状态、资源使用情况等。
 *
 * @return GetBrowserResponse
 */
async function getBrowser(browserId: string): GetBrowserResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getBrowserWithOptions(browserId, headers, runtime);
}

model GetCodeInterpreterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CodeInterpreterResult  
}

/**
 * @summary 获取代码解释器详情
 *
 * @description 根据代码解释器ID获取指定代码解释器实例的详细信息，包括配置、状态、资源使用情况等。
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCodeInterpreterResponse
 */
async function getCodeInterpreterWithOptions(codeInterpreterId: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetCodeInterpreterResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetCodeInterpreter',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/code-interpreters/${OpenApiUtil.getEncodeParam(codeInterpreterId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取代码解释器详情
 *
 * @description 根据代码解释器ID获取指定代码解释器实例的详细信息，包括配置、状态、资源使用情况等。
 *
 * @return GetCodeInterpreterResponse
 */
async function getCodeInterpreter(codeInterpreterId: string): GetCodeInterpreterResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getCodeInterpreterWithOptions(codeInterpreterId, headers, runtime);
}

model GetMemoryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    createTime?: int32(name='createTime'),
    longTtl?: int32(name='longTtl', example='365'),
    name?: string(name='name', example='test-memory'),
    shortTtl?: int32(name='shortTtl', example='30'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='5A362ADD-51FC-5F4A-B858-D77F6EFAE2E6'),
}

model GetMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemoryResponseBody(name='body'),
}

/**
 * @summary GetMemory
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMemoryResponse
 */
async function getMemoryWithOptions(memoryName: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetMemoryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetMemory',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/memories/${OpenApiUtil.getEncodeParam(memoryName)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary GetMemory
 *
 * @return GetMemoryResponse
 */
async function getMemory(memoryName: string): GetMemoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMemoryWithOptions(memoryName, headers, runtime);
}

model GetMemoryEventRequest {
  from?: long(name='from', example='1758273080'),
  to?: long(name='to', example='1758273680'),
}

model GetMemoryEventResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    event?: map[string]any(name='event'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='BF2A63E4-FCE9-5A65-A60E-4086C8EDBC06'),
}

model GetMemoryEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemoryEventResponseBody(name='body'),
}

/**
 * @summary get event
 *
 * @param request GetMemoryEventRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMemoryEventResponse
 */
async function getMemoryEventWithOptions(memoryName: string, sessionId: string, eventId: string, request: GetMemoryEventRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMemoryEventResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    query['from'] = request.from;
  }
  if (!Util.isUnset(request.to)) {
    query['to'] = request.to;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMemoryEvent',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/memories/${OpenApiUtil.getEncodeParam(memoryName)}/sessions/${OpenApiUtil.getEncodeParam(sessionId)}/events/${OpenApiUtil.getEncodeParam(eventId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary get event
 *
 * @param request GetMemoryEventRequest
 * @return GetMemoryEventResponse
 */
async function getMemoryEvent(memoryName: string, sessionId: string, eventId: string, request: GetMemoryEventRequest): GetMemoryEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMemoryEventWithOptions(memoryName, sessionId, eventId, request, headers, runtime);
}

model GetMemorySessionRequest {
  from?: long(name='from', example='1736558346'),
  size?: int32(name='size', example='20'),
  to?: long(name='to', example='1736561898'),
}

model GetMemorySessionResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    events?: [ map[string]any ](name='events'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='55D4BE40-2811-5CFB-8482-E0E98D575B1E'),
}

model GetMemorySessionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMemorySessionResponseBody(name='body'),
}

/**
 * @summary 获取内存会话详情
 *
 * @description 根据会话ID获取指定内存会话的详细信息，包括会话中的事件记录、时间戳等。用于查看和管理对话历史。
 *
 * @param request GetMemorySessionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMemorySessionResponse
 */
async function getMemorySessionWithOptions(memoryName: string, sessionId: string, request: GetMemorySessionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): GetMemorySessionResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    query['from'] = request.from;
  }
  if (!Util.isUnset(request.size)) {
    query['size'] = request.size;
  }
  if (!Util.isUnset(request.to)) {
    query['to'] = request.to;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMemorySession',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/memories/${OpenApiUtil.getEncodeParam(memoryName)}/sessions/${OpenApiUtil.getEncodeParam(sessionId)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取内存会话详情
 *
 * @description 根据会话ID获取指定内存会话的详细信息，包括会话中的事件记录、时间戳等。用于查看和管理对话历史。
 *
 * @param request GetMemorySessionRequest
 * @return GetMemorySessionResponse
 */
async function getMemorySession(memoryName: string, sessionId: string, request: GetMemorySessionRequest): GetMemorySessionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getMemorySessionWithOptions(memoryName, sessionId, request, headers, runtime);
}

model ListAgentRuntimeEndpointsRequest {
  endpointName?: string(name='endpointName', description='根据端点名称进行模糊匹配过滤', example='my-endpoint'),
  pageNumber?: int32(name='pageNumber', description='当前页码，从1开始计数', example='1'),
  pageSize?: int32(name='pageSize', description='每页返回的记录数量', example='10'),
}

model ListAgentRuntimeEndpointsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAgentRuntimeEndpointsResult  
}

/**
 * @summary 列出智能体运行时端点
 *
 * @description 获取指定智能体运行时的所有端点列表，支持按名称过滤和分页查询。端点用于外部系统访问智能体运行时服务。
 *
 * @param request ListAgentRuntimeEndpointsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAgentRuntimeEndpointsResponse
 */
async function listAgentRuntimeEndpointsWithOptions(agentRuntimeId: string, request: ListAgentRuntimeEndpointsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAgentRuntimeEndpointsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.endpointName)) {
    query['endpointName'] = request.endpointName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAgentRuntimeEndpoints',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/runtimes/${OpenApiUtil.getEncodeParam(agentRuntimeId)}/endpoints`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出智能体运行时端点
 *
 * @description 获取指定智能体运行时的所有端点列表，支持按名称过滤和分页查询。端点用于外部系统访问智能体运行时服务。
 *
 * @param request ListAgentRuntimeEndpointsRequest
 * @return ListAgentRuntimeEndpointsResponse
 */
async function listAgentRuntimeEndpoints(agentRuntimeId: string, request: ListAgentRuntimeEndpointsRequest): ListAgentRuntimeEndpointsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAgentRuntimeEndpointsWithOptions(agentRuntimeId, request, headers, runtime);
}

model ListAgentRuntimeVersionsRequest {
  pageNumber?: int32(name='pageNumber', description='当前页码，从1开始计数', example='1'),
  pageSize?: int32(name='pageSize', description='每页返回的记录数量', example='10'),
}

model ListAgentRuntimeVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAgentRuntimeVersionsResult  
}

/**
 * @summary List agent runtime versions
 *
 * @param request ListAgentRuntimeVersionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAgentRuntimeVersionsResponse
 */
async function listAgentRuntimeVersionsWithOptions(agentRuntimeId: string, request: ListAgentRuntimeVersionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAgentRuntimeVersionsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAgentRuntimeVersions',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/runtimes/${OpenApiUtil.getEncodeParam(agentRuntimeId)}/versions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List agent runtime versions
 *
 * @param request ListAgentRuntimeVersionsRequest
 * @return ListAgentRuntimeVersionsResponse
 */
async function listAgentRuntimeVersions(agentRuntimeId: string, request: ListAgentRuntimeVersionsRequest): ListAgentRuntimeVersionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAgentRuntimeVersionsWithOptions(agentRuntimeId, request, headers, runtime);
}

model ListAgentRuntimesRequest {
  agentRuntimeName?: string(name='agentRuntimeName', description='根据智能体运行时名称进行模糊匹配过滤', example='my-runtime'),
  pageNumber?: int32(name='pageNumber', description='当前页码，从1开始计数', example='1'),
  pageSize?: int32(name='pageSize', description='每页返回的记录数量', example='10'),
}

model ListAgentRuntimesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListAgentRuntimesResult  
}

/**
 * @summary 列出智能体运行时
 *
 * @description 获取当前用户的所有智能体运行时列表，支持按名称、标签等条件过滤，支持分页查询。
 *
 * @param request ListAgentRuntimesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListAgentRuntimesResponse
 */
async function listAgentRuntimesWithOptions(request: ListAgentRuntimesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListAgentRuntimesResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.agentRuntimeName)) {
    query['agentRuntimeName'] = request.agentRuntimeName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListAgentRuntimes',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/runtimes`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出智能体运行时
 *
 * @description 获取当前用户的所有智能体运行时列表，支持按名称、标签等条件过滤，支持分页查询。
 *
 * @param request ListAgentRuntimesRequest
 * @return ListAgentRuntimesResponse
 */
async function listAgentRuntimes(request: ListAgentRuntimesRequest): ListAgentRuntimesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listAgentRuntimesWithOptions(request, headers, runtime);
}

model ListBrowsersRequest {
  browserName?: string(name='browserName', description='根据浏览器实例名称进行模糊匹配过滤', example='browser'),
  pageNumber?: int32(name='pageNumber', description='当前页码，从1开始计数', example='10'),
  pageSize?: int32(name='pageSize', description='每页返回的记录数量', example='1'),
  status?: string(name='status', description='根据浏览器实例的运行状态进行过滤，可选值：CREATING、READY、DELETING等', example='CREATING', nullable=true),
}

model ListBrowsersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBrowsersResult  
}

/**
 * @summary 列出浏览器实例
 *
 * @description 获取当前用户的所有浏览器实例列表，支持按名称、状态等条件过滤，支持分页查询。
 *
 * @param request ListBrowsersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListBrowsersResponse
 */
async function listBrowsersWithOptions(request: ListBrowsersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListBrowsersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.browserName)) {
    query['browserName'] = request.browserName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.status)) {
    query['status'] = request.status;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBrowsers',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/browsers`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出浏览器实例
 *
 * @description 获取当前用户的所有浏览器实例列表，支持按名称、状态等条件过滤，支持分页查询。
 *
 * @param request ListBrowsersRequest
 * @return ListBrowsersResponse
 */
async function listBrowsers(request: ListBrowsersRequest): ListBrowsersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listBrowsersWithOptions(request, headers, runtime);
}

model ListCodeInterpretersRequest {
  codeInterpreterName?: string(name='codeInterpreterName', description='根据代码解释器实例名称进行模糊匹配过滤', example='code'),
  pageNumber?: int32(name='pageNumber', description='当前页码，从1开始计数', example='1'),
  pageSize?: int32(name='pageSize', description='每页返回的记录数量', example='10'),
}

model ListCodeInterpretersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListCodeInterpretersResult  
}

/**
 * @summary 列出代码解释器
 *
 * @description 获取当前用户的所有代码解释器实例列表，支持按名称等条件过滤，支持分页查询。
 *
 * @param request ListCodeInterpretersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListCodeInterpretersResponse
 */
async function listCodeInterpretersWithOptions(request: ListCodeInterpretersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListCodeInterpretersResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.codeInterpreterName)) {
    query['codeInterpreterName'] = request.codeInterpreterName;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListCodeInterpreters',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/code-interpreters`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出代码解释器
 *
 * @description 获取当前用户的所有代码解释器实例列表，支持按名称等条件过滤，支持分页查询。
 *
 * @param request ListCodeInterpretersRequest
 * @return ListCodeInterpretersResponse
 */
async function listCodeInterpreters(request: ListCodeInterpretersRequest): ListCodeInterpretersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listCodeInterpretersWithOptions(request, headers, runtime);
}

model ListMemoryRequest {
  namePrefix?: string(name='namePrefix', example='test'),
  pageNumber?: int32(name='pageNumber', description='This parameter is required.', example='1'),
  pageSize?: int32(name='pageSize', description='This parameter is required.', example='0'),
}

model ListMemoryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    items?: [ string ](name='items'),
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: long(name='total', example='284'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='55D4BE40-2811-5CFB-8482-E0E98D575B1E'),
}

model ListMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMemoryResponseBody(name='body'),
}

/**
 * @summary ListMemory
 *
 * @param request ListMemoryRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMemoryResponse
 */
async function listMemoryWithOptions(request: ListMemoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMemoryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.namePrefix)) {
    query['namePrefix'] = request.namePrefix;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMemory',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/memories`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ListMemory
 *
 * @param request ListMemoryRequest
 * @return ListMemoryResponse
 */
async function listMemory(request: ListMemoryRequest): ListMemoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMemoryWithOptions(request, headers, runtime);
}

model ListMemoryEventRequest {
  from?: long(name='from', example='1742347023'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='10'),
  to?: long(name='to', example='1736561650'),
}

model ListMemoryEventResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    items?: [ string ](name='items'),
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='20'),
    total?: long(name='total', example='2'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='0FB1162C-D50B-5DA7-AD04-3417ABBF133A'),
}

model ListMemoryEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMemoryEventResponseBody(name='body'),
}

/**
 * @summary list events
 *
 * @param request ListMemoryEventRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMemoryEventResponse
 */
async function listMemoryEventWithOptions(memoryName: string, sessionId: string, request: ListMemoryEventRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMemoryEventResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    query['from'] = request.from;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.to)) {
    query['to'] = request.to;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMemoryEvent',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/memories/${OpenApiUtil.getEncodeParam(memoryName)}/sessions/${OpenApiUtil.getEncodeParam(sessionId)}/events`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary list events
 *
 * @param request ListMemoryEventRequest
 * @return ListMemoryEventResponse
 */
async function listMemoryEvent(memoryName: string, sessionId: string, request: ListMemoryEventRequest): ListMemoryEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMemoryEventWithOptions(memoryName, sessionId, request, headers, runtime);
}

model ListMemorySessionsRequest {
  from?: long(name='from', example='1740622996'),
  pageNumber?: int32(name='pageNumber', example='1'),
  pageSize?: int32(name='pageSize', example='20'),
  to?: long(name='to', example='1747275768'),
}

model ListMemorySessionsResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    items?: [ string ](name='items'),
    pageNumber?: int32(name='pageNumber', example='1'),
    pageSize?: int32(name='pageSize', example='10'),
    total?: long(name='total', example='211'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='E2C43519-6095-5487-9526-051AB8F50B4A'),
}

model ListMemorySessionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListMemorySessionsResponseBody(name='body'),
}

/**
 * @summary 列出内存会话
 *
 * @description 获取指定内存实例的所有会话列表，支持按时间范围过滤和分页查询。会话是AgentRun中用于存储对话历史和管理上下文的重要组件。
 *
 * @param request ListMemorySessionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListMemorySessionsResponse
 */
async function listMemorySessionsWithOptions(memoryName: string, request: ListMemorySessionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListMemorySessionsResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    query['from'] = request.from;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.to)) {
    query['to'] = request.to;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListMemorySessions',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/memories/${OpenApiUtil.getEncodeParam(memoryName)}/sessions`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 列出内存会话
 *
 * @description 获取指定内存实例的所有会话列表，支持按时间范围过滤和分页查询。会话是AgentRun中用于存储对话历史和管理上下文的重要组件。
 *
 * @param request ListMemorySessionsRequest
 * @return ListMemorySessionsResponse
 */
async function listMemorySessions(memoryName: string, request: ListMemorySessionsRequest): ListMemorySessionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listMemorySessionsWithOptions(memoryName, request, headers, runtime);
}

model PublishRuntimeVersionRequest {
  body?: PublishRuntimeVersionInput(name='body'),
}

model PublishRuntimeVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeVersionResult  
}

/**
 * @summary 发布运行时版本
 *
 * @description 为指定的智能体运行时发布新版本，用于版本管理和部署。新版本可以包含代码更新、配置变更等内容。
 *
 * @param request PublishRuntimeVersionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishRuntimeVersionResponse
 */
async function publishRuntimeVersionWithOptions(agentRuntimeId: string, request: PublishRuntimeVersionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PublishRuntimeVersionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'PublishRuntimeVersion',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/runtimes/${OpenApiUtil.getEncodeParam(agentRuntimeId)}/versions`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 发布运行时版本
 *
 * @description 为指定的智能体运行时发布新版本，用于版本管理和部署。新版本可以包含代码更新、配置变更等内容。
 *
 * @param request PublishRuntimeVersionRequest
 * @return PublishRuntimeVersionResponse
 */
async function publishRuntimeVersion(agentRuntimeId: string, request: PublishRuntimeVersionRequest): PublishRuntimeVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return publishRuntimeVersionWithOptions(agentRuntimeId, request, headers, runtime);
}

model RetrieveMemoryRequest {
  from?: int32(name='from', example='1756431013'),
  query?: {
    memory?: string(name='memory', example='10'),
    metadata?: map[string]string(name='metadata'),
    namespace?: string(name='namespace', example='preference'),
    userId?: string(name='userId', description='This parameter is required.', example='uid1'),
  }(name='query', description='This parameter is required.'),
  store?: string(name='store', example='memory'),
  to?: int32(name='to', example='1737856802'),
  topk?: int32(name='topk', example='10'),
}

model RetrieveMemoryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  data?: {
    events?: [ map[string]string ](name='events'),
    memories?: [ map[string]string ](name='memories'),
  }(name='data'),
  requestId?: string(name='requestId', description='Id of the request', example='BC65E49E-1F6A-55E0-8A0E-7255DBFAA8F9'),
}

model RetrieveMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RetrieveMemoryResponseBody(name='body'),
}

/**
 * @summary RetrieveMemory
 *
 * @param request RetrieveMemoryRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RetrieveMemoryResponse
 */
async function retrieveMemoryWithOptions(memoryName: string, request: RetrieveMemoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): RetrieveMemoryResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.from)) {
    body['from'] = request.from;
  }
  if (!Util.isUnset(request.query)) {
    body['query'] = request.query;
  }
  if (!Util.isUnset(request.store)) {
    body['store'] = request.store;
  }
  if (!Util.isUnset(request.to)) {
    body['to'] = request.to;
  }
  if (!Util.isUnset(request.topk)) {
    body['topk'] = request.topk;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'RetrieveMemory',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/memories/${OpenApiUtil.getEncodeParam(memoryName)}/records`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary RetrieveMemory
 *
 * @param request RetrieveMemoryRequest
 * @return RetrieveMemoryResponse
 */
async function retrieveMemory(memoryName: string, request: RetrieveMemoryRequest): RetrieveMemoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return retrieveMemoryWithOptions(memoryName, request, headers, runtime);
}

model UpdateAgentRuntimeRequest {
  body?: UpdateAgentRuntimeInput(name='body', description='包含要更新的智能体运行时配置信息的请求体

This parameter is required.'),
}

model UpdateAgentRuntimeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeResult  
}

/**
 * @summary 更新智能体运行时
 *
 * @description 更新指定智能体运行时的配置信息，包括资源分配、网络配置、环境变量等。更新操作会触发运行时重启。
 *
 * @param request UpdateAgentRuntimeRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAgentRuntimeResponse
 */
async function updateAgentRuntimeWithOptions(agentRuntimeId: string, request: UpdateAgentRuntimeRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAgentRuntimeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAgentRuntime',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/runtimes/${OpenApiUtil.getEncodeParam(agentRuntimeId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新智能体运行时
 *
 * @description 更新指定智能体运行时的配置信息，包括资源分配、网络配置、环境变量等。更新操作会触发运行时重启。
 *
 * @param request UpdateAgentRuntimeRequest
 * @return UpdateAgentRuntimeResponse
 */
async function updateAgentRuntime(agentRuntimeId: string, request: UpdateAgentRuntimeRequest): UpdateAgentRuntimeResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateAgentRuntimeWithOptions(agentRuntimeId, request, headers, runtime);
}

model UpdateAgentRuntimeEndpointRequest {
  body?: UpdateAgentRuntimeEndpointInput(name='body', description='包含要更新的智能体运行时端点配置信息的请求体

This parameter is required.'),
}

model UpdateAgentRuntimeEndpointResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AgentRuntimeEndpointResult  
}

/**
 * @summary Update an agent runtime endpoint
 *
 * @param request UpdateAgentRuntimeEndpointRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAgentRuntimeEndpointResponse
 */
async function updateAgentRuntimeEndpointWithOptions(agentRuntimeId: string, agentRuntimeEndpointId: string, request: UpdateAgentRuntimeEndpointRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateAgentRuntimeEndpointResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAgentRuntimeEndpoint',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/runtimes/${OpenApiUtil.getEncodeParam(agentRuntimeId)}/endpoints/${OpenApiUtil.getEncodeParam(agentRuntimeEndpointId)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Update an agent runtime endpoint
 *
 * @param request UpdateAgentRuntimeEndpointRequest
 * @return UpdateAgentRuntimeEndpointResponse
 */
async function updateAgentRuntimeEndpoint(agentRuntimeId: string, agentRuntimeEndpointId: string, request: UpdateAgentRuntimeEndpointRequest): UpdateAgentRuntimeEndpointResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateAgentRuntimeEndpointWithOptions(agentRuntimeId, agentRuntimeEndpointId, request, headers, runtime);
}

model UpdateMemoryRequest {
  longTtl?: int32(name='longTtl', description='This parameter is required.', example='365'),
  shortTtl?: int32(name='shortTtl', description='This parameter is required.', example='30'),
}

model UpdateMemoryResponseBody = {
  code?: string(name='code', example='SUCCESS'),
  requestId?: string(name='requestId', description='Id of the request', example='C0595DB0-D1EE-55C3-8DDD-790872C7EC2F'),
}

model UpdateMemoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateMemoryResponseBody(name='body'),
}

/**
 * @summary Update Memory
 *
 * @param request UpdateMemoryRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateMemoryResponse
 */
async function updateMemoryWithOptions(memoryName: string, request: UpdateMemoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateMemoryResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.longTtl)) {
    query['longTtl'] = request.longTtl;
  }
  if (!Util.isUnset(request.shortTtl)) {
    query['shortTtl'] = request.shortTtl;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateMemory',
    version = '2025-09-10',
    protocol = 'HTTPS',
    pathname = `/2025-09-10/agents/memories/${OpenApiUtil.getEncodeParam(memoryName)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Update Memory
 *
 * @param request UpdateMemoryRequest
 * @return UpdateMemoryResponse
 */
async function updateMemory(memoryName: string, request: UpdateMemoryRequest): UpdateMemoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateMemoryWithOptions(memoryName, request, headers, runtime);
}

