/**
 *
 */
import OpenApi;
import OpenApi.OpenApiUtil;

extends OpenApi;


init(config: OpenApiUtil.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('metaspace', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!$isNull(endpoint)) {
    return endpoint;
  }
  
  if (!$isNull(endpointMap) && !$isNull(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return OpenApiUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model ApplyCoordinationForCoordinatorRequest {
  coordinationResourceCandidates?: [ 
    {
      ownerEndUserId?: string(name='OwnerEndUserId', example='alice'),
      ownerWyId?: string(name='OwnerWyId', example='41fd1254d8f7****'),
      resourceId?: string(name='ResourceId', example='ai-ij4a6kd4bn2****'),
      resourceName?: string(name='ResourceName', example='test-resource'),
      resourceRegionId?: string(name='ResourceRegionId', example='cn-hangzhou'),
      resourceType?: string(name='ResourceType', example='CloudApp'),
    }
  ](name='CoordinationResourceCandidates'),
  initiatorType?: string(name='InitiatorType', description='This parameter is required.', example='ADMIN_INITIATE'),
  uuid?: string(name='Uuid', description='This parameter is required.', example='client-uuid-12345'),
}

model ApplyCoordinationForCoordinatorResponseBody = {
  coordinateFlowModels?: [ 
    {
      coId?: string(name='CoId', example='co-9kt75fon9pj****'),
      coordinateStatus?: string(name='CoordinateStatus', example='PENDING'),
      coordinateTicket?: string(name='CoordinateTicket', example='W0Rlc2t0b3BdDQpHV1Rva2VuPTAwT1A1bHp1RUlEdU00T0IzemdiZ****'),
      coordinatorUserId?: string(name='CoordinatorUserId', example='10419178654***'),
      ownerUserId?: string(name='OwnerUserId', example='alice'),
      resourceId?: string(name='ResourceId', example='ai-ij4a6kd4bn2****'),
      resourceName?: string(name='ResourceName', example='test-resource'),
    }
  ](name='CoordinateFlowModels'),
  requestId?: string(name='RequestId', example='AD2D0761-1FE5-549D-B169******'),
}

model ApplyCoordinationForCoordinatorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyCoordinationForCoordinatorResponseBody(name='body'),
}

/**
 * @summary 协同者发起流协同请求并获取协同ticket的API接口。
 *
 * @description ## 请求说明
 * - 该API为内部使用，主要用于协同者发起流协同。
 * - `DependOnMainStream`参数指定了是否依赖主流的状态来建立或断开协同流。
 * - 当`InitiatorType`设置为强制协同类型时（如`ADMIN_INITIATE_FORCE`或`COORDINATOR_INITIATE_FORCE`），将返回一个`CoordinateTicket`。
 * - 协同资源列表`CoordinationResourceCandidates`中必须包含至少一项资源信息，并且所有提供的资源ID、类型和地区等信息需准确无误。
 * - 确保`OwnerAliUid`与协同者的租户ID相同，否则可能无法成功发起协同请求。
 * - 对于AD用户，请务必填写`AdDomainName`字段。
 *
 * @param request ApplyCoordinationForCoordinatorRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ApplyCoordinationForCoordinatorResponse
 */
@context("applyCoordinationForCoordinatorWithContext")
async function applyCoordinationForCoordinatorWithOptions(request: ApplyCoordinationForCoordinatorRequest, runtime: $RuntimeOptions): ApplyCoordinationForCoordinatorResponse {
  request.validate();
  var body : map[string]any = {};
  var bodyFlat : map[string]any = {};
  if (!$isNull(request.coordinationResourceCandidates)) {
    bodyFlat['CoordinationResourceCandidates'] = request.coordinationResourceCandidates;
  }
  if (!$isNull(request.initiatorType)) {
    body['InitiatorType'] = request.initiatorType;
  }
  if (!$isNull(request.uuid)) {
    body['Uuid'] = request.uuid;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'ApplyCoordinationForCoordinator',
    version = '2022-10-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 协同者发起流协同请求并获取协同ticket的API接口。
 *
 * @description ## 请求说明
 * - 该API为内部使用，主要用于协同者发起流协同。
 * - `DependOnMainStream`参数指定了是否依赖主流的状态来建立或断开协同流。
 * - 当`InitiatorType`设置为强制协同类型时（如`ADMIN_INITIATE_FORCE`或`COORDINATOR_INITIATE_FORCE`），将返回一个`CoordinateTicket`。
 * - 协同资源列表`CoordinationResourceCandidates`中必须包含至少一项资源信息，并且所有提供的资源ID、类型和地区等信息需准确无误。
 * - 确保`OwnerAliUid`与协同者的租户ID相同，否则可能无法成功发起协同请求。
 * - 对于AD用户，请务必填写`AdDomainName`字段。
 *
 * @param request ApplyCoordinationForCoordinatorRequest
 * @return ApplyCoordinationForCoordinatorResponse
 */
async function applyCoordinationForCoordinator(request: ApplyCoordinationForCoordinatorRequest): ApplyCoordinationForCoordinatorResponse {
  var runtime = new $RuntimeOptions{};
  return applyCoordinationForCoordinatorWithOptions(request, runtime);
}

model CancelCoordinationRequest {
  coIds?: [ string ](name='CoIds'),
}

model CancelCoordinationResponseBody = {
  requestId?: string(name='RequestId', example='AD2D0761-1FE5-549D-B169******'),
}

model CancelCoordinationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelCoordinationResponseBody(name='body'),
}

/**
 * @summary 取消协同请求
 *
 * @param request CancelCoordinationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelCoordinationResponse
 */
@context("cancelCoordinationWithContext")
async function cancelCoordinationWithOptions(request: CancelCoordinationRequest, runtime: $RuntimeOptions): CancelCoordinationResponse {
  request.validate();
  var body : map[string]any = {};
  var bodyFlat : map[string]any = {};
  if (!$isNull(request.coIds)) {
    bodyFlat['CoIds'] = request.coIds;
  }
  body = {
    ...body,
    ...OpenApiUtil.query(bodyFlat),
  };

  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'CancelCoordination',
    version = '2022-10-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消协同请求
 *
 * @param request CancelCoordinationRequest
 * @return CancelCoordinationResponse
 */
async function cancelCoordination(request: CancelCoordinationRequest): CancelCoordinationResponse {
  var runtime = new $RuntimeOptions{};
  return cancelCoordinationWithOptions(request, runtime);
}

model GetCoordinationTicketRequest {
  coId?: string(name='CoId', description='This parameter is required.', example='co-ik1nu2hxg5zbu****'),
  taskId?: string(name='TaskId', example='eab51156-7832-4922-9623-ff905****'),
}

model GetCoordinationTicketResponseBody = {
  coordinateTicketModel?: {
    coId?: string(name='CoId', example='co-dk5xrhqlizm42****'),
    coordinateTicket?: string(name='CoordinateTicket', example='W0Rlc2t0b3BdDQpHV1Rva2VuPTAwT1A1bHp1RUlEdU00T0IzemdiZ****'),
    taskId?: string(name='TaskId', example='eab51156-7832-4922-9623-ff905****'),
    taskStatus?: string(name='TaskStatus', example='Finished'),
  }(name='CoordinateTicketModel'),
  requestId?: string(name='RequestId', example='AD2D0761-1FE5-549D-B169******'),
}

model GetCoordinationTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCoordinationTicketResponseBody(name='body'),
}

/**
 * @summary 获取协同流连接ticket
 *
 * @param request GetCoordinationTicketRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCoordinationTicketResponse
 */
@context("getCoordinationTicketWithContext")
async function getCoordinationTicketWithOptions(request: GetCoordinationTicketRequest, runtime: $RuntimeOptions): GetCoordinationTicketResponse {
  request.validate();
  var body : map[string]any = {};
  if (!$isNull(request.coId)) {
    body['CoId'] = request.coId;
  }
  if (!$isNull(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  var req = new OpenApiUtil.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApiUtil.Params{
    action = 'GetCoordinationTicket',
    version = '2022-10-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取协同流连接ticket
 *
 * @param request GetCoordinationTicketRequest
 * @return GetCoordinationTicketResponse
 */
async function getCoordinationTicket(request: GetCoordinationTicketRequest): GetCoordinationTicketResponse {
  var runtime = new $RuntimeOptions{};
  return getCoordinationTicketWithOptions(request, runtime);
}

