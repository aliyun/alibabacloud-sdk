/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'metaspace';
  @version = '2022-10-14';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ApplyCoordinationForCoordinatorRequest {
  coordinationResourceCandidates?: [ 
    {
      ownerEndUserId?: string(name='OwnerEndUserId', example='alice'),
      ownerWyId?: string(name='OwnerWyId', example='41fd1254d8f7****'),
      resourceId?: string(name='ResourceId', example='ai-ij4a6kd4bn2****'),
      resourceName?: string(name='ResourceName', example='test-resource'),
      resourceRegionId?: string(name='ResourceRegionId', example='cn-hangzhou'),
      resourceType?: string(name='ResourceType', example='CloudApp'),
    }
  ](name='CoordinationResourceCandidates', position='Body'),
  initiatorType: string(name='InitiatorType', description='This parameter is required.', example='ADMIN_INITIATE', position='Body'),
  uuid: string(name='Uuid', description='This parameter is required.', example='client-uuid-12345', position='Body'),
}

model ApplyCoordinationForCoordinatorResponseBody = {
  coordinateFlowModels?: [ 
    {
      coId?: string(name='CoId', example='co-9kt75fon9pj****'),
      coordinateStatus?: string(name='CoordinateStatus', example='PENDING'),
      coordinateTicket?: string(name='CoordinateTicket', example='W0Rlc2t0b3BdDQpHV1Rva2VuPTAwT1A1bHp1RUlEdU00T0IzemdiZ****'),
      coordinatorUserId?: string(name='CoordinatorUserId', example='10419178654***'),
      ownerUserId?: string(name='OwnerUserId', example='alice'),
      resourceId?: string(name='ResourceId', example='ai-ij4a6kd4bn2****'),
      resourceName?: string(name='ResourceName', example='test-resource'),
    }
  ](name='CoordinateFlowModels'),
  requestId?: string(name='RequestId', example='AD2D0761-1FE5-549D-B169******'),
}

model ApplyCoordinationForCoordinatorResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ApplyCoordinationForCoordinatorResponseBody(name='body'),
}

/**
  * @description ## 请求说明
  * - 该API为内部使用，主要用于协同者发起流协同。
  * - `DependOnMainStream`参数指定了是否依赖主流的状态来建立或断开协同流。
  * - 当`InitiatorType`设置为强制协同类型时（如`ADMIN_INITIATE_FORCE`或`COORDINATOR_INITIATE_FORCE`），将返回一个`CoordinateTicket`。
  * - 协同资源列表`CoordinationResourceCandidates`中必须包含至少一项资源信息，并且所有提供的资源ID、类型和地区等信息需准确无误。
  * - 确保`OwnerAliUid`与协同者的租户ID相同，否则可能无法成功发起协同请求。
  * - 对于AD用户，请务必填写`AdDomainName`字段。
  * @param request  the request parameters of ApplyCoordinationForCoordinator  ApplyCoordinationForCoordinatorRequest
  * @return ApplyCoordinationForCoordinatorResponse
 */
async function applyCoordinationForCoordinator(request: ApplyCoordinationForCoordinatorRequest): ApplyCoordinationForCoordinatorResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyCoordinationForCoordinator', 'POST', '/', 'json', true, 'form', request);
}

model CancelCoordinationRequest {
  coIds?: [ string ](name='CoIds', position='Body'),
}

model CancelCoordinationResponseBody = {
  requestId?: string(name='RequestId', example='AD2D0761-1FE5-549D-B169******'),
}

model CancelCoordinationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelCoordinationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelCoordination  CancelCoordinationRequest
  * @return CancelCoordinationResponse
 */
async function cancelCoordination(request: CancelCoordinationRequest): CancelCoordinationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelCoordination', 'POST', '/', 'json', true, 'form', request);
}

model GetCoordinationTicketRequest {
  coId: string(name='CoId', description='This parameter is required.', example='co-ik1nu2hxg5zbu****', position='Body'),
  taskId?: string(name='TaskId', example='eab51156-7832-4922-9623-ff905****', position='Body'),
}

model GetCoordinationTicketResponseBody = {
  coordinateTicketModel?: {
    coId?: string(name='CoId', example='co-dk5xrhqlizm42****'),
    coordinateTicket?: string(name='CoordinateTicket', example='W0Rlc2t0b3BdDQpHV1Rva2VuPTAwT1A1bHp1RUlEdU00T0IzemdiZ****'),
    taskId?: string(name='TaskId', example='eab51156-7832-4922-9623-ff905****'),
    taskStatus?: string(name='TaskStatus', example='Finished'),
  }(name='CoordinateTicketModel'),
  requestId?: string(name='RequestId', example='AD2D0761-1FE5-549D-B169******'),
}

model GetCoordinationTicketResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCoordinationTicketResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetCoordinationTicket  GetCoordinationTicketRequest
  * @return GetCoordinationTicketResponse
 */
async function getCoordinationTicket(request: GetCoordinationTicketRequest): GetCoordinationTicketResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCoordinationTicket', 'POST', '/', 'json', true, 'form', request);
}

