/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('cams', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateChatappTemplateRequest {
  category?: string(name='Category'),
  components?: [ 
    {
      buttons?: [ 
        {
          phoneNumber?: string(name='PhoneNumber'),
          text?: string(name='Text'),
          type?: string(name='Type'),
          url?: string(name='Url'),
          urlType?: string(name='UrlType'),
        }
      ](name='Buttons'),
      caption?: string(name='Caption'),
      fileName?: string(name='FileName'),
      format?: string(name='Format'),
      text?: string(name='Text'),
      type?: string(name='Type'),
      url?: string(name='Url'),
    }
  ](name='Components'),
  custWabaId?: string(name='CustWabaId'),
  example?: map[string]string(name='Example'),
  isvCode?: string(name='IsvCode'),
  language?: string(name='Language'),
  name?: string(name='Name'),
  templateType?: string(name='TemplateType'),
}

model CreateChatappTemplateShrinkRequest {
  category?: string(name='Category'),
  componentsShrink?: string(name='Components'),
  custWabaId?: string(name='CustWabaId'),
  exampleShrink?: string(name='Example'),
  isvCode?: string(name='IsvCode'),
  language?: string(name='Language'),
  name?: string(name='Name'),
  templateType?: string(name='TemplateType'),
}

model CreateChatappTemplateResponseBody = {
  code?: string(name='Code'),
  data?: {
    templateCode?: string(name='TemplateCode'),
    templateName?: string(name='TemplateName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model CreateChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateChatappTemplateResponseBody(name='body'),
}

async function createChatappTemplateWithOptions(tmpReq: CreateChatappTemplateRequest, runtime: Util.RuntimeOptions): CreateChatappTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreateChatappTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.components)) {
    request.componentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.components, 'Components', 'json');
  }
  if (!Util.isUnset(tmpReq.example)) {
    request.exampleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.example, 'Example', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.componentsShrink)) {
    body['Components'] = request.componentsShrink;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.exampleShrink)) {
    body['Example'] = request.exampleShrink;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createChatappTemplate(request: CreateChatappTemplateRequest): CreateChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChatappTemplateWithOptions(request, runtime);
}

model DeleteChatappTemplateRequest {
  custWabaId?: string(name='CustWabaId'),
  isvCode?: string(name='IsvCode'),
  templateCode?: string(name='TemplateCode'),
}

model DeleteChatappTemplateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model DeleteChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteChatappTemplateResponseBody(name='body'),
}

async function deleteChatappTemplateWithOptions(request: DeleteChatappTemplateRequest, runtime: Util.RuntimeOptions): DeleteChatappTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteChatappTemplate(request: DeleteChatappTemplateRequest): DeleteChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChatappTemplateWithOptions(request, runtime);
}

model GetChatappTemplateDetailRequest {
  custWabaId?: string(name='CustWabaId'),
  isvCode?: string(name='IsvCode'),
  language?: string(name='Language'),
  templateCode?: string(name='TemplateCode'),
}

model GetChatappTemplateDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    auditStatus?: string(name='AuditStatus'),
    category?: string(name='Category'),
    components?: [ 
      {
        buttons?: [ 
          {
            phoneNumber?: string(name='PhoneNumber'),
            text?: string(name='Text'),
            type?: string(name='Type'),
            url?: string(name='Url'),
            urlType?: string(name='UrlType'),
          }
        ](name='Buttons'),
        caption?: string(name='Caption'),
        fileName?: string(name='FileName'),
        format?: string(name='Format'),
        text?: string(name='Text'),
        type?: string(name='Type'),
        url?: string(name='Url'),
      }
    ](name='Components'),
    example?: map[string]string(name='Example'),
    language?: string(name='Language'),
    name?: string(name='Name'),
    templateCode?: string(name='TemplateCode'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetChatappTemplateDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetChatappTemplateDetailResponseBody(name='body'),
}

async function getChatappTemplateDetailWithOptions(request: GetChatappTemplateDetailRequest, runtime: Util.RuntimeOptions): GetChatappTemplateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappTemplateDetail',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getChatappTemplateDetail(request: GetChatappTemplateDetailRequest): GetChatappTemplateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappTemplateDetailWithOptions(request, runtime);
}

model ListChatappTemplateRequest {
  auditStatus?: string(name='AuditStatus'),
  custWabaId?: string(name='CustWabaId'),
  isvCode?: string(name='IsvCode'),
  language?: string(name='Language'),
  name?: string(name='Name'),
  page?: {
    index?: int32(name='Index'),
    size?: int32(name='Size'),
  }(name='Page'),
}

model ListChatappTemplateShrinkRequest {
  auditStatus?: string(name='AuditStatus'),
  custWabaId?: string(name='CustWabaId'),
  isvCode?: string(name='IsvCode'),
  language?: string(name='Language'),
  name?: string(name='Name'),
  pageShrink?: string(name='Page'),
}

model ListChatappTemplateResponseBody = {
  code?: string(name='Code'),
  listTemplate?: [ 
    {
      auditStatus?: string(name='AuditStatus'),
      category?: string(name='Category'),
      language?: string(name='Language'),
      templateCode?: string(name='TemplateCode'),
      templateName?: string(name='TemplateName'),
    }
  ](name='ListTemplate'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListChatappTemplateResponseBody(name='body'),
}

async function listChatappTemplateWithOptions(tmpReq: ListChatappTemplateRequest, runtime: Util.RuntimeOptions): ListChatappTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new ListChatappTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.auditStatus)) {
    query['AuditStatus'] = request.auditStatus;
  }
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageShrink)) {
    query['Page'] = request.pageShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listChatappTemplate(request: ListChatappTemplateRequest): ListChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listChatappTemplateWithOptions(request, runtime);
}

model SendChatappMassMessageRequest {
  channelType?: string(name='ChannelType'),
  custWabaId?: string(name='CustWabaId'),
  fallBackContent?: string(name='FallBackContent'),
  fallBackId?: string(name='FallBackId'),
  from?: string(name='From'),
  isvCode?: string(name='IsvCode'),
  language?: string(name='Language'),
  senderList?: [ 
    {
      payload?: [ string ](name='Payload'),
      templateParams?: map[string]string(name='TemplateParams'),
      to?: string(name='To'),
    }
  ](name='SenderList'),
  taskId?: string(name='TaskId'),
  templateCode?: string(name='TemplateCode'),
}

model SendChatappMassMessageShrinkRequest {
  channelType?: string(name='ChannelType'),
  custWabaId?: string(name='CustWabaId'),
  fallBackContent?: string(name='FallBackContent'),
  fallBackId?: string(name='FallBackId'),
  from?: string(name='From'),
  isvCode?: string(name='IsvCode'),
  language?: string(name='Language'),
  senderListShrink?: string(name='SenderList'),
  taskId?: string(name='TaskId'),
  templateCode?: string(name='TemplateCode'),
}

model SendChatappMassMessageResponseBody = {
  code?: string(name='Code'),
  groupMessageId?: string(name='GroupMessageId'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SendChatappMassMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendChatappMassMessageResponseBody(name='body'),
}

async function sendChatappMassMessageWithOptions(tmpReq: SendChatappMassMessageRequest, runtime: Util.RuntimeOptions): SendChatappMassMessageResponse {
  Util.validateModel(tmpReq);
  var request = new SendChatappMassMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.senderList)) {
    request.senderListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.senderList, 'SenderList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.fallBackContent)) {
    body['FallBackContent'] = request.fallBackContent;
  }
  if (!Util.isUnset(request.fallBackId)) {
    body['FallBackId'] = request.fallBackId;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.senderListShrink)) {
    body['SenderList'] = request.senderListShrink;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendChatappMassMessage',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendChatappMassMessage(request: SendChatappMassMessageRequest): SendChatappMassMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendChatappMassMessageWithOptions(request, runtime);
}

model SendChatappMessageRequest {
  channelType?: string(name='ChannelType'),
  content?: string(name='Content'),
  custWabaId?: string(name='CustWabaId'),
  fallBackContent?: string(name='FallBackContent'),
  fallBackId?: string(name='FallBackId'),
  from?: string(name='From'),
  isvCode?: string(name='IsvCode'),
  language?: string(name='Language'),
  messageType?: string(name='MessageType'),
  payload?: [ string ](name='Payload'),
  templateCode?: string(name='TemplateCode'),
  templateParams?: map[string]string(name='TemplateParams'),
  to?: string(name='To'),
  type?: string(name='Type'),
}

model SendChatappMessageShrinkRequest {
  channelType?: string(name='ChannelType'),
  content?: string(name='Content'),
  custWabaId?: string(name='CustWabaId'),
  fallBackContent?: string(name='FallBackContent'),
  fallBackId?: string(name='FallBackId'),
  from?: string(name='From'),
  isvCode?: string(name='IsvCode'),
  language?: string(name='Language'),
  messageType?: string(name='MessageType'),
  payloadShrink?: string(name='Payload'),
  templateCode?: string(name='TemplateCode'),
  templateParamsShrink?: string(name='TemplateParams'),
  to?: string(name='To'),
  type?: string(name='Type'),
}

model SendChatappMessageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  messageId?: string(name='MessageId'),
  requestId?: string(name='RequestId'),
}

model SendChatappMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendChatappMessageResponseBody(name='body'),
}

async function sendChatappMessageWithOptions(tmpReq: SendChatappMessageRequest, runtime: Util.RuntimeOptions): SendChatappMessageResponse {
  Util.validateModel(tmpReq);
  var request = new SendChatappMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.templateParams)) {
    request.templateParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.templateParams, 'TemplateParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.fallBackContent)) {
    body['FallBackContent'] = request.fallBackContent;
  }
  if (!Util.isUnset(request.fallBackId)) {
    body['FallBackId'] = request.fallBackId;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.messageType)) {
    body['MessageType'] = request.messageType;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateParamsShrink)) {
    body['TemplateParams'] = request.templateParamsShrink;
  }
  if (!Util.isUnset(request.to)) {
    body['To'] = request.to;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendChatappMessage',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendChatappMessage(request: SendChatappMessageRequest): SendChatappMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendChatappMessageWithOptions(request, runtime);
}

