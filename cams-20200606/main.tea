/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('cams', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddChatappPhoneNumberRequest {
  cc?: string(name='Cc', example='86'),
  custSpaceId?: string(name='CustSpaceId', example='939283893939'),
  phoneNumber?: string(name='PhoneNumber', example='13800000000'),
  preValidateId?: string(name='PreValidateId', example='10202020'),
  verifiedName?: string(name='VerifiedName', example='Alibaba'),
}

model AddChatappPhoneNumberResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='None'),
  requestId?: string(name='RequestId', description='Id of the request', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model AddChatappPhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddChatappPhoneNumberResponseBody(name='body'),
}

async function addChatappPhoneNumberWithOptions(request: AddChatappPhoneNumberRequest, runtime: Util.RuntimeOptions): AddChatappPhoneNumberResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.cc)) {
    body['Cc'] = request.cc;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.preValidateId)) {
    body['PreValidateId'] = request.preValidateId;
  }
  if (!Util.isUnset(request.verifiedName)) {
    body['VerifiedName'] = request.verifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'AddChatappPhoneNumber',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addChatappPhoneNumber(request: AddChatappPhoneNumberRequest): AddChatappPhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return addChatappPhoneNumberWithOptions(request, runtime);
}

model BeeBotAssociateRequest {
  chatBotInstanceId?: string(name='ChatBotInstanceId', description='The ID of a bot instance.', example='1'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by ISV.', example='ksiekdki39ksks93939'),
  perspective?: [ string ](name='Perspective', description='The list of codes for answers from different perspectives.'),
  recommendNum?: int32(name='RecommendNum', description='The number of recommended questions. The value ranges from 1 to 10.', example='3'),
  sessionId?: string(name='SessionId', description='The ID of the session, which is used to identify the session and store context information in the session.', example='2334324234'),
  utterance?: string(name='Utterance', description='The input of the visitor.', example='你好'),
}

model BeeBotAssociateShrinkRequest {
  chatBotInstanceId?: string(name='ChatBotInstanceId', description='The ID of a bot instance.', example='1'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by ISV.', example='ksiekdki39ksks93939'),
  perspectiveShrink?: string(name='Perspective', description='The list of codes for answers from different perspectives.'),
  recommendNum?: int32(name='RecommendNum', description='The number of recommended questions. The value ranges from 1 to 10.', example='3'),
  sessionId?: string(name='SessionId', description='The ID of the session, which is used to identify the session and store context information in the session.', example='2334324234'),
  utterance?: string(name='Utterance', description='The input of the visitor.', example='你好'),
}

model BeeBotAssociateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request is successful.', example='OK'),
  data?: {
    associate?: [ 
      {
        meta?: string(name='Meta', description='The additional information.', example='{}'),
        title?: string(name='Title', description='The title of the associated question.'),
      }
    ](name='Associate', description='The list of associated recommendations.'),
    messageId?: string(name='MessageId', description='The ID of the response message.', example='1eb47d7a1706429081e90c83c62c2f00'),
    sessionId?: string(name='SessionId', description='The ID of the session.', example='93f11165a2a24289a6f869760e8cb3f3'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model BeeBotAssociateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BeeBotAssociateResponseBody(name='body'),
}

/**
  * You can call this operation up to 100 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param tmpReq BeeBotAssociateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BeeBotAssociateResponse
 */
async function beeBotAssociateWithOptions(tmpReq: BeeBotAssociateRequest, runtime: Util.RuntimeOptions): BeeBotAssociateResponse {
  Util.validateModel(tmpReq);
  var request = new BeeBotAssociateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.perspective)) {
    request.perspectiveShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.perspective, 'Perspective', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.chatBotInstanceId)) {
    body['ChatBotInstanceId'] = request.chatBotInstanceId;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.perspectiveShrink)) {
    body['Perspective'] = request.perspectiveShrink;
  }
  if (!Util.isUnset(request.recommendNum)) {
    body['RecommendNum'] = request.recommendNum;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.utterance)) {
    body['Utterance'] = request.utterance;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BeeBotAssociate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 100 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request BeeBotAssociateRequest
  * @return BeeBotAssociateResponse
 */
async function beeBotAssociate(request: BeeBotAssociateRequest): BeeBotAssociateResponse {
  var runtime = new Util.RuntimeOptions{};
  return beeBotAssociateWithOptions(request, runtime);
}

model BeeBotChatRequest {
  chatBotInstanceId?: string(name='ChatBotInstanceId', description='The ID of the bot instance.', example='1'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  intentName?: string(name='IntentName', description='The name of the intent in the dialog flow. When this parameter is specified, the bot conducts a Q\\&A based on the intent.', example='intent'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='ksiekdki39ksks93939'),
  knowledgeId?: string(name='KnowledgeId', description='The ID of the knowledge title in the knowledge base.', example='1'),
  perspective?: [ string ](name='Perspective', description='The list of codes for answers from different perspectives.'),
  senderId?: string(name='SenderId', description='The ID of the visitor, which is used to identify users in the current session.', example='861500000000'),
  senderNick?: string(name='SenderNick', description='The nickname of the visitor in the current session.', example='nick'),
  sessionId?: string(name='SessionId', description='The ID of the session, which is used to identify the session and store context information of the session.', example='en'),
  utterance?: string(name='Utterance', description='The input of the visitor.', example='659216218162179'),
  vendorParam?: map[string]any(name='VendorParam', description='The user-defined parameter set in JSON format. You can specify user-defined parameters for conversation engines.'),
}

model BeeBotChatShrinkRequest {
  chatBotInstanceId?: string(name='ChatBotInstanceId', description='The ID of the bot instance.', example='1'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  intentName?: string(name='IntentName', description='The name of the intent in the dialog flow. When this parameter is specified, the bot conducts a Q\\&A based on the intent.', example='intent'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='ksiekdki39ksks93939'),
  knowledgeId?: string(name='KnowledgeId', description='The ID of the knowledge title in the knowledge base.', example='1'),
  perspectiveShrink?: string(name='Perspective', description='The list of codes for answers from different perspectives.'),
  senderId?: string(name='SenderId', description='The ID of the visitor, which is used to identify users in the current session.', example='861500000000'),
  senderNick?: string(name='SenderNick', description='The nickname of the visitor in the current session.', example='nick'),
  sessionId?: string(name='SessionId', description='The ID of the session, which is used to identify the session and store context information of the session.', example='en'),
  utterance?: string(name='Utterance', description='The input of the visitor.', example='659216218162179'),
  vendorParamShrink?: string(name='VendorParam', description='The user-defined parameter set in JSON format. You can specify user-defined parameters for conversation engines.'),
}

model BeeBotChatResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request is successful.', example='OK'),
  data?: {
    messageId?: string(name='MessageId', description='The ID of the response message.', example='ab6be8af-cee4-40c3-9919-2ac7461d7d98'),
    messages?: [ 
      {
        answerSource?: string(name='AnswerSource', description='When the AnswerType parameter is set to Recommend, this parameter indicates the source of the recommended answer.', example='KNOWLEDGE'),
        answerType?: string(name='AnswerType', description='The type of the answer.', example='Text'),
        knowledge?: {
          answerSource?: string(name='AnswerSource', description='The source of the answer.', example='KnowledgeBase'),
          category?: string(name='Category', description='The category of the knowledge.'),
          content?: string(name='Content', description='The content of the hit question.'),
          contentType?: string(name='ContentType', description='Indicates whether the answer is in plain text or rich text.', example='PLAIN_TEXT'),
          hitStatement?: string(name='HitStatement', description='The hit text.'),
          id?: string(name='Id', description='The ID of the hit question in the knowledge base.', example='735898'),
          relatedKnowledges?: [ 
            {
              knowledgeId?: string(name='KnowledgeId', description='The ID of the related knowledge.', example='735899'),
              title?: string(name='Title', description='The title of the related knowledge.'),
            }
          ](name='RelatedKnowledges', description='The list of the related knowledge.'),
          summary?: string(name='Summary', description='The summary to the hit question.'),
          title?: string(name='Title', description='The title of the hit question.'),
        }(name='Knowledge', description='When the AnswerType parameter is set to Knowledge, this parameter contains the Knowledge object returned by the bot.'),
        recommends?: [ 
          {
            answerSource?: string(name='AnswerSource', description='The source of the recommended answer.', example='KNOWLEDGE'),
            knowledgeId?: string(name='KnowledgeId', description='The ID of the recommended knowledge.', example='4548'),
            title?: string(name='Title', description='The title of the recommended knowledge. Valid values: the entity in graph-based question answering, the knowledge title in knowledge-based question answering, or the column value in table-based question answering.'),
          }
        ](name='Recommends', description='The list of recommended knowledge. When the AnswerType parameter is set to Recommend, this parameter is returned.'),
        text?: {
          answerSource?: string(name='AnswerSource', description='The source of the answer.', example='BotFramework'),
          content?: string(name='Content', description='The content of the text message.'),
          contentType?: string(name='ContentType', description='Indicates whether the answer is in plain text or rich text.', example='PLAIN_TEXT'),
          dialogName?: string(name='DialogName', description='The name of the dialog. When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          ext?: map[string]any(name='Ext', description='The passthrough parameters are returned.'),
          externalFlags?: map[string]any(name='ExternalFlags', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          hitStatement?: string(name='HitStatement', description='The hit text.'),
          intentName?: string(name='IntentName', description='The name of the intent. When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          metaData?: string(name='MetaData', description='The metadata.'),
          nodeId?: string(name='NodeId', description='The ID of the node. When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.', example='1410-c7a72a78.__city'),
          nodeName?: string(name='NodeName', description='The name of the node. When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          slots?: [ 
            {
              hit?: boolean(name='Hit', description='Indicates whether the slot is hit.', example='false'),
              name?: string(name='Name', description='The name.'),
              origin?: string(name='Origin', description='The original value.', example='Beijing'),
              value?: string(name='Value', description='The specific value.', example='Beijing'),
            }
          ](name='Slots', description='The list of slots.'),
          userDefinedChatTitle?: string(name='UserDefinedChatTitle', description='The title of the chitchat.'),
        }(name='Text', description='When the AnswerType parameter is set to Text, this parameter contains the Text object returned by the bot.'),
      }
    ](name='Messages', description='The list of messages.'),
    sessionId?: string(name='SessionId', description='The ID of the session.', example='1234'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='none'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model BeeBotChatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BeeBotChatResponseBody(name='body'),
}

/**
  * You can call this operation up to 100 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param tmpReq BeeBotChatRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BeeBotChatResponse
 */
async function beeBotChatWithOptions(tmpReq: BeeBotChatRequest, runtime: Util.RuntimeOptions): BeeBotChatResponse {
  Util.validateModel(tmpReq);
  var request = new BeeBotChatShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.perspective)) {
    request.perspectiveShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.perspective, 'Perspective', 'json');
  }
  if (!Util.isUnset(tmpReq.vendorParam)) {
    request.vendorParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vendorParam, 'VendorParam', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.chatBotInstanceId)) {
    body['ChatBotInstanceId'] = request.chatBotInstanceId;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.intentName)) {
    body['IntentName'] = request.intentName;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.knowledgeId)) {
    body['KnowledgeId'] = request.knowledgeId;
  }
  if (!Util.isUnset(request.perspectiveShrink)) {
    body['Perspective'] = request.perspectiveShrink;
  }
  if (!Util.isUnset(request.senderId)) {
    body['SenderId'] = request.senderId;
  }
  if (!Util.isUnset(request.senderNick)) {
    body['SenderNick'] = request.senderNick;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.utterance)) {
    body['Utterance'] = request.utterance;
  }
  if (!Util.isUnset(request.vendorParamShrink)) {
    body['VendorParam'] = request.vendorParamShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BeeBotChat',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 100 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request BeeBotChatRequest
  * @return BeeBotChatResponse
 */
async function beeBotChat(request: BeeBotChatRequest): BeeBotChatResponse {
  var runtime = new Util.RuntimeOptions{};
  return beeBotChatWithOptions(request, runtime);
}

model ChatappBindWabaRequest {
  wabaId?: string(name='WabaId', description='The ID of the WhatsApp Business account.', example='2293938222343****'),
}

model ChatappBindWabaResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='C02029392939939'),
    wabaId?: string(name='WabaId', description='The ID of the WhatsApp Business account.', example='2939828282'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model ChatappBindWabaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappBindWabaResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappBindWabaRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChatappBindWabaResponse
 */
async function chatappBindWabaWithOptions(request: ChatappBindWabaRequest, runtime: Util.RuntimeOptions): ChatappBindWabaResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.wabaId)) {
    body['WabaId'] = request.wabaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChatappBindWaba',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappBindWabaRequest
  * @return ChatappBindWabaResponse
 */
async function chatappBindWaba(request: ChatappBindWabaRequest): ChatappBindWabaResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappBindWabaWithOptions(request, runtime);
}

model ChatappEmbedSignUpRequest {
  inputToken?: string(name='InputToken', description='The InputToken returned after the embedded signup flow is complete.', example='wlelkelwidilwloe-ewlwols0lwsllsld'),
}

model ChatappEmbedSignUpResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  wabas?: [ 
    {
      accountReviewStatus?: string(name='AccountReviewStatus', description='The review status of the WhatsApp Business account.', example='VERIFIED'),
      currency?: string(name='Currency', description='The currency.', example='USD'),
      id?: string(name='Id', description='The ID of the WhatsApp Business account.', example='2939933992*****'),
      messageTemplateNamespace?: string(name='MessageTemplateNamespace', description='The namespace of the message template.', example='alals-lsslls-slslsos-slsl'),
      name?: string(name='Name', description='The name of the WhatsApp Business account.', example='Alibaba'),
    }
  ](name='Wabas', description='The list of the WhatsApp Business accounts.'),
}

model ChatappEmbedSignUpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappEmbedSignUpResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappEmbedSignUpRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChatappEmbedSignUpResponse
 */
async function chatappEmbedSignUpWithOptions(request: ChatappEmbedSignUpRequest, runtime: Util.RuntimeOptions): ChatappEmbedSignUpResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.inputToken)) {
    body['InputToken'] = request.inputToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChatappEmbedSignUp',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappEmbedSignUpRequest
  * @return ChatappEmbedSignUpResponse
 */
async function chatappEmbedSignUp(request: ChatappEmbedSignUpRequest): ChatappEmbedSignUpResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappEmbedSignUpWithOptions(request, runtime);
}

model ChatappMigrationRegisterRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the independent software vendor (ISV) account.', example='293483938849493'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='86138001234'),
}

model ChatappMigrationRegisterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappMigrationRegisterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappMigrationRegisterResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappMigrationRegisterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChatappMigrationRegisterResponse
 */
async function chatappMigrationRegisterWithOptions(request: ChatappMigrationRegisterRequest, runtime: Util.RuntimeOptions): ChatappMigrationRegisterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChatappMigrationRegister',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappMigrationRegisterRequest
  * @return ChatappMigrationRegisterResponse
 */
async function chatappMigrationRegister(request: ChatappMigrationRegisterRequest): ChatappMigrationRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappMigrationRegisterWithOptions(request, runtime);
}

model ChatappMigrationVerifiedRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the independent software vendor (ISV) account.', example='293483938849493'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='861380001234'),
  verifyCode?: string(name='VerifyCode', description='The verification code.', example='828798'),
}

model ChatappMigrationVerifiedResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    id?: string(name='Id', description='The ID of the phone number.', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800001234'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappMigrationVerifiedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappMigrationVerifiedResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappMigrationVerifiedRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChatappMigrationVerifiedResponse
 */
async function chatappMigrationVerifiedWithOptions(request: ChatappMigrationVerifiedRequest, runtime: Util.RuntimeOptions): ChatappMigrationVerifiedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.verifyCode)) {
    query['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChatappMigrationVerified',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappMigrationVerifiedRequest
  * @return ChatappMigrationVerifiedResponse
 */
async function chatappMigrationVerified(request: ChatappMigrationVerifiedRequest): ChatappMigrationVerifiedResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappMigrationVerifiedWithOptions(request, runtime);
}

model ChatappPhoneNumberDeregisterRequest {
  custSpaceId?: string(name='CustSpaceId', example='939283893939'),
  phoneNumber?: string(name='PhoneNumber', example='8613800000000'),
}

model ChatappPhoneNumberDeregisterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model ChatappPhoneNumberDeregisterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappPhoneNumberDeregisterResponseBody(name='body'),
}

async function chatappPhoneNumberDeregisterWithOptions(request: ChatappPhoneNumberDeregisterRequest, runtime: Util.RuntimeOptions): ChatappPhoneNumberDeregisterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChatappPhoneNumberDeregister',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function chatappPhoneNumberDeregister(request: ChatappPhoneNumberDeregisterRequest): ChatappPhoneNumberDeregisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappPhoneNumberDeregisterWithOptions(request, runtime);
}

model ChatappPhoneNumberRegisterRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the independent software vendor (ISV) account.', example='939283893939***'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800001234'),
}

model ChatappPhoneNumberRegisterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappPhoneNumberRegisterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappPhoneNumberRegisterResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappPhoneNumberRegisterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChatappPhoneNumberRegisterResponse
 */
async function chatappPhoneNumberRegisterWithOptions(request: ChatappPhoneNumberRegisterRequest, runtime: Util.RuntimeOptions): ChatappPhoneNumberRegisterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChatappPhoneNumberRegister',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappPhoneNumberRegisterRequest
  * @return ChatappPhoneNumberRegisterResponse
 */
async function chatappPhoneNumberRegister(request: ChatappPhoneNumberRegisterRequest): ChatappPhoneNumberRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappPhoneNumberRegisterWithOptions(request, runtime);
}

model ChatappSyncPhoneNumberRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the independent software vendor (ISV) account.', example='293483938849493****'),
}

model ChatappSyncPhoneNumberResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None.'),
  phoneNumbers?: [ 
    {
      codeVerificationStatus?: string(name='CodeVerificationStatus', description='The verification status.', example='VERIFIED'),
      messagingLimitTier?: string(name='MessagingLimitTier', description='The number of phone numbers to which messages can be sent in a day.', example='TIER_10'),
      nameStatus?: string(name='NameStatus', description='The review status of the business display name.', example='Approval'),
      newNameStatus?: string(name='NewNameStatus', description='The review status of the new business display name.', example='Approval'),
      phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800001234'),
      qualityRating?: string(name='QualityRating', description='The quality rating of the phone number. Valid values: GREEN, YELLOW, and RED.', example='GREEN'),
      status?: string(name='Status', description='The status of the phone number.', example='PENDING'),
      statusCallbackUrl?: string(name='StatusCallbackUrl', description='The callback URL to which status reports are sent by using HTTP callbacks.', example='https://www.alibaba.com/status'),
      statusQueue?: string(name='StatusQueue', description='The status report queue.', example='alicom-09399200-queue'),
      upCallbackUrl?: string(name='UpCallbackUrl', description='The callback URL to which MO messages are sent by using HTTP callbacks.', example='https://www.alibaba.com/inbound'),
      upQueue?: string(name='UpQueue', description='The mobile originated (MO) message queue.', example='alicom-09399200-queue'),
      verifiedName?: string(name='VerifiedName', description='The display name of the business to which the phone number belongs.', example='Alibaba'),
    }
  ](name='PhoneNumbers', description='Details of the phone numbers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model ChatappSyncPhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappSyncPhoneNumberResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappSyncPhoneNumberRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChatappSyncPhoneNumberResponse
 */
async function chatappSyncPhoneNumberWithOptions(request: ChatappSyncPhoneNumberRequest, runtime: Util.RuntimeOptions): ChatappSyncPhoneNumberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChatappSyncPhoneNumber',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappSyncPhoneNumberRequest
  * @return ChatappSyncPhoneNumberResponse
 */
async function chatappSyncPhoneNumber(request: ChatappSyncPhoneNumberRequest): ChatappSyncPhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappSyncPhoneNumberWithOptions(request, runtime);
}

model ChatappVerifyAndRegisterRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the independent software vendor (ISV) account.', example='29389299388383'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800001234'),
  verifyCode?: string(name='VerifyCode', description='The verification code.', example='223222'),
}

model ChatappVerifyAndRegisterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappVerifyAndRegisterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappVerifyAndRegisterResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappVerifyAndRegisterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChatappVerifyAndRegisterResponse
 */
async function chatappVerifyAndRegisterWithOptions(request: ChatappVerifyAndRegisterRequest, runtime: Util.RuntimeOptions): ChatappVerifyAndRegisterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.verifyCode)) {
    body['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChatappVerifyAndRegister',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappVerifyAndRegisterRequest
  * @return ChatappVerifyAndRegisterResponse
 */
async function chatappVerifyAndRegister(request: ChatappVerifyAndRegisterRequest): ChatappVerifyAndRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappVerifyAndRegisterWithOptions(request, runtime);
}

model CreateChatappMigrationInitiateRequest {
  countryCode?: string(name='CountryCode', example='86'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493****'),
  mobileNumber?: string(name='MobileNumber', example='13900001234'),
}

model CreateChatappMigrationInitiateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  data?: {
    id?: string(name='Id', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', example='8613900001234'),
    status?: string(name='Status', example='MIGRATING'),
  }(name='Data'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model CreateChatappMigrationInitiateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateChatappMigrationInitiateResponseBody(name='body'),
}

/**
  * The status of the phone number.
  *
  * @param request CreateChatappMigrationInitiateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateChatappMigrationInitiateResponse
 */
async function createChatappMigrationInitiateWithOptions(request: CreateChatappMigrationInitiateRequest, runtime: Util.RuntimeOptions): CreateChatappMigrationInitiateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.countryCode)) {
    query['CountryCode'] = request.countryCode;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.mobileNumber)) {
    query['MobileNumber'] = request.mobileNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateChatappMigrationInitiate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The status of the phone number.
  *
  * @param request CreateChatappMigrationInitiateRequest
  * @return CreateChatappMigrationInitiateResponse
 */
async function createChatappMigrationInitiate(request: CreateChatappMigrationInitiateRequest): CreateChatappMigrationInitiateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChatappMigrationInitiateWithOptions(request, runtime);
}

model CreateChatappTemplateRequest {
  allowCategoryChange?: boolean(name='AllowCategoryChange', description='Specifies whether to allow Facebook to automatically change the directory of the template. If you set this parameter to true, the review success rate of the template is improved. This parameter is valid only when TemplateType is set to WHATSAPP.', example='true'),
  category?: string(name='Category', description='The category of the template if TemplateType is set to WHATSAPP. Valid values:

*   **UTILITY**: the transaction template
*   **MARKETING**: the marketing template
*   **AUTHENTICATION**: the authentication template

The category of the template if TemplateType is set to VIBER. Valid values:

*   **text**: the template that contains only text
*   **image**: the template that contains only images
*   **text_image_button**: the template that contains text, images, and buttons
*   **text_button**: the template that contains text and buttons
*   **document**: the template that contains only documents
*   **video**: the template that contains only videos
*   **text_video**: the template that contains text and videos
*   **text_video_button**: the template that contains text, videos, and buttons
*   **text_image**: the template that contains text and images', example='The code of the message template.'),
  components?: [ 
    {
      addSecretRecommendation?: boolean(name='AddSecretRecommendation', description='The note indicating that customers cannot share verification codes with others. The note is displayed in the message body. This parameter is valid if Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to BODY in a WhatsApp message template.', example='true'),
      buttons?: [ 
        {
          autofillText?: string(name='AutofillText', description='The text of the one-tap autofill button. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP in a WhatsApp message template.', example='Autofill'),
          couponCode?: string(name='CouponCode', example='29838isue8'),
          flowAction?: string(name='FlowAction', example='NAVIGATE'),
          flowId?: string(name='FlowId', example='28383872***'),
          isOptOut?: boolean(name='IsOptOut', description='The unsubscribe button. This parameter is valid if Category is set to MARKETING and the Type sub-parameter of the Buttons parameter is set to QUICK_REPLY in a WhatsApp message template. After you configure message sending in the ChatApp Message Service console, marketing messages will not be sent to customers if they click this button.', example='false'),
          packageName?: string(name='PackageName', description='The app package name that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP in a WhatsApp message template.', example='com.demo'),
          phoneNumber?: string(name='PhoneNumber', description='The phone number. This parameter is valid only when the Type sub-parameter of the Buttons parameter is set to **PHONE_NUMBER**.', example='+861368897****'),
          signatureHash?: string(name='SignatureHash', description='The app signing key hash that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP in a WhatsApp message template.', example='wi299382'),
          text?: string(name='Text', description='The display name of the button.', example='Call Me'),
          type?: string(name='Type', description='The type of the button. Valid values:

*   **PHONE_NUMBER**: the phone call button
*   **URL**: the URL button
*   **QUICK_REPLY**: the quick reply button
*   **COPY_CODE**: the copy code button if Category is set to AUTHENTICATION
*   **ONE_TAP**: the one-tap autofill button if Category is set to AUTHENTICATION

> 

*   In a WhatsApp message template, the quick reply button cannot be used together with the phone call button or the URL button.

*   You can add a combination of two URL buttons or a combination of a URL button and a phone call button to a WhatsApp message template.

*   If Category is set to AUTHENTICATION in a WhatsApp message template, you can add only one button to the WhatsApp message template and you must set the Type sub-parameter of the Buttons parameter to COPY_CODE or ONE_TAP. If the Type sub-parameter of the Buttons parameter is set to COPY_CODE, the Text sub-parameter of the Buttons parameter is required. If the Type sub-parameter of the Buttons parameter is set to ONE_TAP, the Text, SignatureHash, PackageName, and AutofillText sub-parameters of the Buttons parameter are required. The value of Text is displayed if the desired app is not installed on the device. The value indicates that you must manually copy the verification code.

*   You can add only one button to a Viber message template, and you must set the Type sub-parameter of the Buttons parameter to URL.', example='PHONE_NUMBER'),
          url?: string(name='Url', description='The URL to which you are redirected when you click the URL button.', example='https://example.com'),
          urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**
*   **dynamic**', example='static'),
          navigateScreen?: string(name='navigateScreen', example='SIGN_UP'),
        }
      ](name='Buttons', description='The buttons. This parameter applies only to **BUTTONS** components.'),
      caption?: string(name='Caption', description='The description of the document.', example='This is a video'),
      cards?: [ 
        {
          cardComponents?: [ 
            {
              buttons?: [ 
                {
                  phoneNumber?: string(name='PhoneNumber', example='+8613800'),
                  text?: string(name='Text', example='button 1'),
                  type?: string(name='Type', example='URL'),
                  url?: string(name='Url', example='https://aliyun.com'),
                  urlType?: string(name='UrlType', example='static'),
                }
              ](name='Buttons'),
              format?: string(name='Format', example='IMAGE'),
              text?: string(name='Text', example='body'),
              type?: string(name='Type', example='HEADER'),
              url?: string(name='Url', example='https://aliyun.com/image.png'),
            }
          ](name='CardComponents'),
        }
      ](name='Cards'),
      codeExpirationMinutes?: int32(name='CodeExpirationMinutes', description='The validity period of the verification code in the WhatsApp authentication template. Unit: minutes. This parameter is valid only when Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to FOOTER in a WhatsApp message template. The validity period of the verification code is displayed in the footer.', example='5'),
      duration?: int32(name='Duration', description='The length of the video in the Viber message template. Unit: seconds. Valid values: 0 to 600.', example='120'),
      fileName?: string(name='FileName', description='The name of the document.', example='video name'),
      fileType?: string(name='FileType', description='The type of the document attached in the Viber message template.', example='docx'),
      format?: string(name='Format', description='The type of the media resources that are included in the message. Valid values:

*   **TEXT**
*   **IMAGE**
*   **DOCUMENT**
*   **VIDEO**', example='TEXT'),
      hasExpiration?: boolean(name='HasExpiration'),
      text?: string(name='Text', description='The text of the message that you want to send.

> If Category is set to AUTHENTICATION, the Text sub-parameter of the Components parameter is empty.', example='hello whatsapp'),
      thumbUrl?: string(name='ThumbUrl', description='The thumbnail URL of the video in the Viber message template.', example='https://cdn.multiplymall.mobiapp.cloud/yunmall/B-LM-LMALL202207130001/20220730/d712a057-a6af-4513-bbe6-7ee57ea60983.png?x-oss-process=image/resize,w_100'),
      type?: string(name='Type', description='The type of the component. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**

> 

*   In WhatsApp message templates, a **BODY** component cannot exceed 1,024 characters in length, and a **HEADER** or **FOOTER** component cannot exceed 60 characters in length.

*   **FOOTER** components are not supported in Viber message templates.

*   In a Viber message template, media resources, such as images, videos, or documents, are placed in the **HEADER** component. If a Viber message contains text and an image, the image is placed under the text in the message received on a device.', example='BODY'),
      url?: string(name='Url', description='The URL of the media resource.

> We recommend that the resolution of the image is 800 × 800 in a Viber message template.', example='https://image.developer.aliyundoc.com'),
    }
  ](name='Components', description='The components of the message template.

> If Category is set to AUTHENTICATION, the Type sub-parameter of the Components parameter cannot be set to HEADER. If the Type sub-parameter is set to BODY or FOOTER, the Text sub-parameter of the Components parameter is empty.'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business account (WABA) ID of the user within the independent software vendor (ISV) account.

> CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', deprecated='true'),
  example?: map[string]string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](~~463420~~).', example='en'),
  messageSendTtlSeconds?: int32(name='MessageSendTtlSeconds', description='Validity period of authentication template message sending in WhatsApp

> This attribute requires providing waba in advance to Alibaba operators to open the whitelist, otherwise it will result in template submission failure', example='120'),
  name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
  templateType?: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**
*   LINE: the Line message template. This type of message template will be released later.', example='WHATSAPP'),
}

model CreateChatappTemplateShrinkRequest {
  allowCategoryChange?: boolean(name='AllowCategoryChange', description='Specifies whether to allow Facebook to automatically change the directory of the template. If you set this parameter to true, the review success rate of the template is improved. This parameter is valid only when TemplateType is set to WHATSAPP.', example='true'),
  category?: string(name='Category', description='The category of the template if TemplateType is set to WHATSAPP. Valid values:

*   **UTILITY**: the transaction template
*   **MARKETING**: the marketing template
*   **AUTHENTICATION**: the authentication template

The category of the template if TemplateType is set to VIBER. Valid values:

*   **text**: the template that contains only text
*   **image**: the template that contains only images
*   **text_image_button**: the template that contains text, images, and buttons
*   **text_button**: the template that contains text and buttons
*   **document**: the template that contains only documents
*   **video**: the template that contains only videos
*   **text_video**: the template that contains text and videos
*   **text_video_button**: the template that contains text, videos, and buttons
*   **text_image**: the template that contains text and images', example='The code of the message template.'),
  componentsShrink?: string(name='Components', description='The components of the message template.

> If Category is set to AUTHENTICATION, the Type sub-parameter of the Components parameter cannot be set to HEADER. If the Type sub-parameter is set to BODY or FOOTER, the Text sub-parameter of the Components parameter is empty.'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business account (WABA) ID of the user within the independent software vendor (ISV) account.

> CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', deprecated='true'),
  exampleShrink?: string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](~~463420~~).', example='en'),
  messageSendTtlSeconds?: int32(name='MessageSendTtlSeconds', description='Validity period of authentication template message sending in WhatsApp

> This attribute requires providing waba in advance to Alibaba operators to open the whitelist, otherwise it will result in template submission failure', example='120'),
  name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
  templateType?: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**
*   LINE: the Line message template. This type of message template will be released later.', example='WHATSAPP'),
}

model CreateChatappTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='访问被拒绝详细信息。', example='无'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='SMS_232907****'),
    templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
  }(name='Data', description='The data returned.', example='{"templateCode": "****4b5c79c9432497a075bdfca36bf5"，"templateName": "hello_whatsapp"}'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2D'),
}

model CreateChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateChatappTemplateResponseBody(name='body'),
}

/**
  * The error message.
  *
  * @param tmpReq CreateChatappTemplateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateChatappTemplateResponse
 */
async function createChatappTemplateWithOptions(tmpReq: CreateChatappTemplateRequest, runtime: Util.RuntimeOptions): CreateChatappTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreateChatappTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.components)) {
    request.componentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.components, 'Components', 'json');
  }
  if (!Util.isUnset(tmpReq.example)) {
    request.exampleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.example, 'Example', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.allowCategoryChange)) {
    body['AllowCategoryChange'] = request.allowCategoryChange;
  }
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.componentsShrink)) {
    body['Components'] = request.componentsShrink;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.exampleShrink)) {
    body['Example'] = request.exampleShrink;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.messageSendTtlSeconds)) {
    body['MessageSendTtlSeconds'] = request.messageSendTtlSeconds;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The error message.
  *
  * @param request CreateChatappTemplateRequest
  * @return CreateChatappTemplateResponse
 */
async function createChatappTemplate(request: CreateChatappTemplateRequest): CreateChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChatappTemplateWithOptions(request, runtime);
}

model DeleteChatappTemplateRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
}

model DeleteChatappTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model DeleteChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteChatappTemplateResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this operation up to five times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DeleteChatappTemplateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteChatappTemplateResponse
 */
async function deleteChatappTemplateWithOptions(request: DeleteChatappTemplateRequest, runtime: Util.RuntimeOptions): DeleteChatappTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### QPS limit
  * You can call this operation up to five times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request DeleteChatappTemplateRequest
  * @return DeleteChatappTemplateResponse
 */
async function deleteChatappTemplate(request: DeleteChatappTemplateRequest): DeleteChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChatappTemplateWithOptions(request, runtime);
}

model EnableWhatsappROIMetricRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the independent software vendor (ISV) account.', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
}

model EnableWhatsappROIMetricResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='NONE'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model EnableWhatsappROIMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableWhatsappROIMetricResponseBody(name='body'),
}

async function enableWhatsappROIMetricWithOptions(request: EnableWhatsappROIMetricRequest, runtime: Util.RuntimeOptions): EnableWhatsappROIMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableWhatsappROIMetric',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableWhatsappROIMetric(request: EnableWhatsappROIMetricRequest): EnableWhatsappROIMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableWhatsappROIMetricWithOptions(request, runtime);
}

model GetChatappPhoneNumberMetricRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  end?: long(name='End', description='The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.

>  The end time must be later than the start time. The interval between the start time and the end time cannot exceed 24 hours.', example='1693407714687'),
  granularity?: string(name='Granularity', description='Metric granularity. Valid values:

- DAILY
- HALF_HOUR', example='DAILY'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  phoneNumber?: string(name='PhoneNumber', description='The business phone number.', example='861380000'),
  start?: long(name='Start', description='The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1693107714687'),
}

model GetChatappPhoneNumberMetricResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='NONE'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: [ 
    {
      deliveredCount?: int32(name='DeliveredCount', description='Delivered count', example='5'),
      end?: long(name='End', description='The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1667196043904'),
      granularity?: string(name='Granularity', description='The granularity at which bills are queried.', example='DAILY'),
      phoneNumber?: string(name='PhoneNumber', description='The business phone number.', example='861380000'),
      sentCount?: int32(name='SentCount', description='Sent count', example='10'),
      start?: long(name='Start', description='The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1669619491000'),
    }
  ](name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1612C226-E271-4CFE-9F18-4066D******'),
}

model GetChatappPhoneNumberMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetChatappPhoneNumberMetricResponseBody(name='body'),
}

async function getChatappPhoneNumberMetricWithOptions(request: GetChatappPhoneNumberMetricRequest, runtime: Util.RuntimeOptions): GetChatappPhoneNumberMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappPhoneNumberMetric',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getChatappPhoneNumberMetric(request: GetChatappPhoneNumberMetricRequest): GetChatappPhoneNumberMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappPhoneNumberMetricWithOptions(request, runtime);
}

model GetChatappTemplateDetailRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatsApp account that you registered.', example='65921621816****', deprecated='true'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code. This parameter is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](~~463420~~).', example='en_US'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='****4b5c79c9432497a075bdfca36bf5'),
  templateType?: string(name='TemplateType', description='The type of the message template. Valid values:

*   **WHATSAPP**
*   **VIBER**
*   LINE (developing)', example='WHATSAPP'),
}

model GetChatappTemplateDetailResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code.

*   Example: OK. This value indicates that the request is successful.
*   Other codes indicate that the request fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
    category?: string(name='Category', description='The category of the template when the returned value of TemplateType is WHATSAPP. Valid values:

*   **UTILITY**: a transactional template
*   **MARKETING**: a marketing template
*   **AUTHENTICATION**: an identity authentication template

The category of the template when the returned value of the TemplateType parameter is VIBER. Valid values:

*   **text**: a template that contains only text
*   **image**: a template that contains only images
*   **text_image_button**: a template that contains text, images, and buttons
*   **text_button**: a template that contains text and buttons
*   **document**: a template that contains only files
*   **video**: a template that contains only videos
*   **text_video**: a template that contains text and videos
*   **text_video_button**: a template that contains text, videos, and buttons
*   **text_image**: a template that contains text and images

> If Category is set to text_video_button, users cannot open a web page by clicking the button. Users can open only the video in the message. In this case, you do not need to specify the Url parameter for the URL button in the template.', example='TRANSACTIONAL'),
    components?: [ 
      {
        addSecretRecommendation?: boolean(name='AddSecretRecommendation', description='Whatsapp类型模板，Category为Authentication，并且Component Type为Body时有效，表示在Body上面显示不要将验证码信息提供给其它人的提示信息', example='false'),
        buttons?: [ 
          {
            autofillText?: string(name='AutofillText', description='Whatsapp模板，Category为Authentication，并且Button Type为ONE_TAP时必填，Whatsap Autofill操作的按钮文本', example='Autofill'),
            couponCode?: string(name='CouponCode', example='202039ksjs'),
            extendAttrs?: {
              action?: string(name='Action', description='事件类型', example='nextCard'),
              intentCode?: string(name='IntentCode', description='意图编码', example='test'),
              nextLanguageCode?: string(name='NextLanguageCode', description='下一个模板语言', example='en'),
              nextTemplateCode?: string(name='NextTemplateCode', description='下一个模板编码', example='20939920093993'),
              nextTemplateName?: string(name='NextTemplateName', description='下一个模板名称', example='abc'),
            }(name='ExtendAttrs', description='扩展字段'),
            flowAction?: string(name='FlowAction'),
            flowId?: string(name='FlowId'),
            isOptOut?: boolean(name='IsOptOut', description='Whatsapp模板，在Category为Marketing,并且Button type为QUICK_REPLY时有效，表示按钮为营销退订按钮，客户如果点击了此按钮，并且在chatapp平台上配置了发送控制操作，则后续Marketing消息则不会发送到客户', example='false'),
            navigateScreen?: string(name='NavigateScreen'),
            packageName?: string(name='PackageName', description='Whatsapp模板，Category为Authentication，并且Button Type为ONE_TAP时必填，表示Whatsapp调起应用的包名', example='com.aliyun'),
            phoneNumber?: string(name='PhoneNumber', description='The phone number. This parameter is valid only if the returned value of the Type parameter is **PHONE_NUMBER**.', example='861398745****'),
            signatureHash?: string(name='SignatureHash', description='Whatsapp模板，Category为Authentication，并且Button Type为ONE_TAP时必填，表示Whatsapp调起应用的签名Hash值', example='2993839'),
            text?: string(name='Text', description='The display name of the button.', example='Call'),
            type?: string(name='Type', description='The type of the button. Valid values:

*   **PHONE_NUMBER**: a phone call button
*   **URL**: a URL button
*   **QUICK_REPLY**: a quick reply button

> 

*   A quick reply button cannot coexist with a phone call button or a URL button in a message template.

*   You can add a combination of two URL buttons or a combination of a URL button and a phone call button to a message template.

*   You can add only one button to a Viber message template, and the button must be a URL button.', example='PHONE_NUMBER'),
            url?: string(name='Url', description='The URL to be accessed when you click the URL button.', example='https://example.com'),
            urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**: a static URL
*   **dynamic**: a dynamic URL', example='static'),
          }
        ](name='Buttons', description='This parameter applies only to components of the **BUTTONS** type. This parameter is passed in by converting its original JSON structure into a string.'),
        caption?: string(name='Caption', description='The description of the file.', example='The new file has been uploaded.'),
        cards?: [ 
          {
            cardComponents?: [ 
              {
                buttons?: [ 
                  {
                    phoneNumber?: string(name='PhoneNumber', example='+86138000'),
                    text?: string(name='Text', example='按钮文本'),
                    type?: string(name='Type', example='URL'),
                    url?: string(name='Url', example='https://aliyun.com'),
                    urlType?: string(name='UrlType', example='static'),
                  }
                ](name='Buttons'),
                format?: string(name='Format', example='HEADER'),
                text?: string(name='Text', example='Body'),
                type?: string(name='Type', example='HEADER'),
                url?: string(name='Url', example='https://aliyun.com'),
              }
            ](name='CardComponents'),
          }
        ](name='Cards'),
        codeExpirationMinutes?: int32(name='CodeExpirationMinutes', description='Whatsapp Authentication模板验证码有效期（分钟），只在Whatsapp类型消息，Category为Authentication并且Component Type为Footer时有效（此信息显示在Footer位置）', example='5'),
        duration?: int32(name='Duration', description='The length of the video in the Viber message template. Valid values: 0 to 600. Unit: seconds.', example='50'),
        fileName?: string(name='FileName', description='The name of the file.', example='Express file'),
        fileType?: string(name='FileType', description='The type of the file attached in the Viber message template.', example='docx'),
        format?: string(name='Format', description='The type of the media resources that are included in the message.', example='TEXT'),
        latitude?: string(name='Latitude', description='位置纬度属性', example='28.001'),
        locationAddress?: string(name='LocationAddress', description='位置地址', example='杭州'),
        locationName?: string(name='LocationName', description='位置名称', example='杭州'),
        longitude?: string(name='Longitude', description='位置经度属性', example='120.002'),
        offerExpirationTimeMs?: string(name='OfferExpirationTimeMs', example='$(offerExpirationTimeMs)'),
        text?: string(name='Text', description='The text of the message that you want to send.', example='Hello'),
        thumbUrl?: string(name='ThumbUrl', description='The thumbnail URL of the video in the Viber message template.', example='https://img.png'),
        type?: string(name='Type', description='The type of the component. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**

> 

*   The following limits apply to components in WhatsApp message templates: A component of the **BODY** type cannot exceed 1,024 characters. A component of the **HEADER** or **FOOTER** type cannot exceed 60 characters in length.

> 

*   **FOOTER** components are not supported in Viber message templates.

> 

*   In a Viber message template, a media resource, such as an image, a video, or a file, is placed in the **HEADER** component. If a Viber message contains text and an image, the image is placed under the text in the message received on a device.', example='BODY'),
        url?: string(name='Url', description='The URL of the material.', example='https://image.developer.aliyundoc.com'),
        hasExpiration?: boolean(name='hasExpiration'),
      }
    ](name='Components', description='The components of the message template.'),
    example?: map[string]string(name='Example', description='The examples of variables.'),
    language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](~~463420~~).', example='en_US'),
    messageSendTtlSeconds?: int32(name='MessageSendTtlSeconds', description='Whatsapp中Authentication类型模板发送消息时的消息有效期', example='120'),
    name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
    qualityScore?: string(name='QualityScore', description='模板质量', example='GREEN'),
    reason?: string(name='Reason', example='None'),
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
    templateType?: string(name='TemplateType', description='The type of the message template. Valid values:

*   **WHATSAPP**
*   **VIBER**
*   LINE (developing)', example='WHATSAPP'),
  }(name='Data', description='The returned data.', example='{ 		"category": "ACCOUNT_UPDATE", 		"name": "account_notice", 		"language": "en_US", 		"templateCode": "744c4b5c79c9432497a075bdfca3****", 		"auditStatus": "APPROVED", 		"components": "[{\\"type\\":\\"BODY\\",\\"text\\":\\"body_text$(textVariable)\\"},{\\"type\\":\\"HEADER\\",\\"formate\\":\\"IMAGE\\",\\"url\\":\\"$(linkVariable)\\"},{\\"type\\":\\"FOOTER\\",\\"text\\":\\"footer-text\\"},{\\"type\\":\\"BUTTONS\\",\\"buttons\\":[{\\"type\\":\\"PHONE_NUMBER\\",\\"text\\":\\"phone-button-text\\",\\"phone_number\\":\\"+861388888****\\"},{\\"type\\":\\"URL\\",\\"text\\":\\"url-button-text\\",\\"url\\":\\"https://www.website.com/\\"}]}]", 		"example": "{\\"textVariable\\": \\"text\\", \\"linkVariable\\": \\"link\\"}" 	}'),
  message?: string(name='Message', description='The error message.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The request ID.', example='744c4b5c79c9432497a075bdfca3****'),
}

model GetChatappTemplateDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetChatappTemplateDetailResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this API operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetChatappTemplateDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetChatappTemplateDetailResponse
 */
async function getChatappTemplateDetailWithOptions(request: GetChatappTemplateDetailRequest, runtime: Util.RuntimeOptions): GetChatappTemplateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappTemplateDetail',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### QPS limit
  * You can call this API operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetChatappTemplateDetailRequest
  * @return GetChatappTemplateDetailResponse
 */
async function getChatappTemplateDetail(request: GetChatappTemplateDetailRequest): GetChatappTemplateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappTemplateDetailWithOptions(request, runtime);
}

model GetChatappTemplateMetricRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='293483938849493'),
  end?: long(name='End', description='The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1693407714687'),
  granularity?: string(name='Granularity', description='Metric granularity. Valid values:

- DAILY', example='DAILY'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code. This parameter is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](~~463420~~).', example='en'),
  start?: long(name='Start', description='The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1693107714687'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca36bf5'),
  templateType?: string(name='TemplateType', description='The type of the message template. Valid values:

*   **WHATSAPP**', example='WHATSAPP'),
}

model GetChatappTemplateMetricResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: [ 
    {
      cliented?: [ 
        {
          buttonContent?: string(name='ButtonContent', description='Button name', example='Open url'),
          count?: int32(name='Count', description='Clicked count', example='20'),
          type?: string(name='Type', description='The type of button.', example='quick_reply_button'),
        }
      ](name='Cliented', description='Click Statistics'),
      deliveredCount?: int32(name='DeliveredCount', description='Delivered count', example='6'),
      end?: long(name='End', description='The end of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1668138331485'),
      language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](~~463420~~).', example='en'),
      readCount?: int32(name='ReadCount', description='Read count', example='3'),
      sentCount?: int32(name='SentCount', description='Sent count', example='10'),
      start?: long(name='Start', description='The beginning of the time range to query. Set this parameter to a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1673919240001'),
      templateCode?: string(name='TemplateCode', description='The code of the message template.', example='83837774838*****'),
    }
  ](name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetChatappTemplateMetricResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetChatappTemplateMetricResponseBody(name='body'),
}

async function getChatappTemplateMetricWithOptions(request: GetChatappTemplateMetricRequest, runtime: Util.RuntimeOptions): GetChatappTemplateMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappTemplateMetric',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getChatappTemplateMetric(request: GetChatappTemplateMetricRequest): GetChatappTemplateMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappTemplateMetricWithOptions(request, runtime);
}

model GetChatappUploadAuthorizationRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the independent software vendor (ISV) account.', example='293483938849493'),
}

model GetChatappUploadAuthorizationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', description='The AccessKey ID that is used to authorize a user to upload a file to Object Storage Service (OSS).', example='2skeuurfj****'),
    accessKeySecret?: string(name='AccessKeySecret', description='The AccessKey secret that is used to authorize a user to upload a file to OSS.', example='skdkdukeuuuu****'),
    bucketName?: string(name='BucketName', description='The name of the bucket to which a file is uploaded in OSS.', example='oss'),
    dir?: string(name='Dir', description='The directory to which a file is uploaded in OSS.', example='1000102939'),
    endPoint?: string(name='EndPoint', description='The address of the OSS server to which a file is uploaded.', example='https://oss.com'),
    expire?: int32(name='Expire', description='The timeout period.', example='3600'),
    securityToken?: string(name='SecurityToken', description='The security token.', example='dkdieiii**'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model GetChatappUploadAuthorizationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetChatappUploadAuthorizationResponseBody(name='body'),
}

/**
  * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetChatappUploadAuthorizationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetChatappUploadAuthorizationResponse
 */
async function getChatappUploadAuthorizationWithOptions(request: GetChatappUploadAuthorizationRequest, runtime: Util.RuntimeOptions): GetChatappUploadAuthorizationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappUploadAuthorization',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetChatappUploadAuthorizationRequest
  * @return GetChatappUploadAuthorizationResponse
 */
async function getChatappUploadAuthorization(request: GetChatappUploadAuthorizationRequest): GetChatappUploadAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappUploadAuthorizationWithOptions(request, runtime);
}

model GetChatappVerifyCodeRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the independent software vendor (ISV) account.', example='229393838*****'),
  locale?: string(name='Locale', description='The language.', example='zh_CN'),
  method?: string(name='Method', description='The method to obtain the verification code. Valid values: SMS and VOICE.', example='SMS'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800001234'),
}

model GetChatappVerifyCodeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1612C226-E271-4CFE-9F18-4066D550F91B'),
}

model GetChatappVerifyCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetChatappVerifyCodeResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetChatappVerifyCodeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetChatappVerifyCodeResponse
 */
async function getChatappVerifyCodeWithOptions(request: GetChatappVerifyCodeRequest, runtime: Util.RuntimeOptions): GetChatappVerifyCodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.locale)) {
    body['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.method)) {
    body['Method'] = request.method;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappVerifyCode',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetChatappVerifyCodeRequest
  * @return GetChatappVerifyCodeResponse
 */
async function getChatappVerifyCode(request: GetChatappVerifyCodeRequest): GetChatappVerifyCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappVerifyCodeWithOptions(request, runtime);
}

model GetCommerceSettingRequest {
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  phoneNumber?: string(name='PhoneNumber', example='手机号码'),
}

model GetCommerceSettingResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    cartEnable?: boolean(name='CartEnable', example='false'),
    catalogVisible?: boolean(name='CatalogVisible', example='false'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetCommerceSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCommerceSettingResponseBody(name='body'),
}

async function getCommerceSettingWithOptions(request: GetCommerceSettingRequest, runtime: Util.RuntimeOptions): GetCommerceSettingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCommerceSetting',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCommerceSetting(request: GetCommerceSettingRequest): GetCommerceSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCommerceSettingWithOptions(request, runtime);
}

model GetMigrationVerifyCodeRequest {
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  locale?: string(name='Locale', example='zh_CN'),
  method?: string(name='Method', example='sms'),
  phoneNumber?: string(name='PhoneNumber', example='8613800001234'),
}

model GetMigrationVerifyCodeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  data?: {
    id?: string(name='Id', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', example='8613800001234'),
  }(name='Data'),
  message?: string(name='Message', example='None'),
  requestId?: string(name='RequestId', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model GetMigrationVerifyCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMigrationVerifyCodeResponseBody(name='body'),
}

/**
  * The ID of the phone number.
  *
  * @param request GetMigrationVerifyCodeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetMigrationVerifyCodeResponse
 */
async function getMigrationVerifyCodeWithOptions(request: GetMigrationVerifyCodeRequest, runtime: Util.RuntimeOptions): GetMigrationVerifyCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.method)) {
    query['Method'] = request.method;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMigrationVerifyCode',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The ID of the phone number.
  *
  * @param request GetMigrationVerifyCodeRequest
  * @return GetMigrationVerifyCodeResponse
 */
async function getMigrationVerifyCode(request: GetMigrationVerifyCodeRequest): GetMigrationVerifyCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMigrationVerifyCodeWithOptions(request, runtime);
}

model GetPhoneNumberVerificationStatusRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='229393838****'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613900001234'),
}

model GetPhoneNumberVerificationStatusResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    codeVerificationStatus?: string(name='CodeVerificationStatus', description='The verification status.', example='VERIFIED'),
    id?: string(name='Id', description='The ID of the number.', example='2224342624'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613900001234'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2D'),
}

model GetPhoneNumberVerificationStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPhoneNumberVerificationStatusResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetPhoneNumberVerificationStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetPhoneNumberVerificationStatusResponse
 */
async function getPhoneNumberVerificationStatusWithOptions(request: GetPhoneNumberVerificationStatusRequest, runtime: Util.RuntimeOptions): GetPhoneNumberVerificationStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetPhoneNumberVerificationStatus',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetPhoneNumberVerificationStatusRequest
  * @return GetPhoneNumberVerificationStatusResponse
 */
async function getPhoneNumberVerificationStatus(request: GetPhoneNumberVerificationStatusRequest): GetPhoneNumberVerificationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhoneNumberVerificationStatusWithOptions(request, runtime);
}

model GetPreValidatePhoneIdRequest {
  phoneNumber?: string(name='PhoneNumber', example='861380000'),
  verifyCode?: string(name='VerifyCode', example='208393'),
}

model GetPreValidatePhoneIdResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    phoneNumber?: string(name='PhoneNumber', example='929833'),
    phoneNumberId?: string(name='PhoneNumberId', example='8613800000000'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', description='Id of the request', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetPreValidatePhoneIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPreValidatePhoneIdResponseBody(name='body'),
}

async function getPreValidatePhoneIdWithOptions(request: GetPreValidatePhoneIdRequest, runtime: Util.RuntimeOptions): GetPreValidatePhoneIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.verifyCode)) {
    body['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetPreValidatePhoneId',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPreValidatePhoneId(request: GetPreValidatePhoneIdRequest): GetPreValidatePhoneIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPreValidatePhoneIdWithOptions(request, runtime);
}

model GetWhatsappConnectionCatalogRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.', example='C2020939922929292'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  wabaId?: string(name='WabaId', description='The WABA ID.', example='292939399393'),
}

model GetWhatsappConnectionCatalogResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message.', example='success'),
  model?: map[string]any(name='Model', description='The returned results.', example='{"id":"200292992"}'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='false'),
}

model GetWhatsappConnectionCatalogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetWhatsappConnectionCatalogResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetWhatsappConnectionCatalogRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetWhatsappConnectionCatalogResponse
 */
async function getWhatsappConnectionCatalogWithOptions(request: GetWhatsappConnectionCatalogRequest, runtime: Util.RuntimeOptions): GetWhatsappConnectionCatalogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.wabaId)) {
    query['WabaId'] = request.wabaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWhatsappConnectionCatalog',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetWhatsappConnectionCatalogRequest
  * @return GetWhatsappConnectionCatalogResponse
 */
async function getWhatsappConnectionCatalog(request: GetWhatsappConnectionCatalogRequest): GetWhatsappConnectionCatalogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWhatsappConnectionCatalogWithOptions(request, runtime);
}

model IsvGetAppIdRequest {
  permissions?: string(name='Permissions'),
  type?: string(name='Type', description='The type of the application. Set the value to WHATSAPP.', example='WHATSAPP'),
}

model IsvGetAppIdResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  appId?: string(name='AppId', description='The message ID.', example='23hr3v'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  configId?: string(name='ConfigId'),
  message?: string(name='Message', description='The error message returned.', example='null'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='744c4b5c79c9432497a075bdfca3***'),
}

model IsvGetAppIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IsvGetAppIdResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request IsvGetAppIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return IsvGetAppIdResponse
 */
async function isvGetAppIdWithOptions(request: IsvGetAppIdRequest, runtime: Util.RuntimeOptions): IsvGetAppIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.permissions)) {
    body['Permissions'] = request.permissions;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IsvGetAppId',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request IsvGetAppIdRequest
  * @return IsvGetAppIdResponse
 */
async function isvGetAppId(request: IsvGetAppIdRequest): IsvGetAppIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return isvGetAppIdWithOptions(request, runtime);
}

model ListChatappTemplateRequest {
  auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](~~463420~~).', example='en'),
  name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
  page?: {
    index?: int32(name='Index', description='The number of the page to return. Pages start from page 1. Default value: 1.', example='1'),
    size?: int32(name='Size', description='The number of message templates to return on each page. Default value: 10.', example='10'),
  }(name='Page', description='The paging settings.', example='"page": "{\\"index\\": 1,\\"size\\": 20}'),
  templateType?: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**
*   LINE: the Line message template. This type of message template will be released later.', example='WHATSAPP'),
}

model ListChatappTemplateShrinkRequest {
  auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](~~463420~~).', example='en'),
  name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
  pageShrink?: string(name='Page', description='The paging settings.', example='"page": "{\\"index\\": 1,\\"size\\": 20}'),
  templateType?: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**
*   LINE: the Line message template. This type of message template will be released later.', example='WHATSAPP'),
}

model ListChatappTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='访问被拒绝详细信息。', example='无'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  listTemplate?: [ 
    {
      auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
      category?: string(name='Category', description='The category of the message template. Valid values:

*   **TRANSACTIONAL**: a transactional template
*   **MARKETING**: a marketing template
*   **OTP**: a one-time password template', example='TRANSACTIONAL'),
      language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](~~463420~~).', example='en'),
      reason?: string(name='Reason', description='模板审核被拒的原因', example='None'),
      templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
      templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
      templateType?: string(name='TemplateType', description='The type of the template. Valid values: WHATSAPP and VIBER.', example='WHATSAPP'),
    }
  ](name='ListTemplate', description='The message templates.'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  total?: int32(name='Total', description='总记录条数。', example='1'),
}

model ListChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListChatappTemplateResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param tmpReq ListChatappTemplateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListChatappTemplateResponse
 */
async function listChatappTemplateWithOptions(tmpReq: ListChatappTemplateRequest, runtime: Util.RuntimeOptions): ListChatappTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new ListChatappTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.auditStatus)) {
    query['AuditStatus'] = request.auditStatus;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageShrink)) {
    query['Page'] = request.pageShrink;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### QPS limit
  * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ListChatappTemplateRequest
  * @return ListChatappTemplateResponse
 */
async function listChatappTemplate(request: ListChatappTemplateRequest): ListChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listChatappTemplateWithOptions(request, runtime);
}

model ListProductRequest {
  after?: string(name='After', description='The cursor that points to the end of the page of the returned data.', example='kdkii48jfjjei3'),
  before?: string(name='Before', description='The cursor that points to the beginning of the page of the returned data.', example='wiidkd939kek93'),
  catalogId?: string(name='CatalogId', description='The ID of the product catalog.', example='29398389292'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.', example='C29398388383'),
  fields?: string(name='Fields', description='The fields. Separate multiple fields with commas (,).

 see [product fields](~~2579419~~)', example='id,name'),
  limit?: long(name='Limit', description='The number of products to be queried. Valid values: 1 to 1000.', example='73'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  wabaId?: string(name='WabaId', description='The ID of the WhatsApp Business account (WABA).', example='38487474747'),
}

model ListProductResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  model?: {
    data?: [  map[string]any ](name='Data', description='The returned data.'),
    paging?: {
      cursors?: {
        after?: string(name='After', description='The cursor that points to the end of the page of the returned data.', example='sjsuueu83838'),
        before?: string(name='Before', description='The cursor that points to the beginning of the page of the returned data.', example='sjjsjdjjdjd83883'),
      }(name='Cursors', description='The cursors for pagination.'),
    }(name='Paging', description='The pagination details.'),
  }(name='Model', description='The returned data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ListProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ListProductRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListProductResponse
 */
async function listProductWithOptions(request: ListProductRequest, runtime: Util.RuntimeOptions): ListProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.after)) {
    query['After'] = request.after;
  }
  if (!Util.isUnset(request.before)) {
    query['Before'] = request.before;
  }
  if (!Util.isUnset(request.catalogId)) {
    query['CatalogId'] = request.catalogId;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.fields)) {
    query['Fields'] = request.fields;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.wabaId)) {
    query['WabaId'] = request.wabaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProduct',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ListProductRequest
  * @return ListProductResponse
 */
async function listProduct(request: ListProductRequest): ListProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductWithOptions(request, runtime);
}

model ListProductCatalogRequest {
  after?: string(name='After', description='The cursor that points to the end of the page of the returned data.', example='kdkii48jfjjei3'),
  before?: string(name='Before', description='The cursor that points to the beginning of the page of the returned data.', example='wiidkd939kek93'),
  businessId?: long(name='BusinessId', description='The Business Manager ID.', example='28'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.', example='293483938849493'),
  fields?: string(name='Fields', description='The fields. Separate multiple fields with commas (,).
see  [catalog fields](~~2579419~~)', example='id,name'),
  limit?: long(name='Limit', description='The number of catalogs to be queried. Valid values: 1 to 1000.', example='73'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListProductCatalogResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  model?: {
    data?: [  map[string]any ](name='Data', description='The returned data.'),
    paging?: {
      cursors?: {
        after?: string(name='After', description='The cursor that points to the end of the page of the returned data.', example='sjsuueu83838'),
        before?: string(name='Before', description='The cursor that points to the beginning of the page of the returned data.', example='sjjsjdjjdjd83883'),
      }(name='Cursors', description='The cursors for pagination.'),
    }(name='Paging', description='The pagination details.'),
  }(name='Model', description='The returned results.'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ListProductCatalogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListProductCatalogResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ListProductCatalogRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListProductCatalogResponse
 */
async function listProductCatalogWithOptions(request: ListProductCatalogRequest, runtime: Util.RuntimeOptions): ListProductCatalogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.after)) {
    query['After'] = request.after;
  }
  if (!Util.isUnset(request.before)) {
    query['Before'] = request.before;
  }
  if (!Util.isUnset(request.businessId)) {
    query['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.fields)) {
    query['Fields'] = request.fields;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProductCatalog',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ListProductCatalogRequest
  * @return ListProductCatalogResponse
 */
async function listProductCatalog(request: ListProductCatalogRequest): ListProductCatalogResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductCatalogWithOptions(request, runtime);
}

model ModifyChatappTemplateRequest {
  category?: string(name='Category', description='The category of the Viber message template. Valid values:

*   **text**: the template that contains only text
*   **image**: the template that contains only images
*   **text_image_button**: the template that contains text, images, and buttons
*   **text_button**: the template that contains text and buttons
*   **document**: the template that contains only documents
*   **video**: the template that contains only videos
*   **text_video**: the template that contains text and videos
*   **text_video_button**: the template that contains text, videos, and buttons
*   **text_image**: the template that contains text and images

> This parameter applies only to Viber message templates.', example='text'),
  components?: [ 
    {
      addSecretRecommendation?: boolean(name='AddSecretRecommendation', description='The note indicating that customers cannot share verification codes with others. The note is displayed in the message body. This parameter is valid only when Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to BODY in a WhatsApp message template.', example='false'),
      buttons?: [ 
        {
          autofillText?: string(name='AutofillText', description='The text of the one-tap autofill button. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP in a WhatsApp message template.', example='Autofill'),
          couponCode?: string(name='CouponCode', example='23838jdjdj'),
          flowAction?: string(name='FlowAction', example='NAVIGATE'),
          flowId?: string(name='FlowId', example='28383872***'),
          isOptOut?: boolean(name='IsOptOut', description='The unsubscribe button. This parameter is valid only when Category is set to MARKETING and the Type sub-parameter of the Buttons parameter is set to QUICK_REPLY in a WhatsApp message template. After you configure message sending in the ChatApp Message Service console, marketing messages will not be sent to customers if they click this button.', example='false'),
          packageName?: string(name='PackageName', description='The app package name that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP in a WhatsApp message template.', example='com.demo'),
          phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='+8613888887889'),
          signatureHash?: string(name='SignatureHash', description='The app signing key hash that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP in a WhatsApp message template.', example='29dkeke'),
          text?: string(name='Text', description='The text of the button.', example='phone-button-text'),
          type?: string(name='Type', description='The type of the button. Valid values:

*   **PHONE_NUMBER**: the phone call button
*   **URL**: the URL button
*   **QUICK_REPLY**: the quick reply button
*   **COPY_CODE**: the copy code button if Category is set to AUTHENTICATION
*   **ONE_TAP**: the one-tap autofill button if Category is set to AUTHENTICATION

> 

*   In a WhatsApp message template, the quick reply button cannot be used together with the phone call button or the URL button.

*   You can add a combination of two URL buttons or a combination of a URL button and a phone call button to a WhatsApp message template.

*   If Category is set to AUTHENTICATION in a WhatsApp message template, you can add only one button to the WhatsApp message template and you must set the Type sub-parameter of the Buttons parameter to COPY_CODE or ONE_TAP. If the Type sub-parameter of the Buttons parameter is set to COPY_CODE, the Text sub-parameter of the Buttons parameter is required. If the Type sub-parameter of the Buttons parameter is set to ONE_TAP, the Text, SignatureHash, PackageName, and AutofillText sub-parameters of the Buttons parameter are required. The value of Text is displayed if the desired app is not installed on the device. The value indicates that you must manually copy the verification code.

*   You can add only one button to a Viber message template, and you must set the Type sub-parameter of the Buttons parameter to URL.', example='PHONE_NUMBER'),
          url?: string(name='Url', description='The URL to which you are redirected when you click the URL button.', example='https://www.website.com/'),
          urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**
*   **dynamic**', example='dynamic'),
          navigateScreen?: string(name='navigateScreen', example='SIGN_UP'),
        }
      ](name='Buttons', description='The buttons. This parameter applies only to **BUTTONS** components.'),
      caption?: string(name='Caption', description='The description of the media resource.

> If the Type sub-parameter of the Components parameter is set to **HEADER** and the Format sub-parameter of the Components parameter is set to **IMAGE, DOCUMENT, or VIDEO**, you can specify this parameter.', example='This is a video'),
      cards?: [ 
        {
          cardComponents?: [ 
            {
              buttons?: [ 
                {
                  phoneNumber?: string(name='PhoneNumber', example='+8613800'),
                  text?: string(name='Text', example='button 1'),
                  type?: string(name='Type', example='URL'),
                  url?: string(name='Url', example='https://aliyun.com'),
                  urlType?: string(name='UrlType', example='static'),
                }
              ](name='Buttons'),
              format?: string(name='Format', example='IMAGE'),
              text?: string(name='Text', example='body'),
              type?: string(name='Type', example='HEADER'),
              url?: string(name='Url', example='https://aliyun.com/image.png'),
            }
          ](name='CardComponents'),
        }
      ](name='Cards'),
      codeExpirationMinutes?: int32(name='CodeExpirationMinutes', description='The validity period of the verification code in the WhatsApp authentication template. Unit: minutes. This parameter is valid only when Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to FOOTER in a WhatsApp message template. The validity period of the verification code is displayed in the footer.', example='5'),
      duration?: int32(name='Duration', description='The length of the video in the Viber message template. Unit: seconds. Valid values: 0 to 600.', example='120'),
      fileName?: string(name='FileName', description='The name of the document.

> If the Type sub-parameter of the Components parameter is set to **HEADER** and the Format sub-parameter of the Components parameter is set to **DOCUMENT**, you can specify this parameter.', example='video name'),
      fileType?: string(name='FileType', description='The type of the document attached in the Viber message template.', example='docx'),
      format?: string(name='Format', description='The type of the media resources that are included in the message. Valid values:

*   **TEXT**
*   **IMAGE**
*   **DOCUMENT**
*   **VIDEO**', example='TEXT'),
      hasExpiration?: boolean(name='HasExpiration'),
      text?: string(name='Text', description='The text of the message that you want to send.

> If Category is set to AUTHENTICATION, the Text sub-parameter of the Components parameter is empty.', example='hello chatapp'),
      thumbUrl?: string(name='ThumbUrl', description='The thumbnail URL of the video in the Viber message template.', example='https://cdn.multiplymall.mobiapp.cloud/cloudcode/yc-165407506207478-165511576113195/20220905/ec5b9737-1507-4208-bb27-8da3958da961.jpg?x-oss-process=image/resize,w_100'),
      type?: string(name='Type', description='The type of the component. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**

> 

*   In WhatsApp message templates, a **BODY** component cannot exceed 1,024 characters in length, and a **HEADER** or **FOOTER** component cannot exceed 60 characters in length.

*   **FOOTER** components are not supported in Viber message templates.

*   In a Viber message template, media resources, such as images, videos, or documents, are placed in the **HEADER** component. If a Viber message contains text and an image, the image is placed under the text in the message received on a device.', example='BODY'),
      url?: string(name='Url', description='The URL of the media resource.', example='https://img.tukuppt.com/png_preview/00/10/24/1GygxVK3F4.jpg'),
    }
  ](name='Components', description='The components of the message template.

> If Category is set to AUTHENTICATION, the Type sub-parameter of the Components parameter cannot be set to HEADER. If the Type sub-parameter is set to BODY or FOOTER, the Text sub-parameter of the Components parameter is empty and text in the body or footer is automatically generated.'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business account (WABA) ID of the user within the independent software vendor (ISV) account.

> CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='659216218162179', deprecated='true'),
  example?: map[string]string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='ksiekdki39ksks93939'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](~~463420~~).', example='en'),
  messageSendTtlSeconds?: int32(name='MessageSendTtlSeconds', description='Validity period of authentication template message sending in WhatsApp

>This attribute requires providing waba in advance to Alibaba operators to open the whitelist, otherwise it will result in template submission failure', example='120'),
  templateCode?: string(name='TemplateCode', description='The message template code.', example='8472929283883'),
  templateType?: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**
*   LINE: the Line message template. This type of message template will be released later.', example='WHATSAPP'),
}

model ModifyChatappTemplateShrinkRequest {
  category?: string(name='Category', description='The category of the Viber message template. Valid values:

*   **text**: the template that contains only text
*   **image**: the template that contains only images
*   **text_image_button**: the template that contains text, images, and buttons
*   **text_button**: the template that contains text and buttons
*   **document**: the template that contains only documents
*   **video**: the template that contains only videos
*   **text_video**: the template that contains text and videos
*   **text_video_button**: the template that contains text, videos, and buttons
*   **text_image**: the template that contains text and images

> This parameter applies only to Viber message templates.', example='text'),
  componentsShrink?: string(name='Components', description='The components of the message template.

> If Category is set to AUTHENTICATION, the Type sub-parameter of the Components parameter cannot be set to HEADER. If the Type sub-parameter is set to BODY or FOOTER, the Text sub-parameter of the Components parameter is empty and text in the body or footer is automatically generated.'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business account (WABA) ID of the user within the independent software vendor (ISV) account.

> CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='659216218162179', deprecated='true'),
  exampleShrink?: string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='ksiekdki39ksks93939'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](~~463420~~).', example='en'),
  messageSendTtlSeconds?: int32(name='MessageSendTtlSeconds', description='Validity period of authentication template message sending in WhatsApp

>This attribute requires providing waba in advance to Alibaba operators to open the whitelist, otherwise it will result in template submission failure', example='120'),
  templateCode?: string(name='TemplateCode', description='The message template code.', example='8472929283883'),
  templateType?: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**
*   LINE: the Line message template. This type of message template will be released later.', example='WHATSAPP'),
}

model ModifyChatappTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='8472929283883'),
    templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='NONE'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ModifyChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyChatappTemplateResponseBody(name='body'),
}

/**
  * The name of the message template.
  *
  * @param tmpReq ModifyChatappTemplateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyChatappTemplateResponse
 */
async function modifyChatappTemplateWithOptions(tmpReq: ModifyChatappTemplateRequest, runtime: Util.RuntimeOptions): ModifyChatappTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyChatappTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.components)) {
    request.componentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.components, 'Components', 'json');
  }
  if (!Util.isUnset(tmpReq.example)) {
    request.exampleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.example, 'Example', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.componentsShrink)) {
    body['Components'] = request.componentsShrink;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.exampleShrink)) {
    body['Example'] = request.exampleShrink;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.messageSendTtlSeconds)) {
    body['MessageSendTtlSeconds'] = request.messageSendTtlSeconds;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The name of the message template.
  *
  * @param request ModifyChatappTemplateRequest
  * @return ModifyChatappTemplateResponse
 */
async function modifyChatappTemplate(request: ModifyChatappTemplateRequest): ModifyChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyChatappTemplateWithOptions(request, runtime);
}

model ModifyPhoneBusinessProfileRequest {
  address?: string(name='Address', description='The space ID of the user under the independent software vendor (ISV) account.', example='The phone number.'),
  custSpaceId?: string(name='CustSpaceId', description='Modifies the business information of the account to which a specified phone number is bound.', example='293483938849****'),
  description?: string(name='Description', description='The address.', example='test'),
  email?: string(name='Email', description='The description.', example='aa@aliyun.com'),
  phoneNumber?: string(name='PhoneNumber', description='You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.', example='8613800001234'),
  profilePictureUrl?: string(name='ProfilePictureUrl', description='The industry.

> Enum: {OTHER, AUTO, BEAUTY, APPAREL, EDU, ENTERTAIN, EVENT_PLAN, FINANCE, GROCERY, GOVT, HOTEL, HEALTH, NONPROFIT, PROF_SERVICES, RETAIL, TRAVEL, RESTAURANT}', example='http://a.img'),
  vertical?: string(name='Vertical', description='Sichuan', example='OTHER'),
  websites?: [ string ](name='Websites', description='The email address.'),
}

model ModifyPhoneBusinessProfileShrinkRequest {
  address?: string(name='Address', description='The space ID of the user under the independent software vendor (ISV) account.', example='The phone number.'),
  custSpaceId?: string(name='CustSpaceId', description='Modifies the business information of the account to which a specified phone number is bound.', example='293483938849****'),
  description?: string(name='Description', description='The address.', example='test'),
  email?: string(name='Email', description='The description.', example='aa@aliyun.com'),
  phoneNumber?: string(name='PhoneNumber', description='You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.', example='8613800001234'),
  profilePictureUrl?: string(name='ProfilePictureUrl', description='The industry.

> Enum: {OTHER, AUTO, BEAUTY, APPAREL, EDU, ENTERTAIN, EVENT_PLAN, FINANCE, GROCERY, GOVT, HOTEL, HEALTH, NONPROFIT, PROF_SERVICES, RETAIL, TRAVEL, RESTAURANT}', example='http://a.img'),
  vertical?: string(name='Vertical', description='Sichuan', example='OTHER'),
  websitesShrink?: string(name='Websites', description='The email address.'),
}

model ModifyPhoneBusinessProfileResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The URL of the website.', example='OK'),
  message?: string(name='Message', description='The ID of the request.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The websites.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model ModifyPhoneBusinessProfileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPhoneBusinessProfileResponseBody(name='body'),
}

/**
  * ModifyPhoneBusinessProfile
  *
  * @param tmpReq ModifyPhoneBusinessProfileRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyPhoneBusinessProfileResponse
 */
async function modifyPhoneBusinessProfileWithOptions(tmpReq: ModifyPhoneBusinessProfileRequest, runtime: Util.RuntimeOptions): ModifyPhoneBusinessProfileResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyPhoneBusinessProfileShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.websites)) {
    request.websitesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.websites, 'Websites', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.profilePictureUrl)) {
    query['ProfilePictureUrl'] = request.profilePictureUrl;
  }
  if (!Util.isUnset(request.vertical)) {
    query['Vertical'] = request.vertical;
  }
  if (!Util.isUnset(request.websitesShrink)) {
    query['Websites'] = request.websitesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPhoneBusinessProfile',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ModifyPhoneBusinessProfile
  *
  * @param request ModifyPhoneBusinessProfileRequest
  * @return ModifyPhoneBusinessProfileResponse
 */
async function modifyPhoneBusinessProfile(request: ModifyPhoneBusinessProfileRequest): ModifyPhoneBusinessProfileResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPhoneBusinessProfileWithOptions(request, runtime);
}

model QueryChatappBindWabaRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='aksik93kdkkxmwol93939'),
}

model QueryChatappBindWabaResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    accountReviewStatus?: string(name='AccountReviewStatus', description='The review status of the WhatsApp Business account.', example='APPROVED'),
    currency?: string(name='Currency', description='The currency.', example='USD'),
    id?: string(name='Id', description='The ID of the WhatsApp Business account.', example='20393988393993***'),
    messageTemplateNamespace?: string(name='MessageTemplateNamespace', description='The namespace of the message template.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
    name?: string(name='Name', description='The name of the WhatsApp Business account.', example='Alibaba'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model QueryChatappBindWabaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryChatappBindWabaResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryChatappBindWabaRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryChatappBindWabaResponse
 */
async function queryChatappBindWabaWithOptions(request: QueryChatappBindWabaRequest, runtime: Util.RuntimeOptions): QueryChatappBindWabaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryChatappBindWaba',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryChatappBindWabaRequest
  * @return QueryChatappBindWabaResponse
 */
async function queryChatappBindWaba(request: QueryChatappBindWabaRequest): QueryChatappBindWabaResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryChatappBindWabaWithOptions(request, runtime);
}

model QueryChatappPhoneNumbersRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='aksik93kdkkxmwol93939'),
}

model QueryChatappPhoneNumbersResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The message returned.', example='SUCCESS'),
  phoneNumbers?: [ 
    {
      codeVerificationStatus?: string(name='CodeVerificationStatus', description='The verification status of the phone number.', example='VERIFIED'),
      messagingLimitTier?: string(name='MessagingLimitTier', description='The maximum number of messages that can be sent to users by using the phone number.', example='TIER_10'),
      nameStatus?: string(name='NameStatus', description='The status of the business name.', example='Approval'),
      newNameStatus?: string(name='NewNameStatus', description='The review status of the new business name.', example='Approval'),
      phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800000'),
      qualityRating?: string(name='QualityRating', description='The quality rating of the phone number. Valid values:

*   **GREEN**
*   **YELLOW**
*   **RED**
*   **UNKNOWN**', example='GREEN'),
      status?: string(name='Status', description='The status of the phone number.

*   PENDING
*   DELETED
*   MIGRATED
*   BANNED
*   RESTRICTED
*   RATE_LIMITED
*   FLAGGED
*   CONNECTED
*   DISCONNECTED
*   UNKNOWN
*   UNVERIFIED', example='CONNECTED'),
      statusCallbackUrl?: string(name='StatusCallbackUrl', description='The callback URL to which status reports are sent by using HTTP callbacks.', example='https://ali.com/status'),
      statusQueue?: string(name='StatusQueue', description='The status report notification queue.', example='Alicom-Queue-****-ChatAppStatus'),
      upCallbackUrl?: string(name='UpCallbackUrl', description='The callback URL to which MO messages are sent by using HTTP callbacks.', example='https://ali.com/inbound'),
      upQueue?: string(name='UpQueue', description='The mobile originated (MO) message notification queue.', example='Alicom-Queue-****-ChatAppInbound'),
      verifiedName?: string(name='VerifiedName', description='The name of the company with which the phone number is associated.', example='Alibaba'),
    }
  ](name='PhoneNumbers', description='The list of phone numbers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model QueryChatappPhoneNumbersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryChatappPhoneNumbersResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryChatappPhoneNumbersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryChatappPhoneNumbersResponse
 */
async function queryChatappPhoneNumbersWithOptions(request: QueryChatappPhoneNumbersRequest, runtime: Util.RuntimeOptions): QueryChatappPhoneNumbersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryChatappPhoneNumbers',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryChatappPhoneNumbersRequest
  * @return QueryChatappPhoneNumbersResponse
 */
async function queryChatappPhoneNumbers(request: QueryChatappPhoneNumbersRequest): QueryChatappPhoneNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryChatappPhoneNumbersWithOptions(request, runtime);
}

model QueryPhoneBusinessProfileRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the independent software vendor (ISV) account.', example='2934839388494***'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800001234'),
}

model QueryPhoneBusinessProfileResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    address?: string(name='Address', description='The address.', example='Changsha'),
    description?: string(name='Description', description='The description.', example='Description'),
    email?: string(name='Email', description='The email address.', example='aa@aliyun.com'),
    profilePictureUrl?: string(name='ProfilePictureUrl', description='The URL of the profile picture.', example='https://....img'),
    vertical?: string(name='Vertical', description='The industry.', example='Retail'),
    websites?: [ string ](name='Websites', description='The websites.'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model QueryPhoneBusinessProfileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPhoneBusinessProfileResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryPhoneBusinessProfileRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryPhoneBusinessProfileResponse
 */
async function queryPhoneBusinessProfileWithOptions(request: QueryPhoneBusinessProfileRequest, runtime: Util.RuntimeOptions): QueryPhoneBusinessProfileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPhoneBusinessProfile',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryPhoneBusinessProfileRequest
  * @return QueryPhoneBusinessProfileResponse
 */
async function queryPhoneBusinessProfile(request: QueryPhoneBusinessProfileRequest): QueryPhoneBusinessProfileResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPhoneBusinessProfileWithOptions(request, runtime);
}

model QueryWabaBusinessInfoRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the independent software vendor (ISV) account.', example='293483938849493****'),
  wabaId?: string(name='WabaId', description='The ID of the WABA.', example='293848822333'),
}

model QueryWabaBusinessInfoResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    businessId?: string(name='BusinessId', description='The ID of the business platform.', example='192882828733'),
    businessName?: string(name='BusinessName', description='The name of the business platform.', example='Alibaba'),
    verificationStatus?: string(name='VerificationStatus', description='The verification status.', example='verified'),
    vertical?: string(name='Vertical', description='The industry.', example='Retail'),
  }(name='Data', description='The business information about the WABA.'),
  message?: string(name='Message', description='The error message returned.', example='None.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model QueryWabaBusinessInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryWabaBusinessInfoResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryWabaBusinessInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryWabaBusinessInfoResponse
 */
async function queryWabaBusinessInfoWithOptions(request: QueryWabaBusinessInfoRequest, runtime: Util.RuntimeOptions): QueryWabaBusinessInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.wabaId)) {
    query['WabaId'] = request.wabaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryWabaBusinessInfo',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryWabaBusinessInfoRequest
  * @return QueryWabaBusinessInfoResponse
 */
async function queryWabaBusinessInfo(request: QueryWabaBusinessInfoRequest): QueryWabaBusinessInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryWabaBusinessInfoWithOptions(request, runtime);
}

model SendChatappMassMessageRequest {
  channelType?: string(name='ChannelType', description='The channel type. Valid values: whatsapp, viber, and line.', example='whatsapp'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatsApp Business account under the ISV account.', example='65921621816****', deprecated='true'),
  fallBackContent?: string(name='FallBackContent', description='The fallback content.', example='Fallback message'),
  fallBackDuration?: int32(name='FallBackDuration', description='消息在指定时间内没有返回已到达回执时回落, 不填代表不根据此时间判断回落，只有发送失败和有失败的状态报告时才会回落。时间单位为秒 最小值为60，最大值43200', example='120'),
  fallBackId?: string(name='FallBackId', description='The ID of the fallback strategy.', example='S00001'),
  fallBackRule?: string(name='FallBackRule', example='undelivered'),
  from?: string(name='From', description='The phone number of the message sender.', example='861387777****'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  label?: string(name='Label', description='The message type when the ChannelType parameter is set to viber. Valid values: promotion and transaction.', example='promotion'),
  language?: string(name='Language', description='The language. For more information about language codes, see [Language codes](~~463420~~).', example='en'),
  senderList?: [ 
    {
      flowAction?: {
        flowActionData?: map[string]string(name='FlowActionData'),
        flowToken?: string(name='FlowToken', example='1122***'),
      }(name='FlowAction'),
      payload?: [ string ](name='Payload', description='payload'),
      productAction?: {
        sections?: [ 
          {
            productItems?: [ 
              {
                productRetailerId?: string(name='ProductRetailerId'),
              }
            ](name='ProductItems'),
            title?: string(name='Title'),
          }
        ](name='Sections'),
        thumbnailProductRetailerId?: string(name='ThumbnailProductRetailerId'),
      }(name='ProductAction'),
      templateParams?: map[string]string(name='TemplateParams', description='The parameters of the message template.'),
      to?: string(name='To', description='The phone number that receives the message.', example='861388988****'),
    }
  ](name='SenderList', description='The list of phone numbers that receive the message.'),
  tag?: string(name='Tag', description='The tag information when the ChannelType parameter is set to viber.', example='tag'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='100000001'),
  templateCode?: string(name='TemplateCode', description='The encoding of the message template.', example='744c4b5c79c9432497a075bdfca36bf5'),
  ttl?: long(name='Ttl', description='The timeout period for sending messages when the ChannelType parameter is set to viber. Valid values: 30 to 1209600. Unit: seconds.', example='50'),
}

model SendChatappMassMessageShrinkRequest {
  channelType?: string(name='ChannelType', description='The channel type. Valid values: whatsapp, viber, and line.', example='whatsapp'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatsApp Business account under the ISV account.', example='65921621816****', deprecated='true'),
  fallBackContent?: string(name='FallBackContent', description='The fallback content.', example='Fallback message'),
  fallBackDuration?: int32(name='FallBackDuration', description='消息在指定时间内没有返回已到达回执时回落, 不填代表不根据此时间判断回落，只有发送失败和有失败的状态报告时才会回落。时间单位为秒 最小值为60，最大值43200', example='120'),
  fallBackId?: string(name='FallBackId', description='The ID of the fallback strategy.', example='S00001'),
  fallBackRule?: string(name='FallBackRule', example='undelivered'),
  from?: string(name='From', description='The phone number of the message sender.', example='861387777****'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  label?: string(name='Label', description='The message type when the ChannelType parameter is set to viber. Valid values: promotion and transaction.', example='promotion'),
  language?: string(name='Language', description='The language. For more information about language codes, see [Language codes](~~463420~~).', example='en'),
  senderListShrink?: string(name='SenderList', description='The list of phone numbers that receive the message.'),
  tag?: string(name='Tag', description='The tag information when the ChannelType parameter is set to viber.', example='tag'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='100000001'),
  templateCode?: string(name='TemplateCode', description='The encoding of the message template.', example='744c4b5c79c9432497a075bdfca36bf5'),
  ttl?: long(name='Ttl', description='The timeout period for sending messages when the ChannelType parameter is set to viber. Valid values: 30 to 1209600. Unit: seconds.', example='50'),
}

model SendChatappMassMessageResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  groupMessageId?: string(name='GroupMessageId', description='The ID of the group of messages.', example='890000010002****'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model SendChatappMassMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendChatappMassMessageResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * You can send messages to up to 1,000 phone numbers in a single request.
  *
  * @param tmpReq SendChatappMassMessageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SendChatappMassMessageResponse
 */
async function sendChatappMassMessageWithOptions(tmpReq: SendChatappMassMessageRequest, runtime: Util.RuntimeOptions): SendChatappMassMessageResponse {
  Util.validateModel(tmpReq);
  var request = new SendChatappMassMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.senderList)) {
    request.senderListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.senderList, 'SenderList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.fallBackContent)) {
    body['FallBackContent'] = request.fallBackContent;
  }
  if (!Util.isUnset(request.fallBackDuration)) {
    body['FallBackDuration'] = request.fallBackDuration;
  }
  if (!Util.isUnset(request.fallBackId)) {
    body['FallBackId'] = request.fallBackId;
  }
  if (!Util.isUnset(request.fallBackRule)) {
    body['FallBackRule'] = request.fallBackRule;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.label)) {
    body['Label'] = request.label;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.senderListShrink)) {
    body['SenderList'] = request.senderListShrink;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.ttl)) {
    body['Ttl'] = request.ttl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendChatappMassMessage',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * You can send messages to up to 1,000 phone numbers in a single request.
  *
  * @param request SendChatappMassMessageRequest
  * @return SendChatappMassMessageResponse
 */
async function sendChatappMassMessage(request: SendChatappMassMessageRequest): SendChatappMassMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendChatappMassMessageWithOptions(request, runtime);
}

model SendChatappMessageRequest {
  channelType?: string(name='ChannelType', description='The type of the message channel. Valid values:

*   **whatsapp**
*   **viber**
*   line. The feature that ChatAPP sends messages by using Line is under development.', example='whatsapp'),
  content?: string(name='Content', description='The content of the message.

**Usage notes when you set the ChannelType parameter to whatsapp:**

*   When you set the **MessageType** parameter to **text**, the **text** parameter is required and the **caption** parameter cannot be specified.
*   When you set the **MessageType** parameter to **image**, the **link** parameter is required.
*   When you set the **MessageType** parameter to **video**, the **link** parameter is required.
*   When you set the **MessageType** parameter to **audio**, the **link** parameter is required and the **caption** parameter is invalid.
*   When you set the **MessageType** parameter to **document**, the **link** and **fileName** parameters are required and the **caption** parameter is invalid.
*   When you set the **MessageType** parameter to **interactive**, the **type** and **action** parameters are required.
*   When you set the **MessageType** parameter to **contacts**, the **name** parameter is required.
*   When you set the **MessageType** parameter to **location**, the **longitude** and **latitude** parameters are required.
*   When you set the **MessageType** parameter to **sticker**, the **link** parameter is required, and the **caption** and **fileName** parameters are invalid.
*   When you set the **MessageType** parameter to **reaction**, the **messageId** and **emoji** parameters are required.

**Usage notes when you set the ChannelType parameter to viber:**

*   When you set the **MessageType** parameter to **text**, the **text** parameter is required.
*   When you set the **MessageType** parameter to **image**, the **link** parameter is required.
*   When you set the **MessageType** parameter to **video**, the **link**, **thumbnail**, **fileSize**, and **duration** parameters are required.
*   When you set the **MessageType** parameter to **document**, the **link**, **fileName**, and **fileType** parameters are required.
*   When you set the **MessageType** parameter to **text_button**, the **text**, **caption**, and **action** parameters are required.
*   When you set the **MessageType** parameter to **text_image_button**, the **text**, **link**, **caption**, and **action** parameters are required.
*   When you set the **MessageType** parameter to **text_video**, the **text**, **link**, **thumbnail**, **fileSize**, and **duration** parameters are required.
*   When you set the **MessageType** parameter to **text_video_button**, the **text**, **link**, **thumbnail**, **fileSize**, **duration**, and **caption** parameters are required. The **action** parameter is invalid.', example='{\\"text\\": \\"hello whatsapp\\", \\"link\\": \\"\\", \\"caption\\": \\"\\", \\"fileName\\": \\"\\" }'),
  contextMessageId?: string(name='ContextMessageId', description='The ID of the message to reply to.', example='61851ccb2f1365b16aee****'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  fallBackContent?: string(name='FallBackContent', description='The content of the fallback message.', example='This is a fallback message.'),
  fallBackDuration?: int32(name='FallBackDuration', example='120'),
  fallBackId?: string(name='FallBackId', description='The ID of the fallback strategy. You can create a fallback strategy and view the information in the console.', example='S_000001'),
  fallBackRule?: string(name='FallBackRule', example='undelivered'),
  flowAction?: {
    flowActionData?: map[string]string(name='FlowActionData'),
    flowToken?: string(name='FlowToken', example='1122***'),
  }(name='FlowAction'),
  from?: string(name='From', description='The phone number of the message sender.

> You can specify a mobile phone number that is registered for a WhatsApp account and is approved in the ChatAPP console.', example='1360000****'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  label?: string(name='Label', description='The type of the Viber message. This parameter is required if you set the ChannelType parameter to viber. Valid values: promotion and transaction.', example='promotion'),
  language?: string(name='Language', description='The language that is used in the message template. This parameter is required only if you set the Type parameter to **template**. For more information about language codes, see [Language codes](~~463420~~).', example='en'),
  messageType?: string(name='MessageType', description='The specific type of the message. This parameter is required only if you set the Type parameter to **message**.

**Valid values of MessageType when you set the ChannelType parameter to whatsapp:**

*   **text**: a text message.
*   **image**: an image message.
*   **video**: a video message.
*   **audio**: an audio message.
*   **document**: a document message.
*   **interactive**: an interactive message.
*   **contacts**: a contact message.
*   **location**: a location message.
*   **sticker**: a sticker message.
*   **reaction**: a reaction message.

**Valid values of MessageType when you set the ChannelType parameter to viber:**

*   **text**: a text message.
*   **image**: an image message.
*   **video**: a video message.
*   **document**: a document message.
*   **text_button**: a message that contains the text and button media objects.
*   **text_image_button**: a message that contains multiple media objects, including the text, image, and button.
*   **text_video**: a message that contains the text and video media objects.
*   **text_video_button**: a message that contains multiple media objects, including text, video, and button.
*   **text_image**: a message that contains the text and image media objects.

> For more information, see [Parameters of a message template](~~454530~~).', example='text'),
  payload?: [ string ](name='Payload', description='The payload of the button.', example='payloadtext1,payloadtext2,payloadtext3'),
  productAction?: {
    sections?: [ 
      {
        productItems?: [ 
          {
            productRetailerId?: string(name='ProductRetailerId', description='The retailer ID of the product.', example='9I39E9E'),
          }
        ](name='ProductItems', description='The products.'),
        title?: string(name='Title', description='The name of the category.', example='Test'),
      }
    ](name='Sections', description='The products. Up to 30 products can be added. The products can be divided into up to 10 categories.'),
    thumbnailProductRetailerId?: string(name='ThumbnailProductRetailerId', description='The retailer ID of the product.', example='S238SK'),
  }(name='ProductAction', description='The information about the products included in the WhatsApp catalog message or multi-product message (MPM).'),
  tag?: string(name='Tag', description='The tag information of the Viber message.', example='tag'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='100000001'),
  templateCode?: string(name='TemplateCode', description='The code of the message template. This parameter is required only if you set the Type parameter to **template**.', example='744c4b5c79c9432497a075bdfca3****'),
  templateParams?: map[string]string(name='TemplateParams', description='The variables of the message template.'),
  to?: string(name='To', description='The phone number that receives the message.', example='1390000****'),
  trackingData?: string(name='TrackingData', description='The tracking ID of the Viber message.', example='tracking_id:123456'),
  ttl?: int32(name='Ttl', description='The timeout period for sending the Viber message. Valid values: 30 to 1209600. Unit: seconds.', example='50'),
  type?: string(name='Type', description='The type of the message. Valid values:

*   **template**: a template message. A template message is sent based on a template that is created in the ChatAPP console and is approved. You can send template messages at any time based on your business requirements.
*   **message**: a custom message. You can send a custom message to a user only within 24 hours after you receive the last message from the user.', example='template'),
}

model SendChatappMessageShrinkRequest {
  channelType?: string(name='ChannelType', description='The type of the message channel. Valid values:

*   **whatsapp**
*   **viber**
*   line. The feature that ChatAPP sends messages by using Line is under development.', example='whatsapp'),
  content?: string(name='Content', description='The content of the message.

**Usage notes when you set the ChannelType parameter to whatsapp:**

*   When you set the **MessageType** parameter to **text**, the **text** parameter is required and the **caption** parameter cannot be specified.
*   When you set the **MessageType** parameter to **image**, the **link** parameter is required.
*   When you set the **MessageType** parameter to **video**, the **link** parameter is required.
*   When you set the **MessageType** parameter to **audio**, the **link** parameter is required and the **caption** parameter is invalid.
*   When you set the **MessageType** parameter to **document**, the **link** and **fileName** parameters are required and the **caption** parameter is invalid.
*   When you set the **MessageType** parameter to **interactive**, the **type** and **action** parameters are required.
*   When you set the **MessageType** parameter to **contacts**, the **name** parameter is required.
*   When you set the **MessageType** parameter to **location**, the **longitude** and **latitude** parameters are required.
*   When you set the **MessageType** parameter to **sticker**, the **link** parameter is required, and the **caption** and **fileName** parameters are invalid.
*   When you set the **MessageType** parameter to **reaction**, the **messageId** and **emoji** parameters are required.

**Usage notes when you set the ChannelType parameter to viber:**

*   When you set the **MessageType** parameter to **text**, the **text** parameter is required.
*   When you set the **MessageType** parameter to **image**, the **link** parameter is required.
*   When you set the **MessageType** parameter to **video**, the **link**, **thumbnail**, **fileSize**, and **duration** parameters are required.
*   When you set the **MessageType** parameter to **document**, the **link**, **fileName**, and **fileType** parameters are required.
*   When you set the **MessageType** parameter to **text_button**, the **text**, **caption**, and **action** parameters are required.
*   When you set the **MessageType** parameter to **text_image_button**, the **text**, **link**, **caption**, and **action** parameters are required.
*   When you set the **MessageType** parameter to **text_video**, the **text**, **link**, **thumbnail**, **fileSize**, and **duration** parameters are required.
*   When you set the **MessageType** parameter to **text_video_button**, the **text**, **link**, **thumbnail**, **fileSize**, **duration**, and **caption** parameters are required. The **action** parameter is invalid.', example='{\\"text\\": \\"hello whatsapp\\", \\"link\\": \\"\\", \\"caption\\": \\"\\", \\"fileName\\": \\"\\" }'),
  contextMessageId?: string(name='ContextMessageId', description='The ID of the message to reply to.', example='61851ccb2f1365b16aee****'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  fallBackContent?: string(name='FallBackContent', description='The content of the fallback message.', example='This is a fallback message.'),
  fallBackDuration?: int32(name='FallBackDuration', example='120'),
  fallBackId?: string(name='FallBackId', description='The ID of the fallback strategy. You can create a fallback strategy and view the information in the console.', example='S_000001'),
  fallBackRule?: string(name='FallBackRule', example='undelivered'),
  flowActionShrink?: string(name='FlowAction'),
  from?: string(name='From', description='The phone number of the message sender.

> You can specify a mobile phone number that is registered for a WhatsApp account and is approved in the ChatAPP console.', example='1360000****'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  label?: string(name='Label', description='The type of the Viber message. This parameter is required if you set the ChannelType parameter to viber. Valid values: promotion and transaction.', example='promotion'),
  language?: string(name='Language', description='The language that is used in the message template. This parameter is required only if you set the Type parameter to **template**. For more information about language codes, see [Language codes](~~463420~~).', example='en'),
  messageType?: string(name='MessageType', description='The specific type of the message. This parameter is required only if you set the Type parameter to **message**.

**Valid values of MessageType when you set the ChannelType parameter to whatsapp:**

*   **text**: a text message.
*   **image**: an image message.
*   **video**: a video message.
*   **audio**: an audio message.
*   **document**: a document message.
*   **interactive**: an interactive message.
*   **contacts**: a contact message.
*   **location**: a location message.
*   **sticker**: a sticker message.
*   **reaction**: a reaction message.

**Valid values of MessageType when you set the ChannelType parameter to viber:**

*   **text**: a text message.
*   **image**: an image message.
*   **video**: a video message.
*   **document**: a document message.
*   **text_button**: a message that contains the text and button media objects.
*   **text_image_button**: a message that contains multiple media objects, including the text, image, and button.
*   **text_video**: a message that contains the text and video media objects.
*   **text_video_button**: a message that contains multiple media objects, including text, video, and button.
*   **text_image**: a message that contains the text and image media objects.

> For more information, see [Parameters of a message template](~~454530~~).', example='text'),
  payloadShrink?: string(name='Payload', description='The payload of the button.', example='payloadtext1,payloadtext2,payloadtext3'),
  productActionShrink?: string(name='ProductAction', description='The information about the products included in the WhatsApp catalog message or multi-product message (MPM).'),
  tag?: string(name='Tag', description='The tag information of the Viber message.', example='tag'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='100000001'),
  templateCode?: string(name='TemplateCode', description='The code of the message template. This parameter is required only if you set the Type parameter to **template**.', example='744c4b5c79c9432497a075bdfca3****'),
  templateParamsShrink?: string(name='TemplateParams', description='The variables of the message template.'),
  to?: string(name='To', description='The phone number that receives the message.', example='1390000****'),
  trackingData?: string(name='TrackingData', description='The tracking ID of the Viber message.', example='tracking_id:123456'),
  ttl?: int32(name='Ttl', description='The timeout period for sending the Viber message. Valid values: 30 to 1209600. Unit: seconds.', example='50'),
  type?: string(name='Type', description='The type of the message. Valid values:

*   **template**: a template message. A template message is sent based on a template that is created in the ChatAPP console and is approved. You can send template messages at any time based on your business requirements.
*   **message**: a custom message. You can send a custom message to a user only within 24 hours after you receive the last message from the user.', example='template'),
}

model SendChatappMessageResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  messageId?: string(name='MessageId', description='The ID of the message that was sent.', example='61851ccb2f1365b16aee****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model SendChatappMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendChatappMessageResponseBody(name='body'),
}

/**
  * You can call this operation up to 200 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param tmpReq SendChatappMessageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SendChatappMessageResponse
 */
async function sendChatappMessageWithOptions(tmpReq: SendChatappMessageRequest, runtime: Util.RuntimeOptions): SendChatappMessageResponse {
  Util.validateModel(tmpReq);
  var request = new SendChatappMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.flowAction)) {
    request.flowActionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.flowAction, 'FlowAction', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.productAction)) {
    request.productActionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.productAction, 'ProductAction', 'json');
  }
  if (!Util.isUnset(tmpReq.templateParams)) {
    request.templateParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.templateParams, 'TemplateParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.contextMessageId)) {
    body['ContextMessageId'] = request.contextMessageId;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.fallBackContent)) {
    body['FallBackContent'] = request.fallBackContent;
  }
  if (!Util.isUnset(request.fallBackDuration)) {
    body['FallBackDuration'] = request.fallBackDuration;
  }
  if (!Util.isUnset(request.fallBackId)) {
    body['FallBackId'] = request.fallBackId;
  }
  if (!Util.isUnset(request.fallBackRule)) {
    body['FallBackRule'] = request.fallBackRule;
  }
  if (!Util.isUnset(request.flowActionShrink)) {
    body['FlowAction'] = request.flowActionShrink;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.label)) {
    body['Label'] = request.label;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.messageType)) {
    body['MessageType'] = request.messageType;
  }
  if (!Util.isUnset(request.productActionShrink)) {
    body['ProductAction'] = request.productActionShrink;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateParamsShrink)) {
    body['TemplateParams'] = request.templateParamsShrink;
  }
  if (!Util.isUnset(request.to)) {
    body['To'] = request.to;
  }
  if (!Util.isUnset(request.trackingData)) {
    body['TrackingData'] = request.trackingData;
  }
  if (!Util.isUnset(request.ttl)) {
    body['Ttl'] = request.ttl;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendChatappMessage',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 200 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request SendChatappMessageRequest
  * @return SendChatappMessageResponse
 */
async function sendChatappMessage(request: SendChatappMessageRequest): SendChatappMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendChatappMessageWithOptions(request, runtime);
}

model SubmitIsvCustomerTermsRequest {
  businessDesc?: string(name='BusinessDesc', description='The use scenario.', example='Marketing products'),
  contactMail?: string(name='ContactMail', description='The email address of your business.', example='partner@aliyun.com'),
  countryId?: string(name='CountryId', description='The country code.', example='CN'),
  custName?: string(name='CustName', description='The display name of your business.', example='Aliyun'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  isvTerms?: string(name='IsvTerms', description='The ISV or Client Agreement.

> Before you upload files to Object Storage Service (OSS) servers, you must call the GetChatappUploadAuthorization operation to obtain the authentication information required to upload files. You can use the SDK provided by OSS to upload files. When you upload a file, you must set the key parameter value. To set the value for the key parameter, concatenate the value of the Dir parameter and the file name by using a forward slash (/). You can obtain the value of the Dir parameter by calling the GetChatappUploadAuthorization operation.

> The value of this parameter is the name of the uploaded file.', example='isvTerms.pdf'),
  officeAddress?: string(name='OfficeAddress', description='The address of your business.', example='Hangzhou'),
}

model SubmitIsvCustomerTermsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='OK'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model SubmitIsvCustomerTermsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubmitIsvCustomerTermsResponseBody(name='body'),
}

/**
  * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request SubmitIsvCustomerTermsRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SubmitIsvCustomerTermsResponse
 */
async function submitIsvCustomerTermsWithOptions(request: SubmitIsvCustomerTermsRequest, runtime: Util.RuntimeOptions): SubmitIsvCustomerTermsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessDesc)) {
    query['BusinessDesc'] = request.businessDesc;
  }
  if (!Util.isUnset(request.contactMail)) {
    query['ContactMail'] = request.contactMail;
  }
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.custName)) {
    query['CustName'] = request.custName;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvTerms)) {
    query['IsvTerms'] = request.isvTerms;
  }
  if (!Util.isUnset(request.officeAddress)) {
    query['OfficeAddress'] = request.officeAddress;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitIsvCustomerTerms',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request SubmitIsvCustomerTermsRequest
  * @return SubmitIsvCustomerTermsResponse
 */
async function submitIsvCustomerTerms(request: SubmitIsvCustomerTermsRequest): SubmitIsvCustomerTermsResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitIsvCustomerTermsWithOptions(request, runtime);
}

model UpdateAccountWebhookRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493**'),
  httpFlag?: string(name='HttpFlag', description='Specifies whether to use HTTP callbacks to receive message receipts. Valid values:

*   Y: indicates that HTTP callbacks are used to receive receipts.
*   N: indicates that HTTP callbacks are not used to receive receipts.', example='Y'),
  queueFlag?: string(name='QueueFlag', description='Specifies whether to use Message Service (MNS) queues to receive receipts. Valid values:

*   Y: indicates that MNS queues are used to receive receipts.
*   N: indicates that MNS queues are not used to receive receipts.', example='N'),
  statusCallbackUrl?: string(name='StatusCallbackUrl', description='The callback URL to which status reports are sent by using HTTP callbacks.', example='http://www.aliyun.com'),
}

model UpdateAccountWebhookResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='744c4b5c79c9432497a075bdfca3****'),
}

model UpdateAccountWebhookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAccountWebhookResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request UpdateAccountWebhookRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateAccountWebhookResponse
 */
async function updateAccountWebhookWithOptions(request: UpdateAccountWebhookRequest, runtime: Util.RuntimeOptions): UpdateAccountWebhookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.httpFlag)) {
    query['HttpFlag'] = request.httpFlag;
  }
  if (!Util.isUnset(request.queueFlag)) {
    query['QueueFlag'] = request.queueFlag;
  }
  if (!Util.isUnset(request.statusCallbackUrl)) {
    query['StatusCallbackUrl'] = request.statusCallbackUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAccountWebhook',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request UpdateAccountWebhookRequest
  * @return UpdateAccountWebhookResponse
 */
async function updateAccountWebhook(request: UpdateAccountWebhookRequest): UpdateAccountWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAccountWebhookWithOptions(request, runtime);
}

model UpdateCommerceSettingRequest {
  cartEnable?: boolean(name='CartEnable', example='true'),
  catalogVisible?: boolean(name='CatalogVisible', example='false'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  phoneNumber?: string(name='PhoneNumber', example='手机号码'),
}

model UpdateCommerceSettingResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='None'),
  requestId?: string(name='RequestId', description='Id of the request', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model UpdateCommerceSettingResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateCommerceSettingResponseBody(name='body'),
}

async function updateCommerceSettingWithOptions(request: UpdateCommerceSettingRequest, runtime: Util.RuntimeOptions): UpdateCommerceSettingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cartEnable)) {
    query['CartEnable'] = request.cartEnable;
  }
  if (!Util.isUnset(request.catalogVisible)) {
    query['CatalogVisible'] = request.catalogVisible;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCommerceSetting',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function updateCommerceSetting(request: UpdateCommerceSettingRequest): UpdateCommerceSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCommerceSettingWithOptions(request, runtime);
}

model UpdatePhoneWebhookRequest {
  custSpaceId?: string(name='CustSpaceId', example='293483938849493****'),
  httpFlag?: string(name='HttpFlag', example='Y'),
  phoneNumber?: string(name='PhoneNumber', example='8613800001234'),
  queueFlag?: string(name='QueueFlag', example='N'),
  statusCallbackUrl?: string(name='StatusCallbackUrl', example='http://www.aliyun.com'),
  upCallbackUrl?: string(name='UpCallbackUrl', example='http://aliyun.com'),
}

model UpdatePhoneWebhookResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='null'),
  requestId?: string(name='RequestId', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model UpdatePhoneWebhookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePhoneWebhookResponseBody(name='body'),
}

/**
  * The error message returned.
  *
  * @param request UpdatePhoneWebhookRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdatePhoneWebhookResponse
 */
async function updatePhoneWebhookWithOptions(request: UpdatePhoneWebhookRequest, runtime: Util.RuntimeOptions): UpdatePhoneWebhookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.httpFlag)) {
    query['HttpFlag'] = request.httpFlag;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.queueFlag)) {
    query['QueueFlag'] = request.queueFlag;
  }
  if (!Util.isUnset(request.statusCallbackUrl)) {
    query['StatusCallbackUrl'] = request.statusCallbackUrl;
  }
  if (!Util.isUnset(request.upCallbackUrl)) {
    query['UpCallbackUrl'] = request.upCallbackUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePhoneWebhook',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The error message returned.
  *
  * @param request UpdatePhoneWebhookRequest
  * @return UpdatePhoneWebhookResponse
 */
async function updatePhoneWebhook(request: UpdatePhoneWebhookRequest): UpdatePhoneWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePhoneWebhookWithOptions(request, runtime);
}

