/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('cams', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CheckChatappContactsRequest {
  channelType?: string(name='ChannelType', description='通道类型'),
  contacts?: string(name='Contacts', description='需要查询的用户列表，JSON格式，单次调用最多查询10个。注意：用户号码必须加国家码'),
  from?: string(name='From', description='发送号码'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CheckChatappContactsResponseBody = {
  code?: string(name='Code', description='返回结果 OK 为正常'),
  data?: [ 
    {
      phoneNumber?: string(name='PhoneNumber', description='号码'),
      status?: string(name='Status', description='状态
有效账号为"valid"，无法账号为"invalid"，查询失败返回"failed"'),
    }
  ](name='Data'),
  message?: string(name='Message', description='提示信息，当返回异常时有值'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model CheckChatappContactsResponse = {
  headers: map[string]string(name='headers'),
  body: CheckChatappContactsResponseBody(name='body'),
}

async function checkChatappContactsWithOptions(request: CheckChatappContactsRequest, runtime: Util.RuntimeOptions): CheckChatappContactsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.contacts)) {
    query['Contacts'] = request.contacts;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CheckChatappContacts',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkChatappContacts(request: CheckChatappContactsRequest): CheckChatappContactsResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkChatappContactsWithOptions(request, runtime);
}

model CheckContactsRequest {
  channelType?: string(name='ChannelType'),
  contacts?: string(name='Contacts'),
  from?: string(name='From'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CheckContactsResponseBody = {
  contacts?: [ 
    {
      phoneNumber?: string(name='PhoneNumber'),
      status?: string(name='Status'),
    }
  ](name='Contacts'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model CheckContactsResponse = {
  headers: map[string]string(name='headers'),
  body: CheckContactsResponseBody(name='body'),
}

async function checkContactsWithOptions(request: CheckContactsRequest, runtime: Util.RuntimeOptions): CheckContactsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.contacts)) {
    body['Contacts'] = request.contacts;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CheckContacts',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkContacts(request: CheckContactsRequest): CheckContactsResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkContactsWithOptions(request, runtime);
}

model CreateChatappTemplateRequest {
  category?: string(name='Category', description='模板分类'),
  components?: string(name='Components', description='消息模板组件
值需要通过把json结构转成String的方式传入'),
  example?: string(name='Example', description='变量例子
值需要通过把json结构转成String的方式传入'),
  language?: string(name='Language', description='语言'),
  name?: string(name='Name', description='模板名称'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateType?: string(name='TemplateType', description='模板类型'),
}

model CreateChatappTemplateResponseBody = {
  code?: string(name='Code', description='返回结果 OK 为正常'),
  data?: string(name='Data', description='返回数据结点
{"templateCode": "744c4b5c79c9432497a075bdfca36bf5"，"templateName": "hello_whatsapp"}'),
  message?: string(name='Message', description='提示信息，当返回异常时有值'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model CreateChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateChatappTemplateResponseBody(name='body'),
}

async function createChatappTemplateWithOptions(request: CreateChatappTemplateRequest, runtime: Util.RuntimeOptions): CreateChatappTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.components)) {
    query['Components'] = request.components;
  }
  if (!Util.isUnset(request.example)) {
    query['Example'] = request.example;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createChatappTemplate(request: CreateChatappTemplateRequest): CreateChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChatappTemplateWithOptions(request, runtime);
}

model DeleteChatappTemplateRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode', description='模板编码'),
}

model DeleteChatappTemplateResponseBody = {
  code?: string(name='Code', description='返回结果 OK 为正常'),
  message?: string(name='Message', description='提示信息，当返回异常时有值'),
  requestId?: string(name='RequestId', description='请求ID'),
}

model DeleteChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteChatappTemplateResponseBody(name='body'),
}

async function deleteChatappTemplateWithOptions(request: DeleteChatappTemplateRequest, runtime: Util.RuntimeOptions): DeleteChatappTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteChatappTemplate(request: DeleteChatappTemplateRequest): DeleteChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChatappTemplateWithOptions(request, runtime);
}

model GetChatappTemplateDetailRequest {
  language?: string(name='Language', description='语言'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode', description='模板分类'),
}

model GetChatappTemplateDetailResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data', description='返回数据对像'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model GetChatappTemplateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetChatappTemplateDetailResponseBody(name='body'),
}

async function getChatappTemplateDetailWithOptions(request: GetChatappTemplateDetailRequest, runtime: Util.RuntimeOptions): GetChatappTemplateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappTemplateDetail',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getChatappTemplateDetail(request: GetChatappTemplateDetailRequest): GetChatappTemplateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappTemplateDetailWithOptions(request, runtime);
}

model ListChatappTemplateRequest {
  auditStatus?: string(name='AuditStatus', description='审核状态'),
  language?: string(name='Language', description='语言'),
  name?: string(name='Name', description='模板名称'),
  ownerId?: long(name='OwnerId'),
  page?: string(name='Page', description='分页字段'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListChatappTemplateResponseBody = {
  code?: string(name='Code'),
  listTemplate?: [ 
    {
      auditStatus?: string(name='AuditStatus', description='审核状态'),
      category?: string(name='Category', description='模板分类'),
      language?: string(name='Language', description='语言'),
      templateCode?: string(name='TemplateCode', description='模板编码'),
      templateName?: string(name='TemplateName', description='模板名称'),
    }
  ](name='ListTemplate', description='模板列表'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model ListChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ListChatappTemplateResponseBody(name='body'),
}

async function listChatappTemplateWithOptions(request: ListChatappTemplateRequest, runtime: Util.RuntimeOptions): ListChatappTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.auditStatus)) {
    query['AuditStatus'] = request.auditStatus;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.page)) {
    query['Page'] = request.page;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listChatappTemplate(request: ListChatappTemplateRequest): ListChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listChatappTemplateWithOptions(request, runtime);
}

model SendChatappMessageRequest {
  channelType?: string(name='ChannelType', description='通道类型 whatsapp/viber/line'),
  content?: string(name='Content', description='消息内容'),
  from?: string(name='From', description='发送方'),
  language?: string(name='Language', description='语言'),
  messageType?: string(name='MessageType', description='消息类型'),
  ownerId?: long(name='OwnerId'),
  payload?: string(name='Payload', description='当发送模板消息时，模板中包含按钮类型是QUICK_REPLY时有效，在快速回复的时候会再上行'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode', description='模板编码'),
  templateParams?: string(name='TemplateParams', description='模板参数'),
  to?: string(name='To', description='接收号码'),
  type?: string(name='Type', description='消息大类
template--模板
message--非模板'),
}

model SendChatappMessageResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
}

model SendChatappMessageResponse = {
  headers: map[string]string(name='headers'),
  body: SendChatappMessageResponseBody(name='body'),
}

async function sendChatappMessageWithOptions(request: SendChatappMessageRequest, runtime: Util.RuntimeOptions): SendChatappMessageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.messageType)) {
    query['MessageType'] = request.messageType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payload)) {
    query['Payload'] = request.payload;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateParams)) {
    query['TemplateParams'] = request.templateParams;
  }
  if (!Util.isUnset(request.to)) {
    query['To'] = request.to;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SendChatappMessage',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendChatappMessage(request: SendChatappMessageRequest): SendChatappMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendChatappMessageWithOptions(request, runtime);
}

model SendMessageRequest {
  caption?: string(name='Caption'),
  channelType?: string(name='ChannelType'),
  fileName?: string(name='FileName'),
  from?: string(name='From'),
  link?: string(name='Link'),
  messageType?: string(name='MessageType'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateBodyParams?: string(name='TemplateBodyParams'),
  templateButtonParams?: string(name='TemplateButtonParams'),
  templateCode?: string(name='TemplateCode'),
  templateHeaderParams?: string(name='TemplateHeaderParams'),
  text?: string(name='Text'),
  to?: string(name='To'),
  type?: string(name='Type'),
}

model SendMessageResponseBody = {
  module?: {
    fromId?: string(name='FromId'),
    messageId?: string(name='MessageId'),
    toId?: string(name='ToId'),
  }(name='Module'),
  requestId?: string(name='RequestId'),
  resultCode?: string(name='ResultCode'),
  resultMessage?: string(name='ResultMessage'),
}

model SendMessageResponse = {
  headers: map[string]string(name='headers'),
  body: SendMessageResponseBody(name='body'),
}

async function sendMessageWithOptions(request: SendMessageRequest, runtime: Util.RuntimeOptions): SendMessageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var body : map[string]any= {};
  if (!Util.isUnset(request.caption)) {
    body['Caption'] = request.caption;
  }
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.fileName)) {
    body['FileName'] = request.fileName;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.link)) {
    body['Link'] = request.link;
  }
  if (!Util.isUnset(request.messageType)) {
    body['MessageType'] = request.messageType;
  }
  if (!Util.isUnset(request.templateBodyParams)) {
    body['TemplateBodyParams'] = request.templateBodyParams;
  }
  if (!Util.isUnset(request.templateButtonParams)) {
    body['TemplateButtonParams'] = request.templateButtonParams;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateHeaderParams)) {
    body['TemplateHeaderParams'] = request.templateHeaderParams;
  }
  if (!Util.isUnset(request.text)) {
    body['Text'] = request.text;
  }
  if (!Util.isUnset(request.to)) {
    body['To'] = request.to;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendMessage',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendMessageWithOptions(request, runtime);
}

