/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('cams', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddChatGroupRequest {
  businessNumber?: string(name='BusinessNumber', description='This parameter is required.', example='8613800***'),
  channelType?: string(name='ChannelType', example='WHATSAPP'),
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='cams-***'),
  description?: string(name='Description', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  subject?: string(name='Subject', description='This parameter is required.', example='示例值示例值'),
}

model AddChatGroupResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='None'),
  requestId?: string(name='RequestId', example='399s88-***'),
  success?: boolean(name='Success', example='false'),
  uniqueCode?: string(name='UniqueCode', example='8938****'),
}

model AddChatGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddChatGroupResponseBody(name='body'),
}

/**
 * @summary AddChatGroup
 *
 * @param request AddChatGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddChatGroupResponse
 */
async function addChatGroupWithOptions(request: AddChatGroupRequest, runtime: Util.RuntimeOptions): AddChatGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessNumber)) {
    query['BusinessNumber'] = request.businessNumber;
  }
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.subject)) {
    query['Subject'] = request.subject;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddChatGroup',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary AddChatGroup
 *
 * @param request AddChatGroupRequest
 * @return AddChatGroupResponse
 */
async function addChatGroup(request: AddChatGroupRequest): AddChatGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return addChatGroupWithOptions(request, runtime);
}

model AddChatGroupInviteLinkRequest {
  businessNumber?: string(name='BusinessNumber', description='This parameter is required.', example='8613800***'),
  channelType?: string(name='ChannelType', example='WHATSAPP'),
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='cams-x***'),
  groupId?: string(name='GroupId', description='This parameter is required.', example='E93kdk****'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model AddChatGroupInviteLinkResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  inviteLink?: string(name='InviteLink', example='https://chat.whatsapp.com/****'),
  message?: string(name='Message', example='None'),
  requestId?: string(name='RequestId', example='3EIK939***'),
  success?: boolean(name='Success', example='false'),
}

model AddChatGroupInviteLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddChatGroupInviteLinkResponseBody(name='body'),
}

/**
 * @summary AddChatGroupInviteLink
 *
 * @param request AddChatGroupInviteLinkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddChatGroupInviteLinkResponse
 */
async function addChatGroupInviteLinkWithOptions(request: AddChatGroupInviteLinkRequest, runtime: Util.RuntimeOptions): AddChatGroupInviteLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessNumber)) {
    query['BusinessNumber'] = request.businessNumber;
  }
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddChatGroupInviteLink',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary AddChatGroupInviteLink
 *
 * @param request AddChatGroupInviteLinkRequest
 * @return AddChatGroupInviteLinkResponse
 */
async function addChatGroupInviteLink(request: AddChatGroupInviteLinkRequest): AddChatGroupInviteLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return addChatGroupInviteLinkWithOptions(request, runtime);
}

model AddChatappPhoneNumberRequest {
  cc?: string(name='Cc', description='You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.

This parameter is required.', example='86'),
  custSpaceId?: string(name='CustSpaceId', description='Adds a phone number for a WhatsApp Business account (WABA).

This parameter is required.', example='93928389****'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='AddChatappPhoneNumber

This parameter is required.', example='1380000****'),
  preValidateId?: string(name='PreValidateId', description='cams:ChatappPhoneNumberRegister', example='1020****', deprecated=true),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  verifiedName?: string(name='VerifiedName', description='Private

This parameter is required.', example='Alibaba'),
}

model AddChatappPhoneNumberResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='com.alicom.access.oxs.client.channel.aliyun.flow.AyFlowExecuteService', example='http://pop_access_slb_sgvpc/#vpc'),
  code?: string(name='Code', description='The phone number.', example='OK'),
  message?: string(name='Message', description='com.alicom.access.oxs.client.channel.aliyun.flow.dto.AyCommonApiRequest', example='None'),
  requestId?: string(name='RequestId', description='formData', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='13800000000', example='false'),
}

model AddChatappPhoneNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddChatappPhoneNumberResponseBody(name='body'),
}

/**
 * @summary Adds a phone number for a WhatsApp Business account (WABA).
 *
 * @param request AddChatappPhoneNumberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return AddChatappPhoneNumberResponse
 */
async function addChatappPhoneNumberWithOptions(request: AddChatappPhoneNumberRequest, runtime: Util.RuntimeOptions): AddChatappPhoneNumberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cc)) {
    query['Cc'] = request.cc;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.preValidateId)) {
    query['PreValidateId'] = request.preValidateId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.verifiedName)) {
    query['VerifiedName'] = request.verifiedName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddChatappPhoneNumber',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Adds a phone number for a WhatsApp Business account (WABA).
 *
 * @param request AddChatappPhoneNumberRequest
 * @return AddChatappPhoneNumberResponse
 */
async function addChatappPhoneNumber(request: AddChatappPhoneNumberRequest): AddChatappPhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return addChatappPhoneNumberWithOptions(request, runtime);
}

model ChatappBindWabaRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  wabaId?: string(name='WabaId', description='This parameter is required.', example='33993***'),
}

model ChatappBindWabaResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.', example='C02029392939939'),
    wabaId?: string(name='WabaId', description='The ID of the WhatsApp Business Account (WABA).', example='2939828282'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ChatappBindWabaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappBindWabaResponseBody(name='body'),
}

/**
 * @summary Binds the WhatsApp Business account with ChatApp.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ChatappBindWabaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChatappBindWabaResponse
 */
async function chatappBindWabaWithOptions(request: ChatappBindWabaRequest, runtime: Util.RuntimeOptions): ChatappBindWabaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.wabaId)) {
    query['WabaId'] = request.wabaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChatappBindWaba',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Binds the WhatsApp Business account with ChatApp.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ChatappBindWabaRequest
 * @return ChatappBindWabaResponse
 */
async function chatappBindWaba(request: ChatappBindWabaRequest): ChatappBindWabaResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappBindWabaWithOptions(request, runtime);
}

model ChatappEmbedSignUpRequest {
  inputToken?: string(name='InputToken', description='This parameter is required.', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ChatappEmbedSignUpResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  wabas?: [ 
    {
      accountReviewStatus?: string(name='AccountReviewStatus', description='The review state of the WABA.', example='VERIFIED'),
      currency?: string(name='Currency', description='The currency.', example='USD'),
      id?: string(name='Id', description='The ID of the WABA.', example='2939933992*****'),
      messageTemplateNamespace?: string(name='MessageTemplateNamespace', description='The namespace of the message template.', example='alals-lsslls-slslsos-slsl'),
      name?: string(name='Name', description='The name of the WABA.', example='Alibaba'),
    }
  ](name='Wabas', description='The list of the WhatsApp Business accounts.'),
}

model ChatappEmbedSignUpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappEmbedSignUpResponseBody(name='body'),
}

/**
 * @summary Queries WhatsApp Business account (WABA) information after embedded signup. You do not need to call this API operation if you use Version 2 of WhatsApp embedded signup.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ChatappEmbedSignUpRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChatappEmbedSignUpResponse
 */
async function chatappEmbedSignUpWithOptions(request: ChatappEmbedSignUpRequest, runtime: Util.RuntimeOptions): ChatappEmbedSignUpResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.inputToken)) {
    query['InputToken'] = request.inputToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChatappEmbedSignUp',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries WhatsApp Business account (WABA) information after embedded signup. You do not need to call this API operation if you use Version 2 of WhatsApp embedded signup.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ChatappEmbedSignUpRequest
 * @return ChatappEmbedSignUpResponse
 */
async function chatappEmbedSignUp(request: ChatappEmbedSignUpRequest): ChatappEmbedSignUpResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappEmbedSignUpWithOptions(request, runtime);
}

model ChatappMigrationRegisterRequest {
  custSpaceId?: string(name='CustSpaceId', description='None

This parameter is required.', example='29348393884****'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='phone number.

This parameter is required.', example='8613800****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ChatappMigrationRegisterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappMigrationRegisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappMigrationRegisterResponseBody(name='body'),
}

/**
 * @summary Registers a phone number for migration.
 *
 * @description The space ID of the RAM user within the independent software vendor (ISV) account.
 *
 * @param request ChatappMigrationRegisterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChatappMigrationRegisterResponse
 */
async function chatappMigrationRegisterWithOptions(request: ChatappMigrationRegisterRequest, runtime: Util.RuntimeOptions): ChatappMigrationRegisterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChatappMigrationRegister',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Registers a phone number for migration.
 *
 * @description The space ID of the RAM user within the independent software vendor (ISV) account.
 *
 * @param request ChatappMigrationRegisterRequest
 * @return ChatappMigrationRegisterResponse
 */
async function chatappMigrationRegister(request: ChatappMigrationRegisterRequest): ChatappMigrationRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappMigrationRegisterWithOptions(request, runtime);
}

model ChatappMigrationVerifiedRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.

This parameter is required.', example='861380001234'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  verifyCode?: string(name='VerifyCode', description='The verification code.

This parameter is required.', example='828798'),
}

model ChatappMigrationVerifiedResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    id?: string(name='Id', description='The ID of the phone number.', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800001234'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappMigrationVerifiedResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappMigrationVerifiedResponseBody(name='body'),
}

/**
 * @summary Verifies a specified phone number for migration.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ChatappMigrationVerifiedRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChatappMigrationVerifiedResponse
 */
async function chatappMigrationVerifiedWithOptions(request: ChatappMigrationVerifiedRequest, runtime: Util.RuntimeOptions): ChatappMigrationVerifiedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.verifyCode)) {
    query['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChatappMigrationVerified',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Verifies a specified phone number for migration.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ChatappMigrationVerifiedRequest
 * @return ChatappMigrationVerifiedResponse
 */
async function chatappMigrationVerified(request: ChatappMigrationVerifiedRequest): ChatappMigrationVerifiedResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappMigrationVerifiedWithOptions(request, runtime);
}

model ChatappPhoneNumberDeregisterRequest {
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='示例值示例值示例值'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='This parameter is required.', example='示例值示例值'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ChatappPhoneNumberDeregisterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model ChatappPhoneNumberDeregisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappPhoneNumberDeregisterResponseBody(name='body'),
}

/**
 * @summary Deregisters a phone number from a WhatsApp Business account (WABA).
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ChatappPhoneNumberDeregisterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChatappPhoneNumberDeregisterResponse
 */
async function chatappPhoneNumberDeregisterWithOptions(request: ChatappPhoneNumberDeregisterRequest, runtime: Util.RuntimeOptions): ChatappPhoneNumberDeregisterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChatappPhoneNumberDeregister',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deregisters a phone number from a WhatsApp Business account (WABA).
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ChatappPhoneNumberDeregisterRequest
 * @return ChatappPhoneNumberDeregisterResponse
 */
async function chatappPhoneNumberDeregister(request: ChatappPhoneNumberDeregisterRequest): ChatappPhoneNumberDeregisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappPhoneNumberDeregisterWithOptions(request, runtime);
}

model ChatappPhoneNumberRegisterRequest {
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='939283893939'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='This parameter is required.', example='8613800000000'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ChatappPhoneNumberRegisterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ChatappPhoneNumberRegisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappPhoneNumberRegisterResponseBody(name='body'),
}

/**
 * @summary Registers a phone number.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ChatappPhoneNumberRegisterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChatappPhoneNumberRegisterResponse
 */
async function chatappPhoneNumberRegisterWithOptions(request: ChatappPhoneNumberRegisterRequest, runtime: Util.RuntimeOptions): ChatappPhoneNumberRegisterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChatappPhoneNumberRegister',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Registers a phone number.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ChatappPhoneNumberRegisterRequest
 * @return ChatappPhoneNumberRegisterResponse
 */
async function chatappPhoneNumberRegister(request: ChatappPhoneNumberRegisterRequest): ChatappPhoneNumberRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappPhoneNumberRegisterWithOptions(request, runtime);
}

model ChatappSyncPhoneNumberRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493****'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ChatappSyncPhoneNumberResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None.'),
  phoneNumbers?: [ 
    {
      codeVerificationStatus?: string(name='CodeVerificationStatus', description='The verification state of the phone number.

Valid values:

*   REVOKED: The review application is revoked.
*   MORE_INFORMATION_REQUESTED: More information needs to be provided.
*   VERIFIED: The phone number passes the verification.
*   REJECTED: The phone number fails to pass the verification.', example='VERIFIED'),
      isOfficial?: string(name='IsOfficial', description='Indicates whether it is a WhatsApp Official Business Account (OBA).', example='N'),
      messagingLimitTier?: string(name='MessagingLimitTier', description='The number of phone numbers to which messages can be sent in a day.', example='TIER_10'),
      nameStatus?: string(name='NameStatus', description='The review status of the business display name.', example='Approval'),
      newNameStatus?: string(name='NewNameStatus', description='The review status of the new business display name.', example='Approval'),
      phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800001234'),
      qualityRating?: string(name='QualityRating', description='The quality rating of the phone number.

Valid values:

*   RED
*   YELLOW
*   GREEN', example='GREEN'),
      status?: string(name='Status', description='The state of the phone number.

Valid values:

*   MIGRATED
*   FLAGGED
*   DISCONNECTED
*   UNVERIFIED
*   BANNED
*   RATE_LIMITED
*   PENDING
*   CONNECTED
*   UNKNOWN
*   DELETED
*   RESTRICTED', example='PENDING'),
      statusCallbackUrl?: string(name='StatusCallbackUrl', description='The callback URL to which status reports are sent by using HTTP callbacks.', example='https://www.alibaba.com/status'),
      statusQueue?: string(name='StatusQueue', description='The status report queue.', example='alicom-09399200-queue'),
      upCallbackUrl?: string(name='UpCallbackUrl', description='The URL that receives the MO messages.', example='https://www.alibaba.com/inbound'),
      upQueue?: string(name='UpQueue', description='The mobile originated (MO) message queue.', example='alicom-09399200-queue'),
      verifiedName?: string(name='VerifiedName', description='The display name of the business to which the phone number belongs.', example='Alibaba'),
    }
  ](name='PhoneNumbers', description='The phone numbers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ChatappSyncPhoneNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappSyncPhoneNumberResponseBody(name='body'),
}

/**
 * @summary Synchronizes phone numbers.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ChatappSyncPhoneNumberRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChatappSyncPhoneNumberResponse
 */
async function chatappSyncPhoneNumberWithOptions(request: ChatappSyncPhoneNumberRequest, runtime: Util.RuntimeOptions): ChatappSyncPhoneNumberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChatappSyncPhoneNumber',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Synchronizes phone numbers.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ChatappSyncPhoneNumberRequest
 * @return ChatappSyncPhoneNumberResponse
 */
async function chatappSyncPhoneNumber(request: ChatappSyncPhoneNumberRequest): ChatappSyncPhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappSyncPhoneNumberWithOptions(request, runtime);
}

model ChatappVerifyAndRegisterRequest {
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='29389299388383'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='This parameter is required.', example='86138000000'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  verifyCode?: string(name='VerifyCode', description='This parameter is required.', example='123466'),
}

model ChatappVerifyAndRegisterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ChatappVerifyAndRegisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappVerifyAndRegisterResponseBody(name='body'),
}

/**
 * @summary Associates a phone number with a WhatsApp Business account (WABA).
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ChatappVerifyAndRegisterRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ChatappVerifyAndRegisterResponse
 */
async function chatappVerifyAndRegisterWithOptions(request: ChatappVerifyAndRegisterRequest, runtime: Util.RuntimeOptions): ChatappVerifyAndRegisterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.verifyCode)) {
    query['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChatappVerifyAndRegister',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Associates a phone number with a WhatsApp Business account (WABA).
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ChatappVerifyAndRegisterRequest
 * @return ChatappVerifyAndRegisterResponse
 */
async function chatappVerifyAndRegister(request: ChatappVerifyAndRegisterRequest): ChatappVerifyAndRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappVerifyAndRegisterWithOptions(request, runtime);
}

model CreateChatFlowRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowTriggerType?: string(name='FlowTriggerType', description='Flow trigger type', example='TriggeredByWhatsApp'),
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark', description='Flow remarks', example='ChatFlow for WhatsApp Customer Service Auto-Reply.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  title?: string(name='Title', description='Flow title', example='Auto Reply'),
}

model CreateChatFlowShrinkRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtendShrink?: string(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowTriggerType?: string(name='FlowTriggerType', description='Flow trigger type', example='TriggeredByWhatsApp'),
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark', description='Flow remarks', example='ChatFlow for WhatsApp Customer Service Auto-Reply.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  title?: string(name='Title', description='Flow title', example='Auto Reply'),
}

model CreateChatFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details, this field is returned only when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Error code', example='示例值'),
  data?: map[string]any(name='Data', description='Returned data object.'),
  message?: string(name='Message', description='Error message.', example='示例值示例值'),
  requestId?: string(name='RequestId', description='Unique request ID.', example='示例值'),
  response?: map[string]any(name='Response', description='Response data'),
  success?: boolean(name='Success', description='Whether the call was successful.', example='true'),
}

model CreateChatFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChatFlowResponseBody(name='body'),
}

/**
 * @summary Create Chatflow
 *
 * @param tmpReq CreateChatFlowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateChatFlowResponse
 */
async function createChatFlowWithOptions(tmpReq: CreateChatFlowRequest, runtime: Util.RuntimeOptions): CreateChatFlowResponse {
  Util.validateModel(tmpReq);
  var request = new CreateChatFlowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bizExtend)) {
    request.bizExtendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizExtend, 'BizExtend', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.bizExtendShrink)) {
    query['BizExtend'] = request.bizExtendShrink;
  }
  if (!Util.isUnset(request.flowTriggerType)) {
    query['FlowTriggerType'] = request.flowTriggerType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateChatFlow',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create Chatflow
 *
 * @param request CreateChatFlowRequest
 * @return CreateChatFlowResponse
 */
async function createChatFlow(request: CreateChatFlowRequest): CreateChatFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChatFlowWithOptions(request, runtime);
}

model CreateChatFlowByImportRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='示例值示例值'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowViewModel?: string(name='FlowViewModel', description='Imported flow DSL data', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark', description='Flow remarks', example='示例值示例值'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  title?: string(name='Title', description='Flow title', example='示例值示例值示例值'),
}

model CreateChatFlowByImportShrinkRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='示例值示例值'),
  bizExtendShrink?: string(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowViewModel?: string(name='FlowViewModel', description='Imported flow DSL data', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark', description='Flow remarks', example='示例值示例值'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  title?: string(name='Title', description='Flow title', example='示例值示例值示例值'),
}

model CreateChatFlowByImportResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details.', example='无'),
  code?: string(name='Code', description='Request status code.', example='示例值示例值'),
  data?: map[string]any(name='Data', description='Returned data object.', example='无'),
  message?: string(name='Message', description='Error message.', example='示例值示例值'),
  requestId?: string(name='RequestId', description='Request ID', example='示例值示例值'),
  success?: boolean(name='Success', description='Whether the request was successful', example='false'),
}

model CreateChatFlowByImportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChatFlowByImportResponseBody(name='body'),
}

/**
 * @summary Import and create flow
 *
 * @param tmpReq CreateChatFlowByImportRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateChatFlowByImportResponse
 */
async function createChatFlowByImportWithOptions(tmpReq: CreateChatFlowByImportRequest, runtime: Util.RuntimeOptions): CreateChatFlowByImportResponse {
  Util.validateModel(tmpReq);
  var request = new CreateChatFlowByImportShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bizExtend)) {
    request.bizExtendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizExtend, 'BizExtend', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.bizExtendShrink)) {
    query['BizExtend'] = request.bizExtendShrink;
  }
  if (!Util.isUnset(request.flowViewModel)) {
    query['FlowViewModel'] = request.flowViewModel;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateChatFlowByImport',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Import and create flow
 *
 * @param request CreateChatFlowByImportRequest
 * @return CreateChatFlowByImportResponse
 */
async function createChatFlowByImport(request: CreateChatFlowByImportRequest): CreateChatFlowByImportResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChatFlowByImportWithOptions(request, runtime);
}

model CreateChatFlowLogSettingRequest {
  flowCode?: string(name='FlowCode', description='Process code.', example='示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateChatFlowLogSettingResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details.', example='无'),
  code?: string(name='Code', description='Status code.', example='示例值示例值示例值'),
  data?: map[string]any(name='Data', description='Returned data.', example='无'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true for success, false for failure.', example='true'),
}

model CreateChatFlowLogSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChatFlowLogSettingResponseBody(name='body'),
}

/**
 * @summary Create chatFlow log setting
 *
 * @param request CreateChatFlowLogSettingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateChatFlowLogSettingResponse
 */
async function createChatFlowLogSettingWithOptions(request: CreateChatFlowLogSettingRequest, runtime: Util.RuntimeOptions): CreateChatFlowLogSettingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateChatFlowLogSetting',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Create chatFlow log setting
 *
 * @param request CreateChatFlowLogSettingRequest
 * @return CreateChatFlowLogSettingResponse
 */
async function createChatFlowLogSetting(request: CreateChatFlowLogSettingRequest): CreateChatFlowLogSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChatFlowLogSettingWithOptions(request, runtime);
}

model CreateChatappMigrationInitiateRequest {
  countryCode?: string(name='CountryCode', description='The code of the country or region.

This parameter is required.', example='86'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.

This parameter is required.', example='293483938849493****'),
  mobileNumber?: string(name='MobileNumber', description='The mobile number without the country code or region code.

This parameter is required.', example='13900001234'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateChatappMigrationInitiateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The information about the request denial..', example='None'),
  code?: string(name='Code', description='The response code.

*   A value of OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    id?: string(name='Id', description='The ID of the mobile number.', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', description='The mobile number.', example='8613900001234'),
    status?: string(name='Status', description='The state of the mobile number. Only MIGRATING may be returned, which indicates that the mobile number is being migrated.', example='MIGRATING'),
  }(name='Data', description='The response data.'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model CreateChatappMigrationInitiateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChatappMigrationInitiateResponseBody(name='body'),
}

/**
 * @summary The ID of the number.
 *
 * @description The status of the phone number.
 *
 * @param request CreateChatappMigrationInitiateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateChatappMigrationInitiateResponse
 */
async function createChatappMigrationInitiateWithOptions(request: CreateChatappMigrationInitiateRequest, runtime: Util.RuntimeOptions): CreateChatappMigrationInitiateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.countryCode)) {
    query['CountryCode'] = request.countryCode;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.mobileNumber)) {
    query['MobileNumber'] = request.mobileNumber;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateChatappMigrationInitiate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary The ID of the number.
 *
 * @description The status of the phone number.
 *
 * @param request CreateChatappMigrationInitiateRequest
 * @return CreateChatappMigrationInitiateResponse
 */
async function createChatappMigrationInitiate(request: CreateChatappMigrationInitiateRequest): CreateChatappMigrationInitiateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChatappMigrationInitiateWithOptions(request, runtime);
}

model CreateChatappTemplateRequest {
  allowCategoryChange?: boolean(name='AllowCategoryChange', description='Specifies whether to allow Facebook to automatically change the directory of the template. If you set this parameter to true, the review success rate of the template is improved. This parameter is valid only when TemplateType is set to WHATSAPP.', example='true', deprecated=true),
  category?: string(name='Category', description='The category of the template if TemplateType is set to WHATSAPP. Valid values:

*   **UTILITY**: the transaction template
*   **MARKETING**: the marketing template
*   **AUTHENTICATION**: the authentication template

The category of the template if TemplateType is set to VIBER. Valid values:

*   **text**: the template that contains only text
*   **image**: the template that contains only images
*   **text_image_button**: the template that contains text, images, and buttons
*   **text_button**: the template that contains text and buttons
*   **document**: the template that contains only documents
*   **video**: the template that contains only videos
*   **text_video**: the template that contains text and videos
*   **text_video_button**: the template that contains text, videos, and buttons
*   **text_image**: the template that contains text and images

This parameter is required.', example='The code of the message template.'),
  categoryChangePaused?: boolean(name='CategoryChangePaused'),
  components?: [ 
    {
      addSecretRecommendation?: boolean(name='AddSecretRecommendation', description='The note indicating that customers cannot share verification codes with others. The note is displayed in the message body. This parameter is valid if Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to BODY for a WhatsApp message template.', example='true'),
      buttons?: [ 
        {
          autofillText?: string(name='AutofillText', description='The text of the one-tap autofill button. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP for a WhatsApp message template.', example='Autofill'),
          couponCode?: string(name='CouponCode', description='The coupon code. It can contain only letters and digits. You can set this parameter to a variable such as $(couponCode). Specify the value of couponCode when you send a message.', example='120293'),
          flowAction?: string(name='FlowAction', description='The Flow action.

Valid values:

*   DATA_EXCHANGE
*   NAVIGATE', example='NAVIGATE'),
          flowId?: string(name='FlowId', description='The Flow ID.', example='479884093605183'),
          isOptOut?: boolean(name='IsOptOut', description='The unsubscribe button. This parameter is valid if Category is set to MARKETING and the Type sub-parameter of the Buttons parameter is set to QUICK_REPLY for a WhatsApp message template. Marketing messages will not be sent to customers if you configure message sending in the Chat App Message Service console and the customers click this button.', example='false'),
          navigateScreen?: string(name='NavigateScreen', description='The first screen in the Flow. This parameter is required if FlowAction is set to NAVIGATE.', example='DETAILS'),
          packageName?: string(name='PackageName', description='The app package name that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP for a WhatsApp message template.', example='com.demo', deprecated=true),
          phoneNumber?: string(name='PhoneNumber', description='The phone number. This parameter is valid only when the Type sub-parameter of the Buttons parameter is set to **PHONE_NUMBER**.', example='+861368897****'),
          signatureHash?: string(name='SignatureHash', description='The app signing key hash that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP for a WhatsApp message template.', example='wi299382', deprecated=true),
          supportedApps?: [ 
            {
              packageName?: string(name='PackageName', description='The name of the Android application package. This parameter is required if you create an Android application.', example='com.kuaidian.waimaistaff'),
              signatureHash?: string(name='SignatureHash', description='WhatsApp template is required when Category is Authoritative and Button Type is ONE_TAP/ZERO-TAP, indicating the signature hash value of the WhatsApp application.', example='ieid83kdiek'),
            }
          ](name='SupportedApps', description='List of supported apps.'),
          text?: string(name='Text', description='The display name of the button.', example='Call Me'),
          type?: string(name='Type', description='The type of the button. Valid values:

*   **PHONE_NUMBER**: phone call button
*   **URL**: URL button
*   **QUICK_REPLY**: quick reply button
*   **COPY_CODE**: copy code button
*   **ONE_TAP**: one-tap autofill button if Category is set to AUTHENTICATION

> 

*   If Category is set to AUTHENTICATION for a WhatsApp message template, you can add only one button to the WhatsApp message template and you must set the Type sub-parameter of the Buttons parameter to COPY_CODE or ONE_TAP. If Type is set to COPY_CODE, the Text sub-parameter of the Buttons parameter is required. If Type is set to ONE_TAP, the Text, SignatureHash, PackageName, and AutofillText sub-parameters of the Buttons parameter are required. The value of Text is displayed if the desired app is not installed on the device. The value of Text indicates that you must manually copy the verification code.

*   You can add only one button to a Viber message template, and you must set the Type sub-parameter of the Buttons parameter to URL.

This parameter is required.', example='PHONE_NUMBER'),
          url?: string(name='Url', description='The URL to be accessed when you click the URL button.', example='https://example.com'),
          urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**
*   **dynamic**', example='static'),
        }
      ](name='Buttons', description='The buttons. Specify this parameter only if you set the Type sub-parameter of the Components parameter to **BUTTONS**.

>  ####

*   A marketing or utility WhatsApp message template can contain up to 10 buttons.

*   A WhatsApp message template can contain only one phone call button.

*   A WhatsApp message template can contain up to two URL buttons.

*   In a WhatsApp message template, a quick reply button cannot be used together with a phone call button or a URL button.'),
      caption?: string(name='Caption', description='The description of the document.', example='This is a video'),
      cards?: [ 
        {
          cardComponents?: [ 
            {
              buttons?: [ 
                {
                  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='+8613800'),
                  text?: string(name='Text', description='The text of the button.', example='Call me'),
                  type?: string(name='Type', description='The type of the button. Valid values:

*   **PHONE_NUMBER**: phone call button
*   **URL**: URL button
*   **QUICK_REPLY**: quick reply button

This parameter is required.', example='PHONE_NUMBER'),
                  url?: string(name='Url', description='The URL to which you are redirected when you click the URL button.', example='https://alibaba.com/xx'),
                  urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**
*   **dynamic**', example='static'),
                }
              ](name='Buttons', description='The buttons. Specify this parameter only if you set the Type sub-parameter of the CardComponents parameter to BUTTONS. A carousel card can contain up to two buttons.'),
              format?: string(name='Format', description='The type of the media resource. This parameter is valid if the Type sub-parameter of the CardComponents parameter is set to HEADER. Valid values:

*   **IMAGE**
*   **VIDEO**', example='IMAGE'),
              text?: string(name='Text', description='The body content of the carousel card.', example='Who is the very powerful team'),
              type?: string(name='Type', description='The type of the component. Valid values:

*   **BODY**
*   **HEADER**
*   **BUTTONS**

This parameter is required.', example='BODY'),
              url?: string(name='Url', description='The URL of the media resource.', example='https://alibaba.com/img.png'),
            }
          ](name='CardComponents', description='The components of the carousel card.

This parameter is required.'),
        }
      ](name='Cards', description='The carousel cards of the carousel template.'),
      codeExpirationMinutes?: int32(name='CodeExpirationMinutes', description='The validity period of the verification code in the WhatsApp authentication template. Unit: minutes. This parameter is valid only when Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to FOOTER. The validity period of the verification code is displayed in the footer.', example='5'),
      duration?: int32(name='Duration', description='The length of the video in the Viber message template. Unit: seconds. Valid values: 0 to 600.', example='120'),
      fileName?: string(name='FileName', description='The name of the document.', example='video name'),
      fileType?: string(name='FileType', description='The type of the document attached in the Viber message template.', example='docx'),
      format?: string(name='Format', description='The type of the media resource. Valid values:

*   **TEXT**
*   **IMAGE**
*   **DOCUMENT**
*   **VIDEO**', example='TEXT'),
      hasExpiration?: boolean(name='HasExpiration', description='Specifies whether the coupon code has an expiration time. Specify this parameter if the Type sub-parameter of the Components parameter is set to LIMITED_TIME_OFFER.', example='true'),
      text?: string(name='Text', description='The text of the message that you want to send.

>  If Category is set to AUTHENTICATION, the Text sub-parameter of the Components parameter must be empty.', example='hello whatsapp'),
      thumbUrl?: string(name='ThumbUrl', description='The thumbnail URL of the video in the Viber message template.', example='https://cdn.multiplymall.mobiapp.cloud/yunmall/B-LM-LMALL202207130001/20220730/d712a057-a6af-4513-bbe6-7ee57ea60983.png?x-oss-process=image/resize,w_100'),
      type?: string(name='Type', description='The type of the component. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**
*   **CAROUSEL**
*   **LIMITED_TIME_OFFER**

> 

*   In a WhatsApp message template, a **Body** component cannot exceed 1,024 characters in length. A **HEADER** or **FOOTER** component cannot exceed 60 characters in length.

*   **FOOTER**, **CAROUSEL**, and **LIMITED_TIME_OFFER** components are not supported in Viber message templates.

*   In Viber message templates, media resources such as images, videos, and documents are placed in the **HEADER** component. If a Viber message contains text and an image, the image is placed below the text in the message received on a device.

This parameter is required.', example='BODY'),
      url?: string(name='Url', description='The URL of the media resource.

>  We recommend that you use 800 × 800 images in Viber message templates.', example='https://image.developer.aliyundoc.com'),
    }
  ](name='Components', description='The components of the message template.

>  If Category is set to AUTHENTICATION, the Type sub-parameter of the Components parameter cannot be set to HEADER. If the Type sub-parameter is set to BODY or FOOTER, the Text sub-parameter of the Components parameter must be empty.

This parameter is required.'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business account (WABA) ID of the user within the independent software vendor (ISV) account.

> CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', deprecated=true),
  example?: map[string]string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).

This parameter is required.', example='en'),
  messageSendTtlSeconds?: int32(name='MessageSendTtlSeconds', description='Validity period of authentication template message sending in WhatsApp

> This attribute requires providing waba in advance to Alibaba operators to open the whitelist, otherwise it will result in template submission failure', example='120'),
  name?: string(name='Name', description='The name of the message template.

This parameter is required.', example='hello_whatsapp'),
  templateType?: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**
*   LINE: the Line message template. This type of message template will be released later.

This parameter is required.', example='WHATSAPP'),
}

model CreateChatappTemplateShrinkRequest {
  allowCategoryChange?: boolean(name='AllowCategoryChange', description='Specifies whether to allow Facebook to automatically change the directory of the template. If you set this parameter to true, the review success rate of the template is improved. This parameter is valid only when TemplateType is set to WHATSAPP.', example='true', deprecated=true),
  category?: string(name='Category', description='The category of the template if TemplateType is set to WHATSAPP. Valid values:

*   **UTILITY**: the transaction template
*   **MARKETING**: the marketing template
*   **AUTHENTICATION**: the authentication template

The category of the template if TemplateType is set to VIBER. Valid values:

*   **text**: the template that contains only text
*   **image**: the template that contains only images
*   **text_image_button**: the template that contains text, images, and buttons
*   **text_button**: the template that contains text and buttons
*   **document**: the template that contains only documents
*   **video**: the template that contains only videos
*   **text_video**: the template that contains text and videos
*   **text_video_button**: the template that contains text, videos, and buttons
*   **text_image**: the template that contains text and images

This parameter is required.', example='The code of the message template.'),
  categoryChangePaused?: boolean(name='CategoryChangePaused'),
  componentsShrink?: string(name='Components', description='The components of the message template.

>  If Category is set to AUTHENTICATION, the Type sub-parameter of the Components parameter cannot be set to HEADER. If the Type sub-parameter is set to BODY or FOOTER, the Text sub-parameter of the Components parameter must be empty.

This parameter is required.'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business account (WABA) ID of the user within the independent software vendor (ISV) account.

> CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', deprecated=true),
  exampleShrink?: string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).

This parameter is required.', example='en'),
  messageSendTtlSeconds?: int32(name='MessageSendTtlSeconds', description='Validity period of authentication template message sending in WhatsApp

> This attribute requires providing waba in advance to Alibaba operators to open the whitelist, otherwise it will result in template submission failure', example='120'),
  name?: string(name='Name', description='The name of the message template.

This parameter is required.', example='hello_whatsapp'),
  templateType?: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**
*   LINE: the Line message template. This type of message template will be released later.

This parameter is required.', example='WHATSAPP'),
}

model CreateChatappTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='SMS_232907****'),
    templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
  }(name='Data', description='The data returned.', example='{"templateCode": "****4b5c79c9432497a075bdfca36bf5"，"templateName": "hello_whatsapp"}'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2D'),
}

model CreateChatappTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChatappTemplateResponseBody(name='body'),
}

/**
 * @summary The HTTP status code.
 * \\\\\\\\*   Example: OK. This parameter indicates that the request is successful.
 * \\\\\\\\*   Other values indicate that the request fails. For more information, see \\\\\\[Error codes]\\\\\\(https://www.alibabacloud.com/help/zh/cams/latest/api-error-codes).
 *
 * @description ### [](#qps-)QPS limit
 * You can call this operation up to 50 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param tmpReq CreateChatappTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateChatappTemplateResponse
 */
async function createChatappTemplateWithOptions(tmpReq: CreateChatappTemplateRequest, runtime: Util.RuntimeOptions): CreateChatappTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreateChatappTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.components)) {
    request.componentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.components, 'Components', 'json');
  }
  if (!Util.isUnset(tmpReq.example)) {
    request.exampleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.example, 'Example', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.allowCategoryChange)) {
    body['AllowCategoryChange'] = request.allowCategoryChange;
  }
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.categoryChangePaused)) {
    body['CategoryChangePaused'] = request.categoryChangePaused;
  }
  if (!Util.isUnset(request.componentsShrink)) {
    body['Components'] = request.componentsShrink;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.exampleShrink)) {
    body['Example'] = request.exampleShrink;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.messageSendTtlSeconds)) {
    body['MessageSendTtlSeconds'] = request.messageSendTtlSeconds;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary The HTTP status code.
 * \\\\\\\\*   Example: OK. This parameter indicates that the request is successful.
 * \\\\\\\\*   Other values indicate that the request fails. For more information, see \\\\\\[Error codes]\\\\\\(https://www.alibabacloud.com/help/zh/cams/latest/api-error-codes).
 *
 * @description ### [](#qps-)QPS limit
 * You can call this operation up to 50 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request CreateChatappTemplateRequest
 * @return CreateChatappTemplateResponse
 */
async function createChatappTemplate(request: CreateChatappTemplateRequest): CreateChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChatappTemplateWithOptions(request, runtime);
}

model CreateFlowRequest {
  categories?: [ string ](name='Categories', description='This parameter is required.'),
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值示例值'),
  flowName?: string(name='FlowName', description='This parameter is required.', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateFlowShrinkRequest {
  categoriesShrink?: string(name='Categories', description='This parameter is required.'),
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值示例值'),
  flowName?: string(name='FlowName', description='This parameter is required.', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: {
    categories?: [ string ](name='Categories', description='The categories of the Flow.'),
    flowId?: string(name='FlowId', description='The Flow ID.', example='333993838***'),
    flowName?: string(name='FlowName', description='The name of the Flow.', example='test1'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model CreateFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFlowResponseBody(name='body'),
}

/**
 * @summary Creates a Flow.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param tmpReq CreateFlowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFlowResponse
 */
async function createFlowWithOptions(tmpReq: CreateFlowRequest, runtime: Util.RuntimeOptions): CreateFlowResponse {
  Util.validateModel(tmpReq);
  var request = new CreateFlowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.categories)) {
    request.categoriesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.categories, 'Categories', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.categoriesShrink)) {
    query['Categories'] = request.categoriesShrink;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.flowName)) {
    query['FlowName'] = request.flowName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFlow',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a Flow.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request CreateFlowRequest
 * @return CreateFlowResponse
 */
async function createFlow(request: CreateFlowRequest): CreateFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFlowWithOptions(request, runtime);
}

model CreateFlowVersionRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  flowVersionCopyFrom?: string(name='FlowVersionCopyFrom', description='The flow version to be copied.', example='1'),
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark', description='Version remarks.', example='Fix Send WhatsApp Message Error'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateFlowVersionShrinkRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtendShrink?: string(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  flowVersionCopyFrom?: string(name='FlowVersionCopyFrom', description='The flow version to be copied.', example='1'),
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark', description='Version remarks.', example='Fix Send WhatsApp Message Error'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denial; this field is only returned when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Request status code.', example='OK'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true for success, false for failure.', example='false'),
}

model CreateFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFlowVersionResponseBody(name='body'),
}

/**
 * @summary CreateFlowVersion
 *
 * @param tmpReq CreateFlowVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateFlowVersionResponse
 */
async function createFlowVersionWithOptions(tmpReq: CreateFlowVersionRequest, runtime: Util.RuntimeOptions): CreateFlowVersionResponse {
  Util.validateModel(tmpReq);
  var request = new CreateFlowVersionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bizExtend)) {
    request.bizExtendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizExtend, 'BizExtend', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.bizExtendShrink)) {
    query['BizExtend'] = request.bizExtendShrink;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.flowVersionCopyFrom)) {
    query['FlowVersionCopyFrom'] = request.flowVersionCopyFrom;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateFlowVersion',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary CreateFlowVersion
 *
 * @param request CreateFlowVersionRequest
 * @return CreateFlowVersionResponse
 */
async function createFlowVersion(request: CreateFlowVersionRequest): CreateFlowVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFlowVersionWithOptions(request, runtime);
}

model CreatePhoneMessageQrdlRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值示例值'),
  generateQrImage?: string(name='GenerateQrImage', description='This parameter is required.', example='示例值示例值示例值'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='This parameter is required.', example='示例值示例值示例值'),
  prefilledMessage?: string(name='PrefilledMessage', description='This parameter is required.', example='示例值示例值'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreatePhoneMessageQrdlResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: {
    deepLinkUrl?: string(name='DeepLinkUrl', description='The URL of the deep link.', example='https://wa.qrdl/'),
    generateQrImage?: string(name='GenerateQrImage', description='The format of the generated image.', example='PNG'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800'),
    prefilledMessage?: string(name='PrefilledMessage', description='The message content.', example='Hello'),
    qrImageUrl?: string(name='QrImageUrl', description='The URL of the QR code.', example='http://img.png'),
    qrdlCode?: string(name='QrdlCode', description='The mode of the quick-response (QR) code.', example='D9II3***'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='none'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model CreatePhoneMessageQrdlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePhoneMessageQrdlResponseBody(name='body'),
}

/**
 * @summary Creates a quick-response (QR) code that contains a message.
 *
 * @param request CreatePhoneMessageQrdlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePhoneMessageQrdlResponse
 */
async function createPhoneMessageQrdlWithOptions(request: CreatePhoneMessageQrdlRequest, runtime: Util.RuntimeOptions): CreatePhoneMessageQrdlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.generateQrImage)) {
    query['GenerateQrImage'] = request.generateQrImage;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.prefilledMessage)) {
    query['PrefilledMessage'] = request.prefilledMessage;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreatePhoneMessageQrdl',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Creates a quick-response (QR) code that contains a message.
 *
 * @param request CreatePhoneMessageQrdlRequest
 * @return CreatePhoneMessageQrdlResponse
 */
async function createPhoneMessageQrdl(request: CreatePhoneMessageQrdlRequest): CreatePhoneMessageQrdlResponse {
  var runtime = new Util.RuntimeOptions{};
  return createPhoneMessageQrdlWithOptions(request, runtime);
}

model DeleteChatFlowRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Process code.', example='示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteChatFlowShrinkRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtendShrink?: string(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Process code.', example='示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteChatFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details, this field is returned only when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Error code', example='示例值示例值示例值'),
  message?: string(name='Message', description='Error message.', example='示例值'),
  requestId?: string(name='RequestId', description='Unique request ID.', example='示例值'),
  response?: map[string]any(name='Response', description='Response data', example='无'),
  success?: boolean(name='Success', description='Whether the call was successful.', example='false'),
}

model DeleteChatFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteChatFlowResponseBody(name='body'),
}

/**
 * @summary Delete Process
 *
 * @param tmpReq DeleteChatFlowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteChatFlowResponse
 */
async function deleteChatFlowWithOptions(tmpReq: DeleteChatFlowRequest, runtime: Util.RuntimeOptions): DeleteChatFlowResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteChatFlowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bizExtend)) {
    request.bizExtendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizExtend, 'BizExtend', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.bizExtendShrink)) {
    query['BizExtend'] = request.bizExtendShrink;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteChatFlow',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Process
 *
 * @param request DeleteChatFlowRequest
 * @return DeleteChatFlowResponse
 */
async function deleteChatFlow(request: DeleteChatFlowRequest): DeleteChatFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChatFlowWithOptions(request, runtime);
}

model DeleteChatGroupRequest {
  businessNumber?: string(name='BusinessNumber', description='This parameter is required.', example='8613800***'),
  channelType?: string(name='ChannelType', example='WHATSAPP'),
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='cams-**'),
  groupId?: string(name='GroupId', description='This parameter is required.', example='E399**'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteChatGroupResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='示例值示例值示例值'),
  requestId?: string(name='RequestId', example='E939E****'),
  result?: long(name='Result', example='1'),
  success?: boolean(name='Success', example='true'),
}

model DeleteChatGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteChatGroupResponseBody(name='body'),
}

/**
 * @summary DeleteChatGroup
 *
 * @param request DeleteChatGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteChatGroupResponse
 */
async function deleteChatGroupWithOptions(request: DeleteChatGroupRequest, runtime: Util.RuntimeOptions): DeleteChatGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessNumber)) {
    query['BusinessNumber'] = request.businessNumber;
  }
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteChatGroup',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary DeleteChatGroup
 *
 * @param request DeleteChatGroupRequest
 * @return DeleteChatGroupResponse
 */
async function deleteChatGroup(request: DeleteChatGroupRequest): DeleteChatGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChatGroupWithOptions(request, runtime);
}

model DeleteChatGroupInviteLinkRequest {
  businessNumber?: string(name='BusinessNumber', description='This parameter is required.', example='8613800***'),
  channelType?: string(name='ChannelType', example='WHATSAPP'),
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='cams-8***'),
  groupId?: string(name='GroupId', description='This parameter is required.', example='E398****'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteChatGroupInviteLinkResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='示例值示例值'),
  requestId?: string(name='RequestId', example='3R938***'),
  result?: long(name='Result', example='0'),
  success?: boolean(name='Success', example='true'),
}

model DeleteChatGroupInviteLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteChatGroupInviteLinkResponseBody(name='body'),
}

/**
 * @summary DeleteChatGroupInviteLink
 *
 * @param request DeleteChatGroupInviteLinkRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteChatGroupInviteLinkResponse
 */
async function deleteChatGroupInviteLinkWithOptions(request: DeleteChatGroupInviteLinkRequest, runtime: Util.RuntimeOptions): DeleteChatGroupInviteLinkResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessNumber)) {
    query['BusinessNumber'] = request.businessNumber;
  }
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteChatGroupInviteLink',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary DeleteChatGroupInviteLink
 *
 * @param request DeleteChatGroupInviteLinkRequest
 * @return DeleteChatGroupInviteLinkResponse
 */
async function deleteChatGroupInviteLink(request: DeleteChatGroupInviteLinkRequest): DeleteChatGroupInviteLinkResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChatGroupInviteLinkWithOptions(request, runtime);
}

model DeleteChatGroupParticipantsRequest {
  businessNumber?: string(name='BusinessNumber', description='This parameter is required.', example='8613800**'),
  channelType?: string(name='ChannelType', example='WHATSAPP。'),
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='cams-**'),
  groupId?: string(name='GroupId', description='This parameter is required.', example='EA93UU****'),
  list?: [ 
    {
      participantNumber?: string(name='ParticipantNumber', example='86138***'),
    }
  ](name='List'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteChatGroupParticipantsShrinkRequest {
  businessNumber?: string(name='BusinessNumber', description='This parameter is required.', example='8613800**'),
  channelType?: string(name='ChannelType', example='WHATSAPP。'),
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='cams-**'),
  groupId?: string(name='GroupId', description='This parameter is required.', example='EA93UU****'),
  listShrink?: string(name='List'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteChatGroupParticipantsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='示例值'),
  requestId?: string(name='RequestId', example='R39***'),
  result?: long(name='Result', example='20'),
  success?: boolean(name='Success', example='false'),
}

model DeleteChatGroupParticipantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteChatGroupParticipantsResponseBody(name='body'),
}

/**
 * @summary DeleteChatGroupParticipants
 *
 * @param tmpReq DeleteChatGroupParticipantsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteChatGroupParticipantsResponse
 */
async function deleteChatGroupParticipantsWithOptions(tmpReq: DeleteChatGroupParticipantsRequest, runtime: Util.RuntimeOptions): DeleteChatGroupParticipantsResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteChatGroupParticipantsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.list)) {
    request.listShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.list, 'List', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.businessNumber)) {
    query['BusinessNumber'] = request.businessNumber;
  }
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.listShrink)) {
    query['List'] = request.listShrink;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteChatGroupParticipants',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary DeleteChatGroupParticipants
 *
 * @param request DeleteChatGroupParticipantsRequest
 * @return DeleteChatGroupParticipantsResponse
 */
async function deleteChatGroupParticipants(request: DeleteChatGroupParticipantsRequest): DeleteChatGroupParticipantsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChatGroupParticipantsWithOptions(request, runtime);
}

model DeleteChatappTemplateRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the ISV account.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business Account (WABA) ID of the RAM user within the independent software vendor (ISV) account.

>  CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****'),
  isvCode?: string(name='IsvCode', description='The ISV verification code. This parameter is used to verify whether the RAM user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The template language.', example='zh_CN'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode', description='The template code.', example='744c4b5c79c9432497a075bdfca3****'),
  templateName?: string(name='TemplateName', description='The template name.', example='test_name'),
  templateType?: string(name='TemplateType', description='The template type. This parameter is required if you delete a template in a language.', example='WHATSAPP'),
}

model DeleteChatappTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model DeleteChatappTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteChatappTemplateResponseBody(name='body'),
}

/**
 * @summary Deletes a message template.
 *
 * @description ### QPS limit
 * You can call this operation up to five times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteChatappTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteChatappTemplateResponse
 */
async function deleteChatappTemplateWithOptions(request: DeleteChatappTemplateRequest, runtime: Util.RuntimeOptions): DeleteChatappTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a message template.
 *
 * @description ### QPS limit
 * You can call this operation up to five times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteChatappTemplateRequest
 * @return DeleteChatappTemplateResponse
 */
async function deleteChatappTemplate(request: DeleteChatappTemplateRequest): DeleteChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChatappTemplateWithOptions(request, runtime);
}

model DeleteFlowRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值'),
  flowId?: string(name='FlowId', description='This parameter is required.', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model DeleteFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFlowResponseBody(name='body'),
}

/**
 * @summary Deletes a Flow. Only Flows in the DRAFT state can be deleted.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteFlowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFlowResponse
 */
async function deleteFlowWithOptions(request: DeleteFlowRequest, runtime: Util.RuntimeOptions): DeleteFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFlow',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a Flow. Only Flows in the DRAFT state can be deleted.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request DeleteFlowRequest
 * @return DeleteFlowResponse
 */
async function deleteFlow(request: DeleteFlowRequest): DeleteFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFlowWithOptions(request, runtime);
}

model DeleteFlowVersionRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteFlowVersionShrinkRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtendShrink?: string(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Detailed reason for access denial.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true: success; false: failure.', example='false'),
}

model DeleteFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFlowVersionResponseBody(name='body'),
}

/**
 * @summary Delete Flow Version
 *
 * @param tmpReq DeleteFlowVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteFlowVersionResponse
 */
async function deleteFlowVersionWithOptions(tmpReq: DeleteFlowVersionRequest, runtime: Util.RuntimeOptions): DeleteFlowVersionResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteFlowVersionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bizExtend)) {
    request.bizExtendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizExtend, 'BizExtend', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.bizExtendShrink)) {
    query['BizExtend'] = request.bizExtendShrink;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.flowVersion)) {
    query['FlowVersion'] = request.flowVersion;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteFlowVersion',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Delete Flow Version
 *
 * @param request DeleteFlowVersionRequest
 * @return DeleteFlowVersionResponse
 */
async function deleteFlowVersion(request: DeleteFlowVersionRequest): DeleteFlowVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteFlowVersionWithOptions(request, runtime);
}

model DeletePhoneMessageQrdlRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='This parameter is required.', example='示例值示例值'),
  qrdlCode?: string(name='QrdlCode', description='This parameter is required.', example='示例值示例值示例值'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeletePhoneMessageQrdlResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model DeletePhoneMessageQrdlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePhoneMessageQrdlResponseBody(name='body'),
}

/**
 * @summary Deletes a quick-response (QR) code that contains a message.
 *
 * @param request DeletePhoneMessageQrdlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePhoneMessageQrdlResponse
 */
async function deletePhoneMessageQrdlWithOptions(request: DeletePhoneMessageQrdlRequest, runtime: Util.RuntimeOptions): DeletePhoneMessageQrdlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.qrdlCode)) {
    query['QrdlCode'] = request.qrdlCode;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeletePhoneMessageQrdl',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deletes a quick-response (QR) code that contains a message.
 *
 * @param request DeletePhoneMessageQrdlRequest
 * @return DeletePhoneMessageQrdlResponse
 */
async function deletePhoneMessageQrdl(request: DeletePhoneMessageQrdlRequest): DeletePhoneMessageQrdlResponse {
  var runtime = new Util.RuntimeOptions{};
  return deletePhoneMessageQrdlWithOptions(request, runtime);
}

model DeprecateFlowRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值'),
  flowId?: string(name='FlowId', description='This parameter is required.', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeprecateFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The result returns OK as normal.', example='OK'),
  message?: string(name='Message', description='Error description information.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model DeprecateFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeprecateFlowResponseBody(name='body'),
}

/**
 * @summary Deprecates a Flow.
 *
 * @param request DeprecateFlowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeprecateFlowResponse
 */
async function deprecateFlowWithOptions(request: DeprecateFlowRequest, runtime: Util.RuntimeOptions): DeprecateFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeprecateFlow',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Deprecates a Flow.
 *
 * @param request DeprecateFlowRequest
 * @return DeprecateFlowResponse
 */
async function deprecateFlow(request: DeprecateFlowRequest): DeprecateFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return deprecateFlowWithOptions(request, runtime);
}

model EnableWhatsappROIMetricRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='The verification code used to verify whether the RAM user is authorized by the independent software vendor (ISV) account.', example='skdi3kksloslikdkkdk'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model EnableWhatsappROIMetricResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='NONE'),
  code?: string(name='Code', description='The value OK indicates that the request was successful.', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model EnableWhatsappROIMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableWhatsappROIMetricResponseBody(name='body'),
}

/**
 * @summary Enables the statistics on the metrics that are related to WhatsApp.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request EnableWhatsappROIMetricRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return EnableWhatsappROIMetricResponse
 */
async function enableWhatsappROIMetricWithOptions(request: EnableWhatsappROIMetricRequest, runtime: Util.RuntimeOptions): EnableWhatsappROIMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableWhatsappROIMetric',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Enables the statistics on the metrics that are related to WhatsApp.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request EnableWhatsappROIMetricRequest
 * @return EnableWhatsappROIMetricResponse
 */
async function enableWhatsappROIMetric(request: EnableWhatsappROIMetricRequest): EnableWhatsappROIMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableWhatsappROIMetricWithOptions(request, runtime);
}

model FlowBindPhoneRequest {
  channelCode?: string(name='ChannelCode', description='Message channel Code

This parameter is required.', example='示例值示例值示例值'),
  channelType?: string(name='ChannelType', description='Message channel Type

This parameter is required.', example='示例值示例值'),
  flowCode?: string(name='FlowCode', description='Flow code.

This parameter is required.', example='示例值示例值'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1'),
  ownerId?: long(name='OwnerId'),
  phoneNumbers?: [ string ](name='PhoneNumbers', description='Phone numbers or PageIds under the channel instance, etc.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  wabaId?: string(name='WabaId', description='WABA account ID, or PageId for other channel types, etc.

This parameter is required.', example='示例值'),
}

model FlowBindPhoneShrinkRequest {
  channelCode?: string(name='ChannelCode', description='Message channel Code

This parameter is required.', example='示例值示例值示例值'),
  channelType?: string(name='ChannelType', description='Message channel Type

This parameter is required.', example='示例值示例值'),
  flowCode?: string(name='FlowCode', description='Flow code.

This parameter is required.', example='示例值示例值'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1'),
  ownerId?: long(name='OwnerId'),
  phoneNumbersShrink?: string(name='PhoneNumbers', description='Phone numbers or PageIds under the channel instance, etc.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  wabaId?: string(name='WabaId', description='WABA account ID, or PageId for other channel types, etc.

This parameter is required.', example='示例值'),
}

model FlowBindPhoneResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denial; this field is returned only when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Status code.', example='示例值示例值'),
  message?: string(name='Message', description='Error description message.', example='示例值示例值'),
  model?: boolean(name='Model', description='Return result.', example='false'),
  requestId?: string(name='RequestId', description='Request ID.', example='示例值示例值示例值'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model FlowBindPhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlowBindPhoneResponseBody(name='body'),
}

/**
 * @summary Bind phone numbers to flow
 *
 * @param tmpReq FlowBindPhoneRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlowBindPhoneResponse
 */
async function flowBindPhoneWithOptions(tmpReq: FlowBindPhoneRequest, runtime: Util.RuntimeOptions): FlowBindPhoneResponse {
  Util.validateModel(tmpReq);
  var request = new FlowBindPhoneShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.phoneNumbers)) {
    request.phoneNumbersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.phoneNumbers, 'PhoneNumbers', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.channelCode)) {
    query['ChannelCode'] = request.channelCode;
  }
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.flowVersion)) {
    query['FlowVersion'] = request.flowVersion;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumbersShrink)) {
    query['PhoneNumbers'] = request.phoneNumbersShrink;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.wabaId)) {
    query['WabaId'] = request.wabaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlowBindPhone',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Bind phone numbers to flow
 *
 * @param request FlowBindPhoneRequest
 * @return FlowBindPhoneResponse
 */
async function flowBindPhone(request: FlowBindPhoneRequest): FlowBindPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return flowBindPhoneWithOptions(request, runtime);
}

model FlowRebindPhoneRequest {
  channelCode?: string(name='ChannelCode', description='Message channel code

This parameter is required.', example='示例值示例值'),
  channelType?: string(name='ChannelType', description='Message channel type

This parameter is required.', example='示例值示例值'),
  flowCode?: string(name='FlowCode', description='Flow code.

This parameter is required.', example='示例值示例值'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='示例值'),
  ownerId?: long(name='OwnerId'),
  phoneNumbers?: [ string ](name='PhoneNumbers', description='Phone numbers or PageIds under the channel instance, etc.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  wabaId?: string(name='WabaId', description='WABA account ID, or PageId for other channel types, etc.

This parameter is required.', example='示例值示例值'),
}

model FlowRebindPhoneShrinkRequest {
  channelCode?: string(name='ChannelCode', description='Message channel code

This parameter is required.', example='示例值示例值'),
  channelType?: string(name='ChannelType', description='Message channel type

This parameter is required.', example='示例值示例值'),
  flowCode?: string(name='FlowCode', description='Flow code.

This parameter is required.', example='示例值示例值'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='示例值'),
  ownerId?: long(name='OwnerId'),
  phoneNumbersShrink?: string(name='PhoneNumbers', description='Phone numbers or PageIds under the channel instance, etc.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  wabaId?: string(name='WabaId', description='WABA account ID, or PageId for other channel types, etc.

This parameter is required.', example='示例值示例值'),
}

model FlowRebindPhoneResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details.', example='无'),
  code?: string(name='Code', description='Status code.', example='示例值示例值'),
  message?: string(name='Message', description='Error message.', example='示例值示例值示例值'),
  model?: boolean(name='Model', description='Request result data.', example='false'),
  requestId?: string(name='RequestId', description='Request ID.', example='示例值示例值'),
  success?: boolean(name='Success', description='Whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model FlowRebindPhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlowRebindPhoneResponseBody(name='body'),
}

/**
 * @summary Rebind phone number for flow
 *
 * @param tmpReq FlowRebindPhoneRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlowRebindPhoneResponse
 */
async function flowRebindPhoneWithOptions(tmpReq: FlowRebindPhoneRequest, runtime: Util.RuntimeOptions): FlowRebindPhoneResponse {
  Util.validateModel(tmpReq);
  var request = new FlowRebindPhoneShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.phoneNumbers)) {
    request.phoneNumbersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.phoneNumbers, 'PhoneNumbers', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.channelCode)) {
    query['ChannelCode'] = request.channelCode;
  }
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.flowVersion)) {
    query['FlowVersion'] = request.flowVersion;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumbersShrink)) {
    query['PhoneNumbers'] = request.phoneNumbersShrink;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.wabaId)) {
    query['WabaId'] = request.wabaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlowRebindPhone',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Rebind phone number for flow
 *
 * @param request FlowRebindPhoneRequest
 * @return FlowRebindPhoneResponse
 */
async function flowRebindPhone(request: FlowRebindPhoneRequest): FlowRebindPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return flowRebindPhoneWithOptions(request, runtime);
}

model FlowUnbindPhoneRequest {
  channelType?: string(name='ChannelType', description='Message channel type', example='示例值示例值'),
  flowCode?: string(name='FlowCode', description='Flow code.

This parameter is required.', example='示例值'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='示例值示例值示例值'),
  ownerId?: long(name='OwnerId'),
  phoneNumbers?: [ string ](name='PhoneNumbers', description='Phone numbers or PageIds under the channel instance, etc.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model FlowUnbindPhoneShrinkRequest {
  channelType?: string(name='ChannelType', description='Message channel type', example='示例值示例值'),
  flowCode?: string(name='FlowCode', description='Flow code.

This parameter is required.', example='示例值'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='示例值示例值示例值'),
  ownerId?: long(name='OwnerId'),
  phoneNumbersShrink?: string(name='PhoneNumbers', description='Phone numbers or PageIds under the channel instance, etc.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model FlowUnbindPhoneResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details, this field is returned only when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Request status code.', example='示例值示例值'),
  message?: string(name='Message', description='Error message.', example='示例值示例值示例值'),
  model?: boolean(name='Model', description='Request result data.', example='false'),
  success?: boolean(name='Success', description='Whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model FlowUnbindPhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlowUnbindPhoneResponseBody(name='body'),
}

/**
 * @summary Unbind phone number from flow
 *
 * @param tmpReq FlowUnbindPhoneRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return FlowUnbindPhoneResponse
 */
async function flowUnbindPhoneWithOptions(tmpReq: FlowUnbindPhoneRequest, runtime: Util.RuntimeOptions): FlowUnbindPhoneResponse {
  Util.validateModel(tmpReq);
  var request = new FlowUnbindPhoneShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.phoneNumbers)) {
    request.phoneNumbersShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.phoneNumbers, 'PhoneNumbers', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.flowVersion)) {
    query['FlowVersion'] = request.flowVersion;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumbersShrink)) {
    query['PhoneNumbers'] = request.phoneNumbersShrink;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FlowUnbindPhone',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Unbind phone number from flow
 *
 * @param request FlowUnbindPhoneRequest
 * @return FlowUnbindPhoneResponse
 */
async function flowUnbindPhone(request: FlowUnbindPhoneRequest): FlowUnbindPhoneResponse {
  var runtime = new Util.RuntimeOptions{};
  return flowUnbindPhoneWithOptions(request, runtime);
}

model GetChatFlowMetricRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  flowVersion?: string(name='FlowVersion', description='Flow version.', example='1'),
  from?: long(name='From', description='Start timestamp in seconds.', example='1751299200'),
  metricName?: string(name='MetricName', description='Metric name.

This parameter is required.', example='nodeUsageStatistics'),
  metricParam?: map[string]any(name='MetricParam'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  to?: long(name='To', description='End timestamp in seconds.', example='1751385599'),
}

model GetChatFlowMetricShrinkRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtendShrink?: string(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  flowVersion?: string(name='FlowVersion', description='Flow version.', example='1'),
  from?: long(name='From', description='Start timestamp in seconds.', example='1751299200'),
  metricName?: string(name='MetricName', description='Metric name.

This parameter is required.', example='nodeUsageStatistics'),
  metricParamShrink?: string(name='MetricParam'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  to?: long(name='To', description='End timestamp in seconds.', example='1751385599'),
}

model GetChatFlowMetricResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denial.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  data?: map[string]any(name='Data', description='Returned data object.', example='无'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Unique request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true: success; false: failure.', example='false'),
}

model GetChatFlowMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatFlowMetricResponseBody(name='body'),
}

/**
 * @summary Get ChatFlow Runtime Data
 *
 * @param tmpReq GetChatFlowMetricRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetChatFlowMetricResponse
 */
async function getChatFlowMetricWithOptions(tmpReq: GetChatFlowMetricRequest, runtime: Util.RuntimeOptions): GetChatFlowMetricResponse {
  Util.validateModel(tmpReq);
  var request = new GetChatFlowMetricShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bizExtend)) {
    request.bizExtendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizExtend, 'BizExtend', 'json');
  }
  if (!Util.isUnset(tmpReq.metricParam)) {
    request.metricParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.metricParam, 'MetricParam', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.bizExtendShrink)) {
    query['BizExtend'] = request.bizExtendShrink;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.flowVersion)) {
    query['FlowVersion'] = request.flowVersion;
  }
  if (!Util.isUnset(request.from)) {
    query['From'] = request.from;
  }
  if (!Util.isUnset(request.metricName)) {
    query['MetricName'] = request.metricName;
  }
  if (!Util.isUnset(request.metricParamShrink)) {
    query['MetricParam'] = request.metricParamShrink;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.to)) {
    query['To'] = request.to;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatFlowMetric',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get ChatFlow Runtime Data
 *
 * @param request GetChatFlowMetricRequest
 * @return GetChatFlowMetricResponse
 */
async function getChatFlowMetric(request: GetChatFlowMetricRequest): GetChatFlowMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatFlowMetricWithOptions(request, runtime);
}

model GetChatFlowTemplateRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.

This parameter is required.', example='ALICOM_OPAAS'),
  id?: long(name='Id', description='Template ID', example='2'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetChatFlowTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details, this field is returned only when RAM verification fails.', example='无'),
  code?: string(name='Code', description='System returned error code. For more details on error codes, please refer to the error code documentation.', example='OK'),
  data?: {
    response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  }(name='Data', description='Returned data.'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Unique request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model GetChatFlowTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatFlowTemplateResponseBody(name='body'),
}

/**
 * @summary Query chatFlow template
 *
 * @param request GetChatFlowTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetChatFlowTemplateResponse
 */
async function getChatFlowTemplateWithOptions(request: GetChatFlowTemplateRequest, runtime: Util.RuntimeOptions): GetChatFlowTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatFlowTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query chatFlow template
 *
 * @param request GetChatFlowTemplateRequest
 * @return GetChatFlowTemplateResponse
 */
async function getChatFlowTemplate(request: GetChatFlowTemplateRequest): GetChatFlowTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatFlowTemplateWithOptions(request, runtime);
}

model GetChatappPhoneNumberMetricRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the ISV account.', example='293483938849493'),
  end?: long(name='End', description='The end of the time range to query.

This parameter is required.', example='1693407714687'),
  granularity?: string(name='Granularity', description='The granularity of the metric.

Valid values:

*   DAILY
*   HALF_HOUR', example='DAILY'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the RAM user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='The business phone number.', example='861380000'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  start?: long(name='Start', description='The beginning of the time range to query.

This parameter is required.', example='1693107714687'),
}

model GetChatappPhoneNumberMetricResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='NONE'),
  code?: string(name='Code', description='The value OK indicates that the request was successful.', example='OK'),
  data?: [ 
    {
      deliveredCount?: int32(name='DeliveredCount', description='The number of delivered messages.', example='5'),
      end?: long(name='End', description='The end of the time range that you queried.', example='1667196043904'),
      granularity?: string(name='Granularity', description='The granularity of the metric.

Valid values:

*   DAILY
*   HALF_HOUR', example='DAILY'),
      phoneNumber?: string(name='PhoneNumber', description='The business phone number.', example='861380000'),
      sentCount?: int32(name='SentCount', description='The number of sent messages.', example='10'),
      start?: long(name='Start', description='The beginning of the time range that you queried.', example='1669619491000'),
    }
  ](name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='1612C226-E271-4CFE-9F18-4066D******'),
}

model GetChatappPhoneNumberMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatappPhoneNumberMetricResponseBody(name='body'),
}

/**
 * @summary Queries the number of messages that are sent by using a phone number by a specific metric.
 *
 * @description You can call this operation up to 50 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetChatappPhoneNumberMetricRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetChatappPhoneNumberMetricResponse
 */
async function getChatappPhoneNumberMetricWithOptions(request: GetChatappPhoneNumberMetricRequest, runtime: Util.RuntimeOptions): GetChatappPhoneNumberMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappPhoneNumberMetric',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the number of messages that are sent by using a phone number by a specific metric.
 *
 * @description You can call this operation up to 50 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetChatappPhoneNumberMetricRequest
 * @return GetChatappPhoneNumberMetricResponse
 */
async function getChatappPhoneNumberMetric(request: GetChatappPhoneNumberMetricRequest): GetChatappPhoneNumberMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappPhoneNumberMetricWithOptions(request, runtime);
}

model GetChatappTemplateDetailRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business account (WABA) ID of the user within the independent software vendor (ISV) account.

>  CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', deprecated=true),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code. This parameter is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).

This parameter is required.', example='en_US'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='****4b5c79c9432497a075bdfca36bf5'),
  templateName?: string(name='TemplateName', description='Name of a template.', example='test_name'),
  templateType?: string(name='TemplateType', description='The type of the message template. Valid values:

*   **WHATSAPP**
*   **VIBER**
*   LINE (developing)', example='WHATSAPP'),
}

model GetChatappTemplateDetailResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details.', example='None'),
  code?: string(name='Code', description='The HTTP status code.

*   Example: OK. This value indicates that the request is successful.
*   Other codes indicate that the request fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    allowSend?: boolean(name='AllowSend'),
    auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
    category?: string(name='Category', description='The category of the template when the returned value of TemplateType is WHATSAPP. Valid values:

*   **UTILITY**: a transactional template
*   **MARKETING**: a marketing template
*   **AUTHENTICATION**: an identity authentication template

The category of the template when the returned value of the TemplateType parameter is VIBER. Valid values:

*   **text**: a template that contains only text
*   **image**: a template that contains only images
*   **text_image_button**: a template that contains text, images, and buttons
*   **text_button**: a template that contains text and buttons
*   **document**: a template that contains only files
*   **video**: a template that contains only videos
*   **text_video**: a template that contains text and videos
*   **text_video_button**: a template that contains text, videos, and buttons
*   **text_image**: a template that contains text and images

> If Category is set to text_video_button, users cannot open a web page by clicking the button. Users can open only the video in the message. In this case, you do not need to specify the Url parameter for the URL button in the template.', example='TRANSACTIONAL'),
    categoryChangePaused?: boolean(name='CategoryChangePaused'),
    components?: [ 
      {
        addSecretRecommendation?: boolean(name='AddSecretRecommendation', description='The note indicating that customers cannot share verification codes with others. The note is displayed in the message body. This parameter is valid if Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to BODY for a WhatsApp message template.', example='false'),
        buttons?: [ 
          {
            autofillText?: string(name='AutofillText', description='The text of the one-tap autofill button. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP in a WhatsApp message template.', example='Autofill'),
            couponCode?: string(name='CouponCode', description='The coupon code.', example='202039ksjs'),
            extendAttrs?: {
              action?: string(name='Action', description='The event type.', example='nextCard'),
              intentCode?: string(name='IntentCode', description='The intent code.', example='test'),
              nextLanguageCode?: string(name='NextLanguageCode', description='The language of the next template.', example='en'),
              nextTemplateCode?: string(name='NextTemplateCode', description='The code of the next template.', example='20939920093993'),
              nextTemplateName?: string(name='NextTemplateName', description='The name of the next template.', example='abc'),
            }(name='ExtendAttrs', description='The extended fields.'),
            flowAction?: string(name='FlowAction', description='The Flow action. Valid values: NAVIGATE and DATA_EXCHANGE.', example='NAVIGATE'),
            flowId?: string(name='FlowId', description='The Flow ID.', example='3838292983'),
            isOptOut?: boolean(name='IsOptOut', description='The unsubscribe button. This parameter is valid if Category is set to MARKETING and the Type sub-parameter of the Buttons parameter is set to QUICK_REPLY for a WhatsApp message template. Marketing messages will not be sent to customers if you configure message sending in the Chat App Message Service console and the customers click this button.', example='false'),
            navigateScreen?: string(name='NavigateScreen', description='The first screen in the Flow. This parameter is returned if FlowAction is set to NAVIGATE.', example='DETAILS'),
            packageName?: string(name='PackageName', description='The app package name that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP in a WhatsApp message template.', example='com.aliyun'),
            phoneNumber?: string(name='PhoneNumber', description='The phone number. This parameter is valid only if the Type sub-parameter of the Buttons parameter is set to **PHONE_NUMBER**.', example='861398745****'),
            signatureHash?: string(name='SignatureHash', description='The app signing key hash that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP in a WhatsApp message template.', example='2993839'),
            supportedApps?: [ 
              {
                packageName?: string(name='PackageName', description='The app package name.', example='com.test'),
                signatureHash?: string(name='SignatureHash', description='The app signing key hash.', example='29kdkeik939'),
              }
            ](name='SupportedApps', description='The apps that support one-tap authentication and zero-tap authentication.'),
            text?: string(name='Text', description='The display name of the button.', example='Call'),
            type?: string(name='Type', description='The button type. Valid values:

*   **PHONE_NUMBER**: phone call button
*   **URL**: URL button
*   **QUICK_REPLY**: quick reply button
*   **COPY_CODE**: copy code button
*   **ONE_TAP**: one-tap autofill button if Category is set to AUTHENTICATION

> 

*   If Category is set to AUTHENTICATION for a WhatsApp message template, you can add only one button to the WhatsApp message template and you must set the Type sub-parameter of the Buttons parameter to COPY_CODE or ONE_TAP. If Type is set to COPY_CODE, the Text sub-parameter of the Buttons parameter is required. If Type is set to ONE_TAP, the Text, SignatureHash, PackageName, and AutofillText sub-parameters of the Buttons parameter are required. The value of Text is displayed if the desired app is not installed on the device. The value of Text indicates that you must manually copy the verification code.

*   You can add only one button to a Viber message template, and you must set the Type sub-parameter of the Buttons parameter to URL.', example='PHONE_NUMBER'),
            url?: string(name='Url', description='The URL to which you are redirected when you click the URL button.', example='https://example.com'),
            urlType?: string(name='UrlType', description='The URL type. Valid values:

*   **static**
*   **dynamic**', example='static'),
          }
        ](name='Buttons', description='The buttons. This parameter is returned only if the Type sub-parameter of the Components parameter is set to **BUTTONS**.

>  ####

*   A marketing or utility WhatsApp message template can contain up to 10 buttons.

*   A WhatsApp message template can contain only one phone call button.

*   A WhatsApp message template can contain up to two URL buttons.

*   In a WhatsApp message template, a quick reply button cannot be used together with a phone call button or a URL button.'),
        caption?: string(name='Caption', description='The description of the document.', example='The new file has been uploaded.'),
        cards?: [ 
          {
            cardComponents?: [ 
              {
                buttons?: [ 
                  {
                    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='+86138000'),
                    text?: string(name='Text', description='The button text.', example='Button text'),
                    type?: string(name='Type', description='The type of the button in the carousel template. Valid values: URL, PHONE_NUMBER, and QUICK_REQLY.', example='URL'),
                    url?: string(name='Url', description='The URL to which you are redirected when you click the URL button.', example='https://aliyun.com'),
                    urlType?: string(name='UrlType', description='The type of the URL. Valid values: static and dynamic.', example='static'),
                  }
                ](name='Buttons', description='The buttons of the carousel card.'),
                format?: string(name='Format', description='The type of the header in the carousel template. The header can only be an image or a video. The headers of all carousel cards must be the same. The type of the media resources that are included in the message. Valid values: IMGAGE and VIDEO.', example='HEADER'),
                text?: string(name='Text', description='The text of the carousel card.', example='Body'),
                type?: string(name='Type', description='The component type.', example='HEADER'),
                url?: string(name='Url', description='The URL.', example='https://aliyun.com'),
              }
            ](name='CardComponents', description='The components of the carousel card.'),
          }
        ](name='Cards', description='The carousel cards.'),
        codeExpirationMinutes?: int32(name='CodeExpirationMinutes', description='The validity period of the verification code in the WhatsApp authentication template. Unit: minutes. This parameter is valid only when Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to FOOTER for a WhatsApp message template. The validity period of the verification code is displayed in the footer.', example='5'),
        duration?: int32(name='Duration', description='The length of the video in the Viber message template. Unit: seconds. Valid values: 0 to 600.', example='50'),
        fileName?: string(name='FileName', description='The name of the document.', example='Express file'),
        fileType?: string(name='FileType', description='The type of the document attached in the Viber message template.', example='docx'),
        format?: string(name='Format', description='The format.', example='TEXT'),
        latitude?: string(name='Latitude', description='The latitude of the location.', example='28.001'),
        locationAddress?: string(name='LocationAddress', description='The address of the location.', example='Hangzhou'),
        locationName?: string(name='LocationName', description='The name of the location.', example='Hangzhou'),
        longitude?: string(name='Longitude', description='The longitude of the location.', example='120.002'),
        offerExpirationTimeMs?: string(name='OfferExpirationTimeMs', description='The variable when the coupon code expires in the limited-time offer template.', example='$(offerExpirationTimeMs)'),
        text?: string(name='Text', description='The text of the message that you want to send.', example='Hello'),
        thumbUrl?: string(name='ThumbUrl', description='The thumbnail URL of the video in the Viber message template.', example='https://img.png'),
        type?: string(name='Type', description='The component type. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**
*   **CAROUSEL**
*   **LIMITED_TIME_OFFER**

> 

*   In a WhatsApp message template, a **Body** component cannot exceed 1,024 characters in length. A **HEADER** or **FOOTER** component cannot exceed 60 characters in length.

*   **FOOTER**, **CAROUSEL**, and **LIMITED_TIME_OFFER** components are not supported in Viber message templates.

*   In Viber message templates, media resources such as images, videos, and documents are placed in the **HEADER** component. If a Viber message contains text and an image, the image is placed below the text in the message received on a device.', example='BODY'),
        url?: string(name='Url', description='The URL of the media resource.', example='https://image.developer.aliyundoc.com'),
        hasExpiration?: boolean(name='hasExpiration', description='Indicates whether the coupon code has an expiration time in the limited-time offer template.', example='true'),
      }
    ](name='Components', description='The components of the message template.'),
    example?: map[string]string(name='Example', description='The examples of variables.'),
    language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).', example='en_US'),
    messageSendTtlSeconds?: int32(name='MessageSendTtlSeconds', description='The validity period of the WhatsApp authentication message.', example='120'),
    name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
    qualityScore?: string(name='QualityScore', description='The quality of the template.', example='GREEN'),
    reason?: string(name='Reason', description='The reason why the template was rejected.', example='None'),
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
    templateType?: string(name='TemplateType', description='The type of the message template. Valid values:

*   **WHATSAPP**
*   **VIBER**
*   LINE (developing)', example='WHATSAPP'),
  }(name='Data', description='The returned data.', example='{ 		"category": "ACCOUNT_UPDATE", 		"name": "account_notice", 		"language": "en_US", 		"templateCode": "744c4b5c79c9432497a075bdfca3****", 		"auditStatus": "APPROVED", 		"components": "[{\\\\"type\\\\":\\\\"BODY\\\\",\\\\"text\\\\":\\\\"body_text$(textVariable)\\\\"},{\\\\"type\\\\":\\\\"HEADER\\\\",\\\\"formate\\\\":\\\\"IMAGE\\\\",\\\\"url\\\\":\\\\"$(linkVariable)\\\\"},{\\\\"type\\\\":\\\\"FOOTER\\\\",\\\\"text\\\\":\\\\"footer-text\\\\"},{\\\\"type\\\\":\\\\"BUTTONS\\\\",\\\\"buttons\\\\":[{\\\\"type\\\\":\\\\"PHONE_NUMBER\\\\",\\\\"text\\\\":\\\\"phone-button-text\\\\",\\\\"phone_number\\\\":\\\\"+861388888****\\\\"},{\\\\"type\\\\":\\\\"URL\\\\",\\\\"text\\\\":\\\\"url-button-text\\\\",\\\\"url\\\\":\\\\"https://www.website.com/\\\\"}]}]", 		"example": "{\\\\"textVariable\\\\": \\\\"text\\\\", \\\\"linkVariable\\\\": \\\\"link\\\\"}" 	}'),
  message?: string(name='Message', description='The error message.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The request ID.', example='744c4b5c79c9432497a075bdfca3****'),
}

model GetChatappTemplateDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatappTemplateDetailResponseBody(name='body'),
}

/**
 * @summary Queries the information of a message template.
 *
 * @description ### QPS limit
 * You can call this API operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetChatappTemplateDetailRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetChatappTemplateDetailResponse
 */
async function getChatappTemplateDetailWithOptions(request: GetChatappTemplateDetailRequest, runtime: Util.RuntimeOptions): GetChatappTemplateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateName)) {
    query['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappTemplateDetail',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information of a message template.
 *
 * @description ### QPS limit
 * You can call this API operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetChatappTemplateDetailRequest
 * @return GetChatappTemplateDetailResponse
 */
async function getChatappTemplateDetail(request: GetChatappTemplateDetailRequest): GetChatappTemplateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappTemplateDetailWithOptions(request, runtime);
}

model GetChatappTemplateMetricRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the ISV account.', example='293483938849493'),
  end?: long(name='End', description='The end of the time range to query.

This parameter is required.', example='1693407714687'),
  granularity?: string(name='Granularity', description='The granularity of the metric.

Valid values:

*   DAILY
*   HALF_HOUR', example='DAILY'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the RAM user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The template language.', example='en'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  start?: long(name='Start', description='The beginning of the time range to query.

This parameter is required.', example='1693107714687'),
  templateCode?: string(name='TemplateCode', description='The template code.

This parameter is required.', example='744c4b5c79c9432497a075bdfca36bf5'),
  templateType?: string(name='TemplateType', description='The template type. If you do not specify this parameter, the default value WHATSAPP is used.

Valid values:

*   VIBER
*   WHATSAPP', example='WHATSAPP'),
}

model GetChatappTemplateMetricResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The value OK indicates that the request was successful.', example='OK'),
  data?: [ 
    {
      cliented?: [ 
        {
          buttonContent?: string(name='ButtonContent', description='The text on the button.', example='Open url'),
          count?: int32(name='Count', description='The number of clicks.', example='20'),
          type?: string(name='Type', description='The button type.

Valid values:

*   phone_number_button
*   url_button
*   quick_relpy_button', example='quick_reply_button'),
        }
      ](name='Cliented', description='The statistics on button clicks.'),
      deliveredCount?: int32(name='DeliveredCount', description='The number of delivered messages.', example='6'),
      end?: long(name='End', description='The end of the time range you queried.', example='1668138331485'),
      language?: string(name='Language', description='The template language.', example='en'),
      readCount?: int32(name='ReadCount', description='The number of read messages.', example='3'),
      sentCount?: int32(name='SentCount', description='The number of sent messages.', example='10'),
      start?: long(name='Start', description='The beginning of the time range you queried.', example='1673919240001'),
      templateCode?: string(name='TemplateCode', description='The template code.', example='83837774838*****'),
    }
  ](name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetChatappTemplateMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatappTemplateMetricResponseBody(name='body'),
}

/**
 * @summary Queries the metrics about a marketing template.
 *
 * @description You can call this operation up to 50 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetChatappTemplateMetricRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetChatappTemplateMetricResponse
 */
async function getChatappTemplateMetricWithOptions(request: GetChatappTemplateMetricRequest, runtime: Util.RuntimeOptions): GetChatappTemplateMetricResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.end)) {
    query['End'] = request.end;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.start)) {
    query['Start'] = request.start;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappTemplateMetric',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the metrics about a marketing template.
 *
 * @description You can call this operation up to 50 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetChatappTemplateMetricRequest
 * @return GetChatappTemplateMetricResponse
 */
async function getChatappTemplateMetric(request: GetChatappTemplateMetricRequest): GetChatappTemplateMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappTemplateMetricWithOptions(request, runtime);
}

model GetChatappUploadAuthorizationRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetChatappUploadAuthorizationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied for detailed information.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', description='The AccessKey ID that is used to authorize a user to upload a file to Object Storage Service (OSS).', example='2skeuurfj****'),
    accessKeySecret?: string(name='AccessKeySecret', description='The AccessKey secret that is used to authorize a user to upload a file to OSS.', example='skdkdukeuuuu****'),
    bucketName?: string(name='BucketName', description='The name of the bucket to which a file is uploaded in OSS.', example='oss'),
    dir?: string(name='Dir', description='The directory to which the file is uploaded in Object Storage Service (OSS).', example='1000102939'),
    endPoint?: string(name='EndPoint', description='The address of the OSS server to which a file is uploaded.', example='https://oss.com'),
    expire?: int32(name='Expire', description='The timeout period.', example='3600'),
    securityToken?: string(name='SecurityToken', description='The security token.', example='dkdieiii**'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model GetChatappUploadAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatappUploadAuthorizationResponseBody(name='body'),
}

/**
 * @summary Obtains the authentication information that is used to upload a file.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetChatappUploadAuthorizationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetChatappUploadAuthorizationResponse
 */
async function getChatappUploadAuthorizationWithOptions(request: GetChatappUploadAuthorizationRequest, runtime: Util.RuntimeOptions): GetChatappUploadAuthorizationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappUploadAuthorization',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the authentication information that is used to upload a file.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetChatappUploadAuthorizationRequest
 * @return GetChatappUploadAuthorizationResponse
 */
async function getChatappUploadAuthorization(request: GetChatappUploadAuthorizationRequest): GetChatappUploadAuthorizationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappUploadAuthorizationWithOptions(request, runtime);
}

model GetChatappVerifyCodeRequest {
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='cams-kei****'),
  locale?: string(name='Locale', description='This parameter is required.', example='zh_CN'),
  method?: string(name='Method', description='This parameter is required.', example='sms'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='This parameter is required.', example='8613800000000'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetChatappVerifyCodeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1612C226-E271-4CFE-9F18-4066D550F91B'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model GetChatappVerifyCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatappVerifyCodeResponseBody(name='body'),
}

/**
 * @summary Obtains a verification code.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetChatappVerifyCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetChatappVerifyCodeResponse
 */
async function getChatappVerifyCodeWithOptions(request: GetChatappVerifyCodeRequest, runtime: Util.RuntimeOptions): GetChatappVerifyCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.method)) {
    query['Method'] = request.method;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappVerifyCode',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains a verification code.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetChatappVerifyCodeRequest
 * @return GetChatappVerifyCodeResponse
 */
async function getChatappVerifyCode(request: GetChatappVerifyCodeRequest): GetChatappVerifyCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappVerifyCodeWithOptions(request, runtime);
}

model GetCommerceSettingRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.

This parameter is required.', example='1380000****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetCommerceSettingResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied for detailed information.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    cartEnable?: boolean(name='CartEnable', description='Indicates whether the shopping cart button is displayed. Valid values:

*   true
*   false', example='false'),
    catalogVisible?: boolean(name='CatalogVisible', description='Indicates whether the catalog button is displayed. Valid values:

*   true
*   false', example='false'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetCommerceSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCommerceSettingResponseBody(name='body'),
}

/**
 * @summary Queries the business settings of a phone number.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetCommerceSettingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetCommerceSettingResponse
 */
async function getCommerceSettingWithOptions(request: GetCommerceSettingRequest, runtime: Util.RuntimeOptions): GetCommerceSettingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCommerceSetting',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the business settings of a phone number.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetCommerceSettingRequest
 * @return GetCommerceSettingResponse
 */
async function getCommerceSetting(request: GetCommerceSettingRequest): GetCommerceSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCommerceSettingWithOptions(request, runtime);
}

model GetConversationalAutomationRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account or the instance ID of the customer of Alibaba Cloud.

This parameter is required.', example='cams-3ie***'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number of the enterprise.

This parameter is required.', example='86130000***'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetConversationalAutomationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    commands?: [ 
      {
        commandDescription?: string(name='CommandDescription', description='The description of the command.', example='description'),
        commandName?: string(name='CommandName', description='The name of the command.', example='common1'),
      }
    ](name='Commands', description='The commands.'),
    enableWelcomeMessage?: boolean(name='EnableWelcomeMessage', description='Indicates whether the welcoming message is enabled.', example='true'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number of the enterprise.', example='86138****'),
    prompts?: [ string ](name='Prompts', description='The opening remarks.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetConversationalAutomationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConversationalAutomationResponseBody(name='body'),
}

/**
 * @summary Configures welcoming messages, opening remarks, and commands.
 *
 * @description ### [](#qps-)QPS limit
 * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 * This operation will directly obtain data from Facebook, which sets an upper limit on the total number of calls for operations. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetConversationalAutomationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetConversationalAutomationResponse
 */
async function getConversationalAutomationWithOptions(request: GetConversationalAutomationRequest, runtime: Util.RuntimeOptions): GetConversationalAutomationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetConversationalAutomation',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Configures welcoming messages, opening remarks, and commands.
 *
 * @description ### [](#qps-)QPS limit
 * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 * This operation will directly obtain data from Facebook, which sets an upper limit on the total number of calls for operations. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetConversationalAutomationRequest
 * @return GetConversationalAutomationResponse
 */
async function getConversationalAutomation(request: GetConversationalAutomationRequest): GetConversationalAutomationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getConversationalAutomationWithOptions(request, runtime);
}

model GetFlowRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值示例值'),
  flowId?: string(name='FlowId', description='This parameter is required.', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: {
    categories?: [ string ](name='Categories', description='The categories of the Flow.'),
    dataApiVersion?: string(name='DataApiVersion', description='The version number of the API.', example='3.0'),
    flowId?: string(name='FlowId', description='The Flow ID.', example='flow_id_arms'),
    flowName?: string(name='FlowName', description='The Flow name.', example='dnjn'),
    JSONVersion?: string(name='JSONVersion', description='The JSON version.', example='2.1'),
    previewUrl?: string(name='PreviewUrl', description='The temporary preview URL.', example='https://pre-url'),
    previewUrlExpires?: long(name='PreviewUrlExpires', description='The time when the preview URL expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1700617436633'),
    status?: string(name='Status', description='The state of the Flow.

Valid values:

*   PUBLISHED

    <!-- -->

    <!-- -->

    <!-- -->

*   DRAFT

    <!-- -->

    <!-- -->

    <!-- -->

*   DEPRECATED

    <!-- -->

    <!-- -->

    <!-- -->', example='DRAFT'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFlowResponseBody(name='body'),
}

/**
 * @summary Queries the information about a Flow.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetFlowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFlowResponse
 */
async function getFlowWithOptions(request: GetFlowRequest, runtime: Util.RuntimeOptions): GetFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFlow',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a Flow.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetFlowRequest
 * @return GetFlowResponse
 */
async function getFlow(request: GetFlowRequest): GetFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFlowWithOptions(request, runtime);
}

model GetFlowJSONAssestRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值'),
  flowId?: string(name='FlowId', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetFlowJSONAssestResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: {
    filePath?: string(name='FilePath', description='The file path.', example='https://url.com/json.json'),
    flowId?: string(name='FlowId', description='The Flow ID.', example='flow_id_arms'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='Error description information.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetFlowJSONAssestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFlowJSONAssestResponseBody(name='body'),
}

/**
 * @summary Queries the JSON content of a Flow.
 *
 * @param request GetFlowJSONAssestRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFlowJSONAssestResponse
 */
async function getFlowJSONAssestWithOptions(request: GetFlowJSONAssestRequest, runtime: Util.RuntimeOptions): GetFlowJSONAssestResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFlowJSONAssest',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the JSON content of a Flow.
 *
 * @param request GetFlowJSONAssestRequest
 * @return GetFlowJSONAssestResponse
 */
async function getFlowJSONAssest(request: GetFlowJSONAssestRequest): GetFlowJSONAssestResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFlowJSONAssestWithOptions(request, runtime);
}

model GetFlowPreviewUrlRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值示例值'),
  flowId?: string(name='FlowId', description='This parameter is required.', example='示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetFlowPreviewUrlResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: {
    flowId?: string(name='FlowId', description='The Flow ID.', example='6dd31e1b7cc940fc99e293d9952b5b79'),
    previewUrl?: string(name='PreviewUrl', description='The temporary preview URL.', example='https://url'),
    previewUrlExpires?: long(name='PreviewUrlExpires', description='The time when the preview URL expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1700617436633'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model GetFlowPreviewUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFlowPreviewUrlResponseBody(name='body'),
}

/**
 * @summary Obtains the preview URL of a Flow.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetFlowPreviewUrlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetFlowPreviewUrlResponse
 */
async function getFlowPreviewUrlWithOptions(request: GetFlowPreviewUrlRequest, runtime: Util.RuntimeOptions): GetFlowPreviewUrlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetFlowPreviewUrl',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the preview URL of a Flow.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetFlowPreviewUrlRequest
 * @return GetFlowPreviewUrlResponse
 */
async function getFlowPreviewUrl(request: GetFlowPreviewUrlRequest): GetFlowPreviewUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return getFlowPreviewUrlWithOptions(request, runtime);
}

model GetMigrationVerifyCodeRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493'),
  locale?: string(name='Locale', description='The language.

This parameter is required.', example='zh_CN'),
  method?: string(name='Method', description='The method to obtain the verification code. Valid values: SMS and VOICE.

This parameter is required.', example='sms'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='Phone number.

This parameter is required.', example='8613800001234'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetMigrationVerifyCodeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    id?: string(name='Id', description='The ID of the number.', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', description='Phone number.', example='8613800001234'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model GetMigrationVerifyCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMigrationVerifyCodeResponseBody(name='body'),
}

/**
 * @summary Obtain the verification code for the migration number.
 *
 * @description The single user QPS limit for this interface is 10 times per second. Exceeding the limit may result in restricted API calls, which may affect your business. Please make reasonable calls.
 *
 * @param request GetMigrationVerifyCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetMigrationVerifyCodeResponse
 */
async function getMigrationVerifyCodeWithOptions(request: GetMigrationVerifyCodeRequest, runtime: Util.RuntimeOptions): GetMigrationVerifyCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.method)) {
    query['Method'] = request.method;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMigrationVerifyCode',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtain the verification code for the migration number.
 *
 * @description The single user QPS limit for this interface is 10 times per second. Exceeding the limit may result in restricted API calls, which may affect your business. Please make reasonable calls.
 *
 * @param request GetMigrationVerifyCodeRequest
 * @return GetMigrationVerifyCodeResponse
 */
async function getMigrationVerifyCode(request: GetMigrationVerifyCodeRequest): GetMigrationVerifyCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMigrationVerifyCodeWithOptions(request, runtime);
}

model GetPermissionByCodeRequest {
  code?: string(name='Code', description='This parameter is required.', example='示例值示例值示例值'),
  custSpaceId?: string(name='CustSpaceId', example='示例值'),
  ownerId?: long(name='OwnerId'),
  permissions?: [ string ](name='Permissions'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetPermissionByCodeShrinkRequest {
  code?: string(name='Code', description='This parameter is required.', example='示例值示例值示例值'),
  custSpaceId?: string(name='CustSpaceId', example='示例值'),
  ownerId?: long(name='OwnerId'),
  permissionsShrink?: string(name='Permissions'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetPermissionByCodeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='Error description information.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetPermissionByCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPermissionByCodeResponseBody(name='body'),
}

/**
 * @summary Obtains permissions based on the authorization code obtained from embedded signup.
 *
 * @param tmpReq GetPermissionByCodeRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPermissionByCodeResponse
 */
async function getPermissionByCodeWithOptions(tmpReq: GetPermissionByCodeRequest, runtime: Util.RuntimeOptions): GetPermissionByCodeResponse {
  Util.validateModel(tmpReq);
  var request = new GetPermissionByCodeShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.permissions)) {
    request.permissionsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.permissions, 'Permissions', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.code)) {
    query['Code'] = request.code;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.permissionsShrink)) {
    query['Permissions'] = request.permissionsShrink;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPermissionByCode',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains permissions based on the authorization code obtained from embedded signup.
 *
 * @param request GetPermissionByCodeRequest
 * @return GetPermissionByCodeResponse
 */
async function getPermissionByCode(request: GetPermissionByCodeRequest): GetPermissionByCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPermissionByCodeWithOptions(request, runtime);
}

model GetPhoneEncryptionPublicKeyRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='This parameter is required.', example='示例值示例值'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetPhoneEncryptionPublicKeyResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    encryptionPublicKey?: string(name='EncryptionPublicKey', description='The public key.', example='-----BEGIN PUBLIC KEY-----
AAA
BBB
CCC
DDD
EEE
FFF
GGG
-----END PUBLIC KEY-----'),
    encryptionPublicKeyStatus?: string(name='EncryptionPublicKeyStatus', description='The validity state of the public key. Valid values:

*   MISMATCH: The public key is invalid.
*   VALID: The public key is valid.', example='VALID'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='86138000**'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='Error description information.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetPhoneEncryptionPublicKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhoneEncryptionPublicKeyResponseBody(name='body'),
}

/**
 * @summary Queries the encryption public key of a phone number.
 *
 * @param request GetPhoneEncryptionPublicKeyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPhoneEncryptionPublicKeyResponse
 */
async function getPhoneEncryptionPublicKeyWithOptions(request: GetPhoneEncryptionPublicKeyRequest, runtime: Util.RuntimeOptions): GetPhoneEncryptionPublicKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPhoneEncryptionPublicKey',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the encryption public key of a phone number.
 *
 * @param request GetPhoneEncryptionPublicKeyRequest
 * @return GetPhoneEncryptionPublicKeyResponse
 */
async function getPhoneEncryptionPublicKey(request: GetPhoneEncryptionPublicKeyRequest): GetPhoneEncryptionPublicKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhoneEncryptionPublicKeyWithOptions(request, runtime);
}

model GetPhoneNumberVerificationStatusRequest {
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='This parameter is required.', example='示例值示例值'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model GetPhoneNumberVerificationStatusResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    codeVerificationStatus?: string(name='CodeVerificationStatus', description='The verification status.', example='VERIFIED'),
    id?: string(name='Id', description='The ID of the number.', example='2224342624'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613900001234'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2D'),
}

model GetPhoneNumberVerificationStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhoneNumberVerificationStatusResponseBody(name='body'),
}

/**
 * @summary Obtains the verification status of a phone number.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetPhoneNumberVerificationStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPhoneNumberVerificationStatusResponse
 */
async function getPhoneNumberVerificationStatusWithOptions(request: GetPhoneNumberVerificationStatusRequest, runtime: Util.RuntimeOptions): GetPhoneNumberVerificationStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPhoneNumberVerificationStatus',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the verification status of a phone number.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetPhoneNumberVerificationStatusRequest
 * @return GetPhoneNumberVerificationStatusResponse
 */
async function getPhoneNumberVerificationStatus(request: GetPhoneNumberVerificationStatusRequest): GetPhoneNumberVerificationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhoneNumberVerificationStatusWithOptions(request, runtime);
}

model GetPreValidatePhoneIdRequest {
  phoneNumber?: string(name='PhoneNumber', description='The phone number.

This parameter is required.', example='861380000'),
  verifyCode?: string(name='VerifyCode', description='The verification code provided when you purchased the pre-registered phone number.

This parameter is required.', example='208393'),
}

model GetPreValidatePhoneIdResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [Error codes](https://www.alibabacloud.com/help/zh/cams/latest/api-error-codes).', example='OK'),
  data?: {
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='929833'),
    phoneNumberId?: string(name='PhoneNumberId', description='The ID of the phone number.', example='8613800000000'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetPreValidatePhoneIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPreValidatePhoneIdResponseBody(name='body'),
}

/**
 * @summary Obtains the ID of a pre-registered phone number used for embedded signup without the need to re-obtain a verification code.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetPreValidatePhoneIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPreValidatePhoneIdResponse
 */
async function getPreValidatePhoneIdWithOptions(request: GetPreValidatePhoneIdRequest, runtime: Util.RuntimeOptions): GetPreValidatePhoneIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.verifyCode)) {
    body['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetPreValidatePhoneId',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the ID of a pre-registered phone number used for embedded signup without the need to re-obtain a verification code.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetPreValidatePhoneIdRequest
 * @return GetPreValidatePhoneIdResponse
 */
async function getPreValidatePhoneId(request: GetPreValidatePhoneIdRequest): GetPreValidatePhoneIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPreValidatePhoneIdWithOptions(request, runtime);
}

model GetWhatsappConnectionCatalogRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='C2020939922929292'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  wabaId?: string(name='WabaId', description='The WABA ID.

This parameter is required.', example='292939399393'),
}

model GetWhatsappConnectionCatalogResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='success'),
  model?: map[string]any(name='Model', description='The returned data.', example='{"id":"200292992"}'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='false'),
}

model GetWhatsappConnectionCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWhatsappConnectionCatalogResponseBody(name='body'),
}

/**
 * @summary Queries the product catalogs that are associated with a WhatsApp Business account (WABA).
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetWhatsappConnectionCatalogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWhatsappConnectionCatalogResponse
 */
async function getWhatsappConnectionCatalogWithOptions(request: GetWhatsappConnectionCatalogRequest, runtime: Util.RuntimeOptions): GetWhatsappConnectionCatalogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.wabaId)) {
    query['WabaId'] = request.wabaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWhatsappConnectionCatalog',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the product catalogs that are associated with a WhatsApp Business account (WABA).
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetWhatsappConnectionCatalogRequest
 * @return GetWhatsappConnectionCatalogResponse
 */
async function getWhatsappConnectionCatalog(request: GetWhatsappConnectionCatalogRequest): GetWhatsappConnectionCatalogResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWhatsappConnectionCatalogWithOptions(request, runtime);
}

model GetWhatsappHealthStatusRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account or the instance ID of the customer of Alibaba Cloud.

This parameter is required.', example='2993****'),
  language?: string(name='Language', description='The template language.', example='en'),
  nodeType?: string(name='NodeType', description='The node type.

Valid values:

*   template: message template
*   phone: phone number
*   waba: WhatsApp Business Account (WABA)

This parameter is required.', example='waba'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number of the enterprise.', example='86138***'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode', description='The template code.', example='399299***'),
  wabaId?: string(name='WabaId', description='WabaId', example='299399****'),
}

model GetWhatsappHealthStatusResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    canSendMessage?: string(name='CanSendMessage', description='Indicates whether the messages can be sent.', example='AVAILABLE'),
    entities?: [ 
      {
        businessId?: string(name='BusinessId', description='The Business Manager ID.', example='3992****'),
        canSendMessage?: string(name='CanSendMessage', description='Indicates whether the messages can be sent.', example='AVAILABLE'),
        entityType?: string(name='EntityType', description='The entity type.', example='PHONE_NUMBER'),
        errors?: [ 
          {
            errorCode?: string(name='ErrorCode', description='The error code.', example='141006'),
            errorDescription?: string(name='ErrorDescription', description='The description of the error.', example='There is an error with the payment method.'),
            possibleSolution?: string(name='PossibleSolution', description='The possible solution to the error.', example='There was an error with your payment method. Please add a new payment method to the account.'),
          }
        ](name='Errors', description='The reasons why the messages failed to be sent.'),
        language?: string(name='Language', description='The template language.', example='en'),
        phoneNumber?: string(name='PhoneNumber', description='The phone number to which the messages are sent.', example='86138****'),
        templateCode?: string(name='TemplateCode', description='The template code. This parameter is returned when the NodeType parameter is set to **template**.', example='939928****'),
        wabaId?: string(name='WabaId', description='The WABA ID. You can view the WABA ID in the Chat App Message Service console after you create the WABA.', example='39939***'),
      }
    ](name='Entities', description='The queried entities.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='DAC72B08-3327-33EF-BEDC-8EC3E83A6575'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetWhatsappHealthStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWhatsappHealthStatusResponseBody(name='body'),
}

/**
 * @summary Queries the messaging health status of different types of nodes.
 *
 * @description ### [](#qps-)QPS limit
 * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 * This operation will directly obtain data from Facebook, which sets an upper limit on the total number of calls for operations. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetWhatsappHealthStatusRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetWhatsappHealthStatusResponse
 */
async function getWhatsappHealthStatusWithOptions(request: GetWhatsappHealthStatusRequest, runtime: Util.RuntimeOptions): GetWhatsappHealthStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.nodeType)) {
    query['NodeType'] = request.nodeType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.wabaId)) {
    query['WabaId'] = request.wabaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetWhatsappHealthStatus',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the messaging health status of different types of nodes.
 *
 * @description ### [](#qps-)QPS limit
 * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 * This operation will directly obtain data from Facebook, which sets an upper limit on the total number of calls for operations. We recommend that you take note of the limit when you call this operation.
 *
 * @param request GetWhatsappHealthStatusRequest
 * @return GetWhatsappHealthStatusResponse
 */
async function getWhatsappHealthStatus(request: GetWhatsappHealthStatusRequest): GetWhatsappHealthStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getWhatsappHealthStatusWithOptions(request, runtime);
}

model IsvGetAppIdRequest {
  intlVersion?: string(name='IntlVersion', example='示例值示例值示例值'),
  ownerId?: long(name='OwnerId'),
  permissions?: string(name='Permissions', example='示例值示例值'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  type?: string(name='Type', description='This parameter is required.', example='示例值示例值'),
}

model IsvGetAppIdResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  appId?: string(name='AppId', description='The message ID.', example='23hr3v'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  configId?: string(name='ConfigId', description='The ID of the configuration item.', example='28972951817****'),
  message?: string(name='Message', description='The error message returned.', example='null'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='744c4b5c79c9432497a075bdfca3***'),
}

model IsvGetAppIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IsvGetAppIdResponseBody(name='body'),
}

/**
 * @summary Obtains the application ID under the ISV account.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request IsvGetAppIdRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return IsvGetAppIdResponse
 */
async function isvGetAppIdWithOptions(request: IsvGetAppIdRequest, runtime: Util.RuntimeOptions): IsvGetAppIdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.intlVersion)) {
    query['IntlVersion'] = request.intlVersion;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.permissions)) {
    query['Permissions'] = request.permissions;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'IsvGetAppId',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Obtains the application ID under the ISV account.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request IsvGetAppIdRequest
 * @return IsvGetAppIdResponse
 */
async function isvGetAppId(request: IsvGetAppIdRequest): IsvGetAppIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return isvGetAppIdWithOptions(request, runtime);
}

model ListBindingRelationsForFlowVersionRequest {
  channelType?: string(name='ChannelType', description='Channel type. Values:
- INSTAGRAM
- WHATSAPP
- MESSENGER


<props="intl">- VIBER

This parameter is required.', example='WHATSAPP'),
  flowCode?: string(name='FlowCode', description='Process code. View the process code in the [Flow Editor](https://chatapp.console.aliyun.com/ChatFlowBuilder) interface.

This parameter is required.', example='9ccc41**************************'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListBindingRelationsForFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details.', example='None'),
  code?: string(name='Code', description='Error code. For more information, see [Error Codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: [  map[string]any ](name='Data', description='Returned data list.'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values:

- true: Success.

- false: Failure.', example='true'),
}

model ListBindingRelationsForFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBindingRelationsForFlowVersionResponseBody(name='body'),
}

/**
 * @summary Query Bound List Based on flowCode
 *
 * @description - You can call this interface to query the list of phone numbers or merchant account IDs bound to a process, or you can view the list in the [**Flow Editor**](https://chatapp.console.aliyun.com/ChatFlowBuilder) > **Settings** interface.
 * - Before calling this interface, make sure that the process you created has already been bound to a phone number or merchant account ID.
 * - If the process you created is not bound to a phone number or merchant account ID, you can manually bind a phone number or merchant account ID in the [**Flow Editor**](https://chatapp.console.aliyun.com/ChatFlowBuilder) > **Settings** interface, or bind it through the [FlowBindPhone](https://help.aliyun.com/document_detail/2937190.html) interface.
 *
 * @param request ListBindingRelationsForFlowVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListBindingRelationsForFlowVersionResponse
 */
async function listBindingRelationsForFlowVersionWithOptions(request: ListBindingRelationsForFlowVersionRequest, runtime: Util.RuntimeOptions): ListBindingRelationsForFlowVersionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListBindingRelationsForFlowVersion',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query Bound List Based on flowCode
 *
 * @description - You can call this interface to query the list of phone numbers or merchant account IDs bound to a process, or you can view the list in the [**Flow Editor**](https://chatapp.console.aliyun.com/ChatFlowBuilder) > **Settings** interface.
 * - Before calling this interface, make sure that the process you created has already been bound to a phone number or merchant account ID.
 * - If the process you created is not bound to a phone number or merchant account ID, you can manually bind a phone number or merchant account ID in the [**Flow Editor**](https://chatapp.console.aliyun.com/ChatFlowBuilder) > **Settings** interface, or bind it through the [FlowBindPhone](https://help.aliyun.com/document_detail/2937190.html) interface.
 *
 * @param request ListBindingRelationsForFlowVersionRequest
 * @return ListBindingRelationsForFlowVersionResponse
 */
async function listBindingRelationsForFlowVersion(request: ListBindingRelationsForFlowVersionRequest): ListBindingRelationsForFlowVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listBindingRelationsForFlowVersionWithOptions(request, runtime);
}

model ListChatFlowRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowTriggerType?: string(name='FlowTriggerType', description='Flow trigger type, enum values:
- TriggeredManually
- TriggeredByWhatsApp
- TriggeredByInstagram
- TriggeredByViber
- TriggeredByMessenger', example='示例值'),
  keyword?: string(name='Keyword', description='Search keyword.', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo', description='Page number', example='1'),
  pageSize?: long(name='PageSize', description='Page size.', example='20'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  returnWithOnlineVersion?: boolean(name='ReturnWithOnlineVersion', description='Whether to return the online status', example='true'),
  status?: string(name='Status', description='Flow status', example='NORMAL'),
}

model ListChatFlowShrinkRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtendShrink?: string(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowTriggerType?: string(name='FlowTriggerType', description='Flow trigger type, enum values:
- TriggeredManually
- TriggeredByWhatsApp
- TriggeredByInstagram
- TriggeredByViber
- TriggeredByMessenger', example='示例值'),
  keyword?: string(name='Keyword', description='Search keyword.', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo', description='Page number', example='1'),
  pageSize?: long(name='PageSize', description='Page size.', example='20'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  returnWithOnlineVersion?: boolean(name='ReturnWithOnlineVersion', description='Whether to return the online status', example='true'),
  status?: string(name='Status', description='Flow status', example='NORMAL'),
}

model ListChatFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details, this field is returned only when RAM verification fails.', example='无'),
  code?: string(name='Code', description='System error code. For more details on error codes, please refer to the error code documentation.', example='示例值示例值'),
  message?: string(name='Message', description='Error message.', example='示例值示例值'),
  requestId?: string(name='RequestId', description='Request ID.', example='示例值示例值'),
  response?: map[string]any(name='Response', description='Response data', example='无'),
  success?: boolean(name='Success', description='Whether the request was successful.', example='true'),
}

model ListChatFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChatFlowResponseBody(name='body'),
}

/**
 * @summary List Flows
 *
 * @param tmpReq ListChatFlowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListChatFlowResponse
 */
async function listChatFlowWithOptions(tmpReq: ListChatFlowRequest, runtime: Util.RuntimeOptions): ListChatFlowResponse {
  Util.validateModel(tmpReq);
  var request = new ListChatFlowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bizExtend)) {
    request.bizExtendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizExtend, 'BizExtend', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.bizExtendShrink)) {
    query['BizExtend'] = request.bizExtendShrink;
  }
  if (!Util.isUnset(request.flowTriggerType)) {
    query['FlowTriggerType'] = request.flowTriggerType;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.returnWithOnlineVersion)) {
    query['ReturnWithOnlineVersion'] = request.returnWithOnlineVersion;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListChatFlow',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List Flows
 *
 * @param request ListChatFlowRequest
 * @return ListChatFlowResponse
 */
async function listChatFlow(request: ListChatFlowRequest): ListChatFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return listChatFlowWithOptions(request, runtime);
}

model ListChatFlowTemplateRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.

This parameter is required.', example='ALICOM_OPAAS'),
  keyword?: string(name='Keyword', description='Search keyword.', example='LLM'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo', description='Page number', example='1'),
  pageSize?: long(name='PageSize', description='Number of records per page.', example='10'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  triggerType?: string(name='TriggerType', description='Trigger type, with the following enum values:

- TriggeredManually
- TriggeredByWhatsApp
- TriggeredByInstagram
- TriggeredByViber
- TriggeredByMessenger', example='TriggeredByWhatsApp'),
}

model ListChatFlowTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  data?: {
    response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  }(name='Data', description='Returned data object.'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model ListChatFlowTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChatFlowTemplateResponseBody(name='body'),
}

/**
 * @summary ChatFlow Template List
 *
 * @param request ListChatFlowTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListChatFlowTemplateResponse
 */
async function listChatFlowTemplateWithOptions(request: ListChatFlowTemplateRequest, runtime: Util.RuntimeOptions): ListChatFlowTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.triggerType)) {
    query['TriggerType'] = request.triggerType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListChatFlowTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ChatFlow Template List
 *
 * @param request ListChatFlowTemplateRequest
 * @return ListChatFlowTemplateResponse
 */
async function listChatFlowTemplate(request: ListChatFlowTemplateRequest): ListChatFlowTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listChatFlowTemplateWithOptions(request, runtime);
}

model ListChatGroupRequest {
  businessNumber?: string(name='BusinessNumber', description='This parameter is required.', example='8613800***'),
  channelType?: string(name='ChannelType', example='WHATSAPP'),
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='cams-x***'),
  groupStatus?: string(name='GroupStatus', example='ACTIVE'),
  ownerId?: long(name='OwnerId'),
  page?: {
    index?: long(name='Index', description='This parameter is required.', example='1'),
    size?: long(name='Size', description='This parameter is required.', example='20'),
  }(name='Page', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  subject?: string(name='Subject', example='test'),
}

model ListChatGroupShrinkRequest {
  businessNumber?: string(name='BusinessNumber', description='This parameter is required.', example='8613800***'),
  channelType?: string(name='ChannelType', example='WHATSAPP'),
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='cams-x***'),
  groupStatus?: string(name='GroupStatus', example='ACTIVE'),
  ownerId?: long(name='OwnerId'),
  pageShrink?: string(name='Page', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  subject?: string(name='Subject', example='test'),
}

model ListChatGroupResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        businessNumber?: string(name='BusinessNumber', example='8613800**'),
        description?: string(name='Description', example='test'),
        groupId?: string(name='GroupId', example='EA30d***'),
        groupStatus?: string(name='GroupStatus', example='ACTIVE'),
        inviteLink?: string(name='InviteLink', example='https://chat.whatsapp.com/***'),
        profilePictureFile?: string(name='ProfilePictureFile', example='https://aliyun.com/png.jpg'),
        subject?: string(name='Subject', example='示例值示例值'),
      }
    ](name='List'),
    total?: long(name='Total', example='51'),
  }(name='Data'),
  message?: string(name='Message', example='示例值示例值'),
  requestId?: string(name='RequestId', example='示例值示例值'),
  success?: boolean(name='Success', example='true'),
}

model ListChatGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChatGroupResponseBody(name='body'),
}

/**
 * @summary ListChatGroup
 *
 * @param tmpReq ListChatGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListChatGroupResponse
 */
async function listChatGroupWithOptions(tmpReq: ListChatGroupRequest, runtime: Util.RuntimeOptions): ListChatGroupResponse {
  Util.validateModel(tmpReq);
  var request = new ListChatGroupShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.businessNumber)) {
    query['BusinessNumber'] = request.businessNumber;
  }
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.groupStatus)) {
    query['GroupStatus'] = request.groupStatus;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageShrink)) {
    query['Page'] = request.pageShrink;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.subject)) {
    query['Subject'] = request.subject;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListChatGroup',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ListChatGroup
 *
 * @param request ListChatGroupRequest
 * @return ListChatGroupResponse
 */
async function listChatGroup(request: ListChatGroupRequest): ListChatGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return listChatGroupWithOptions(request, runtime);
}

model ListChatGroupParticipantsRequest {
  businessNumber?: string(name='BusinessNumber', description='This parameter is required.', example='8613800***'),
  channelType?: string(name='ChannelType', example='WHATSAPP'),
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='cams-k***'),
  groupId?: string(name='GroupId', description='This parameter is required.', example='EA939****'),
  ownerId?: long(name='OwnerId'),
  page?: {
    index?: long(name='Index', example='1'),
    size?: long(name='Size', example='20'),
  }(name='Page'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListChatGroupParticipantsShrinkRequest {
  businessNumber?: string(name='BusinessNumber', description='This parameter is required.', example='8613800***'),
  channelType?: string(name='ChannelType', example='WHATSAPP'),
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='cams-k***'),
  groupId?: string(name='GroupId', description='This parameter is required.', example='EA939****'),
  ownerId?: long(name='OwnerId'),
  pageShrink?: string(name='Page'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListChatGroupParticipantsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        participantNumber?: string(name='ParticipantNumber', example='861382***'),
      }
    ](name='List'),
    total?: long(name='Total', example='8'),
  }(name='Data'),
  message?: string(name='Message', example='示例值'),
  requestId?: string(name='RequestId', example='E9d9****'),
  success?: boolean(name='Success', example='true'),
}

model ListChatGroupParticipantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChatGroupParticipantsResponseBody(name='body'),
}

/**
 * @summary ListChatGroupParticipants
 *
 * @param tmpReq ListChatGroupParticipantsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListChatGroupParticipantsResponse
 */
async function listChatGroupParticipantsWithOptions(tmpReq: ListChatGroupParticipantsRequest, runtime: Util.RuntimeOptions): ListChatGroupParticipantsResponse {
  Util.validateModel(tmpReq);
  var request = new ListChatGroupParticipantsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.businessNumber)) {
    query['BusinessNumber'] = request.businessNumber;
  }
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageShrink)) {
    query['Page'] = request.pageShrink;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListChatGroupParticipants',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ListChatGroupParticipants
 *
 * @param request ListChatGroupParticipantsRequest
 * @return ListChatGroupParticipantsResponse
 */
async function listChatGroupParticipants(request: ListChatGroupParticipantsRequest): ListChatGroupParticipantsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listChatGroupParticipantsWithOptions(request, runtime);
}

model ListChatappMessageRequest {
  businessNumber?: string(name='BusinessNumber', description='This parameter is required.', example='8613800****'),
  channelType?: string(name='ChannelType', description='This parameter is required.', example='WHATSAPP'),
  clientAcceptStatus?: string(name='ClientAcceptStatus', example='success'),
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='示例值示例值示例值'),
  endTime?: long(name='EndTime', example='1727057232686'),
  eventAction?: string(name='EventAction', example='UP'),
  groupMessageId?: string(name='GroupMessageId', example='9292****'),
  messageStatus?: string(name='MessageStatus', example='success'),
  ownerId?: long(name='OwnerId'),
  page?: {
    index?: long(name='Index', description='This parameter is required.', example='49'),
    size?: long(name='Size', description='This parameter is required.', example='78'),
  }(name='Page', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: long(name='StartTime', example='1727057232686'),
  templateCode?: string(name='TemplateCode', example='9938***'),
  userNumber?: string(name='UserNumber', example='86138***'),
}

model ListChatappMessageShrinkRequest {
  businessNumber?: string(name='BusinessNumber', description='This parameter is required.', example='8613800****'),
  channelType?: string(name='ChannelType', description='This parameter is required.', example='WHATSAPP'),
  clientAcceptStatus?: string(name='ClientAcceptStatus', example='success'),
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='示例值示例值示例值'),
  endTime?: long(name='EndTime', example='1727057232686'),
  eventAction?: string(name='EventAction', example='UP'),
  groupMessageId?: string(name='GroupMessageId', example='9292****'),
  messageStatus?: string(name='MessageStatus', example='success'),
  ownerId?: long(name='OwnerId'),
  pageShrink?: string(name='Page', description='This parameter is required.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  startTime?: long(name='StartTime', example='1727057232686'),
  templateCode?: string(name='TemplateCode', example='9938***'),
  userNumber?: string(name='UserNumber', example='86138***'),
}

model ListChatappMessageResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='示例值示例值示例值'),
  data?: [ 
    {
      businessNumber?: string(name='BusinessNumber', example='示例值示例值'),
      channelType?: string(name='ChannelType', example='示例值示例值示例值'),
      clientAcceptStatusName?: string(name='ClientAcceptStatusName', example='示例值示例值示例值'),
      clientReadStatus?: string(name='ClientReadStatus', example='示例值示例值'),
      clientReadStatusName?: string(name='ClientReadStatusName', example='示例值示例值'),
      conversationId?: string(name='ConversationId', example='示例值示例值'),
      eventAction?: string(name='EventAction', example='示例值示例值'),
      eventActionName?: string(name='EventActionName', example='示例值'),
      failBackContent?: string(name='FailBackContent', example='示例值'),
      failBackFlag?: string(name='FailBackFlag', example='Y'),
      failReason?: string(name='FailReason', example='示例值示例值'),
      languageCode?: string(name='LanguageCode', example='示例值示例值'),
      message?: string(name='Message', example='示例值示例值'),
      messageId?: string(name='MessageId', example='示例值'),
      messageSource?: string(name='MessageSource', example='示例值示例值'),
      messageStatus?: string(name='MessageStatus', example='示例值示例值'),
      messageStatusName?: string(name='MessageStatusName', example='示例值'),
      messageType?: string(name='MessageType', example='示例值示例值'),
      messageTypeName?: string(name='MessageTypeName', example='示例值示例值'),
      month?: string(name='Month', example='示例值示例值'),
      sendTime?: string(name='SendTime', example='示例值示例值'),
      templateCode?: string(name='TemplateCode', example='示例值示例值'),
      templateName?: string(name='TemplateName', example='示例值示例值'),
      type?: string(name='Type', example='示例值示例值'),
      uniqueMessageId?: string(name='UniqueMessageId', example='示例值示例值示例值'),
      userNumber?: string(name='UserNumber', example='示例值示例值示例值'),
    }
  ](name='Data'),
  message?: string(name='Message', example='示例值'),
  requestId?: string(name='RequestId', example='示例值'),
  success?: boolean(name='Success', example='false'),
}

model ListChatappMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChatappMessageResponseBody(name='body'),
}

/**
 * @summary 查询消息列表
 *
 * @param tmpReq ListChatappMessageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListChatappMessageResponse
 */
async function listChatappMessageWithOptions(tmpReq: ListChatappMessageRequest, runtime: Util.RuntimeOptions): ListChatappMessageResponse {
  Util.validateModel(tmpReq);
  var request = new ListChatappMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.businessNumber)) {
    query['BusinessNumber'] = request.businessNumber;
  }
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.clientAcceptStatus)) {
    query['ClientAcceptStatus'] = request.clientAcceptStatus;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.eventAction)) {
    query['EventAction'] = request.eventAction;
  }
  if (!Util.isUnset(request.groupMessageId)) {
    query['GroupMessageId'] = request.groupMessageId;
  }
  if (!Util.isUnset(request.messageStatus)) {
    query['MessageStatus'] = request.messageStatus;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageShrink)) {
    query['Page'] = request.pageShrink;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.userNumber)) {
    query['UserNumber'] = request.userNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListChatappMessage',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询消息列表
 *
 * @param request ListChatappMessageRequest
 * @return ListChatappMessageResponse
 */
async function listChatappMessage(request: ListChatappMessageRequest): ListChatappMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return listChatappMessageWithOptions(request, runtime);
}

model ListChatappTemplateRequest {
  auditStatus?: string(name='AuditStatus', description='The review state of the template. Valid values:

*   **pass**: The template is approved.
*   **fail**: The template is rejected.
*   **auditing**: The template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
  category?: string(name='Category', description='The category of the message template.', example='AUTHENTICATION'),
  code?: string(name='Code', description='The code of the message template.', example='838888822*****'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the ISV account.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business Account (WABA) ID of the RAM user within the independent software vendor (ISV) account.

>  CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', deprecated=true),
  isvCode?: string(name='IsvCode', description='The ISV verification code. This parameter is used to verify whether the RAM user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).', example='en'),
  name?: string(name='Name', description='The name of the template.', example='hello_whatsapp'),
  ownerId?: long(name='OwnerId'),
  page?: {
    index?: int32(name='Index', description='The page number. Default value: 1.

This parameter is required.', example='1'),
    size?: int32(name='Size', description='The number of entries per page. Default value: 10.

This parameter is required.', example='10'),
  }(name='Page', description='The pagination settings.', example='"page": "{\\\\"index\\\\": 1,\\\\"size\\\\": 20}'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateType?: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**', example='WHATSAPP'),
}

model ListChatappTemplateShrinkRequest {
  auditStatus?: string(name='AuditStatus', description='The review state of the template. Valid values:

*   **pass**: The template is approved.
*   **fail**: The template is rejected.
*   **auditing**: The template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
  category?: string(name='Category', description='The category of the message template.', example='AUTHENTICATION'),
  code?: string(name='Code', description='The code of the message template.', example='838888822*****'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the ISV account.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business Account (WABA) ID of the RAM user within the independent software vendor (ISV) account.

>  CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', deprecated=true),
  isvCode?: string(name='IsvCode', description='The ISV verification code. This parameter is used to verify whether the RAM user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).', example='en'),
  name?: string(name='Name', description='The name of the template.', example='hello_whatsapp'),
  ownerId?: long(name='OwnerId'),
  pageShrink?: string(name='Page', description='The pagination settings.', example='"page": "{\\\\"index\\\\": 1,\\\\"size\\\\": 20}'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateType?: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**', example='WHATSAPP'),
}

model ListChatappTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  listTemplate?: [ 
    {
      auditStatus?: string(name='AuditStatus', description='The review state of the template. Valid values:

*   **pass**: The template is approved.
*   **fail**: The template is rejected.
*   **auditing**: The template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
      category?: string(name='Category', description='The category of the WhatsApp message template. Valid values:

*   **UTILITY**
*   **MARKETING**
*   **AUTHENTICATION**

The category of the Viber template. Valid values:

*   **text**: template that contains only text
*   **image**: template that contains only images
*   **text_image_button**: template that contains text, images, and buttons
*   **text_button**: template that contains text and buttons
*   **document**: template that contains only documents
*   **video**: template that contains only videos
*   **text_video**: template that contains text and videos
*   **text_video_button**: template that contains text, videos, and buttons
*   **text_image**: template that contains text and images', example='TRANSACTIONAL'),
      language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).', example='en'),
      lastUpdateTime?: long(name='LastUpdateTime', description='The time when the template was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1711006633000'),
      reason?: string(name='Reason', description='The reason why the template was rejected.', example='None'),
      templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
      templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
      templateType?: string(name='TemplateType', description='The type of the template. Valid values: WHATSAPP and VIBER.', example='WHATSAPP'),
    }
  ](name='ListTemplate', description='The message templates.'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='false'),
  total?: int32(name='Total', description='The total number of returned entries.', example='1'),
}

model ListChatappTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChatappTemplateResponseBody(name='body'),
}

/**
 * @summary Queries message templates.
 *
 * @description ### QPS limit
 * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param tmpReq ListChatappTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListChatappTemplateResponse
 */
async function listChatappTemplateWithOptions(tmpReq: ListChatappTemplateRequest, runtime: Util.RuntimeOptions): ListChatappTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new ListChatappTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.auditStatus)) {
    query['AuditStatus'] = request.auditStatus;
  }
  if (!Util.isUnset(request.category)) {
    query['Category'] = request.category;
  }
  if (!Util.isUnset(request.code)) {
    query['Code'] = request.code;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageShrink)) {
    query['Page'] = request.pageShrink;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries message templates.
 *
 * @description ### QPS limit
 * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ListChatappTemplateRequest
 * @return ListChatappTemplateResponse
 */
async function listChatappTemplate(request: ListChatappTemplateRequest): ListChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listChatappTemplateWithOptions(request, runtime);
}

model ListFlowRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值'),
  flowName?: string(name='FlowName', example='示例值'),
  ownerId?: long(name='OwnerId'),
  page?: {
    index?: int32(name='Index'),
    size?: int32(name='Size'),
  }(name='Page'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListFlowShrinkRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值'),
  flowName?: string(name='FlowName', example='示例值'),
  ownerId?: long(name='OwnerId'),
  pageShrink?: string(name='Page'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: [ 
    {
      categories?: [ string ](name='Categories', description='The categories of the Flows.'),
      flowId?: string(name='FlowId', description='The Flow ID.', example='3939393***'),
      flowName?: string(name='FlowName', description='The Flow name.', example='flow-02020'),
    }
  ](name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='1612C226-E271-4CFE-9F18-4066D550F91B'),
}

model ListFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowResponseBody(name='body'),
}

/**
 * @summary Queries a list of Flows.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param tmpReq ListFlowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFlowResponse
 */
async function listFlowWithOptions(tmpReq: ListFlowRequest, runtime: Util.RuntimeOptions): ListFlowResponse {
  Util.validateModel(tmpReq);
  var request = new ListFlowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.flowName)) {
    query['FlowName'] = request.flowName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageShrink)) {
    query['Page'] = request.pageShrink;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFlow',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries a list of Flows.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ListFlowRequest
 * @return ListFlowResponse
 */
async function listFlow(request: ListFlowRequest): ListFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFlowWithOptions(request, runtime);
}

model ListFlowNodePrototypeV2Request {
  bizCode?: string(name='BizCode', description='This parameter is required.', example='ALICOM_OPAAS'),
  groupCode?: string(name='GroupCode', example='Core'),
  keyword?: string(name='Keyword', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo', description='This parameter is required.', example='1'),
  pageSize?: long(name='PageSize', description='This parameter is required.', example='20'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListFlowNodePrototypeV2ResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: long(name='Code', example='91'),
  data?: {
    model?: [ 
      {
        code?: string(name='Code', example='示例值示例值'),
        groupCode?: string(name='GroupCode', example='示例值示例值'),
        publicExtend?: string(name='PublicExtend', example='示例值示例值'),
        status?: string(name='Status', example='示例值示例值'),
      }
    ](name='Model'),
  }(name='Data'),
  message?: string(name='Message', example='示例值示例值'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model ListFlowNodePrototypeV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowNodePrototypeV2ResponseBody(name='body'),
}

/**
 * @summary ListFlowNodePrototypeV2
 *
 * @param request ListFlowNodePrototypeV2Request
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFlowNodePrototypeV2Response
 */
async function listFlowNodePrototypeV2WithOptions(request: ListFlowNodePrototypeV2Request, runtime: Util.RuntimeOptions): ListFlowNodePrototypeV2Response {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.groupCode)) {
    query['GroupCode'] = request.groupCode;
  }
  if (!Util.isUnset(request.keyword)) {
    query['Keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFlowNodePrototypeV2',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary ListFlowNodePrototypeV2
 *
 * @param request ListFlowNodePrototypeV2Request
 * @return ListFlowNodePrototypeV2Response
 */
async function listFlowNodePrototypeV2(request: ListFlowNodePrototypeV2Request): ListFlowNodePrototypeV2Response {
  var runtime = new Util.RuntimeOptions{};
  return listFlowNodePrototypeV2WithOptions(request, runtime);
}

model ListFlowVersionRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo', description='Current page number.', example='1'),
  pageSize?: long(name='PageSize', description='Page size.', example='5'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', description='Flow version status.', example='DRAFT'),
}

model ListFlowVersionShrinkRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtendShrink?: string(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  ownerId?: long(name='OwnerId'),
  pageNo?: long(name='PageNo', description='Current page number.', example='1'),
  pageSize?: long(name='PageSize', description='Page size.', example='5'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', description='Flow version status.', example='DRAFT'),
}

model ListFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denied.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Whether the operation was successful. Values: true: success; false: failure.', example='false'),
}

model ListFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowVersionResponseBody(name='body'),
}

/**
 * @summary List Flow Versions
 *
 * @param tmpReq ListFlowVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListFlowVersionResponse
 */
async function listFlowVersionWithOptions(tmpReq: ListFlowVersionRequest, runtime: Util.RuntimeOptions): ListFlowVersionResponse {
  Util.validateModel(tmpReq);
  var request = new ListFlowVersionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bizExtend)) {
    request.bizExtendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizExtend, 'BizExtend', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.bizExtendShrink)) {
    query['BizExtend'] = request.bizExtendShrink;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNo)) {
    query['PageNo'] = request.pageNo;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListFlowVersion',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary List Flow Versions
 *
 * @param request ListFlowVersionRequest
 * @return ListFlowVersionResponse
 */
async function listFlowVersion(request: ListFlowVersionRequest): ListFlowVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFlowVersionWithOptions(request, runtime);
}

model ListPhoneMessageQrdlRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='This parameter is required.', example='示例值'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListPhoneMessageQrdlResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: [ 
    {
      deepLinkUrl?: string(name='DeepLinkUrl', description='The URL of the deep link.', example='https://wa.msg/'),
      generateQrImage?: string(name='GenerateQrImage', description='The format of the generated image.', example='PNG'),
      phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800'),
      prefilledMessage?: string(name='PrefilledMessage', description='The message content.', example='Hello'),
      qrImageUrl?: string(name='QrImageUrl', description='The URL of the QR code.', example='https://img.png'),
      qrdlCode?: string(name='QrdlCode', description='The mode of the quick-response (QR) code.', example='IUIED999'),
    }
  ](name='Data', description='The returned data.'),
  message?: string(name='Message', description='Error description information.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model ListPhoneMessageQrdlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPhoneMessageQrdlResponseBody(name='body'),
}

/**
 * @summary Queries the information about a list of quick-response (QR) codes that contain messages.
 *
 * @param request ListPhoneMessageQrdlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPhoneMessageQrdlResponse
 */
async function listPhoneMessageQrdlWithOptions(request: ListPhoneMessageQrdlRequest, runtime: Util.RuntimeOptions): ListPhoneMessageQrdlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPhoneMessageQrdl',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the information about a list of quick-response (QR) codes that contain messages.
 *
 * @param request ListPhoneMessageQrdlRequest
 * @return ListPhoneMessageQrdlResponse
 */
async function listPhoneMessageQrdl(request: ListPhoneMessageQrdlRequest): ListPhoneMessageQrdlResponse {
  var runtime = new Util.RuntimeOptions{};
  return listPhoneMessageQrdlWithOptions(request, runtime);
}

model ListProductRequest {
  after?: string(name='After', description='The cursor that points to the end of the page of the returned data.', example='kdkii48jfjjei3'),
  before?: string(name='Before', description='The cursor that points to the beginning of the page of the returned data.', example='wiidkd939kek93'),
  catalogId?: string(name='CatalogId', description='The catalog ID.

This parameter is required.', example='29398389292'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.', example='C29398388383'),
  fields?: string(name='Fields', description='The fields. Separate multiple fields with commas (,).

 see [product fields](https://help.aliyun.com/document_detail/2579419.html)', example='id,name'),
  limit?: long(name='Limit', description='The number of products to be queried. Valid values: 1 to 1000.', example='73'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  wabaId?: string(name='WabaId', description='The ID of the WhatsApp Business account (WABA).

This parameter is required.', example='38487474747'),
}

model ListProductResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  model?: {
    data?: [  map[string]any ](name='Data', description='The returned data.'),
    paging?: {
      cursors?: {
        after?: string(name='After', description='The cursor that points to the end of the page of the returned data.', example='sjsuueu83838'),
        before?: string(name='Before', description='The cursor that points to the beginning of the page of the returned data.', example='sjjsjdjjdjd83883'),
      }(name='Cursors', description='The cursors for pagination.'),
    }(name='Paging', description='The pagination details.'),
  }(name='Model', description='The returned data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ListProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductResponseBody(name='body'),
}

/**
 * @summary Queries products in a product catalog.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ListProductRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProductResponse
 */
async function listProductWithOptions(request: ListProductRequest, runtime: Util.RuntimeOptions): ListProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.after)) {
    query['After'] = request.after;
  }
  if (!Util.isUnset(request.before)) {
    query['Before'] = request.before;
  }
  if (!Util.isUnset(request.catalogId)) {
    query['CatalogId'] = request.catalogId;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.fields)) {
    query['Fields'] = request.fields;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.wabaId)) {
    query['WabaId'] = request.wabaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProduct',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries products in a product catalog.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ListProductRequest
 * @return ListProductResponse
 */
async function listProduct(request: ListProductRequest): ListProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductWithOptions(request, runtime);
}

model ListProductCatalogRequest {
  after?: string(name='After', description='The cursor that points to the end of the page of the returned data.', example='kdkii48jfjjei3'),
  before?: string(name='Before', description='The cursor that points to the beginning of the page of the returned data.', example='wiidkd939kek93'),
  businessId?: long(name='BusinessId', description='The Business Manager ID.

This parameter is required.', example='28'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.', example='293483938849493'),
  fields?: string(name='Fields', description='The fields. Separate multiple fields with commas (,).
see  [catalog fields](https://help.aliyun.com/document_detail/2579419.html)', example='id,name'),
  limit?: long(name='Limit', description='The number of catalogs to be queried. Valid values: 1 to 1000.', example='73'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ListProductCatalogResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  model?: {
    data?: [  map[string]any ](name='Data', description='The returned data.'),
    paging?: {
      cursors?: {
        after?: string(name='After', description='The cursor that points to the end of the page of the returned data.', example='sjsuueu83838'),
        before?: string(name='Before', description='The cursor that points to the beginning of the page of the returned data.', example='sjjsjdjjdjd83883'),
      }(name='Cursors', description='The cursors for pagination.'),
    }(name='Paging', description='The pagination details.'),
  }(name='Model', description='The returned data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ListProductCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductCatalogResponseBody(name='body'),
}

/**
 * @summary Queries the product catalogs on the Business Manager platform of Meta.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ListProductCatalogRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProductCatalogResponse
 */
async function listProductCatalogWithOptions(request: ListProductCatalogRequest, runtime: Util.RuntimeOptions): ListProductCatalogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.after)) {
    query['After'] = request.after;
  }
  if (!Util.isUnset(request.before)) {
    query['Before'] = request.before;
  }
  if (!Util.isUnset(request.businessId)) {
    query['BusinessId'] = request.businessId;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.fields)) {
    query['Fields'] = request.fields;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProductCatalog',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the product catalogs on the Business Manager platform of Meta.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ListProductCatalogRequest
 * @return ListProductCatalogResponse
 */
async function listProductCatalog(request: ListProductCatalogRequest): ListProductCatalogResponse {
  var runtime = new Util.RuntimeOptions{};
  return listProductCatalogWithOptions(request, runtime);
}

model ModifyChatappTemplateRequest {
  category?: string(name='Category', description='The category of the Viber message template. Valid values:

*   **text**: the template that contains only text
*   **image**: the template that contains only images
*   **text_image_button**: the template that contains text, images, and buttons
*   **text_button**: the template that contains text and buttons
*   **document**: the template that contains only documents
*   **video**: the template that contains only videos
*   **text_video**: the template that contains text and videos
*   **text_video_button**: the template that contains text, videos, and buttons
*   **text_image**: the template that contains text and images

> This parameter applies only to Viber message templates.', example='text'),
  categoryChangePaused?: boolean(name='CategoryChangePaused'),
  components?: [ 
    {
      addSecretRecommendation?: boolean(name='AddSecretRecommendation', description='The note indicating that customers cannot share verification codes with others. The note is displayed in the message body. This parameter is valid if Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to BODY for a WhatsApp message template.', example='false'),
      buttons?: [ 
        {
          autofillText?: string(name='AutofillText', description='The text of the one-tap autofill button. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP for a WhatsApp message template.', example='Autofill'),
          couponCode?: string(name='CouponCode', description='The coupon code. It can contain only letters and digits. You can set this parameter to a variable such as $(couponCode). Specify the value of couponCode when you send a message.', example='120293'),
          flowAction?: string(name='FlowAction', description='The Flow action.

Valid values:

*   DATA_EXCHANGE
*   NAVIGATE', example='NAVIGATE'),
          flowId?: string(name='FlowId', description='The Flow ID.', example='664597077870605'),
          isOptOut?: boolean(name='IsOptOut', description='The unsubscribe button. This parameter is valid if Category is set to MARKETING and the Type sub-parameter of the Buttons parameter is set to QUICK_REPLY for a WhatsApp message template. Marketing messages will not be sent to customers if you configure message sending in the Chat App Message Service console and the customers click this button.', example='false'),
          navigateScreen?: string(name='NavigateScreen', description='The first screen in the Flow. This parameter is required if FlowAction is set to NAVIGATE.', example='DETAILS'),
          packageName?: string(name='PackageName', description='The app package name that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP for a WhatsApp message template.', example='com.demo', deprecated=true),
          phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='+8613888887889'),
          signatureHash?: string(name='SignatureHash', description='The app signing key hash that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP for a WhatsApp message template.', example='29dkeke', deprecated=true),
          supportedApps?: [ 
            {
              packageName?: string(name='PackageName', description='The Whatsapp template is required when the Category is\\\\" Authorisation \\\\"and the Button Type is\\\\" ONE_TAP/ZERO-TAP\\\\", indicating the signature hash value of the Whatsapp call application.', example='com.example.myapplication'),
              signatureHash?: string(name='SignatureHash', description='The Whatsapp template is required when the Category is\\\\" Authorisation \\\\"and the Button Type is\\\\" ONE_TAP/ZERO-TAP\\\\", indicating the signature hash value of the Whatsapp call application.', example='fk39kd93ks9'),
            }
          ](name='SupportedApps', description='List of supported apps.'),
          text?: string(name='Text', description='The text of the button.', example='phone-button-text'),
          type?: string(name='Type', description='The button type. Valid values:

*   **PHONE_NUMBER**: phone call button
*   **URL**: URL button
*   **QUICK_REPLY**: quick reply button
*   **COPY_CODE**: copy code button
*   **ONE_TAP**: one-tap autofill button if Category is set to AUTHENTICATION

> 

*   If Category is set to AUTHENTICATION for a WhatsApp message template, you can add only one button to the WhatsApp message template and you must set the Type sub-parameter of the Buttons parameter to COPY_CODE or ONE_TAP. If Type is set to COPY_CODE, the Text sub-parameter of the Buttons parameter is required. If Type is set to ONE_TAP, the Text, SignatureHash, PackageName, and AutofillText sub-parameters of the Buttons parameter are required. The value of Text is displayed if the desired app is not installed on the device. The value of Text indicates that you must manually copy the verification code.

*   You can add only one button to a Viber message template, and you must set the Type sub-parameter of the Buttons parameter to URL.

This parameter is required.', example='PHONE_NUMBER'),
          url?: string(name='Url', description='The URL to which you are redirected when you click the URL button.', example='https://www.website.com/'),
          urlType?: string(name='UrlType', description='The URL type. Valid values:

*   **static**
*   **dynamic**', example='dynamic'),
        }
      ](name='Buttons', description='The buttons. Specify this parameter only if you set the Type sub-parameter of the Components parameter to **BUTTONS**.

>  ####

*   A marketing or utility WhatsApp message template can contain up to 10 buttons.

*   A WhatsApp message template can contain only one phone call button.

*   A WhatsApp message template can contain up to two URL buttons.

*   In a WhatsApp message template, a quick reply button cannot be used together with a phone call button or a URL button.'),
      caption?: string(name='Caption', description='The description of the media resource.

>  If the Type sub-parameter of the Components parameter is set to **HEADER** and the Format parameter is set to **IMAGE, DOCUMENT, or VIDEO**, you can specify this parameter.', example='This is a video'),
      cards?: [ 
        {
          cardComponents?: [ 
            {
              buttons?: [ 
                {
                  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='+8613800'),
                  text?: string(name='Text', description='The text of the button.', example='Call me'),
                  type?: string(name='Type', description='The button type. Valid values:

*   **PHONE_NUMBER**: phone call button
*   **URL**: URL button
*   **QUICK_REPLY**: quick reply button

This parameter is required.', example='PHONE_NUMBER'),
                  url?: string(name='Url', description='The URL to which you are redirected when you click the URL button.', example='https://alibaba.com/xx'),
                  urlType?: string(name='UrlType', description='The URL type. Valid values:

*   **static**
*   **dynamic**', example='static'),
                }
              ](name='Buttons', description='The buttons. Specify this parameter only if you set the Type sub-parameter of the CardComponents parameter to BUTTONS. A carousel card can contain up to two buttons.'),
              format?: string(name='Format', description='The type of the media resource. This parameter is valid if the Type sub-parameter of the CardComponents parameter is set to HEADER. Valid values:

*   **IMAGE**
*   **VIDEO**', example='IMAGE'),
              text?: string(name='Text', description='The body content of the carousel card.', example='Who is the very powerful team'),
              type?: string(name='Type', description='The component type. Valid values:

*   **BODY**
*   **HEADER**
*   **BUTTONS**

This parameter is required.', example='BODY'),
              url?: string(name='Url', description='The URL of the media resource.', example='https://alibaba.com/img.png'),
            }
          ](name='CardComponents', description='The components of the carousel card.

This parameter is required.'),
        }
      ](name='Cards', description='The carousel cards of the carousel template.'),
      codeExpirationMinutes?: int32(name='CodeExpirationMinutes', description='The validity period of the verification code in the WhatsApp authentication template. Unit: minutes. This parameter is valid only when Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to FOOTER. The validity period of the verification code is displayed in the footer.', example='5'),
      duration?: int32(name='Duration', description='The length of the video in the Viber message template. Unit: seconds. Valid values: 0 to 600.', example='120'),
      fileName?: string(name='FileName', description='The name of the document.

>  If the Type sub-parameter of the Components parameter is set to **HEADER** and the Format parameter is set to **DOCUMENT**, you can specify this parameter.', example='video name'),
      fileType?: string(name='FileType', description='The type of the document attached in the Viber message template.', example='docx'),
      format?: string(name='Format', description='The type of the media resource. Valid values:

*   **TEXT**
*   **IMAGE**
*   **DOCUMENT**
*   **VIDEO**', example='TEXT'),
      hasExpiration?: boolean(name='HasExpiration', description='Specifies whether the coupon code has an expiration time. Specify this parameter if the Type sub-parameter of the Components parameter is set to LIMITED_TIME_OFFER.', example='true'),
      text?: string(name='Text', description='The text of the message that you want to send.

>  If Category is set to AUTHENTICATION, do not specify the Text sub-parameter of the Components parameter.', example='hello chatapp'),
      thumbUrl?: string(name='ThumbUrl', description='The thumbnail URL of the video in the Viber message template.', example='https://cdn.multiplymall.mobiapp.cloud/cloudcode/yc-165407506207478-165511576113195/20220905/ec5b9737-1507-4208-bb27-8da3958da961.jpg?x-oss-process=image/resize,w_100'),
      type?: string(name='Type', description='The component type. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**
*   **CAROUSEL**
*   **LIMITED_TIME_OFFER**

> 

*   In a WhatsApp message template, a **Body** component cannot exceed 1,024 characters in length. A **HEADER** or **FOOTER** component cannot exceed 60 characters in length.

*   **FOOTER**, **CAROUSEL**, and **LIMITED_TIME_OFFER** components are not supported in Viber message templates.

*   In Viber message templates, media resources such as images, videos, and documents are placed in the **HEADER** component. If a Viber message contains text and an image, the image is placed below the text in the message received on a device.

This parameter is required.', example='BODY'),
      url?: string(name='Url', description='The URL of the media resource.', example='https://img.tukuppt.com/png_preview/00/10/24/1GygxVK3F4.jpg'),
    }
  ](name='Components', description='The components of the message template.

>  If Category is set to AUTHENTICATION, the Type sub-parameter of the Components parameter cannot be set to HEADER. If the Type sub-parameter is set to BODY or FOOTER, you do not need to set the Text sub-parameter of the Components parameter because the value is automatically generated.

This parameter is required.'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business account (WABA) ID of the user within the independent software vendor (ISV) account.

> CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='659216218162179', deprecated=true),
  example?: map[string]string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='ksiekdki39ksks93939'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).

This parameter is required.', example='en'),
  messageSendTtlSeconds?: int32(name='MessageSendTtlSeconds', description='Validity period of authentication template message sending in WhatsApp

>This attribute requires providing waba in advance to Alibaba operators to open the whitelist, otherwise it will result in template submission failure', example='120'),
  templateCode?: string(name='TemplateCode', description='The message template code.', example='8472929283883'),
  templateName?: string(name='TemplateName', description='Template name.', example='test_name'),
  templateType?: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**
*   LINE: the Line message template. This type of message template will be released later.', example='WHATSAPP'),
}

model ModifyChatappTemplateShrinkRequest {
  category?: string(name='Category', description='The category of the Viber message template. Valid values:

*   **text**: the template that contains only text
*   **image**: the template that contains only images
*   **text_image_button**: the template that contains text, images, and buttons
*   **text_button**: the template that contains text and buttons
*   **document**: the template that contains only documents
*   **video**: the template that contains only videos
*   **text_video**: the template that contains text and videos
*   **text_video_button**: the template that contains text, videos, and buttons
*   **text_image**: the template that contains text and images

> This parameter applies only to Viber message templates.', example='text'),
  categoryChangePaused?: boolean(name='CategoryChangePaused'),
  componentsShrink?: string(name='Components', description='The components of the message template.

>  If Category is set to AUTHENTICATION, the Type sub-parameter of the Components parameter cannot be set to HEADER. If the Type sub-parameter is set to BODY or FOOTER, you do not need to set the Text sub-parameter of the Components parameter because the value is automatically generated.

This parameter is required.'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business account (WABA) ID of the user within the independent software vendor (ISV) account.

> CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='659216218162179', deprecated=true),
  exampleShrink?: string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='ksiekdki39ksks93939'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).

This parameter is required.', example='en'),
  messageSendTtlSeconds?: int32(name='MessageSendTtlSeconds', description='Validity period of authentication template message sending in WhatsApp

>This attribute requires providing waba in advance to Alibaba operators to open the whitelist, otherwise it will result in template submission failure', example='120'),
  templateCode?: string(name='TemplateCode', description='The message template code.', example='8472929283883'),
  templateName?: string(name='TemplateName', description='Template name.', example='test_name'),
  templateType?: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**
*   LINE: the Line message template. This type of message template will be released later.', example='WHATSAPP'),
}

model ModifyChatappTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='8472929283883'),
    templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='NONE'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ModifyChatappTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyChatappTemplateResponseBody(name='body'),
}

/**
 * @summary The code of the message template.
 *
 * @description The name of the message template.
 *
 * @param tmpReq ModifyChatappTemplateRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyChatappTemplateResponse
 */
async function modifyChatappTemplateWithOptions(tmpReq: ModifyChatappTemplateRequest, runtime: Util.RuntimeOptions): ModifyChatappTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyChatappTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.components)) {
    request.componentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.components, 'Components', 'json');
  }
  if (!Util.isUnset(tmpReq.example)) {
    request.exampleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.example, 'Example', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.categoryChangePaused)) {
    body['CategoryChangePaused'] = request.categoryChangePaused;
  }
  if (!Util.isUnset(request.componentsShrink)) {
    body['Components'] = request.componentsShrink;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.exampleShrink)) {
    body['Example'] = request.exampleShrink;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.messageSendTtlSeconds)) {
    body['MessageSendTtlSeconds'] = request.messageSendTtlSeconds;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary The code of the message template.
 *
 * @description The name of the message template.
 *
 * @param request ModifyChatappTemplateRequest
 * @return ModifyChatappTemplateResponse
 */
async function modifyChatappTemplate(request: ModifyChatappTemplateRequest): ModifyChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyChatappTemplateWithOptions(request, runtime);
}

model ModifyChatappTemplatePropertiesRequest {
  allowSend?: boolean(name='AllowSend', example='true'),
  categoryChangePaused?: boolean(name='CategoryChangePaused', example='false'),
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='cams-idk***'),
  language?: string(name='Language', description='This parameter is required.', example='zh_CN'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  templateCode?: string(name='TemplateCode', description='This parameter is required.', example='929938***'),
  templateType?: string(name='TemplateType', description='This parameter is required.', example='WHATSAPP'),
}

model ModifyChatappTemplatePropertiesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='示例值'),
  message?: string(name='Message', example='示例值示例值'),
  model?: map[string]any(name='Model', example='true'),
  requestId?: string(name='RequestId', example='示例值示例值示例值'),
  success?: boolean(name='Success', example='false'),
}

model ModifyChatappTemplatePropertiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyChatappTemplatePropertiesResponseBody(name='body'),
}

/**
 * @summary 修改模板上的一些属性
 *
 * @param request ModifyChatappTemplatePropertiesRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyChatappTemplatePropertiesResponse
 */
async function modifyChatappTemplatePropertiesWithOptions(request: ModifyChatappTemplatePropertiesRequest, runtime: Util.RuntimeOptions): ModifyChatappTemplatePropertiesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allowSend)) {
    query['AllowSend'] = request.allowSend;
  }
  if (!Util.isUnset(request.categoryChangePaused)) {
    query['CategoryChangePaused'] = request.categoryChangePaused;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateType)) {
    query['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyChatappTemplateProperties',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 修改模板上的一些属性
 *
 * @param request ModifyChatappTemplatePropertiesRequest
 * @return ModifyChatappTemplatePropertiesResponse
 */
async function modifyChatappTemplateProperties(request: ModifyChatappTemplatePropertiesRequest): ModifyChatappTemplatePropertiesResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyChatappTemplatePropertiesWithOptions(request, runtime);
}

model ModifyFlowRequest {
  categories?: [ string ](name='Categories', description='This parameter is required.'),
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值'),
  flowId?: string(name='FlowId', example='示例值'),
  flowName?: string(name='FlowName', description='This parameter is required.', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyFlowShrinkRequest {
  categoriesShrink?: string(name='Categories', description='This parameter is required.'),
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值'),
  flowId?: string(name='FlowId', example='示例值'),
  flowName?: string(name='FlowName', description='This parameter is required.', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: {
    categories?: [ string ](name='Categories', description='The categories of the Flow.'),
    flowId?: string(name='FlowId', description='The Flow ID.', example='3939399****'),
    flowName?: string(name='FlowName', description='The Flow name.', example='flow-00203'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='1612C226-E271-4CFE-9F18-4066D******'),
}

model ModifyFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFlowResponseBody(name='body'),
}

/**
 * @summary Modifies the basic information about a Flow.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param tmpReq ModifyFlowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyFlowResponse
 */
async function modifyFlowWithOptions(tmpReq: ModifyFlowRequest, runtime: Util.RuntimeOptions): ModifyFlowResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyFlowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.categories)) {
    request.categoriesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.categories, 'Categories', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.categoriesShrink)) {
    query['Categories'] = request.categoriesShrink;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  if (!Util.isUnset(request.flowName)) {
    query['FlowName'] = request.flowName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyFlow',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the basic information about a Flow.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request ModifyFlowRequest
 * @return ModifyFlowResponse
 */
async function modifyFlow(request: ModifyFlowRequest): ModifyFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyFlowWithOptions(request, runtime);
}

model ModifyPhoneBusinessProfileRequest {
  about?: string(name='About', description='The business information.', example='business profile'),
  address?: string(name='Address', description='The address.', example='The phone number.'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849****'),
  description?: string(name='Description', description='The description of the phone number.', example='test'),
  email?: string(name='Email', description='The email address.', example='aa@aliyun.com'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='The mobile phone number.

This parameter is required.', example='8613800001234'),
  profilePictureUrl?: string(name='ProfilePictureUrl', description='The URL of the profile picture.', example='http://a.img'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vertical?: string(name='Vertical', description='The industry.

>  Valid values: OTHER, AUTO, BEAUTY, APPAREL, EDU, ENTERTAIN, EVENT_PLAN, FINANCE, GROCERY, GOVT, HOTEL, HEALTH, NONPROFIT, PROF_SERVICES, RETAIL, TRAVEL, and RESTAURANT.', example='OTHER'),
  websites?: [ string ](name='Websites', description='The URLs of the websites.'),
}

model ModifyPhoneBusinessProfileShrinkRequest {
  about?: string(name='About', description='The business information.', example='business profile'),
  address?: string(name='Address', description='The address.', example='The phone number.'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849****'),
  description?: string(name='Description', description='The description of the phone number.', example='test'),
  email?: string(name='Email', description='The email address.', example='aa@aliyun.com'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='The mobile phone number.

This parameter is required.', example='8613800001234'),
  profilePictureUrl?: string(name='ProfilePictureUrl', description='The URL of the profile picture.', example='http://a.img'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  vertical?: string(name='Vertical', description='The industry.

>  Valid values: OTHER, AUTO, BEAUTY, APPAREL, EDU, ENTERTAIN, EVENT_PLAN, FINANCE, GROCERY, GOVT, HOTEL, HEALTH, NONPROFIT, PROF_SERVICES, RETAIL, TRAVEL, and RESTAURANT.', example='OTHER'),
  websitesShrink?: string(name='Websites', description='The URLs of the websites.'),
}

model ModifyPhoneBusinessProfileResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The URL of the website.', example='OK'),
  message?: string(name='Message', description='The ID of the request.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The websites.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ModifyPhoneBusinessProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPhoneBusinessProfileResponseBody(name='body'),
}

/**
 * @summary The ID of the request.
 *
 * @description ModifyPhoneBusinessProfile
 *
 * @param tmpReq ModifyPhoneBusinessProfileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ModifyPhoneBusinessProfileResponse
 */
async function modifyPhoneBusinessProfileWithOptions(tmpReq: ModifyPhoneBusinessProfileRequest, runtime: Util.RuntimeOptions): ModifyPhoneBusinessProfileResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyPhoneBusinessProfileShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.websites)) {
    request.websitesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.websites, 'Websites', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.about)) {
    query['About'] = request.about;
  }
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.profilePictureUrl)) {
    query['ProfilePictureUrl'] = request.profilePictureUrl;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.vertical)) {
    query['Vertical'] = request.vertical;
  }
  if (!Util.isUnset(request.websitesShrink)) {
    query['Websites'] = request.websitesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPhoneBusinessProfile',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary The ID of the request.
 *
 * @description ModifyPhoneBusinessProfile
 *
 * @param request ModifyPhoneBusinessProfileRequest
 * @return ModifyPhoneBusinessProfileResponse
 */
async function modifyPhoneBusinessProfile(request: ModifyPhoneBusinessProfileRequest): ModifyPhoneBusinessProfileResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPhoneBusinessProfileWithOptions(request, runtime);
}

model OfflineFlowVersionRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1'),
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark', description='Flow remarks', example='We don\\\\"t need this old version.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model OfflineFlowVersionShrinkRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtendShrink?: string(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1'),
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark', description='Flow remarks', example='We don\\\\"t need this old version.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model OfflineFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details; this field is only returned when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Status code.', example='示例值示例值'),
  message?: string(name='Message', description='Error message.', example='示例值示例值'),
  requestId?: string(name='RequestId', description='Request ID.', example='示例值示例值'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. true means success, false means failure.', example='true'),
}

model OfflineFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OfflineFlowVersionResponseBody(name='body'),
}

/**
 * @summary Offline Flow Version
 *
 * @param tmpReq OfflineFlowVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OfflineFlowVersionResponse
 */
async function offlineFlowVersionWithOptions(tmpReq: OfflineFlowVersionRequest, runtime: Util.RuntimeOptions): OfflineFlowVersionResponse {
  Util.validateModel(tmpReq);
  var request = new OfflineFlowVersionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bizExtend)) {
    request.bizExtendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizExtend, 'BizExtend', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.bizExtendShrink)) {
    query['BizExtend'] = request.bizExtendShrink;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.flowVersion)) {
    query['FlowVersion'] = request.flowVersion;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OfflineFlowVersion',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Offline Flow Version
 *
 * @param request OfflineFlowVersionRequest
 * @return OfflineFlowVersionResponse
 */
async function offlineFlowVersion(request: OfflineFlowVersionRequest): OfflineFlowVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return offlineFlowVersionWithOptions(request, runtime);
}

model OnlineFlowVersionRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1'),
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark', description='Remark', example='Let\\\\"s go online.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model OnlineFlowVersionShrinkRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtendShrink?: string(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1'),
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark', description='Remark', example='Let\\\\"s go online.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model OnlineFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denial.', example='无'),
  code?: string(name='Code', description='Status code.', example='示例值'),
  message?: string(name='Message', description='Error message.', example='示例值示例值示例值'),
  requestId?: string(name='RequestId', description='Request ID.', example='示例值示例值'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. true means success, false means failure.', example='true'),
}

model OnlineFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OnlineFlowVersionResponseBody(name='body'),
}

/**
 * @summary Online Flow Version
 *
 * @param tmpReq OnlineFlowVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return OnlineFlowVersionResponse
 */
async function onlineFlowVersionWithOptions(tmpReq: OnlineFlowVersionRequest, runtime: Util.RuntimeOptions): OnlineFlowVersionResponse {
  Util.validateModel(tmpReq);
  var request = new OnlineFlowVersionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bizExtend)) {
    request.bizExtendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizExtend, 'BizExtend', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.bizExtendShrink)) {
    query['BizExtend'] = request.bizExtendShrink;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.flowVersion)) {
    query['FlowVersion'] = request.flowVersion;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'OnlineFlowVersion',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Online Flow Version
 *
 * @param request OnlineFlowVersionRequest
 * @return OnlineFlowVersionResponse
 */
async function onlineFlowVersion(request: OnlineFlowVersionRequest): OnlineFlowVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return onlineFlowVersionWithOptions(request, runtime);
}

model PublishFlowRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值示例值'),
  flowId?: string(name='FlowId', description='This parameter is required.', example='示例值示例值示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model PublishFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model PublishFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishFlowResponseBody(name='body'),
}

/**
 * @summary Publishes a Flow.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request PublishFlowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return PublishFlowResponse
 */
async function publishFlowWithOptions(request: PublishFlowRequest, runtime: Util.RuntimeOptions): PublishFlowResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'PublishFlow',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Publishes a Flow.
 *
 * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request PublishFlowRequest
 * @return PublishFlowResponse
 */
async function publishFlow(request: PublishFlowRequest): PublishFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return publishFlowWithOptions(request, runtime);
}

model QueryChatappBindWabaRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='aksik93kdkkxmwol93939'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryChatappBindWabaResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    accountReviewStatus?: string(name='AccountReviewStatus', description='The review state of the WhatsApp Business account (WABA).

>  Valid values:

*   PENDING: The WABA is to be reviewed.

*   APPROVED: The WABA was approved.

*   REJECTED: The WABA was rejected.

*   DISABLED: The WABA was forbidden.', example='APPROVED'),
    authInternationalRateEligibility?: map[string]any(name='AuthInternationalRateEligibility', description='WABA related information.'),
    businessId?: string(name='BusinessId', description='The business ID.', example='19293988***'),
    businessName?: string(name='BusinessName', description='The business name.', example='Alibaba'),
    currency?: string(name='Currency', description='The currency.', example='USD'),
    id?: string(name='Id', description='The ID of the WhatsApp Business account.', example='20393988393993***'),
    marketingMessageLiteStatus?: string(name='MarketingMessageLiteStatus', description='The Marketing Messaging Lite status.', example='Y'),
    messageTemplateNamespace?: string(name='MessageTemplateNamespace', description='The namespace of the message template.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
    name?: string(name='Name', description='The name of the WhatsApp Business account.', example='Alibaba'),
    primaryBusinessLocation?: string(name='PrimaryBusinessLocation', description='The start time when the authentication-international rate applies.', example='"start_time":1721952000'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model QueryChatappBindWabaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryChatappBindWabaResponseBody(name='body'),
}

/**
 * @summary Query the WhatsApp Business account you associate with ChatApp.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request QueryChatappBindWabaRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryChatappBindWabaResponse
 */
async function queryChatappBindWabaWithOptions(request: QueryChatappBindWabaRequest, runtime: Util.RuntimeOptions): QueryChatappBindWabaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryChatappBindWaba',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Query the WhatsApp Business account you associate with ChatApp.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request QueryChatappBindWabaRequest
 * @return QueryChatappBindWabaResponse
 */
async function queryChatappBindWaba(request: QueryChatappBindWabaRequest): QueryChatappBindWabaResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryChatappBindWabaWithOptions(request, runtime);
}

model QueryChatappPhoneNumbersRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the ISV account.', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the RAM user is authorized by the ISV account.', example='aksik93kdkkxmwol93939'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', description='The state of the phone number.', example='VERIFIED'),
}

model QueryChatappPhoneNumbersResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The message returned.', example='SUCCESS'),
  phoneNumbers?: [ 
    {
      codeVerificationStatus?: string(name='CodeVerificationStatus', description='The verification status of the phone number.

Valid values:

*   REVOKED: The review application is revoked.
*   MORE_INFORMATION_REQUESTED: More information needs to be provided.
*   VERIFIED: The phone number passes the verification.
*   REJECTED: The phone number fails to pass the verification.', example='VERIFIED'),
      isOfficial?: string(name='IsOfficial', description='Indicates whether it is a WhatsApp Official Business Account (OBA).', example='N'),
      messagingLimitTier?: string(name='MessagingLimitTier', description='The number of phone numbers to which messages can be sent in a day.

Valid values:

*   TIER_100K: 100,000
*   TIER_UNLIMITED: unlimited
*   TIER_250: 250
*   TIER_1K: 1,000
*   TIER_50: 50
*   TIER_10K: 10,000', example='TIER_10'),
      nameStatus?: string(name='NameStatus', description='The review status of the name.', example='Approval'),
      newNameStatus?: string(name='NewNameStatus', description='The review status of the new display name of the enterprise.', example='Approval'),
      phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800000'),
      qualityRating?: string(name='QualityRating', description='The quality rating of the phone number.

Valid values:

*   RED: low
*   YELLOW: medium
*   UNKNOWN: unknown
*   GREEN: high', example='GREEN'),
      status?: string(name='Status', description='The state of the phone number.

Valid values:

*   MIGRATED
*   FLAGGED
*   DISCONNECTED
*   UNVERIFIED
*   BANNED
*   RATE_LIMITED
*   PENDING
*   CONNECTED
*   UNKNOWN
*   DELETED
*   RESTRICTED', example='CONNECTED'),
      statusCallbackUrl?: string(name='StatusCallbackUrl', description='The URL that receives the status reports.', example='https://ali.com/status'),
      statusQueue?: string(name='StatusQueue', description='The status report queue.', example='Alicom-Queue-****-ChatAppStatus'),
      upCallbackUrl?: string(name='UpCallbackUrl', description='The URL that receives the MO messages.', example='https://ali.com/inbound'),
      upQueue?: string(name='UpQueue', description='The mobile originated (MO) message queue.', example='Alicom-Queue-****-ChatAppInbound'),
      verifiedName?: string(name='VerifiedName', description='The display name of the enterprise to which the phone number belongs.', example='Alibaba'),
    }
  ](name='PhoneNumbers', description='The phone numbers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model QueryChatappPhoneNumbersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryChatappPhoneNumbersResponseBody(name='body'),
}

/**
 * @summary Queries phone numbers that receive messages and statuses of these numbers under a specified user.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request QueryChatappPhoneNumbersRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryChatappPhoneNumbersResponse
 */
async function queryChatappPhoneNumbersWithOptions(request: QueryChatappPhoneNumbersRequest, runtime: Util.RuntimeOptions): QueryChatappPhoneNumbersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryChatappPhoneNumbers',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries phone numbers that receive messages and statuses of these numbers under a specified user.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request QueryChatappPhoneNumbersRequest
 * @return QueryChatappPhoneNumbersResponse
 */
async function queryChatappPhoneNumbers(request: QueryChatappPhoneNumbersRequest): QueryChatappPhoneNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryChatappPhoneNumbersWithOptions(request, runtime);
}

model QueryPhoneBusinessProfileRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.

This parameter is required.', example='2934839388494***'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.

This parameter is required.', example='8613800001234'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryPhoneBusinessProfileResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    about?: string(name='About', description='Regarding.', example='business profile'),
    address?: string(name='Address', description='The address.', example='Changsha'),
    description?: string(name='Description', description='The description.', example='Description'),
    email?: string(name='Email', description='The email address.', example='aa@aliyun.com'),
    profilePictureUrl?: string(name='ProfilePictureUrl', description='The profile picture.', example='https://....img'),
    vertical?: string(name='Vertical', description='The industry.', example='Retail'),
    websites?: [ string ](name='Websites', description='The website.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model QueryPhoneBusinessProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPhoneBusinessProfileResponseBody(name='body'),
}

/**
 * @summary Queries the business information of the account to which a specified phone number is bound.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request QueryPhoneBusinessProfileRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryPhoneBusinessProfileResponse
 */
async function queryPhoneBusinessProfileWithOptions(request: QueryPhoneBusinessProfileRequest, runtime: Util.RuntimeOptions): QueryPhoneBusinessProfileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPhoneBusinessProfile',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the business information of the account to which a specified phone number is bound.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request QueryPhoneBusinessProfileRequest
 * @return QueryPhoneBusinessProfileResponse
 */
async function queryPhoneBusinessProfile(request: QueryPhoneBusinessProfileRequest): QueryPhoneBusinessProfileResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPhoneBusinessProfileWithOptions(request, runtime);
}

model QueryWabaBusinessInfoRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493****'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  wabaId?: string(name='WabaId', description='The ID of the WhatsApp Business Account (WABA).

This parameter is required.', example='293848822333'),
}

model QueryWabaBusinessInfoResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    businessId?: string(name='BusinessId', description='The Business Manager ID.', example='192882828733'),
    businessName?: string(name='BusinessName', description='The Business Manager name.', example='Alibaba'),
    verificationStatus?: string(name='VerificationStatus', description='The verification status.', example='verified'),
    vertical?: string(name='Vertical', description='The industry.', example='Retail', deprecated=true),
  }(name='Data', description='The business information about the WABA.'),
  message?: string(name='Message', description='The error message returned.', example='None.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='false'),
}

model QueryWabaBusinessInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWabaBusinessInfoResponseBody(name='body'),
}

/**
 * @summary Queries the business information about the WhatsApp Business account (WABA).
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request QueryWabaBusinessInfoRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return QueryWabaBusinessInfoResponse
 */
async function queryWabaBusinessInfoWithOptions(request: QueryWabaBusinessInfoRequest, runtime: Util.RuntimeOptions): QueryWabaBusinessInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.wabaId)) {
    query['WabaId'] = request.wabaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryWabaBusinessInfo',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Queries the business information about the WhatsApp Business account (WABA).
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request QueryWabaBusinessInfoRequest
 * @return QueryWabaBusinessInfoResponse
 */
async function queryWabaBusinessInfo(request: QueryWabaBusinessInfoRequest): QueryWabaBusinessInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryWabaBusinessInfoWithOptions(request, runtime);
}

model ReadChatFlowRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReadChatFlowShrinkRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtendShrink?: string(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReadChatFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Detailed reason for access denial.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  message?: string(name='Message', description='Error message.', example='示例值'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true for success, false for failure.', example='false'),
}

model ReadChatFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadChatFlowResponseBody(name='body'),
}

/**
 * @summary Retrieve Flow
 *
 * @param tmpReq ReadChatFlowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReadChatFlowResponse
 */
async function readChatFlowWithOptions(tmpReq: ReadChatFlowRequest, runtime: Util.RuntimeOptions): ReadChatFlowResponse {
  Util.validateModel(tmpReq);
  var request = new ReadChatFlowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bizExtend)) {
    request.bizExtendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizExtend, 'BizExtend', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.bizExtendShrink)) {
    query['BizExtend'] = request.bizExtendShrink;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReadChatFlow',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Retrieve Flow
 *
 * @param request ReadChatFlowRequest
 * @return ReadChatFlowResponse
 */
async function readChatFlow(request: ReadChatFlowRequest): ReadChatFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return readChatFlowWithOptions(request, runtime);
}

model ReadChatFlowLogSettingRequest {
  flowCode?: string(name='FlowCode', description='Process code.', example='f4912c16943b4dfba44bd6fedacf****'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReadChatFlowLogSettingResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  data?: map[string]any(name='Data', description='Returned data.', example='无'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model ReadChatFlowLogSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadChatFlowLogSettingResponseBody(name='body'),
}

/**
 * @summary View chatFlow log settings
 *
 * @param request ReadChatFlowLogSettingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReadChatFlowLogSettingResponse
 */
async function readChatFlowLogSettingWithOptions(request: ReadChatFlowLogSettingRequest, runtime: Util.RuntimeOptions): ReadChatFlowLogSettingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReadChatFlowLogSetting',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary View chatFlow log settings
 *
 * @param request ReadChatFlowLogSettingRequest
 * @return ReadChatFlowLogSettingResponse
 */
async function readChatFlowLogSetting(request: ReadChatFlowLogSettingRequest): ReadChatFlowLogSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return readChatFlowLogSettingWithOptions(request, runtime);
}

model ReadFlowVersionRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', description='Flow version status.', example='DRAFT'),
}

model ReadFlowVersionShrinkRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtendShrink?: string(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', description='Flow version status.', example='DRAFT'),
}

model ReadFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details; this field is only returned when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Status code.', example='示例值示例值示例值'),
  message?: string(name='Message', description='Error message.', example='示例值示例值'),
  requestId?: string(name='RequestId', description='Request ID.', example='示例值'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model ReadFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadFlowVersionResponseBody(name='body'),
}

/**
 * @summary Get Flow Version
 *
 * @param tmpReq ReadFlowVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return ReadFlowVersionResponse
 */
async function readFlowVersionWithOptions(tmpReq: ReadFlowVersionRequest, runtime: Util.RuntimeOptions): ReadFlowVersionResponse {
  Util.validateModel(tmpReq);
  var request = new ReadFlowVersionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bizExtend)) {
    request.bizExtendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizExtend, 'BizExtend', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.bizExtendShrink)) {
    query['BizExtend'] = request.bizExtendShrink;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.flowVersion)) {
    query['FlowVersion'] = request.flowVersion;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReadFlowVersion',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get Flow Version
 *
 * @param request ReadFlowVersionRequest
 * @return ReadFlowVersionResponse
 */
async function readFlowVersion(request: ReadFlowVersionRequest): ReadFlowVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return readFlowVersionWithOptions(request, runtime);
}

model SendChatappMassMessageRequest {
  channelType?: string(name='ChannelType', description='The type of the channel. Valid values:

*   **whatsapp**
*   **viber**
*   **line** (under development)

This parameter is required.', example='whatsapp'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business Account (WABA) ID of the RAM user within the independent software vendor (ISV) account.

>  CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', deprecated=true),
  fallBackContent?: string(name='FallBackContent', description='The content of the fallback message.', example='Fallback message'),
  fallBackDuration?: int32(name='FallBackDuration', description='Specifies the period of time after which the fallback message is sent if the message receipt that indicates the message is delivered to clients is not received. If this parameter is left empty, the fallback message is sent only when the message fails to be sent or the message receipt that indicates the message is not delivered to clients is received. Unit: seconds. Valid values: 60 to 43200.', example='120'),
  fallBackId?: string(name='FallBackId', description='The ID of the fallback policy.', example='S00001'),
  fallBackRule?: string(name='FallBackRule', description='The fallback rule. Valid values:

*   **undelivered**: A fallback is triggered if the message is not delivered to clients. When the message is being sent, the template parameters are verified. If the parameters fail to pass the verification, the message fails to be sent. Whether the template and phone number are prohibited is not verified. By default, this value is used when FallBackRule is left empty.
*   **sentFailed**: A fallback is triggered even if the template parameters including variables fail to pass the verification. If the channelType, type, messageType, to, and from parameters fail to pass the verification, a fallback is not triggered.', example='undelivered'),
  from?: string(name='From', description='The mobile phone number of the message sender.

This parameter is required.', example='861387777****'),
  isvCode?: string(name='IsvCode', description='The ISV verification code. This parameter is used to verify whether the RAM user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  label?: string(name='Label', description='The type of the Viber message. Valid values:

*   **promotion**
*   **transaction**', example='promotion'),
  language?: string(name='Language', description='The language. For more information about language codes, see [Language codes](https://help.aliyun.com/document_detail/463420.html).

This parameter is required.', example='en'),
  senderList?: [ 
    {
      flowAction?: {
        flowActionData?: map[string]any(name='FlowActionData', description='The default parameter of the Flow.'),
        flowToken?: string(name='FlowToken', description='The information about the Flow token.', example='kde****'),
      }(name='FlowAction', description='The Flow action.'),
      payload?: [ string ](name='Payload', description='The payload of the button.'),
      productAction?: {
        sections?: [ 
          {
            productItems?: [ 
              {
                productRetailerId?: string(name='ProductRetailerId', description='The retailer ID of the product.', example='ksi399d8'),
              }
            ](name='ProductItems', description='The products.'),
            title?: string(name='Title', description='The name of the category.', example='abcd'),
          }
        ](name='Sections', description='The products. Up to 30 products and 10 categories can be added.'),
        thumbnailProductRetailerId?: string(name='ThumbnailProductRetailerId', description='The retailer ID of the product.', example='skkks999393'),
      }(name='ProductAction', description='The information about the product.'),
      templateParams?: map[string]string(name='TemplateParams', description='The parameters of the template.'),
      to?: string(name='To', description='The mobile phone number of the message receiver.

This parameter is required.', example='861388988****'),
    }
  ](name='SenderList', description='The mobile phone numbers of the message receivers.

This parameter is required.'),
  tag?: string(name='Tag', description='The tag information when the ChannelType parameter is set to viber.', example='tag'),
  taskId?: string(name='TaskId', description='The task ID.', example='100000001'),
  templateCode?: string(name='TemplateCode', description='The template code.', example='744c4b5c79c9432497a075bdfca36bf5'),
  templateName?: string(name='TemplateName', description='The name of the message template.', example='test_name'),
  ttl?: long(name='Ttl', description='The timeout period for sending messages when the ChannelType parameter is set to viber. Valid values: 30 to 1209600. Unit: seconds.', example='50'),
}

model SendChatappMassMessageShrinkRequest {
  channelType?: string(name='ChannelType', description='The type of the channel. Valid values:

*   **whatsapp**
*   **viber**
*   **line** (under development)

This parameter is required.', example='whatsapp'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business Account (WABA) ID of the RAM user within the independent software vendor (ISV) account.

>  CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', deprecated=true),
  fallBackContent?: string(name='FallBackContent', description='The content of the fallback message.', example='Fallback message'),
  fallBackDuration?: int32(name='FallBackDuration', description='Specifies the period of time after which the fallback message is sent if the message receipt that indicates the message is delivered to clients is not received. If this parameter is left empty, the fallback message is sent only when the message fails to be sent or the message receipt that indicates the message is not delivered to clients is received. Unit: seconds. Valid values: 60 to 43200.', example='120'),
  fallBackId?: string(name='FallBackId', description='The ID of the fallback policy.', example='S00001'),
  fallBackRule?: string(name='FallBackRule', description='The fallback rule. Valid values:

*   **undelivered**: A fallback is triggered if the message is not delivered to clients. When the message is being sent, the template parameters are verified. If the parameters fail to pass the verification, the message fails to be sent. Whether the template and phone number are prohibited is not verified. By default, this value is used when FallBackRule is left empty.
*   **sentFailed**: A fallback is triggered even if the template parameters including variables fail to pass the verification. If the channelType, type, messageType, to, and from parameters fail to pass the verification, a fallback is not triggered.', example='undelivered'),
  from?: string(name='From', description='The mobile phone number of the message sender.

This parameter is required.', example='861387777****'),
  isvCode?: string(name='IsvCode', description='The ISV verification code. This parameter is used to verify whether the RAM user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  label?: string(name='Label', description='The type of the Viber message. Valid values:

*   **promotion**
*   **transaction**', example='promotion'),
  language?: string(name='Language', description='The language. For more information about language codes, see [Language codes](https://help.aliyun.com/document_detail/463420.html).

This parameter is required.', example='en'),
  senderListShrink?: string(name='SenderList', description='The mobile phone numbers of the message receivers.

This parameter is required.'),
  tag?: string(name='Tag', description='The tag information when the ChannelType parameter is set to viber.', example='tag'),
  taskId?: string(name='TaskId', description='The task ID.', example='100000001'),
  templateCode?: string(name='TemplateCode', description='The template code.', example='744c4b5c79c9432497a075bdfca36bf5'),
  templateName?: string(name='TemplateName', description='The name of the message template.', example='test_name'),
  ttl?: long(name='Ttl', description='The timeout period for sending messages when the ChannelType parameter is set to viber. Valid values: 30 to 1209600. Unit: seconds.', example='50'),
}

model SendChatappMassMessageResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  groupMessageId?: string(name='GroupMessageId', description='The ID of the message group.', example='890000010002****'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model SendChatappMassMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendChatappMassMessageResponseBody(name='body'),
}

/**
 * @summary Sends a message to multiple phone numbers by using ChatAPP at a time.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 * You can send messages to up to 1,000 phone numbers in a single request.
 *
 * @param tmpReq SendChatappMassMessageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendChatappMassMessageResponse
 */
async function sendChatappMassMessageWithOptions(tmpReq: SendChatappMassMessageRequest, runtime: Util.RuntimeOptions): SendChatappMassMessageResponse {
  Util.validateModel(tmpReq);
  var request = new SendChatappMassMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.senderList)) {
    request.senderListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.senderList, 'SenderList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.fallBackContent)) {
    body['FallBackContent'] = request.fallBackContent;
  }
  if (!Util.isUnset(request.fallBackDuration)) {
    body['FallBackDuration'] = request.fallBackDuration;
  }
  if (!Util.isUnset(request.fallBackId)) {
    body['FallBackId'] = request.fallBackId;
  }
  if (!Util.isUnset(request.fallBackRule)) {
    body['FallBackRule'] = request.fallBackRule;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.label)) {
    body['Label'] = request.label;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.senderListShrink)) {
    body['SenderList'] = request.senderListShrink;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.ttl)) {
    body['Ttl'] = request.ttl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendChatappMassMessage',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Sends a message to multiple phone numbers by using ChatAPP at a time.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 * You can send messages to up to 1,000 phone numbers in a single request.
 *
 * @param request SendChatappMassMessageRequest
 * @return SendChatappMassMessageResponse
 */
async function sendChatappMassMessage(request: SendChatappMassMessageRequest): SendChatappMassMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendChatappMassMessageWithOptions(request, runtime);
}

model SendChatappMessageRequest {
  channelType?: string(name='ChannelType', description='The channel type. Valid values:

*   **whatsapp**
*   **viber**
*   **line** (under development)

This parameter is required.', example='whatsapp'),
  content?: string(name='Content', description='The message content.

**Notes on WhatsApp messages:**

*   If you set **messageType** to **text**, you must specify **text** and must not specify **Caption**.
*   If you set **messageType** to **image**, you must specify **Link**.
*   If you set **messageType** to **video**, you must specify **Link**.
*   If you set **messageType** to **audio**, **Link** is required and **Caption** is invalid.
*   If you set **messageType** to **document**, **Link** and **FileName** are required and **Caption** is invalid.
*   If you set **messageType** to **interactive**, you must specify **type** and **action**.
*   If you set **messageType** to **contacts**, you must specify **name**.
*   If you set **messageType** to **location**, you must specify **longitude** and **latitude**.
*   If you set **messageType** to **sticker**, you must specify **Link**, and **Caption** and **FileName** are invalid.
*   If you set **messageType** to **reaction**, you must specify **messageId** and **emoji**.

**Notes on Viber messages:**

*   If you set **messageType** to **text**, you must specify **text**.
*   If you set **messageType** to **image**, you must specify **link**.
*   If you set **messageType** to **video**, you must specify **link**, **thumbnail**, **fileSize**, and **duration**.
*   If you set **messageType** to **document**, you must specify **link**, **fileName**, and **fileType**.
*   If you set **messageType** to **text_button**, you must specify **text**, **caption**, and **action**.
*   If you set **messageType** to **text_image_button**, you must specify **text**, **link**, **caption**, and **action**.
*   If you set **messageType** to **text_video**, you must specify **text**, **link**, **thumbnail**, **fileSize**, and **duration**.
*   If you set **messageType** to **text_video_button**, you must specify **text**, **link**, **thumbnail**, **fileSize**, **duration**, and **caption**. In addition, you must not specify **action**.', example='{\\\\"text\\\\": \\\\"hello whatsapp\\\\", \\\\"link\\\\": \\\\"\\\\", \\\\"caption\\\\": \\\\"\\\\", \\\\"fileName\\\\": \\\\"\\\\" }'),
  contextMessageId?: string(name='ContextMessageId', description='The ID of the reply message.', example='61851ccb2f1365b16aee****'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business Account (WABA) ID of the RAM user within the independent software vendor (ISV) account.

>  CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', deprecated=true),
  fallBackContent?: string(name='FallBackContent', description='The content of the fallback message.', example='This is a fallback message.'),
  fallBackDuration?: int32(name='FallBackDuration', description='Specifies the period of time after which the fallback message is sent if the message receipt that indicates the message is delivered to clients is not received. If this parameter is left empty, the fallback message is sent only when the **message fails to be sent** or **the message receipt that indicates the message is not delivered to clients** is received. Unit: seconds. Valid values: 60 to 43200.', example='120'),
  fallBackId?: string(name='FallBackId', description='The ID of the fallback policy. You can create a fallback policy and view the information in the Chat App Message Service console.', example='S_000001'),
  fallBackRule?: string(name='FallBackRule', description='The fallback rule. Valid values:

*   **undelivered**: A fallback is triggered if the message is not delivered to clients. When the message is being sent, the template parameters are verified. If the parameters fail to pass the verification, the message fails to be sent. Whether the template and phone number are prohibited is not verified. By default, this value is used when FallBackRule is left empty.
*   **sentFailed**: A fallback is triggered even if the template parameters including variables fail to pass the verification. If the channelType, type, messageType, to, and from parameters fail to pass the verification, a fallback is not triggered.', example='undelivered'),
  flowAction?: {
    flowActionData?: map[string]any(name='FlowActionData', description='The default parameter of the Flow.'),
    flowToken?: string(name='FlowToken', description='The Flow token.', example='1122***'),
  }(name='FlowAction', description='The Flow action.'),
  from?: string(name='From', description='The mobile phone number of the message sender.

>  You can specify a mobile phone number that is registered for a WhatsApp account and is approved in the Chat App Message Service console.

This parameter is required.', example='1360000****'),
  isvCode?: string(name='IsvCode', description='The ISV verification code. This parameter is used to verify whether the RAM user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  label?: string(name='Label', description='The type of the Viber message. This parameter is required if ChannelType is set to viber. Valid values:

*   **promotion**
*   **transaction**', example='promotion'),
  language?: string(name='Language', description='The language that is used in the message template. This parameter is required only if you set the Type parameter to **template**. For more information about language codes, see [Language codes](https://help.aliyun.com/document_detail/463420.html).', example='en'),
  messageType?: string(name='MessageType', description='The specific type of the message. This parameter is required only if you set the Type parameter to **message**.

**Valid values of MessageType when you set the ChannelType parameter to whatsapp:**

*   **text**: a text message.
*   **image**: an image message.
*   **video**: a video message.
*   **audio**: an audio message.
*   **document**: a document message.
*   **interactive**: an interactive message.
*   **contacts**: a contact message.
*   **location**: a location message.
*   **sticker**: a sticker message.
*   **reaction**: a reaction message.

**Valid values of MessageType when you set the ChannelType parameter to viber:**

*   **text**: a text message.
*   **image**: an image message.
*   **video**: a video message.
*   **document**: a document message.
*   **text_button**: a message that contains the text and button media objects.
*   **text_image_button**: a message that contains multiple media objects, including the text, image, and button.
*   **text_video**: a message that contains the text and video media objects.
*   **text_video_button**: a message that contains multiple media objects, including text, video, and button.
*   **text_image**: a message that contains the text and image media objects.

> For more information, see [Parameters of a message template](https://help.aliyun.com/document_detail/454530.html).', example='text'),
  payload?: [ string ](name='Payload', description='The payload of the button.', example='payloadtext1,payloadtext2,payloadtext3'),
  productAction?: {
    sections?: [ 
      {
        productItems?: [ 
          {
            productRetailerId?: string(name='ProductRetailerId', description='The retailer ID of the product.', example='9I39E9E'),
          }
        ](name='ProductItems', description='The products.'),
        title?: string(name='Title', description='The name of the category.', example='Test'),
      }
    ](name='Sections', description='The products. Up to 30 products and 10 categories can be added.'),
    thumbnailProductRetailerId?: string(name='ThumbnailProductRetailerId', description='The retailer ID of the product.', example='S238SK'),
  }(name='ProductAction', description='The information about the products included in the WhatsApp catalog message or multi-product message (MPM).'),
  recipientType?: string(name='RecipientType'),
  tag?: string(name='Tag', description='The tag information of the Viber message.', example='tag'),
  taskId?: string(name='TaskId', description='The task ID.', example='100000001'),
  templateCode?: string(name='TemplateCode', description='The code of the message template. This parameter is required only if you set the Type parameter to **template**.', example='744c4b5c79c9432497a075bdfca3****'),
  templateName?: string(name='TemplateName', description='The name of the message template.', example='test_name'),
  templateParams?: map[string]string(name='TemplateParams', description='The variables of the message template.'),
  to?: string(name='To', description='The mobile phone number of the message receiver.

This parameter is required.', example='1390000****'),
  trackingData?: string(name='TrackingData', description='The tracking data of the Viber message.', example='tracking_id:123456'),
  ttl?: int32(name='Ttl', description='The timeout period for sending the Viber message. Valid values: 30 to 1209600. Unit: seconds.', example='50'),
  type?: string(name='Type', description='The message type. Valid values:

*   **template**: the template message. A template message is sent based on a template that is created and approved in the Chat App Message Service console. You can send template messages based on your business requirements.
*   **message**: the custom message. You can send a custom WhatsApp message to a user only within 24 hours after you receive the last message from the user. This limit does not apply to custom Viber messages.

This parameter is required.', example='template'),
}

model SendChatappMessageShrinkRequest {
  channelType?: string(name='ChannelType', description='The channel type. Valid values:

*   **whatsapp**
*   **viber**
*   **line** (under development)

This parameter is required.', example='whatsapp'),
  content?: string(name='Content', description='The message content.

**Notes on WhatsApp messages:**

*   If you set **messageType** to **text**, you must specify **text** and must not specify **Caption**.
*   If you set **messageType** to **image**, you must specify **Link**.
*   If you set **messageType** to **video**, you must specify **Link**.
*   If you set **messageType** to **audio**, **Link** is required and **Caption** is invalid.
*   If you set **messageType** to **document**, **Link** and **FileName** are required and **Caption** is invalid.
*   If you set **messageType** to **interactive**, you must specify **type** and **action**.
*   If you set **messageType** to **contacts**, you must specify **name**.
*   If you set **messageType** to **location**, you must specify **longitude** and **latitude**.
*   If you set **messageType** to **sticker**, you must specify **Link**, and **Caption** and **FileName** are invalid.
*   If you set **messageType** to **reaction**, you must specify **messageId** and **emoji**.

**Notes on Viber messages:**

*   If you set **messageType** to **text**, you must specify **text**.
*   If you set **messageType** to **image**, you must specify **link**.
*   If you set **messageType** to **video**, you must specify **link**, **thumbnail**, **fileSize**, and **duration**.
*   If you set **messageType** to **document**, you must specify **link**, **fileName**, and **fileType**.
*   If you set **messageType** to **text_button**, you must specify **text**, **caption**, and **action**.
*   If you set **messageType** to **text_image_button**, you must specify **text**, **link**, **caption**, and **action**.
*   If you set **messageType** to **text_video**, you must specify **text**, **link**, **thumbnail**, **fileSize**, and **duration**.
*   If you set **messageType** to **text_video_button**, you must specify **text**, **link**, **thumbnail**, **fileSize**, **duration**, and **caption**. In addition, you must not specify **action**.', example='{\\\\"text\\\\": \\\\"hello whatsapp\\\\", \\\\"link\\\\": \\\\"\\\\", \\\\"caption\\\\": \\\\"\\\\", \\\\"fileName\\\\": \\\\"\\\\" }'),
  contextMessageId?: string(name='ContextMessageId', description='The ID of the reply message.', example='61851ccb2f1365b16aee****'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business Account (WABA) ID of the RAM user within the independent software vendor (ISV) account.

>  CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', deprecated=true),
  fallBackContent?: string(name='FallBackContent', description='The content of the fallback message.', example='This is a fallback message.'),
  fallBackDuration?: int32(name='FallBackDuration', description='Specifies the period of time after which the fallback message is sent if the message receipt that indicates the message is delivered to clients is not received. If this parameter is left empty, the fallback message is sent only when the **message fails to be sent** or **the message receipt that indicates the message is not delivered to clients** is received. Unit: seconds. Valid values: 60 to 43200.', example='120'),
  fallBackId?: string(name='FallBackId', description='The ID of the fallback policy. You can create a fallback policy and view the information in the Chat App Message Service console.', example='S_000001'),
  fallBackRule?: string(name='FallBackRule', description='The fallback rule. Valid values:

*   **undelivered**: A fallback is triggered if the message is not delivered to clients. When the message is being sent, the template parameters are verified. If the parameters fail to pass the verification, the message fails to be sent. Whether the template and phone number are prohibited is not verified. By default, this value is used when FallBackRule is left empty.
*   **sentFailed**: A fallback is triggered even if the template parameters including variables fail to pass the verification. If the channelType, type, messageType, to, and from parameters fail to pass the verification, a fallback is not triggered.', example='undelivered'),
  flowActionShrink?: string(name='FlowAction', description='The Flow action.'),
  from?: string(name='From', description='The mobile phone number of the message sender.

>  You can specify a mobile phone number that is registered for a WhatsApp account and is approved in the Chat App Message Service console.

This parameter is required.', example='1360000****'),
  isvCode?: string(name='IsvCode', description='The ISV verification code. This parameter is used to verify whether the RAM user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  label?: string(name='Label', description='The type of the Viber message. This parameter is required if ChannelType is set to viber. Valid values:

*   **promotion**
*   **transaction**', example='promotion'),
  language?: string(name='Language', description='The language that is used in the message template. This parameter is required only if you set the Type parameter to **template**. For more information about language codes, see [Language codes](https://help.aliyun.com/document_detail/463420.html).', example='en'),
  messageType?: string(name='MessageType', description='The specific type of the message. This parameter is required only if you set the Type parameter to **message**.

**Valid values of MessageType when you set the ChannelType parameter to whatsapp:**

*   **text**: a text message.
*   **image**: an image message.
*   **video**: a video message.
*   **audio**: an audio message.
*   **document**: a document message.
*   **interactive**: an interactive message.
*   **contacts**: a contact message.
*   **location**: a location message.
*   **sticker**: a sticker message.
*   **reaction**: a reaction message.

**Valid values of MessageType when you set the ChannelType parameter to viber:**

*   **text**: a text message.
*   **image**: an image message.
*   **video**: a video message.
*   **document**: a document message.
*   **text_button**: a message that contains the text and button media objects.
*   **text_image_button**: a message that contains multiple media objects, including the text, image, and button.
*   **text_video**: a message that contains the text and video media objects.
*   **text_video_button**: a message that contains multiple media objects, including text, video, and button.
*   **text_image**: a message that contains the text and image media objects.

> For more information, see [Parameters of a message template](https://help.aliyun.com/document_detail/454530.html).', example='text'),
  payloadShrink?: string(name='Payload', description='The payload of the button.', example='payloadtext1,payloadtext2,payloadtext3'),
  productActionShrink?: string(name='ProductAction', description='The information about the products included in the WhatsApp catalog message or multi-product message (MPM).'),
  recipientType?: string(name='RecipientType'),
  tag?: string(name='Tag', description='The tag information of the Viber message.', example='tag'),
  taskId?: string(name='TaskId', description='The task ID.', example='100000001'),
  templateCode?: string(name='TemplateCode', description='The code of the message template. This parameter is required only if you set the Type parameter to **template**.', example='744c4b5c79c9432497a075bdfca3****'),
  templateName?: string(name='TemplateName', description='The name of the message template.', example='test_name'),
  templateParamsShrink?: string(name='TemplateParams', description='The variables of the message template.'),
  to?: string(name='To', description='The mobile phone number of the message receiver.

This parameter is required.', example='1390000****'),
  trackingData?: string(name='TrackingData', description='The tracking data of the Viber message.', example='tracking_id:123456'),
  ttl?: int32(name='Ttl', description='The timeout period for sending the Viber message. Valid values: 30 to 1209600. Unit: seconds.', example='50'),
  type?: string(name='Type', description='The message type. Valid values:

*   **template**: the template message. A template message is sent based on a template that is created and approved in the Chat App Message Service console. You can send template messages based on your business requirements.
*   **message**: the custom message. You can send a custom WhatsApp message to a user only within 24 hours after you receive the last message from the user. This limit does not apply to custom Viber messages.

This parameter is required.', example='template'),
}

model SendChatappMessageResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  messageId?: string(name='MessageId', description='The ID of the message that was sent.', example='61851ccb2f1365b16aee****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model SendChatappMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendChatappMessageResponseBody(name='body'),
}

/**
 * @summary Sends messages by using ChatAPP.
 *
 * @description You can call this operation up to 200 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param tmpReq SendChatappMessageRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SendChatappMessageResponse
 */
async function sendChatappMessageWithOptions(tmpReq: SendChatappMessageRequest, runtime: Util.RuntimeOptions): SendChatappMessageResponse {
  Util.validateModel(tmpReq);
  var request = new SendChatappMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.flowAction)) {
    request.flowActionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.flowAction, 'FlowAction', 'json');
  }
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.productAction)) {
    request.productActionShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.productAction, 'ProductAction', 'json');
  }
  if (!Util.isUnset(tmpReq.templateParams)) {
    request.templateParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.templateParams, 'TemplateParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.contextMessageId)) {
    body['ContextMessageId'] = request.contextMessageId;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.fallBackContent)) {
    body['FallBackContent'] = request.fallBackContent;
  }
  if (!Util.isUnset(request.fallBackDuration)) {
    body['FallBackDuration'] = request.fallBackDuration;
  }
  if (!Util.isUnset(request.fallBackId)) {
    body['FallBackId'] = request.fallBackId;
  }
  if (!Util.isUnset(request.fallBackRule)) {
    body['FallBackRule'] = request.fallBackRule;
  }
  if (!Util.isUnset(request.flowActionShrink)) {
    body['FlowAction'] = request.flowActionShrink;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.label)) {
    body['Label'] = request.label;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.messageType)) {
    body['MessageType'] = request.messageType;
  }
  if (!Util.isUnset(request.productActionShrink)) {
    body['ProductAction'] = request.productActionShrink;
  }
  if (!Util.isUnset(request.recipientType)) {
    body['RecipientType'] = request.recipientType;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateName)) {
    body['TemplateName'] = request.templateName;
  }
  if (!Util.isUnset(request.templateParamsShrink)) {
    body['TemplateParams'] = request.templateParamsShrink;
  }
  if (!Util.isUnset(request.to)) {
    body['To'] = request.to;
  }
  if (!Util.isUnset(request.trackingData)) {
    body['TrackingData'] = request.trackingData;
  }
  if (!Util.isUnset(request.ttl)) {
    body['Ttl'] = request.ttl;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendChatappMessage',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Sends messages by using ChatAPP.
 *
 * @description You can call this operation up to 200 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request SendChatappMessageRequest
 * @return SendChatappMessageResponse
 */
async function sendChatappMessage(request: SendChatappMessageRequest): SendChatappMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendChatappMessageWithOptions(request, runtime);
}

model SubmitIsvCustomerTermsRequest {
  businessDesc?: string(name='BusinessDesc', description='The business scenario.

This parameter is required.', example='Marketing products'),
  contactMail?: string(name='ContactMail', description='The enterprise mail.

This parameter is required.', example='partner@aliyun.com'),
  countryId?: string(name='CountryId', description='The country code.

>  For more information about country codes, see [Country codes](https://help.aliyun.com/document_detail/608210.html).

This parameter is required.', example='CN'),
  custName?: string(name='CustName', description='The enterprise name.

This parameter is required.', example='Aliyun'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493'),
  isvTerms?: string(name='IsvTerms', description='The ISV or Client agreement.

This parameter is required.', example='isvTerms.pdf'),
  officeAddress?: string(name='OfficeAddress', description='The enterprise address.

This parameter is required.', example='Hangzhou'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model SubmitIsvCustomerTermsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='/'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='OK'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model SubmitIsvCustomerTermsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIsvCustomerTermsResponseBody(name='body'),
}

/**
 * @summary Submits the agreement information for independent software vendor (ISV) customers.
 *
 * @description *   You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 * *   After you call the [GetChatappUploadAuthorization](~~GetChatappUploadAuthorization~~) operation to obtain the authentication information for uploading the file to Object Storage Service (OSS), you can use the authentication information to upload the file to the OSS server. To upload the file, you can call the SDK provided by OSS. When you upload the file, set the value of the key to the value of `Dir + "/" + file name`, such as C200293990209/isvTerms.pdf. The value of Dir is obtained from the [GetChatappUploadAuthorization](~~GetChatappUploadAuthorization~~) operation. The value of IsvTerms is obtained from the PutObject operation.
 *
 * @param request SubmitIsvCustomerTermsRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return SubmitIsvCustomerTermsResponse
 */
async function submitIsvCustomerTermsWithOptions(request: SubmitIsvCustomerTermsRequest, runtime: Util.RuntimeOptions): SubmitIsvCustomerTermsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessDesc)) {
    query['BusinessDesc'] = request.businessDesc;
  }
  if (!Util.isUnset(request.contactMail)) {
    query['ContactMail'] = request.contactMail;
  }
  if (!Util.isUnset(request.countryId)) {
    query['CountryId'] = request.countryId;
  }
  if (!Util.isUnset(request.custName)) {
    query['CustName'] = request.custName;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvTerms)) {
    query['IsvTerms'] = request.isvTerms;
  }
  if (!Util.isUnset(request.officeAddress)) {
    query['OfficeAddress'] = request.officeAddress;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubmitIsvCustomerTerms',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Submits the agreement information for independent software vendor (ISV) customers.
 *
 * @description *   You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 * *   After you call the [GetChatappUploadAuthorization](~~GetChatappUploadAuthorization~~) operation to obtain the authentication information for uploading the file to Object Storage Service (OSS), you can use the authentication information to upload the file to the OSS server. To upload the file, you can call the SDK provided by OSS. When you upload the file, set the value of the key to the value of `Dir + "/" + file name`, such as C200293990209/isvTerms.pdf. The value of Dir is obtained from the [GetChatappUploadAuthorization](~~GetChatappUploadAuthorization~~) operation. The value of IsvTerms is obtained from the PutObject operation.
 *
 * @param request SubmitIsvCustomerTermsRequest
 * @return SubmitIsvCustomerTermsResponse
 */
async function submitIsvCustomerTerms(request: SubmitIsvCustomerTermsRequest): SubmitIsvCustomerTermsResponse {
  var runtime = new Util.RuntimeOptions{};
  return submitIsvCustomerTermsWithOptions(request, runtime);
}

model TriggerChatFlowRequest {
  claimTimeMillis?: long(name='ClaimTimeMillis', description='The declared occurrence time of the event, usually the time when the request was constructed, in milliseconds timestamp.', example='1731502129000'),
  data?: map[string]any(name='Data', description='Input parameters in Key-Value format. The Key must match the input strategy configured at the start node of your flow.', example='{"my_biz_data_0": "hi", "my_biz_data_1": "1024"}'),
  discardTimeMillis?: long(name='DiscardTimeMillis', description='The time when the event should be discarded, i.e., the expiration time. If this field is specified, the message will be discarded if it exceeds this time, in milliseconds timestamp.', example='1731502729000'),
  flowCode?: string(name='FlowCode', description='Flow code.

This parameter is required.', example='f4912c16943b4dfba44bd6fedacf8c70'),
  outId?: string(name='OutId', description='External system transaction number, used to associate with external business system transactions. You can retrieve this parameter within the flow after triggering.', example='8d4acf7e-e360-eb83-6d74-fcf9c4538fda'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  uuid?: string(name='Uuid', description='Unique event ID used for idempotent triggers. Do not include any business semantics; you can retrieve this parameter within the flow after triggering.', example='c68622e6-5f0d-c8a4-af41-e949c2a7580e'),
}

model TriggerChatFlowShrinkRequest {
  claimTimeMillis?: long(name='ClaimTimeMillis', description='The declared occurrence time of the event, usually the time when the request was constructed, in milliseconds timestamp.', example='1731502129000'),
  dataShrink?: string(name='Data', description='Input parameters in Key-Value format. The Key must match the input strategy configured at the start node of your flow.', example='{"my_biz_data_0": "hi", "my_biz_data_1": "1024"}'),
  discardTimeMillis?: long(name='DiscardTimeMillis', description='The time when the event should be discarded, i.e., the expiration time. If this field is specified, the message will be discarded if it exceeds this time, in milliseconds timestamp.', example='1731502729000'),
  flowCode?: string(name='FlowCode', description='Flow code.

This parameter is required.', example='f4912c16943b4dfba44bd6fedacf8c70'),
  outId?: string(name='OutId', description='External system transaction number, used to associate with external business system transactions. You can retrieve this parameter within the flow after triggering.', example='8d4acf7e-e360-eb83-6d74-fcf9c4538fda'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  uuid?: string(name='Uuid', description='Unique event ID used for idempotent triggers. Do not include any business semantics; you can retrieve this parameter within the flow after triggering.', example='c68622e6-5f0d-c8a4-af41-e949c2a7580e'),
}

model TriggerChatFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denial', example='无'),
  code?: string(name='Code', description='Status code.', example='无'),
  data?: map[string]any(name='Data', description='Returned data.', example='{}'),
  message?: string(name='Message', description='Error description message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='无'),
  success?: boolean(name='Success', description='Whether the call was successful.
- **true**: Call succeeded.
- **false**: Call failed.', example='true'),
}

model TriggerChatFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TriggerChatFlowResponseBody(name='body'),
}

/**
 * @summary Trigger an Online ChatFlow
 *
 * @description After triggering an online flow, if your flow contains components that incur costs for cloud products, such as message sending or function calls, please ensure you fully understand the billing methods and prices of the related products before using this interface.
 *
 * @param tmpReq TriggerChatFlowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return TriggerChatFlowResponse
 */
async function triggerChatFlowWithOptions(tmpReq: TriggerChatFlowRequest, runtime: Util.RuntimeOptions): TriggerChatFlowResponse {
  Util.validateModel(tmpReq);
  var request = new TriggerChatFlowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.data)) {
    request.dataShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.data, 'Data', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.claimTimeMillis)) {
    query['ClaimTimeMillis'] = request.claimTimeMillis;
  }
  if (!Util.isUnset(request.dataShrink)) {
    query['Data'] = request.dataShrink;
  }
  if (!Util.isUnset(request.discardTimeMillis)) {
    query['DiscardTimeMillis'] = request.discardTimeMillis;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.outId)) {
    query['OutId'] = request.outId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.uuid)) {
    query['Uuid'] = request.uuid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TriggerChatFlow',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Trigger an Online ChatFlow
 *
 * @description After triggering an online flow, if your flow contains components that incur costs for cloud products, such as message sending or function calls, please ensure you fully understand the billing methods and prices of the related products before using this interface.
 *
 * @param request TriggerChatFlowRequest
 * @return TriggerChatFlowResponse
 */
async function triggerChatFlow(request: TriggerChatFlowRequest): TriggerChatFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return triggerChatFlowWithOptions(request, runtime);
}

model UpdateAccountWebhookRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493**'),
  httpFlag?: string(name='HttpFlag', description='Specifies whether to use HTTP callbacks to receive message receipts. Valid values:

*   Y: indicates that HTTP callbacks are used to receive receipts.
*   N: indicates that HTTP callbacks are not used to receive receipts.', example='Y'),
  ownerId?: long(name='OwnerId'),
  queueFlag?: string(name='QueueFlag', description='Specifies whether to use Message Service (MNS) queues to receive receipts. Valid values:

*   Y: indicates that MNS queues are used to receive receipts.
*   N: indicates that MNS queues are not used to receive receipts.', example='N'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  statusCallbackUrl?: string(name='StatusCallbackUrl', description='The callback URL to which status reports are sent by using HTTP callbacks.', example='http://www.aliyun.com'),
}

model UpdateAccountWebhookResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='744c4b5c79c9432497a075bdfca3****'),
}

model UpdateAccountWebhookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAccountWebhookResponseBody(name='body'),
}

/**
 * @summary Modifies the callback URL of an account.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request UpdateAccountWebhookRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateAccountWebhookResponse
 */
async function updateAccountWebhookWithOptions(request: UpdateAccountWebhookRequest, runtime: Util.RuntimeOptions): UpdateAccountWebhookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.httpFlag)) {
    query['HttpFlag'] = request.httpFlag;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.queueFlag)) {
    query['QueueFlag'] = request.queueFlag;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.statusCallbackUrl)) {
    query['StatusCallbackUrl'] = request.statusCallbackUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAccountWebhook',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the callback URL of an account.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request UpdateAccountWebhookRequest
 * @return UpdateAccountWebhookResponse
 */
async function updateAccountWebhook(request: UpdateAccountWebhookRequest): UpdateAccountWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAccountWebhookWithOptions(request, runtime);
}

model UpdateChatFlowRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Process code.', example='f4912c16943b4dfba44bd6fedacf8c70'),
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark', description='Process remarks', example='This is Customer Service WhatsApp Auto-Reply Flow'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  title?: string(name='Title', description='Process title', example='Customer Service WhatsApp Auto-Reply Flow'),
}

model UpdateChatFlowShrinkRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtendShrink?: string(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Process code.', example='f4912c16943b4dfba44bd6fedacf8c70'),
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark', description='Process remarks', example='This is Customer Service WhatsApp Auto-Reply Flow'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  title?: string(name='Title', description='Process title', example='Customer Service WhatsApp Auto-Reply Flow'),
}

model UpdateChatFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denial; this field is only returned when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model UpdateChatFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateChatFlowResponseBody(name='body'),
}

/**
 * @summary Get Process
 *
 * @param tmpReq UpdateChatFlowRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateChatFlowResponse
 */
async function updateChatFlowWithOptions(tmpReq: UpdateChatFlowRequest, runtime: Util.RuntimeOptions): UpdateChatFlowResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateChatFlowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bizExtend)) {
    request.bizExtendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizExtend, 'BizExtend', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.bizExtendShrink)) {
    query['BizExtend'] = request.bizExtendShrink;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.title)) {
    query['Title'] = request.title;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateChatFlow',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Get Process
 *
 * @param request UpdateChatFlowRequest
 * @return UpdateChatFlowResponse
 */
async function updateChatFlow(request: UpdateChatFlowRequest): UpdateChatFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateChatFlowWithOptions(request, runtime);
}

model UpdateChatFlowLogSettingRequest {
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  id?: long(name='Id', description='Setting ID.', example='100'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status', description='Log enable status, enum values:
- ENABLED: Enabled, enables log writing
- DISABLED: Create or retain related resources, but do not enable log writing
- DELETED: Delete, and decide whether to delete related resources based on options', example='ENABLED'),
}

model UpdateChatFlowLogSettingResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details, this field is returned only when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  data?: map[string]any(name='Data', description='Returned data object.', example='无'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model UpdateChatFlowLogSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateChatFlowLogSettingResponseBody(name='body'),
}

/**
 * @summary Modify chatFlow log settings
 *
 * @param request UpdateChatFlowLogSettingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateChatFlowLogSettingResponse
 */
async function updateChatFlowLogSettingWithOptions(request: UpdateChatFlowLogSettingRequest, runtime: Util.RuntimeOptions): UpdateChatFlowLogSettingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.id)) {
    query['Id'] = request.id;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateChatFlowLogSetting',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modify chatFlow log settings
 *
 * @param request UpdateChatFlowLogSettingRequest
 * @return UpdateChatFlowLogSettingResponse
 */
async function updateChatFlowLogSetting(request: UpdateChatFlowLogSettingRequest): UpdateChatFlowLogSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateChatFlowLogSettingWithOptions(request, runtime);
}

model UpdateChatGroupRequest {
  businessNumber?: string(name='BusinessNumber', description='This parameter is required.', example='8613800***'),
  channelType?: string(name='ChannelType', example='WHATSAPP'),
  custSpaceId?: string(name='CustSpaceId', description='This parameter is required.', example='cams-***'),
  description?: string(name='Description', example='示例值示例值'),
  groupId?: string(name='GroupId', description='This parameter is required.', example='EA303***'),
  ownerId?: long(name='OwnerId'),
  profilePictureFile?: string(name='ProfilePictureFile', example='https://aliyun.com/img.jpg'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  subject?: string(name='Subject', example='示例值示例值'),
}

model UpdateChatGroupResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='示例值'),
  requestId?: string(name='RequestId', example='EA399***'),
  result?: long(name='Result', example='1'),
  success?: boolean(name='Success', example='false'),
}

model UpdateChatGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateChatGroupResponseBody(name='body'),
}

/**
 * @summary UpdateChatGroup
 *
 * @param request UpdateChatGroupRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateChatGroupResponse
 */
async function updateChatGroupWithOptions(request: UpdateChatGroupRequest, runtime: Util.RuntimeOptions): UpdateChatGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessNumber)) {
    query['BusinessNumber'] = request.businessNumber;
  }
  if (!Util.isUnset(request.channelType)) {
    query['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.groupId)) {
    query['GroupId'] = request.groupId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.profilePictureFile)) {
    query['ProfilePictureFile'] = request.profilePictureFile;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.subject)) {
    query['Subject'] = request.subject;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateChatGroup',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary UpdateChatGroup
 *
 * @param request UpdateChatGroupRequest
 * @return UpdateChatGroupResponse
 */
async function updateChatGroup(request: UpdateChatGroupRequest): UpdateChatGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateChatGroupWithOptions(request, runtime);
}

model UpdateCommerceSettingRequest {
  cartEnable?: boolean(name='CartEnable', description='Specifies whether to display the shopping cart button. Valid values:

*   true
*   false

This parameter is required.', example='true'),
  catalogVisible?: boolean(name='CatalogVisible', description='Specifies whether to display the catalog button. Valid values:

*   true
*   false

This parameter is required.', example='false'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.

This parameter is required.', example='1380000****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateCommerceSettingResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model UpdateCommerceSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCommerceSettingResponseBody(name='body'),
}

/**
 * @summary Modifies the business settings of a phone number.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request UpdateCommerceSettingRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateCommerceSettingResponse
 */
async function updateCommerceSettingWithOptions(request: UpdateCommerceSettingRequest, runtime: Util.RuntimeOptions): UpdateCommerceSettingResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.cartEnable)) {
    query['CartEnable'] = request.cartEnable;
  }
  if (!Util.isUnset(request.catalogVisible)) {
    query['CatalogVisible'] = request.catalogVisible;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateCommerceSetting',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies the business settings of a phone number.
 *
 * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 *
 * @param request UpdateCommerceSettingRequest
 * @return UpdateCommerceSettingResponse
 */
async function updateCommerceSetting(request: UpdateCommerceSettingRequest): UpdateCommerceSettingResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateCommerceSettingWithOptions(request, runtime);
}

model UpdateConversationalAutomationRequest {
  commands?: [ 
    {
      commandDescription?: string(name='CommandDescription', description='The description of the command.', example='Command 1.'),
      commandName?: string(name='CommandName', description='The command name.', example='test'),
    }
  ](name='Commands', description='The commands.'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account or the instance ID of the customer of Alibaba Cloud.

This parameter is required.', example='2993****'),
  enableWelcomeMessage?: boolean(name='EnableWelcomeMessage', description='Specifies whether to enable the welcoming message.', example='true'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number of the enterprise.

This parameter is required.', example='86130000***'),
  prompts?: [ string ](name='Prompts', description='The opening remarks.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateConversationalAutomationShrinkRequest {
  commandsShrink?: string(name='Commands', description='The commands.'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account or the instance ID of the customer of Alibaba Cloud.

This parameter is required.', example='2993****'),
  enableWelcomeMessage?: boolean(name='EnableWelcomeMessage', description='Specifies whether to enable the welcoming message.', example='true'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number of the enterprise.

This parameter is required.', example='86130000***'),
  promptsShrink?: string(name='Prompts', description='The opening remarks.'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateConversationalAutomationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model UpdateConversationalAutomationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConversationalAutomationResponseBody(name='body'),
}

/**
 * @summary Modifies welcoming messages, opening remarks, and commands for a phone number.
 *
 * @description ### [](#qps-)QPS limit
 * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 * This operation will directly obtain data from Facebook, which sets an upper limit on the total number of calls for operations. We recommend that you take note of the limit when you call this operation.
 *
 * @param tmpReq UpdateConversationalAutomationRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateConversationalAutomationResponse
 */
async function updateConversationalAutomationWithOptions(tmpReq: UpdateConversationalAutomationRequest, runtime: Util.RuntimeOptions): UpdateConversationalAutomationResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateConversationalAutomationShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.commands)) {
    request.commandsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.commands, 'Commands', 'json');
  }
  if (!Util.isUnset(tmpReq.prompts)) {
    request.promptsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.prompts, 'Prompts', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.commandsShrink)) {
    query['Commands'] = request.commandsShrink;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.enableWelcomeMessage)) {
    query['EnableWelcomeMessage'] = request.enableWelcomeMessage;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.promptsShrink)) {
    query['Prompts'] = request.promptsShrink;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateConversationalAutomation',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies welcoming messages, opening remarks, and commands for a phone number.
 *
 * @description ### [](#qps-)QPS limit
 * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
 * This operation will directly obtain data from Facebook, which sets an upper limit on the total number of calls for operations. We recommend that you take note of the limit when you call this operation.
 *
 * @param request UpdateConversationalAutomationRequest
 * @return UpdateConversationalAutomationResponse
 */
async function updateConversationalAutomation(request: UpdateConversationalAutomationRequest): UpdateConversationalAutomationResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateConversationalAutomationWithOptions(request, runtime);
}

model UpdateFlowJSONAssetRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值'),
  filePath?: string(name='FilePath', description='This parameter is required.', example='示例值示例值示例值'),
  flowId?: string(name='FlowId', description='This parameter is required.', example='示例值示例值'),
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateFlowJSONAssetResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The result returns OK as normal.', example='OK'),
  data?: {
    flowId?: string(name='FlowId', description='The Flow ID.', example='84848847****'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='Error description information.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model UpdateFlowJSONAssetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFlowJSONAssetResponseBody(name='body'),
}

/**
 * @summary Updates a Flow by using JSON content.
 *
 * @param request UpdateFlowJSONAssetRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateFlowJSONAssetResponse
 */
async function updateFlowJSONAssetWithOptions(request: UpdateFlowJSONAssetRequest, runtime: Util.RuntimeOptions): UpdateFlowJSONAssetResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.filePath)) {
    query['FilePath'] = request.filePath;
  }
  if (!Util.isUnset(request.flowId)) {
    query['FlowId'] = request.flowId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFlowJSONAsset',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates a Flow by using JSON content.
 *
 * @param request UpdateFlowJSONAssetRequest
 * @return UpdateFlowJSONAssetResponse
 */
async function updateFlowJSONAsset(request: UpdateFlowJSONAssetRequest): UpdateFlowJSONAssetResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFlowJSONAssetWithOptions(request, runtime);
}

model UpdateFlowVersionRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1'),
  flowViewModel?: string(name='FlowViewModel', description='DSL data of the flow version', example='{}'),
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark', description='Version remarks', example='Fix Send WhatsApp Message Error'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateFlowVersionShrinkRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS'),
  bizExtendShrink?: string(name='BizExtend', description='Business extension information, default is “{}”.', example='{}'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1'),
  flowViewModel?: string(name='FlowViewModel', description='DSL data of the flow version', example='{}'),
  ownerId?: long(name='OwnerId'),
  remark?: string(name='Remark', description='Version remarks', example='Fix Send WhatsApp Message Error'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdateFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denial.', example='无'),
  code?: string(name='Code', description='Status code.', example='示例值'),
  message?: string(name='Message', description='Error message.', example='示例值示例值示例值'),
  requestId?: string(name='RequestId', description='Request ID.', example='示例值示例值示例值'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true for success, false for failure.', example='true'),
}

model UpdateFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFlowVersionResponseBody(name='body'),
}

/**
 * @summary Update flow version, used for updating the flow DSL on the canvas
 *
 * @param tmpReq UpdateFlowVersionRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateFlowVersionResponse
 */
async function updateFlowVersionWithOptions(tmpReq: UpdateFlowVersionRequest, runtime: Util.RuntimeOptions): UpdateFlowVersionResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateFlowVersionShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.bizExtend)) {
    request.bizExtendShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.bizExtend, 'BizExtend', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.bizCode)) {
    query['BizCode'] = request.bizCode;
  }
  if (!Util.isUnset(request.bizExtendShrink)) {
    query['BizExtend'] = request.bizExtendShrink;
  }
  if (!Util.isUnset(request.flowCode)) {
    query['FlowCode'] = request.flowCode;
  }
  if (!Util.isUnset(request.flowVersion)) {
    query['FlowVersion'] = request.flowVersion;
  }
  if (!Util.isUnset(request.flowViewModel)) {
    query['FlowViewModel'] = request.flowViewModel;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.remark)) {
    query['Remark'] = request.remark;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateFlowVersion',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Update flow version, used for updating the flow DSL on the canvas
 *
 * @param request UpdateFlowVersionRequest
 * @return UpdateFlowVersionResponse
 */
async function updateFlowVersion(request: UpdateFlowVersionRequest): UpdateFlowVersionResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFlowVersionWithOptions(request, runtime);
}

model UpdatePhoneEncryptionPublicKeyRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值'),
  encryptionPublicKey?: string(name='EncryptionPublicKey', description='This parameter is required.', example='示例值示例值示例值'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='This parameter is required.', example='示例值示例值'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdatePhoneEncryptionPublicKeyResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The result returns OK as normal.', example='OK'),
  message?: string(name='Message', description='Error description information.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model UpdatePhoneEncryptionPublicKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePhoneEncryptionPublicKeyResponseBody(name='body'),
}

/**
 * @summary Updates the encryption public key of a phone number.
 *
 * @param request UpdatePhoneEncryptionPublicKeyRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePhoneEncryptionPublicKeyResponse
 */
async function updatePhoneEncryptionPublicKeyWithOptions(request: UpdatePhoneEncryptionPublicKeyRequest, runtime: Util.RuntimeOptions): UpdatePhoneEncryptionPublicKeyResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.encryptionPublicKey)) {
    query['EncryptionPublicKey'] = request.encryptionPublicKey;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePhoneEncryptionPublicKey',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Updates the encryption public key of a phone number.
 *
 * @param request UpdatePhoneEncryptionPublicKeyRequest
 * @return UpdatePhoneEncryptionPublicKeyResponse
 */
async function updatePhoneEncryptionPublicKey(request: UpdatePhoneEncryptionPublicKeyRequest): UpdatePhoneEncryptionPublicKeyResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePhoneEncryptionPublicKeyWithOptions(request, runtime);
}

model UpdatePhoneMessageQrdlRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值'),
  generateQrImage?: string(name='GenerateQrImage', description='This parameter is required.', example='示例值'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='This parameter is required.', example='示例值示例值'),
  prefilledMessage?: string(name='PrefilledMessage', description='This parameter is required.', example='示例值示例值'),
  qrdlCode?: string(name='QrdlCode', description='This parameter is required.', example='示例值示例值示例值'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model UpdatePhoneMessageQrdlResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The result returns OK as normal.', example='OK'),
  data?: {
    deepLinkUrl?: string(name='DeepLinkUrl', description='Deep link address.', example='https://wa.msg/'),
    generateQrImage?: string(name='GenerateQrImage', description='Generate image types.', example='PNG'),
    phoneNumber?: string(name='PhoneNumber', description='Number.', example='8613800'),
    prefilledMessage?: string(name='PrefilledMessage', description='Message content.', example='Hello'),
    qrImageUrl?: string(name='QrImageUrl', description='QR code address.', example='https://img.png'),
    qrdlCode?: string(name='QrdlCode', description='QR code encoding.', example='DEDEE998'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='Error description information.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='1612C226-E271-4CFE-9F18-4066D******'),
}

model UpdatePhoneMessageQrdlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePhoneMessageQrdlResponseBody(name='body'),
}

/**
 * @summary Modifies a quick-response (QR) code that contains a message.
 *
 * @param request UpdatePhoneMessageQrdlRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePhoneMessageQrdlResponse
 */
async function updatePhoneMessageQrdlWithOptions(request: UpdatePhoneMessageQrdlRequest, runtime: Util.RuntimeOptions): UpdatePhoneMessageQrdlResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.generateQrImage)) {
    query['GenerateQrImage'] = request.generateQrImage;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.prefilledMessage)) {
    query['PrefilledMessage'] = request.prefilledMessage;
  }
  if (!Util.isUnset(request.qrdlCode)) {
    query['QrdlCode'] = request.qrdlCode;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePhoneMessageQrdl',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary Modifies a quick-response (QR) code that contains a message.
 *
 * @param request UpdatePhoneMessageQrdlRequest
 * @return UpdatePhoneMessageQrdlResponse
 */
async function updatePhoneMessageQrdl(request: UpdatePhoneMessageQrdlRequest): UpdatePhoneMessageQrdlResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePhoneMessageQrdlWithOptions(request, runtime);
}

model UpdatePhoneWebhookRequest {
  custSpaceId?: string(name='CustSpaceId', description='SpaceId for ISV sub clients.

This parameter is required.', example='293483938849493****'),
  httpFlag?: string(name='HttpFlag', description='Whether to use HTTP to receive receipts. Value:
*   Y: Yes.
*   N: No.', example='Y'),
  ownerId?: long(name='OwnerId'),
  phoneNumber?: string(name='PhoneNumber', description='phone number.

This parameter is required.', example='8613800001234'),
  queueFlag?: string(name='QueueFlag', description='Whether to use queue method to receive receipts. Value:
*   Y: Yes.
*   N: No.', example='N'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  statusCallbackUrl?: string(name='StatusCallbackUrl', description='HTTP status report interface callback address.', example='http://www.aliyun.com'),
  upCallbackUrl?: string(name='UpCallbackUrl', description='HTTP upstream message interface callback address.', example='http://aliyun.com'),
}

model UpdatePhoneWebhookResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied for detailed information.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='Prompt message, there is a value when an exception is returned.', example='null'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model UpdatePhoneWebhookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePhoneWebhookResponseBody(name='body'),
}

/**
 * @summary The HTTP status code returned.
 * \\*   A value of OK indicates that the call is successful.
 * \\*   Other values indicate that the call fails. For more information, see [Error codes]\\(~~196974~~).
 *
 * @description The error message returned.
 *
 * @param request UpdatePhoneWebhookRequest
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePhoneWebhookResponse
 */
async function updatePhoneWebhookWithOptions(request: UpdatePhoneWebhookRequest, runtime: Util.RuntimeOptions): UpdatePhoneWebhookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.httpFlag)) {
    query['HttpFlag'] = request.httpFlag;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.queueFlag)) {
    query['QueueFlag'] = request.queueFlag;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.statusCallbackUrl)) {
    query['StatusCallbackUrl'] = request.statusCallbackUrl;
  }
  if (!Util.isUnset(request.upCallbackUrl)) {
    query['UpCallbackUrl'] = request.upCallbackUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePhoneWebhook',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary The HTTP status code returned.
 * \\*   A value of OK indicates that the call is successful.
 * \\*   Other values indicate that the call fails. For more information, see [Error codes]\\(~~196974~~).
 *
 * @description The error message returned.
 *
 * @param request UpdatePhoneWebhookRequest
 * @return UpdatePhoneWebhookResponse
 */
async function updatePhoneWebhook(request: UpdatePhoneWebhookRequest): UpdatePhoneWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePhoneWebhookWithOptions(request, runtime);
}

