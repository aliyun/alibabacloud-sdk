/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  

  checkConfig(config);
  @endpoint = getEndpoint('cams', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model CheckContactsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  from?: string(name='From'),
  channelType?: string(name='ChannelType'),
  contacts?: string(name='Contacts'),
}

model CheckContactsResponseBody = {
  requestId?: string(name='RequestId'),
  contacts?: [ 
    {
      status?: string(name='Status'),
      phoneNumber?: string(name='PhoneNumber'),
    }
  ](name='Contacts'),
  resultMessage?: string(name='ResultMessage'),
  resultCode?: string(name='ResultCode'),
}

model CheckContactsResponse = {
  headers: map[string]string(name='headers'),
  body: CheckContactsResponseBody(name='body'),
}

async function checkContactsWithOptions(request: CheckContactsRequest, runtime: Util.RuntimeOptions): CheckContactsResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'CheckContacts',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function checkContacts(request: CheckContactsRequest): CheckContactsResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkContactsWithOptions(request, runtime);
}

model SendMessageRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  to?: string(name='To'),
  from?: string(name='From'),
  channelType?: string(name='ChannelType'),
  type?: string(name='Type'),
  templateCode?: string(name='TemplateCode'),
  templateBodyParams?: string(name='TemplateBodyParams'),
  messageType?: string(name='MessageType'),
  link?: string(name='Link'),
  text?: string(name='Text'),
  caption?: string(name='Caption'),
  fileName?: string(name='FileName'),
  templateHeaderParams?: string(name='TemplateHeaderParams'),
}

model SendMessageResponseBody = {
  requestId?: string(name='RequestId'),
  resultMessage?: string(name='ResultMessage'),
  module?: {
    fromId?: string(name='FromId'),
    toId?: string(name='ToId'),
    messageId?: string(name='MessageId'),
  }(name='Module'),
  resultCode?: string(name='ResultCode'),
}

model SendMessageResponse = {
  headers: map[string]string(name='headers'),
  body: SendMessageResponseBody(name='body'),
}

async function sendMessageWithOptions(request: SendMessageRequest, runtime: Util.RuntimeOptions): SendMessageResponse {
  Util.validateModel(request);
  var query = {};
  query["OwnerId"] = request.ownerId;
  query["ResourceOwnerAccount"] = request.resourceOwnerAccount;
  query["ResourceOwnerId"] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = Util.toMap(request),
  };
  var params = new OpenApi.Params{
    action = 'SendMessage',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function sendMessage(request: SendMessageRequest): SendMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendMessageWithOptions(request, runtime);
}

