/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('cams', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BeeBotAssociateRequest {
  chatBotInstanceId?: string(name='ChatBotInstanceId', description='The ID of chatbot instance.', example='1'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939'),
  perspective?: [ string ](name='Perspective', description='The list of codes for answers from different perspectives.'),
  recommendNum?: int32(name='RecommendNum', description='The number of recommended questions, which ranges from 1 to 10.', example='3'),
  sessionId?: string(name='SessionId', description='The ID of the session, which identifies the session and context information of the visitor.', example='2334324234'),
  utterance?: string(name='Utterance', description='The input of the visitor.', example='Hello'),
}

model BeeBotAssociateShrinkRequest {
  chatBotInstanceId?: string(name='ChatBotInstanceId', description='The ID of chatbot instance.', example='1'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939'),
  perspectiveShrink?: string(name='Perspective', description='The list of codes for answers from different perspectives.'),
  recommendNum?: int32(name='RecommendNum', description='The number of recommended questions, which ranges from 1 to 10.', example='3'),
  sessionId?: string(name='SessionId', description='The ID of the session, which identifies the session and context information of the visitor.', example='2334324234'),
  utterance?: string(name='Utterance', description='The input of the visitor.', example='Hello'),
}

model BeeBotAssociateResponseBody = {
  code?: string(name='Code', description='If OK is returned, the request is successful.', example='OK'),
  data?: {
    associate?: [ 
      {
        meta?: string(name='Meta', description='The additional information.', example='{}'),
        title?: string(name='Title', description='The title of the associated question.', example='test title'),
      }
    ](name='Associate', description='The list of associated recommendations.'),
    messageId?: string(name='MessageId', description='The ID of the response message.', example='1eb47d7a1706429081e90c83c62c2f00'),
    sessionId?: string(name='SessionId', description='The ID of the session.', example='93f11165a2a24289a6f869760e8cb3f3'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model BeeBotAssociateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BeeBotAssociateResponseBody(name='body'),
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param tmpReq BeeBotAssociateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BeeBotAssociateResponse
 */
async function beeBotAssociateWithOptions(tmpReq: BeeBotAssociateRequest, runtime: Util.RuntimeOptions): BeeBotAssociateResponse {
  Util.validateModel(tmpReq);
  var request = new BeeBotAssociateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.perspective)) {
    request.perspectiveShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.perspective, 'Perspective', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.chatBotInstanceId)) {
    body['ChatBotInstanceId'] = request.chatBotInstanceId;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.perspectiveShrink)) {
    body['Perspective'] = request.perspectiveShrink;
  }
  if (!Util.isUnset(request.recommendNum)) {
    body['RecommendNum'] = request.recommendNum;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.utterance)) {
    body['Utterance'] = request.utterance;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BeeBotAssociate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request BeeBotAssociateRequest
  * @return BeeBotAssociateResponse
 */
async function beeBotAssociate(request: BeeBotAssociateRequest): BeeBotAssociateResponse {
  var runtime = new Util.RuntimeOptions{};
  return beeBotAssociateWithOptions(request, runtime);
}

model BeeBotChatRequest {
  chatBotInstanceId?: string(name='ChatBotInstanceId', description='The ID of chatbot instance.', example='1'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  intentName?: string(name='IntentName', description='The name of the intent in the dialog flow. When this parameter is specified, the bot will conduct a Q\\&A according to the intent.', example='intent'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939'),
  knowledgeId?: string(name='KnowledgeId', description='The ID of the knowledge title in the knowledge base.', example='1'),
  perspective?: [ string ](name='Perspective', description='The list of codes for answers from different perspectives.'),
  senderId?: string(name='SenderId', description='The ID of the visitor, which is used to identify users in the current session.', example='861500000000'),
  senderNick?: string(name='SenderNick', description='The nickname of the visitor in the current session.', example='nick'),
  sessionId?: string(name='SessionId', description='The ID of the session, which identifies the session and context information of the visitor.', example='en'),
  utterance?: string(name='Utterance', description='The input of the visitor.', example='659216218162179'),
  vendorParam?: map[string]any(name='VendorParam', description='The user-defined parameter set in JSON format. You can specify user-defined parameters for conversation engines.'),
}

model BeeBotChatShrinkRequest {
  chatBotInstanceId?: string(name='ChatBotInstanceId', description='The ID of chatbot instance.', example='1'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  intentName?: string(name='IntentName', description='The name of the intent in the dialog flow. When this parameter is specified, the bot will conduct a Q\\&A according to the intent.', example='intent'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939'),
  knowledgeId?: string(name='KnowledgeId', description='The ID of the knowledge title in the knowledge base.', example='1'),
  perspectiveShrink?: string(name='Perspective', description='The list of codes for answers from different perspectives.'),
  senderId?: string(name='SenderId', description='The ID of the visitor, which is used to identify users in the current session.', example='861500000000'),
  senderNick?: string(name='SenderNick', description='The nickname of the visitor in the current session.', example='nick'),
  sessionId?: string(name='SessionId', description='The ID of the session, which identifies the session and context information of the visitor.', example='en'),
  utterance?: string(name='Utterance', description='The input of the visitor.', example='659216218162179'),
  vendorParamShrink?: string(name='VendorParam', description='The user-defined parameter set in JSON format. You can specify user-defined parameters for conversation engines.'),
}

model BeeBotChatResponseBody = {
  code?: string(name='Code', description='If OK is returned, the request is successful.', example='OK'),
  data?: {
    messageId?: string(name='MessageId', description='The ID of the response message.', example='ab6be8af-cee4-40c3-9919-2ac7461d7d98'),
    messages?: [ 
      {
        answerSource?: string(name='AnswerSource', description='If the AnswerType parameter is set to Recommend, this parameter indicates the source of the recommended answer.', example='KNOWLEDGE'),
        answerType?: string(name='AnswerType', description='The type of the message.', example='Text'),
        knowledge?: {
          answerSource?: string(name='AnswerSource', description='The source of the answer.', example='KnowledgeBase'),
          category?: string(name='Category', description='The category of the knowledge.'),
          content?: string(name='Content', description='The content of the hit question.'),
          contentType?: string(name='ContentType', description='Indicates whether the answer is in plain text or rich text.', example='PLAIN_TEXT'),
          hitStatement?: string(name='HitStatement', description='The hit text.'),
          id?: string(name='Id', description='The ID of the hit problem in the knowledge base.', example='735898'),
          relatedKnowledges?: [ 
            {
              knowledgeId?: string(name='KnowledgeId', description='The ID of the related knowledge.', example='735899'),
              title?: string(name='Title', description='The title of the related knowledge.'),
            }
          ](name='RelatedKnowledges', description='The list of the related knowledge.'),
          summary?: string(name='Summary', description='The summary to the hit question.'),
          title?: string(name='Title', description='The title of the hit question.'),
        }(name='Knowledge', description='When the AnswerType parameter is set to Knowledge, this parameter contains the Knowledge object returned by the bot.'),
        recommends?: [ 
          {
            answerSource?: string(name='AnswerSource', description='The source of the recommended answer.', example='KNOWLEDGE'),
            knowledgeId?: string(name='KnowledgeId', description='The ID of the recommended knowledge.', example='4548'),
            title?: string(name='Title', description='The recommended content, which may be the entity in graph-based question answering, the standard knowledge in knowledge-based question answering, or the column value in table-based question answering.'),
          }
        ](name='Recommends', description='When the AnswerType parameter is set to Recommend, this parameter contains a list of recommends returned by the bot.'),
        text?: {
          answerSource?: string(name='AnswerSource', description='The source of the answer.', example='BotFramework'),
          content?: string(name='Content', description='The content of the text message.'),
          contentType?: string(name='ContentType', description='Indicates whether the answer is in plain text or rich text.', example='PLAIN_TEXT'),
          dialogName?: string(name='DialogName', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          ext?: map[string]any(name='Ext', description='The passthrough parameters are returned.'),
          externalFlags?: map[string]any(name='ExternalFlags', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          hitStatement?: string(name='HitStatement', description='The hit text.'),
          intentName?: string(name='IntentName', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          metaData?: string(name='MetaData', description='The metadata.'),
          nodeId?: string(name='NodeId', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.', example='1410-c7a72a78.__city'),
          nodeName?: string(name='NodeName', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          slots?: [ 
            {
              hit?: boolean(name='Hit', description='Indicates whether the slot is hit.', example='false'),
              name?: string(name='Name', description='The name of the slot.'),
              origin?: string(name='Origin', description='The original value.'),
              value?: string(name='Value', description='The specific value.'),
            }
          ](name='Slots', description='The list of slots.'),
          userDefinedChatTitle?: string(name='UserDefinedChatTitle', description='The title of the chitchat.'),
        }(name='Text', description='When the AnswerType parameter is set to Text, this parameter contains the Text object returned by the bot.'),
      }
    ](name='Messages', description='The list of the message.'),
    sessionId?: string(name='SessionId', description='The ID of the session.', example='1234'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='none'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model BeeBotChatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BeeBotChatResponseBody(name='body'),
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param tmpReq BeeBotChatRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BeeBotChatResponse
 */
async function beeBotChatWithOptions(tmpReq: BeeBotChatRequest, runtime: Util.RuntimeOptions): BeeBotChatResponse {
  Util.validateModel(tmpReq);
  var request = new BeeBotChatShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.perspective)) {
    request.perspectiveShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.perspective, 'Perspective', 'json');
  }
  if (!Util.isUnset(tmpReq.vendorParam)) {
    request.vendorParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vendorParam, 'VendorParam', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.chatBotInstanceId)) {
    body['ChatBotInstanceId'] = request.chatBotInstanceId;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.intentName)) {
    body['IntentName'] = request.intentName;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.knowledgeId)) {
    body['KnowledgeId'] = request.knowledgeId;
  }
  if (!Util.isUnset(request.perspectiveShrink)) {
    body['Perspective'] = request.perspectiveShrink;
  }
  if (!Util.isUnset(request.senderId)) {
    body['SenderId'] = request.senderId;
  }
  if (!Util.isUnset(request.senderNick)) {
    body['SenderNick'] = request.senderNick;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.utterance)) {
    body['Utterance'] = request.utterance;
  }
  if (!Util.isUnset(request.vendorParamShrink)) {
    body['VendorParam'] = request.vendorParamShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BeeBotChat',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request BeeBotChatRequest
  * @return BeeBotChatResponse
 */
async function beeBotChat(request: BeeBotChatRequest): BeeBotChatResponse {
  var runtime = new Util.RuntimeOptions{};
  return beeBotChatWithOptions(request, runtime);
}

model CreateChatappTemplateRequest {
  category?: string(name='Category', description='The category of the message template. Valid values:

*   **ACCOUNT_UPDATE**: account update
*   **PAYMENT_UPDATE**: payment update
*   **PERSONAL_FINANCE\\_UPDATE**: personal finance update
*   **SHIPPING_UPDATE**: traffic update
*   **RESERVATION_UPDATE**: reservation update
*   **ISSUE_RESOLUTION**: issue resolution
*   **APPOINTMENT_UPDATE**: appointment update
*   **TRANSPORTATION_UPDATE**: logistics information update
*   **TICKET_UPDATE**: ticket update
*   **ALERT_UPDATE**: alert update
*   **AUTO_REPLY**: auto reply', example='ACCOUNT_UPDATE'),
  components?: [ 
    {
      buttons?: [ 
        {
          phoneNumber?: string(name='PhoneNumber', description='The mobile phone number. This parameter is valid only if the Type parameter is set to **PHONE_NUMBER**.', example='+861368897****'),
          text?: string(name='Text', description='The display name of the button.', example='Call Me'),
          type?: string(name='Type', description='The type of the button. Valid values:

*   **PHONE_NUMBER**: a phone call button
*   **URL**: a URL button
*   **QUICK_REPLY**: a quick reply button

> *   A quick reply button cannot coexist with a phone call button or a URL button in a message template.
> *   You can add a combination of two URL buttons or a combination of a URL button and a phone call button to a message template.', example='PHONE_NUMBER'),
          url?: string(name='Url', description='The URL to be accessed when you click the URL button.', example='https://example.com'),
          urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**: a static URL
*   **dynamic**: a dynamic URL', example='static'),
        }
      ](name='Buttons', description='This parameter applies only to components of the **BUTTONS** type.'),
      caption?: string(name='Caption', description='The description of the file.', example='This is a video.'),
      fileName?: string(name='FileName', description='The name of the file.', example='Express video'),
      format?: string(name='Format', description='The format of the message.

*   **TEXT**: text
*   **IMGAGE**: image
*   **DOCUMENT**: document
*   **VIDEO**: video', example='TEXT'),
      text?: string(name='Text', description='The text of the message to be sent.', example='hello whatsapp'),
      type?: string(name='Type', description='The type of the component. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**

> A component of the **BODY** type cannot exceed 1,024 characters in length. A component of the **HEADER** or **FOOTER** type cannot exceed 60 characters in length.', example='BODY'),
      url?: string(name='Url', description='The URL of the material.', example='https://image.developer.aliyundoc.com'),
    }
  ](name='Components', description='The components of the message template.'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  example?: map[string]string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en'),
  name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
  templateType?: string(name='TemplateType', description='The type of the message template. Valid values:

*   **WHATSAPP**
*   VIBER (under development)
*   LINE (under development)', example='WHATSAPP'),
}

model CreateChatappTemplateShrinkRequest {
  category?: string(name='Category', description='The category of the message template. Valid values:

*   **ACCOUNT_UPDATE**: account update
*   **PAYMENT_UPDATE**: payment update
*   **PERSONAL_FINANCE\\_UPDATE**: personal finance update
*   **SHIPPING_UPDATE**: traffic update
*   **RESERVATION_UPDATE**: reservation update
*   **ISSUE_RESOLUTION**: issue resolution
*   **APPOINTMENT_UPDATE**: appointment update
*   **TRANSPORTATION_UPDATE**: logistics information update
*   **TICKET_UPDATE**: ticket update
*   **ALERT_UPDATE**: alert update
*   **AUTO_REPLY**: auto reply', example='ACCOUNT_UPDATE'),
  componentsShrink?: string(name='Components', description='The components of the message template.'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  exampleShrink?: string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en'),
  name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
  templateType?: string(name='TemplateType', description='The type of the message template. Valid values:

*   **WHATSAPP**
*   VIBER (under development)
*   LINE (under development)', example='WHATSAPP'),
}

model CreateChatappTemplateResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A code of OK indicates that the call is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='SMS_232907****'),
    templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
  }(name='Data', description='The data returned.', example='{"templateCode": "****4b5c79c9432497a075bdfca36bf5"，"templateName": "hello_whatsapp"}'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2D'),
}

model CreateChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateChatappTemplateResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param tmpReq CreateChatappTemplateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateChatappTemplateResponse
 */
async function createChatappTemplateWithOptions(tmpReq: CreateChatappTemplateRequest, runtime: Util.RuntimeOptions): CreateChatappTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreateChatappTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.components)) {
    request.componentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.components, 'Components', 'json');
  }
  if (!Util.isUnset(tmpReq.example)) {
    request.exampleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.example, 'Example', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.componentsShrink)) {
    body['Components'] = request.componentsShrink;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.exampleShrink)) {
    body['Example'] = request.exampleShrink;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param request CreateChatappTemplateRequest
  * @return CreateChatappTemplateResponse
 */
async function createChatappTemplate(request: CreateChatappTemplateRequest): CreateChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChatappTemplateWithOptions(request, runtime);
}

model DeleteChatappTemplateRequest {
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
}

model DeleteChatappTemplateResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A code of OK indicates that the call is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model DeleteChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteChatappTemplateResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param request DeleteChatappTemplateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteChatappTemplateResponse
 */
async function deleteChatappTemplateWithOptions(request: DeleteChatappTemplateRequest, runtime: Util.RuntimeOptions): DeleteChatappTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param request DeleteChatappTemplateRequest
  * @return DeleteChatappTemplateResponse
 */
async function deleteChatappTemplate(request: DeleteChatappTemplateRequest): DeleteChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChatappTemplateWithOptions(request, runtime);
}

model GetChatappTemplateDetailRequest {
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='****4b5c79c9432497a075bdfca36bf5'),
}

model GetChatappTemplateDetailResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A code of OK indicates that the call is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
    category?: string(name='Category', description='The category of the message template. Valid values:

*   **ACCOUNT_UPDATE**: account update
*   **PAYMENT_UPDATE**: payment update
*   **PERSONAL_FINANCE\\_UPDATE**: personal finance update
*   **SHIPPING_UPDATE**: traffic update
*   **RESERVATION_UPDATE**: reservation update
*   **ISSUE_RESOLUTION**: issue resolution
*   **APPOINTMENT_UPDATE**: appointment update
*   **TRANSPORTATION_UPDATE**: logistics information update
*   **TICKET_UPDATE**: ticket update
*   **ALERT_UPDATE**: alert update
*   **AUTO_REPLY**: auto reply', example='ACCOUNT_UPDATE'),
    components?: [ 
      {
        buttons?: [ 
          {
            phoneNumber?: string(name='PhoneNumber', description='The mobile phone number. This parameter is valid only if the Type parameter is set to **PHONE_NUMBER**.', example='861398745****'),
            text?: string(name='Text', description='The display name of the button.', example='Call'),
            type?: string(name='Type', description='The type of the button. Valid values:

*   **PHONE_NUMBER**: a phone call button
*   **URL**: a URL button
*   **QUICK_REPLY**: a quick reply button

**

**Note**

*   A quick reply button cannot coexist with a phone call button or a URL button in a message template.

*   You can add a combination of two URL buttons or a combination of a URL button and a phone call button to a message template.', example='PHONE_NUMBER'),
            url?: string(name='Url', description='The URL to be accessed when you click the URL button.', example='https://example.com'),
            urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**: a static URL
*   **dynamic**: a dynamic URL', example='static'),
          }
        ](name='Buttons', description='This parameter applies only to components of the **BUTTONS** type. This parameter is passed in by converting its original JSON structure into a string.'),
        caption?: string(name='Caption', description='The description of the file.', example='The new file has been uploaded.'),
        fileName?: string(name='FileName', description='The name of the file.', example='Express file'),
        format?: string(name='Format', description='The format.', example='TEXT'),
        text?: string(name='Text', description='The text of the message to be sent.', example='Hello'),
        type?: string(name='Type', description='The type of the component. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**

**

**Note** A component of the **BODY** type cannot exceed 1,024 characters in length. A component of the **HEADER** or **FOOTER** type cannot exceed 60 characters in length.', example='BODY'),
        url?: string(name='Url', description='The URL of the material.', example='https://image.developer.aliyundoc.com'),
      }
    ](name='Components', description='The components of the message template.'),
    example?: map[string]string(name='Example', description='The examples of variables.'),
    language?: string(name='Language', description='The language that is used in the message template.', example='en'),
    name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
  }(name='Data', description='The data returned.', example='{ 		"category": "ACCOUNT_UPDATE", 		"name": "account_notice", 		"language": "en_US", 		"templateCode": "744c4b5c79c9432497a075bdfca3****", 		"auditStatus": "APPROVED", 		"components": "[{\\"type\\":\\"BODY\\",\\"text\\":\\"body_text$(textVariable)\\"},{\\"type\\":\\"HEADER\\",\\"formate\\":\\"IMAGE\\",\\"url\\":\\"$(linkVariable)\\"},{\\"type\\":\\"FOOTER\\",\\"text\\":\\"footer-text\\"},{\\"type\\":\\"BUTTONS\\",\\"buttons\\":[{\\"type\\":\\"PHONE_NUMBER\\",\\"text\\":\\"phone-button-text\\",\\"phone_number\\":\\"+861388888****\\"},{\\"type\\":\\"URL\\",\\"text\\":\\"url-button-text\\",\\"url\\":\\"https://www.website.com/\\"}]}]", 		"example": "{\\"textVariable\\": \\"text\\", \\"linkVariable\\": \\"link\\"}" 	}'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='744c4b5c79c9432497a075bdfca3****'),
}

model GetChatappTemplateDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetChatappTemplateDetailResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param request GetChatappTemplateDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetChatappTemplateDetailResponse
 */
async function getChatappTemplateDetailWithOptions(request: GetChatappTemplateDetailRequest, runtime: Util.RuntimeOptions): GetChatappTemplateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappTemplateDetail',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param request GetChatappTemplateDetailRequest
  * @return GetChatappTemplateDetailResponse
 */
async function getChatappTemplateDetail(request: GetChatappTemplateDetailRequest): GetChatappTemplateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappTemplateDetailWithOptions(request, runtime);
}

model ListChatappTemplateRequest {
  auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en'),
  name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
  page?: {
    index?: int32(name='Index', description='The number of the page to return. Default value: 1.', example='1'),
    size?: int32(name='Size', description='The number of message templates to return on each page. Default value: 10.', example='10'),
  }(name='Page', description='The paging settings.', example='"page": "{\\"index\\": 1,\\"size\\": 20}'),
}

model ListChatappTemplateShrinkRequest {
  auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en'),
  name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
  pageShrink?: string(name='Page', description='The paging settings.', example='"page": "{\\"index\\": 1,\\"size\\": 20}'),
}

model ListChatappTemplateResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A code of OK indicates that the call is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  listTemplate?: [ 
    {
      auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
      category?: string(name='Category', description='The category of the message template. Valid values:

*   **ACCOUNT_UPDATE**: account update
*   **PAYMENT_UPDATE**: payment update
*   **PERSONAL_FINANCE\\_UPDATE**: personal finance update
*   **SHIPPING_UPDATE**: traffic update
*   **RESERVATION_UPDATE**: reservation update
*   **ISSUE_RESOLUTION**: issue resolution
*   **APPOINTMENT_UPDATE**: appointment update
*   **TRANSPORTATION_UPDATE**: logistics information update
*   **TICKET_UPDATE**: ticket update
*   **ALERT_UPDATE**: alert update
*   **AUTO_REPLY**: auto reply', example='ACCOUNT_UPDATE'),
      language?: string(name='Language', description='The language that is used in the message template.', example='en'),
      templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
      templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
    }
  ](name='ListTemplate', description='The message templates.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ListChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListChatappTemplateResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param tmpReq ListChatappTemplateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListChatappTemplateResponse
 */
async function listChatappTemplateWithOptions(tmpReq: ListChatappTemplateRequest, runtime: Util.RuntimeOptions): ListChatappTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new ListChatappTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.auditStatus)) {
    query['AuditStatus'] = request.auditStatus;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageShrink)) {
    query['Page'] = request.pageShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param request ListChatappTemplateRequest
  * @return ListChatappTemplateResponse
 */
async function listChatappTemplate(request: ListChatappTemplateRequest): ListChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listChatappTemplateWithOptions(request, runtime);
}

model ModifyChatappTemplateRequest {
  components?: [ 
    {
      buttons?: [ 
        {
          phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='+8613888887889'),
          text?: string(name='Text', description='The text of the message to be sent.', example='phone-button-text'),
          type?: string(name='Type', description='The type of the button.

*   **PHONE_NUMBER**: the phone call button
*   **URL**: the URL button
*   **QUICK_REPLY**: the quick reply button', example='PHONE_NUMBER'),
          url?: string(name='Url', description='The URL to be visited after clicking the button.', example='https://www.website.com/'),
          urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**: the static URL
*   **dynamic**: the dynamic URL', example='dynamic'),
        }
      ](name='Buttons', description='The list of buttons, which applies only to the **BUTTONS** component.'),
      caption?: string(name='Caption', description='The description.

>  When the Type parameter is set to **HEADER** and the Format parameter is set to **IMAGE/DOCUMENT/VIDEO**, you can specify the description.', example='This is a video.'),
      fileName?: string(name='FileName', description='The name of the file.

> : When the Type parameter is set to **HEADER** and the Format parameter is set to **DOCUMENT**, you can specify a name of the file.', example='Video'),
      format?: string(name='Format', description='The type of the media resource.

*   **TEXT**: text
*   **IMAGE**: image
*   **DOCUMENT**: document
*   **VIDEO**: video', example='TEXT'),
      text?: string(name='Text', description='The text of the message to be sent.', example='hello chatapp'),
      type?: string(name='Type', description='The type of the component.

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**', example='BODY'),
      url?: string(name='Url', description='The URL of the material.', example='"https://img.tukuppt.com/png_preview/00/10/24/1GygxVK3F4.jpg'),
    }
  ](name='Components', description='The list of components of the message template.'),
  custSpaceId?: string(name='CustSpaceId', description='Isv customer space id', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatApp Business account of the ISV customer.', example='659216218162179', deprecated='true'),
  example?: map[string]string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939'),
  language?: string(name='Language', description='The language.', example='en'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='8472929283883'),
}

model ModifyChatappTemplateShrinkRequest {
  componentsShrink?: string(name='Components', description='The list of components of the message template.'),
  custSpaceId?: string(name='CustSpaceId', description='Isv customer space id', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatApp Business account of the ISV customer.', example='659216218162179', deprecated='true'),
  exampleShrink?: string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939'),
  language?: string(name='Language', description='The language.', example='en'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='8472929283883'),
}

model ModifyChatappTemplateResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

*   If OK is returned, the request is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='8472929283883'),
    templateName?: string(name='TemplateName', description='The name of the template.', example='hello_whatsapp'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ModifyChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyChatappTemplateResponseBody(name='body'),
}

async function modifyChatappTemplateWithOptions(tmpReq: ModifyChatappTemplateRequest, runtime: Util.RuntimeOptions): ModifyChatappTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyChatappTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.components)) {
    request.componentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.components, 'Components', 'json');
  }
  if (!Util.isUnset(tmpReq.example)) {
    request.exampleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.example, 'Example', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.componentsShrink)) {
    body['Components'] = request.componentsShrink;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.exampleShrink)) {
    body['Example'] = request.exampleShrink;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyChatappTemplate(request: ModifyChatappTemplateRequest): ModifyChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyChatappTemplateWithOptions(request, runtime);
}

model QueryChatappBindWabaRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by ISV.', example='aksik93kdkkxmwol93939'),
}

model QueryChatappBindWabaResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    accountReviewStatus?: string(name='AccountReviewStatus', description='The audit status of the WhatApp Business account.', example='APPROVED'),
    currency?: string(name='Currency', description='Currency', example='USD'),
    id?: string(name='Id', description='WabaID', example='20393988393993***'),
    messageTemplateNamespace?: string(name='MessageTemplateNamespace', description='The namespace of the message template.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
    name?: string(name='Name', description='The name of the WhatApp Business account.', example='Alibaba'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model QueryChatappBindWabaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryChatappBindWabaResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryChatappBindWabaRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryChatappBindWabaResponse
 */
async function queryChatappBindWabaWithOptions(request: QueryChatappBindWabaRequest, runtime: Util.RuntimeOptions): QueryChatappBindWabaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryChatappBindWaba',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryChatappBindWabaRequest
  * @return QueryChatappBindWabaResponse
 */
async function queryChatappBindWaba(request: QueryChatappBindWabaRequest): QueryChatappBindWabaResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryChatappBindWabaWithOptions(request, runtime);
}

model QueryChatappPhoneNumbersRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by ISV.', example='aksik93kdkkxmwol93939'),
}

model QueryChatappPhoneNumbersResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The message returned.', example='SUCCESS'),
  phoneNumbers?: [ 
    {
      codeVerificationStatus?: string(name='CodeVerificationStatus', description='号码校验状态。', example='VERIFIED'),
      messagingLimitTier?: string(name='MessagingLimitTier', description='号码发送量。', example='TIER_10'),
      nameStatus?: string(name='NameStatus', description='名称状态。', example='Approval'),
      newNameStatus?: string(name='NewNameStatus', description='新名称审核状态。', example='Approval'),
      phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800000'),
      qualityRating?: string(name='QualityRating', description='The quality rating of the phone number. Valid values: GREEN, YELLOW, RED, and UNKNOWN.', example='GREEN'),
      status?: string(name='Status', description='The status of the phone number. Valid values: PENDING, DELETED, MIGRATED, BANNED, RESTRICTED, RATE_LIMITED, FLAGGED, CONNECTED, DISCONNECTED, UNKNOWN, and UNVERIFIED.', example='CONNECTED'),
      statusCallbackUrl?: string(name='StatusCallbackUrl', description='The status report notification URL.', example='https://ali.com/status'),
      statusQueue?: string(name='StatusQueue', description='The status report notification queue.', example='Alicom-Queue-****-ChatAppStatus'),
      upCallbackUrl?: string(name='UpCallbackUrl', description='The MO message notification URL.', example='https://ali.com/inbound'),
      upQueue?: string(name='UpQueue', description='The mobile originated (MO) message notification queue.', example='Alicom-Queue-****-ChatAppInbound'),
      verifiedName?: string(name='VerifiedName', description='The name of the company to which the phone number is associated with.', example='Alibaba'),
    }
  ](name='PhoneNumbers', description='The list of phone numbers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model QueryChatappPhoneNumbersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryChatappPhoneNumbersResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryChatappPhoneNumbersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryChatappPhoneNumbersResponse
 */
async function queryChatappPhoneNumbersWithOptions(request: QueryChatappPhoneNumbersRequest, runtime: Util.RuntimeOptions): QueryChatappPhoneNumbersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryChatappPhoneNumbers',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryChatappPhoneNumbersRequest
  * @return QueryChatappPhoneNumbersResponse
 */
async function queryChatappPhoneNumbers(request: QueryChatappPhoneNumbersRequest): QueryChatappPhoneNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryChatappPhoneNumbersWithOptions(request, runtime);
}

model SendChatappMassMessageRequest {
  channelType?: string(name='ChannelType', description='The type of the message channel. Valid values:

*   **whatsapp**
*   viber (under development)
*   line (under development)', example='whatsapp'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  fallBackContent?: string(name='FallBackContent', description='Fallback message content.', example='This is a fallback message.'),
  fallBackId?: string(name='FallBackId', description='Fallback strategy id. Fallback Strategy can be created on the ChatApp console.', example='S00001'),
  from?: string(name='From', description='The mobile phone number of the message sender.

<notice>You can specify a mobile phone number that is registered for a WhatsApp account and is approved in the ChatApp console.</notice>', example='861387777****'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en'),
  senderList?: [ 
    {
      payload?: [ string ](name='Payload', description='Payload list.'),
      templateParams?: map[string]string(name='TemplateParams', description='Template parameters.'),
      to?: string(name='To', description='Target number.', example='861388988****'),
    }
  ](name='SenderList', description='Target number and parameter list.'),
  taskId?: string(name='TaskId', description='User-define ID to identify a single batch of messages.', example='100000001'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca36bf5'),
}

model SendChatappMassMessageShrinkRequest {
  channelType?: string(name='ChannelType', description='The type of the message channel. Valid values:

*   **whatsapp**
*   viber (under development)
*   line (under development)', example='whatsapp'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  fallBackContent?: string(name='FallBackContent', description='Fallback message content.', example='This is a fallback message.'),
  fallBackId?: string(name='FallBackId', description='Fallback strategy id. Fallback Strategy can be created on the ChatApp console.', example='S00001'),
  from?: string(name='From', description='The mobile phone number of the message sender.

<notice>You can specify a mobile phone number that is registered for a WhatsApp account and is approved in the ChatApp console.</notice>', example='861387777****'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en'),
  senderListShrink?: string(name='SenderList', description='Target number and parameter list.'),
  taskId?: string(name='TaskId', description='User-define ID to identify a single batch of messages.', example='100000001'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca36bf5'),
}

model SendChatappMassMessageResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A code of OK indicates that the call is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  groupMessageId?: string(name='GroupMessageId', description='Batch send message ID.', example='890000010002****'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model SendChatappMassMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendChatappMassMessageResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  * Can support up to 1,000 numbers per request.
  *
  * @param tmpReq SendChatappMassMessageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SendChatappMassMessageResponse
 */
async function sendChatappMassMessageWithOptions(tmpReq: SendChatappMassMessageRequest, runtime: Util.RuntimeOptions): SendChatappMassMessageResponse {
  Util.validateModel(tmpReq);
  var request = new SendChatappMassMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.senderList)) {
    request.senderListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.senderList, 'SenderList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.fallBackContent)) {
    body['FallBackContent'] = request.fallBackContent;
  }
  if (!Util.isUnset(request.fallBackId)) {
    body['FallBackId'] = request.fallBackId;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.senderListShrink)) {
    body['SenderList'] = request.senderListShrink;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendChatappMassMessage',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  * Can support up to 1,000 numbers per request.
  *
  * @param request SendChatappMassMessageRequest
  * @return SendChatappMassMessageResponse
 */
async function sendChatappMassMessage(request: SendChatappMassMessageRequest): SendChatappMassMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendChatappMassMessageWithOptions(request, runtime);
}

model SendChatappMessageRequest {
  channelType?: string(name='ChannelType', description='The type of the message channel. Valid values:

*   **whatsapp**
*   viber (under development)
*   line (under development)', example='whstsapp'),
  content?: string(name='Content', description='The content of the message.

**

**Note** The **Content** parameter is required if you set the **Type** parameter to **message**.', example='{\\"text\\": \\"hello whatsapp\\", \\"link\\": \\"\\", \\"caption\\": \\"\\", \\"fileName\\": \\"\\" }'),
  contextMessageId?: string(name='ContextMessageId', example='202211039393839393'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  fallBackContent?: string(name='FallBackContent', description='Fallback message content.', example='This is a fallback message.'),
  fallBackId?: string(name='FallBackId', description='Fallback strategy id. Fallback Strategy can be created on the ChatApp console.', example='S_000001'),
  from?: string(name='From', description='The mobile phone number of the message sender.

<notice>You can specify a mobile phone number that is registered for a WhatsApp account and is approved in the ChatApp console.</notice>', example='861890125****'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  label?: string(name='Label', example='promotion'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en'),
  messageType?: string(name='MessageType', description='The type of the message. This parameter is required if you set the Type parameter to **message**. Valid values:

*   **text**: a text message. The **Text** parameter is required if you set the MessageType parameter to text.
*   **image**: an image message. The **Link** parameter is required and the **Caption** parameter is optional if you set the MessageType parameter to image.
*   **video**: a video message. The **Link** parameter is required and the **Caption** parameter is optional if you set the MessageType parameter to video.
*   **audio**: an audio message. The **Link** parameter is required and the **Caption** parameter is invalid if you set the MessageType parameter to audio.
*   **document**: a document message. The **Link** and **FileName** parameters are required and the **Caption** parameter is invalid if you set the MessageType parameter to document.', example='text'),
  payload?: [ string ](name='Payload', description='The payload of the button.', example='payloadtext1,payloadtext2,payloadtext3'),
  tag?: string(name='Tag', example='tag'),
  templateCode?: string(name='TemplateCode', description='The code of the message template. This parameter is required if you set the Type parameter to **template**.', example='744c4b5c79c9432497a075bdfca3****'),
  templateParams?: map[string]string(name='TemplateParams', description='The variables of the message template.'),
  to?: string(name='To', description='The mobile phone number of the message recipient.', example='861398745****'),
  trackingData?: string(name='TrackingData', example='tracking_id:123456'),
  ttl?: int32(name='Ttl'),
  type?: string(name='Type', description='The type of the message. Valid values:

*   **template**: a template message. A template message is sent based on a template that is created in the ChatApp console and is approved. You can send template messages based on your business requirements.
*   **message**: a custom message. You can send a custom message to a user only within 24 hours after you receive the last message from the user.', example='template'),
}

model SendChatappMessageShrinkRequest {
  channelType?: string(name='ChannelType', description='The type of the message channel. Valid values:

*   **whatsapp**
*   viber (under development)
*   line (under development)', example='whstsapp'),
  content?: string(name='Content', description='The content of the message.

**

**Note** The **Content** parameter is required if you set the **Type** parameter to **message**.', example='{\\"text\\": \\"hello whatsapp\\", \\"link\\": \\"\\", \\"caption\\": \\"\\", \\"fileName\\": \\"\\" }'),
  contextMessageId?: string(name='ContextMessageId', example='202211039393839393'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  fallBackContent?: string(name='FallBackContent', description='Fallback message content.', example='This is a fallback message.'),
  fallBackId?: string(name='FallBackId', description='Fallback strategy id. Fallback Strategy can be created on the ChatApp console.', example='S_000001'),
  from?: string(name='From', description='The mobile phone number of the message sender.

<notice>You can specify a mobile phone number that is registered for a WhatsApp account and is approved in the ChatApp console.</notice>', example='861890125****'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  label?: string(name='Label', example='promotion'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en'),
  messageType?: string(name='MessageType', description='The type of the message. This parameter is required if you set the Type parameter to **message**. Valid values:

*   **text**: a text message. The **Text** parameter is required if you set the MessageType parameter to text.
*   **image**: an image message. The **Link** parameter is required and the **Caption** parameter is optional if you set the MessageType parameter to image.
*   **video**: a video message. The **Link** parameter is required and the **Caption** parameter is optional if you set the MessageType parameter to video.
*   **audio**: an audio message. The **Link** parameter is required and the **Caption** parameter is invalid if you set the MessageType parameter to audio.
*   **document**: a document message. The **Link** and **FileName** parameters are required and the **Caption** parameter is invalid if you set the MessageType parameter to document.', example='text'),
  payloadShrink?: string(name='Payload', description='The payload of the button.', example='payloadtext1,payloadtext2,payloadtext3'),
  tag?: string(name='Tag', example='tag'),
  templateCode?: string(name='TemplateCode', description='The code of the message template. This parameter is required if you set the Type parameter to **template**.', example='744c4b5c79c9432497a075bdfca3****'),
  templateParamsShrink?: string(name='TemplateParams', description='The variables of the message template.'),
  to?: string(name='To', description='The mobile phone number of the message recipient.', example='861398745****'),
  trackingData?: string(name='TrackingData', example='tracking_id:123456'),
  ttl?: int32(name='Ttl'),
  type?: string(name='Type', description='The type of the message. Valid values:

*   **template**: a template message. A template message is sent based on a template that is created in the ChatApp console and is approved. You can send template messages based on your business requirements.
*   **message**: a custom message. You can send a custom message to a user only within 24 hours after you receive the last message from the user.', example='template'),
}

model SendChatappMessageResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A code of OK indicates that the call is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  messageId?: string(name='MessageId', description='The ID of the message.', example='61851ccb2f1365b16aee****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model SendChatappMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendChatappMessageResponseBody(name='body'),
}

/**
  * You can call this operation up to 200 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param tmpReq SendChatappMessageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SendChatappMessageResponse
 */
async function sendChatappMessageWithOptions(tmpReq: SendChatappMessageRequest, runtime: Util.RuntimeOptions): SendChatappMessageResponse {
  Util.validateModel(tmpReq);
  var request = new SendChatappMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.templateParams)) {
    request.templateParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.templateParams, 'TemplateParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.contextMessageId)) {
    body['ContextMessageId'] = request.contextMessageId;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.fallBackContent)) {
    body['FallBackContent'] = request.fallBackContent;
  }
  if (!Util.isUnset(request.fallBackId)) {
    body['FallBackId'] = request.fallBackId;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.label)) {
    body['Label'] = request.label;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.messageType)) {
    body['MessageType'] = request.messageType;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateParamsShrink)) {
    body['TemplateParams'] = request.templateParamsShrink;
  }
  if (!Util.isUnset(request.to)) {
    body['To'] = request.to;
  }
  if (!Util.isUnset(request.trackingData)) {
    body['TrackingData'] = request.trackingData;
  }
  if (!Util.isUnset(request.ttl)) {
    body['Ttl'] = request.ttl;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendChatappMessage',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 200 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param request SendChatappMessageRequest
  * @return SendChatappMessageResponse
 */
async function sendChatappMessage(request: SendChatappMessageRequest): SendChatappMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendChatappMessageWithOptions(request, runtime);
}

