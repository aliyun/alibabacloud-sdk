/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  checkConfig(config);
  @endpoint = getEndpoint('cams', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model BeeBotAssociateRequest {
  chatBotInstanceId?: string(name='ChatBotInstanceId', description='The ID of chatbot instance.', example='1'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939'),
  perspective?: [ string ](name='Perspective', description='The list of codes for answers from different perspectives.'),
  recommendNum?: int32(name='RecommendNum', description='The number of recommended questions, which ranges from 1 to 10.', example='3'),
  sessionId?: string(name='SessionId', description='The ID of the session, which identifies the session and context information of the visitor.', example='2334324234'),
  utterance?: string(name='Utterance', description='The input of the visitor.', example='Hello'),
}

model BeeBotAssociateShrinkRequest {
  chatBotInstanceId?: string(name='ChatBotInstanceId', description='The ID of chatbot instance.', example='1'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939'),
  perspectiveShrink?: string(name='Perspective', description='The list of codes for answers from different perspectives.'),
  recommendNum?: int32(name='RecommendNum', description='The number of recommended questions, which ranges from 1 to 10.', example='3'),
  sessionId?: string(name='SessionId', description='The ID of the session, which identifies the session and context information of the visitor.', example='2334324234'),
  utterance?: string(name='Utterance', description='The input of the visitor.', example='Hello'),
}

model BeeBotAssociateResponseBody = {
  code?: string(name='Code', description='If OK is returned, the request is successful.', example='OK'),
  data?: {
    associate?: [ 
      {
        meta?: string(name='Meta', description='The additional information.', example='{}'),
        title?: string(name='Title', description='The title of the associated question.', example='test title'),
      }
    ](name='Associate', description='The list of associated recommendations.'),
    messageId?: string(name='MessageId', description='The ID of the response message.', example='1eb47d7a1706429081e90c83c62c2f00'),
    sessionId?: string(name='SessionId', description='The ID of the session.', example='93f11165a2a24289a6f869760e8cb3f3'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model BeeBotAssociateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BeeBotAssociateResponseBody(name='body'),
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param tmpReq BeeBotAssociateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BeeBotAssociateResponse
 */
async function beeBotAssociateWithOptions(tmpReq: BeeBotAssociateRequest, runtime: Util.RuntimeOptions): BeeBotAssociateResponse {
  Util.validateModel(tmpReq);
  var request = new BeeBotAssociateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.perspective)) {
    request.perspectiveShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.perspective, 'Perspective', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.chatBotInstanceId)) {
    body['ChatBotInstanceId'] = request.chatBotInstanceId;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.perspectiveShrink)) {
    body['Perspective'] = request.perspectiveShrink;
  }
  if (!Util.isUnset(request.recommendNum)) {
    body['RecommendNum'] = request.recommendNum;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.utterance)) {
    body['Utterance'] = request.utterance;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BeeBotAssociate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request BeeBotAssociateRequest
  * @return BeeBotAssociateResponse
 */
async function beeBotAssociate(request: BeeBotAssociateRequest): BeeBotAssociateResponse {
  var runtime = new Util.RuntimeOptions{};
  return beeBotAssociateWithOptions(request, runtime);
}

model BeeBotChatRequest {
  chatBotInstanceId?: string(name='ChatBotInstanceId', description='The ID of chatbot instance.', example='1'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  intentName?: string(name='IntentName', description='The name of the intent in the dialog flow. When this parameter is specified, the bot will conduct a Q\\&A according to the intent.', example='intent'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939'),
  knowledgeId?: string(name='KnowledgeId', description='The ID of the knowledge title in the knowledge base.', example='1'),
  perspective?: [ string ](name='Perspective', description='The list of codes for answers from different perspectives.'),
  senderId?: string(name='SenderId', description='The ID of the visitor, which is used to identify users in the current session.', example='861500000000'),
  senderNick?: string(name='SenderNick', description='The nickname of the visitor in the current session.', example='nick'),
  sessionId?: string(name='SessionId', description='The ID of the session, which identifies the session and context information of the visitor.', example='en'),
  utterance?: string(name='Utterance', description='The input of the visitor.', example='659216218162179'),
  vendorParam?: map[string]any(name='VendorParam', description='The user-defined parameter set in JSON format. You can specify user-defined parameters for conversation engines.'),
}

model BeeBotChatShrinkRequest {
  chatBotInstanceId?: string(name='ChatBotInstanceId', description='The ID of chatbot instance.', example='1'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  intentName?: string(name='IntentName', description='The name of the intent in the dialog flow. When this parameter is specified, the bot will conduct a Q\\&A according to the intent.', example='intent'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939'),
  knowledgeId?: string(name='KnowledgeId', description='The ID of the knowledge title in the knowledge base.', example='1'),
  perspectiveShrink?: string(name='Perspective', description='The list of codes for answers from different perspectives.'),
  senderId?: string(name='SenderId', description='The ID of the visitor, which is used to identify users in the current session.', example='861500000000'),
  senderNick?: string(name='SenderNick', description='The nickname of the visitor in the current session.', example='nick'),
  sessionId?: string(name='SessionId', description='The ID of the session, which identifies the session and context information of the visitor.', example='en'),
  utterance?: string(name='Utterance', description='The input of the visitor.', example='659216218162179'),
  vendorParamShrink?: string(name='VendorParam', description='The user-defined parameter set in JSON format. You can specify user-defined parameters for conversation engines.'),
}

model BeeBotChatResponseBody = {
  code?: string(name='Code', description='If OK is returned, the request is successful.', example='OK'),
  data?: {
    messageId?: string(name='MessageId', description='The ID of the response message.', example='ab6be8af-cee4-40c3-9919-2ac7461d7d98'),
    messages?: [ 
      {
        answerSource?: string(name='AnswerSource', description='If the AnswerType parameter is set to Recommend, this parameter indicates the source of the recommended answer.', example='KNOWLEDGE'),
        answerType?: string(name='AnswerType', description='The type of the message.', example='Text'),
        knowledge?: {
          answerSource?: string(name='AnswerSource', description='The source of the answer.', example='KnowledgeBase'),
          category?: string(name='Category', description='The category of the knowledge.'),
          content?: string(name='Content', description='The content of the hit question.'),
          contentType?: string(name='ContentType', description='Indicates whether the answer is in plain text or rich text.', example='PLAIN_TEXT'),
          hitStatement?: string(name='HitStatement', description='The hit text.'),
          id?: string(name='Id', description='The ID of the hit problem in the knowledge base.', example='735898'),
          relatedKnowledges?: [ 
            {
              knowledgeId?: string(name='KnowledgeId', description='The ID of the related knowledge.', example='735899'),
              title?: string(name='Title', description='The title of the related knowledge.'),
            }
          ](name='RelatedKnowledges', description='The list of the related knowledge.'),
          summary?: string(name='Summary', description='The summary to the hit question.'),
          title?: string(name='Title', description='The title of the hit question.'),
        }(name='Knowledge', description='When the AnswerType parameter is set to Knowledge, this parameter contains the Knowledge object returned by the bot.'),
        recommends?: [ 
          {
            answerSource?: string(name='AnswerSource', description='The source of the recommended answer.', example='KNOWLEDGE'),
            knowledgeId?: string(name='KnowledgeId', description='The ID of the recommended knowledge.', example='4548'),
            title?: string(name='Title', description='The recommended content, which may be the entity in graph-based question answering, the standard knowledge in knowledge-based question answering, or the column value in table-based question answering.'),
          }
        ](name='Recommends', description='When the AnswerType parameter is set to Recommend, this parameter contains a list of recommends returned by the bot.'),
        text?: {
          answerSource?: string(name='AnswerSource', description='The source of the answer.', example='BotFramework'),
          content?: string(name='Content', description='The content of the text message.'),
          contentType?: string(name='ContentType', description='Indicates whether the answer is in plain text or rich text.', example='PLAIN_TEXT'),
          dialogName?: string(name='DialogName', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          ext?: map[string]any(name='Ext', description='The passthrough parameters are returned.'),
          externalFlags?: map[string]any(name='ExternalFlags', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          hitStatement?: string(name='HitStatement', description='The hit text.'),
          intentName?: string(name='IntentName', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          metaData?: string(name='MetaData', description='The metadata.'),
          nodeId?: string(name='NodeId', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.', example='1410-c7a72a78.__city'),
          nodeName?: string(name='NodeName', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          slots?: [ 
            {
              hit?: boolean(name='Hit', description='Indicates whether the slot is hit.', example='false'),
              name?: string(name='Name', description='The name of the slot.'),
              origin?: string(name='Origin', description='The original value.'),
              value?: string(name='Value', description='The specific value.'),
            }
          ](name='Slots', description='The list of slots.'),
          userDefinedChatTitle?: string(name='UserDefinedChatTitle', description='The title of the chitchat.'),
        }(name='Text', description='When the AnswerType parameter is set to Text, this parameter contains the Text object returned by the bot.'),
      }
    ](name='Messages', description='The list of the message.'),
    sessionId?: string(name='SessionId', description='The ID of the session.', example='1234'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='none'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model BeeBotChatResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: BeeBotChatResponseBody(name='body'),
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param tmpReq BeeBotChatRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return BeeBotChatResponse
 */
async function beeBotChatWithOptions(tmpReq: BeeBotChatRequest, runtime: Util.RuntimeOptions): BeeBotChatResponse {
  Util.validateModel(tmpReq);
  var request = new BeeBotChatShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.perspective)) {
    request.perspectiveShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.perspective, 'Perspective', 'json');
  }
  if (!Util.isUnset(tmpReq.vendorParam)) {
    request.vendorParamShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.vendorParam, 'VendorParam', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.chatBotInstanceId)) {
    body['ChatBotInstanceId'] = request.chatBotInstanceId;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.intentName)) {
    body['IntentName'] = request.intentName;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.knowledgeId)) {
    body['KnowledgeId'] = request.knowledgeId;
  }
  if (!Util.isUnset(request.perspectiveShrink)) {
    body['Perspective'] = request.perspectiveShrink;
  }
  if (!Util.isUnset(request.senderId)) {
    body['SenderId'] = request.senderId;
  }
  if (!Util.isUnset(request.senderNick)) {
    body['SenderNick'] = request.senderNick;
  }
  if (!Util.isUnset(request.sessionId)) {
    body['SessionId'] = request.sessionId;
  }
  if (!Util.isUnset(request.utterance)) {
    body['Utterance'] = request.utterance;
  }
  if (!Util.isUnset(request.vendorParamShrink)) {
    body['VendorParam'] = request.vendorParamShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'BeeBotChat',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request BeeBotChatRequest
  * @return BeeBotChatResponse
 */
async function beeBotChat(request: BeeBotChatRequest): BeeBotChatResponse {
  var runtime = new Util.RuntimeOptions{};
  return beeBotChatWithOptions(request, runtime);
}

model ChatappBindWabaRequest {
  wabaId?: string(name='WabaId', description='WabaId', example='2293938222343'),
}

model ChatappBindWabaResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='C02029392939939'),
    wabaId?: string(name='WabaId', description='wabaId', example='2939828282'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model ChatappBindWabaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappBindWabaResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappBindWabaRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChatappBindWabaResponse
 */
async function chatappBindWabaWithOptions(request: ChatappBindWabaRequest, runtime: Util.RuntimeOptions): ChatappBindWabaResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.wabaId)) {
    body['WabaId'] = request.wabaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChatappBindWaba',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappBindWabaRequest
  * @return ChatappBindWabaResponse
 */
async function chatappBindWaba(request: ChatappBindWabaRequest): ChatappBindWabaResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappBindWabaWithOptions(request, runtime);
}

model ChatappEmbedSignUpRequest {
  inputToken?: string(name='InputToken', description='The InputToken returned after the embedded signup flow is complete.', example='wlelkelwidilwloe-ewlwols0lwsllsld'),
}

model ChatappEmbedSignUpResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  wabas?: [ 
    {
      accountReviewStatus?: string(name='AccountReviewStatus', description='The review status of the WhatsApp Business account.', example='VERIFIED'),
      currency?: string(name='Currency', description='The currency.', example='USD'),
      id?: string(name='Id', description='WabaId', example='2939933992'),
      messageTemplateNamespace?: string(name='MessageTemplateNamespace', description='The namespace of the message template.', example='alals-lsslls-slslsos-slsl'),
      name?: string(name='Name', description='Waba Name', example='Alibaba'),
    }
  ](name='Wabas', description='The list of WhatsApp Business accounts.'),
}

model ChatappEmbedSignUpResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappEmbedSignUpResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappEmbedSignUpRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChatappEmbedSignUpResponse
 */
async function chatappEmbedSignUpWithOptions(request: ChatappEmbedSignUpRequest, runtime: Util.RuntimeOptions): ChatappEmbedSignUpResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.inputToken)) {
    body['InputToken'] = request.inputToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChatappEmbedSignUp',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappEmbedSignUpRequest
  * @return ChatappEmbedSignUpResponse
 */
async function chatappEmbedSignUp(request: ChatappEmbedSignUpRequest): ChatappEmbedSignUpResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappEmbedSignUpWithOptions(request, runtime);
}

model ChatappMigrationRegisterRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='86138000000'),
}

model ChatappMigrationRegisterResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappMigrationRegisterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappMigrationRegisterResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappMigrationRegisterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChatappMigrationRegisterResponse
 */
async function chatappMigrationRegisterWithOptions(request: ChatappMigrationRegisterRequest, runtime: Util.RuntimeOptions): ChatappMigrationRegisterResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChatappMigrationRegister',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappMigrationRegisterRequest
  * @return ChatappMigrationRegisterResponse
 */
async function chatappMigrationRegister(request: ChatappMigrationRegisterRequest): ChatappMigrationRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappMigrationRegisterWithOptions(request, runtime);
}

model ChatappMigrationVerifiedRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='861380000000'),
  verifyCode?: string(name='VerifyCode', description='The verification code.', example='828798'),
}

model ChatappMigrationVerifiedResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    id?: string(name='Id', description='The ID of the phone number.', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800000000'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappMigrationVerifiedResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappMigrationVerifiedResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappMigrationVerifiedRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChatappMigrationVerifiedResponse
 */
async function chatappMigrationVerifiedWithOptions(request: ChatappMigrationVerifiedRequest, runtime: Util.RuntimeOptions): ChatappMigrationVerifiedResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.verifyCode)) {
    query['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChatappMigrationVerified',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappMigrationVerifiedRequest
  * @return ChatappMigrationVerifiedResponse
 */
async function chatappMigrationVerified(request: ChatappMigrationVerifiedRequest): ChatappMigrationVerifiedResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappMigrationVerifiedWithOptions(request, runtime);
}

model ChatappPhoneNumberRegisterRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='939283893939'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800000000'),
}

model ChatappPhoneNumberRegisterResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappPhoneNumberRegisterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappPhoneNumberRegisterResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappPhoneNumberRegisterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChatappPhoneNumberRegisterResponse
 */
async function chatappPhoneNumberRegisterWithOptions(request: ChatappPhoneNumberRegisterRequest, runtime: Util.RuntimeOptions): ChatappPhoneNumberRegisterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChatappPhoneNumberRegister',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappPhoneNumberRegisterRequest
  * @return ChatappPhoneNumberRegisterResponse
 */
async function chatappPhoneNumberRegister(request: ChatappPhoneNumberRegisterRequest): ChatappPhoneNumberRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappPhoneNumberRegisterWithOptions(request, runtime);
}

model ChatappSyncPhoneNumberRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
}

model ChatappSyncPhoneNumberResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  phoneNumbers?: [ 
    {
      codeVerificationStatus?: string(name='CodeVerificationStatus', description='The verification status.', example='VERIFIED'),
      messagingLimitTier?: string(name='MessagingLimitTier', description='The maximum number of messages that can be sent to users by using the phone number.', example='TIER_10'),
      nameStatus?: string(name='NameStatus', description='The review status of the business display name.', example='Approval'),
      newNameStatus?: string(name='NewNameStatus', description='The review status of the new business display name.', example='Approval'),
      phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800000000'),
      qualityRating?: string(name='QualityRating', description='The quality rating of the phone number. Valid values: GREEN, YELLOW, and RED.', example='GREEN'),
      status?: string(name='Status', description='The status of the phone number.', example='PENDING'),
      statusCallbackUrl?: string(name='StatusCallbackUrl', description='The callback URL to which status reports are sent by using HTTP callbacks.', example='https://www.alibaba.com/status'),
      statusQueue?: string(name='StatusQueue', description='The status report queue.', example='alicom-09399200-queue'),
      upCallbackUrl?: string(name='UpCallbackUrl', description='The callback URL to which MO messages are sent by using HTTP callbacks.', example='https://www.alibaba.com/inbound'),
      upQueue?: string(name='UpQueue', description='The mobile originated (MO) message queue.', example='alicom-09399200-queue'),
      verifiedName?: string(name='VerifiedName', description='The display name of your business.', example='Alibaba'),
    }
  ](name='PhoneNumbers', description='The list of phone numbers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model ChatappSyncPhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappSyncPhoneNumberResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappSyncPhoneNumberRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChatappSyncPhoneNumberResponse
 */
async function chatappSyncPhoneNumberWithOptions(request: ChatappSyncPhoneNumberRequest, runtime: Util.RuntimeOptions): ChatappSyncPhoneNumberResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChatappSyncPhoneNumber',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappSyncPhoneNumberRequest
  * @return ChatappSyncPhoneNumberResponse
 */
async function chatappSyncPhoneNumber(request: ChatappSyncPhoneNumberRequest): ChatappSyncPhoneNumberResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappSyncPhoneNumberWithOptions(request, runtime);
}

model ChatappVerifyAndRegisterRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the ISV user with which the phone number is associated.', example='29389299388383'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number that you want to use to send WhatsApp business messages to your customers.', example='86138000000'),
  verifyCode?: string(name='VerifyCode', description='The verification code.', example='223222'),
}

model ChatappVerifyAndRegisterResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappVerifyAndRegisterResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChatappVerifyAndRegisterResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappVerifyAndRegisterRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ChatappVerifyAndRegisterResponse
 */
async function chatappVerifyAndRegisterWithOptions(request: ChatappVerifyAndRegisterRequest, runtime: Util.RuntimeOptions): ChatappVerifyAndRegisterResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.verifyCode)) {
    body['VerifyCode'] = request.verifyCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ChatappVerifyAndRegister',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ChatappVerifyAndRegisterRequest
  * @return ChatappVerifyAndRegisterResponse
 */
async function chatappVerifyAndRegister(request: ChatappVerifyAndRegisterRequest): ChatappVerifyAndRegisterResponse {
  var runtime = new Util.RuntimeOptions{};
  return chatappVerifyAndRegisterWithOptions(request, runtime);
}

model CreateChatappMigrationInitiateRequest {
  countryCode?: string(name='CountryCode', description='The country code of the phone number.', example='86'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  mobileNumber?: string(name='MobileNumber', description='The phone number without the country code.', example='13800000000'),
}

model CreateChatappMigrationInitiateResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://www.alibabacloud.com/help/zh/cams/latest/api-error-codes).', example='OK'),
  data?: {
    id?: string(name='Id', description='The ID of the phone number.', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800000000'),
    status?: string(name='Status', description='The status of the phone number.', example='MIGRATING'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model CreateChatappMigrationInitiateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateChatappMigrationInitiateResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateChatappMigrationInitiateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateChatappMigrationInitiateResponse
 */
async function createChatappMigrationInitiateWithOptions(request: CreateChatappMigrationInitiateRequest, runtime: Util.RuntimeOptions): CreateChatappMigrationInitiateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.countryCode)) {
    query['CountryCode'] = request.countryCode;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.mobileNumber)) {
    query['MobileNumber'] = request.mobileNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateChatappMigrationInitiate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request CreateChatappMigrationInitiateRequest
  * @return CreateChatappMigrationInitiateResponse
 */
async function createChatappMigrationInitiate(request: CreateChatappMigrationInitiateRequest): CreateChatappMigrationInitiateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChatappMigrationInitiateWithOptions(request, runtime);
}

model CreateChatappTemplateRequest {
  category?: string(name='Category', description='The category of the message template. Valid values:

*   **ACCOUNT_UPDATE**: account update
*   **PAYMENT_UPDATE**: payment update
*   **PERSONAL_FINANCE\\_UPDATE**: personal finance update
*   **SHIPPING_UPDATE**: traffic update
*   **RESERVATION_UPDATE**: reservation update
*   **ISSUE_RESOLUTION**: issue resolution
*   **APPOINTMENT_UPDATE**: appointment update
*   **TRANSPORTATION_UPDATE**: logistics information update
*   **TICKET_UPDATE**: ticket update
*   **ALERT_UPDATE**: alert update
*   **AUTO_REPLY**: auto reply', example='ACCOUNT_UPDATE'),
  components?: [ 
    {
      buttons?: [ 
        {
          phoneNumber?: string(name='PhoneNumber', description='The mobile phone number. This parameter is valid only if the Type parameter is set to **PHONE_NUMBER**.', example='+861368897****'),
          text?: string(name='Text', description='The display name of the button.', example='Call Me'),
          type?: string(name='Type', description='The type of the button. Valid values:

*   **PHONE_NUMBER**: a phone call button
*   **URL**: a URL button
*   **QUICK_REPLY**: a quick reply button

> *   A quick reply button cannot coexist with a phone call button or a URL button in a message template.
> *   You can add a combination of two URL buttons or a combination of a URL button and a phone call button to a message template.', example='PHONE_NUMBER'),
          url?: string(name='Url', description='The URL to be accessed when you click the URL button.', example='https://example.com'),
          urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**: a static URL
*   **dynamic**: a dynamic URL', example='static'),
        }
      ](name='Buttons', description='This parameter applies only to components of the **BUTTONS** type.'),
      caption?: string(name='Caption', description='The description of the file.', example='This is a video.'),
      fileName?: string(name='FileName', description='The name of the file.', example='Express video'),
      format?: string(name='Format', description='The format of the message.

*   **TEXT**: text
*   **IMGAGE**: image
*   **DOCUMENT**: document
*   **VIDEO**: video', example='TEXT'),
      text?: string(name='Text', description='The text of the message to be sent.', example='hello whatsapp'),
      type?: string(name='Type', description='The type of the component. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**

> A component of the **BODY** type cannot exceed 1,024 characters in length. A component of the **HEADER** or **FOOTER** type cannot exceed 60 characters in length.', example='BODY'),
      url?: string(name='Url', description='The URL of the material.', example='https://image.developer.aliyundoc.com'),
    }
  ](name='Components', description='The components of the message template.'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  example?: map[string]string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en'),
  name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
  templateType?: string(name='TemplateType', description='The type of the message template. Valid values:

*   **WHATSAPP**
*   VIBER (under development)
*   LINE (under development)', example='WHATSAPP'),
}

model CreateChatappTemplateShrinkRequest {
  category?: string(name='Category', description='The category of the message template. Valid values:

*   **ACCOUNT_UPDATE**: account update
*   **PAYMENT_UPDATE**: payment update
*   **PERSONAL_FINANCE\\_UPDATE**: personal finance update
*   **SHIPPING_UPDATE**: traffic update
*   **RESERVATION_UPDATE**: reservation update
*   **ISSUE_RESOLUTION**: issue resolution
*   **APPOINTMENT_UPDATE**: appointment update
*   **TRANSPORTATION_UPDATE**: logistics information update
*   **TICKET_UPDATE**: ticket update
*   **ALERT_UPDATE**: alert update
*   **AUTO_REPLY**: auto reply', example='ACCOUNT_UPDATE'),
  componentsShrink?: string(name='Components', description='The components of the message template.'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  exampleShrink?: string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en'),
  name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
  templateType?: string(name='TemplateType', description='The type of the message template. Valid values:

*   **WHATSAPP**
*   VIBER (under development)
*   LINE (under development)', example='WHATSAPP'),
}

model CreateChatappTemplateResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A code of OK indicates that the call is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='SMS_232907****'),
    templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
  }(name='Data', description='The data returned.', example='{"templateCode": "****4b5c79c9432497a075bdfca36bf5"，"templateName": "hello_whatsapp"}'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2D'),
}

model CreateChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateChatappTemplateResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param tmpReq CreateChatappTemplateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateChatappTemplateResponse
 */
async function createChatappTemplateWithOptions(tmpReq: CreateChatappTemplateRequest, runtime: Util.RuntimeOptions): CreateChatappTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreateChatappTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.components)) {
    request.componentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.components, 'Components', 'json');
  }
  if (!Util.isUnset(tmpReq.example)) {
    request.exampleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.example, 'Example', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.category)) {
    body['Category'] = request.category;
  }
  if (!Util.isUnset(request.componentsShrink)) {
    body['Components'] = request.componentsShrink;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.exampleShrink)) {
    body['Example'] = request.exampleShrink;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    body['Name'] = request.name;
  }
  if (!Util.isUnset(request.templateType)) {
    body['TemplateType'] = request.templateType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'CreateChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param request CreateChatappTemplateRequest
  * @return CreateChatappTemplateResponse
 */
async function createChatappTemplate(request: CreateChatappTemplateRequest): CreateChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createChatappTemplateWithOptions(request, runtime);
}

model DeleteChatappTemplateRequest {
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
}

model DeleteChatappTemplateResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A code of OK indicates that the call is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model DeleteChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteChatappTemplateResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param request DeleteChatappTemplateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DeleteChatappTemplateResponse
 */
async function deleteChatappTemplateWithOptions(request: DeleteChatappTemplateRequest, runtime: Util.RuntimeOptions): DeleteChatappTemplateResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param request DeleteChatappTemplateRequest
  * @return DeleteChatappTemplateResponse
 */
async function deleteChatappTemplate(request: DeleteChatappTemplateRequest): DeleteChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteChatappTemplateWithOptions(request, runtime);
}

model GetChatappTemplateDetailRequest {
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='****4b5c79c9432497a075bdfca36bf5'),
}

model GetChatappTemplateDetailResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A code of OK indicates that the call is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
    category?: string(name='Category', description='The category of the message template. Valid values:

*   **ACCOUNT_UPDATE**: account update
*   **PAYMENT_UPDATE**: payment update
*   **PERSONAL_FINANCE\\_UPDATE**: personal finance update
*   **SHIPPING_UPDATE**: traffic update
*   **RESERVATION_UPDATE**: reservation update
*   **ISSUE_RESOLUTION**: issue resolution
*   **APPOINTMENT_UPDATE**: appointment update
*   **TRANSPORTATION_UPDATE**: logistics information update
*   **TICKET_UPDATE**: ticket update
*   **ALERT_UPDATE**: alert update
*   **AUTO_REPLY**: auto reply', example='ACCOUNT_UPDATE'),
    components?: [ 
      {
        buttons?: [ 
          {
            phoneNumber?: string(name='PhoneNumber', description='The mobile phone number. This parameter is valid only if the Type parameter is set to **PHONE_NUMBER**.', example='861398745****'),
            text?: string(name='Text', description='The display name of the button.', example='Call'),
            type?: string(name='Type', description='The type of the button. Valid values:

*   **PHONE_NUMBER**: a phone call button
*   **URL**: a URL button
*   **QUICK_REPLY**: a quick reply button

**

**Note**

*   A quick reply button cannot coexist with a phone call button or a URL button in a message template.

*   You can add a combination of two URL buttons or a combination of a URL button and a phone call button to a message template.', example='PHONE_NUMBER'),
            url?: string(name='Url', description='The URL to be accessed when you click the URL button.', example='https://example.com'),
            urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**: a static URL
*   **dynamic**: a dynamic URL', example='static'),
          }
        ](name='Buttons', description='This parameter applies only to components of the **BUTTONS** type. This parameter is passed in by converting its original JSON structure into a string.'),
        caption?: string(name='Caption', description='The description of the file.', example='The new file has been uploaded.'),
        fileName?: string(name='FileName', description='The name of the file.', example='Express file'),
        format?: string(name='Format', description='The format.', example='TEXT'),
        text?: string(name='Text', description='The text of the message to be sent.', example='Hello'),
        type?: string(name='Type', description='The type of the component. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**

**

**Note** A component of the **BODY** type cannot exceed 1,024 characters in length. A component of the **HEADER** or **FOOTER** type cannot exceed 60 characters in length.', example='BODY'),
        url?: string(name='Url', description='The URL of the material.', example='https://image.developer.aliyundoc.com'),
      }
    ](name='Components', description='The components of the message template.'),
    example?: map[string]string(name='Example', description='The examples of variables.'),
    language?: string(name='Language', description='The language that is used in the message template.', example='en'),
    name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
  }(name='Data', description='The data returned.', example='{ 		"category": "ACCOUNT_UPDATE", 		"name": "account_notice", 		"language": "en_US", 		"templateCode": "744c4b5c79c9432497a075bdfca3****", 		"auditStatus": "APPROVED", 		"components": "[{\\"type\\":\\"BODY\\",\\"text\\":\\"body_text$(textVariable)\\"},{\\"type\\":\\"HEADER\\",\\"formate\\":\\"IMAGE\\",\\"url\\":\\"$(linkVariable)\\"},{\\"type\\":\\"FOOTER\\",\\"text\\":\\"footer-text\\"},{\\"type\\":\\"BUTTONS\\",\\"buttons\\":[{\\"type\\":\\"PHONE_NUMBER\\",\\"text\\":\\"phone-button-text\\",\\"phone_number\\":\\"+861388888****\\"},{\\"type\\":\\"URL\\",\\"text\\":\\"url-button-text\\",\\"url\\":\\"https://www.website.com/\\"}]}]", 		"example": "{\\"textVariable\\": \\"text\\", \\"linkVariable\\": \\"link\\"}" 	}'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='744c4b5c79c9432497a075bdfca3****'),
}

model GetChatappTemplateDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetChatappTemplateDetailResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param request GetChatappTemplateDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetChatappTemplateDetailResponse
 */
async function getChatappTemplateDetailWithOptions(request: GetChatappTemplateDetailRequest, runtime: Util.RuntimeOptions): GetChatappTemplateDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.templateCode)) {
    query['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappTemplateDetail',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param request GetChatappTemplateDetailRequest
  * @return GetChatappTemplateDetailResponse
 */
async function getChatappTemplateDetail(request: GetChatappTemplateDetailRequest): GetChatappTemplateDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappTemplateDetailWithOptions(request, runtime);
}

model GetChatappVerifyCodeRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='229393838'),
  locale?: string(name='Locale', description='The language.', example='zh_CN'),
  method?: string(name='Method', description='The type of the verification code. Valid values: SMS and VOICE.', example='SMS'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='861380000'),
}

model GetChatappVerifyCodeResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1612C226-E271-4CFE-9F18-4066D550F91B'),
}

model GetChatappVerifyCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetChatappVerifyCodeResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetChatappVerifyCodeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetChatappVerifyCodeResponse
 */
async function getChatappVerifyCodeWithOptions(request: GetChatappVerifyCodeRequest, runtime: Util.RuntimeOptions): GetChatappVerifyCodeResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.locale)) {
    body['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.method)) {
    body['Method'] = request.method;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetChatappVerifyCode',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetChatappVerifyCodeRequest
  * @return GetChatappVerifyCodeResponse
 */
async function getChatappVerifyCode(request: GetChatappVerifyCodeRequest): GetChatappVerifyCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getChatappVerifyCodeWithOptions(request, runtime);
}

model GetMigrationVerifyCodeRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  locale?: string(name='Locale', description='The language.', example='zh_CN'),
  method?: string(name='Method', description='The method for sending a verification code. Valid values: sms and voice.', example='sms'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800000'),
}

model GetMigrationVerifyCodeResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    id?: string(name='Id', description='The ID of the phone number.', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800000000'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model GetMigrationVerifyCodeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetMigrationVerifyCodeResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetMigrationVerifyCodeRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetMigrationVerifyCodeResponse
 */
async function getMigrationVerifyCodeWithOptions(request: GetMigrationVerifyCodeRequest, runtime: Util.RuntimeOptions): GetMigrationVerifyCodeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.method)) {
    query['Method'] = request.method;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetMigrationVerifyCode',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetMigrationVerifyCodeRequest
  * @return GetMigrationVerifyCodeResponse
 */
async function getMigrationVerifyCode(request: GetMigrationVerifyCodeRequest): GetMigrationVerifyCodeResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMigrationVerifyCodeWithOptions(request, runtime);
}

model GetPhoneNumberVerificationStatusRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='229393838'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='861380000'),
}

model GetPhoneNumberVerificationStatusResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    codeVerificationStatus?: string(name='CodeVerificationStatus', description='The verification status of the phone number.', example='VERIFIED'),
    id?: string(name='Id', description='The ID of the phone number.', example='2224342624'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='861380000'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2D'),
}

model GetPhoneNumberVerificationStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPhoneNumberVerificationStatusResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetPhoneNumberVerificationStatusRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetPhoneNumberVerificationStatusResponse
 */
async function getPhoneNumberVerificationStatusWithOptions(request: GetPhoneNumberVerificationStatusRequest, runtime: Util.RuntimeOptions): GetPhoneNumberVerificationStatusResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    body['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'GetPhoneNumberVerificationStatus',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request GetPhoneNumberVerificationStatusRequest
  * @return GetPhoneNumberVerificationStatusResponse
 */
async function getPhoneNumberVerificationStatus(request: GetPhoneNumberVerificationStatusRequest): GetPhoneNumberVerificationStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPhoneNumberVerificationStatusWithOptions(request, runtime);
}

model IsvGetAppIdRequest {
  type?: string(name='Type', description='The type of the application. Set the value to WHATSAPP.', example='WHATSAPP'),
}

model IsvGetAppIdResponseBody = {
  appId?: string(name='AppId', description='The message ID.', example='23hr3v'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='null'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='744c4b5c79c9432497a075bdfca3****'),
}

model IsvGetAppIdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: IsvGetAppIdResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request IsvGetAppIdRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return IsvGetAppIdResponse
 */
async function isvGetAppIdWithOptions(request: IsvGetAppIdRequest, runtime: Util.RuntimeOptions): IsvGetAppIdResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'IsvGetAppId',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request IsvGetAppIdRequest
  * @return IsvGetAppIdResponse
 */
async function isvGetAppId(request: IsvGetAppIdRequest): IsvGetAppIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return isvGetAppIdWithOptions(request, runtime);
}

model ListChatappTemplateRequest {
  auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en'),
  name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
  page?: {
    index?: int32(name='Index', description='The number of the page to return. Default value: 1.', example='1'),
    size?: int32(name='Size', description='The number of message templates to return on each page. Default value: 10.', example='10'),
  }(name='Page', description='The paging settings.', example='"page": "{\\"index\\": 1,\\"size\\": 20}'),
}

model ListChatappTemplateShrinkRequest {
  auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
  custSpaceId?: string(name='CustSpaceId', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en'),
  name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
  pageShrink?: string(name='Page', description='The paging settings.', example='"page": "{\\"index\\": 1,\\"size\\": 20}'),
}

model ListChatappTemplateResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A code of OK indicates that the call is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  listTemplate?: [ 
    {
      auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
      category?: string(name='Category', description='The category of the message template. Valid values:

*   **ACCOUNT_UPDATE**: account update
*   **PAYMENT_UPDATE**: payment update
*   **PERSONAL_FINANCE\\_UPDATE**: personal finance update
*   **SHIPPING_UPDATE**: traffic update
*   **RESERVATION_UPDATE**: reservation update
*   **ISSUE_RESOLUTION**: issue resolution
*   **APPOINTMENT_UPDATE**: appointment update
*   **TRANSPORTATION_UPDATE**: logistics information update
*   **TICKET_UPDATE**: ticket update
*   **ALERT_UPDATE**: alert update
*   **AUTO_REPLY**: auto reply', example='ACCOUNT_UPDATE'),
      language?: string(name='Language', description='The language that is used in the message template.', example='en'),
      templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
      templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
    }
  ](name='ListTemplate', description='The message templates.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ListChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListChatappTemplateResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param tmpReq ListChatappTemplateRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ListChatappTemplateResponse
 */
async function listChatappTemplateWithOptions(tmpReq: ListChatappTemplateRequest, runtime: Util.RuntimeOptions): ListChatappTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new ListChatappTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.page)) {
    request.pageShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.page, 'Page', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.auditStatus)) {
    query['AuditStatus'] = request.auditStatus;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    query['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    query['Language'] = request.language;
  }
  if (!Util.isUnset(request.name)) {
    query['Name'] = request.name;
  }
  if (!Util.isUnset(request.pageShrink)) {
    query['Page'] = request.pageShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
  * @param request ListChatappTemplateRequest
  * @return ListChatappTemplateResponse
 */
async function listChatappTemplate(request: ListChatappTemplateRequest): ListChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return listChatappTemplateWithOptions(request, runtime);
}

model ModifyChatappTemplateRequest {
  components?: [ 
    {
      buttons?: [ 
        {
          phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='+8613888887889'),
          text?: string(name='Text', description='The text of the message to be sent.', example='phone-button-text'),
          type?: string(name='Type', description='The type of the button.

*   **PHONE_NUMBER**: the phone call button
*   **URL**: the URL button
*   **QUICK_REPLY**: the quick reply button', example='PHONE_NUMBER'),
          url?: string(name='Url', description='The URL to be visited after clicking the button.', example='https://www.website.com/'),
          urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**: the static URL
*   **dynamic**: the dynamic URL', example='dynamic'),
        }
      ](name='Buttons', description='The list of buttons, which applies only to the **BUTTONS** component.'),
      caption?: string(name='Caption', description='The description.

>  When the Type parameter is set to **HEADER** and the Format parameter is set to **IMAGE/DOCUMENT/VIDEO**, you can specify the description.', example='This is a video.'),
      fileName?: string(name='FileName', description='The name of the file.

> : When the Type parameter is set to **HEADER** and the Format parameter is set to **DOCUMENT**, you can specify a name of the file.', example='Video'),
      format?: string(name='Format', description='The type of the media resource.

*   **TEXT**: text
*   **IMAGE**: image
*   **DOCUMENT**: document
*   **VIDEO**: video', example='TEXT'),
      text?: string(name='Text', description='The text of the message to be sent.', example='hello chatapp'),
      type?: string(name='Type', description='The type of the component.

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**', example='BODY'),
      url?: string(name='Url', description='The URL of the material.', example='"https://img.tukuppt.com/png_preview/00/10/24/1GygxVK3F4.jpg'),
    }
  ](name='Components', description='The list of components of the message template.'),
  custSpaceId?: string(name='CustSpaceId', description='Isv customer space id', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatApp Business account of the ISV customer.', example='659216218162179', deprecated='true'),
  example?: map[string]string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939'),
  language?: string(name='Language', description='The language.', example='en'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='8472929283883'),
}

model ModifyChatappTemplateShrinkRequest {
  componentsShrink?: string(name='Components', description='The list of components of the message template.'),
  custSpaceId?: string(name='CustSpaceId', description='Isv customer space id', example='293483938849493'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatApp Business account of the ISV customer.', example='659216218162179', deprecated='true'),
  exampleShrink?: string(name='Example', description='The examples of variables that are used when you create the message template.'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939'),
  language?: string(name='Language', description='The language.', example='en'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='8472929283883'),
}

model ModifyChatappTemplateResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

*   If OK is returned, the request is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='8472929283883'),
    templateName?: string(name='TemplateName', description='The name of the template.', example='hello_whatsapp'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ModifyChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyChatappTemplateResponseBody(name='body'),
}

async function modifyChatappTemplateWithOptions(tmpReq: ModifyChatappTemplateRequest, runtime: Util.RuntimeOptions): ModifyChatappTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyChatappTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.components)) {
    request.componentsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.components, 'Components', 'json');
  }
  if (!Util.isUnset(tmpReq.example)) {
    request.exampleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.example, 'Example', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.componentsShrink)) {
    body['Components'] = request.componentsShrink;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.exampleShrink)) {
    body['Example'] = request.exampleShrink;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ModifyChatappTemplate',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyChatappTemplate(request: ModifyChatappTemplateRequest): ModifyChatappTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyChatappTemplateWithOptions(request, runtime);
}

model ModifyPhoneBusinessProfileRequest {
  address?: string(name='Address', description='The address.', example='Address'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  description?: string(name='Description', description='The description.', example='Description'),
  email?: string(name='Email', description='The email address.', example='aa@aliyun.com'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='Phone number'),
  profilePictureUrl?: string(name='ProfilePictureUrl', description='The URL of the profile picture.', example='http://a.img'),
  vertical?: string(name='Vertical', description='The industry.', example='Retail'),
  websites?: [ string ](name='Websites', description='The websites.'),
}

model ModifyPhoneBusinessProfileShrinkRequest {
  address?: string(name='Address', description='The address.', example='Address'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  description?: string(name='Description', description='The description.', example='Description'),
  email?: string(name='Email', description='The email address.', example='aa@aliyun.com'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='Phone number'),
  profilePictureUrl?: string(name='ProfilePictureUrl', description='The URL of the profile picture.', example='http://a.img'),
  vertical?: string(name='Vertical', description='The industry.', example='Retail'),
  websitesShrink?: string(name='Websites', description='The websites.'),
}

model ModifyPhoneBusinessProfileResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model ModifyPhoneBusinessProfileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyPhoneBusinessProfileResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param tmpReq ModifyPhoneBusinessProfileRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ModifyPhoneBusinessProfileResponse
 */
async function modifyPhoneBusinessProfileWithOptions(tmpReq: ModifyPhoneBusinessProfileRequest, runtime: Util.RuntimeOptions): ModifyPhoneBusinessProfileResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyPhoneBusinessProfileShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.websites)) {
    request.websitesShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.websites, 'Websites', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.address)) {
    query['Address'] = request.address;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.email)) {
    query['Email'] = request.email;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.profilePictureUrl)) {
    query['ProfilePictureUrl'] = request.profilePictureUrl;
  }
  if (!Util.isUnset(request.vertical)) {
    query['Vertical'] = request.vertical;
  }
  if (!Util.isUnset(request.websitesShrink)) {
    query['Websites'] = request.websitesShrink;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyPhoneBusinessProfile',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request ModifyPhoneBusinessProfileRequest
  * @return ModifyPhoneBusinessProfileResponse
 */
async function modifyPhoneBusinessProfile(request: ModifyPhoneBusinessProfileRequest): ModifyPhoneBusinessProfileResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyPhoneBusinessProfileWithOptions(request, runtime);
}

model QueryChatappBindWabaRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by ISV.', example='aksik93kdkkxmwol93939'),
}

model QueryChatappBindWabaResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    accountReviewStatus?: string(name='AccountReviewStatus', description='The audit status of the WhatApp Business account.', example='APPROVED'),
    currency?: string(name='Currency', description='Currency', example='USD'),
    id?: string(name='Id', description='WabaID', example='20393988393993***'),
    messageTemplateNamespace?: string(name='MessageTemplateNamespace', description='The namespace of the message template.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
    name?: string(name='Name', description='The name of the WhatApp Business account.', example='Alibaba'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model QueryChatappBindWabaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryChatappBindWabaResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryChatappBindWabaRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryChatappBindWabaResponse
 */
async function queryChatappBindWabaWithOptions(request: QueryChatappBindWabaRequest, runtime: Util.RuntimeOptions): QueryChatappBindWabaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryChatappBindWaba',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryChatappBindWabaRequest
  * @return QueryChatappBindWabaResponse
 */
async function queryChatappBindWaba(request: QueryChatappBindWabaRequest): QueryChatappBindWabaResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryChatappBindWabaWithOptions(request, runtime);
}

model QueryChatappPhoneNumbersRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='aksik93kdkkxmwol93939'),
}

model QueryChatappPhoneNumbersResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The message returned.', example='SUCCESS'),
  phoneNumbers?: [ 
    {
      codeVerificationStatus?: string(name='CodeVerificationStatus', description='The verification status of the phone number.', example='VERIFIED'),
      messagingLimitTier?: string(name='MessagingLimitTier', description='The maximum number of messages that can be sent to users by using the phone number.', example='TIER_10'),
      nameStatus?: string(name='NameStatus', description='The status of the business name.', example='Approval'),
      newNameStatus?: string(name='NewNameStatus', description='The review status of the new business name.', example='Approval'),
      phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800000'),
      qualityRating?: string(name='QualityRating', description='The quality rating of the phone number. Valid values:

*   **GREEN**
*   **YELLOW**
*   **RED**
*   **UNKNOWN**', example='GREEN'),
      status?: string(name='Status', description='The status of the phone number.

*   PENDING
*   DELETED
*   MIGRATED
*   BANNED
*   RESTRICTED
*   RATE_LIMITED
*   FLAGGED
*   CONNECTED
*   DISCONNECTED
*   UNKNOWN
*   UNVERIFIED', example='CONNECTED'),
      statusCallbackUrl?: string(name='StatusCallbackUrl', description='The callback URL to which status reports are sent by using HTTP callbacks.', example='https://ali.com/status'),
      statusQueue?: string(name='StatusQueue', description='The status report notification queue.', example='Alicom-Queue-****-ChatAppStatus'),
      upCallbackUrl?: string(name='UpCallbackUrl', description='The callback URL to which MO messages are sent by using HTTP callbacks.', example='https://ali.com/inbound'),
      upQueue?: string(name='UpQueue', description='The mobile originated (MO) message notification queue.', example='Alicom-Queue-****-ChatAppInbound'),
      verifiedName?: string(name='VerifiedName', description='The name of the company with which the phone number is associated.', example='Alibaba'),
    }
  ](name='PhoneNumbers', description='The list of phone numbers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model QueryChatappPhoneNumbersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryChatappPhoneNumbersResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryChatappPhoneNumbersRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryChatappPhoneNumbersResponse
 */
async function queryChatappPhoneNumbersWithOptions(request: QueryChatappPhoneNumbersRequest, runtime: Util.RuntimeOptions): QueryChatappPhoneNumbersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.isvCode)) {
    query['IsvCode'] = request.isvCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryChatappPhoneNumbers',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryChatappPhoneNumbersRequest
  * @return QueryChatappPhoneNumbersResponse
 */
async function queryChatappPhoneNumbers(request: QueryChatappPhoneNumbersRequest): QueryChatappPhoneNumbersResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryChatappPhoneNumbersWithOptions(request, runtime);
}

model QueryPhoneBusinessProfileRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='861380000000'),
}

model QueryPhoneBusinessProfileResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    address?: string(name='Address', description='The address.', example='Changsha'),
    description?: string(name='Description', description='The description', example='Description'),
    email?: string(name='Email', description='The email address.', example='aa@aliyun.com'),
    profilePictureUrl?: string(name='ProfilePictureUrl', description='The URL of the profile picture.', example='https://....img'),
    vertical?: string(name='Vertical', description='The industry.', example='Retail'),
    websites?: [ string ](name='Websites', description='The websites.'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model QueryPhoneBusinessProfileResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPhoneBusinessProfileResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryPhoneBusinessProfileRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryPhoneBusinessProfileResponse
 */
async function queryPhoneBusinessProfileWithOptions(request: QueryPhoneBusinessProfileRequest, runtime: Util.RuntimeOptions): QueryPhoneBusinessProfileResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPhoneBusinessProfile',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryPhoneBusinessProfileRequest
  * @return QueryPhoneBusinessProfileResponse
 */
async function queryPhoneBusinessProfile(request: QueryPhoneBusinessProfileRequest): QueryPhoneBusinessProfileResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPhoneBusinessProfileWithOptions(request, runtime);
}

model QueryWabaBusinessInfoRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  wabaId?: string(name='WabaId', description='The ID of the WhatsApp Business account.', example='293848822333'),
}

model QueryWabaBusinessInfoResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    businessId?: string(name='BusinessId', description='The ID of the business platform.', example='192882828733'),
    businessName?: string(name='BusinessName', description='The name of the business platform.', example='Alibaba'),
    verificationStatus?: string(name='VerificationStatus', description='The verification status.', example='verified'),
    vertical?: string(name='Vertical', description='The industry.', example='Retail'),
  }(name='Data', description='The business information about the WhatsApp Business account.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model QueryWabaBusinessInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryWabaBusinessInfoResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryWabaBusinessInfoRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryWabaBusinessInfoResponse
 */
async function queryWabaBusinessInfoWithOptions(request: QueryWabaBusinessInfoRequest, runtime: Util.RuntimeOptions): QueryWabaBusinessInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.wabaId)) {
    query['WabaId'] = request.wabaId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryWabaBusinessInfo',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request QueryWabaBusinessInfoRequest
  * @return QueryWabaBusinessInfoResponse
 */
async function queryWabaBusinessInfo(request: QueryWabaBusinessInfoRequest): QueryWabaBusinessInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryWabaBusinessInfoWithOptions(request, runtime);
}

model SendChatappMassMessageRequest {
  channelType?: string(name='ChannelType', description='The channel type. Valid values: whatsapp, viber, and line.', example='whatsapp'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatApp Business account of the ISV account.', example='65921621816****', deprecated='true'),
  fallBackContent?: string(name='FallBackContent', description='The fallback content.', example='Fallback message'),
  fallBackId?: string(name='FallBackId', description='The ID of the fallback strategy.', example='S00001'),
  from?: string(name='From', description='The message sender.', example='861387777****'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  label?: string(name='Label', description='Viber消息类型，取值：pormotion或transation。', example='promotion'),
  language?: string(name='Language', description='The language. For more information about language codes, see [Language codes](~~463420~~).', example='en'),
  senderList?: [ 
    {
      payload?: [ string ](name='Payload', description='The payload.'),
      templateParams?: map[string]string(name='TemplateParams', description='The parameters of the message template.'),
      to?: string(name='To', description='The phone number that receives the message.', example='861388988****'),
    }
  ](name='SenderList', description='The list of phone numbers that receive the message.'),
  tag?: string(name='Tag', description='Viber消息发送时tag信息。', example='tag'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='100000001'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca36bf5'),
  ttl?: long(name='Ttl', description='Viber消息发送超时时间，单位：秒，取值范围 30~1209600。', example='50'),
}

model SendChatappMassMessageShrinkRequest {
  channelType?: string(name='ChannelType', description='The channel type. Valid values: whatsapp, viber, and line.', example='whatsapp'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatApp Business account of the ISV account.', example='65921621816****', deprecated='true'),
  fallBackContent?: string(name='FallBackContent', description='The fallback content.', example='Fallback message'),
  fallBackId?: string(name='FallBackId', description='The ID of the fallback strategy.', example='S00001'),
  from?: string(name='From', description='The message sender.', example='861387777****'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  label?: string(name='Label', description='Viber消息类型，取值：pormotion或transation。', example='promotion'),
  language?: string(name='Language', description='The language. For more information about language codes, see [Language codes](~~463420~~).', example='en'),
  senderListShrink?: string(name='SenderList', description='The list of phone numbers that receive the message.'),
  tag?: string(name='Tag', description='Viber消息发送时tag信息。', example='tag'),
  taskId?: string(name='TaskId', description='The ID of the task.', example='100000001'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca36bf5'),
  ttl?: long(name='Ttl', description='Viber消息发送超时时间，单位：秒，取值范围 30~1209600。', example='50'),
}

model SendChatappMassMessageResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  groupMessageId?: string(name='GroupMessageId', description='The ID of the group of messages.', example='890000010002****'),
  message?: string(name='Message', description='The error message.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model SendChatappMassMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendChatappMassMessageResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * You can send messages to up to 1,000 phone numbers in a single request.
  *
  * @param tmpReq SendChatappMassMessageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SendChatappMassMessageResponse
 */
async function sendChatappMassMessageWithOptions(tmpReq: SendChatappMassMessageRequest, runtime: Util.RuntimeOptions): SendChatappMassMessageResponse {
  Util.validateModel(tmpReq);
  var request = new SendChatappMassMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.senderList)) {
    request.senderListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.senderList, 'SenderList', 'json');
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.fallBackContent)) {
    body['FallBackContent'] = request.fallBackContent;
  }
  if (!Util.isUnset(request.fallBackId)) {
    body['FallBackId'] = request.fallBackId;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.label)) {
    body['Label'] = request.label;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.senderListShrink)) {
    body['SenderList'] = request.senderListShrink;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.taskId)) {
    body['TaskId'] = request.taskId;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.ttl)) {
    body['Ttl'] = request.ttl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendChatappMassMessage',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * You can send messages to up to 1,000 phone numbers in a single request.
  *
  * @param request SendChatappMassMessageRequest
  * @return SendChatappMassMessageResponse
 */
async function sendChatappMassMessage(request: SendChatappMassMessageRequest): SendChatappMassMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendChatappMassMessageWithOptions(request, runtime);
}

model SendChatappMessageRequest {
  channelType?: string(name='ChannelType', description='The type of the message channel. Valid values:

*   **whatsapp**
*   **viber**. This message channel is supported only when you set the Type parameter to message.
*   line. The feature ChatApp sends messages by using Line is under development.', example='whatsapp'),
  content?: string(name='Content', description='The content of the message.

**Usage notes when you set the ChannelType parameter to whatsapp**

*   When you set the **MessageType** parameter to **text**, the **text** parameter is required and the **caption** parameter cannot be specified.
*   When you set the **MessageType** parameter to **image**, the **link** parameter is required.
*   When you set the **MessageType** parameter to **video**, the **link** parameter is required.
*   When you set the **MessageType** parameter to **audio**, the **link** parameter is required and **caption** parameter is invalid.
*   When you set the **MessageType** parameter to**document**, the **link** and **fileName** parameters are required and **caption** parameter is invalid.
*   When you set the **MessageType** parameter to **interactive**, the **type** and **action** parameters are required.
*   When you set the **MessageType** parameter to **contacts**, the **name** parameter is required.
*   When you set the **MessageType** parameter to **location**, the **longitude** and **latitude** parameters are required.
*   When you set the **MessageType** parameter to **sticker**, the **link** parameter is required, and the **caption** and **fileName** parameters are invalid.
*   When you set the **MessageType** parameter to **reaction**, the **messageId** and **emoji** parameters are required.

**Usage notes when you set the ChannelType parameter to viber**

*   When you set the **MessageType** parameter to **text**, the **text** parameter is required.
*   When you set the **MessageType** parameter to **image**, the **link** parameter is required.
*   When you set the **MessageType** parameter to **video**, the **link**, **thumbnail**, **fileSize**, and **duration** parameters are required.
*   When you set the **MessageType** parameter to **document**, the **link**, **fileName**, and **fileType** parameters are required.
*   When you set the **MessageType** parameter to **text_button**, the **text**, **caption**, and **action** parameters are required.
*   When you set the **MessageType** parameter to **text_image_button**, the **text**, **link**, **caption**, and **action** parameters are required.
*   When you set the **MessageType** parameter to **text_video**, the **text**, **link**, **thumbnail**, **fileSize**, and **duration** parameters are required.
*   When you set the **MessageType** parameter to **text_video_button**, the **text**, **link**, **thumbnail**, **fileSize**, **duration**, and **caption** parameters are required, and the **action** parameter is invalid.', example='{\\"text\\": \\"hello whatsapp\\", \\"link\\": \\"\\", \\"caption\\": \\"\\", \\"fileName\\": \\"\\" }'),
  contextMessageId?: string(name='ContextMessageId', description='The ID of the reply message.', example='61851ccb2f1365b16aee****'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  fallBackContent?: string(name='FallBackContent', description='The content of the fallback message.', example='This is a fallback message.'),
  fallBackId?: string(name='FallBackId', description='The ID of the fallback strategy. You can create a fallback strategy and view the information in the console.', example='S_000001'),
  from?: string(name='From', description='The phone number of the message sender.

>  You can specify a mobile phone number that is registered for a WhatsApp account and is approved in the ChatApp console.', example='1360000****'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  label?: string(name='Label', description='The message type when the ChannelType parameter is set to viber. Valid values: promotion and transaction.', example='promotion'),
  language?: string(name='Language', description='The language that is used in the message template. This parameter is required only if you set the Type parameter to **template**. For more information about language codes, see [Language codes](~~463420~~).', example='en'),
  messageType?: string(name='MessageType', description='The type of the message. This parameter is required only if you set the Type parameter to **message**. Valid values:

**When you set the ChannelType parameter to whatsapp**

*   **text**: the text message.
*   **image**: the image message.
*   **video**: the video message.
*   **audio**: the audio message.
*   **document**: the document message.
*   **interactive**: the interactive message.
*   **contacts**: the contact message.
*   **location**: the location message.
*   **sticker**: the sticker message.
*   **reaction**: the reaction message.

**When you set the ChannelType parameter to viber**

*   **text**: the text message.
*   **image**: the image message.
*   **video**: the video message.
*   **document**: the document message.
*   **text_button**: messages that contain the text and button media objects.
*   **text_image_button**: messages that contain multiple media objects, including the text, image, and button.
*   **text_video**: messages that contain the text and video media objects.
*   **text_video_button**: messages that contain multiple media objects, including text, video, and button.

>  For more information, see [Parameters of a message template](~~454530~~).', example='text'),
  payload?: [ string ](name='Payload', description='The payload of the button.', example='payloadtext1,payloadtext2,payloadtext3'),
  tag?: string(name='Tag', description='The tag information when the ChannelType parameter is set to viber.', example='tag'),
  templateCode?: string(name='TemplateCode', description='The code of the message template. This parameter is required only if you set the Type parameter to **template**.', example='744c4b5c79c9432497a075bdfca3****'),
  templateParams?: map[string]string(name='TemplateParams', description='The variables of the message template.'),
  to?: string(name='To', description='The phone number of the message receiver.', example='1390000****'),
  trackingData?: string(name='TrackingData', description='The tracking ID when the ChannelType parameter is set to viber.', example='tracking_id:123456'),
  ttl?: int32(name='Ttl', description='The timeout period for sending messages when the ChannelType parameter is set to viber. Valid values: 30 to 1209600. Unit: seconds.', example='50'),
  type?: string(name='Type', description='The type of the message. Valid values:

*   **template**: a template message. A template message is sent based on a template that is created in the ChatApp console and is approved. You can send template messages at any time based on your business requirements.
*   **message**: a custom message. You can send a custom message to a user only within 24 hours after you receive the last message from the user.', example='template'),
}

model SendChatappMessageShrinkRequest {
  channelType?: string(name='ChannelType', description='The type of the message channel. Valid values:

*   **whatsapp**
*   **viber**. This message channel is supported only when you set the Type parameter to message.
*   line. The feature ChatApp sends messages by using Line is under development.', example='whatsapp'),
  content?: string(name='Content', description='The content of the message.

**Usage notes when you set the ChannelType parameter to whatsapp**

*   When you set the **MessageType** parameter to **text**, the **text** parameter is required and the **caption** parameter cannot be specified.
*   When you set the **MessageType** parameter to **image**, the **link** parameter is required.
*   When you set the **MessageType** parameter to **video**, the **link** parameter is required.
*   When you set the **MessageType** parameter to **audio**, the **link** parameter is required and **caption** parameter is invalid.
*   When you set the **MessageType** parameter to**document**, the **link** and **fileName** parameters are required and **caption** parameter is invalid.
*   When you set the **MessageType** parameter to **interactive**, the **type** and **action** parameters are required.
*   When you set the **MessageType** parameter to **contacts**, the **name** parameter is required.
*   When you set the **MessageType** parameter to **location**, the **longitude** and **latitude** parameters are required.
*   When you set the **MessageType** parameter to **sticker**, the **link** parameter is required, and the **caption** and **fileName** parameters are invalid.
*   When you set the **MessageType** parameter to **reaction**, the **messageId** and **emoji** parameters are required.

**Usage notes when you set the ChannelType parameter to viber**

*   When you set the **MessageType** parameter to **text**, the **text** parameter is required.
*   When you set the **MessageType** parameter to **image**, the **link** parameter is required.
*   When you set the **MessageType** parameter to **video**, the **link**, **thumbnail**, **fileSize**, and **duration** parameters are required.
*   When you set the **MessageType** parameter to **document**, the **link**, **fileName**, and **fileType** parameters are required.
*   When you set the **MessageType** parameter to **text_button**, the **text**, **caption**, and **action** parameters are required.
*   When you set the **MessageType** parameter to **text_image_button**, the **text**, **link**, **caption**, and **action** parameters are required.
*   When you set the **MessageType** parameter to **text_video**, the **text**, **link**, **thumbnail**, **fileSize**, and **duration** parameters are required.
*   When you set the **MessageType** parameter to **text_video_button**, the **text**, **link**, **thumbnail**, **fileSize**, **duration**, and **caption** parameters are required, and the **action** parameter is invalid.', example='{\\"text\\": \\"hello whatsapp\\", \\"link\\": \\"\\", \\"caption\\": \\"\\", \\"fileName\\": \\"\\" }'),
  contextMessageId?: string(name='ContextMessageId', description='The ID of the reply message.', example='61851ccb2f1365b16aee****'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='28251486512358****'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true'),
  fallBackContent?: string(name='FallBackContent', description='The content of the fallback message.', example='This is a fallback message.'),
  fallBackId?: string(name='FallBackId', description='The ID of the fallback strategy. You can create a fallback strategy and view the information in the console.', example='S_000001'),
  from?: string(name='From', description='The phone number of the message sender.

>  You can specify a mobile phone number that is registered for a WhatsApp account and is approved in the ChatApp console.', example='1360000****'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk'),
  label?: string(name='Label', description='The message type when the ChannelType parameter is set to viber. Valid values: promotion and transaction.', example='promotion'),
  language?: string(name='Language', description='The language that is used in the message template. This parameter is required only if you set the Type parameter to **template**. For more information about language codes, see [Language codes](~~463420~~).', example='en'),
  messageType?: string(name='MessageType', description='The type of the message. This parameter is required only if you set the Type parameter to **message**. Valid values:

**When you set the ChannelType parameter to whatsapp**

*   **text**: the text message.
*   **image**: the image message.
*   **video**: the video message.
*   **audio**: the audio message.
*   **document**: the document message.
*   **interactive**: the interactive message.
*   **contacts**: the contact message.
*   **location**: the location message.
*   **sticker**: the sticker message.
*   **reaction**: the reaction message.

**When you set the ChannelType parameter to viber**

*   **text**: the text message.
*   **image**: the image message.
*   **video**: the video message.
*   **document**: the document message.
*   **text_button**: messages that contain the text and button media objects.
*   **text_image_button**: messages that contain multiple media objects, including the text, image, and button.
*   **text_video**: messages that contain the text and video media objects.
*   **text_video_button**: messages that contain multiple media objects, including text, video, and button.

>  For more information, see [Parameters of a message template](~~454530~~).', example='text'),
  payloadShrink?: string(name='Payload', description='The payload of the button.', example='payloadtext1,payloadtext2,payloadtext3'),
  tag?: string(name='Tag', description='The tag information when the ChannelType parameter is set to viber.', example='tag'),
  templateCode?: string(name='TemplateCode', description='The code of the message template. This parameter is required only if you set the Type parameter to **template**.', example='744c4b5c79c9432497a075bdfca3****'),
  templateParamsShrink?: string(name='TemplateParams', description='The variables of the message template.'),
  to?: string(name='To', description='The phone number of the message receiver.', example='1390000****'),
  trackingData?: string(name='TrackingData', description='The tracking ID when the ChannelType parameter is set to viber.', example='tracking_id:123456'),
  ttl?: int32(name='Ttl', description='The timeout period for sending messages when the ChannelType parameter is set to viber. Valid values: 30 to 1209600. Unit: seconds.', example='50'),
  type?: string(name='Type', description='The type of the message. Valid values:

*   **template**: a template message. A template message is sent based on a template that is created in the ChatApp console and is approved. You can send template messages at any time based on your business requirements.
*   **message**: a custom message. You can send a custom message to a user only within 24 hours after you receive the last message from the user.', example='template'),
}

model SendChatappMessageResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  messageId?: string(name='MessageId', description='The ID of the message.', example='61851ccb2f1365b16aee****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model SendChatappMessageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SendChatappMessageResponseBody(name='body'),
}

/**
  * You can call this operation up to 200 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param tmpReq SendChatappMessageRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SendChatappMessageResponse
 */
async function sendChatappMessageWithOptions(tmpReq: SendChatappMessageRequest, runtime: Util.RuntimeOptions): SendChatappMessageResponse {
  Util.validateModel(tmpReq);
  var request = new SendChatappMessageShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.payload)) {
    request.payloadShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.payload, 'Payload', 'json');
  }
  if (!Util.isUnset(tmpReq.templateParams)) {
    request.templateParamsShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.templateParams, 'TemplateParams', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.content)) {
    query['Content'] = request.content;
  }
  if (!Util.isUnset(request.payloadShrink)) {
    query['Payload'] = request.payloadShrink;
  }
  var body : map[string]any = {};
  if (!Util.isUnset(request.channelType)) {
    body['ChannelType'] = request.channelType;
  }
  if (!Util.isUnset(request.contextMessageId)) {
    body['ContextMessageId'] = request.contextMessageId;
  }
  if (!Util.isUnset(request.custSpaceId)) {
    body['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.custWabaId)) {
    body['CustWabaId'] = request.custWabaId;
  }
  if (!Util.isUnset(request.fallBackContent)) {
    body['FallBackContent'] = request.fallBackContent;
  }
  if (!Util.isUnset(request.fallBackId)) {
    body['FallBackId'] = request.fallBackId;
  }
  if (!Util.isUnset(request.from)) {
    body['From'] = request.from;
  }
  if (!Util.isUnset(request.isvCode)) {
    body['IsvCode'] = request.isvCode;
  }
  if (!Util.isUnset(request.label)) {
    body['Label'] = request.label;
  }
  if (!Util.isUnset(request.language)) {
    body['Language'] = request.language;
  }
  if (!Util.isUnset(request.messageType)) {
    body['MessageType'] = request.messageType;
  }
  if (!Util.isUnset(request.tag)) {
    body['Tag'] = request.tag;
  }
  if (!Util.isUnset(request.templateCode)) {
    body['TemplateCode'] = request.templateCode;
  }
  if (!Util.isUnset(request.templateParamsShrink)) {
    body['TemplateParams'] = request.templateParamsShrink;
  }
  if (!Util.isUnset(request.to)) {
    body['To'] = request.to;
  }
  if (!Util.isUnset(request.trackingData)) {
    body['TrackingData'] = request.trackingData;
  }
  if (!Util.isUnset(request.ttl)) {
    body['Ttl'] = request.ttl;
  }
  if (!Util.isUnset(request.type)) {
    body['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'SendChatappMessage',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 200 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request SendChatappMessageRequest
  * @return SendChatappMessageResponse
 */
async function sendChatappMessage(request: SendChatappMessageRequest): SendChatappMessageResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendChatappMessageWithOptions(request, runtime);
}

model UpdateAccountWebhookRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  httpFlag?: string(name='HttpFlag', description='Specifies whether to use HTTP callbacks to receive message receipts. Valid values: Y and N. A value of Y indicates that HTTP callbacks are used to receive message receipts. A value of N indicates that HTTP callbacks are not used to receive message receipts.', example='Y'),
  queueFlag?: string(name='QueueFlag', description='Specifies whether to use Message Service (MNS) queues to receive receipts. Valid values: Y and N. A value of Y indicates that MNS queues are used to receive receipts. A value of N indicates that MNS queues are not used to receive receipts.', example='N'),
  statusCallbackUrl?: string(name='StatusCallbackUrl', description='The callback URL to which status reports are sent by using HTTP callbacks.', example='http://www.aliyun.com'),
}

model UpdateAccountWebhookResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='744c4b5c79c9432497a075bdfca3****'),
}

model UpdateAccountWebhookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateAccountWebhookResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request UpdateAccountWebhookRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdateAccountWebhookResponse
 */
async function updateAccountWebhookWithOptions(request: UpdateAccountWebhookRequest, runtime: Util.RuntimeOptions): UpdateAccountWebhookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.httpFlag)) {
    query['HttpFlag'] = request.httpFlag;
  }
  if (!Util.isUnset(request.queueFlag)) {
    query['QueueFlag'] = request.queueFlag;
  }
  if (!Util.isUnset(request.statusCallbackUrl)) {
    query['StatusCallbackUrl'] = request.statusCallbackUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdateAccountWebhook',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request UpdateAccountWebhookRequest
  * @return UpdateAccountWebhookResponse
 */
async function updateAccountWebhook(request: UpdateAccountWebhookRequest): UpdateAccountWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateAccountWebhookWithOptions(request, runtime);
}

model UpdatePhoneWebhookRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493'),
  httpFlag?: string(name='HttpFlag', description='Specifies whether to use HTTP callbacks to receive message receipts. Valid values: Y and N. A value of Y indicates that HTTP callbacks are used to receive message receipts. A value of N indicates that HTTP callbacks are not used to receive message receipts.', example='Y'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='Phone number'),
  queueFlag?: string(name='QueueFlag', description='Specifies whether to use MNS queues to receive message receipts. Valid values: Y and N. A value of Y indicates that MNS queues are used to receive message receipts. A value of N indicates that MNS queues are not used to receive message receipts.', example='N'),
  statusCallbackUrl?: string(name='StatusCallbackUrl', description='The callback URL to which status reports are sent by using HTTP callbacks.', example='http://www.aliyun.com'),
  upCallbackUrl?: string(name='UpCallbackUrl', description='The callback URL to which mobile originated (MO) messages are sent by using HTTP callbacks.', example='http://aliyun.com'),
}

model UpdatePhoneWebhookResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='null'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model UpdatePhoneWebhookResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdatePhoneWebhookResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request UpdatePhoneWebhookRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return UpdatePhoneWebhookResponse
 */
async function updatePhoneWebhookWithOptions(request: UpdatePhoneWebhookRequest, runtime: Util.RuntimeOptions): UpdatePhoneWebhookResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.custSpaceId)) {
    query['CustSpaceId'] = request.custSpaceId;
  }
  if (!Util.isUnset(request.httpFlag)) {
    query['HttpFlag'] = request.httpFlag;
  }
  if (!Util.isUnset(request.phoneNumber)) {
    query['PhoneNumber'] = request.phoneNumber;
  }
  if (!Util.isUnset(request.queueFlag)) {
    query['QueueFlag'] = request.queueFlag;
  }
  if (!Util.isUnset(request.statusCallbackUrl)) {
    query['StatusCallbackUrl'] = request.statusCallbackUrl;
  }
  if (!Util.isUnset(request.upCallbackUrl)) {
    query['UpCallbackUrl'] = request.upCallbackUrl;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePhoneWebhook',
    version = '2020-06-06',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
  * @param request UpdatePhoneWebhookRequest
  * @return UpdatePhoneWebhookResponse
 */
async function updatePhoneWebhook(request: UpdatePhoneWebhookRequest): UpdatePhoneWebhookResponse {
  var runtime = new Util.RuntimeOptions{};
  return updatePhoneWebhookWithOptions(request, runtime);
}

