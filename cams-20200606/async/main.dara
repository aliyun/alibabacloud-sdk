/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cams';
  @version = '2020-06-06';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AddChatGroupRequest {
  businessNumber: string(name='BusinessNumber', description='This parameter is required.', example='8613800***', position='Query'),
  channelType?: string(name='ChannelType', example='WHATSAPP', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='cams-***', position='Query'),
  description?: string(name='Description', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subject: string(name='Subject', description='This parameter is required.', example='示例值示例值', position='Query'),
}

model AddChatGroupResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='None'),
  requestId?: string(name='RequestId', example='399s88-***'),
  success?: boolean(name='Success', example='false'),
  uniqueCode?: string(name='UniqueCode', example='8938****'),
}

model AddChatGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddChatGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddChatGroup  AddChatGroupRequest
  * @return AddChatGroupResponse
 */
async function addChatGroup(request: AddChatGroupRequest): AddChatGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddChatGroup', 'POST', '/', 'json', false, 'json', request);
}

model AddChatGroupInviteLinkRequest {
  businessNumber: string(name='BusinessNumber', description='This parameter is required.', example='8613800***', position='Query'),
  channelType?: string(name='ChannelType', example='WHATSAPP', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='cams-x***', position='Query'),
  groupId: string(name='GroupId', description='This parameter is required.', example='E93kdk****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model AddChatGroupInviteLinkResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  inviteLink?: string(name='InviteLink', example='https://chat.whatsapp.com/****'),
  message?: string(name='Message', example='None'),
  requestId?: string(name='RequestId', example='3EIK939***'),
  success?: boolean(name='Success', example='false'),
}

model AddChatGroupInviteLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddChatGroupInviteLinkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddChatGroupInviteLink  AddChatGroupInviteLinkRequest
  * @return AddChatGroupInviteLinkResponse
 */
async function addChatGroupInviteLink(request: AddChatGroupInviteLinkRequest): AddChatGroupInviteLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddChatGroupInviteLink', 'POST', '/', 'json', false, 'json', request);
}

model AddChatappPhoneNumberRequest {
  cc: string(name='Cc', description='You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.

This parameter is required.', example='86', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='Adds a phone number for a WhatsApp Business account (WABA).

This parameter is required.', example='93928389****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='AddChatappPhoneNumber

This parameter is required.', example='1380000****', position='Query'),
  preValidateId?: string(name='PreValidateId', description='cams:ChatappPhoneNumberRegister', example='1020****', deprecated='true', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  verifiedName: string(name='VerifiedName', description='Private

This parameter is required.', example='Alibaba', position='Query'),
}

model AddChatappPhoneNumberResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='com.alicom.access.oxs.client.channel.aliyun.flow.AyFlowExecuteService', example='http://pop_access_slb_sgvpc/#vpc'),
  code?: string(name='Code', description='The phone number.', example='OK'),
  message?: string(name='Message', description='com.alicom.access.oxs.client.channel.aliyun.flow.dto.AyCommonApiRequest', example='None'),
  requestId?: string(name='RequestId', description='formData', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='13800000000', example='false'),
}

model AddChatappPhoneNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AddChatappPhoneNumberResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AddChatappPhoneNumber  AddChatappPhoneNumberRequest
  * @return AddChatappPhoneNumberResponse
 */
async function addChatappPhoneNumber(request: AddChatappPhoneNumberRequest): AddChatappPhoneNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddChatappPhoneNumber', 'POST', '/', 'json', false, 'json', request);
}

model ChatappBindWabaRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  wabaId: string(name='WabaId', description='This parameter is required.', example='33993***', position='Query'),
}

model ChatappBindWabaResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.', example='C02029392939939'),
    wabaId?: string(name='WabaId', description='The ID of the WhatsApp Business Account (WABA).', example='2939828282'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ChatappBindWabaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappBindWabaResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ChatappBindWaba  ChatappBindWabaRequest
  * @return ChatappBindWabaResponse
 */
async function chatappBindWaba(request: ChatappBindWabaRequest): ChatappBindWabaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappBindWaba', 'POST', '/', 'json', false, 'json', request);
}

model ChatappEmbedSignUpRequest {
  inputToken: string(name='InputToken', description='This parameter is required.', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ChatappEmbedSignUpResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  wabas?: [ 
    {
      accountReviewStatus?: string(name='AccountReviewStatus', description='The review state of the WABA.', example='VERIFIED'),
      currency?: string(name='Currency', description='The currency.', example='USD'),
      id?: string(name='Id', description='The ID of the WABA.', example='2939933992*****'),
      messageTemplateNamespace?: string(name='MessageTemplateNamespace', description='The namespace of the message template.', example='alals-lsslls-slslsos-slsl'),
      name?: string(name='Name', description='The name of the WABA.', example='Alibaba'),
    }
  ](name='Wabas', description='The list of the WhatsApp Business accounts.'),
}

model ChatappEmbedSignUpResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappEmbedSignUpResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ChatappEmbedSignUp  ChatappEmbedSignUpRequest
  * @return ChatappEmbedSignUpResponse
 */
async function chatappEmbedSignUp(request: ChatappEmbedSignUpRequest): ChatappEmbedSignUpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappEmbedSignUp', 'POST', '/', 'json', false, 'json', request);
}

model ChatappMigrationRegisterRequest {
  custSpaceId: string(name='CustSpaceId', description='None

This parameter is required.', example='29348393884****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='phone number.

This parameter is required.', example='8613800****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ChatappMigrationRegisterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappMigrationRegisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappMigrationRegisterResponseBody(name='body'),
}

/**
  * @description The space ID of the RAM user within the independent software vendor (ISV) account.
  * @param request  the request parameters of ChatappMigrationRegister  ChatappMigrationRegisterRequest
  * @return ChatappMigrationRegisterResponse
 */
async function chatappMigrationRegister(request: ChatappMigrationRegisterRequest): ChatappMigrationRegisterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappMigrationRegister', 'POST', '/', 'json', false, 'json', request);
}

model ChatappMigrationVerifiedRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The phone number.

This parameter is required.', example='861380001234', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  verifyCode: string(name='VerifyCode', description='The verification code.

This parameter is required.', example='828798', position='Query'),
}

model ChatappMigrationVerifiedResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    id?: string(name='Id', description='The ID of the phone number.', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800001234'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappMigrationVerifiedResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappMigrationVerifiedResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ChatappMigrationVerified  ChatappMigrationVerifiedRequest
  * @return ChatappMigrationVerifiedResponse
 */
async function chatappMigrationVerified(request: ChatappMigrationVerifiedRequest): ChatappMigrationVerifiedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappMigrationVerified', 'POST', '/', 'json', false, 'json', request);
}

model ChatappPhoneNumberDeregisterRequest {
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='示例值示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', example='示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ChatappPhoneNumberDeregisterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model ChatappPhoneNumberDeregisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappPhoneNumberDeregisterResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ChatappPhoneNumberDeregister  ChatappPhoneNumberDeregisterRequest
  * @return ChatappPhoneNumberDeregisterResponse
 */
async function chatappPhoneNumberDeregister(request: ChatappPhoneNumberDeregisterRequest): ChatappPhoneNumberDeregisterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappPhoneNumberDeregister', 'POST', '/', 'json', false, 'json', request);
}

model ChatappPhoneNumberRegisterRequest {
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='939283893939', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', example='8613800000000', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ChatappPhoneNumberRegisterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ChatappPhoneNumberRegisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappPhoneNumberRegisterResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ChatappPhoneNumberRegister  ChatappPhoneNumberRegisterRequest
  * @return ChatappPhoneNumberRegisterResponse
 */
async function chatappPhoneNumberRegister(request: ChatappPhoneNumberRegisterRequest): ChatappPhoneNumberRegisterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappPhoneNumberRegister', 'POST', '/', 'json', false, 'json', request);
}

model ChatappSyncPhoneNumberRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user under the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ChatappSyncPhoneNumberResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None.'),
  phoneNumbers?: [ 
    {
      codeVerificationStatus?: string(name='CodeVerificationStatus', description='The verification state of the phone number.

Valid values:

*   REVOKED: The review application is revoked.
*   MORE_INFORMATION_REQUESTED: More information needs to be provided.
*   VERIFIED: The phone number passes the verification.
*   REJECTED: The phone number fails to pass the verification.', example='VERIFIED'),
      isOfficial?: string(name='IsOfficial', description='Indicates whether it is a WhatsApp Official Business Account (OBA).', example='N'),
      messagingLimitTier?: string(name='MessagingLimitTier', description='The number of phone numbers to which messages can be sent in a day.', example='TIER_10'),
      nameStatus?: string(name='NameStatus', description='The review status of the business display name.', example='Approval'),
      newNameStatus?: string(name='NewNameStatus', description='The review status of the new business display name.', example='Approval'),
      phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800001234'),
      qualityRating?: string(name='QualityRating', description='The quality rating of the phone number.

Valid values:

*   RED
*   YELLOW
*   GREEN', example='GREEN'),
      status?: string(name='Status', description='The state of the phone number.

Valid values:

*   MIGRATED
*   FLAGGED
*   DISCONNECTED
*   UNVERIFIED
*   BANNED
*   RATE_LIMITED
*   PENDING
*   CONNECTED
*   UNKNOWN
*   DELETED
*   RESTRICTED', example='PENDING'),
      statusCallbackUrl?: string(name='StatusCallbackUrl', description='The callback URL to which status reports are sent by using HTTP callbacks.', example='https://www.alibaba.com/status'),
      statusQueue?: string(name='StatusQueue', description='The status report queue.', example='alicom-09399200-queue'),
      upCallbackUrl?: string(name='UpCallbackUrl', description='The URL that receives the MO messages.', example='https://www.alibaba.com/inbound'),
      upQueue?: string(name='UpQueue', description='The mobile originated (MO) message queue.', example='alicom-09399200-queue'),
      verifiedName?: string(name='VerifiedName', description='The display name of the business to which the phone number belongs.', example='Alibaba'),
    }
  ](name='PhoneNumbers', description='The phone numbers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ChatappSyncPhoneNumberResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappSyncPhoneNumberResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ChatappSyncPhoneNumber  ChatappSyncPhoneNumberRequest
  * @return ChatappSyncPhoneNumberResponse
 */
async function chatappSyncPhoneNumber(request: ChatappSyncPhoneNumberRequest): ChatappSyncPhoneNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappSyncPhoneNumber', 'POST', '/', 'json', false, 'json', request);
}

model ChatappVerifyAndRegisterRequest {
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='29389299388383', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', example='86138000000', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  verifyCode: string(name='VerifyCode', description='This parameter is required.', example='123466', position='Query'),
}

model ChatappVerifyAndRegisterResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model ChatappVerifyAndRegisterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChatappVerifyAndRegisterResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ChatappVerifyAndRegister  ChatappVerifyAndRegisterRequest
  * @return ChatappVerifyAndRegisterResponse
 */
async function chatappVerifyAndRegister(request: ChatappVerifyAndRegisterRequest): ChatappVerifyAndRegisterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappVerifyAndRegister', 'POST', '/', 'json', false, 'json', request);
}

model CreateChatFlowRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS', position='Query'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}', shrink='json', position='Query'),
  flowTriggerType?: string(name='FlowTriggerType', description='Flow trigger type', example='TriggeredByWhatsApp', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  remark?: string(name='Remark', description='Flow remarks', example='ChatFlow for WhatsApp Customer Service Auto-Reply.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  title?: string(name='Title', description='Flow title', example='Auto Reply', position='Query'),
}

model CreateChatFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details, this field is returned only when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Error code', example='示例值'),
  data?: map[string]any(name='Data', description='Returned data object.'),
  message?: string(name='Message', description='Error message.', example='示例值示例值'),
  requestId?: string(name='RequestId', description='Unique request ID.', example='示例值'),
  response?: map[string]any(name='Response', description='Response data'),
  success?: boolean(name='Success', description='Whether the call was successful.', example='true'),
}

model CreateChatFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChatFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateChatFlow  CreateChatFlowRequest
  * @return CreateChatFlowResponse
 */
async function createChatFlow(request: CreateChatFlowRequest): CreateChatFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateChatFlow', 'POST', '/', 'json', false, 'json', request);
}

model CreateChatFlowByImportRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='示例值示例值', position='Query'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}', shrink='json', position='Query'),
  flowViewModel?: string(name='FlowViewModel', description='Imported flow DSL data', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  remark?: string(name='Remark', description='Flow remarks', example='示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  title?: string(name='Title', description='Flow title', example='示例值示例值示例值', position='Query'),
}

model CreateChatFlowByImportResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details.', example='无'),
  code?: string(name='Code', description='Request status code.', example='示例值示例值'),
  data?: map[string]any(name='Data', description='Returned data object.', example='无'),
  message?: string(name='Message', description='Error message.', example='示例值示例值'),
  requestId?: string(name='RequestId', description='Request ID', example='示例值示例值'),
  success?: boolean(name='Success', description='Whether the request was successful', example='false'),
}

model CreateChatFlowByImportResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChatFlowByImportResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateChatFlowByImport  CreateChatFlowByImportRequest
  * @return CreateChatFlowByImportResponse
 */
async function createChatFlowByImport(request: CreateChatFlowByImportRequest): CreateChatFlowByImportResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateChatFlowByImport', 'POST', '/', 'json', false, 'json', request);
}

model CreateChatFlowLogSettingRequest {
  flowCode?: string(name='FlowCode', description='Process code.', example='示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateChatFlowLogSettingResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details.', example='无'),
  code?: string(name='Code', description='Status code.', example='示例值示例值示例值'),
  data?: map[string]any(name='Data', description='Returned data.', example='无'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true for success, false for failure.', example='true'),
}

model CreateChatFlowLogSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChatFlowLogSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateChatFlowLogSetting  CreateChatFlowLogSettingRequest
  * @return CreateChatFlowLogSettingResponse
 */
async function createChatFlowLogSetting(request: CreateChatFlowLogSettingRequest): CreateChatFlowLogSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateChatFlowLogSetting', 'POST', '/', 'json', false, 'json', request);
}

model CreateChatappMigrationInitiateRequest {
  countryCode: string(name='CountryCode', description='The code of the country or region.

This parameter is required.', example='86', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user within the ISV account.

This parameter is required.', example='293483938849493****', position='Query'),
  mobileNumber: string(name='MobileNumber', description='The mobile number without the country code or region code.

This parameter is required.', example='13900001234', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateChatappMigrationInitiateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The information about the request denial..', example='None'),
  code?: string(name='Code', description='The response code.

*   A value of OK indicates that the request was successful.
*   For more information about other response codes, see [API error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    id?: string(name='Id', description='The ID of the mobile number.', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', description='The mobile number.', example='8613900001234'),
    status?: string(name='Status', description='The state of the mobile number. Only MIGRATING may be returned, which indicates that the mobile number is being migrated.', example='MIGRATING'),
  }(name='Data', description='The response data.'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model CreateChatappMigrationInitiateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChatappMigrationInitiateResponseBody(name='body'),
}

/**
  * @description The status of the phone number.
  * @param request  the request parameters of CreateChatappMigrationInitiate  CreateChatappMigrationInitiateRequest
  * @return CreateChatappMigrationInitiateResponse
 */
async function createChatappMigrationInitiate(request: CreateChatappMigrationInitiateRequest): CreateChatappMigrationInitiateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateChatappMigrationInitiate', 'POST', '/', 'json', false, 'json', request);
}

model CreateChatappTemplateRequest {
  allowCategoryChange?: boolean(name='AllowCategoryChange', description='Specifies whether to allow Facebook to automatically change the directory of the template. If you set this parameter to true, the review success rate of the template is improved. This parameter is valid only when TemplateType is set to WHATSAPP.', example='true', deprecated='true', position='Body'),
  category: string(name='Category', description='The category of the template if TemplateType is set to WHATSAPP. Valid values:

*   **UTILITY**: the transaction template
*   **MARKETING**: the marketing template
*   **AUTHENTICATION**: the authentication template

The category of the template if TemplateType is set to VIBER. Valid values:

*   **text**: the template that contains only text
*   **image**: the template that contains only images
*   **text_image_button**: the template that contains text, images, and buttons
*   **text_button**: the template that contains text and buttons
*   **document**: the template that contains only documents
*   **video**: the template that contains only videos
*   **text_video**: the template that contains text and videos
*   **text_video_button**: the template that contains text, videos, and buttons
*   **text_image**: the template that contains text and images

This parameter is required.', example='The code of the message template.', position='Body'),
  categoryChangePaused?: boolean(name='CategoryChangePaused', position='Body'),
  components: [ 
    {
      addSecretRecommendation?: boolean(name='AddSecretRecommendation', description='The note indicating that customers cannot share verification codes with others. The note is displayed in the message body. This parameter is valid if Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to BODY for a WhatsApp message template.', example='true'),
      buttons?: [ 
        {
          autofillText?: string(name='AutofillText', description='The text of the one-tap autofill button. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP for a WhatsApp message template.', example='Autofill'),
          couponCode?: string(name='CouponCode', description='The coupon code. It can contain only letters and digits. You can set this parameter to a variable such as $(couponCode). Specify the value of couponCode when you send a message.', example='120293'),
          flowAction?: string(name='FlowAction', description='The Flow action.

Valid values:

*   DATA_EXCHANGE
*   NAVIGATE', example='NAVIGATE'),
          flowId?: string(name='FlowId', description='The Flow ID.', example='479884093605183'),
          isOptOut?: boolean(name='IsOptOut', description='The unsubscribe button. This parameter is valid if Category is set to MARKETING and the Type sub-parameter of the Buttons parameter is set to QUICK_REPLY for a WhatsApp message template. Marketing messages will not be sent to customers if you configure message sending in the Chat App Message Service console and the customers click this button.', example='false'),
          navigateScreen?: string(name='NavigateScreen', description='The first screen in the Flow. This parameter is required if FlowAction is set to NAVIGATE.', example='DETAILS'),
          packageName?: string(name='PackageName', description='The app package name that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP for a WhatsApp message template.', example='com.demo', deprecated='true'),
          phoneNumber?: string(name='PhoneNumber', description='The phone number. This parameter is valid only when the Type sub-parameter of the Buttons parameter is set to **PHONE_NUMBER**.', example='+861368897****'),
          signatureHash?: string(name='SignatureHash', description='The app signing key hash that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP for a WhatsApp message template.', example='wi299382', deprecated='true'),
          supportedApps?: [ 
            {
              packageName?: string(name='PackageName', description='The name of the Android application package. This parameter is required if you create an Android application.', example='com.kuaidian.waimaistaff'),
              signatureHash?: string(name='SignatureHash', description='WhatsApp template is required when Category is Authoritative and Button Type is ONE_TAP/ZERO-TAP, indicating the signature hash value of the WhatsApp application.', example='ieid83kdiek'),
            }
          ](name='SupportedApps', description='List of supported apps.'),
          text?: string(name='Text', description='The display name of the button.', example='Call Me'),
          type: string(name='Type', description='The type of the button. Valid values:

*   **PHONE_NUMBER**: phone call button
*   **URL**: URL button
*   **QUICK_REPLY**: quick reply button
*   **COPY_CODE**: copy code button
*   **ONE_TAP**: one-tap autofill button if Category is set to AUTHENTICATION

> 

*   If Category is set to AUTHENTICATION for a WhatsApp message template, you can add only one button to the WhatsApp message template and you must set the Type sub-parameter of the Buttons parameter to COPY_CODE or ONE_TAP. If Type is set to COPY_CODE, the Text sub-parameter of the Buttons parameter is required. If Type is set to ONE_TAP, the Text, SignatureHash, PackageName, and AutofillText sub-parameters of the Buttons parameter are required. The value of Text is displayed if the desired app is not installed on the device. The value of Text indicates that you must manually copy the verification code.

*   You can add only one button to a Viber message template, and you must set the Type sub-parameter of the Buttons parameter to URL.

This parameter is required.', example='PHONE_NUMBER'),
          url?: string(name='Url', description='The URL to be accessed when you click the URL button.', example='https://example.com'),
          urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**
*   **dynamic**', example='static'),
        }
      ](name='Buttons', description='The buttons. Specify this parameter only if you set the Type sub-parameter of the Components parameter to **BUTTONS**.

>  ####

*   A marketing or utility WhatsApp message template can contain up to 10 buttons.

*   A WhatsApp message template can contain only one phone call button.

*   A WhatsApp message template can contain up to two URL buttons.

*   In a WhatsApp message template, a quick reply button cannot be used together with a phone call button or a URL button.'),
      caption?: string(name='Caption', description='The description of the document.', example='This is a video'),
      cards?: [ 
        {
          cardComponents: [ 
            {
              buttons?: [ 
                {
                  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='+8613800'),
                  text?: string(name='Text', description='The text of the button.', example='Call me'),
                  type: string(name='Type', description='The type of the button. Valid values:

*   **PHONE_NUMBER**: phone call button
*   **URL**: URL button
*   **QUICK_REPLY**: quick reply button

This parameter is required.', example='PHONE_NUMBER'),
                  url?: string(name='Url', description='The URL to which you are redirected when you click the URL button.', example='https://alibaba.com/xx'),
                  urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**
*   **dynamic**', example='static'),
                }
              ](name='Buttons', description='The buttons. Specify this parameter only if you set the Type sub-parameter of the CardComponents parameter to BUTTONS. A carousel card can contain up to two buttons.'),
              format?: string(name='Format', description='The type of the media resource. This parameter is valid if the Type sub-parameter of the CardComponents parameter is set to HEADER. Valid values:

*   **IMAGE**
*   **VIDEO**', example='IMAGE'),
              text?: string(name='Text', description='The body content of the carousel card.', example='Who is the very powerful team'),
              type: string(name='Type', description='The type of the component. Valid values:

*   **BODY**
*   **HEADER**
*   **BUTTONS**

This parameter is required.', example='BODY'),
              url?: string(name='Url', description='The URL of the media resource.', example='https://alibaba.com/img.png'),
            }
          ](name='CardComponents', description='The components of the carousel card.

This parameter is required.'),
        }
      ](name='Cards', description='The carousel cards of the carousel template.'),
      codeExpirationMinutes?: int32(name='CodeExpirationMinutes', description='The validity period of the verification code in the WhatsApp authentication template. Unit: minutes. This parameter is valid only when Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to FOOTER. The validity period of the verification code is displayed in the footer.', example='5', minimum=1, maximum=90),
      duration?: int32(name='Duration', description='The length of the video in the Viber message template. Unit: seconds. Valid values: 0 to 600.', example='120'),
      fileName?: string(name='FileName', description='The name of the document.', example='video name'),
      fileType?: string(name='FileType', description='The type of the document attached in the Viber message template.', example='docx'),
      format?: string(name='Format', description='The type of the media resource. Valid values:

*   **TEXT**
*   **IMAGE**
*   **DOCUMENT**
*   **VIDEO**', example='TEXT'),
      hasExpiration?: boolean(name='HasExpiration', description='Specifies whether the coupon code has an expiration time. Specify this parameter if the Type sub-parameter of the Components parameter is set to LIMITED_TIME_OFFER.', example='true'),
      text?: string(name='Text', description='The text of the message that you want to send.

>  If Category is set to AUTHENTICATION, the Text sub-parameter of the Components parameter must be empty.', example='hello whatsapp'),
      thumbUrl?: string(name='ThumbUrl', description='The thumbnail URL of the video in the Viber message template.', example='https://cdn.multiplymall.mobiapp.cloud/yunmall/B-LM-LMALL202207130001/20220730/d712a057-a6af-4513-bbe6-7ee57ea60983.png?x-oss-process=image/resize,w_100'),
      type: string(name='Type', description='The type of the component. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**
*   **CAROUSEL**
*   **LIMITED_TIME_OFFER**

> 

*   In a WhatsApp message template, a **Body** component cannot exceed 1,024 characters in length. A **HEADER** or **FOOTER** component cannot exceed 60 characters in length.

*   **FOOTER**, **CAROUSEL**, and **LIMITED_TIME_OFFER** components are not supported in Viber message templates.

*   In Viber message templates, media resources such as images, videos, and documents are placed in the **HEADER** component. If a Viber message contains text and an image, the image is placed below the text in the message received on a device.

This parameter is required.', example='BODY'),
      url?: string(name='Url', description='The URL of the media resource.

>  We recommend that you use 800 × 800 images in Viber message templates.', example='https://image.developer.aliyundoc.com'),
    }
  ](name='Components', description='The components of the message template.

>  If Category is set to AUTHENTICATION, the Type sub-parameter of the Components parameter cannot be set to HEADER. If the Type sub-parameter is set to BODY or FOOTER, the Text sub-parameter of the Components parameter must be empty.

This parameter is required.', shrink='json', position='Body'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='293483938849493', position='Body'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business account (WABA) ID of the user within the independent software vendor (ISV) account.

> CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', deprecated='true', position='Body'),
  example?: map[string]string(name='Example', description='The examples of variables that are used when you create the message template.', shrink='json', position='Body'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk', position='Body'),
  language: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).

This parameter is required.', example='en', position='Body'),
  messageSendTtlSeconds?: int32(name='MessageSendTtlSeconds', description='Validity period of authentication template message sending in WhatsApp

> This attribute requires providing waba in advance to Alibaba operators to open the whitelist, otherwise it will result in template submission failure', example='120', minimum=30, maximum=2592000, position='Body'),
  name: string(name='Name', description='The name of the message template.

This parameter is required.', example='hello_whatsapp', position='Body'),
  templateType: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**
*   LINE: the Line message template. This type of message template will be released later.

This parameter is required.', example='WHATSAPP', position='Body'),
}

model CreateChatappTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='SMS_232907****'),
    templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
  }(name='Data', description='The data returned.', example='{"templateCode": "****4b5c79c9432497a075bdfca36bf5"，"templateName": "hello_whatsapp"}'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2D'),
}

model CreateChatappTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateChatappTemplateResponseBody(name='body'),
}

/**
  * @description ### [](#qps-)QPS limit
  * You can call this operation up to 50 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of CreateChatappTemplate  CreateChatappTemplateRequest
  * @return CreateChatappTemplateResponse
 */
async function createChatappTemplate(request: CreateChatappTemplateRequest): CreateChatappTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateChatappTemplate', 'POST', '/', 'json', true, 'form', request);
}

model CreateFlowRequest {
  categories: [ string ](name='Categories', description='This parameter is required.', shrink='json', position='Query'),
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值示例值', position='Query'),
  flowName: string(name='FlowName', description='This parameter is required.', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: {
    categories?: [ string ](name='Categories', description='The categories of the Flow.'),
    flowId?: string(name='FlowId', description='The Flow ID.', example='333993838***'),
    flowName?: string(name='FlowName', description='The name of the Flow.', example='test1'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model CreateFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFlowResponseBody(name='body'),
}

/**
  * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of CreateFlow  CreateFlowRequest
  * @return CreateFlowResponse
 */
async function createFlow(request: CreateFlowRequest): CreateFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlow', 'POST', '/', 'json', false, 'json', request);
}

model CreateFlowVersionRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS', position='Query'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}', shrink='json', position='Query'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****', position='Query'),
  flowVersionCopyFrom?: string(name='FlowVersionCopyFrom', description='The flow version to be copied.', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  remark?: string(name='Remark', description='Version remarks.', example='Fix Send WhatsApp Message Error', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denial; this field is only returned when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Request status code.', example='OK'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true for success, false for failure.', example='false'),
}

model CreateFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateFlowVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateFlowVersion  CreateFlowVersionRequest
  * @return CreateFlowVersionResponse
 */
async function createFlowVersion(request: CreateFlowVersionRequest): CreateFlowVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateFlowVersion', 'POST', '/', 'json', false, 'json', request);
}

model CreatePhoneMessageQrdlRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值示例值', position='Query'),
  generateQrImage: string(name='GenerateQrImage', description='This parameter is required.', example='示例值示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', example='示例值示例值示例值', position='Query'),
  prefilledMessage: string(name='PrefilledMessage', description='This parameter is required.', example='示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreatePhoneMessageQrdlResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: {
    deepLinkUrl?: string(name='DeepLinkUrl', description='The URL of the deep link.', example='https://wa.qrdl/'),
    generateQrImage?: string(name='GenerateQrImage', description='The format of the generated image.', example='PNG'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800'),
    prefilledMessage?: string(name='PrefilledMessage', description='The message content.', example='Hello'),
    qrImageUrl?: string(name='QrImageUrl', description='The URL of the QR code.', example='http://img.png'),
    qrdlCode?: string(name='QrdlCode', description='The mode of the quick-response (QR) code.', example='D9II3***'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='none'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model CreatePhoneMessageQrdlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePhoneMessageQrdlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePhoneMessageQrdl  CreatePhoneMessageQrdlRequest
  * @return CreatePhoneMessageQrdlResponse
 */
async function createPhoneMessageQrdl(request: CreatePhoneMessageQrdlRequest): CreatePhoneMessageQrdlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePhoneMessageQrdl', 'POST', '/', 'json', false, 'json', request);
}

model DeleteChatFlowRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS', position='Query'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}', shrink='json', position='Query'),
  flowCode?: string(name='FlowCode', description='Process code.', example='示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteChatFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details, this field is returned only when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Error code', example='示例值示例值示例值'),
  message?: string(name='Message', description='Error message.', example='示例值'),
  requestId?: string(name='RequestId', description='Unique request ID.', example='示例值'),
  response?: map[string]any(name='Response', description='Response data', example='无'),
  success?: boolean(name='Success', description='Whether the call was successful.', example='false'),
}

model DeleteChatFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteChatFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteChatFlow  DeleteChatFlowRequest
  * @return DeleteChatFlowResponse
 */
async function deleteChatFlow(request: DeleteChatFlowRequest): DeleteChatFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChatFlow', 'POST', '/', 'json', false, 'json', request);
}

model DeleteChatGroupRequest {
  businessNumber: string(name='BusinessNumber', description='This parameter is required.', example='8613800***', position='Query'),
  channelType?: string(name='ChannelType', example='WHATSAPP', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='cams-**', position='Query'),
  groupId: string(name='GroupId', description='This parameter is required.', example='E399**', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteChatGroupResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='示例值示例值示例值'),
  requestId?: string(name='RequestId', example='E939E****'),
  result?: long(name='Result', example='1'),
  success?: boolean(name='Success', example='true'),
}

model DeleteChatGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteChatGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteChatGroup  DeleteChatGroupRequest
  * @return DeleteChatGroupResponse
 */
async function deleteChatGroup(request: DeleteChatGroupRequest): DeleteChatGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChatGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteChatGroupInviteLinkRequest {
  businessNumber: string(name='BusinessNumber', description='This parameter is required.', example='8613800***', position='Query'),
  channelType?: string(name='ChannelType', example='WHATSAPP', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='cams-8***', position='Query'),
  groupId: string(name='GroupId', description='This parameter is required.', example='E398****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteChatGroupInviteLinkResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='示例值示例值'),
  requestId?: string(name='RequestId', example='3R938***'),
  result?: long(name='Result', example='0'),
  success?: boolean(name='Success', example='true'),
}

model DeleteChatGroupInviteLinkResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteChatGroupInviteLinkResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteChatGroupInviteLink  DeleteChatGroupInviteLinkRequest
  * @return DeleteChatGroupInviteLinkResponse
 */
async function deleteChatGroupInviteLink(request: DeleteChatGroupInviteLinkRequest): DeleteChatGroupInviteLinkResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChatGroupInviteLink', 'POST', '/', 'json', false, 'json', request);
}

model DeleteChatGroupParticipantsRequest {
  businessNumber: string(name='BusinessNumber', description='This parameter is required.', example='8613800**', position='Query'),
  channelType?: string(name='ChannelType', example='WHATSAPP。', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='cams-**', position='Query'),
  groupId: string(name='GroupId', description='This parameter is required.', example='EA93UU****', position='Query'),
  list?: [ 
    {
      participantNumber?: string(name='ParticipantNumber', example='86138***'),
    }
  ](name='List', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteChatGroupParticipantsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='示例值'),
  requestId?: string(name='RequestId', example='R39***'),
  result?: long(name='Result', example='20'),
  success?: boolean(name='Success', example='false'),
}

model DeleteChatGroupParticipantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteChatGroupParticipantsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteChatGroupParticipants  DeleteChatGroupParticipantsRequest
  * @return DeleteChatGroupParticipantsResponse
 */
async function deleteChatGroupParticipants(request: DeleteChatGroupParticipantsRequest): DeleteChatGroupParticipantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChatGroupParticipants', 'POST', '/', 'json', false, 'json', request);
}

model DeleteChatappTemplateRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the ISV account.', example='28251486512358****', position='Query'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business Account (WABA) ID of the RAM user within the independent software vendor (ISV) account.

>  CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', position='Query'),
  isvCode?: string(name='IsvCode', description='The ISV verification code. This parameter is used to verify whether the RAM user is authorized by the ISV account.', example='skdi3kksloslikdkkdk', position='Query'),
  language?: string(name='Language', description='The template language.', example='zh_CN', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode?: string(name='TemplateCode', description='The template code.', example='744c4b5c79c9432497a075bdfca3****', position='Query'),
  templateName?: string(name='TemplateName', description='The template name.', example='test_name', position='Query'),
  templateType?: string(name='TemplateType', description='The template type. This parameter is required if you delete a template in a language.', example='WHATSAPP', position='Query'),
}

model DeleteChatappTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model DeleteChatappTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteChatappTemplateResponseBody(name='body'),
}

/**
  * @description ### QPS limit
  * You can call this operation up to five times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of DeleteChatappTemplate  DeleteChatappTemplateRequest
  * @return DeleteChatappTemplateResponse
 */
async function deleteChatappTemplate(request: DeleteChatappTemplateRequest): DeleteChatappTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChatappTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFlowRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值', position='Query'),
  flowId: string(name='FlowId', description='This parameter is required.', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model DeleteFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFlowResponseBody(name='body'),
}

/**
  * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of DeleteFlow  DeleteFlowRequest
  * @return DeleteFlowResponse
 */
async function deleteFlow(request: DeleteFlowRequest): DeleteFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlow', 'POST', '/', 'json', false, 'json', request);
}

model DeleteFlowVersionRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS', position='Query'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}', shrink='json', position='Query'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****', position='Query'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Detailed reason for access denial.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true: success; false: failure.', example='false'),
}

model DeleteFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteFlowVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteFlowVersion  DeleteFlowVersionRequest
  * @return DeleteFlowVersionResponse
 */
async function deleteFlowVersion(request: DeleteFlowVersionRequest): DeleteFlowVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteFlowVersion', 'POST', '/', 'json', false, 'json', request);
}

model DeletePhoneMessageQrdlRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', example='示例值示例值', position='Query'),
  qrdlCode: string(name='QrdlCode', description='This parameter is required.', example='示例值示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeletePhoneMessageQrdlResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model DeletePhoneMessageQrdlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePhoneMessageQrdlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePhoneMessageQrdl  DeletePhoneMessageQrdlRequest
  * @return DeletePhoneMessageQrdlResponse
 */
async function deletePhoneMessageQrdl(request: DeletePhoneMessageQrdlRequest): DeletePhoneMessageQrdlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePhoneMessageQrdl', 'POST', '/', 'json', false, 'json', request);
}

model DeprecateFlowRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值', position='Query'),
  flowId: string(name='FlowId', description='This parameter is required.', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeprecateFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The result returns OK as normal.', example='OK'),
  message?: string(name='Message', description='Error description information.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model DeprecateFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeprecateFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeprecateFlow  DeprecateFlowRequest
  * @return DeprecateFlowResponse
 */
async function deprecateFlow(request: DeprecateFlowRequest): DeprecateFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeprecateFlow', 'POST', '/', 'json', false, 'json', request);
}

model EnableWhatsappROIMetricRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='293483938849493', position='Query'),
  isvCode?: string(name='IsvCode', description='The verification code used to verify whether the RAM user is authorized by the independent software vendor (ISV) account.', example='skdi3kksloslikdkkdk', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model EnableWhatsappROIMetricResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='NONE'),
  code?: string(name='Code', description='The value OK indicates that the request was successful.', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model EnableWhatsappROIMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnableWhatsappROIMetricResponseBody(name='body'),
}

/**
  * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of EnableWhatsappROIMetric  EnableWhatsappROIMetricRequest
  * @return EnableWhatsappROIMetricResponse
 */
async function enableWhatsappROIMetric(request: EnableWhatsappROIMetricRequest): EnableWhatsappROIMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableWhatsappROIMetric', 'POST', '/', 'json', false, 'json', request);
}

model FlowBindPhoneRequest {
  channelCode: string(name='ChannelCode', description='Message channel Code

This parameter is required.', example='示例值示例值示例值', position='Query'),
  channelType: string(name='ChannelType', description='Message channel Type

This parameter is required.', example='示例值示例值', position='Query'),
  flowCode: string(name='FlowCode', description='Flow code.

This parameter is required.', example='示例值示例值', position='Query'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumbers?: [ string ](name='PhoneNumbers', description='Phone numbers or PageIds under the channel instance, etc.', shrink='json', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  wabaId: string(name='WabaId', description='WABA account ID, or PageId for other channel types, etc.

This parameter is required.', example='示例值', position='Query'),
}

model FlowBindPhoneResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denial; this field is returned only when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Status code.', example='示例值示例值'),
  message?: string(name='Message', description='Error description message.', example='示例值示例值'),
  model?: boolean(name='Model', description='Return result.', example='false'),
  requestId?: string(name='RequestId', description='Request ID.', example='示例值示例值示例值'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model FlowBindPhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlowBindPhoneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FlowBindPhone  FlowBindPhoneRequest
  * @return FlowBindPhoneResponse
 */
async function flowBindPhone(request: FlowBindPhoneRequest): FlowBindPhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FlowBindPhone', 'POST', '/', 'json', false, 'json', request);
}

model FlowRebindPhoneRequest {
  channelCode: string(name='ChannelCode', description='Message channel code

This parameter is required.', example='示例值示例值', position='Query'),
  channelType: string(name='ChannelType', description='Message channel type

This parameter is required.', example='示例值示例值', position='Query'),
  flowCode: string(name='FlowCode', description='Flow code.

This parameter is required.', example='示例值示例值', position='Query'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumbers?: [ string ](name='PhoneNumbers', description='Phone numbers or PageIds under the channel instance, etc.', shrink='json', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  wabaId: string(name='WabaId', description='WABA account ID, or PageId for other channel types, etc.

This parameter is required.', example='示例值示例值', position='Query'),
}

model FlowRebindPhoneResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details.', example='无'),
  code?: string(name='Code', description='Status code.', example='示例值示例值'),
  message?: string(name='Message', description='Error message.', example='示例值示例值示例值'),
  model?: boolean(name='Model', description='Request result data.', example='false'),
  requestId?: string(name='RequestId', description='Request ID.', example='示例值示例值'),
  success?: boolean(name='Success', description='Whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model FlowRebindPhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlowRebindPhoneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FlowRebindPhone  FlowRebindPhoneRequest
  * @return FlowRebindPhoneResponse
 */
async function flowRebindPhone(request: FlowRebindPhoneRequest): FlowRebindPhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FlowRebindPhone', 'POST', '/', 'json', false, 'json', request);
}

model FlowUnbindPhoneRequest {
  channelType?: string(name='ChannelType', description='Message channel type', example='示例值示例值', position='Query'),
  flowCode: string(name='FlowCode', description='Flow code.

This parameter is required.', example='示例值', position='Query'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='示例值示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumbers?: [ string ](name='PhoneNumbers', description='Phone numbers or PageIds under the channel instance, etc.', shrink='json', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model FlowUnbindPhoneResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details, this field is returned only when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Request status code.', example='示例值示例值'),
  message?: string(name='Message', description='Error message.', example='示例值示例值示例值'),
  model?: boolean(name='Model', description='Request result data.', example='false'),
  success?: boolean(name='Success', description='Whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model FlowUnbindPhoneResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: FlowUnbindPhoneResponseBody(name='body'),
}

/**
  * @param request  the request parameters of FlowUnbindPhone  FlowUnbindPhoneRequest
  * @return FlowUnbindPhoneResponse
 */
async function flowUnbindPhone(request: FlowUnbindPhoneRequest): FlowUnbindPhoneResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'FlowUnbindPhone', 'POST', '/', 'json', false, 'json', request);
}

model GetChatFlowMetricRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS', position='Query'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}', shrink='json', position='Query'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****', position='Query'),
  flowVersion?: string(name='FlowVersion', description='Flow version.', example='1', position='Query'),
  from?: long(name='From', description='Start timestamp in seconds.', example='1751299200', position='Query'),
  metricName: string(name='MetricName', description='Metric name.

This parameter is required.', example='nodeUsageStatistics', position='Query'),
  metricParam?: map[string]any(name='MetricParam', shrink='json', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  to?: long(name='To', description='End timestamp in seconds.', example='1751385599', position='Query'),
}

model GetChatFlowMetricResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denial.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  data?: map[string]any(name='Data', description='Returned data object.', example='无'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Unique request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true: success; false: failure.', example='false'),
}

model GetChatFlowMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatFlowMetricResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetChatFlowMetric  GetChatFlowMetricRequest
  * @return GetChatFlowMetricResponse
 */
async function getChatFlowMetric(request: GetChatFlowMetricRequest): GetChatFlowMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChatFlowMetric', 'POST', '/', 'json', false, 'json', request);
}

model GetChatFlowTemplateRequest {
  bizCode: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.

This parameter is required.', example='ALICOM_OPAAS', position='Query'),
  id?: long(name='Id', description='Template ID', example='2', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetChatFlowTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details, this field is returned only when RAM verification fails.', example='无'),
  code?: string(name='Code', description='System returned error code. For more details on error codes, please refer to the error code documentation.', example='OK'),
  data?: {
    response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  }(name='Data', description='Returned data.'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Unique request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model GetChatFlowTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatFlowTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetChatFlowTemplate  GetChatFlowTemplateRequest
  * @return GetChatFlowTemplateResponse
 */
async function getChatFlowTemplate(request: GetChatFlowTemplateRequest): GetChatFlowTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChatFlowTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetChatappPhoneNumberMetricRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the ISV account.', example='293483938849493', position='Query'),
  end: long(name='End', description='The end of the time range to query.

This parameter is required.', example='1693407714687', position='Query'),
  granularity?: string(name='Granularity', description='The granularity of the metric.

Valid values:

*   DAILY
*   HALF_HOUR', example='DAILY', position='Query'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the RAM user is authorized by the ISV account.', example='skdi3kksloslikdkkdk', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber?: string(name='PhoneNumber', description='The business phone number.', example='861380000', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  start: long(name='Start', description='The beginning of the time range to query.

This parameter is required.', example='1693107714687', position='Query'),
}

model GetChatappPhoneNumberMetricResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='NONE'),
  code?: string(name='Code', description='The value OK indicates that the request was successful.', example='OK'),
  data?: [ 
    {
      deliveredCount?: int32(name='DeliveredCount', description='The number of delivered messages.', example='5'),
      end?: long(name='End', description='The end of the time range that you queried.', example='1667196043904'),
      granularity?: string(name='Granularity', description='The granularity of the metric.

Valid values:

*   DAILY
*   HALF_HOUR', example='DAILY'),
      phoneNumber?: string(name='PhoneNumber', description='The business phone number.', example='861380000'),
      sentCount?: int32(name='SentCount', description='The number of sent messages.', example='10'),
      start?: long(name='Start', description='The beginning of the time range that you queried.', example='1669619491000'),
    }
  ](name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='1612C226-E271-4CFE-9F18-4066D******'),
}

model GetChatappPhoneNumberMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatappPhoneNumberMetricResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 50 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetChatappPhoneNumberMetric  GetChatappPhoneNumberMetricRequest
  * @return GetChatappPhoneNumberMetricResponse
 */
async function getChatappPhoneNumberMetric(request: GetChatappPhoneNumberMetricRequest): GetChatappPhoneNumberMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChatappPhoneNumberMetric', 'POST', '/', 'json', false, 'json', request);
}

model GetChatappTemplateDetailRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='28251486512358****', position='Query'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business account (WABA) ID of the user within the independent software vendor (ISV) account.

>  CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', deprecated='true', position='Query'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code. This parameter is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk', position='Query'),
  language: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).

This parameter is required.', example='en_US', position='Query'),
  templateCode?: string(name='TemplateCode', description='The code of the message template.', example='****4b5c79c9432497a075bdfca36bf5', position='Query'),
  templateName?: string(name='TemplateName', description='Name of a template.', example='test_name', position='Query'),
  templateType?: string(name='TemplateType', description='The type of the message template. Valid values:

*   **WHATSAPP**
*   **VIBER**
*   LINE (developing)', example='WHATSAPP', position='Query'),
}

model GetChatappTemplateDetailResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details.', example='None'),
  code?: string(name='Code', description='The HTTP status code.

*   Example: OK. This value indicates that the request is successful.
*   Other codes indicate that the request fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    allowSend?: boolean(name='AllowSend'),
    auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
    category?: string(name='Category', description='The category of the template when the returned value of TemplateType is WHATSAPP. Valid values:

*   **UTILITY**: a transactional template
*   **MARKETING**: a marketing template
*   **AUTHENTICATION**: an identity authentication template

The category of the template when the returned value of the TemplateType parameter is VIBER. Valid values:

*   **text**: a template that contains only text
*   **image**: a template that contains only images
*   **text_image_button**: a template that contains text, images, and buttons
*   **text_button**: a template that contains text and buttons
*   **document**: a template that contains only files
*   **video**: a template that contains only videos
*   **text_video**: a template that contains text and videos
*   **text_video_button**: a template that contains text, videos, and buttons
*   **text_image**: a template that contains text and images

> If Category is set to text_video_button, users cannot open a web page by clicking the button. Users can open only the video in the message. In this case, you do not need to specify the Url parameter for the URL button in the template.', example='TRANSACTIONAL'),
    categoryChangePaused?: boolean(name='CategoryChangePaused'),
    components?: [ 
      {
        addSecretRecommendation?: boolean(name='AddSecretRecommendation', description='The note indicating that customers cannot share verification codes with others. The note is displayed in the message body. This parameter is valid if Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to BODY for a WhatsApp message template.', example='false'),
        buttons?: [ 
          {
            autofillText?: string(name='AutofillText', description='The text of the one-tap autofill button. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP in a WhatsApp message template.', example='Autofill'),
            couponCode?: string(name='CouponCode', description='The coupon code.', example='202039ksjs'),
            extendAttrs?: {
              action?: string(name='Action', description='The event type.', example='nextCard'),
              intentCode?: string(name='IntentCode', description='The intent code.', example='test'),
              nextLanguageCode?: string(name='NextLanguageCode', description='The language of the next template.', example='en'),
              nextTemplateCode?: string(name='NextTemplateCode', description='The code of the next template.', example='20939920093993'),
              nextTemplateName?: string(name='NextTemplateName', description='The name of the next template.', example='abc'),
            }(name='ExtendAttrs', description='The extended fields.'),
            flowAction?: string(name='FlowAction', description='The Flow action. Valid values: NAVIGATE and DATA_EXCHANGE.', example='NAVIGATE'),
            flowId?: string(name='FlowId', description='The Flow ID.', example='3838292983'),
            isOptOut?: boolean(name='IsOptOut', description='The unsubscribe button. This parameter is valid if Category is set to MARKETING and the Type sub-parameter of the Buttons parameter is set to QUICK_REPLY for a WhatsApp message template. Marketing messages will not be sent to customers if you configure message sending in the Chat App Message Service console and the customers click this button.', example='false'),
            navigateScreen?: string(name='NavigateScreen', description='The first screen in the Flow. This parameter is returned if FlowAction is set to NAVIGATE.', example='DETAILS'),
            packageName?: string(name='PackageName', description='The app package name that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP in a WhatsApp message template.', example='com.aliyun'),
            phoneNumber?: string(name='PhoneNumber', description='The phone number. This parameter is valid only if the Type sub-parameter of the Buttons parameter is set to **PHONE_NUMBER**.', example='861398745****'),
            signatureHash?: string(name='SignatureHash', description='The app signing key hash that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP in a WhatsApp message template.', example='2993839'),
            supportedApps?: [ 
              {
                packageName?: string(name='PackageName', description='The app package name.', example='com.test'),
                signatureHash?: string(name='SignatureHash', description='The app signing key hash.', example='29kdkeik939'),
              }
            ](name='SupportedApps', description='The apps that support one-tap authentication and zero-tap authentication.'),
            text?: string(name='Text', description='The display name of the button.', example='Call'),
            type?: string(name='Type', description='The button type. Valid values:

*   **PHONE_NUMBER**: phone call button
*   **URL**: URL button
*   **QUICK_REPLY**: quick reply button
*   **COPY_CODE**: copy code button
*   **ONE_TAP**: one-tap autofill button if Category is set to AUTHENTICATION

> 

*   If Category is set to AUTHENTICATION for a WhatsApp message template, you can add only one button to the WhatsApp message template and you must set the Type sub-parameter of the Buttons parameter to COPY_CODE or ONE_TAP. If Type is set to COPY_CODE, the Text sub-parameter of the Buttons parameter is required. If Type is set to ONE_TAP, the Text, SignatureHash, PackageName, and AutofillText sub-parameters of the Buttons parameter are required. The value of Text is displayed if the desired app is not installed on the device. The value of Text indicates that you must manually copy the verification code.

*   You can add only one button to a Viber message template, and you must set the Type sub-parameter of the Buttons parameter to URL.', example='PHONE_NUMBER'),
            url?: string(name='Url', description='The URL to which you are redirected when you click the URL button.', example='https://example.com'),
            urlType?: string(name='UrlType', description='The URL type. Valid values:

*   **static**
*   **dynamic**', example='static'),
          }
        ](name='Buttons', description='The buttons. This parameter is returned only if the Type sub-parameter of the Components parameter is set to **BUTTONS**.

>  ####

*   A marketing or utility WhatsApp message template can contain up to 10 buttons.

*   A WhatsApp message template can contain only one phone call button.

*   A WhatsApp message template can contain up to two URL buttons.

*   In a WhatsApp message template, a quick reply button cannot be used together with a phone call button or a URL button.'),
        caption?: string(name='Caption', description='The description of the document.', example='The new file has been uploaded.'),
        cards?: [ 
          {
            cardComponents?: [ 
              {
                buttons?: [ 
                  {
                    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='+86138000'),
                    text?: string(name='Text', description='The button text.', example='Button text'),
                    type?: string(name='Type', description='The type of the button in the carousel template. Valid values: URL, PHONE_NUMBER, and QUICK_REQLY.', example='URL'),
                    url?: string(name='Url', description='The URL to which you are redirected when you click the URL button.', example='https://aliyun.com'),
                    urlType?: string(name='UrlType', description='The type of the URL. Valid values: static and dynamic.', example='static'),
                  }
                ](name='Buttons', description='The buttons of the carousel card.'),
                format?: string(name='Format', description='The type of the header in the carousel template. The header can only be an image or a video. The headers of all carousel cards must be the same. The type of the media resources that are included in the message. Valid values: IMGAGE and VIDEO.', example='HEADER'),
                text?: string(name='Text', description='The text of the carousel card.', example='Body'),
                type?: string(name='Type', description='The component type.', example='HEADER'),
                url?: string(name='Url', description='The URL.', example='https://aliyun.com'),
              }
            ](name='CardComponents', description='The components of the carousel card.'),
          }
        ](name='Cards', description='The carousel cards.'),
        codeExpirationMinutes?: int32(name='CodeExpirationMinutes', description='The validity period of the verification code in the WhatsApp authentication template. Unit: minutes. This parameter is valid only when Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to FOOTER for a WhatsApp message template. The validity period of the verification code is displayed in the footer.', example='5', minimum=1, maximum=90),
        duration?: int32(name='Duration', description='The length of the video in the Viber message template. Unit: seconds. Valid values: 0 to 600.', example='50'),
        fileName?: string(name='FileName', description='The name of the document.', example='Express file'),
        fileType?: string(name='FileType', description='The type of the document attached in the Viber message template.', example='docx'),
        format?: string(name='Format', description='The format.', example='TEXT'),
        latitude?: string(name='Latitude', description='The latitude of the location.', example='28.001'),
        locationAddress?: string(name='LocationAddress', description='The address of the location.', example='Hangzhou'),
        locationName?: string(name='LocationName', description='The name of the location.', example='Hangzhou'),
        longitude?: string(name='Longitude', description='The longitude of the location.', example='120.002'),
        offerExpirationTimeMs?: string(name='OfferExpirationTimeMs', description='The variable when the coupon code expires in the limited-time offer template.', example='$(offerExpirationTimeMs)'),
        text?: string(name='Text', description='The text of the message that you want to send.', example='Hello'),
        thumbUrl?: string(name='ThumbUrl', description='The thumbnail URL of the video in the Viber message template.', example='https://img.png'),
        type?: string(name='Type', description='The component type. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**
*   **CAROUSEL**
*   **LIMITED_TIME_OFFER**

> 

*   In a WhatsApp message template, a **Body** component cannot exceed 1,024 characters in length. A **HEADER** or **FOOTER** component cannot exceed 60 characters in length.

*   **FOOTER**, **CAROUSEL**, and **LIMITED_TIME_OFFER** components are not supported in Viber message templates.

*   In Viber message templates, media resources such as images, videos, and documents are placed in the **HEADER** component. If a Viber message contains text and an image, the image is placed below the text in the message received on a device.', example='BODY'),
        url?: string(name='Url', description='The URL of the media resource.', example='https://image.developer.aliyundoc.com'),
        hasExpiration?: boolean(name='hasExpiration', description='Indicates whether the coupon code has an expiration time in the limited-time offer template.', example='true'),
      }
    ](name='Components', description='The components of the message template.'),
    example?: map[string]string(name='Example', description='The examples of variables.'),
    language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).', example='en_US'),
    messageSendTtlSeconds?: int32(name='MessageSendTtlSeconds', description='The validity period of the WhatsApp authentication message.', example='120', minimum=60, maximum=600),
    name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
    qualityScore?: string(name='QualityScore', description='The quality of the template.', example='GREEN'),
    reason?: string(name='Reason', description='The reason why the template was rejected.', example='None'),
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
    templateType?: string(name='TemplateType', description='The type of the message template. Valid values:

*   **WHATSAPP**
*   **VIBER**
*   LINE (developing)', example='WHATSAPP'),
  }(name='Data', description='The returned data.', example='{ 		"category": "ACCOUNT_UPDATE", 		"name": "account_notice", 		"language": "en_US", 		"templateCode": "744c4b5c79c9432497a075bdfca3****", 		"auditStatus": "APPROVED", 		"components": "[{\\"type\\":\\"BODY\\",\\"text\\":\\"body_text$(textVariable)\\"},{\\"type\\":\\"HEADER\\",\\"formate\\":\\"IMAGE\\",\\"url\\":\\"$(linkVariable)\\"},{\\"type\\":\\"FOOTER\\",\\"text\\":\\"footer-text\\"},{\\"type\\":\\"BUTTONS\\",\\"buttons\\":[{\\"type\\":\\"PHONE_NUMBER\\",\\"text\\":\\"phone-button-text\\",\\"phone_number\\":\\"+861388888****\\"},{\\"type\\":\\"URL\\",\\"text\\":\\"url-button-text\\",\\"url\\":\\"https://www.website.com/\\"}]}]", 		"example": "{\\"textVariable\\": \\"text\\", \\"linkVariable\\": \\"link\\"}" 	}'),
  message?: string(name='Message', description='The error message.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The request ID.', example='744c4b5c79c9432497a075bdfca3****'),
}

model GetChatappTemplateDetailResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatappTemplateDetailResponseBody(name='body'),
}

/**
  * @description ### QPS limit
  * You can call this API operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetChatappTemplateDetail  GetChatappTemplateDetailRequest
  * @return GetChatappTemplateDetailResponse
 */
async function getChatappTemplateDetail(request: GetChatappTemplateDetailRequest): GetChatappTemplateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChatappTemplateDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetChatappTemplateMetricRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the ISV account.', example='293483938849493', position='Query'),
  end: long(name='End', description='The end of the time range to query.

This parameter is required.', example='1693407714687', position='Query'),
  granularity?: string(name='Granularity', description='The granularity of the metric.

Valid values:

*   DAILY
*   HALF_HOUR', example='DAILY', position='Query'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the RAM user is authorized by the ISV account.', example='skdi3kksloslikdkkdk', position='Query'),
  language?: string(name='Language', description='The template language.', example='en', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  start: long(name='Start', description='The beginning of the time range to query.

This parameter is required.', example='1693107714687', position='Query'),
  templateCode: string(name='TemplateCode', description='The template code.

This parameter is required.', example='744c4b5c79c9432497a075bdfca36bf5', position='Query'),
  templateType?: string(name='TemplateType', description='The template type. If you do not specify this parameter, the default value WHATSAPP is used.

Valid values:

*   VIBER
*   WHATSAPP', example='WHATSAPP', position='Query'),
}

model GetChatappTemplateMetricResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The value OK indicates that the request was successful.', example='OK'),
  data?: [ 
    {
      cliented?: [ 
        {
          buttonContent?: string(name='ButtonContent', description='The text on the button.', example='Open url'),
          count?: int32(name='Count', description='The number of clicks.', example='20'),
          type?: string(name='Type', description='The button type.

Valid values:

*   phone_number_button
*   url_button
*   quick_relpy_button', example='quick_reply_button'),
        }
      ](name='Cliented', description='The statistics on button clicks.'),
      deliveredCount?: int32(name='DeliveredCount', description='The number of delivered messages.', example='6'),
      end?: long(name='End', description='The end of the time range you queried.', example='1668138331485'),
      language?: string(name='Language', description='The template language.', example='en'),
      readCount?: int32(name='ReadCount', description='The number of read messages.', example='3'),
      sentCount?: int32(name='SentCount', description='The number of sent messages.', example='10'),
      start?: long(name='Start', description='The beginning of the time range you queried.', example='1673919240001'),
      templateCode?: string(name='TemplateCode', description='The template code.', example='83837774838*****'),
    }
  ](name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetChatappTemplateMetricResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatappTemplateMetricResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 50 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetChatappTemplateMetric  GetChatappTemplateMetricRequest
  * @return GetChatappTemplateMetricResponse
 */
async function getChatappTemplateMetric(request: GetChatappTemplateMetricRequest): GetChatappTemplateMetricResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChatappTemplateMetric', 'POST', '/', 'json', false, 'json', request);
}

model GetChatappUploadAuthorizationRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetChatappUploadAuthorizationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied for detailed information.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    accessKeyId?: string(name='AccessKeyId', description='The AccessKey ID that is used to authorize a user to upload a file to Object Storage Service (OSS).', example='2skeuurfj****'),
    accessKeySecret?: string(name='AccessKeySecret', description='The AccessKey secret that is used to authorize a user to upload a file to OSS.', example='skdkdukeuuuu****'),
    bucketName?: string(name='BucketName', description='The name of the bucket to which a file is uploaded in OSS.', example='oss'),
    dir?: string(name='Dir', description='The directory to which the file is uploaded in Object Storage Service (OSS).', example='1000102939'),
    endPoint?: string(name='EndPoint', description='The address of the OSS server to which a file is uploaded.', example='https://oss.com'),
    expire?: int32(name='Expire', description='The timeout period.', example='3600'),
    securityToken?: string(name='SecurityToken', description='The security token.', example='dkdieiii**'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model GetChatappUploadAuthorizationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatappUploadAuthorizationResponseBody(name='body'),
}

/**
  * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetChatappUploadAuthorization  GetChatappUploadAuthorizationRequest
  * @return GetChatappUploadAuthorizationResponse
 */
async function getChatappUploadAuthorization(request: GetChatappUploadAuthorizationRequest): GetChatappUploadAuthorizationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChatappUploadAuthorization', 'POST', '/', 'json', false, 'json', request);
}

model GetChatappVerifyCodeRequest {
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='cams-kei****', position='Query'),
  locale: string(name='Locale', description='This parameter is required.', example='zh_CN', position='Query'),
  method: string(name='Method', description='This parameter is required.', example='sms', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', example='8613800000000', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetChatappVerifyCodeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1612C226-E271-4CFE-9F18-4066D550F91B'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**: The call was successful.
*   **false**: The call failed.', example='true'),
}

model GetChatappVerifyCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetChatappVerifyCodeResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetChatappVerifyCode  GetChatappVerifyCodeRequest
  * @return GetChatappVerifyCodeResponse
 */
async function getChatappVerifyCode(request: GetChatappVerifyCodeRequest): GetChatappVerifyCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChatappVerifyCode', 'POST', '/', 'json', false, 'json', request);
}

model GetCommerceSettingRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The phone number.

This parameter is required.', example='1380000****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetCommerceSettingResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied for detailed information.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    cartEnable?: boolean(name='CartEnable', description='Indicates whether the shopping cart button is displayed. Valid values:

*   true
*   false', example='false'),
    catalogVisible?: boolean(name='CatalogVisible', description='Indicates whether the catalog button is displayed. Valid values:

*   true
*   false', example='false'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetCommerceSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetCommerceSettingResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetCommerceSetting  GetCommerceSettingRequest
  * @return GetCommerceSettingResponse
 */
async function getCommerceSetting(request: GetCommerceSettingRequest): GetCommerceSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCommerceSetting', 'POST', '/', 'json', false, 'json', request);
}

model GetConversationalAutomationRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account or the instance ID of the customer of Alibaba Cloud.

This parameter is required.', example='cams-3ie***', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The phone number of the enterprise.

This parameter is required.', example='86130000***', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetConversationalAutomationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    commands?: [ 
      {
        commandDescription?: string(name='CommandDescription', description='The description of the command.', example='description'),
        commandName?: string(name='CommandName', description='The name of the command.', example='common1'),
      }
    ](name='Commands', description='The commands.'),
    enableWelcomeMessage?: boolean(name='EnableWelcomeMessage', description='Indicates whether the welcoming message is enabled.', example='true'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number of the enterprise.', example='86138****'),
    prompts?: [ string ](name='Prompts', description='The opening remarks.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetConversationalAutomationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetConversationalAutomationResponseBody(name='body'),
}

/**
  * @description ### [](#qps-)QPS limit
  * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * This operation will directly obtain data from Facebook, which sets an upper limit on the total number of calls for operations. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetConversationalAutomation  GetConversationalAutomationRequest
  * @return GetConversationalAutomationResponse
 */
async function getConversationalAutomation(request: GetConversationalAutomationRequest): GetConversationalAutomationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetConversationalAutomation', 'POST', '/', 'json', false, 'json', request);
}

model GetFlowRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值示例值', position='Query'),
  flowId: string(name='FlowId', description='This parameter is required.', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: {
    categories?: [ string ](name='Categories', description='The categories of the Flow.'),
    dataApiVersion?: string(name='DataApiVersion', description='The version number of the API.', example='3.0'),
    flowId?: string(name='FlowId', description='The Flow ID.', example='flow_id_arms'),
    flowName?: string(name='FlowName', description='The Flow name.', example='dnjn'),
    JSONVersion?: string(name='JSONVersion', description='The JSON version.', example='2.1'),
    previewUrl?: string(name='PreviewUrl', description='The temporary preview URL.', example='https://pre-url'),
    previewUrlExpires?: long(name='PreviewUrlExpires', description='The time when the preview URL expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1700617436633'),
    status?: string(name='Status', description='The state of the Flow.

Valid values:

*   PUBLISHED

    <!-- -->

    <!-- -->

    <!-- -->

*   DRAFT

    <!-- -->

    <!-- -->

    <!-- -->

*   DEPRECATED

    <!-- -->

    <!-- -->

    <!-- -->', example='DRAFT'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFlowResponseBody(name='body'),
}

/**
  * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetFlow  GetFlowRequest
  * @return GetFlowResponse
 */
async function getFlow(request: GetFlowRequest): GetFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFlow', 'POST', '/', 'json', false, 'json', request);
}

model GetFlowJSONAssestRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值', position='Query'),
  flowId?: string(name='FlowId', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetFlowJSONAssestResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: {
    filePath?: string(name='FilePath', description='The file path.', example='https://url.com/json.json'),
    flowId?: string(name='FlowId', description='The Flow ID.', example='flow_id_arms'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='Error description information.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetFlowJSONAssestResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFlowJSONAssestResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetFlowJSONAssest  GetFlowJSONAssestRequest
  * @return GetFlowJSONAssestResponse
 */
async function getFlowJSONAssest(request: GetFlowJSONAssestRequest): GetFlowJSONAssestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFlowJSONAssest', 'POST', '/', 'json', false, 'json', request);
}

model GetFlowPreviewUrlRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值示例值', position='Query'),
  flowId: string(name='FlowId', description='This parameter is required.', example='示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetFlowPreviewUrlResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: {
    flowId?: string(name='FlowId', description='The Flow ID.', example='6dd31e1b7cc940fc99e293d9952b5b79'),
    previewUrl?: string(name='PreviewUrl', description='The temporary preview URL.', example='https://url'),
    previewUrlExpires?: long(name='PreviewUrlExpires', description='The time when the preview URL expires. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1700617436633'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model GetFlowPreviewUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetFlowPreviewUrlResponseBody(name='body'),
}

/**
  * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetFlowPreviewUrl  GetFlowPreviewUrlRequest
  * @return GetFlowPreviewUrlResponse
 */
async function getFlowPreviewUrl(request: GetFlowPreviewUrlRequest): GetFlowPreviewUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetFlowPreviewUrl', 'POST', '/', 'json', false, 'json', request);
}

model GetMigrationVerifyCodeRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user under the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493', position='Query'),
  locale: string(name='Locale', description='The language.

This parameter is required.', example='zh_CN', position='Query'),
  method: string(name='Method', description='The method to obtain the verification code. Valid values: SMS and VOICE.

This parameter is required.', example='sms', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='Phone number.

This parameter is required.', example='8613800001234', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetMigrationVerifyCodeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    id?: string(name='Id', description='The ID of the number.', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', description='Phone number.', example='8613800001234'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model GetMigrationVerifyCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetMigrationVerifyCodeResponseBody(name='body'),
}

/**
  * @description The single user QPS limit for this interface is 10 times per second. Exceeding the limit may result in restricted API calls, which may affect your business. Please make reasonable calls.
  * @param request  the request parameters of GetMigrationVerifyCode  GetMigrationVerifyCodeRequest
  * @return GetMigrationVerifyCodeResponse
 */
async function getMigrationVerifyCode(request: GetMigrationVerifyCodeRequest): GetMigrationVerifyCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMigrationVerifyCode', 'POST', '/', 'json', false, 'json', request);
}

model GetPermissionByCodeRequest {
  code: string(name='Code', description='This parameter is required.', example='示例值示例值示例值', position='Query'),
  custSpaceId?: string(name='CustSpaceId', example='示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  permissions?: [ string ](name='Permissions', shrink='json', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetPermissionByCodeResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='Error description information.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetPermissionByCodeResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPermissionByCodeResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPermissionByCode  GetPermissionByCodeRequest
  * @return GetPermissionByCodeResponse
 */
async function getPermissionByCode(request: GetPermissionByCodeRequest): GetPermissionByCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPermissionByCode', 'POST', '/', 'json', false, 'json', request);
}

model GetPhoneEncryptionPublicKeyRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', example='示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetPhoneEncryptionPublicKeyResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    encryptionPublicKey?: string(name='EncryptionPublicKey', description='The public key.', example='-----BEGIN PUBLIC KEY-----
AAA
BBB
CCC
DDD
EEE
FFF
GGG
-----END PUBLIC KEY-----'),
    encryptionPublicKeyStatus?: string(name='EncryptionPublicKeyStatus', description='The validity state of the public key. Valid values:

*   MISMATCH: The public key is invalid.
*   VALID: The public key is valid.', example='VALID'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='86138000**'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='Error description information.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetPhoneEncryptionPublicKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhoneEncryptionPublicKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPhoneEncryptionPublicKey  GetPhoneEncryptionPublicKeyRequest
  * @return GetPhoneEncryptionPublicKeyResponse
 */
async function getPhoneEncryptionPublicKey(request: GetPhoneEncryptionPublicKeyRequest): GetPhoneEncryptionPublicKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhoneEncryptionPublicKey', 'POST', '/', 'json', false, 'json', request);
}

model GetPhoneNumberVerificationStatusRequest {
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', example='示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model GetPhoneNumberVerificationStatusResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    codeVerificationStatus?: string(name='CodeVerificationStatus', description='The verification status.', example='VERIFIED'),
    id?: string(name='Id', description='The ID of the number.', example='2224342624'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613900001234'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2D'),
}

model GetPhoneNumberVerificationStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPhoneNumberVerificationStatusResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetPhoneNumberVerificationStatus  GetPhoneNumberVerificationStatusRequest
  * @return GetPhoneNumberVerificationStatusResponse
 */
async function getPhoneNumberVerificationStatus(request: GetPhoneNumberVerificationStatusRequest): GetPhoneNumberVerificationStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhoneNumberVerificationStatus', 'POST', '/', 'json', false, 'json', request);
}

model GetPreValidatePhoneIdRequest {
  phoneNumber: string(name='PhoneNumber', description='The phone number.

This parameter is required.', example='861380000', position='Body'),
  verifyCode: string(name='VerifyCode', description='The verification code provided when you purchased the pre-registered phone number.

This parameter is required.', example='208393', position='Body'),
}

model GetPreValidatePhoneIdResponseBody = {
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [Error codes](https://www.alibabacloud.com/help/zh/cams/latest/api-error-codes).', example='OK'),
  data?: {
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='929833'),
    phoneNumberId?: string(name='PhoneNumberId', description='The ID of the phone number.', example='8613800000000'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model GetPreValidatePhoneIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPreValidatePhoneIdResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetPreValidatePhoneId  GetPreValidatePhoneIdRequest
  * @return GetPreValidatePhoneIdResponse
 */
async function getPreValidatePhoneId(request: GetPreValidatePhoneIdRequest): GetPreValidatePhoneIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPreValidatePhoneId', 'POST', '/', 'json', true, 'form', request);
}

model GetWhatsappConnectionCatalogRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='C2020939922929292', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  wabaId: string(name='WabaId', description='The WABA ID.

This parameter is required.', example='292939399393', position='Query'),
}

model GetWhatsappConnectionCatalogResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='success'),
  model?: map[string]any(name='Model', description='The returned data.', example='{"id":"200292992"}'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='false'),
}

model GetWhatsappConnectionCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWhatsappConnectionCatalogResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetWhatsappConnectionCatalog  GetWhatsappConnectionCatalogRequest
  * @return GetWhatsappConnectionCatalogResponse
 */
async function getWhatsappConnectionCatalog(request: GetWhatsappConnectionCatalogRequest): GetWhatsappConnectionCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWhatsappConnectionCatalog', 'POST', '/', 'json', false, 'json', request);
}

model GetWhatsappHealthStatusRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account or the instance ID of the customer of Alibaba Cloud.

This parameter is required.', example='2993****', position='Query'),
  language?: string(name='Language', description='The template language.', example='en', position='Query'),
  nodeType: string(name='NodeType', description='The node type.

Valid values:

*   template: message template
*   phone: phone number
*   waba: WhatsApp Business Account (WABA)

This parameter is required.', example='waba', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber?: string(name='PhoneNumber', description='The phone number of the enterprise.', example='86138***', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode?: string(name='TemplateCode', description='The template code.', example='399299***', position='Query'),
  wabaId?: string(name='WabaId', description='WabaId', example='299399****', position='Query'),
}

model GetWhatsappHealthStatusResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    canSendMessage?: string(name='CanSendMessage', description='Indicates whether the messages can be sent.', example='AVAILABLE'),
    entities?: [ 
      {
        businessId?: string(name='BusinessId', description='The Business Manager ID.', example='3992****'),
        canSendMessage?: string(name='CanSendMessage', description='Indicates whether the messages can be sent.', example='AVAILABLE'),
        entityType?: string(name='EntityType', description='The entity type.', example='PHONE_NUMBER'),
        errors?: [ 
          {
            errorCode?: string(name='ErrorCode', description='The error code.', example='141006'),
            errorDescription?: string(name='ErrorDescription', description='The description of the error.', example='There is an error with the payment method.'),
            possibleSolution?: string(name='PossibleSolution', description='The possible solution to the error.', example='There was an error with your payment method. Please add a new payment method to the account.'),
          }
        ](name='Errors', description='The reasons why the messages failed to be sent.'),
        language?: string(name='Language', description='The template language.', example='en'),
        phoneNumber?: string(name='PhoneNumber', description='The phone number to which the messages are sent.', example='86138****'),
        templateCode?: string(name='TemplateCode', description='The template code. This parameter is returned when the NodeType parameter is set to **template**.', example='939928****'),
        wabaId?: string(name='WabaId', description='The WABA ID. You can view the WABA ID in the Chat App Message Service console after you create the WABA.', example='39939***'),
      }
    ](name='Entities', description='The queried entities.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='DAC72B08-3327-33EF-BEDC-8EC3E83A6575'),
  success?: boolean(name='Success', description='Indicates whether the call was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model GetWhatsappHealthStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetWhatsappHealthStatusResponseBody(name='body'),
}

/**
  * @description ### [](#qps-)QPS limit
  * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * This operation will directly obtain data from Facebook, which sets an upper limit on the total number of calls for operations. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of GetWhatsappHealthStatus  GetWhatsappHealthStatusRequest
  * @return GetWhatsappHealthStatusResponse
 */
async function getWhatsappHealthStatus(request: GetWhatsappHealthStatusRequest): GetWhatsappHealthStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetWhatsappHealthStatus', 'POST', '/', 'json', false, 'json', request);
}

model IsvGetAppIdRequest {
  intlVersion?: string(name='IntlVersion', example='示例值示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  permissions?: string(name='Permissions', example='示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='示例值示例值', position='Query'),
}

model IsvGetAppIdResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  appId?: string(name='AppId', description='The message ID.', example='23hr3v'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  configId?: string(name='ConfigId', description='The ID of the configuration item.', example='28972951817****'),
  message?: string(name='Message', description='The error message returned.', example='null'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='744c4b5c79c9432497a075bdfca3***'),
}

model IsvGetAppIdResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: IsvGetAppIdResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of IsvGetAppId  IsvGetAppIdRequest
  * @return IsvGetAppIdResponse
 */
async function isvGetAppId(request: IsvGetAppIdRequest): IsvGetAppIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IsvGetAppId', 'POST', '/', 'json', false, 'json', request);
}

model ListBindingRelationsForFlowVersionRequest {
  channelType: string(name='ChannelType', description='Channel type. Values:
- INSTAGRAM
- WHATSAPP
- MESSENGER


<props="intl">- VIBER

This parameter is required.', example='WHATSAPP', position='Query'),
  flowCode: string(name='FlowCode', description='Process code. View the process code in the [Flow Editor](https://chatapp.console.aliyun.com/ChatFlowBuilder) interface.

This parameter is required.', example='9ccc41**************************', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListBindingRelationsForFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details.', example='None'),
  code?: string(name='Code', description='Error code. For more information, see [Error Codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: [  map[string]any ](name='Data', description='Returned data list.'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values:

- true: Success.

- false: Failure.', example='true'),
}

model ListBindingRelationsForFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListBindingRelationsForFlowVersionResponseBody(name='body'),
}

/**
  * @description - You can call this interface to query the list of phone numbers or merchant account IDs bound to a process, or you can view the list in the [**Flow Editor**](https://chatapp.console.aliyun.com/ChatFlowBuilder) > **Settings** interface.
  * - Before calling this interface, make sure that the process you created has already been bound to a phone number or merchant account ID.
  * - If the process you created is not bound to a phone number or merchant account ID, you can manually bind a phone number or merchant account ID in the [**Flow Editor**](https://chatapp.console.aliyun.com/ChatFlowBuilder) > **Settings** interface, or bind it through the [FlowBindPhone](https://help.aliyun.com/document_detail/2937190.html) interface.
  * @param request  the request parameters of ListBindingRelationsForFlowVersion  ListBindingRelationsForFlowVersionRequest
  * @return ListBindingRelationsForFlowVersionResponse
 */
async function listBindingRelationsForFlowVersion(request: ListBindingRelationsForFlowVersionRequest): ListBindingRelationsForFlowVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListBindingRelationsForFlowVersion', 'POST', '/', 'json', false, 'json', request);
}

model ListChatFlowRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS', position='Query'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}', shrink='json', position='Query'),
  flowTriggerType?: string(name='FlowTriggerType', description='Flow trigger type, enum values:
- TriggeredManually
- TriggeredByWhatsApp
- TriggeredByInstagram
- TriggeredByViber
- TriggeredByMessenger', example='示例值', position='Query'),
  keyword?: string(name='Keyword', description='Search keyword.', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', description='Page number', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='Page size.', example='20', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  returnWithOnlineVersion?: boolean(name='ReturnWithOnlineVersion', description='Whether to return the online status', example='true', position='Query'),
  status?: string(name='Status', description='Flow status', example='NORMAL', position='Query'),
}

model ListChatFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details, this field is returned only when RAM verification fails.', example='无'),
  code?: string(name='Code', description='System error code. For more details on error codes, please refer to the error code documentation.', example='示例值示例值'),
  message?: string(name='Message', description='Error message.', example='示例值示例值'),
  requestId?: string(name='RequestId', description='Request ID.', example='示例值示例值'),
  response?: map[string]any(name='Response', description='Response data', example='无'),
  success?: boolean(name='Success', description='Whether the request was successful.', example='true'),
}

model ListChatFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChatFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListChatFlow  ListChatFlowRequest
  * @return ListChatFlowResponse
 */
async function listChatFlow(request: ListChatFlowRequest): ListChatFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChatFlow', 'POST', '/', 'json', false, 'json', request);
}

model ListChatFlowTemplateRequest {
  bizCode: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.

This parameter is required.', example='ALICOM_OPAAS', position='Query'),
  keyword?: string(name='Keyword', description='Search keyword.', example='LLM', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', description='Page number', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='Number of records per page.', example='10', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  triggerType?: string(name='TriggerType', description='Trigger type, with the following enum values:

- TriggeredManually
- TriggeredByWhatsApp
- TriggeredByInstagram
- TriggeredByViber
- TriggeredByMessenger', example='TriggeredByWhatsApp', position='Query'),
}

model ListChatFlowTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  data?: {
    response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  }(name='Data', description='Returned data object.'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model ListChatFlowTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChatFlowTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListChatFlowTemplate  ListChatFlowTemplateRequest
  * @return ListChatFlowTemplateResponse
 */
async function listChatFlowTemplate(request: ListChatFlowTemplateRequest): ListChatFlowTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChatFlowTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ListChatGroupRequest {
  businessNumber: string(name='BusinessNumber', description='This parameter is required.', example='8613800***', position='Query'),
  channelType?: string(name='ChannelType', example='WHATSAPP', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='cams-x***', position='Query'),
  groupStatus?: string(name='GroupStatus', example='ACTIVE', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  page: {
    index: long(name='Index', description='This parameter is required.', example='1'),
    size: long(name='Size', description='This parameter is required.', example='20'),
  }(name='Page', description='This parameter is required.', shrink='json', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subject?: string(name='Subject', example='test', position='Query'),
}

model ListChatGroupResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        businessNumber?: string(name='BusinessNumber', example='8613800**'),
        description?: string(name='Description', example='test'),
        groupId?: string(name='GroupId', example='EA30d***'),
        groupStatus?: string(name='GroupStatus', example='ACTIVE'),
        inviteLink?: string(name='InviteLink', example='https://chat.whatsapp.com/***'),
        profilePictureFile?: string(name='ProfilePictureFile', example='https://aliyun.com/png.jpg'),
        subject?: string(name='Subject', example='示例值示例值'),
      }
    ](name='List'),
    total?: long(name='Total', example='51'),
  }(name='Data'),
  message?: string(name='Message', example='示例值示例值'),
  requestId?: string(name='RequestId', example='示例值示例值'),
  success?: boolean(name='Success', example='true'),
}

model ListChatGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChatGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListChatGroup  ListChatGroupRequest
  * @return ListChatGroupResponse
 */
async function listChatGroup(request: ListChatGroupRequest): ListChatGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChatGroup', 'POST', '/', 'json', false, 'json', request);
}

model ListChatGroupParticipantsRequest {
  businessNumber: string(name='BusinessNumber', description='This parameter is required.', example='8613800***', position='Query'),
  channelType?: string(name='ChannelType', example='WHATSAPP', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='cams-k***', position='Query'),
  groupId: string(name='GroupId', description='This parameter is required.', example='EA939****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  page?: {
    index?: long(name='Index', example='1'),
    size?: long(name='Size', example='20'),
  }(name='Page', shrink='json', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListChatGroupParticipantsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  data?: {
    list?: [ 
      {
        participantNumber?: string(name='ParticipantNumber', example='861382***'),
      }
    ](name='List'),
    total?: long(name='Total', example='8'),
  }(name='Data'),
  message?: string(name='Message', example='示例值'),
  requestId?: string(name='RequestId', example='E9d9****'),
  success?: boolean(name='Success', example='true'),
}

model ListChatGroupParticipantsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChatGroupParticipantsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListChatGroupParticipants  ListChatGroupParticipantsRequest
  * @return ListChatGroupParticipantsResponse
 */
async function listChatGroupParticipants(request: ListChatGroupParticipantsRequest): ListChatGroupParticipantsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChatGroupParticipants', 'POST', '/', 'json', false, 'json', request);
}

model ListChatappMessageRequest {
  businessNumber: string(name='BusinessNumber', description='This parameter is required.', example='8613800****', position='Query'),
  channelType: string(name='ChannelType', description='This parameter is required.', example='WHATSAPP', position='Query'),
  clientAcceptStatus?: string(name='ClientAcceptStatus', example='success', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='示例值示例值示例值', position='Query'),
  endTime?: long(name='EndTime', example='1727057232686', position='Query'),
  eventAction?: string(name='EventAction', example='UP', position='Query'),
  groupMessageId?: string(name='GroupMessageId', example='9292****', position='Query'),
  messageStatus?: string(name='MessageStatus', example='success', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  page: {
    index: long(name='Index', description='This parameter is required.', example='49'),
    size: long(name='Size', description='This parameter is required.', example='78'),
  }(name='Page', description='This parameter is required.', shrink='json', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  startTime?: long(name='StartTime', example='1727057232686', position='Query'),
  templateCode?: string(name='TemplateCode', example='9938***', position='Query'),
  userNumber?: string(name='UserNumber', example='86138***', position='Query'),
}

model ListChatappMessageResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='示例值示例值示例值'),
  data?: [ 
    {
      businessNumber?: string(name='BusinessNumber', example='示例值示例值'),
      channelType?: string(name='ChannelType', example='示例值示例值示例值'),
      clientAcceptStatusName?: string(name='ClientAcceptStatusName', example='示例值示例值示例值'),
      clientReadStatus?: string(name='ClientReadStatus', example='示例值示例值'),
      clientReadStatusName?: string(name='ClientReadStatusName', example='示例值示例值'),
      conversationId?: string(name='ConversationId', example='示例值示例值'),
      eventAction?: string(name='EventAction', example='示例值示例值'),
      eventActionName?: string(name='EventActionName', example='示例值'),
      failBackContent?: string(name='FailBackContent', example='示例值'),
      failBackFlag?: string(name='FailBackFlag', example='Y'),
      failReason?: string(name='FailReason', example='示例值示例值'),
      languageCode?: string(name='LanguageCode', example='示例值示例值'),
      message?: string(name='Message', example='示例值示例值'),
      messageId?: string(name='MessageId', example='示例值'),
      messageSource?: string(name='MessageSource', example='示例值示例值'),
      messageStatus?: string(name='MessageStatus', example='示例值示例值'),
      messageStatusName?: string(name='MessageStatusName', example='示例值'),
      messageType?: string(name='MessageType', example='示例值示例值'),
      messageTypeName?: string(name='MessageTypeName', example='示例值示例值'),
      month?: string(name='Month', example='示例值示例值'),
      sendTime?: string(name='SendTime', example='示例值示例值'),
      templateCode?: string(name='TemplateCode', example='示例值示例值'),
      templateName?: string(name='TemplateName', example='示例值示例值'),
      type?: string(name='Type', example='示例值示例值'),
      uniqueMessageId?: string(name='UniqueMessageId', example='示例值示例值示例值'),
      userNumber?: string(name='UserNumber', example='示例值示例值示例值'),
    }
  ](name='Data'),
  message?: string(name='Message', example='示例值'),
  requestId?: string(name='RequestId', example='示例值'),
  success?: boolean(name='Success', example='false'),
}

model ListChatappMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChatappMessageResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListChatappMessage  ListChatappMessageRequest
  * @return ListChatappMessageResponse
 */
async function listChatappMessage(request: ListChatappMessageRequest): ListChatappMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChatappMessage', 'POST', '/', 'json', false, 'json', request);
}

model ListChatappTemplateRequest {
  auditStatus?: string(name='AuditStatus', description='The review state of the template. Valid values:

*   **pass**: The template is approved.
*   **fail**: The template is rejected.
*   **auditing**: The template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass', position='Query'),
  category?: string(name='Category', description='The category of the message template.', example='AUTHENTICATION', position='Query'),
  code?: string(name='Code', description='The code of the message template.', example='838888822*****', position='Query'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the ISV account.', example='28251486512358****', position='Query'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business Account (WABA) ID of the RAM user within the independent software vendor (ISV) account.

>  CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='65921621816****', deprecated='true', position='Query'),
  isvCode?: string(name='IsvCode', description='The ISV verification code. This parameter is used to verify whether the RAM user is authorized by the ISV account.', example='skdi3kksloslikdkkdk', position='Query'),
  language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).', example='en', position='Query'),
  name?: string(name='Name', description='The name of the template.', example='hello_whatsapp', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  page?: {
    index: int32(name='Index', description='The page number. Default value: 1.

This parameter is required.', example='1'),
    size: int32(name='Size', description='The number of entries per page. Default value: 10.

This parameter is required.', example='10'),
  }(name='Page', description='The pagination settings.', example='"page": "{\\"index\\": 1,\\"size\\": 20}', shrink='json', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateType?: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**', example='WHATSAPP', position='Query'),
}

model ListChatappTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  listTemplate?: [ 
    {
      auditStatus?: string(name='AuditStatus', description='The review state of the template. Valid values:

*   **pass**: The template is approved.
*   **fail**: The template is rejected.
*   **auditing**: The template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
      category?: string(name='Category', description='The category of the WhatsApp message template. Valid values:

*   **UTILITY**
*   **MARKETING**
*   **AUTHENTICATION**

The category of the Viber template. Valid values:

*   **text**: template that contains only text
*   **image**: template that contains only images
*   **text_image_button**: template that contains text, images, and buttons
*   **text_button**: template that contains text and buttons
*   **document**: template that contains only documents
*   **video**: template that contains only videos
*   **text_video**: template that contains text and videos
*   **text_video_button**: template that contains text, videos, and buttons
*   **text_image**: template that contains text and images', example='TRANSACTIONAL'),
      language?: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).', example='en'),
      lastUpdateTime?: long(name='LastUpdateTime', description='The time when the template was last modified. This value is a UNIX timestamp representing the number of milliseconds that have elapsed since January 1, 1970, 00:00:00 UTC.', example='1711006633000'),
      reason?: string(name='Reason', description='The reason why the template was rejected.', example='None'),
      templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
      templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
      templateType?: string(name='TemplateType', description='The type of the template. Valid values: WHATSAPP and VIBER.', example='WHATSAPP'),
    }
  ](name='ListTemplate', description='The message templates.'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='false'),
  total?: int32(name='Total', description='The total number of returned entries.', example='1'),
}

model ListChatappTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListChatappTemplateResponseBody(name='body'),
}

/**
  * @description ### QPS limit
  * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ListChatappTemplate  ListChatappTemplateRequest
  * @return ListChatappTemplateResponse
 */
async function listChatappTemplate(request: ListChatappTemplateRequest): ListChatappTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChatappTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ListFlowRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值', position='Query'),
  flowName?: string(name='FlowName', example='示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  page?: {
    index?: int32(name='Index'),
    size?: int32(name='Size'),
  }(name='Page', shrink='json', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: [ 
    {
      categories?: [ string ](name='Categories', description='The categories of the Flows.'),
      flowId?: string(name='FlowId', description='The Flow ID.', example='3939393***'),
      flowName?: string(name='FlowName', description='The Flow name.', example='flow-02020'),
    }
  ](name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='1612C226-E271-4CFE-9F18-4066D550F91B'),
}

model ListFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowResponseBody(name='body'),
}

/**
  * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ListFlow  ListFlowRequest
  * @return ListFlowResponse
 */
async function listFlow(request: ListFlowRequest): ListFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlow', 'POST', '/', 'json', false, 'json', request);
}

model ListFlowNodePrototypeV2Request {
  bizCode: string(name='BizCode', description='This parameter is required.', example='ALICOM_OPAAS', position='Query'),
  groupCode?: string(name='GroupCode', example='Core', position='Query'),
  keyword?: string(name='Keyword', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo: long(name='PageNo', description='This parameter is required.', example='1', position='Query'),
  pageSize: long(name='PageSize', description='This parameter is required.', example='20', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListFlowNodePrototypeV2ResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: long(name='Code', example='91'),
  data?: {
    model?: [ 
      {
        code?: string(name='Code', example='示例值示例值'),
        groupCode?: string(name='GroupCode', example='示例值示例值'),
        publicExtend?: string(name='PublicExtend', example='示例值示例值'),
        status?: string(name='Status', example='示例值示例值'),
      }
    ](name='Model'),
  }(name='Data'),
  message?: string(name='Message', example='示例值示例值'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model ListFlowNodePrototypeV2Response = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowNodePrototypeV2ResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFlowNodePrototypeV2  ListFlowNodePrototypeV2Request
  * @return ListFlowNodePrototypeV2Response
 */
async function listFlowNodePrototypeV2(request: ListFlowNodePrototypeV2Request): ListFlowNodePrototypeV2Response {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlowNodePrototypeV2', 'POST', '/', 'json', false, 'json', request);
}

model ListFlowVersionRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS', position='Query'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}', shrink='json', position='Query'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNo?: long(name='PageNo', description='Current page number.', example='1', position='Query'),
  pageSize?: long(name='PageSize', description='Page size.', example='5', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='Flow version status.', example='DRAFT', position='Query'),
}

model ListFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denied.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Whether the operation was successful. Values: true: success; false: failure.', example='false'),
}

model ListFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListFlowVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListFlowVersion  ListFlowVersionRequest
  * @return ListFlowVersionResponse
 */
async function listFlowVersion(request: ListFlowVersionRequest): ListFlowVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListFlowVersion', 'POST', '/', 'json', false, 'json', request);
}

model ListPhoneMessageQrdlRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', example='示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListPhoneMessageQrdlResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: [ 
    {
      deepLinkUrl?: string(name='DeepLinkUrl', description='The URL of the deep link.', example='https://wa.msg/'),
      generateQrImage?: string(name='GenerateQrImage', description='The format of the generated image.', example='PNG'),
      phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800'),
      prefilledMessage?: string(name='PrefilledMessage', description='The message content.', example='Hello'),
      qrImageUrl?: string(name='QrImageUrl', description='The URL of the QR code.', example='https://img.png'),
      qrdlCode?: string(name='QrdlCode', description='The mode of the quick-response (QR) code.', example='IUIED999'),
    }
  ](name='Data', description='The returned data.'),
  message?: string(name='Message', description='Error description information.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model ListPhoneMessageQrdlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPhoneMessageQrdlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPhoneMessageQrdl  ListPhoneMessageQrdlRequest
  * @return ListPhoneMessageQrdlResponse
 */
async function listPhoneMessageQrdl(request: ListPhoneMessageQrdlRequest): ListPhoneMessageQrdlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPhoneMessageQrdl', 'POST', '/', 'json', false, 'json', request);
}

model ListProductRequest {
  after?: string(name='After', description='The cursor that points to the end of the page of the returned data.', example='kdkii48jfjjei3', position='Query'),
  before?: string(name='Before', description='The cursor that points to the beginning of the page of the returned data.', example='wiidkd939kek93', position='Query'),
  catalogId: string(name='CatalogId', description='The catalog ID.

This parameter is required.', example='29398389292', position='Query'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.', example='C29398388383', position='Query'),
  fields?: string(name='Fields', description='The fields. Separate multiple fields with commas (,).

 see [product fields](https://help.aliyun.com/document_detail/2579419.html)', example='id,name', position='Query'),
  limit?: long(name='Limit', description='The number of products to be queried. Valid values: 1 to 1000.', example='73', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  wabaId: string(name='WabaId', description='The ID of the WhatsApp Business account (WABA).

This parameter is required.', example='38487474747', position='Query'),
}

model ListProductResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  model?: {
    data?: [  map[string]any ](name='Data', description='The returned data.'),
    paging?: {
      cursors?: {
        after?: string(name='After', description='The cursor that points to the end of the page of the returned data.', example='sjsuueu83838'),
        before?: string(name='Before', description='The cursor that points to the beginning of the page of the returned data.', example='sjjsjdjjdjd83883'),
      }(name='Cursors', description='The cursors for pagination.'),
    }(name='Paging', description='The pagination details.'),
  }(name='Model', description='The returned data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ListProductResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ListProduct  ListProductRequest
  * @return ListProductResponse
 */
async function listProduct(request: ListProductRequest): ListProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProduct', 'POST', '/', 'json', false, 'json', request);
}

model ListProductCatalogRequest {
  after?: string(name='After', description='The cursor that points to the end of the page of the returned data.', example='kdkii48jfjjei3', position='Query'),
  before?: string(name='Before', description='The cursor that points to the beginning of the page of the returned data.', example='wiidkd939kek93', position='Query'),
  businessId: long(name='BusinessId', description='The Business Manager ID.

This parameter is required.', example='28', position='Query'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.', example='293483938849493', position='Query'),
  fields?: string(name='Fields', description='The fields. Separate multiple fields with commas (,).
see  [catalog fields](https://help.aliyun.com/document_detail/2579419.html)', example='id,name', position='Query'),
  limit?: long(name='Limit', description='The number of catalogs to be queried. Valid values: 1 to 1000.', example='73', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ListProductCatalogResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  model?: {
    data?: [  map[string]any ](name='Data', description='The returned data.'),
    paging?: {
      cursors?: {
        after?: string(name='After', description='The cursor that points to the end of the page of the returned data.', example='sjsuueu83838'),
        before?: string(name='Before', description='The cursor that points to the beginning of the page of the returned data.', example='sjjsjdjjdjd83883'),
      }(name='Cursors', description='The cursors for pagination.'),
    }(name='Paging', description='The pagination details.'),
  }(name='Model', description='The returned data.'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ListProductCatalogResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProductCatalogResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ListProductCatalog  ListProductCatalogRequest
  * @return ListProductCatalogResponse
 */
async function listProductCatalog(request: ListProductCatalogRequest): ListProductCatalogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListProductCatalog', 'POST', '/', 'json', false, 'json', request);
}

model ModifyChatappTemplateRequest {
  category?: string(name='Category', description='The category of the Viber message template. Valid values:

*   **text**: the template that contains only text
*   **image**: the template that contains only images
*   **text_image_button**: the template that contains text, images, and buttons
*   **text_button**: the template that contains text and buttons
*   **document**: the template that contains only documents
*   **video**: the template that contains only videos
*   **text_video**: the template that contains text and videos
*   **text_video_button**: the template that contains text, videos, and buttons
*   **text_image**: the template that contains text and images

> This parameter applies only to Viber message templates.', example='text', position='Body'),
  categoryChangePaused?: boolean(name='CategoryChangePaused', position='Body'),
  components: [ 
    {
      addSecretRecommendation?: boolean(name='AddSecretRecommendation', description='The note indicating that customers cannot share verification codes with others. The note is displayed in the message body. This parameter is valid if Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to BODY for a WhatsApp message template.', example='false'),
      buttons?: [ 
        {
          autofillText?: string(name='AutofillText', description='The text of the one-tap autofill button. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP for a WhatsApp message template.', example='Autofill'),
          couponCode?: string(name='CouponCode', description='The coupon code. It can contain only letters and digits. You can set this parameter to a variable such as $(couponCode). Specify the value of couponCode when you send a message.', example='120293'),
          flowAction?: string(name='FlowAction', description='The Flow action.

Valid values:

*   DATA_EXCHANGE
*   NAVIGATE', example='NAVIGATE'),
          flowId?: string(name='FlowId', description='The Flow ID.', example='664597077870605'),
          isOptOut?: boolean(name='IsOptOut', description='The unsubscribe button. This parameter is valid if Category is set to MARKETING and the Type sub-parameter of the Buttons parameter is set to QUICK_REPLY for a WhatsApp message template. Marketing messages will not be sent to customers if you configure message sending in the Chat App Message Service console and the customers click this button.', example='false'),
          navigateScreen?: string(name='NavigateScreen', description='The first screen in the Flow. This parameter is required if FlowAction is set to NAVIGATE.', example='DETAILS'),
          packageName?: string(name='PackageName', description='The app package name that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP for a WhatsApp message template.', example='com.demo', deprecated='true'),
          phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='+8613888887889'),
          signatureHash?: string(name='SignatureHash', description='The app signing key hash that WhatsApp uses to load your app. This parameter is required if Category is set to AUTHENTICATION and the Type sub-parameter of the Buttons parameter is set to ONE_TAP for a WhatsApp message template.', example='29dkeke', deprecated='true'),
          supportedApps?: [ 
            {
              packageName?: string(name='PackageName', description='The Whatsapp template is required when the Category is\\" Authorisation \\"and the Button Type is\\" ONE_TAP/ZERO-TAP\\", indicating the signature hash value of the Whatsapp call application.', example='com.example.myapplication'),
              signatureHash?: string(name='SignatureHash', description='The Whatsapp template is required when the Category is\\" Authorisation \\"and the Button Type is\\" ONE_TAP/ZERO-TAP\\", indicating the signature hash value of the Whatsapp call application.', example='fk39kd93ks9'),
            }
          ](name='SupportedApps', description='List of supported apps.'),
          text?: string(name='Text', description='The text of the button.', example='phone-button-text'),
          type: string(name='Type', description='The button type. Valid values:

*   **PHONE_NUMBER**: phone call button
*   **URL**: URL button
*   **QUICK_REPLY**: quick reply button
*   **COPY_CODE**: copy code button
*   **ONE_TAP**: one-tap autofill button if Category is set to AUTHENTICATION

> 

*   If Category is set to AUTHENTICATION for a WhatsApp message template, you can add only one button to the WhatsApp message template and you must set the Type sub-parameter of the Buttons parameter to COPY_CODE or ONE_TAP. If Type is set to COPY_CODE, the Text sub-parameter of the Buttons parameter is required. If Type is set to ONE_TAP, the Text, SignatureHash, PackageName, and AutofillText sub-parameters of the Buttons parameter are required. The value of Text is displayed if the desired app is not installed on the device. The value of Text indicates that you must manually copy the verification code.

*   You can add only one button to a Viber message template, and you must set the Type sub-parameter of the Buttons parameter to URL.

This parameter is required.', example='PHONE_NUMBER'),
          url?: string(name='Url', description='The URL to which you are redirected when you click the URL button.', example='https://www.website.com/'),
          urlType?: string(name='UrlType', description='The URL type. Valid values:

*   **static**
*   **dynamic**', example='dynamic'),
        }
      ](name='Buttons', description='The buttons. Specify this parameter only if you set the Type sub-parameter of the Components parameter to **BUTTONS**.

>  ####

*   A marketing or utility WhatsApp message template can contain up to 10 buttons.

*   A WhatsApp message template can contain only one phone call button.

*   A WhatsApp message template can contain up to two URL buttons.

*   In a WhatsApp message template, a quick reply button cannot be used together with a phone call button or a URL button.'),
      caption?: string(name='Caption', description='The description of the media resource.

>  If the Type sub-parameter of the Components parameter is set to **HEADER** and the Format parameter is set to **IMAGE, DOCUMENT, or VIDEO**, you can specify this parameter.', example='This is a video'),
      cards?: [ 
        {
          cardComponents: [ 
            {
              buttons?: [ 
                {
                  phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='+8613800'),
                  text?: string(name='Text', description='The text of the button.', example='Call me'),
                  type: string(name='Type', description='The button type. Valid values:

*   **PHONE_NUMBER**: phone call button
*   **URL**: URL button
*   **QUICK_REPLY**: quick reply button

This parameter is required.', example='PHONE_NUMBER'),
                  url?: string(name='Url', description='The URL to which you are redirected when you click the URL button.', example='https://alibaba.com/xx'),
                  urlType?: string(name='UrlType', description='The URL type. Valid values:

*   **static**
*   **dynamic**', example='static'),
                }
              ](name='Buttons', description='The buttons. Specify this parameter only if you set the Type sub-parameter of the CardComponents parameter to BUTTONS. A carousel card can contain up to two buttons.'),
              format?: string(name='Format', description='The type of the media resource. This parameter is valid if the Type sub-parameter of the CardComponents parameter is set to HEADER. Valid values:

*   **IMAGE**
*   **VIDEO**', example='IMAGE'),
              text?: string(name='Text', description='The body content of the carousel card.', example='Who is the very powerful team'),
              type: string(name='Type', description='The component type. Valid values:

*   **BODY**
*   **HEADER**
*   **BUTTONS**

This parameter is required.', example='BODY'),
              url?: string(name='Url', description='The URL of the media resource.', example='https://alibaba.com/img.png'),
            }
          ](name='CardComponents', description='The components of the carousel card.

This parameter is required.'),
        }
      ](name='Cards', description='The carousel cards of the carousel template.'),
      codeExpirationMinutes?: int32(name='CodeExpirationMinutes', description='The validity period of the verification code in the WhatsApp authentication template. Unit: minutes. This parameter is valid only when Category is set to AUTHENTICATION and the Type sub-parameter of the Components parameter is set to FOOTER. The validity period of the verification code is displayed in the footer.', example='5', minimum=1, maximum=90),
      duration?: int32(name='Duration', description='The length of the video in the Viber message template. Unit: seconds. Valid values: 0 to 600.', example='120'),
      fileName?: string(name='FileName', description='The name of the document.

>  If the Type sub-parameter of the Components parameter is set to **HEADER** and the Format parameter is set to **DOCUMENT**, you can specify this parameter.', example='video name'),
      fileType?: string(name='FileType', description='The type of the document attached in the Viber message template.', example='docx'),
      format?: string(name='Format', description='The type of the media resource. Valid values:

*   **TEXT**
*   **IMAGE**
*   **DOCUMENT**
*   **VIDEO**', example='TEXT'),
      hasExpiration?: boolean(name='HasExpiration', description='Specifies whether the coupon code has an expiration time. Specify this parameter if the Type sub-parameter of the Components parameter is set to LIMITED_TIME_OFFER.', example='true'),
      text?: string(name='Text', description='The text of the message that you want to send.

>  If Category is set to AUTHENTICATION, do not specify the Text sub-parameter of the Components parameter.', example='hello chatapp'),
      thumbUrl?: string(name='ThumbUrl', description='The thumbnail URL of the video in the Viber message template.', example='https://cdn.multiplymall.mobiapp.cloud/cloudcode/yc-165407506207478-165511576113195/20220905/ec5b9737-1507-4208-bb27-8da3958da961.jpg?x-oss-process=image/resize,w_100'),
      type: string(name='Type', description='The component type. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**
*   **CAROUSEL**
*   **LIMITED_TIME_OFFER**

> 

*   In a WhatsApp message template, a **Body** component cannot exceed 1,024 characters in length. A **HEADER** or **FOOTER** component cannot exceed 60 characters in length.

*   **FOOTER**, **CAROUSEL**, and **LIMITED_TIME_OFFER** components are not supported in Viber message templates.

*   In Viber message templates, media resources such as images, videos, and documents are placed in the **HEADER** component. If a Viber message contains text and an image, the image is placed below the text in the message received on a device.

This parameter is required.', example='BODY'),
      url?: string(name='Url', description='The URL of the media resource.', example='https://img.tukuppt.com/png_preview/00/10/24/1GygxVK3F4.jpg'),
    }
  ](name='Components', description='The components of the message template.

>  If Category is set to AUTHENTICATION, the Type sub-parameter of the Components parameter cannot be set to HEADER. If the Type sub-parameter is set to BODY or FOOTER, you do not need to set the Text sub-parameter of the Components parameter because the value is automatically generated.

This parameter is required.', shrink='json', position='Body'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user within the ISV account.', example='28251486512358****', position='Body'),
  custWabaId?: string(name='CustWabaId', description='The WhatsApp Business account (WABA) ID of the user within the independent software vendor (ISV) account.

> CustWabaId is an obsolete parameter. Use CustSpaceId instead.', example='659216218162179', deprecated='true', position='Body'),
  example?: map[string]string(name='Example', description='The examples of variables that are used when you create the message template.', shrink='json', position='Body'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='ksiekdki39ksks93939', position='Body'),
  language: string(name='Language', description='The language that is used in the message template. For more information, see [Language codes](https://help.aliyun.com/document_detail/463420.html).

This parameter is required.', example='en', position='Body'),
  messageSendTtlSeconds?: int32(name='MessageSendTtlSeconds', description='Validity period of authentication template message sending in WhatsApp

>This attribute requires providing waba in advance to Alibaba operators to open the whitelist, otherwise it will result in template submission failure', example='120', minimum=30, maximum=2592000, position='Body'),
  templateCode?: string(name='TemplateCode', description='The message template code.', example='8472929283883', position='Body'),
  templateName?: string(name='TemplateName', description='Template name.', example='test_name', position='Body'),
  templateType?: string(name='TemplateType', description='The type of the message template.

*   **WHATSAPP**
*   **VIBER**
*   LINE: the Line message template. This type of message template will be released later.', example='WHATSAPP', position='Body'),
}

model ModifyChatappTemplateResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='8472929283883'),
    templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='NONE'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ModifyChatappTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyChatappTemplateResponseBody(name='body'),
}

/**
  * @description The name of the message template.
  * @param request  the request parameters of ModifyChatappTemplate  ModifyChatappTemplateRequest
  * @return ModifyChatappTemplateResponse
 */
async function modifyChatappTemplate(request: ModifyChatappTemplateRequest): ModifyChatappTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyChatappTemplate', 'POST', '/', 'json', true, 'form', request);
}

model ModifyChatappTemplatePropertiesRequest {
  allowSend?: boolean(name='AllowSend', example='true', position='Query'),
  categoryChangePaused?: boolean(name='CategoryChangePaused', example='false', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='cams-idk***', position='Query'),
  language: string(name='Language', description='This parameter is required.', example='zh_CN', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  templateCode: string(name='TemplateCode', description='This parameter is required.', example='929938***', position='Query'),
  templateType: string(name='TemplateType', description='This parameter is required.', example='WHATSAPP', position='Query'),
}

model ModifyChatappTemplatePropertiesResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='示例值'),
  message?: string(name='Message', example='示例值示例值'),
  model?: map[string]any(name='Model', example='true'),
  requestId?: string(name='RequestId', example='示例值示例值示例值'),
  success?: boolean(name='Success', example='false'),
}

model ModifyChatappTemplatePropertiesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyChatappTemplatePropertiesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ModifyChatappTemplateProperties  ModifyChatappTemplatePropertiesRequest
  * @return ModifyChatappTemplatePropertiesResponse
 */
async function modifyChatappTemplateProperties(request: ModifyChatappTemplatePropertiesRequest): ModifyChatappTemplatePropertiesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyChatappTemplateProperties', 'POST', '/', 'json', false, 'json', request);
}

model ModifyFlowRequest {
  categories: [ string ](name='Categories', description='This parameter is required.', shrink='json', position='Query'),
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值', position='Query'),
  flowId?: string(name='FlowId', example='示例值', position='Query'),
  flowName: string(name='FlowName', description='This parameter is required.', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  data?: {
    categories?: [ string ](name='Categories', description='The categories of the Flow.'),
    flowId?: string(name='FlowId', description='The Flow ID.', example='3939399****'),
    flowName?: string(name='FlowName', description='The Flow name.', example='flow-00203'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='1612C226-E271-4CFE-9F18-4066D******'),
}

model ModifyFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyFlowResponseBody(name='body'),
}

/**
  * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of ModifyFlow  ModifyFlowRequest
  * @return ModifyFlowResponse
 */
async function modifyFlow(request: ModifyFlowRequest): ModifyFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyFlow', 'POST', '/', 'json', false, 'json', request);
}

model ModifyPhoneBusinessProfileRequest {
  about?: string(name='About', description='The business information.', example='business profile', position='Query'),
  address?: string(name='Address', description='The address.', example='The phone number.', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849****', position='Query'),
  description?: string(name='Description', description='The description of the phone number.', example='test', position='Query'),
  email?: string(name='Email', description='The email address.', example='aa@aliyun.com', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The mobile phone number.

This parameter is required.', example='8613800001234', position='Query'),
  profilePictureUrl?: string(name='ProfilePictureUrl', description='The URL of the profile picture.', example='http://a.img', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  vertical?: string(name='Vertical', description='The industry.

>  Valid values: OTHER, AUTO, BEAUTY, APPAREL, EDU, ENTERTAIN, EVENT_PLAN, FINANCE, GROCERY, GOVT, HOTEL, HEALTH, NONPROFIT, PROF_SERVICES, RETAIL, TRAVEL, and RESTAURANT.', example='OTHER', position='Query'),
  websites?: [ string ](name='Websites', description='The URLs of the websites.', shrink='json', position='Query'),
}

model ModifyPhoneBusinessProfileResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The URL of the website.', example='OK'),
  message?: string(name='Message', description='The ID of the request.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The websites.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model ModifyPhoneBusinessProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ModifyPhoneBusinessProfileResponseBody(name='body'),
}

/**
  * @description ModifyPhoneBusinessProfile
  * @param request  the request parameters of ModifyPhoneBusinessProfile  ModifyPhoneBusinessProfileRequest
  * @return ModifyPhoneBusinessProfileResponse
 */
async function modifyPhoneBusinessProfile(request: ModifyPhoneBusinessProfileRequest): ModifyPhoneBusinessProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPhoneBusinessProfile', 'POST', '/', 'json', false, 'json', request);
}

model OfflineFlowVersionRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS', position='Query'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}', shrink='json', position='Query'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****', position='Query'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  remark?: string(name='Remark', description='Flow remarks', example='We don\\"t need this old version.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OfflineFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details; this field is only returned when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Status code.', example='示例值示例值'),
  message?: string(name='Message', description='Error message.', example='示例值示例值'),
  requestId?: string(name='RequestId', description='Request ID.', example='示例值示例值'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. true means success, false means failure.', example='true'),
}

model OfflineFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OfflineFlowVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OfflineFlowVersion  OfflineFlowVersionRequest
  * @return OfflineFlowVersionResponse
 */
async function offlineFlowVersion(request: OfflineFlowVersionRequest): OfflineFlowVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OfflineFlowVersion', 'POST', '/', 'json', false, 'json', request);
}

model OnlineFlowVersionRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS', position='Query'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}', shrink='json', position='Query'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****', position='Query'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  remark?: string(name='Remark', description='Remark', example='Let\\"s go online.', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model OnlineFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denial.', example='无'),
  code?: string(name='Code', description='Status code.', example='示例值'),
  message?: string(name='Message', description='Error message.', example='示例值示例值示例值'),
  requestId?: string(name='RequestId', description='Request ID.', example='示例值示例值'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. true means success, false means failure.', example='true'),
}

model OnlineFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OnlineFlowVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of OnlineFlowVersion  OnlineFlowVersionRequest
  * @return OnlineFlowVersionResponse
 */
async function onlineFlowVersion(request: OnlineFlowVersionRequest): OnlineFlowVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'OnlineFlowVersion', 'POST', '/', 'json', false, 'json', request);
}

model PublishFlowRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值示例值', position='Query'),
  flowId: string(name='FlowId', description='This parameter is required.', example='示例值示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model PublishFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='If OK is returned, the request was successful.', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model PublishFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PublishFlowResponseBody(name='body'),
}

/**
  * @description You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of PublishFlow  PublishFlowRequest
  * @return PublishFlowResponse
 */
async function publishFlow(request: PublishFlowRequest): PublishFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'PublishFlow', 'POST', '/', 'json', false, 'json', request);
}

model QueryChatappBindWabaRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493', position='Query'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='aksik93kdkkxmwol93939', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryChatappBindWabaResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    accountReviewStatus?: string(name='AccountReviewStatus', description='The review state of the WhatsApp Business account (WABA).

>  Valid values:

*   PENDING: The WABA is to be reviewed.

*   APPROVED: The WABA was approved.

*   REJECTED: The WABA was rejected.

*   DISABLED: The WABA was forbidden.', example='APPROVED'),
    authInternationalRateEligibility?: map[string]any(name='AuthInternationalRateEligibility', description='WABA related information.'),
    businessId?: string(name='BusinessId', description='The business ID.', example='19293988***'),
    businessName?: string(name='BusinessName', description='The business name.', example='Alibaba'),
    currency?: string(name='Currency', description='The currency.', example='USD'),
    id?: string(name='Id', description='The ID of the WhatsApp Business account.', example='20393988393993***'),
    marketingMessageLiteStatus?: string(name='MarketingMessageLiteStatus', description='The Marketing Messaging Lite status.', example='Y'),
    messageTemplateNamespace?: string(name='MessageTemplateNamespace', description='The namespace of the message template.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
    name?: string(name='Name', description='The name of the WhatsApp Business account.', example='Alibaba'),
    primaryBusinessLocation?: string(name='PrimaryBusinessLocation', description='The start time when the authentication-international rate applies.', example='"start_time":1721952000'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model QueryChatappBindWabaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryChatappBindWabaResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of QueryChatappBindWaba  QueryChatappBindWabaRequest
  * @return QueryChatappBindWabaResponse
 */
async function queryChatappBindWaba(request: QueryChatappBindWabaRequest): QueryChatappBindWabaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryChatappBindWaba', 'POST', '/', 'json', false, 'json', request);
}

model QueryChatappPhoneNumbersRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the RAM user within the ISV account.', example='293483938849493', position='Query'),
  isvCode?: string(name='IsvCode', description='The independent software vendor (ISV) verification code, which is used to verify whether the RAM user is authorized by the ISV account.', example='aksik93kdkkxmwol93939', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='The state of the phone number.', example='VERIFIED', position='Query'),
}

model QueryChatappPhoneNumbersResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The message returned.', example='SUCCESS'),
  phoneNumbers?: [ 
    {
      codeVerificationStatus?: string(name='CodeVerificationStatus', description='The verification status of the phone number.

Valid values:

*   REVOKED: The review application is revoked.
*   MORE_INFORMATION_REQUESTED: More information needs to be provided.
*   VERIFIED: The phone number passes the verification.
*   REJECTED: The phone number fails to pass the verification.', example='VERIFIED'),
      isOfficial?: string(name='IsOfficial', description='Indicates whether it is a WhatsApp Official Business Account (OBA).', example='N'),
      messagingLimitTier?: string(name='MessagingLimitTier', description='The number of phone numbers to which messages can be sent in a day.

Valid values:

*   TIER_100K: 100,000
*   TIER_UNLIMITED: unlimited
*   TIER_250: 250
*   TIER_1K: 1,000
*   TIER_50: 50
*   TIER_10K: 10,000', example='TIER_10'),
      nameStatus?: string(name='NameStatus', description='The review status of the name.', example='Approval'),
      newNameStatus?: string(name='NewNameStatus', description='The review status of the new display name of the enterprise.', example='Approval'),
      phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800000'),
      qualityRating?: string(name='QualityRating', description='The quality rating of the phone number.

Valid values:

*   RED: low
*   YELLOW: medium
*   UNKNOWN: unknown
*   GREEN: high', example='GREEN'),
      status?: string(name='Status', description='The state of the phone number.

Valid values:

*   MIGRATED
*   FLAGGED
*   DISCONNECTED
*   UNVERIFIED
*   BANNED
*   RATE_LIMITED
*   PENDING
*   CONNECTED
*   UNKNOWN
*   DELETED
*   RESTRICTED', example='CONNECTED'),
      statusCallbackUrl?: string(name='StatusCallbackUrl', description='The URL that receives the status reports.', example='https://ali.com/status'),
      statusQueue?: string(name='StatusQueue', description='The status report queue.', example='Alicom-Queue-****-ChatAppStatus'),
      upCallbackUrl?: string(name='UpCallbackUrl', description='The URL that receives the MO messages.', example='https://ali.com/inbound'),
      upQueue?: string(name='UpQueue', description='The mobile originated (MO) message queue.', example='Alicom-Queue-****-ChatAppInbound'),
      verifiedName?: string(name='VerifiedName', description='The display name of the enterprise to which the phone number belongs.', example='Alibaba'),
    }
  ](name='PhoneNumbers', description='The phone numbers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**: The request was successful.
*   **false**: The request failed.', example='true'),
}

model QueryChatappPhoneNumbersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryChatappPhoneNumbersResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of QueryChatappPhoneNumbers  QueryChatappPhoneNumbersRequest
  * @return QueryChatappPhoneNumbersResponse
 */
async function queryChatappPhoneNumbers(request: QueryChatappPhoneNumbersRequest): QueryChatappPhoneNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryChatappPhoneNumbers', 'POST', '/', 'json', false, 'json', request);
}

model QueryPhoneBusinessProfileRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.

This parameter is required.', example='2934839388494***', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The phone number.

This parameter is required.', example='8613800001234', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model QueryPhoneBusinessProfileResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    about?: string(name='About', description='Regarding.', example='business profile'),
    address?: string(name='Address', description='The address.', example='Changsha'),
    description?: string(name='Description', description='The description.', example='Description'),
    email?: string(name='Email', description='The email address.', example='aa@aliyun.com'),
    profilePictureUrl?: string(name='ProfilePictureUrl', description='The profile picture.', example='https://....img'),
    vertical?: string(name='Vertical', description='The industry.', example='Retail'),
    websites?: [ string ](name='Websites', description='The website.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model QueryPhoneBusinessProfileResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryPhoneBusinessProfileResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of QueryPhoneBusinessProfile  QueryPhoneBusinessProfileRequest
  * @return QueryPhoneBusinessProfileResponse
 */
async function queryPhoneBusinessProfile(request: QueryPhoneBusinessProfileRequest): QueryPhoneBusinessProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPhoneBusinessProfile', 'POST', '/', 'json', false, 'json', request);
}

model QueryWabaBusinessInfoRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  wabaId: string(name='WabaId', description='The ID of the WhatsApp Business Account (WABA).

This parameter is required.', example='293848822333', position='Query'),
}

model QueryWabaBusinessInfoResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  data?: {
    businessId?: string(name='BusinessId', description='The Business Manager ID.', example='192882828733'),
    businessName?: string(name='BusinessName', description='The Business Manager name.', example='Alibaba'),
    verificationStatus?: string(name='VerificationStatus', description='The verification status.', example='verified'),
    vertical?: string(name='Vertical', description='The industry.', example='Retail', deprecated='true'),
  }(name='Data', description='The business information about the WABA.'),
  message?: string(name='Message', description='The error message returned.', example='None.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='false'),
}

model QueryWabaBusinessInfoResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: QueryWabaBusinessInfoResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of QueryWabaBusinessInfo  QueryWabaBusinessInfoRequest
  * @return QueryWabaBusinessInfoResponse
 */
async function queryWabaBusinessInfo(request: QueryWabaBusinessInfoRequest): QueryWabaBusinessInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWabaBusinessInfo', 'POST', '/', 'json', false, 'json', request);
}

model ReadChatFlowRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS', position='Query'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}', shrink='json', position='Query'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReadChatFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Detailed reason for access denial.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  message?: string(name='Message', description='Error message.', example='示例值'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true for success, false for failure.', example='false'),
}

model ReadChatFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadChatFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadChatFlow  ReadChatFlowRequest
  * @return ReadChatFlowResponse
 */
async function readChatFlow(request: ReadChatFlowRequest): ReadChatFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadChatFlow', 'POST', '/', 'json', false, 'json', request);
}

model ReadChatFlowLogSettingRequest {
  flowCode?: string(name='FlowCode', description='Process code.', example='f4912c16943b4dfba44bd6fedacf****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReadChatFlowLogSettingResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  data?: map[string]any(name='Data', description='Returned data.', example='无'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model ReadChatFlowLogSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadChatFlowLogSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadChatFlowLogSetting  ReadChatFlowLogSettingRequest
  * @return ReadChatFlowLogSettingResponse
 */
async function readChatFlowLogSetting(request: ReadChatFlowLogSettingRequest): ReadChatFlowLogSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadChatFlowLogSetting', 'POST', '/', 'json', false, 'json', request);
}

model ReadFlowVersionRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS', position='Query'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}', shrink='json', position='Query'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****', position='Query'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='Flow version status.', example='DRAFT', position='Query'),
}

model ReadFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details; this field is only returned when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Status code.', example='示例值示例值示例值'),
  message?: string(name='Message', description='Error message.', example='示例值示例值'),
  requestId?: string(name='RequestId', description='Request ID.', example='示例值'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model ReadFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ReadFlowVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ReadFlowVersion  ReadFlowVersionRequest
  * @return ReadFlowVersionResponse
 */
async function readFlowVersion(request: ReadFlowVersionRequest): ReadFlowVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReadFlowVersion', 'POST', '/', 'json', false, 'json', request);
}

model SendChatappMassMessageRequest {
  channelType: string(name='ChannelType', description='This parameter is required.', example='示例值示例值', position='Query'),
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值', position='Query'),
  custWabaId?: string(name='CustWabaId', example='示例值示例值示例值', position='Query'),
  fallBackContent?: string(name='FallBackContent', example='示例值示例值示例值', position='Query'),
  fallBackDuration?: int32(name='FallBackDuration', position='Query'),
  fallBackId?: string(name='FallBackId', example='示例值示例值示例值', position='Query'),
  fallBackRule?: string(name='FallBackRule', example='示例值示例值示例值', position='Query'),
  from: string(name='From', description='This parameter is required.', example='示例值示例值', position='Query'),
  isvCode?: string(name='IsvCode', example='示例值示例值', position='Query'),
  label?: string(name='Label', example='示例值示例值', position='Query'),
  language: string(name='Language', description='This parameter is required.', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  senderList?: [ 
    {
      flowAction?: {
        flowActionData?: map[string]any(name='FlowActionData'),
        flowToken?: string(name='FlowToken', example='示例值'),
      }(name='FlowAction'),
      payload?: [ string ](name='Payload'),
      productAction?: {
        sections?: [ 
          {
            productItems?: [ 
              {
                productRetailerId?: string(name='ProductRetailerId', example='示例值示例值'),
              }
            ](name='ProductItems'),
            title?: string(name='Title', example='示例值'),
          }
        ](name='Sections'),
        thumbnailProductRetailerId?: string(name='ThumbnailProductRetailerId', example='示例值'),
      }(name='ProductAction'),
      templateParams?: map[string]string(name='TemplateParams'),
      to?: string(name='To', example='示例值示例值示例值'),
    }
  ](name='SenderList', shrink='json', position='Query'),
  tag?: string(name='Tag', example='示例值示例值', position='Query'),
  taskId?: string(name='TaskId', example='示例值示例值', position='Query'),
  templateCode?: string(name='TemplateCode', example='示例值示例值', position='Query'),
  templateName?: string(name='TemplateName', example='示例值示例值', position='Query'),
  ttl?: long(name='Ttl', example='46', position='Query'),
}

model SendChatappMassMessageResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  groupMessageId?: string(name='GroupMessageId', description='The ID of the message group.', example='890000010002****'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model SendChatappMassMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendChatappMassMessageResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * You can send messages to up to 1,000 phone numbers in a single request.
  * @param request  the request parameters of SendChatappMassMessage  SendChatappMassMessageRequest
  * @return SendChatappMassMessageResponse
 */
async function sendChatappMassMessage(request: SendChatappMassMessageRequest): SendChatappMassMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendChatappMassMessage', 'POST', '/', 'json', false, 'json', request);
}

model SendChatappMessageRequest {
  channelType: string(name='ChannelType', description='This parameter is required.', example='示例值示例值', position='Query'),
  content?: string(name='Content', description='The message content.

**Notes on WhatsApp messages:**

*   If you set **messageType** to **text**, you must specify **text** and must not specify **Caption**.
*   If you set **messageType** to **image**, you must specify **Link**.
*   If you set **messageType** to **video**, you must specify **Link**.
*   If you set **messageType** to **audio**, **Link** is required and **Caption** is invalid.
*   If you set **messageType** to **document**, **Link** and **FileName** are required and **Caption** is invalid.
*   If you set **messageType** to **interactive**, you must specify **type** and **action**.
*   If you set **messageType** to **contacts**, you must specify **name**.
*   If you set **messageType** to **location**, you must specify **longitude** and **latitude**.
*   If you set **messageType** to **sticker**, you must specify **Link**, and **Caption** and **FileName** are invalid.
*   If you set **messageType** to **reaction**, you must specify **messageId** and **emoji**.

**Notes on Viber messages:**

*   If you set **messageType** to **text**, you must specify **text**.
*   If you set **messageType** to **image**, you must specify **link**.
*   If you set **messageType** to **video**, you must specify **link**, **thumbnail**, **fileSize**, and **duration**.
*   If you set **messageType** to **document**, you must specify **link**, **fileName**, and **fileType**.
*   If you set **messageType** to **text_button**, you must specify **text**, **caption**, and **action**.
*   If you set **messageType** to **text_image_button**, you must specify **text**, **link**, **caption**, and **action**.
*   If you set **messageType** to **text_video**, you must specify **text**, **link**, **thumbnail**, **fileSize**, and **duration**.
*   If you set **messageType** to **text_video_button**, you must specify **text**, **link**, **thumbnail**, **fileSize**, **duration**, and **caption**. In addition, you must not specify **action**.', example='{\\"text\\": \\"hello whatsapp\\", \\"link\\": \\"\\", \\"caption\\": \\"\\", \\"fileName\\": \\"\\" }', position='Query'),
  contextMessageId?: string(name='ContextMessageId', example='示例值', position='Query'),
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值示例值', position='Query'),
  custWabaId?: string(name='CustWabaId', example='示例值示例值', position='Query'),
  fallBackContent?: string(name='FallBackContent', example='示例值', position='Query'),
  fallBackDuration?: int32(name='FallBackDuration', position='Query'),
  fallBackId?: string(name='FallBackId', example='示例值示例值示例值', position='Query'),
  fallBackRule?: string(name='FallBackRule', example='示例值示例值', position='Query'),
  flowAction?: {
    flowActionData?: map[string]any(name='FlowActionData'),
    flowToken?: string(name='FlowToken', example='示例值示例值'),
  }(name='FlowAction', shrink='json', position='Query'),
  from: string(name='From', description='This parameter is required.', example='示例值示例值', position='Query'),
  isvCode?: string(name='IsvCode', example='示例值', position='Query'),
  label?: string(name='Label', example='示例值', position='Query'),
  language?: string(name='Language', example='示例值示例值示例值', position='Query'),
  messageType?: string(name='MessageType', example='示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payload?: [ string ](name='Payload', description='The payload of the button.', example='payloadtext1,payloadtext2,payloadtext3', shrink='json', position='Query'),
  productAction?: {
    sections?: [ 
      {
        productItems?: [ 
          {
            productRetailerId?: string(name='ProductRetailerId', example='示例值示例值'),
          }
        ](name='ProductItems'),
        title?: string(name='Title', example='示例值'),
      }
    ](name='Sections'),
    thumbnailProductRetailerId?: string(name='ThumbnailProductRetailerId', example='示例值示例值示例值'),
  }(name='ProductAction', shrink='json', position='Query'),
  recipientType?: string(name='RecipientType', example='individual', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tag?: string(name='Tag', example='示例值示例值', position='Query'),
  taskId?: string(name='TaskId', example='示例值示例值', position='Query'),
  templateCode?: string(name='TemplateCode', example='示例值示例值示例值', position='Query'),
  templateName?: string(name='TemplateName', example='示例值示例值示例值', position='Query'),
  templateParams?: map[string]string(name='TemplateParams', shrink='json', position='Query'),
  to: string(name='To', description='This parameter is required.', example='示例值示例值示例值', position='Query'),
  trackingData?: string(name='TrackingData', example='示例值示例值', position='Query'),
  ttl?: int32(name='Ttl', position='Query'),
  type: string(name='Type', description='This parameter is required.', example='示例值', position='Query'),
}

model SendChatappMessageResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  messageId?: string(name='MessageId', description='The ID of the message that was sent.', example='61851ccb2f1365b16aee****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model SendChatappMessageResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SendChatappMessageResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 200 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of SendChatappMessage  SendChatappMessageRequest
  * @return SendChatappMessageResponse
 */
async function sendChatappMessage(request: SendChatappMessageRequest): SendChatappMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendChatappMessage', 'POST', '/', 'json', false, 'json', request);
}

model SubmitIsvCustomerTermsRequest {
  businessDesc: string(name='BusinessDesc', description='The business scenario.

This parameter is required.', example='Marketing products', position='Query'),
  contactMail: string(name='ContactMail', description='The enterprise mail.

This parameter is required.', example='partner@aliyun.com', position='Query'),
  countryId: string(name='CountryId', description='The country code.

>  For more information about country codes, see [Country codes](https://help.aliyun.com/document_detail/608210.html).

This parameter is required.', example='CN', position='Query'),
  custName: string(name='CustName', description='The enterprise name.

This parameter is required.', example='Aliyun', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493', position='Query'),
  isvTerms: string(name='IsvTerms', description='The ISV or Client agreement.

This parameter is required.', example='isvTerms.pdf', position='Query'),
  officeAddress: string(name='OfficeAddress', description='The enterprise address.

This parameter is required.', example='Hangzhou', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model SubmitIsvCustomerTermsResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='/'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='OK'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model SubmitIsvCustomerTermsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SubmitIsvCustomerTermsResponseBody(name='body'),
}

/**
  * @description *   You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * *   After you call the [GetChatappUploadAuthorization](~~GetChatappUploadAuthorization~~) operation to obtain the authentication information for uploading the file to Object Storage Service (OSS), you can use the authentication information to upload the file to the OSS server. To upload the file, you can call the SDK provided by OSS. When you upload the file, set the value of the key to the value of `Dir + "/" + file name`, such as C200293990209/isvTerms.pdf. The value of Dir is obtained from the [GetChatappUploadAuthorization](~~GetChatappUploadAuthorization~~) operation. The value of IsvTerms is obtained from the PutObject operation.
  * @param request  the request parameters of SubmitIsvCustomerTerms  SubmitIsvCustomerTermsRequest
  * @return SubmitIsvCustomerTermsResponse
 */
async function submitIsvCustomerTerms(request: SubmitIsvCustomerTermsRequest): SubmitIsvCustomerTermsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubmitIsvCustomerTerms', 'POST', '/', 'json', false, 'json', request);
}

model TriggerChatFlowRequest {
  claimTimeMillis?: long(name='ClaimTimeMillis', description='The declared occurrence time of the event, usually the time when the request was constructed, in milliseconds timestamp.', example='1731502129000', position='Query'),
  data?: map[string]any(name='Data', description='Input parameters in Key-Value format. The Key must match the input strategy configured at the start node of your flow.', example='{"my_biz_data_0": "hi", "my_biz_data_1": "1024"}', shrink='json', position='Query'),
  discardTimeMillis?: long(name='DiscardTimeMillis', description='The time when the event should be discarded, i.e., the expiration time. If this field is specified, the message will be discarded if it exceeds this time, in milliseconds timestamp.', example='1731502729000', position='Query'),
  flowCode: string(name='FlowCode', description='Flow code.

This parameter is required.', example='f4912c16943b4dfba44bd6fedacf8c70', position='Query'),
  outId?: string(name='OutId', description='External system transaction number, used to associate with external business system transactions. You can retrieve this parameter within the flow after triggering.', example='8d4acf7e-e360-eb83-6d74-fcf9c4538fda', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  uuid?: string(name='Uuid', description='Unique event ID used for idempotent triggers. Do not include any business semantics; you can retrieve this parameter within the flow after triggering.', example='c68622e6-5f0d-c8a4-af41-e949c2a7580e', position='Query'),
}

model TriggerChatFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denial', example='无'),
  code?: string(name='Code', description='Status code.', example='无'),
  data?: map[string]any(name='Data', description='Returned data.', example='{}'),
  message?: string(name='Message', description='Error description message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='无'),
  success?: boolean(name='Success', description='Whether the call was successful.
- **true**: Call succeeded.
- **false**: Call failed.', example='true'),
}

model TriggerChatFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TriggerChatFlowResponseBody(name='body'),
}

/**
  * @description After triggering an online flow, if your flow contains components that incur costs for cloud products, such as message sending or function calls, please ensure you fully understand the billing methods and prices of the related products before using this interface.
  * @param request  the request parameters of TriggerChatFlow  TriggerChatFlowRequest
  * @return TriggerChatFlowResponse
 */
async function triggerChatFlow(request: TriggerChatFlowRequest): TriggerChatFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TriggerChatFlow', 'POST', '/', 'json', false, 'json', request);
}

model UpdateAccountWebhookRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493**', position='Query'),
  httpFlag?: string(name='HttpFlag', description='Specifies whether to use HTTP callbacks to receive message receipts. Valid values:

*   Y: indicates that HTTP callbacks are used to receive receipts.
*   N: indicates that HTTP callbacks are not used to receive receipts.', example='Y', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  queueFlag?: string(name='QueueFlag', description='Specifies whether to use Message Service (MNS) queues to receive receipts. Valid values:

*   Y: indicates that MNS queues are used to receive receipts.
*   N: indicates that MNS queues are not used to receive receipts.', example='N', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  statusCallbackUrl?: string(name='StatusCallbackUrl', description='The callback URL to which status reports are sent by using HTTP callbacks.', example='http://www.aliyun.com', position='Query'),
}

model UpdateAccountWebhookResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='744c4b5c79c9432497a075bdfca3****'),
}

model UpdateAccountWebhookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateAccountWebhookResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of UpdateAccountWebhook  UpdateAccountWebhookRequest
  * @return UpdateAccountWebhookResponse
 */
async function updateAccountWebhook(request: UpdateAccountWebhookRequest): UpdateAccountWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAccountWebhook', 'POST', '/', 'json', false, 'json', request);
}

model UpdateChatFlowRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS', position='Query'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}', shrink='json', position='Query'),
  flowCode?: string(name='FlowCode', description='Process code.', example='f4912c16943b4dfba44bd6fedacf8c70', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  remark?: string(name='Remark', description='Process remarks', example='This is Customer Service WhatsApp Auto-Reply Flow', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  title?: string(name='Title', description='Process title', example='Customer Service WhatsApp Auto-Reply Flow', position='Query'),
}

model UpdateChatFlowResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denial; this field is only returned when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model UpdateChatFlowResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateChatFlowResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateChatFlow  UpdateChatFlowRequest
  * @return UpdateChatFlowResponse
 */
async function updateChatFlow(request: UpdateChatFlowRequest): UpdateChatFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateChatFlow', 'POST', '/', 'json', false, 'json', request);
}

model UpdateChatFlowLogSettingRequest {
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****', position='Query'),
  id?: long(name='Id', description='Setting ID.', example='100', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  status?: string(name='Status', description='Log enable status, enum values:
- ENABLED: Enabled, enables log writing
- DISABLED: Create or retain related resources, but do not enable log writing
- DELETED: Delete, and decide whether to delete related resources based on options', example='ENABLED', position='Query'),
}

model UpdateChatFlowLogSettingResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied details, this field is returned only when RAM verification fails.', example='无'),
  code?: string(name='Code', description='Status code.', example='OK'),
  data?: map[string]any(name='Data', description='Returned data object.', example='无'),
  message?: string(name='Message', description='Error message.', example='无'),
  requestId?: string(name='RequestId', description='Request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  success?: boolean(name='Success', description='Whether the operation was successful. Values: true: success; false: failure.', example='true'),
}

model UpdateChatFlowLogSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateChatFlowLogSettingResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateChatFlowLogSetting  UpdateChatFlowLogSettingRequest
  * @return UpdateChatFlowLogSettingResponse
 */
async function updateChatFlowLogSetting(request: UpdateChatFlowLogSettingRequest): UpdateChatFlowLogSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateChatFlowLogSetting', 'POST', '/', 'json', false, 'json', request);
}

model UpdateChatGroupRequest {
  businessNumber: string(name='BusinessNumber', description='This parameter is required.', example='8613800***', position='Query'),
  channelType?: string(name='ChannelType', example='WHATSAPP', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='This parameter is required.', example='cams-***', position='Query'),
  description?: string(name='Description', example='示例值示例值', position='Query'),
  groupId: string(name='GroupId', description='This parameter is required.', example='EA303***', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  profilePictureFile?: string(name='ProfilePictureFile', example='https://aliyun.com/img.jpg', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  subject?: string(name='Subject', example='示例值示例值', position='Query'),
}

model UpdateChatGroupResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='示例值'),
  requestId?: string(name='RequestId', example='EA399***'),
  result?: long(name='Result', example='1'),
  success?: boolean(name='Success', example='false'),
}

model UpdateChatGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateChatGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateChatGroup  UpdateChatGroupRequest
  * @return UpdateChatGroupResponse
 */
async function updateChatGroup(request: UpdateChatGroupRequest): UpdateChatGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateChatGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateCommerceSettingRequest {
  cartEnable: boolean(name='CartEnable', description='Specifies whether to display the shopping cart button. Valid values:

*   true
*   false

This parameter is required.', example='true', position='Query'),
  catalogVisible: boolean(name='CatalogVisible', description='Specifies whether to display the catalog button. Valid values:

*   true
*   false

This parameter is required.', example='false', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user within the independent software vendor (ISV) account.

This parameter is required.', example='293483938849493', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The phone number.

This parameter is required.', example='1380000****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateCommerceSettingResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   Other values indicate that the request failed. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model UpdateCommerceSettingResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateCommerceSettingResponseBody(name='body'),
}

/**
  * @description You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of UpdateCommerceSetting  UpdateCommerceSettingRequest
  * @return UpdateCommerceSettingResponse
 */
async function updateCommerceSetting(request: UpdateCommerceSettingRequest): UpdateCommerceSettingResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateCommerceSetting', 'POST', '/', 'json', false, 'json', request);
}

model UpdateConversationalAutomationRequest {
  commands?: [ 
    {
      commandDescription?: string(name='CommandDescription', description='The description of the command.', example='Command 1.'),
      commandName?: string(name='CommandName', description='The command name.', example='test'),
    }
  ](name='Commands', description='The commands.', shrink='json', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='The space ID of the RAM user within the independent software vendor (ISV) account or the instance ID of the customer of Alibaba Cloud.

This parameter is required.', example='2993****', position='Query'),
  enableWelcomeMessage?: boolean(name='EnableWelcomeMessage', description='Specifies whether to enable the welcoming message.', example='true', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The phone number of the enterprise.

This parameter is required.', example='86130000***', position='Query'),
  prompts?: [ string ](name='Prompts', description='The opening remarks.', shrink='json', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateConversationalAutomationResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='The details about the access denial.', example='None'),
  code?: string(name='Code', description='The response code.

*   The value OK indicates that the request was successful.
*   For more information about other response codes, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values:

*   **true**
*   **false**', example='true'),
}

model UpdateConversationalAutomationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateConversationalAutomationResponseBody(name='body'),
}

/**
  * @description ### [](#qps-)QPS limit
  * You can call this operation up to five times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * This operation will directly obtain data from Facebook, which sets an upper limit on the total number of calls for operations. We recommend that you take note of the limit when you call this operation.
  * @param request  the request parameters of UpdateConversationalAutomation  UpdateConversationalAutomationRequest
  * @return UpdateConversationalAutomationResponse
 */
async function updateConversationalAutomation(request: UpdateConversationalAutomationRequest): UpdateConversationalAutomationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateConversationalAutomation', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFlowJSONAssetRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值', position='Query'),
  filePath: string(name='FilePath', description='This parameter is required.', example='示例值示例值示例值', position='Query'),
  flowId: string(name='FlowId', description='This parameter is required.', example='示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateFlowJSONAssetResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The result returns OK as normal.', example='OK'),
  data?: {
    flowId?: string(name='FlowId', description='The Flow ID.', example='84848847****'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='Error description information.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model UpdateFlowJSONAssetResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFlowJSONAssetResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFlowJSONAsset  UpdateFlowJSONAssetRequest
  * @return UpdateFlowJSONAssetResponse
 */
async function updateFlowJSONAsset(request: UpdateFlowJSONAssetRequest): UpdateFlowJSONAssetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFlowJSONAsset', 'POST', '/', 'json', false, 'json', request);
}

model UpdateFlowVersionRequest {
  bizCode?: string(name='BizCode', description='Business tenant code, default is “ALICOM_OPAAS”.', example='ALICOM_OPAAS', position='Query'),
  bizExtend?: map[string]any(name='BizExtend', description='Business extension information, default is “{}”.', example='{}', shrink='json', position='Query'),
  flowCode?: string(name='FlowCode', description='Flow code.', example='f4912c16943b4dfba44bd6fedacf****', position='Query'),
  flowVersion?: string(name='FlowVersion', description='Flow version', example='1', position='Query'),
  flowViewModel?: string(name='FlowViewModel', description='DSL data of the flow version', example='{}', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  remark?: string(name='Remark', description='Version remarks', example='Fix Send WhatsApp Message Error', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdateFlowVersionResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Details of access denial.', example='无'),
  code?: string(name='Code', description='Status code.', example='示例值'),
  message?: string(name='Message', description='Error message.', example='示例值示例值示例值'),
  requestId?: string(name='RequestId', description='Request ID.', example='示例值示例值示例值'),
  response?: map[string]any(name='Response', description='Content of the returned data.', example='无'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful. Values: true for success, false for failure.', example='true'),
}

model UpdateFlowVersionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateFlowVersionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateFlowVersion  UpdateFlowVersionRequest
  * @return UpdateFlowVersionResponse
 */
async function updateFlowVersion(request: UpdateFlowVersionRequest): UpdateFlowVersionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateFlowVersion', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePhoneEncryptionPublicKeyRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值示例值', position='Query'),
  encryptionPublicKey: string(name='EncryptionPublicKey', description='This parameter is required.', example='示例值示例值示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', example='示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdatePhoneEncryptionPublicKeyResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The result returns OK as normal.', example='OK'),
  message?: string(name='Message', description='Error description information.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model UpdatePhoneEncryptionPublicKeyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePhoneEncryptionPublicKeyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePhoneEncryptionPublicKey  UpdatePhoneEncryptionPublicKeyRequest
  * @return UpdatePhoneEncryptionPublicKeyResponse
 */
async function updatePhoneEncryptionPublicKey(request: UpdatePhoneEncryptionPublicKeyRequest): UpdatePhoneEncryptionPublicKeyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePhoneEncryptionPublicKey', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePhoneMessageQrdlRequest {
  custSpaceId?: string(name='CustSpaceId', example='示例值', position='Query'),
  generateQrImage: string(name='GenerateQrImage', description='This parameter is required.', example='示例值', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='This parameter is required.', example='示例值示例值', position='Query'),
  prefilledMessage: string(name='PrefilledMessage', description='This parameter is required.', example='示例值示例值', position='Query'),
  qrdlCode: string(name='QrdlCode', description='This parameter is required.', example='示例值示例值示例值', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model UpdatePhoneMessageQrdlResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail'),
  code?: string(name='Code', description='The result returns OK as normal.', example='OK'),
  data?: {
    deepLinkUrl?: string(name='DeepLinkUrl', description='Deep link address.', example='https://wa.msg/'),
    generateQrImage?: string(name='GenerateQrImage', description='Generate image types.', example='PNG'),
    phoneNumber?: string(name='PhoneNumber', description='Number.', example='8613800'),
    prefilledMessage?: string(name='PrefilledMessage', description='Message content.', example='Hello'),
    qrImageUrl?: string(name='QrImageUrl', description='QR code address.', example='https://img.png'),
    qrdlCode?: string(name='QrdlCode', description='QR code encoding.', example='DEDEE998'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='Error description information.', example='None'),
  requestId?: string(name='RequestId', description='The request ID.', example='1612C226-E271-4CFE-9F18-4066D******'),
}

model UpdatePhoneMessageQrdlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePhoneMessageQrdlResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePhoneMessageQrdl  UpdatePhoneMessageQrdlRequest
  * @return UpdatePhoneMessageQrdlResponse
 */
async function updatePhoneMessageQrdl(request: UpdatePhoneMessageQrdlRequest): UpdatePhoneMessageQrdlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePhoneMessageQrdl', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePhoneWebhookRequest {
  custSpaceId: string(name='CustSpaceId', description='SpaceId for ISV sub clients.

This parameter is required.', example='293483938849493****', position='Query'),
  httpFlag?: string(name='HttpFlag', description='Whether to use HTTP to receive receipts. Value:
*   Y: Yes.
*   N: No.', example='Y', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='phone number.

This parameter is required.', example='8613800001234', position='Query'),
  queueFlag?: string(name='QueueFlag', description='Whether to use queue method to receive receipts. Value:
*   Y: Yes.
*   N: No.', example='N', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  statusCallbackUrl?: string(name='StatusCallbackUrl', description='HTTP status report interface callback address.', example='http://www.aliyun.com', position='Query'),
  upCallbackUrl?: string(name='UpCallbackUrl', description='HTTP upstream message interface callback address.', example='http://aliyun.com', position='Query'),
}

model UpdatePhoneWebhookResponseBody = {
  accessDeniedDetail?: string(name='AccessDeniedDetail', description='Access denied for detailed information.', example='None'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://help.aliyun.com/document_detail/196974.html).', example='OK'),
  message?: string(name='Message', description='Prompt message, there is a value when an exception is returned.', example='null'),
  requestId?: string(name='RequestId', description='The request ID.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model UpdatePhoneWebhookResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePhoneWebhookResponseBody(name='body'),
}

/**
  * @description The error message returned.
  * @param request  the request parameters of UpdatePhoneWebhook  UpdatePhoneWebhookRequest
  * @return UpdatePhoneWebhookResponse
 */
async function updatePhoneWebhook(request: UpdatePhoneWebhookRequest): UpdatePhoneWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePhoneWebhook', 'POST', '/', 'json', false, 'json', request);
}

