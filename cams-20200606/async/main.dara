/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cams';
  @version = '2020-06-06';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model BeeBotAssociateRequest {
  chatBotInstanceId: string(name='ChatBotInstanceId', description='The ID of chatbot instance.', example='1', position='Body'),
  custSpaceId?: string(name='CustSpaceId', description='ISV子客户的SpaceId', example='293483938849493', position='Body'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939', position='Body'),
  perspective?: [ string ](name='Perspective', description='The list of codes for answers from different perspectives.', shrink='json', position='Body'),
  recommendNum?: int32(name='RecommendNum', description='The number of recommended questions, which ranges from 1 to 10.', example='3', minimum=1, maximum=10, position='Body'),
  sessionId?: string(name='SessionId', description='The ID of the session, which identifies the session and context information of the visitor.', example='2334324234', position='Body'),
  utterance?: string(name='Utterance', description='The input of the visitor.', example='Hello', position='Body'),
}

model BeeBotAssociateResponseBody = {
  code?: string(name='Code', description='If OK is returned, the request is successful.', example='OK'),
  data?: {
    associate?: [ 
      {
        meta?: string(name='Meta', description='The additional information.', example='{}'),
        title?: string(name='Title', description='The title of the associated question.', example='test title'),
      }
    ](name='Associate', description='The list of associated recommendations.'),
    messageId?: string(name='MessageId', description='The ID of the response message.', example='1eb47d7a1706429081e90c83c62c2f00'),
    sessionId?: string(name='SessionId', description='The ID of the session.', example='93f11165a2a24289a6f869760e8cb3f3'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model BeeBotAssociateResponse = {
  headers: map[string]string(name='headers'),
  body: BeeBotAssociateResponseBody(name='body'),
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function beeBotAssociate(request: BeeBotAssociateRequest): BeeBotAssociateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BeeBotAssociate', 'POST', '/', 'json', true, 'form', request);
}

model BeeBotChatRequest {
  chatBotInstanceId: string(name='ChatBotInstanceId', description='The ID of chatbot instance.', example='1', position='Body'),
  custSpaceId?: string(name='CustSpaceId', description='ISV子客户的SpaceId', example='293483938849493', position='Body'),
  intentName?: string(name='IntentName', description='The name of the intent in the dialog flow. When this parameter is specified, the bot will conduct a Q\\&A according to the intent.', example='intent', position='Body'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939', position='Body'),
  knowledgeId?: string(name='KnowledgeId', description='The ID of the knowledge title in the knowledge base.', example='1', position='Body'),
  perspective?: [ string ](name='Perspective', description='The list of codes for answers from different perspectives.', shrink='json', position='Body'),
  senderId?: string(name='SenderId', description='The ID of the visitor, which is used to identify users in the current session.', example='861500000000', position='Body'),
  senderNick?: string(name='SenderNick', description='The nickname of the visitor in the current session.', example='nick', position='Body'),
  sessionId?: string(name='SessionId', description='The ID of the session, which identifies the session and context information of the visitor.', example='en', position='Body'),
  utterance: string(name='Utterance', description='The input of the visitor.', example='659216218162179', position='Body'),
  vendorParam?: map[string]any(name='VendorParam', description='The user-defined parameter set in JSON format. You can specify user-defined parameters for conversation engines.', shrink='json', position='Body'),
}

model BeeBotChatResponseBody = {
  code?: string(name='Code', description='If OK is returned, the request is successful.', example='OK'),
  data?: {
    messageId?: string(name='MessageId', description='The ID of the response message.', example='ab6be8af-cee4-40c3-9919-2ac7461d7d98'),
    messages?: [ 
      {
        answerSource?: string(name='AnswerSource', description='If the AnswerType parameter is set to Recommend, this parameter indicates the source of the recommended answer.', example='KNOWLEDGE'),
        answerType?: string(name='AnswerType', description='The type of the message.', example='Text'),
        knowledge?: {
          answerSource?: string(name='AnswerSource', description='The source of the answer.', example='KnowledgeBase'),
          category?: string(name='Category', description='The category of the knowledge.'),
          content?: string(name='Content', description='The content of the hit question.'),
          contentType?: string(name='ContentType', description='Indicates whether the answer is in plain text or rich text.', example='PLAIN_TEXT'),
          hitStatement?: string(name='HitStatement', description='The hit text.'),
          id?: string(name='Id', description='The ID of the hit problem in the knowledge base.', example='735898'),
          relatedKnowledges?: [ 
            {
              knowledgeId?: string(name='KnowledgeId', description='The ID of the related knowledge.', example='735899'),
              title?: string(name='Title', description='The title of the related knowledge.'),
            }
          ](name='RelatedKnowledges', description='The list of the related knowledge.'),
          summary?: string(name='Summary', description='The summary to the hit question.'),
          title?: string(name='Title', description='The title of the hit question.'),
        }(name='Knowledge', description='When the AnswerType parameter is set to Knowledge, this parameter contains the Knowledge object returned by the bot.'),
        recommends?: [ 
          {
            answerSource?: string(name='AnswerSource', description='The source of the recommended answer.', example='KNOWLEDGE'),
            knowledgeId?: string(name='KnowledgeId', description='The ID of the recommended knowledge.', example='4548'),
            title?: string(name='Title', description='The recommended content, which may be the entity in graph-based question answering, the standard knowledge in knowledge-based question answering, or the column value in table-based question answering.'),
          }
        ](name='Recommends', description='When the AnswerType parameter is set to Recommend, this parameter contains a list of recommends returned by the bot.'),
        text?: {
          answerSource?: string(name='AnswerSource', description='The source of the answer.', example='BotFramework'),
          content?: string(name='Content', description='The content of the text message.'),
          contentType?: string(name='ContentType', description='Indicates whether the answer is in plain text or rich text.', example='PLAIN_TEXT'),
          dialogName?: string(name='DialogName', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          ext?: map[string]any(name='Ext', description='The passthrough parameters are returned.'),
          externalFlags?: map[string]any(name='ExternalFlags', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          hitStatement?: string(name='HitStatement', description='The hit text.'),
          intentName?: string(name='IntentName', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          metaData?: string(name='MetaData', description='The metadata.'),
          nodeId?: string(name='NodeId', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.', example='1410-c7a72a78.__city'),
          nodeName?: string(name='NodeName', description='When the AnswerSource parameter is set to BotFramework, the value of this parameter is returned.'),
          slots?: [ 
            {
              hit?: boolean(name='Hit', description='Indicates whether the slot is hit.', example='false'),
              name?: string(name='Name', description='The name of the slot.'),
              origin?: string(name='Origin', description='The original value.'),
              value?: string(name='Value', description='The specific value.'),
            }
          ](name='Slots', description='The list of slots.'),
          userDefinedChatTitle?: string(name='UserDefinedChatTitle', description='The title of the chitchat.'),
        }(name='Text', description='When the AnswerType parameter is set to Text, this parameter contains the Text object returned by the bot.'),
      }
    ](name='Messages', description='The list of the message.'),
    sessionId?: string(name='SessionId', description='The ID of the session.', example='1234'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='none'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model BeeBotChatResponse = {
  headers: map[string]string(name='headers'),
  body: BeeBotChatResponseBody(name='body'),
}

/**
  * You can call this operation up to 100 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function beeBotChat(request: BeeBotChatRequest): BeeBotChatResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'BeeBotChat', 'POST', '/', 'json', true, 'form', request);
}

model ChatappBindWabaRequest {
  wabaId: string(name='WabaId', description='WabaId', example='2293938222343', position='Body'),
}

model ChatappBindWabaResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='C02029392939939'),
    wabaId?: string(name='WabaId', description='wabaId', example='2939828282'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model ChatappBindWabaResponse = {
  headers: map[string]string(name='headers'),
  body: ChatappBindWabaResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function chatappBindWaba(request: ChatappBindWabaRequest): ChatappBindWabaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappBindWaba', 'POST', '/', 'json', true, 'form', request);
}

model ChatappEmbedSignUpRequest {
  inputToken: string(name='InputToken', description='The InputToken returned by the embedded signup.', example='wlelkelwidilwloe-ewlwols0lwsllsld', position='Body'),
}

model ChatappEmbedSignUpResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
  wabas?: [ 
    {
      accountReviewStatus?: string(name='AccountReviewStatus', description='The audit status of the WhatsApp Business account.', example='VERIFIED'),
      currency?: string(name='Currency', description='The currency.', example='USD'),
      id?: string(name='Id', description='WabaId', example='2939933992'),
      messageTemplateNamespace?: string(name='MessageTemplateNamespace', description='The namespace of the message template.', example='alals-lsslls-slslsos-slsl'),
      name?: string(name='Name', description='Waba Name', example='Alibaba'),
    }
  ](name='Wabas', description='The list of WhatsApp Business accounts.'),
}

model ChatappEmbedSignUpResponse = {
  headers: map[string]string(name='headers'),
  body: ChatappEmbedSignUpResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function chatappEmbedSignUp(request: ChatappEmbedSignUpRequest): ChatappEmbedSignUpResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappEmbedSignUp', 'POST', '/', 'json', true, 'form', request);
}

model ChatappMigrationRegisterRequest {
  custSpaceId: string(name='CustSpaceId', description='ISV子客户的SpaceId', example='293483938849493', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='号码', example='86138000000', position='Query'),
}

model ChatappMigrationRegisterResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappMigrationRegisterResponse = {
  headers: map[string]string(name='headers'),
  body: ChatappMigrationRegisterResponseBody(name='body'),
}

async function chatappMigrationRegister(request: ChatappMigrationRegisterRequest): ChatappMigrationRegisterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappMigrationRegister', 'POST', '/', 'json', false, 'json', request);
}

model ChatappMigrationVerifiedRequest {
  custSpaceId: string(name='CustSpaceId', description='ISV子客户的SpaceId', example='293483938849493', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='号码', example='861380000000', position='Query'),
  verifyCode: string(name='VerifyCode', description='验证码', example='828798', position='Query'),
}

model ChatappMigrationVerifiedResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    id?: string(name='Id', description='号码ID', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', description='号码', example='8613800000000'),
  }(name='Data'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappMigrationVerifiedResponse = {
  headers: map[string]string(name='headers'),
  body: ChatappMigrationVerifiedResponseBody(name='body'),
}

async function chatappMigrationVerified(request: ChatappMigrationVerifiedRequest): ChatappMigrationVerifiedResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappMigrationVerified', 'POST', '/', 'json', false, 'json', request);
}

model ChatappPhoneNumberRegisterRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='939283893939', position='Body'),
  phoneNumber: string(name='PhoneNumber', description='The phone number.', example='8613800000000', position='Body'),
}

model ChatappPhoneNumberRegisterResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappPhoneNumberRegisterResponse = {
  headers: map[string]string(name='headers'),
  body: ChatappPhoneNumberRegisterResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function chatappPhoneNumberRegister(request: ChatappPhoneNumberRegisterRequest): ChatappPhoneNumberRegisterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappPhoneNumberRegister', 'POST', '/', 'json', true, 'form', request);
}

model ChatappSyncPhoneNumberRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493', position='Query'),
}

model ChatappSyncPhoneNumberResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='N/A'),
  phoneNumbers?: [ 
    {
      codeVerificationStatus?: string(name='CodeVerificationStatus', description='The verification status.', example='VERIFIED'),
      messagingLimitTier?: string(name='MessagingLimitTier', description='The quantity of phone numbers to which messages can be sent in a day.', example='TIER_10'),
      nameStatus?: string(name='NameStatus', description='The review status of the business name.', example='Approval'),
      newNameStatus?: string(name='NewNameStatus', description='The review status of the new business name.', example='Approval'),
      phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800000000'),
      qualityRating?: string(name='QualityRating', description='The quality of the phone number. Valid values: GREEN, YELLOW, and RED.', example='GREEN'),
      status?: string(name='Status', description='The status of the phone number.', example='PENDING'),
      statusCallbackUrl?: string(name='StatusCallbackUrl', description='The callback URL to which status reports are sent via HTTP callbacks.', example='https://www.alibaba.com/status'),
      statusQueue?: string(name='StatusQueue', description='The status report queue.', example='alicom-09399200-queue'),
      upCallbackUrl?: string(name='UpCallbackUrl', description='The callback URL to which MO messages are sent via HTTP callbacks.', example='https://www.alibaba.com/inbound'),
      upQueue?: string(name='UpQueue', description='The mobile originated (MO) message queue.', example='alicom-09399200-queue'),
      verifiedName?: string(name='VerifiedName', description='The name of the business to which the phone number belongs.', example='Alibaba'),
    }
  ](name='PhoneNumbers', description='The list of phone numbers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model ChatappSyncPhoneNumberResponse = {
  headers: map[string]string(name='headers'),
  body: ChatappSyncPhoneNumberResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function chatappSyncPhoneNumber(request: ChatappSyncPhoneNumberRequest): ChatappSyncPhoneNumberResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappSyncPhoneNumber', 'POST', '/', 'json', false, 'json', request);
}

model ChatappVerifyAndRegisterRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the ISV user with which the phone number is associated.', example='29389299388383', position='Body'),
  phoneNumber: string(name='PhoneNumber', description='The phone number that you want to use to send WhatsApp business messages to your customers.', example='86138000000', position='Body'),
  verifyCode: string(name='VerifyCode', description='The verification code.', example='223222', position='Body'),
}

model ChatappVerifyAndRegisterResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ChatappVerifyAndRegisterResponse = {
  headers: map[string]string(name='headers'),
  body: ChatappVerifyAndRegisterResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function chatappVerifyAndRegister(request: ChatappVerifyAndRegisterRequest): ChatappVerifyAndRegisterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChatappVerifyAndRegister', 'POST', '/', 'json', true, 'form', request);
}

model CreateChatappMigrationInitiateRequest {
  countryCode: string(name='CountryCode', description='The country code of the phone number.', example='86', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='The space ID of the ISV user to which the phone number is migrated.', example='293483938849493', position='Query'),
  mobileNumber: string(name='MobileNumber', description='The phone number without the country code.', example='13800000000', position='Query'),
}

model CreateChatappMigrationInitiateResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](https://www.alibabacloud.com/help/zh/cams/latest/api-error-codes).', example='OK'),
  data?: {
    id?: string(name='Id', description='The ID of the phone number.', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800000000'),
    status?: string(name='Status', description='The status of the phone number.', example='MIGRATING'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model CreateChatappMigrationInitiateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateChatappMigrationInitiateResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function createChatappMigrationInitiate(request: CreateChatappMigrationInitiateRequest): CreateChatappMigrationInitiateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateChatappMigrationInitiate', 'POST', '/', 'json', false, 'json', request);
}

model CreateChatappTemplateRequest {
  category: string(name='Category', description='The category of the message template. Valid values:

*   **ACCOUNT_UPDATE**: account update
*   **PAYMENT_UPDATE**: payment update
*   **PERSONAL_FINANCE\\_UPDATE**: personal finance update
*   **SHIPPING_UPDATE**: traffic update
*   **RESERVATION_UPDATE**: reservation update
*   **ISSUE_RESOLUTION**: issue resolution
*   **APPOINTMENT_UPDATE**: appointment update
*   **TRANSPORTATION_UPDATE**: logistics information update
*   **TICKET_UPDATE**: ticket update
*   **ALERT_UPDATE**: alert update
*   **AUTO_REPLY**: auto reply', example='ACCOUNT_UPDATE', position='Body'),
  components: [ 
    {
      buttons?: [ 
        {
          phoneNumber?: string(name='PhoneNumber', description='The mobile phone number. This parameter is valid only if the Type parameter is set to **PHONE_NUMBER**.', example='+861368897****'),
          text?: string(name='Text', description='The display name of the button.', example='Call Me'),
          type: string(name='Type', description='The type of the button. Valid values:

*   **PHONE_NUMBER**: a phone call button
*   **URL**: a URL button
*   **QUICK_REPLY**: a quick reply button

> *   A quick reply button cannot coexist with a phone call button or a URL button in a message template.
> *   You can add a combination of two URL buttons or a combination of a URL button and a phone call button to a message template.', example='PHONE_NUMBER'),
          url?: string(name='Url', description='The URL to be accessed when you click the URL button.', example='https://example.com'),
          urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**: a static URL
*   **dynamic**: a dynamic URL', example='static'),
        }
      ](name='Buttons', description='This parameter applies only to components of the **BUTTONS** type.'),
      caption?: string(name='Caption', description='The description of the file.', example='This is a video.'),
      fileName?: string(name='FileName', description='The name of the file.', example='Express video'),
      format?: string(name='Format', description='The format of the message.

*   **TEXT**: text
*   **IMGAGE**: image
*   **DOCUMENT**: document
*   **VIDEO**: video', example='TEXT'),
      text?: string(name='Text', description='The text of the message to be sent.', example='hello whatsapp'),
      type: string(name='Type', description='The type of the component. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**

> A component of the **BODY** type cannot exceed 1,024 characters in length. A component of the **HEADER** or **FOOTER** type cannot exceed 60 characters in length.', example='BODY'),
      url?: string(name='Url', description='The URL of the material.', example='https://image.developer.aliyundoc.com'),
    }
  ](name='Components', description='The components of the message template.', shrink='json', position='Body'),
  custSpaceId?: string(name='CustSpaceId', description='ISV子客户的SpaceId', example='293483938849493', position='Query'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true', position='Body'),
  example?: map[string]string(name='Example', description='The examples of variables that are used when you create the message template.', shrink='json', position='Body'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk', position='Body'),
  language: string(name='Language', description='The language that is used in the message template.', example='en', position='Body'),
  name: string(name='Name', description='The name of the message template.', example='hello_whatsapp', position='Body'),
  templateType: string(name='TemplateType', description='The type of the message template. Valid values:

*   **WHATSAPP**
*   VIBER (under development)
*   LINE (under development)', example='WHATSAPP', position='Body'),
}

model CreateChatappTemplateResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A code of OK indicates that the call is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='SMS_232907****'),
    templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
  }(name='Data', description='The data returned.', example='{"templateCode": "****4b5c79c9432497a075bdfca36bf5"，"templateName": "hello_whatsapp"}'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2D'),
}

model CreateChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreateChatappTemplateResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
 */
async function createChatappTemplate(request: CreateChatappTemplateRequest): CreateChatappTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateChatappTemplate', 'POST', '/', 'json', true, 'form', request);
}

model DeleteChatappTemplateRequest {
  custSpaceId?: string(name='CustSpaceId', description='ISV子客户的SpaceId', example='293483938849493', position='Query'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true', position='Query'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk', position='Query'),
  templateCode: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****', position='Query'),
}

model DeleteChatappTemplateResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A code of OK indicates that the call is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model DeleteChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteChatappTemplateResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
 */
async function deleteChatappTemplate(request: DeleteChatappTemplateRequest): DeleteChatappTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteChatappTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetChatappTemplateDetailRequest {
  custSpaceId?: string(name='CustSpaceId', description='ISV子客户的SpaceId', example='293483938849493', position='Query'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true', position='Query'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk', position='Query'),
  language: string(name='Language', description='The language that is used in the message template.', example='en', position='Query'),
  templateCode: string(name='TemplateCode', description='The code of the message template.', example='****4b5c79c9432497a075bdfca36bf5', position='Query'),
}

model GetChatappTemplateDetailResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A code of OK indicates that the call is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
    category?: string(name='Category', description='The category of the message template. Valid values:

*   **ACCOUNT_UPDATE**: account update
*   **PAYMENT_UPDATE**: payment update
*   **PERSONAL_FINANCE\\_UPDATE**: personal finance update
*   **SHIPPING_UPDATE**: traffic update
*   **RESERVATION_UPDATE**: reservation update
*   **ISSUE_RESOLUTION**: issue resolution
*   **APPOINTMENT_UPDATE**: appointment update
*   **TRANSPORTATION_UPDATE**: logistics information update
*   **TICKET_UPDATE**: ticket update
*   **ALERT_UPDATE**: alert update
*   **AUTO_REPLY**: auto reply', example='ACCOUNT_UPDATE'),
    components?: [ 
      {
        buttons?: [ 
          {
            phoneNumber?: string(name='PhoneNumber', description='The mobile phone number. This parameter is valid only if the Type parameter is set to **PHONE_NUMBER**.', example='861398745****'),
            text?: string(name='Text', description='The display name of the button.', example='Call'),
            type?: string(name='Type', description='The type of the button. Valid values:

*   **PHONE_NUMBER**: a phone call button
*   **URL**: a URL button
*   **QUICK_REPLY**: a quick reply button

**

**Note**

*   A quick reply button cannot coexist with a phone call button or a URL button in a message template.

*   You can add a combination of two URL buttons or a combination of a URL button and a phone call button to a message template.', example='PHONE_NUMBER'),
            url?: string(name='Url', description='The URL to be accessed when you click the URL button.', example='https://example.com'),
            urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**: a static URL
*   **dynamic**: a dynamic URL', example='static'),
          }
        ](name='Buttons', description='This parameter applies only to components of the **BUTTONS** type. This parameter is passed in by converting its original JSON structure into a string.'),
        caption?: string(name='Caption', description='The description of the file.', example='The new file has been uploaded.'),
        fileName?: string(name='FileName', description='The name of the file.', example='Express file'),
        format?: string(name='Format', description='The format.', example='TEXT'),
        text?: string(name='Text', description='The text of the message to be sent.', example='Hello'),
        type?: string(name='Type', description='The type of the component. Valid values:

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**

**

**Note** A component of the **BODY** type cannot exceed 1,024 characters in length. A component of the **HEADER** or **FOOTER** type cannot exceed 60 characters in length.', example='BODY'),
        url?: string(name='Url', description='The URL of the material.', example='https://image.developer.aliyundoc.com'),
      }
    ](name='Components', description='The components of the message template.'),
    example?: map[string]string(name='Example', description='The examples of variables.'),
    language?: string(name='Language', description='The language that is used in the message template.', example='en'),
    name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp'),
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
  }(name='Data', description='The data returned.', example='{ 		"category": "ACCOUNT_UPDATE", 		"name": "account_notice", 		"language": "en_US", 		"templateCode": "744c4b5c79c9432497a075bdfca3****", 		"auditStatus": "APPROVED", 		"components": "[{\\"type\\":\\"BODY\\",\\"text\\":\\"body_text$(textVariable)\\"},{\\"type\\":\\"HEADER\\",\\"formate\\":\\"IMAGE\\",\\"url\\":\\"$(linkVariable)\\"},{\\"type\\":\\"FOOTER\\",\\"text\\":\\"footer-text\\"},{\\"type\\":\\"BUTTONS\\",\\"buttons\\":[{\\"type\\":\\"PHONE_NUMBER\\",\\"text\\":\\"phone-button-text\\",\\"phone_number\\":\\"+861388888****\\"},{\\"type\\":\\"URL\\",\\"text\\":\\"url-button-text\\",\\"url\\":\\"https://www.website.com/\\"}]}]", 		"example": "{\\"textVariable\\": \\"text\\", \\"linkVariable\\": \\"link\\"}" 	}'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='744c4b5c79c9432497a075bdfca3****'),
}

model GetChatappTemplateDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetChatappTemplateDetailResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
 */
async function getChatappTemplateDetail(request: GetChatappTemplateDetailRequest): GetChatappTemplateDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChatappTemplateDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetChatappVerifyCodeRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='229393838', position='Body'),
  locale: string(name='Locale', description='The language.', example='zh_CN', position='Body'),
  method: string(name='Method', description='The type of the verification code. Valid values: SMS and VOICE.', example='SMS', position='Body'),
  phoneNumber: string(name='PhoneNumber', description='The phone number.', example='861380000', position='Body'),
}

model GetChatappVerifyCodeResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1612C226-E271-4CFE-9F18-4066D550F91B'),
}

model GetChatappVerifyCodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetChatappVerifyCodeResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function getChatappVerifyCode(request: GetChatappVerifyCodeRequest): GetChatappVerifyCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetChatappVerifyCode', 'POST', '/', 'json', true, 'form', request);
}

model GetMigrationVerifyCodeRequest {
  custSpaceId: string(name='CustSpaceId', description='ISV子客户的SpaceId', example='293483938849493', position='Query'),
  locale: string(name='Locale', description='语言', example='zh_CN', position='Query'),
  method: string(name='Method', description='验证码方式（sms/voice)', example='sms', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='号码', example='8613800000', position='Query'),
}

model GetMigrationVerifyCodeResponseBody = {
  code?: string(name='Code', example='OK'),
  data?: {
    id?: string(name='Id', description='号码ID', example='82828893332'),
    phoneNumber?: string(name='PhoneNumber', description='号码', example='8613800000000'),
  }(name='Data'),
  message?: string(name='Message', example='None'),
  requestId?: string(name='RequestId', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model GetMigrationVerifyCodeResponse = {
  headers: map[string]string(name='headers'),
  body: GetMigrationVerifyCodeResponseBody(name='body'),
}

async function getMigrationVerifyCode(request: GetMigrationVerifyCodeRequest): GetMigrationVerifyCodeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetMigrationVerifyCode', 'POST', '/', 'json', false, 'json', request);
}

model GetPhoneNumberVerificationStatusRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='229393838', position='Body'),
  phoneNumber: string(name='PhoneNumber', description='The phone number.', example='861380000', position='Body'),
}

model GetPhoneNumberVerificationStatusResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    codeVerificationStatus?: string(name='CodeVerificationStatus', description='The verification status of the phone number.', example='VERIFIED'),
    id?: string(name='Id', description='The ID of the phone number.', example='2224342624'),
    phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='861380000'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='N/A'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2D'),
}

model GetPhoneNumberVerificationStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetPhoneNumberVerificationStatusResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function getPhoneNumberVerificationStatus(request: GetPhoneNumberVerificationStatusRequest): GetPhoneNumberVerificationStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPhoneNumberVerificationStatus', 'POST', '/', 'json', true, 'form', request);
}

model IsvGetAppIdRequest {
  type: string(name='Type', description='The type of the application. Set the value to WHATSAPP.', example='WHATSAPP', position='Body'),
}

model IsvGetAppIdResponseBody = {
  appId?: string(name='AppId', description='The message ID.', example='23hr3v'),
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='null'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='744c4b5c79c9432497a075bdfca3****'),
}

model IsvGetAppIdResponse = {
  headers: map[string]string(name='headers'),
  body: IsvGetAppIdResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function isvGetAppId(request: IsvGetAppIdRequest): IsvGetAppIdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'IsvGetAppId', 'POST', '/', 'json', true, 'form', request);
}

model ListChatappTemplateRequest {
  auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass', position='Query'),
  custSpaceId?: string(name='CustSpaceId', description='ISV子客户的SpaceId', example='293483938849493', position='Query'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true', position='Query'),
  isvCode?: string(name='IsvCode', description='Assigned by ISV for RAM user authentication and authorization.', example='skdi3kksloslikdkkdk', position='Query'),
  language?: string(name='Language', description='The language that is used in the message template.', example='en', position='Query'),
  name?: string(name='Name', description='The name of the message template.', example='hello_whatsapp', position='Query'),
  page?: {
    index: int32(name='Index', description='The number of the page to return. Default value: 1.', example='1'),
    size: int32(name='Size', description='The number of message templates to return on each page. Default value: 10.', example='10'),
  }(name='Page', description='The paging settings.', example='"page": "{\\"index\\": 1,\\"size\\": 20}', shrink='json', position='Query'),
}

model ListChatappTemplateResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A code of OK indicates that the call is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  listTemplate?: [ 
    {
      auditStatus?: string(name='AuditStatus', description='The review status of the message template. Valid values:

*   **pass**: The message template is approved.
*   **fail**: The message template is rejected.
*   **auditing**: The message template is being reviewed.
*   **unaudit**: The review is suspended.', example='pass'),
      category?: string(name='Category', description='The category of the message template. Valid values:

*   **ACCOUNT_UPDATE**: account update
*   **PAYMENT_UPDATE**: payment update
*   **PERSONAL_FINANCE\\_UPDATE**: personal finance update
*   **SHIPPING_UPDATE**: traffic update
*   **RESERVATION_UPDATE**: reservation update
*   **ISSUE_RESOLUTION**: issue resolution
*   **APPOINTMENT_UPDATE**: appointment update
*   **TRANSPORTATION_UPDATE**: logistics information update
*   **TICKET_UPDATE**: ticket update
*   **ALERT_UPDATE**: alert update
*   **AUTO_REPLY**: auto reply', example='ACCOUNT_UPDATE'),
      language?: string(name='Language', description='The language that is used in the message template.', example='en'),
      templateCode?: string(name='TemplateCode', description='The code of the message template.', example='744c4b5c79c9432497a075bdfca3****'),
      templateName?: string(name='TemplateName', description='The name of the message template.', example='hello_whatsapp'),
    }
  ](name='ListTemplate', description='The message templates.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ListChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ListChatappTemplateResponseBody(name='body'),
}

/**
  * ### QPS limit
  * You can call this operation up to 5 times per second per account. Requests that exceed this limit are dropped and you will experience service interruptions. We recommend that you take note of this limit when you call this operation.
  *
 */
async function listChatappTemplate(request: ListChatappTemplateRequest): ListChatappTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListChatappTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ModifyChatappTemplateRequest {
  components: [ 
    {
      buttons?: [ 
        {
          phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='+8613888887889'),
          text?: string(name='Text', description='The text of the message to be sent.', example='phone-button-text'),
          type: string(name='Type', description='The type of the button.

*   **PHONE_NUMBER**: the phone call button
*   **URL**: the URL button
*   **QUICK_REPLY**: the quick reply button', example='PHONE_NUMBER'),
          url?: string(name='Url', description='The URL to be visited after clicking the button.', example='https://www.website.com/'),
          urlType?: string(name='UrlType', description='The type of the URL. Valid values:

*   **static**: the static URL
*   **dynamic**: the dynamic URL', example='dynamic'),
        }
      ](name='Buttons', description='The list of buttons, which applies only to the **BUTTONS** component.'),
      caption?: string(name='Caption', description='The description.

>  When the Type parameter is set to **HEADER** and the Format parameter is set to **IMAGE/DOCUMENT/VIDEO**, you can specify the description.', example='This is a video.'),
      fileName?: string(name='FileName', description='The name of the file.

> : When the Type parameter is set to **HEADER** and the Format parameter is set to **DOCUMENT**, you can specify a name of the file.', example='Video'),
      format?: string(name='Format', description='The type of the media resource.

*   **TEXT**: text
*   **IMAGE**: image
*   **DOCUMENT**: document
*   **VIDEO**: video', example='TEXT'),
      text?: string(name='Text', description='The text of the message to be sent.', example='hello chatapp'),
      type: string(name='Type', description='The type of the component.

*   **BODY**
*   **HEADER**
*   **FOOTER**
*   **BUTTONS**', example='BODY'),
      url?: string(name='Url', description='The URL of the material.', example='"https://img.tukuppt.com/png_preview/00/10/24/1GygxVK3F4.jpg'),
    }
  ](name='Components', description='The list of components of the message template.', shrink='json', position='Body'),
  custSpaceId?: string(name='CustSpaceId', description='Isv customer space id', example='293483938849493', position='Body'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatApp Business account of the ISV customer.', example='659216218162179', deprecated='true', position='Body'),
  example?: map[string]string(name='Example', description='The examples of variables that are used when you create the message template.', shrink='json', position='Body'),
  isvCode?: string(name='IsvCode', description='ISV verification code, which is used to verify whether the sub-account is authorized by ISV.', example='ksiekdki39ksks93939', position='Body'),
  language: string(name='Language', description='The language.', example='en', position='Body'),
  templateCode: string(name='TemplateCode', description='The code of the message template.', example='8472929283883', position='Body'),
}

model ModifyChatappTemplateResponseBody = {
  code?: string(name='Code', description='The HTTP status code.

*   If OK is returned, the request is successful.
*   Other codes indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    templateCode?: string(name='TemplateCode', description='The code of the message template.', example='8472929283883'),
    templateName?: string(name='TemplateName', description='The name of the template.', example='hello_whatsapp'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model ModifyChatappTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyChatappTemplateResponseBody(name='body'),
}

async function modifyChatappTemplate(request: ModifyChatappTemplateRequest): ModifyChatappTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyChatappTemplate', 'POST', '/', 'json', true, 'form', request);
}

model ModifyPhoneBusinessProfileRequest {
  address?: string(name='Address', description='The address.', example='Address', position='Query'),
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493', position='Query'),
  description?: string(name='Description', description='The description.', example='Description', position='Query'),
  email?: string(name='Email', description='The email address.', example='aa@aliyun.com', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The phone number.', example='Phone number', position='Query'),
  profilePictureUrl?: string(name='ProfilePictureUrl', description='The URL of the profile picture.', example='http://a.img', position='Query'),
  vertical?: string(name='Vertical', description='The industry.', example='Retail', position='Query'),
  websites?: [ string ](name='Websites', description='The websites.', shrink='json', position='Query'),
}

model ModifyPhoneBusinessProfileResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model ModifyPhoneBusinessProfileResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyPhoneBusinessProfileResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function modifyPhoneBusinessProfile(request: ModifyPhoneBusinessProfileRequest): ModifyPhoneBusinessProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyPhoneBusinessProfile', 'POST', '/', 'json', false, 'json', request);
}

model QueryChatappBindWabaRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493', position='Query'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by ISV.', example='aksik93kdkkxmwol93939', position='Query'),
}

model QueryChatappBindWabaResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    accountReviewStatus?: string(name='AccountReviewStatus', description='The audit status of the WhatApp Business account.', example='APPROVED'),
    currency?: string(name='Currency', description='Currency', example='USD'),
    id?: string(name='Id', description='WabaID', example='20393988393993***'),
    messageTemplateNamespace?: string(name='MessageTemplateNamespace', description='The namespace of the message template.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
    name?: string(name='Name', description='The name of the WhatApp Business account.', example='Alibaba'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model QueryChatappBindWabaResponse = {
  headers: map[string]string(name='headers'),
  body: QueryChatappBindWabaResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function queryChatappBindWaba(request: QueryChatappBindWabaRequest): QueryChatappBindWabaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryChatappBindWaba', 'POST', '/', 'json', false, 'json', request);
}

model QueryChatappPhoneNumbersRequest {
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493', position='Query'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by ISV.', example='aksik93kdkkxmwol93939', position='Query'),
}

model QueryChatappPhoneNumbersResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The message returned.', example='SUCCESS'),
  phoneNumbers?: [ 
    {
      codeVerificationStatus?: string(name='CodeVerificationStatus', description='号码校验状态。', example='VERIFIED'),
      messagingLimitTier?: string(name='MessagingLimitTier', description='号码发送量。', example='TIER_10'),
      nameStatus?: string(name='NameStatus', description='名称状态。', example='Approval'),
      newNameStatus?: string(name='NewNameStatus', description='新名称审核状态。', example='Approval'),
      phoneNumber?: string(name='PhoneNumber', description='The phone number.', example='8613800000'),
      qualityRating?: string(name='QualityRating', description='The quality rating of the phone number. Valid values: GREEN, YELLOW, RED, and UNKNOWN.', example='GREEN'),
      status?: string(name='Status', description='The status of the phone number. Valid values: PENDING, DELETED, MIGRATED, BANNED, RESTRICTED, RATE_LIMITED, FLAGGED, CONNECTED, DISCONNECTED, UNKNOWN, and UNVERIFIED.', example='CONNECTED'),
      statusCallbackUrl?: string(name='StatusCallbackUrl', description='The status report notification URL.', example='https://ali.com/status'),
      statusQueue?: string(name='StatusQueue', description='The status report notification queue.', example='Alicom-Queue-****-ChatAppStatus'),
      upCallbackUrl?: string(name='UpCallbackUrl', description='The MO message notification URL.', example='https://ali.com/inbound'),
      upQueue?: string(name='UpQueue', description='The mobile originated (MO) message notification queue.', example='Alicom-Queue-****-ChatAppInbound'),
      verifiedName?: string(name='VerifiedName', description='The name of the company to which the phone number is associated with.', example='Alibaba'),
    }
  ](name='PhoneNumbers', description='The list of phone numbers.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model QueryChatappPhoneNumbersResponse = {
  headers: map[string]string(name='headers'),
  body: QueryChatappPhoneNumbersResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of the calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function queryChatappPhoneNumbers(request: QueryChatappPhoneNumbersRequest): QueryChatappPhoneNumbersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryChatappPhoneNumbers', 'POST', '/', 'json', false, 'json', request);
}

model QueryPhoneBusinessProfileRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The phone number.', example='861380000000', position='Query'),
}

model QueryPhoneBusinessProfileResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    address?: string(name='Address', description='The address.', example='Changsha'),
    description?: string(name='Description', description='The description.', example='Description'),
    email?: string(name='Email', description='The email address.', example='aa@aliyun.com'),
    profilePictureUrl?: string(name='ProfilePictureUrl', description='The URL of the profile picture.', example='https://....img'),
    vertical?: string(name='Vertical', description='The industry.', example='Retail'),
    websites?: [ string ](name='Websites', description='The websites.'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model QueryPhoneBusinessProfileResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPhoneBusinessProfileResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function queryPhoneBusinessProfile(request: QueryPhoneBusinessProfileRequest): QueryPhoneBusinessProfileResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPhoneBusinessProfile', 'POST', '/', 'json', false, 'json', request);
}

model QueryWabaBusinessInfoRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493', position='Query'),
  wabaId: string(name='WabaId', description='wabaId', example='293848822333', position='Query'),
}

model QueryWabaBusinessInfoResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  data?: {
    businessId?: string(name='BusinessId', description='The ID of the business platform.', example='192882828733'),
    businessName?: string(name='BusinessName', description='The name of the business platform.', example='Alibaba'),
    verificationStatus?: string(name='VerificationStatus', description='The verification status.', example='verified'),
    vertical?: string(name='Vertical', description='The industry.', example='Retail'),
  }(name='Data', description='The business information about the WhatsApp Business account.'),
  message?: string(name='Message', description='The error message returned.', example='None'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model QueryWabaBusinessInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryWabaBusinessInfoResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function queryWabaBusinessInfo(request: QueryWabaBusinessInfoRequest): QueryWabaBusinessInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryWabaBusinessInfo', 'POST', '/', 'json', false, 'json', request);
}

model SendChatappMassMessageRequest {
  channelType: string(name='ChannelType', description='The channel type. Valid values: whatsapp, viber, and line.', example='whatsapp', position='Body'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='28251486512358****', position='Body'),
  custWabaId?: string(name='CustWabaId', description='The ID of the WhatApp Business account of the ISV account.', example='65921621816****', deprecated='true', position='Body'),
  fallBackContent?: string(name='FallBackContent', description='The fallback content.', example='Fallback message', position='Body'),
  fallBackId?: string(name='FallBackId', description='The ID of the fallback strategy.', example='S00001', position='Body'),
  from: string(name='From', description='The message sender.', example='861387777****', position='Body'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk', position='Body'),
  label?: string(name='Label', description='The message type when the ChannelType parameter is set to viber. Valid values: pormotion and transition.', example='promotion', position='Body'),
  language: string(name='Language', description='The language. For more information about language codes, see [Language codes](~~463420~~).', example='en', position='Body'),
  senderList: [ 
    {
      payload?: [ string ](name='Payload', description='payload'),
      templateParams?: map[string]string(name='TemplateParams', description='The parameters of the message template.'),
      to: string(name='To', description='The phone number that receives the message.', example='861388988****'),
    }
  ](name='SenderList', description='The list of phone numbers that receive the message.', shrink='json', position='Body'),
  tag?: string(name='Tag', description='The tag information when the ChannelType parameter is set to viber.', example='tag', position='Body'),
  taskId?: string(name='TaskId', description='The task ID.', example='100000001', position='Body'),
  templateCode: string(name='TemplateCode', description='The encoding of the message template.', example='744c4b5c79c9432497a075bdfca36bf5', position='Body'),
  ttl?: long(name='Ttl', description='The timeout period for sending messages when the ChannelType parameter is set to viber. Valid values: 30 to 1209600, in seconds.', example='50', position='Body'),
}

model SendChatappMassMessageResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  groupMessageId?: string(name='GroupMessageId', description='The ID of the group of messages.', example='890000010002****'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model SendChatappMassMessageResponse = {
  headers: map[string]string(name='headers'),
  body: SendChatappMassMessageResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  * You can send messages to up to 1,000 phone numbers in a single request.
  *
 */
async function sendChatappMassMessage(request: SendChatappMassMessageRequest): SendChatappMassMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendChatappMassMessage', 'POST', '/', 'json', true, 'form', request);
}

model SendChatappMessageRequest {
  channelType: string(name='ChannelType', description='The type of the message channel. Valid values:

*   **whatsapp**
*   viber, which is under development
*   line, which is under development', example='whatsapp', position='Body'),
  content?: string(name='Content', description='The content of the message.

*   When you set the **MessageType** parameter to **text**, the **text** parameter is required and the **caption** parameter cannot be specified.
*   When you set the **MessageType** parameter to **image**, the **link** parameter is required.
*   When you set the **MessageType** parameter to **video**, the **link** parameter is required.
*   When you set the **MessageType** parameter to **audio**, the **link** parameter is required and **caption** parameter is invalid.
*   When you set the **MessageType** parameter to **document**, the **link** and **fileName** parameters are required and **caption** parameter is invalid.
*   When you set the **MessageType** parameter to **interactive**, the **type** and **action** parameters are required.
*   When you set the **MessageType** parameter to **contacts**, the **name** parameter is required.
*   When you set the **MessageType** parameter to **location**, the **longitude** and **latitude** parameters are required.
*   When you set the **MessageType** parameter to **sticker**, the **link** parameter is required, and the **caption** and **fileName** parameters are invalid.
*   When you set the **MessageType** parameter to **reaction**, the **messageId** and **emoji** parameters are required.', example='{\\"text\\": \\"hello whatsapp\\", \\"link\\": \\"\\", \\"caption\\": \\"\\", \\"fileName\\": \\"\\" }', position='Query'),
  contextMessageId?: string(name='ContextMessageId', description='The ID of the reply message.', example='61851ccb2f1365b16aee****', position='Body'),
  custSpaceId?: string(name='CustSpaceId', description='The space ID of the user.', example='28251486512358****', position='Body'),
  custWabaId?: string(name='CustWabaId', description='The unique identifier of the WhatsApp account that you register.', example='65921621816****', deprecated='true', position='Body'),
  fallBackContent?: string(name='FallBackContent', description='The content of the fallback message.', example='This is a fallback message.', position='Body'),
  fallBackId?: string(name='FallBackId', description='The ID of the fallback policy. You can create a fallback policy and view information about the policy in the console.', example='S_000001', position='Body'),
  from: string(name='From', description='The phone number of the message sender.

>  You can specify a mobile phone number that is registered for a WhatsApp account and is approved in the ChatApp console.', example='1360000****', position='Body'),
  isvCode?: string(name='IsvCode', description='The ISV verification code, which is used to verify whether the user is authorized by the ISV account.', example='skdi3kksloslikdkkdk', position='Body'),
  label?: string(name='Label', description='The message type when the ChannelType parameter is set to viber. Valid values: pormotion and transition.', example='promotion', position='Body'),
  language?: string(name='Language', description='The language that is used in the message template. This parameter is required only if you set the Type parameter to **template**. For more information about language codes, see [Language codes](~~463420~~).', example='en', position='Body'),
  messageType?: string(name='MessageType', description='The type of the message. This parameter is required only if you set the Type parameter to **message**. Valid values:

*   **text**: the text message.
*   **image**: the image message.
*   **video**: the video message.
*   **audio**: the audio message.
*   **document**: the document message.
*   **interactive**: the interactive message.
*   **contacts**: the contact message.
*   **location**: the location message.
*   **sticker**: the sticker message.
*   **reaction**: the reaction message.

>  For more information about parameters of location, contacts, interactive, and media, see [Parameters of a message template](~~454530~~).', example='text', position='Body'),
  payload?: [ string ](name='Payload', description='The payload of the button.', example='payloadtext1,payloadtext2,payloadtext3', shrink='json', position='Query'),
  tag?: string(name='Tag', description='The tag information when the ChannelType parameter is set to viber.', example='tag', position='Body'),
  templateCode?: string(name='TemplateCode', description='The code of the message template. This parameter is required only if you set the Type parameter to **template**.', example='744c4b5c79c9432497a075bdfca3****', position='Body'),
  templateParams?: map[string]string(name='TemplateParams', description='The variables of the message template.', shrink='json', position='Body'),
  to: string(name='To', description='The phone number of the message receiver.', example='1390000****', position='Body'),
  trackingData?: string(name='TrackingData', description='The tracking data when the ChannelType parameter is set to viber.', example='tracking_id:123456', position='Body'),
  ttl?: int32(name='Ttl', description='The timeout period for sending messages when the ChannelType parameter is set to viber. Valid values: 30 to 1209600, in seconds.', example='50', position='Body'),
  type: string(name='Type', description='The type of the message. Valid values:

*   **template**: a template message. A template message is sent based on a template that is created in the ChatApp console and is approved. You can send template messages at any time based on your business requirements.
*   **message**: a custom message. You can send a custom message to a user only within 24 hours after you receive the last message from the user.', example='template', position='Body'),
}

model SendChatappMessageResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message returned.', example='User not authorized to operate on the specified resource.'),
  messageId?: string(name='MessageId', description='The ID of the message.', example='61851ccb2f1365b16aee****'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A94866411B2O'),
}

model SendChatappMessageResponse = {
  headers: map[string]string(name='headers'),
  body: SendChatappMessageResponseBody(name='body'),
}

/**
  * You can call this operation up to 200 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function sendChatappMessage(request: SendChatappMessageRequest): SendChatappMessageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SendChatappMessage', 'POST', '/', 'json', true, 'form', request);
}

model UpdateAccountWebhookRequest {
  custSpaceId: string(name='CustSpaceId', description='ISV子客户的SpaceId', example='293483938849493', position='Query'),
  httpFlag?: string(name='HttpFlag', description='是否使用Http方式接收回执（Y: 是， N: 否）', example='Y', position='Query'),
  queueFlag?: string(name='QueueFlag', description='是否使用队列方式接收回执（Y: 是， N: 否）', example='N', position='Query'),
  statusCallbackUrl?: string(name='StatusCallbackUrl', description='http方式通知回调地址', example='http://www.aliyun.com', position='Query'),
}

model UpdateAccountWebhookResponseBody = {
  code?: string(name='Code', example='OK'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='744c4b5c79c9432497a075bdfca3****'),
}

model UpdateAccountWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateAccountWebhookResponseBody(name='body'),
}

async function updateAccountWebhook(request: UpdateAccountWebhookRequest): UpdateAccountWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateAccountWebhook', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePhoneWebhookRequest {
  custSpaceId: string(name='CustSpaceId', description='The space ID of the user under the ISV account.', example='293483938849493', position='Query'),
  httpFlag?: string(name='HttpFlag', description='Specifies whether to use HTTP to receive receipts. Valid values: Y and N. A value of Y indicates that HTTP is used to receive receipts. A value of N indicates that HTTP is not used to receive receipts.', example='Y', position='Query'),
  phoneNumber: string(name='PhoneNumber', description='The phone number.', example='Phone number', position='Query'),
  queueFlag?: string(name='QueueFlag', description='Specifies whether to use Message Service (MNS) queues to receive receipts. Valid values: Y and N. A value of Y indicates that MNS queues are used to receive receipts. A value of N indicates that MNS queues are not used to receive receipts.', example='N', position='Query'),
  statusCallbackUrl?: string(name='StatusCallbackUrl', description='The callback URL to which status reports are sent via HTTP callbacks.', example='http://www.aliyun.com', position='Query'),
  upCallbackUrl?: string(name='UpCallbackUrl', description='The callback URL to which mobile originated (MO) messages are sent via HTTP callbacks.', example='http://aliyun.com', position='Query'),
}

model UpdatePhoneWebhookResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.

*   A value of OK indicates that the call is successful.
*   Other values indicate that the call fails. For more information, see [Error codes](~~196974~~).', example='OK'),
  message?: string(name='Message', description='The error message.', example='null'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='90E63D28-E31D-1EB2-8939-A9486641****'),
}

model UpdatePhoneWebhookResponse = {
  headers: map[string]string(name='headers'),
  body: UpdatePhoneWebhookResponseBody(name='body'),
}

/**
  * You can call this operation up to 10 times per second per account. If the number of calls per second exceeds the limit, throttling is triggered. As a result, your business may be affected. We recommend that you take note of the limit when you call this operation.
  *
 */
async function updatePhoneWebhook(request: UpdatePhoneWebhookRequest): UpdatePhoneWebhookResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePhoneWebhook', 'POST', '/', 'json', false, 'json', request);
}

