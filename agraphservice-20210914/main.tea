/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('agraphservice', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model SgVpcSearchServicePreRequest {
  secretKeyId?: string(name='secretKeyId', description='param0'),
  graphCode?: string(name='graphCode', description='param1'),
  nodeId?: string(name='nodeId', description='param2'),
}

model SgVpcSearchServicePreResponseBody = {
  message?: string(name='Message', description='message'),
  data?: string(name='Data', description='data'),
  code?: int32(name='Code', description='code'),
  success?: boolean(name='Success', description='success'),
}

model SgVpcSearchServicePreResponse = {
  headers: map[string]string(name='headers'),
  body: SgVpcSearchServicePreResponseBody(name='body'),
}

async function sgVpcSearchServicePreWithOptions(request: SgVpcSearchServicePreRequest, runtime: Util.RuntimeOptions): SgVpcSearchServicePreResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('SgVpcSearchServicePre', '2021-09-14', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function sgVpcSearchServicePre(request: SgVpcSearchServicePreRequest): SgVpcSearchServicePreResponse {
  var runtime = new Util.RuntimeOptions{};
  return sgVpcSearchServicePreWithOptions(request, runtime);
}

model SearchSgVpcGraphServiceRequest {
  param0?: string(name='Param0', description='param0'),
  param1?: string(name='Param1', description='param1'),
  param2?: string(name='Param2', description='param2'),
}

model SearchSgVpcGraphServiceResponseBody = {
  message?: string(name='Message', description='message'),
  data?: string(name='Data', description='data'),
  code?: int32(name='Code', description='code'),
  success?: boolean(name='Success', description='success'),
  requestId?: string(name='RequestId', description='requestid'),
}

model SearchSgVpcGraphServiceResponse = {
  headers: map[string]string(name='headers'),
  body: SearchSgVpcGraphServiceResponseBody(name='body'),
}

async function searchSgVpcGraphServiceWithOptions(request: SearchSgVpcGraphServiceRequest, runtime: Util.RuntimeOptions): SearchSgVpcGraphServiceResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('SearchSgVpcGraphService', '2021-09-14', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function searchSgVpcGraphService(request: SearchSgVpcGraphServiceRequest): SearchSgVpcGraphServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return searchSgVpcGraphServiceWithOptions(request, runtime);
}

