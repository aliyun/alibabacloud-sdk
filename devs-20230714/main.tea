/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('devs', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model Checkout {
  ref?: string(name='ref', example='+001691d0768ca49e9550beeb59fbc163f33b7e88:refs/remotes/origin/master'),
  remote?: string(name='remote', example='https:/your_token/@github.com/buptwzj/test-initRepo4.git'),
}

model CodeupEventPayload {
  originalPayload?: bytes(name='originalPayload'),
}

model Condition {
  expression?: string(name='expression'),
}

model Connection {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test-description'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Connection'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name', description='This parameter is required.', example='my-connection'),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: ConnectionSpec(name='spec', description='This parameter is required.'),
  status?: ConnectionStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model ConnectionSpec {
  account?: GitAccount(name='account'),
  gitlabConfig?: GitLabConfig(name='gitlabConfig'),
  platform?: string(name='platform', description='This parameter is required.', example='github'),
}

model ConnectionStatus {
  installation?: Installation(name='installation'),
}

model Context {
  data?: map[string]any(name='data'),
}

model ContextSchema {
  description?: string(name='description', example='[git](https://git-scm.com/) address for [git clone](https://git-scm.com/docs/git-clone).'),
  hint?: string(name='hint', example='git@gitlab.alibaba-inc.com:serverless/lambda.git'),
  name?: string(name='name', example='gitRepoUrl'),
  required?: boolean(name='required', example='true'),
  type?: string(name='type', example='string'),
}

model Environment {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test env'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Environment'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name', description='This parameter is required.', example='demo-env'),
  projectName?: string(name='projectName', example='demo-project'),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: EnvironmentSpec(name='spec', description='This parameter is required.'),
  status?: EnvironmentStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model EnvironmentSpec {
  alias?: string(name='alias', example='dev'),
  infraStackConfig?: InfraStackSpec(name='infraStackConfig'),
  isAutoDeploy?: boolean(name='isAutoDeploy'),
  repositoryConfig?: RepositoryConfig(name='repositoryConfig'),
  roleArn?: string(name='roleArn', example='acs:ram::*******:role/aliyundevsdefaultrole'),
  serviceOverlay?: {
    components?: map[string]any(name='components', example='{"fc3":{"timeout":600}}'),
    resources?: map[string]any(name='resources', example='{"dummyFunction":{"timeout":600}}'),
  }(name='serviceOverlay'),
  templateConfig?: TemplateConfig(name='templateConfig'),
  type?: string(name='type', example='Testing'),
}

model EnvironmentStatus {
  infraStackStatus?: InfraStackStatus(name='infraStackStatus'),
  latestReleaseDetail?: ReleaseDetail(name='latestReleaseDetail'),
  observedGeneration?: long(name='observedGeneration', example='1'),
  observedTime?: string(name='observedTime', example='2021-11-19T09:34:38Z'),
}

model EventFilterConfig {
  pullRequest?: PullRequestFilter(name='pullRequest'),
  push?: PushFilter(name='push'),
}

model EventPayload {
  codeup?: CodeupEventPayload(name='codeup'),
  gitee?: GiteeEventPayload(name='gitee'),
  github?: GithubEventPayload(name='github'),
  gitlab?: GitlabEventPayload(name='gitlab'),
  manual?: ManualEventPayload(name='manual'),
}

model GitAccount {
  avatar?: string(name='avatar', example='https://gitee.com/assets/no_portrait.png'),
  displayName?: string(name='displayName', example='your_displayname'),
  id?: string(name='id', example='1'),
  name?: string(name='name', example='your_username'),
  uri?: string(name='uri', example='https://gitlab.com'),
}

model GitEventSnapshot {
  branch?: string(name='branch', example='main'),
  commitID?: string(name='commitID', example='12721ec262d03a93809ba2bbc717963cb298ceca'),
  tag?: string(name='tag', example='1.0'),
}

model GitLabConfig {
  token?: string(name='token', example='your-token'),
  uri?: string(name='uri', example='http://gitlab.c16194660f14898a0810408171302ac.cn-shanghai.alicontainer.com/'),
}

model GiteeEventPayload {
  originalPayload?: bytes(name='originalPayload'),
}

model GithubEventPayload {
  originalPayload?: bytes(name='originalPayload'),
}

model GitlabEventPayload {
  originalPayload?: bytes(name='originalPayload'),
}

model InfraStackResourceState {
  resourceDrifts?: [
    ResourceDrift
  ](name='resourceDrifts'),
  resources?: [
    ResourceDetail
  ](name='resources'),
}

model InfraStackSpec {
  regionID?: string(name='regionID', description='This parameter is required.', example='cn-hangzhou'),
  roleArn?: string(name='roleArn', example='acs:ram::1234567890:role/devs-role'),
  templateName?: string(name='templateName', example='serverless.devs.com/fc-builtin'),
  templateSpec?: {
    content?: string(name='content', example='"\\nresource \\"alicloud_fc_service\\" \\"default\\" {\\n  name        = \\"xiliu-tf-test-srv4\\"\\n  description = \\"xiliu tf  test service \\"\\n}\\n\\n\\nresource \\"alicloud_oss_bucket\\" \\"default\\" {\\n  bucket = \\"xiliu-test-tf-bucket4\\"\\n  acl    = \\"private\\"\\n}\\n\\noutput \\"service_name\\" {\\n  value = alicloud_fc_service.default.name\\n}\\n\\noutput \\"oss_bucket\\" {\\n  value = alicloud_oss_bucket.default.bucket\\n}",'),
    engine?: string(name='engine', example='terrafrom'),
  }(name='templateSpec'),
  templateVariables?: map[string]any(name='templateVariables', example='{"testKey":"testValue"}'),
}

model InfraStackStatus {
  message?: string(name='message', example='Success!'),
  observedGeneration?: int32(name='observedGeneration', example='0'),
  observedTime?: string(name='observedTime', example='2021-10-08T23:14:16Z'),
  phase?: string(name='phase', example='DeploySuccess'),
  resourceState?: InfraStackResourceState(name='resourceState'),
  templateOutputs?: map[string]any(name='templateOutputs', example='{"vpcId":"vpc-xxx"}'),
  templateStatus?: {
    outputs?: [
      TerraformOutputValue
    ](name='outputs', description='This parameter is required.'),
    variables?: [
      TerraformInputVariable
    ](name='variables', description='This parameter is required.'),
  }(name='templateStatus'),
}

model Installation {
  actionUri?: string(name='actionUri', example='https://github.com/login/oauth/authorize?client_id=86059a1b2bb20d3e5fc3&scope=repo,repo:status,delete_repo'),
  message?: string(name='message', example='Please click \\"actionUri\\" to complete the OAuth authorization process'),
  stage?: string(name='stage', example='finished'),
}

model ManualEventPayload {
  branch?: string(name='branch'),
  commitID?: string(name='commitID'),
  tag?: string(name='tag'),
  templateConfig?: TemplateConfig(name='templateConfig'),
}

model OAuthCredential {
  createdTime?: long(name='createdTime', description='This parameter is required.', example='1716176924603'),
  expiration?: long(name='expiration', description='This parameter is required.', example='1716263324603'),
  refreshToken?: string(name='refreshToken', example='4d77bfae284770d94ebeed6b0199ebfd65e3943ba4f1e44dc36d792a93ba0d13'),
  scope?: string(name='scope', example='user_info projects pull_requests hook gists emails'),
  token?: string(name='token', description='This parameter is required.', example='4e84246b6b3962cd3d207aad1ea2f911'),
  type?: string(name='type', example='bearer'),
}

model Pipeline {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  deletionTime?: string(name='deletionTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='Pipeline example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Pipeline'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name', description='This parameter is required.', example='my-pipeline'),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: PipelineSpec(name='spec'),
  status?: PipelineStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model PipelineSpec {
  context?: Context(name='context'),
  templateName?: string(name='templateName', example='my-pipeline-template'),
  templateSpec?: PipelineTemplateSpec(name='templateSpec'),
}

model PipelineStatus {
  latestExecError?: TaskExecError(name='latestExecError'),
  phase?: string(name='phase', example='Success'),
}

model PipelineTemplate {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  deletionTime?: string(name='deletionTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='PipelineTemplate example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='PipelineTemplate'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name', description='This parameter is required.', example='my-pipeline-template'),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: PipelineTemplateSpec(name='spec'),
  uid?: string(name='uid', example='1455541096***548'),
}

model PipelineTemplateSpec {
  context?: Context(name='context'),
  tasks?: [
    TaskExec
  ](name='tasks'),
}

model PipelineTrigger {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  deletionTime?: string(name='deletionTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='PipelineTrigger example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='PipelineTrigger'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name', description='This parameter is required.', example='my-pipeline-trigger'),
  projectName?: string(name='projectName', description='This parameter is required.', example='my-project'),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: PipelineTriggerSpec(name='spec'),
  uid?: string(name='uid', example='1455541096***548'),
}

model PipelineTriggerEvent {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  deletionTime?: string(name='deletionTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='PipelineTriggerEvent example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='PipelineTriggerEvent'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name', description='This parameter is required.', example='my-pipeline-trigger'),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: PipelineTriggerEventSpec(name='spec'),
  status?: PipelineTriggerEventStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model PipelineTriggerEventSpec {
  payload?: EventPayload(name='payload'),
  triggerName?: string(name='triggerName'),
}

model PipelineTriggerEventStatus {
  errorMessage?: string(name='errorMessage', example='failed to create and start pipeline, error=message'),
  firedPipelineName?: string(name='firedPipelineName', example='my-pipeline'),
  releaseDetail?: ReleaseDetail(name='releaseDetail'),
  status?: string(name='status', example='Skipped,Fired,Running,Failed,Success'),
}

model PipelineTriggerSpec {
  eventFilter?: EventFilterConfig(name='eventFilter', description='This parameter is required.'),
  roleArn?: string(name='roleArn', example='acs:ram::1431999****8149:role/aliyundevsdefaultrole'),
  runPipeline?: RunPipelineConfig(name='runPipeline'),
}

model Project {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test-description'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Project'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name', description='This parameter is required.', example='my-project'),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: ProjectSpec(name='spec'),
  status?: ProjectStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
  updatedTime?: string(name='updatedTime', example='2021-11-19T09:34:38Z'),
}

model ProjectSpec {
  roleArn?: string(name='roleArn', example='acs:ram::1431999****8149:role/aliyundevsdefaultrole'),
  templateConfig?: TemplateConfig(name='templateConfig'),
  token?: string(name='token', example='9D72DE01-C732-49C0-8E85-FFD9D695436B'),
}

model ProjectStatus {
  latestReleaseDetail?: ReleaseDetail(name='latestReleaseDetail'),
  observedGeneration?: long(name='observedGeneration', example='1'),
  observedTime?: string(name='observedTime', example='2021-11-19T09:34:38Z'),
}

model PullRequestFilter {
  sourceBranch?: string(name='sourceBranch', example='feature-.*'),
  targetBranch?: string(name='targetBranch', example='master'),
  types?: [ string ](name='types'),
}

model PushFilter {
  branch?: string(name='branch', example='master'),
  tag?: string(name='tag', example='prod-.*'),
}

model ReleaseDetail {
  bizStatus?: string(name='bizStatus', example='Running'),
  envName?: string(name='envName', example='dev'),
  finishedTime?: string(name='finishedTime', example='2021-11-19T09:34:38Z'),
  gitEventSnapshot?: GitEventSnapshot(name='gitEventSnapshot'),
  latestTaskExecError?: TaskExecError(name='latestTaskExecError'),
  message?: string(name='message', example='Triggered manually.'),
  pipelineName?: string(name='pipelineName', example='p-1704952599751-wUOczb'),
  pipelineTriggerEventName?: string(name='pipelineTriggerEventName', example='p-codeup-1714271977972-pa4w'),
  releaseOutputs?: map[string]any(name='releaseOutputs', example='{"framework":{"region":"cn-hangzhou","service":{"serviceName":"web-framework","description":"Serverless Devs Web Framework Service","role":"","logConfig":{"project":"","logstore":"","enableRequestMetrics":false,"enableInstanceMetrics":false,"logBeginRule":"None"},"serviceId":"4c9d0e79-16b8-4951-a6b8-169d2037d217","createdTime":"2021-12-07T09:24:08Z","lastModifiedTime":"2022-04-09T09:16:51Z","vpcConfig":{"vpcId":"","vSwitchIds":[],"securityGroupId":"","role":""},"internetAccess":true,"nasConfig":{"userId":-1,"groupId":-1,"mountPoints":[]},"tracingConfig":{},"name":"web-framework"},"function":{"functionId":"e81904f0-24d0-45df-bb53-06da64d01395","functionName":"todolist","description":"Serverless Devs Web Framework Function","runtime":"nodejs12","handler":"index.handler","timeout":60,"initializer":"","initializationTimeout":3,"codeSize":1757093,"codeChecksum":"7185648203525194222","memorySize":256,"environmentVariables":{},"createdTime":"2022-03-15T15:36:22Z","lastModifiedTime":"2022-04-09T09:16:50Z","instanceConcurrency":1,"instanceType":"e1","instanceLifecycleConfig":{"preFreeze":{"handler":"","timeout":3},"preStop":{"handler":"","timeout":3}},"name":"todolist"},"triggers":[{"triggerName":"httpTrigger","description":"","triggerId":"7f2373ce-df1a-4013-b4e5-899989d9b27e","triggerType":"http","triggerConfig":{"methods":["GET","POST"],"authType":"anonymous"},"createdTime":"2022-03-15T15:36:23Z","lastModifiedTime":"2022-04-09T09:16:51Z","name":"httpTrigger"}],"customDomains":[{"domainName":"todolist.web-framework.1835799444022432.cn-hangzhou.fc.devsapp.net","accountId":"1835799444022432","protocol":"HTTP","certConfig":{},"tlsConfig":{},"apiVersion":"2016-08-15","routeConfig":{"routes":[{"path":"/*","serviceName":"web-framework","functionName":"todolist","methods":["GET","POST"]}]},"createdTime":"2022-03-15T15:36:28Z","lastModifiedTime":"2022-04-09T09:17:00Z"}]}}'),
  repositorySnapshot?: RepositorySpec(name='repositorySnapshot'),
  templateConfigSnapshot?: TemplateConfig(name='templateConfigSnapshot'),
}

model Repository {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test-description'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Repository'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name', description='This parameter is required.', example='my-repository'),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: RepositorySpec(name='spec', description='This parameter is required.'),
  uid?: string(name='uid', example='1455541096***548'),
}

model RepositoryConfig {
  branchName?: string(name='branchName', description='This parameter is required.', example='master'),
  manifest?: string(name='manifest', example='src/s.yaml'),
  repositoryName?: string(name='repositoryName', description='This parameter is required.', example='my-repository'),
}

model RepositorySpec {
  cloneUrl?: string(name='cloneUrl', description='This parameter is required.', example='https://github.com/DDofDD/start-springboot-lfgy.git'),
  connectionName?: string(name='connectionName', description='This parameter is required.', example='awesome-connection'),
  displayName?: string(name='displayName', example='my-repo-name'),
  id?: long(name='id', example='312649'),
  owner?: string(name='owner', example='my-org-name'),
  platform?: string(name='platform', example='github'),
  webUrl?: string(name='webUrl', example='https://github.com/my-org-name/my-repo-name'),
}

model ResourceDetail {
  address?: string(name='address', example='alicloud_fc_trigger.cn-shanghai-fc-stable-diffusion-sd'),
  attributeValues?: map[string]any(name='attributeValues', example='{"config":"{\\"methods\\":[\\"GET\\",\\"POST\\",\\"PUT\\",\\"DELETE\\"],\\"authType\\":\\"anonymous\\",\\"disableURLInternet\\":true}","config_mns":null,"function":"sd","id":"fc-stable-diffusion:sd:defaultTrigger","last_modified":"2024-04-17T13:20:53Z","name":"defaultTrigger","name_prefix":null,"role":"","service":"fc-stable-diffusion","source_arn":"","trigger_id":"mock-trigger","type":"http"}'),
  mode?: string(name='mode', example='managed'),
  name?: string(name='name', example='cn-shanghai-fc-stable-diffusion-sd'),
  type?: string(name='type', example='alicloud_fc_trigger'),
}

model ResourceDrift {
  address?: string(name='address', example='alicloud_fc_trigger.cn-shanghai-fc-stable-diffusion-sd'),
  change?: {
    actions?: [ string ](name='actions'),
    after?: any(name='after', example='{"description":"mock deployment","id":"fc-demo-model-scope","internet_access":true,"last_modified":"2024-04-17T13:20:56Z","log_config":[],"name":"fc-demo-model-scope","name_prefix":null,"nas_config":[{"group_id":0,"mount_points":[{"mount_dir":"/mnt/auto","server_addr":"mock-addr.cn-shanghai.nas.aliyuncs.com:/fc-demo-model-scope"}],"user_id":0}],"publish":null,"role":"acs:ram::mock-role:role/aliyunfcdefaultrole","service_id":"mock-service","tags":null,"tracing_config":[],"version":null,"vpc_config":[{"security_group_id":"sg-mock","vpc_id":"vpc-mock","vswitch_ids":["vsw-mock"]}]}'),
    before?: any(name='before', example='{"description":"modelscope deployment","id":"fc-demo-model-scope","internet_access":true,"last_modified":"2024-04-17T13:20:56Z","log_config":[],"name":"fc-demo-model-scope","name_prefix":null,"nas_config":[{"group_id":0,"mount_points":[{"mount_dir":"/mnt/auto","server_addr":"mock-addr.cn-shanghai.nas.aliyuncs.com:/fc-demo-model-scope"}],"user_id":0}],"publish":null,"role":"acs:ram::mock-role:role/aliyunfcdefaultrole","service_id":"mock-service","tags":null,"tracing_config":[],"version":null,"vpc_config":[{"security_group_id":"sg-mock","vpc_id":"vpc-mock","vswitch_ids":["vsw-mock"]}]}'),
  }(name='change'),
  mode?: string(name='mode', example='managed'),
  name?: string(name='name', example='cn-shanghai-fc-stable-diffusion-sd'),
  type?: string(name='type', example='alicloud_fc_trigger'),
}

model RunAfter {
  name?: string(name='name', example='task-1'),
}

model RunPipelineConfig {
  pipelineSpec?: PipelineSpec(name='pipelineSpec'),
  variables?: [
    Variable
  ](name='variables'),
  yamlFileContent?: string(name='yamlFileContent'),
  yamlFilePath?: string(name='yamlFilePath'),
}

model ServiceSpec {
  environment?: string(name='environment', description='This parameter is required.', example='my-env'),
  roleArn?: string(name='roleArn', example='acs:ram::1455541096306548:role/aliyunfcdefaultrole'),
  template?: string(name='template', description='This parameter is required.', example='serverless-devs.com/alicloud-multi-functions/service-single-function/deployment'),
  templateVariables?: map[string]any(name='templateVariables', description='This parameter is required.'),
  templateVersion?: int32(name='templateVersion', example='1'),
}

model Task {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  deletionTime?: string(name='deletionTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='Task example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Task'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name', description='This parameter is required.', example='my-task'),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: TaskSpec(name='spec'),
  status?: TaskStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model TaskExec {
  context?: Context(name='context'),
  name?: string(name='name', example='task-1'),
  runAfters?: [
    RunAfter
  ](name='runAfters'),
  taskTemplate?: string(name='taskTemplate', example='serverless-runner'),
}

model TaskExecError {
  code?: string(name='code', example='AccessDenied'),
  extraInfo?: string(name='extraInfo', example='部署辅助函数权限不足，需要添加额外的权限以解决问题。https://help.aliyun.com'),
  message?: string(name='message', example='部署服务[_appcenter-xxx]失败，权限不足'),
  requestId?: string(name='requestId', example='1-26d1287xxxxx'),
  title?: string(name='title', example='权限不足错误'),
}

model TaskInvocation {
  instanceID?: string(name='instanceID', example='c-nkj8shz7xxxx'),
  invocationID?: string(name='invocationID', example='E099843B-10A2-4936-9964-4E0EE263D564'),
  invocationTarget?: string(name='invocationTarget', example='acs:fc:cn-hangzhou:143xxxx:services/xxx.LATEST/functions/xxx'),
  output?: string(name='output', example='{"key1":"value1","key2":"value2"}'),
  requestID?: string(name='requestID', example='1B3058B1-F1C9-457C-B95C-2C250A4B3118'),
  slsLogStore?: string(name='slsLogStore', example='my-sls-logstore'),
  slsProject?: string(name='slsProject', example='my-sls-project'),
  status?: string(name='status', example='success'),
}

model TaskSpec {
  context?: Context(name='context'),
  templateName?: string(name='templateName', example='my-task-template'),
}

model TaskStatus {
  executionDetails?: [ string ](name='executionDetails'),
  invocations?: [
    TaskInvocation
  ](name='invocations'),
  latestExecError?: TaskExecError(name='latestExecError'),
  phase?: string(name='phase', example='Success'),
  statusGeneration?: long(name='statusGeneration', example='123'),
}

model TaskTemplate {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  deletionTime?: string(name='deletionTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='TaskTemplate example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='TaskTemplate'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name', description='This parameter is required.', example='my-task-template'),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: TaskTemplateSpec(name='spec'),
  uid?: string(name='uid', example='1455541096***548'),
}

model TaskTemplateSpec {
  context?: Context(name='context'),
  description?: string(name='description', example='build&deploy.'),
  executeCondition?: Condition(name='executeCondition'),
  worker?: TaskWorker(name='worker'),
}

model TaskWorker {
  presetWorker?: string(name='presetWorker', example='serverless-runner'),
}

model TemplateConfig {
  parameters?: map[string]any(name='parameters', example='{"region":"cn-hangzhou"}'),
  templateName?: string(name='templateName', description='This parameter is required.', example='start-springboot'),
}

model TerraformInputVariable {
  defaultJson?: string(name='defaultJson', example='{"key":"value"}'),
  description?: string(name='description', example='test variable'),
  name?: string(name='name', description='This parameter is required.', example='namePrefix'),
  nullable?: boolean(name='nullable', example='true'),
  sensitive?: boolean(name='sensitive', example='false'),
  type?: string(name='type', example='string'),
}

model TerraformOutputValue {
  description?: string(name='description', example='The VPC ID where the resource is located.'),
  name?: string(name='name', description='This parameter is required.', example='vpcId'),
  sensitive?: boolean(name='sensitive', example='false'),
}

model Variable {
  name?: string(name='name', example='object_key'),
  value?: string(name='value', example='object_value'),
}

model ActivateConnectionRequest {
  account?: GitAccount(name='account'),
  credential?: OAuthCredential(name='credential'),
}

model ActivateConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Connection  
}

/**
 * @summary 激活身份绑定,完成OAuth授权
 *
 * @param request ActivateConnectionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ActivateConnectionResponse
 */
async function activateConnectionWithOptions(name: string, request: ActivateConnectionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ActivateConnectionResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.account)) {
    body['account'] = request.account;
  }
  if (!Util.isUnset(request.credential)) {
    body['credential'] = request.credential;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'ActivateConnection',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/connections/${OpenApiUtil.getEncodeParam(name)}/activate`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 激活身份绑定,完成OAuth授权
 *
 * @param request ActivateConnectionRequest
 * @return ActivateConnectionResponse
 */
async function activateConnection(name: string, request: ActivateConnectionRequest): ActivateConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return activateConnectionWithOptions(name, request, headers, runtime);
}

model CancelPipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

/**
 * @summary 取消流水线
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelPipelineResponse
 */
async function cancelPipelineWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): CancelPipelineResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CancelPipeline',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelines/${OpenApiUtil.getEncodeParam(name)}/cancel`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消流水线
 *
 * @return CancelPipelineResponse
 */
async function cancelPipeline(name: string): CancelPipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelPipelineWithOptions(name, headers, runtime);
}

model CancelTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

/**
 * @summary 取消任务
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CancelTaskResponse
 */
async function cancelTaskWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): CancelTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'CancelTask',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/tasks/${OpenApiUtil.getEncodeParam(name)}/cancel`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 取消任务
 *
 * @return CancelTaskResponse
 */
async function cancelTask(name: string): CancelTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return cancelTaskWithOptions(name, headers, runtime);
}

model CreateConnectionRequest {
  body?: Connection(name='body'),
}

model CreateConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Connection  
}

/**
 * @summary 创建身份绑定
 *
 * @param request CreateConnectionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateConnectionResponse
 */
async function createConnectionWithOptions(request: CreateConnectionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateConnectionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateConnection',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/connections`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建身份绑定
 *
 * @param request CreateConnectionRequest
 * @return CreateConnectionResponse
 */
async function createConnection(request: CreateConnectionRequest): CreateConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createConnectionWithOptions(request, headers, runtime);
}

model CreateEnvironmentRequest {
  body?: Environment(name='body'),
}

model CreateEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Environment  
}

/**
 * @summary 创建环境
 *
 * @param request CreateEnvironmentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateEnvironmentResponse
 */
async function createEnvironmentWithOptions(project: string, request: CreateEnvironmentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateEnvironmentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateEnvironment',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/projects/${OpenApiUtil.getEncodeParam(project)}/environments`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建环境
 *
 * @param request CreateEnvironmentRequest
 * @return CreateEnvironmentResponse
 */
async function createEnvironment(project: string, request: CreateEnvironmentRequest): CreateEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createEnvironmentWithOptions(project, request, headers, runtime);
}

model CreatePipelineRequest {
  body?: Pipeline(name='body'),
}

model CreatePipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

/**
 * @summary 创建流水线
 *
 * @param request CreatePipelineRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePipelineResponse
 */
async function createPipelineWithOptions(request: CreatePipelineRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePipelineResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePipeline',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelines`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建流水线
 *
 * @param request CreatePipelineRequest
 * @return CreatePipelineResponse
 */
async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createPipelineWithOptions(request, headers, runtime);
}

model CreatePipelineTemplateRequest {
  body?: PipelineTemplate(name='body'),
}

model CreatePipelineTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTemplate  
}

/**
 * @summary 创建流水线模板
 *
 * @param request CreatePipelineTemplateRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePipelineTemplateResponse
 */
async function createPipelineTemplateWithOptions(request: CreatePipelineTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePipelineTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePipelineTemplate',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetemplates`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建流水线模板
 *
 * @param request CreatePipelineTemplateRequest
 * @return CreatePipelineTemplateResponse
 */
async function createPipelineTemplate(request: CreatePipelineTemplateRequest): CreatePipelineTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createPipelineTemplateWithOptions(request, headers, runtime);
}

model CreatePipelineTriggerRequest {
  body?: PipelineTrigger(name='body'),
}

model CreatePipelineTriggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTrigger  
}

/**
 * @summary 创建流水线触发器
 *
 * @param request CreatePipelineTriggerRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePipelineTriggerResponse
 */
async function createPipelineTriggerWithOptions(request: CreatePipelineTriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePipelineTriggerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePipelineTrigger',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetriggers`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建流水线触发器
 *
 * @param request CreatePipelineTriggerRequest
 * @return CreatePipelineTriggerResponse
 */
async function createPipelineTrigger(request: CreatePipelineTriggerRequest): CreatePipelineTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createPipelineTriggerWithOptions(request, headers, runtime);
}

model CreatePipelineTriggerEventRequest {
  body?: PipelineTriggerEvent(name='body'),
}

model CreatePipelineTriggerEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTriggerEvent  
}

/**
 * @summary 创建流水线触发历史
 *
 * @param request CreatePipelineTriggerEventRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreatePipelineTriggerEventResponse
 */
async function createPipelineTriggerEventWithOptions(request: CreatePipelineTriggerEventRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreatePipelineTriggerEventResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreatePipelineTriggerEvent',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetriggerevents`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建流水线触发历史
 *
 * @param request CreatePipelineTriggerEventRequest
 * @return CreatePipelineTriggerEventResponse
 */
async function createPipelineTriggerEvent(request: CreatePipelineTriggerEventRequest): CreatePipelineTriggerEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createPipelineTriggerEventWithOptions(request, headers, runtime);
}

model CreateProjectRequest {
  body?: Project(name='body'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Project  
}

/**
 * @summary 创建项目
 *
 * @param request CreateProjectRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateProjectResponse
 */
async function createProjectWithOptions(request: CreateProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateProjectResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateProject',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/projects`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建项目
 *
 * @param request CreateProjectRequest
 * @return CreateProjectResponse
 */
async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createProjectWithOptions(request, headers, runtime);
}

model CreateRepositoryRequest {
  body?: Repository(name='body'),
}

model CreateRepositoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Repository  
}

/**
 * @summary 创建仓库绑定
 *
 * @param request CreateRepositoryRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateRepositoryResponse
 */
async function createRepositoryWithOptions(request: CreateRepositoryRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateRepositoryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateRepository',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/repositories`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建仓库绑定
 *
 * @param request CreateRepositoryRequest
 * @return CreateRepositoryResponse
 */
async function createRepository(request: CreateRepositoryRequest): CreateRepositoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createRepositoryWithOptions(request, headers, runtime);
}

model CreateTaskRequest {
  body?: Task(name='body'),
}

model CreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

/**
 * @summary 创建任务
 *
 * @param request CreateTaskRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTaskResponse
 */
async function createTaskWithOptions(request: CreateTaskRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTask',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/tasks`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建任务
 *
 * @param request CreateTaskRequest
 * @return CreateTaskResponse
 */
async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTaskWithOptions(request, headers, runtime);
}

model CreateTaskTemplateRequest {
  body?: TaskTemplate(name='body'),
}

model CreateTaskTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskTemplate  
}

/**
 * @summary 创建任务模板
 *
 * @param request CreateTaskTemplateRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return CreateTaskTemplateResponse
 */
async function createTaskTemplateWithOptions(request: CreateTaskTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): CreateTaskTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'CreateTaskTemplate',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/tasktemplates`,
    method = 'POST',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 创建任务模板
 *
 * @param request CreateTaskTemplateRequest
 * @return CreateTaskTemplateResponse
 */
async function createTaskTemplate(request: CreateTaskTemplateRequest): CreateTaskTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return createTaskTemplateWithOptions(request, headers, runtime);
}

model DeleteConnectionRequest {
  force?: boolean(name='force', example='true'),
}

model DeleteConnectionResponseBody = {
  requestId?: string(name='requestId', example='A5152937-1C8A-5260-90FA-520CEF028D2D'),
}

model DeleteConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConnectionResponseBody(name='body'),
}

/**
 * @summary 删除身份绑定
 *
 * @param request DeleteConnectionRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteConnectionResponse
 */
async function deleteConnectionWithOptions(name: string, request: DeleteConnectionRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteConnectionResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteConnection',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/connections/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除身份绑定
 *
 * @param request DeleteConnectionRequest
 * @return DeleteConnectionResponse
 */
async function deleteConnection(name: string, request: DeleteConnectionRequest): DeleteConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteConnectionWithOptions(name, request, headers, runtime);
}

model DeleteEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
 * @summary 删除环境
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteEnvironmentResponse
 */
async function deleteEnvironmentWithOptions(project: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteEnvironmentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteEnvironment',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/projects/${OpenApiUtil.getEncodeParam(project)}/environments/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'none',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除环境
 *
 * @return DeleteEnvironmentResponse
 */
async function deleteEnvironment(project: string, name: string): DeleteEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteEnvironmentWithOptions(project, name, headers, runtime);
}

model DeletePipelineTemplateResponseBody = {
  requestId?: string(name='requestId', example='E2977805-E133-5966-878B-6499E6A04D3C'),
}

model DeletePipelineTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePipelineTemplateResponseBody(name='body'),
}

/**
 * @summary 删除流水线模板
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePipelineTemplateResponse
 */
async function deletePipelineTemplateWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePipelineTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeletePipelineTemplate',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetemplates/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除流水线模板
 *
 * @return DeletePipelineTemplateResponse
 */
async function deletePipelineTemplate(name: string): DeletePipelineTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePipelineTemplateWithOptions(name, headers, runtime);
}

model DeletePipelineTriggerResponseBody = {
  requestId?: string(name='requestId', example='A5152937-1C8A-5260-90FA-520CEF028D2D'),
}

model DeletePipelineTriggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePipelineTriggerResponseBody(name='body'),
}

/**
 * @summary 删除流水线触发器
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePipelineTriggerResponse
 */
async function deletePipelineTriggerWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePipelineTriggerResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeletePipelineTrigger',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetriggers/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除流水线触发器
 *
 * @return DeletePipelineTriggerResponse
 */
async function deletePipelineTrigger(name: string): DeletePipelineTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePipelineTriggerWithOptions(name, headers, runtime);
}

model DeletePipelineTriggerEventResponseBody = {
  requestId?: string(name='requestId', example='BD835E20-EA35-5EE9-A38E-15F9E4AC0B73'),
}

model DeletePipelineTriggerEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePipelineTriggerEventResponseBody(name='body'),
}

/**
 * @summary 删除流水线触发历史
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeletePipelineTriggerEventResponse
 */
async function deletePipelineTriggerEventWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeletePipelineTriggerEventResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeletePipelineTriggerEvent',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetriggerevents/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除流水线触发历史
 *
 * @return DeletePipelineTriggerEventResponse
 */
async function deletePipelineTriggerEvent(name: string): DeletePipelineTriggerEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deletePipelineTriggerEventWithOptions(name, headers, runtime);
}

model DeleteProjectRequest {
  force?: boolean(name='force', example='true'),
}

model DeleteProjectResponseBody = {
  requestId?: string(name='requestId', example='D9A4CC0F-132B-5EDC-B252-5E11ADFA4B4E'),
}

model DeleteProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectResponseBody(name='body'),
}

/**
 * @summary 删除项目
 *
 * @param request DeleteProjectRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteProjectResponse
 */
async function deleteProjectWithOptions(name: string, request: DeleteProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteProjectResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteProject',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/projects/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除项目
 *
 * @param request DeleteProjectRequest
 * @return DeleteProjectResponse
 */
async function deleteProject(name: string, request: DeleteProjectRequest): DeleteProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteProjectWithOptions(name, request, headers, runtime);
}

model DeleteRepositoryResponseBody = {
  requestId?: string(name='requestId', example='1EEC6F09-A0DA-5A0E-9C3A-DA90B4346B9A'),
}

model DeleteRepositoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRepositoryResponseBody(name='body'),
}

/**
 * @summary 删除仓库绑定
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteRepositoryResponse
 */
async function deleteRepositoryWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteRepositoryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteRepository',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/repositories/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除仓库绑定
 *
 * @return DeleteRepositoryResponse
 */
async function deleteRepository(name: string): DeleteRepositoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteRepositoryWithOptions(name, headers, runtime);
}

model DeleteTaskTemplateResponseBody = {
  requestId?: string(name='requestId', example='C08FBF2B-9F8E-5415-9EB1-3DC741805C29'),
}

model DeleteTaskTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTaskTemplateResponseBody(name='body'),
}

/**
 * @summary 删除任务模板
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return DeleteTaskTemplateResponse
 */
async function deleteTaskTemplateWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): DeleteTaskTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'DeleteTaskTemplate',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/tasktemplates/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'DELETE',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 删除任务模板
 *
 * @return DeleteTaskTemplateResponse
 */
async function deleteTaskTemplate(name: string): DeleteTaskTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return deleteTaskTemplateWithOptions(name, headers, runtime);
}

model FetchConnectionCredentialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OAuthCredential  
}

/**
 * @summary 查询身份绑定中的凭证信息
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return FetchConnectionCredentialResponse
 */
async function fetchConnectionCredentialWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): FetchConnectionCredentialResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'FetchConnectionCredential',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/connections/${OpenApiUtil.getEncodeParam(name)}/fetchCredential`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询身份绑定中的凭证信息
 *
 * @return FetchConnectionCredentialResponse
 */
async function fetchConnectionCredential(name: string): FetchConnectionCredentialResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return fetchConnectionCredentialWithOptions(name, headers, runtime);
}

model FetchRepositoryCheckoutRequest {
  branch?: string(name='branch', example='main'),
  commit?: string(name='commit', example='8828d0087db4210bb1bfeadba90ae52f2938431d'),
  tag?: string(name='tag', example='v1.31.0-alpha.0'),
}

model FetchRepositoryCheckoutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Checkout  
}

/**
 * @summary 查询仓库代码拉取所需信息
 *
 * @param request FetchRepositoryCheckoutRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return FetchRepositoryCheckoutResponse
 */
async function fetchRepositoryCheckoutWithOptions(name: string, request: FetchRepositoryCheckoutRequest, headers: map[string]string, runtime: Util.RuntimeOptions): FetchRepositoryCheckoutResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.branch)) {
    query['branch'] = request.branch;
  }
  if (!Util.isUnset(request.commit)) {
    query['commit'] = request.commit;
  }
  if (!Util.isUnset(request.tag)) {
    query['tag'] = request.tag;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'FetchRepositoryCheckout',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/repositories/${OpenApiUtil.getEncodeParam(name)}/fetchCheckout`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询仓库代码拉取所需信息
 *
 * @param request FetchRepositoryCheckoutRequest
 * @return FetchRepositoryCheckoutResponse
 */
async function fetchRepositoryCheckout(name: string, request: FetchRepositoryCheckoutRequest): FetchRepositoryCheckoutResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return fetchRepositoryCheckoutWithOptions(name, request, headers, runtime);
}

model GetConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Connection  
}

/**
 * @summary 查询身份绑定
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetConnectionResponse
 */
async function getConnectionWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetConnectionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetConnection',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/connections/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询身份绑定
 *
 * @return GetConnectionResponse
 */
async function getConnection(name: string): GetConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getConnectionWithOptions(name, headers, runtime);
}

model GetEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Environment  
}

/**
 * @summary 获取环境信息
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetEnvironmentResponse
 */
async function getEnvironmentWithOptions(project: string, name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetEnvironmentResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetEnvironment',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/projects/${OpenApiUtil.getEncodeParam(project)}/environments/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 获取环境信息
 *
 * @return GetEnvironmentResponse
 */
async function getEnvironment(project: string, name: string): GetEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getEnvironmentWithOptions(project, name, headers, runtime);
}

model GetPipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

/**
 * @summary 查询流水线
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPipelineResponse
 */
async function getPipelineWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetPipeline',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelines/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询流水线
 *
 * @return GetPipelineResponse
 */
async function getPipeline(name: string): GetPipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineWithOptions(name, headers, runtime);
}

model GetPipelineTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTemplate  
}

/**
 * @summary 查询流水线模板
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPipelineTemplateResponse
 */
async function getPipelineTemplateWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetPipelineTemplate',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetemplates/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询流水线模板
 *
 * @return GetPipelineTemplateResponse
 */
async function getPipelineTemplate(name: string): GetPipelineTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineTemplateWithOptions(name, headers, runtime);
}

model GetPipelineTriggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTrigger  
}

/**
 * @summary 查询流水线触发器
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPipelineTriggerResponse
 */
async function getPipelineTriggerWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineTriggerResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetPipelineTrigger',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetriggers/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询流水线触发器
 *
 * @return GetPipelineTriggerResponse
 */
async function getPipelineTrigger(name: string): GetPipelineTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineTriggerWithOptions(name, headers, runtime);
}

model GetPipelineTriggerEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTriggerEvent  
}

/**
 * @summary 查询流水线触发历史
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetPipelineTriggerEventResponse
 */
async function getPipelineTriggerEventWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetPipelineTriggerEventResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetPipelineTriggerEvent',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetriggerevents/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询流水线触发历史
 *
 * @return GetPipelineTriggerEventResponse
 */
async function getPipelineTriggerEvent(name: string): GetPipelineTriggerEventResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getPipelineTriggerEventWithOptions(name, headers, runtime);
}

model GetProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Project  
}

/**
 * @summary 查询项目
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetProjectResponse
 */
async function getProjectWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetProjectResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetProject',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/projects/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询项目
 *
 * @return GetProjectResponse
 */
async function getProject(name: string): GetProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getProjectWithOptions(name, headers, runtime);
}

model GetRepositoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Repository  
}

/**
 * @summary 查询仓库绑定
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetRepositoryResponse
 */
async function getRepositoryWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetRepositoryResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetRepository',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/repositories/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询仓库绑定
 *
 * @return GetRepositoryResponse
 */
async function getRepository(name: string): GetRepositoryResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getRepositoryWithOptions(name, headers, runtime);
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

/**
 * @summary 查询任务
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTaskResponse
 */
async function getTaskWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTask',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/tasks/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询任务
 *
 * @return GetTaskResponse
 */
async function getTask(name: string): GetTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTaskWithOptions(name, headers, runtime);
}

model GetTaskTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskTemplate  
}

/**
 * @summary 查询任务模板
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return GetTaskTemplateResponse
 */
async function getTaskTemplateWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): GetTaskTemplateResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'GetTaskTemplate',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/tasktemplates/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询任务模板
 *
 * @return GetTaskTemplateResponse
 */
async function getTaskTemplate(name: string): GetTaskTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return getTaskTemplateWithOptions(name, headers, runtime);
}

model ListConnectionsRequest {
  keyword?: string(name='keyword', example='auto-'),
  labelSelector?: [ string ](name='labelSelector'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
}

model ListConnectionsShrinkRequest {
  keyword?: string(name='keyword', example='auto-'),
  labelSelectorShrink?: string(name='labelSelector'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
}

model ListConnectionsResponseBody = {
  data?: [
    Connection
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
  totalCount?: long(name='totalCount', example='1'),
}

model ListConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConnectionsResponseBody(name='body'),
}

/**
 * @summary 批量查询身份绑定
 *
 * @param tmpReq ListConnectionsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListConnectionsResponse
 */
async function listConnectionsWithOptions(tmpReq: ListConnectionsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListConnectionsResponse {
  Util.validateModel(tmpReq);
  var request = new ListConnectionsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.labelSelector)) {
    request.labelSelectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelSelector, 'labelSelector', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.labelSelectorShrink)) {
    query['labelSelector'] = request.labelSelectorShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListConnections',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/connections`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询身份绑定
 *
 * @param request ListConnectionsRequest
 * @return ListConnectionsResponse
 */
async function listConnections(request: ListConnectionsRequest): ListConnectionsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listConnectionsWithOptions(request, headers, runtime);
}

model ListEnvironmentsRequest {
  keyword?: string(name='keyword', example='dev'),
  labelSelector?: [ string ](name='labelSelector'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
}

model ListEnvironmentsShrinkRequest {
  keyword?: string(name='keyword', example='dev'),
  labelSelectorShrink?: string(name='labelSelector'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
}

model ListEnvironmentsResponseBody = {
  data?: [
    Environment
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='50'),
  totalCount?: long(name='totalCount', example='100'),
}

model ListEnvironmentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvironmentsResponseBody(name='body'),
}

/**
 * @summary 查询环境列表
 *
 * @param tmpReq ListEnvironmentsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListEnvironmentsResponse
 */
async function listEnvironmentsWithOptions(project: string, tmpReq: ListEnvironmentsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListEnvironmentsResponse {
  Util.validateModel(tmpReq);
  var request = new ListEnvironmentsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.labelSelector)) {
    request.labelSelectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelSelector, 'labelSelector', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.labelSelectorShrink)) {
    query['labelSelector'] = request.labelSelectorShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListEnvironments',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/projects/${OpenApiUtil.getEncodeParam(project)}/environments/`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 查询环境列表
 *
 * @param request ListEnvironmentsRequest
 * @return ListEnvironmentsResponse
 */
async function listEnvironments(project: string, request: ListEnvironmentsRequest): ListEnvironmentsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listEnvironmentsWithOptions(project, request, headers, runtime);
}

model ListPipelineTemplatesRequest {
  labelSelector?: [ string ](name='labelSelector'),
}

model ListPipelineTemplatesShrinkRequest {
  labelSelectorShrink?: string(name='labelSelector'),
}

model ListPipelineTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [
    PipelineTemplate
  ](name='body'),
}

/**
 * @summary 批量查询流水线模板
 *
 * @param tmpReq ListPipelineTemplatesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPipelineTemplatesResponse
 */
async function listPipelineTemplatesWithOptions(tmpReq: ListPipelineTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelineTemplatesResponse {
  Util.validateModel(tmpReq);
  var request = new ListPipelineTemplatesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.labelSelector)) {
    request.labelSelectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelSelector, 'labelSelector', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.labelSelectorShrink)) {
    query['labelSelector'] = request.labelSelectorShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineTemplates',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetemplates`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询流水线模板
 *
 * @param request ListPipelineTemplatesRequest
 * @return ListPipelineTemplatesResponse
 */
async function listPipelineTemplates(request: ListPipelineTemplatesRequest): ListPipelineTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelineTemplatesWithOptions(request, headers, runtime);
}

model ListPipelineTriggerEventsRequest {
  keyword?: string(name='keyword', example='demo'),
  labelSelector?: [ string ](name='labelSelector'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
}

model ListPipelineTriggerEventsShrinkRequest {
  keyword?: string(name='keyword', example='demo'),
  labelSelectorShrink?: string(name='labelSelector'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
}

model ListPipelineTriggerEventsResponseBody = {
  data?: [
    PipelineTriggerEvent
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  totalCount?: long(name='totalCount', example='1'),
}

model ListPipelineTriggerEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPipelineTriggerEventsResponseBody(name='body'),
}

/**
 * @summary 批量查询流水线触发历史
 *
 * @param tmpReq ListPipelineTriggerEventsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPipelineTriggerEventsResponse
 */
async function listPipelineTriggerEventsWithOptions(tmpReq: ListPipelineTriggerEventsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelineTriggerEventsResponse {
  Util.validateModel(tmpReq);
  var request = new ListPipelineTriggerEventsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.labelSelector)) {
    request.labelSelectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelSelector, 'labelSelector', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.labelSelectorShrink)) {
    query['labelSelector'] = request.labelSelectorShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineTriggerEvents',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetriggerevents`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询流水线触发历史
 *
 * @param request ListPipelineTriggerEventsRequest
 * @return ListPipelineTriggerEventsResponse
 */
async function listPipelineTriggerEvents(request: ListPipelineTriggerEventsRequest): ListPipelineTriggerEventsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelineTriggerEventsWithOptions(request, headers, runtime);
}

model ListPipelineTriggersRequest {
  keyword?: string(name='keyword', example='demo'),
  labelSelector?: [ string ](name='labelSelector'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
}

model ListPipelineTriggersShrinkRequest {
  keyword?: string(name='keyword', example='demo'),
  labelSelectorShrink?: string(name='labelSelector'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
}

model ListPipelineTriggersResponseBody = {
  data?: [
    PipelineTrigger
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  totalCount?: long(name='totalCount', example='1'),
}

model ListPipelineTriggersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPipelineTriggersResponseBody(name='body'),
}

/**
 * @summary 批量查询流水线触发器
 *
 * @param tmpReq ListPipelineTriggersRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPipelineTriggersResponse
 */
async function listPipelineTriggersWithOptions(tmpReq: ListPipelineTriggersRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelineTriggersResponse {
  Util.validateModel(tmpReq);
  var request = new ListPipelineTriggersShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.labelSelector)) {
    request.labelSelectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelSelector, 'labelSelector', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.labelSelectorShrink)) {
    query['labelSelector'] = request.labelSelectorShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelineTriggers',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetriggers`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询流水线触发器
 *
 * @param request ListPipelineTriggersRequest
 * @return ListPipelineTriggersResponse
 */
async function listPipelineTriggers(request: ListPipelineTriggersRequest): ListPipelineTriggersResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelineTriggersWithOptions(request, headers, runtime);
}

model ListPipelinesRequest {
  labelSelector?: [ string ](name='labelSelector'),
}

model ListPipelinesShrinkRequest {
  labelSelectorShrink?: string(name='labelSelector'),
}

model ListPipelinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [
    Pipeline
  ](name='body'),
}

/**
 * @summary 批量查询流水线
 *
 * @param tmpReq ListPipelinesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListPipelinesResponse
 */
async function listPipelinesWithOptions(tmpReq: ListPipelinesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListPipelinesResponse {
  Util.validateModel(tmpReq);
  var request = new ListPipelinesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.labelSelector)) {
    request.labelSelectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelSelector, 'labelSelector', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.labelSelectorShrink)) {
    query['labelSelector'] = request.labelSelectorShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListPipelines',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelines`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询流水线
 *
 * @param request ListPipelinesRequest
 * @return ListPipelinesResponse
 */
async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listPipelinesWithOptions(request, headers, runtime);
}

model ListProjectsRequest {
  keyword?: string(name='keyword', example='spring-boot'),
  labelSelector?: [ string ](name='labelSelector'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
}

model ListProjectsShrinkRequest {
  keyword?: string(name='keyword', example='spring-boot'),
  labelSelectorShrink?: string(name='labelSelector'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
}

model ListProjectsResponseBody = {
  data?: [
    Project
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
  totalCount?: long(name='totalCount', example='1'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

/**
 * @summary 批量查询项目
 *
 * @param tmpReq ListProjectsRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListProjectsResponse
 */
async function listProjectsWithOptions(tmpReq: ListProjectsRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListProjectsResponse {
  Util.validateModel(tmpReq);
  var request = new ListProjectsShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.labelSelector)) {
    request.labelSelectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelSelector, 'labelSelector', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.labelSelectorShrink)) {
    query['labelSelector'] = request.labelSelectorShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListProjects',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/projects`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询项目
 *
 * @param request ListProjectsRequest
 * @return ListProjectsResponse
 */
async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listProjectsWithOptions(request, headers, runtime);
}

model ListRepositoriesRequest {
  keyword?: string(name='keyword', example='repo-start-springboot'),
  labelSelector?: [ string ](name='labelSelector'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
}

model ListRepositoriesShrinkRequest {
  keyword?: string(name='keyword', example='repo-start-springboot'),
  labelSelectorShrink?: string(name='labelSelector'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
}

model ListRepositoriesResponseBody = {
  data?: [
    Repository
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
  totalCount?: long(name='totalCount', example='1'),
}

model ListRepositoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRepositoriesResponseBody(name='body'),
}

/**
 * @summary 批量查询仓库绑定
 *
 * @param tmpReq ListRepositoriesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListRepositoriesResponse
 */
async function listRepositoriesWithOptions(tmpReq: ListRepositoriesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListRepositoriesResponse {
  Util.validateModel(tmpReq);
  var request = new ListRepositoriesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.labelSelector)) {
    request.labelSelectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelSelector, 'labelSelector', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.keyword)) {
    query['keyword'] = request.keyword;
  }
  if (!Util.isUnset(request.labelSelectorShrink)) {
    query['labelSelector'] = request.labelSelectorShrink;
  }
  if (!Util.isUnset(request.pageNumber)) {
    query['pageNumber'] = request.pageNumber;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['pageSize'] = request.pageSize;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListRepositories',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/repositories`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询仓库绑定
 *
 * @param request ListRepositoriesRequest
 * @return ListRepositoriesResponse
 */
async function listRepositories(request: ListRepositoriesRequest): ListRepositoriesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listRepositoriesWithOptions(request, headers, runtime);
}

model ListTaskTemplatesRequest {
  labelSelector?: [ string ](name='labelSelector'),
}

model ListTaskTemplatesShrinkRequest {
  labelSelectorShrink?: string(name='labelSelector'),
}

model ListTaskTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [
    TaskTemplate
  ](name='body'),
}

/**
 * @summary 批量查询任务模板
 *
 * @param tmpReq ListTaskTemplatesRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTaskTemplatesResponse
 */
async function listTaskTemplatesWithOptions(tmpReq: ListTaskTemplatesRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTaskTemplatesResponse {
  Util.validateModel(tmpReq);
  var request = new ListTaskTemplatesShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.labelSelector)) {
    request.labelSelectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelSelector, 'labelSelector', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.labelSelectorShrink)) {
    query['labelSelector'] = request.labelSelectorShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTaskTemplates',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/tasktemplates`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询任务模板
 *
 * @param request ListTaskTemplatesRequest
 * @return ListTaskTemplatesResponse
 */
async function listTaskTemplates(request: ListTaskTemplatesRequest): ListTaskTemplatesResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTaskTemplatesWithOptions(request, headers, runtime);
}

model ListTasksRequest {
  labelSelector?: [ string ](name='labelSelector'),
}

model ListTasksShrinkRequest {
  labelSelectorShrink?: string(name='labelSelector'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [
    Task
  ](name='body'),
}

/**
 * @summary 批量查询任务
 *
 * @param tmpReq ListTasksRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ListTasksResponse
 */
async function listTasksWithOptions(tmpReq: ListTasksRequest, headers: map[string]string, runtime: Util.RuntimeOptions): ListTasksResponse {
  Util.validateModel(tmpReq);
  var request = new ListTasksShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.labelSelector)) {
    request.labelSelectorShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.labelSelector, 'labelSelector', 'simple');
  }
  var query : map[string]any = {};
  if (!Util.isUnset(request.labelSelectorShrink)) {
    query['labelSelector'] = request.labelSelectorShrink;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTasks',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/tasks`,
    method = 'GET',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'array',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 批量查询任务
 *
 * @param request ListTasksRequest
 * @return ListTasksResponse
 */
async function listTasks(request: ListTasksRequest): ListTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return listTasksWithOptions(request, headers, runtime);
}

model PutEnvironmentRequest {
  body?: Environment(name='body'),
  force?: boolean(name='force', example='false'),
}

model PutEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Environment  
}

/**
 * @summary 更新环境（全局更新）
 *
 * @param request PutEnvironmentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutEnvironmentResponse
 */
async function putEnvironmentWithOptions(project: string, name: string, request: PutEnvironmentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PutEnvironmentResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'PutEnvironment',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/projects/${OpenApiUtil.getEncodeParam(project)}/environments/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新环境（全局更新）
 *
 * @param request PutEnvironmentRequest
 * @return PutEnvironmentResponse
 */
async function putEnvironment(project: string, name: string, request: PutEnvironmentRequest): PutEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return putEnvironmentWithOptions(project, name, request, headers, runtime);
}

model PutPipelineStatusRequest {
  body?: Pipeline(name='body'),
  force?: boolean(name='force', example='false'),
}

model PutPipelineStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

/**
 * @summary 更新流水线状态
 *
 * @param request PutPipelineStatusRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutPipelineStatusResponse
 */
async function putPipelineStatusWithOptions(name: string, request: PutPipelineStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PutPipelineStatusResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'PutPipelineStatus',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelines/${OpenApiUtil.getEncodeParam(name)}/status`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新流水线状态
 *
 * @param request PutPipelineStatusRequest
 * @return PutPipelineStatusResponse
 */
async function putPipelineStatus(name: string, request: PutPipelineStatusRequest): PutPipelineStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return putPipelineStatusWithOptions(name, request, headers, runtime);
}

model PutPipelineTemplateRequest {
  body?: PipelineTemplate(name='body'),
  force?: boolean(name='force', example='false'),
}

model PutPipelineTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTemplate  
}

/**
 * @summary 更新替换流水线模板
 *
 * @param request PutPipelineTemplateRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutPipelineTemplateResponse
 */
async function putPipelineTemplateWithOptions(name: string, request: PutPipelineTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PutPipelineTemplateResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'PutPipelineTemplate',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetemplates/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新替换流水线模板
 *
 * @param request PutPipelineTemplateRequest
 * @return PutPipelineTemplateResponse
 */
async function putPipelineTemplate(name: string, request: PutPipelineTemplateRequest): PutPipelineTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return putPipelineTemplateWithOptions(name, request, headers, runtime);
}

model PutPipelineTriggerRequest {
  body?: PipelineTrigger(name='body'),
  force?: boolean(name='force', example='false'),
}

model PutPipelineTriggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTrigger  
}

/**
 * @summary 更新替换流水线触发器
 *
 * @param request PutPipelineTriggerRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutPipelineTriggerResponse
 */
async function putPipelineTriggerWithOptions(name: string, request: PutPipelineTriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PutPipelineTriggerResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'PutPipelineTrigger',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetriggers/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新替换流水线触发器
 *
 * @param request PutPipelineTriggerRequest
 * @return PutPipelineTriggerResponse
 */
async function putPipelineTrigger(name: string, request: PutPipelineTriggerRequest): PutPipelineTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return putPipelineTriggerWithOptions(name, request, headers, runtime);
}

model PutProjectRequest {
  body?: Project(name='body'),
  force?: boolean(name='force', example='true'),
}

model PutProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Project  
}

/**
 * @summary 更新替换应用
 *
 * @param request PutProjectRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutProjectResponse
 */
async function putProjectWithOptions(name: string, request: PutProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PutProjectResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'PutProject',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/projects/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新替换应用
 *
 * @param request PutProjectRequest
 * @return PutProjectResponse
 */
async function putProject(name: string, request: PutProjectRequest): PutProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return putProjectWithOptions(name, request, headers, runtime);
}

model PutTaskStatusRequest {
  body?: Task(name='body'),
  force?: boolean(name='force', example='false'),
}

model PutTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

/**
 * @summary 更新替换任务状态
 *
 * @param request PutTaskStatusRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutTaskStatusResponse
 */
async function putTaskStatusWithOptions(name: string, request: PutTaskStatusRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PutTaskStatusResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'PutTaskStatus',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/tasks/${OpenApiUtil.getEncodeParam(name)}/status`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新替换任务状态
 *
 * @param request PutTaskStatusRequest
 * @return PutTaskStatusResponse
 */
async function putTaskStatus(name: string, request: PutTaskStatusRequest): PutTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return putTaskStatusWithOptions(name, request, headers, runtime);
}

model PutTaskTemplateRequest {
  body?: TaskTemplate(name='body'),
  force?: boolean(name='force', example='false'),
}

model PutTaskTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskTemplate  
}

/**
 * @summary 更新替换任务模板
 *
 * @param request PutTaskTemplateRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return PutTaskTemplateResponse
 */
async function putTaskTemplateWithOptions(name: string, request: PutTaskTemplateRequest, headers: map[string]string, runtime: Util.RuntimeOptions): PutTaskTemplateResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'PutTaskTemplate',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/tasktemplates/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新替换任务模板
 *
 * @param request PutTaskTemplateRequest
 * @return PutTaskTemplateResponse
 */
async function putTaskTemplate(name: string, request: PutTaskTemplateRequest): PutTaskTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return putTaskTemplateWithOptions(name, request, headers, runtime);
}

model RefreshConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Connection  
}

/**
 * @summary 检查并刷新身份绑定中的凭证和账号信息
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RefreshConnectionResponse
 */
async function refreshConnectionWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): RefreshConnectionResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RefreshConnection',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/connections/${OpenApiUtil.getEncodeParam(name)}/refresh`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 检查并刷新身份绑定中的凭证和账号信息
 *
 * @return RefreshConnectionResponse
 */
async function refreshConnection(name: string): RefreshConnectionResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return refreshConnectionWithOptions(name, headers, runtime);
}

model ResumeTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

/**
 * @summary 确认并继续执行任务
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return ResumeTaskResponse
 */
async function resumeTaskWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): ResumeTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'ResumeTask',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/tasks/${OpenApiUtil.getEncodeParam(name)}/resume`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 确认并继续执行任务
 *
 * @return ResumeTaskResponse
 */
async function resumeTask(name: string): ResumeTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return resumeTaskWithOptions(name, headers, runtime);
}

model RetryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

/**
 * @summary 重试执行任务
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return RetryTaskResponse
 */
async function retryTaskWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): RetryTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'RetryTask',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/tasks/${OpenApiUtil.getEncodeParam(name)}/retry`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 重试执行任务
 *
 * @return RetryTaskResponse
 */
async function retryTask(name: string): RetryTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return retryTaskWithOptions(name, headers, runtime);
}

model StartPipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

/**
 * @summary 开始执行流水线
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartPipelineResponse
 */
async function startPipelineWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): StartPipelineResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StartPipeline',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelines/${OpenApiUtil.getEncodeParam(name)}/start`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 开始执行流水线
 *
 * @return StartPipelineResponse
 */
async function startPipeline(name: string): StartPipelineResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startPipelineWithOptions(name, headers, runtime);
}

model StartTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

/**
 * @summary 开始执行任务
 *
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return StartTaskResponse
 */
async function startTaskWithOptions(name: string, headers: map[string]string, runtime: Util.RuntimeOptions): StartTaskResponse {
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
  };
  var params = new OpenApi.Params{
    action = 'StartTask',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/tasks/${OpenApiUtil.getEncodeParam(name)}/start`,
    method = 'PUT',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 开始执行任务
 *
 * @return StartTaskResponse
 */
async function startTask(name: string): StartTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return startTaskWithOptions(name, headers, runtime);
}

model UpdateEnvironmentRequest {
  body?: Environment(name='body'),
}

model UpdateEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Environment  
}

/**
 * @summary 更新环境（局部更新）
 *
 * @param request UpdateEnvironmentRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateEnvironmentResponse
 */
async function updateEnvironmentWithOptions(project: string, name: string, request: UpdateEnvironmentRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateEnvironmentResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateEnvironment',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/projects/${OpenApiUtil.getEncodeParam(project)}/environments/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新环境（局部更新）
 *
 * @param request UpdateEnvironmentRequest
 * @return UpdateEnvironmentResponse
 */
async function updateEnvironment(project: string, name: string, request: UpdateEnvironmentRequest): UpdateEnvironmentResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateEnvironmentWithOptions(project, name, request, headers, runtime);
}

model UpdatePipelineTriggerRequest {
  body?: PipelineTrigger(name='body'),
}

model UpdatePipelineTriggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTrigger  
}

/**
 * @summary 更新流水线触发器
 *
 * @param request UpdatePipelineTriggerRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdatePipelineTriggerResponse
 */
async function updatePipelineTriggerWithOptions(name: string, request: UpdatePipelineTriggerRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdatePipelineTriggerResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'UpdatePipelineTrigger',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/pipelinetriggers/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新流水线触发器
 *
 * @param request UpdatePipelineTriggerRequest
 * @return UpdatePipelineTriggerResponse
 */
async function updatePipelineTrigger(name: string, request: UpdatePipelineTriggerRequest): UpdatePipelineTriggerResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updatePipelineTriggerWithOptions(name, request, headers, runtime);
}

model UpdateProjectRequest {
  body?: Project(name='body'),
  force?: boolean(name='force', example='true'),
}

model UpdateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Project  
}

/**
 * @summary 更新替换应用
 *
 * @param request UpdateProjectRequest
 * @param headers map
 * @param runtime runtime options for this request RuntimeOptions
 * @return UpdateProjectResponse
 */
async function updateProjectWithOptions(name: string, request: UpdateProjectRequest, headers: map[string]string, runtime: Util.RuntimeOptions): UpdateProjectResponse {
  Util.validateModel(request);
  var query : map[string]any = {};
  if (!Util.isUnset(request.force)) {
    query['force'] = request.force;
  }

  var req = new OpenApi.OpenApiRequest{ 
    headers = headers,
    query = OpenApiUtil.query(query),
    body = OpenApiUtil.parseToMap(request.body),
  };
  var params = new OpenApi.Params{
    action = 'UpdateProject',
    version = '2023-07-14',
    protocol = 'HTTPS',
    pathname = `/2023-07-14/projects/${OpenApiUtil.getEncodeParam(name)}`,
    method = 'PATCH',
    authType = 'AK',
    style = 'ROA',
    reqBodyType = 'json',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
 * @summary 更新替换应用
 *
 * @param request UpdateProjectRequest
 * @return UpdateProjectResponse
 */
async function updateProject(name: string, request: UpdateProjectRequest): UpdateProjectResponse {
  var runtime = new Util.RuntimeOptions{};
  var headers : map[string]string = {};
  return updateProjectWithOptions(name, request, headers, runtime);
}

