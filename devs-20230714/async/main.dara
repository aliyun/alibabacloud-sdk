/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Devs';
  @version = '2023-07-14';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model Checkout {
  ref?: string(name='ref', example='+001691d0768ca49e9550beeb59fbc163f33b7e88:refs/remotes/origin/master'),
  remote?: string(name='remote', example='https:/your_token/@github.com/buptwzj/test-initRepo4.git'),
}

model CodeupEventPayload {
  originalPayload?: bytes(name='originalPayload'),
}

model Condition {
  expression?: string(name='expression'),
}

model Connection {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test-description'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Connection'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', example='my-connection', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec: ConnectionSpec(name='spec'),
  status?: ConnectionStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model ConnectionSpec {
  account?: GitAccount(name='account'),
  gitlabConfig?: GitLabConfig(name='gitlabConfig'),
  platform: string(name='platform', example='github'),
}

model ConnectionStatus {
  installation?: Installation(name='installation'),
}

model Context {
  data?: map[string]any(name='data'),
}

model ContextSchema {
  description?: string(name='description', example='[git](https://git-scm.com/) address for [git clone](https://git-scm.com/docs/git-clone).'),
  hint?: string(name='hint', example='git@gitlab.alibaba-inc.com:serverless/lambda.git'),
  name?: string(name='name', example='gitRepoUrl'),
  required?: boolean(name='required', example='true'),
  type?: string(name='type', example='string'),
}

model Environment {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test env'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Environment'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', example='demo-env'),
  projectName?: string(name='projectName', example='demo-project'),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec: EnvironmentSpec(name='spec'),
  status?: EnvironmentStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model EnvironmentSpec {
  alias?: string(name='alias', example='dev'),
  infraStackConfig?: InfraStackSpec(name='infraStackConfig'),
  isAutoDeploy?: boolean(name='isAutoDeploy'),
  repositoryConfig?: RepositoryConfig(name='repositoryConfig'),
  roleArn?: string(name='roleArn', example='acs:ram::*******:role/aliyundevsdefaultrole'),
  serviceOverlay?: {
    components?: map[string]any(name='components', example='{"fc3":{"timeout":600}}'),
    resources?: map[string]any(name='resources', example='{"dummyFunction":{"timeout":600}}'),
  }(name='serviceOverlay'),
  templateConfig?: TemplateConfig(name='templateConfig'),
  type?: string(name='type', example='Testing'),
}

model EnvironmentStatus {
  infraStackStatus?: InfraStackStatus(name='infraStackStatus'),
  latestReleaseDetail?: ReleaseDetail(name='latestReleaseDetail'),
  observedGeneration?: long(name='observedGeneration', example='1'),
  observedTime?: string(name='observedTime', example='2021-11-19T09:34:38Z'),
}

model EventFilterConfig {
  pullRequest?: PullRequestFilter(name='pullRequest'),
  push?: PushFilter(name='push'),
}

model EventPayload {
  codeup?: CodeupEventPayload(name='codeup'),
  gitee?: GiteeEventPayload(name='gitee'),
  github?: GithubEventPayload(name='github'),
  gitlab?: GitlabEventPayload(name='gitlab'),
  manual?: ManualEventPayload(name='manual'),
}

model GitAccount {
  avatar?: string(name='avatar', example='https://gitee.com/assets/no_portrait.png'),
  displayName?: string(name='displayName', example='your_displayname'),
  id?: string(name='id', example='1'),
  name?: string(name='name', example='your_username'),
  uri?: string(name='uri', example='https://gitlab.com'),
}

model GitEventSnapshot {
  branch?: string(name='branch', example='main'),
  commitID?: string(name='commitID', example='12721ec262d03a93809ba2bbc717963cb298ceca'),
  tag?: string(name='tag', example='1.0'),
}

model GitLabConfig {
  token?: string(name='token', example='your-token'),
  uri?: string(name='uri', example='http://gitlab.c16194660f14898a0810408171302ac.cn-shanghai.alicontainer.com/'),
}

model GiteeEventPayload {
  originalPayload?: bytes(name='originalPayload'),
}

model GithubEventPayload {
  originalPayload?: bytes(name='originalPayload'),
}

model GitlabEventPayload {
  originalPayload?: bytes(name='originalPayload'),
}

model InfraStackResourceState {
  resourceDrifts?: [
    ResourceDrift
  ](name='resourceDrifts'),
  resources?: [
    ResourceDetail
  ](name='resources'),
}

model InfraStackSpec {
  regionID: string(name='regionID', example='cn-hangzhou'),
  roleArn?: string(name='roleArn', example='acs:ram::1234567890:role/devs-role'),
  templateName?: string(name='templateName', example='serverless.devs.com/fc-builtin'),
  templateSpec?: {
    content?: string(name='content', example='"\\nresource \\"alicloud_fc_service\\" \\"default\\" {\\n  name        = \\"xiliu-tf-test-srv4\\"\\n  description = \\"xiliu tf  test service \\"\\n}\\n\\n\\nresource \\"alicloud_oss_bucket\\" \\"default\\" {\\n  bucket = \\"xiliu-test-tf-bucket4\\"\\n  acl    = \\"private\\"\\n}\\n\\noutput \\"service_name\\" {\\n  value = alicloud_fc_service.default.name\\n}\\n\\noutput \\"oss_bucket\\" {\\n  value = alicloud_oss_bucket.default.bucket\\n}",'),
    engine?: string(name='engine', example='terrafrom'),
  }(name='templateSpec'),
  templateVariables?: map[string]any(name='templateVariables', example='{"testKey":"testValue"}'),
}

model InfraStackStatus {
  message?: string(name='message', example='Success!'),
  observedGeneration?: int32(name='observedGeneration', example='0'),
  observedTime?: string(name='observedTime', example='2021-10-08T23:14:16Z'),
  phase?: string(name='phase', example='DeploySuccess'),
  resourceState?: InfraStackResourceState(name='resourceState'),
  templateOutputs?: map[string]any(name='templateOutputs', example='{"vpcId":"vpc-xxx"}'),
  templateStatus?: {
    outputs: [
      TerraformOutputValue
    ](name='outputs'),
    variables: [
      TerraformInputVariable
    ](name='variables'),
  }(name='templateStatus'),
}

model Installation {
  actionUri?: string(name='actionUri', example='https://github.com/login/oauth/authorize?client_id=86059a1b2bb20d3e5fc3&scope=repo,repo:status,delete_repo'),
  message?: string(name='message', example='Please click \\"actionUri\\" to complete the OAuth authorization process'),
  stage?: string(name='stage', example='finished'),
}

model ManualEventPayload {
  branch?: string(name='branch'),
  commitID?: string(name='commitID'),
  tag?: string(name='tag'),
  templateConfig?: TemplateConfig(name='templateConfig'),
}

model OAuthCredential {
  createdTime: long(name='createdTime', example='1716176924603'),
  expiration: long(name='expiration', example='1716263324603'),
  refreshToken?: string(name='refreshToken', example='4d77bfae284770d94ebeed6b0199ebfd65e3943ba4f1e44dc36d792a93ba0d13'),
  scope?: string(name='scope', example='user_info projects pull_requests hook gists emails'),
  token: string(name='token', example='4e84246b6b3962cd3d207aad1ea2f911'),
  type?: string(name='type', example='bearer'),
}

model Pipeline {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  deletionTime?: string(name='deletionTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='Pipeline example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Pipeline'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', example='my-pipeline', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: PipelineSpec(name='spec'),
  status?: PipelineStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model PipelineSpec {
  context?: Context(name='context'),
  templateName?: string(name='templateName', example='my-pipeline-template'),
  templateSpec?: PipelineTemplateSpec(name='templateSpec'),
}

model PipelineStatus {
  latestExecError?: TaskExecError(name='latestExecError'),
  phase?: string(name='phase', example='Success'),
}

model PipelineTemplate {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  deletionTime?: string(name='deletionTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='PipelineTemplate example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='PipelineTemplate'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', example='my-pipeline-template', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: PipelineTemplateSpec(name='spec'),
  uid?: string(name='uid', example='1455541096***548'),
}

model PipelineTemplateSpec {
  context?: Context(name='context'),
  tasks?: [
    TaskExec
  ](name='tasks'),
}

model PipelineTrigger {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  deletionTime?: string(name='deletionTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='PipelineTrigger example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='PipelineTrigger'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', example='my-pipeline-trigger', minLength=1, maxLength=63),
  projectName: string(name='projectName', example='my-project', minLength=1, maxLength=63),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: PipelineTriggerSpec(name='spec'),
  uid?: string(name='uid', example='1455541096***548'),
}

model PipelineTriggerEvent {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  deletionTime?: string(name='deletionTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='PipelineTriggerEvent example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='PipelineTriggerEvent'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', example='my-pipeline-trigger', minLength=1, maxLength=63),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: PipelineTriggerEventSpec(name='spec'),
  status?: PipelineTriggerEventStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model PipelineTriggerEventSpec {
  payload?: EventPayload(name='payload'),
  triggerName?: string(name='triggerName'),
}

model PipelineTriggerEventStatus {
  errorMessage?: string(name='errorMessage', example='failed to create and start pipeline, error=message'),
  firedPipelineName?: string(name='firedPipelineName', example='my-pipeline'),
  releaseDetail?: ReleaseDetail(name='releaseDetail'),
  status?: string(name='status', example='Skipped,Fired,Running,Failed,Success'),
}

model PipelineTriggerSpec {
  eventFilter: EventFilterConfig(name='eventFilter'),
  roleArn?: string(name='roleArn', example='acs:ram::1431999****8149:role/aliyundevsdefaultrole'),
  runPipeline?: RunPipelineConfig(name='runPipeline'),
}

model Project {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test-description'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Project'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', example='my-project', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: ProjectSpec(name='spec'),
  status?: ProjectStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
  updatedTime?: string(name='updatedTime', example='2021-11-19T09:34:38Z'),
}

model ProjectSpec {
  roleArn?: string(name='roleArn', example='acs:ram::1431999****8149:role/aliyundevsdefaultrole'),
  templateConfig?: TemplateConfig(name='templateConfig'),
  token?: string(name='token', example='9D72DE01-C732-49C0-8E85-FFD9D695436B'),
}

model ProjectStatus {
  latestReleaseDetail?: ReleaseDetail(name='latestReleaseDetail'),
  observedGeneration?: long(name='observedGeneration', example='1'),
  observedTime?: string(name='observedTime', example='2021-11-19T09:34:38Z'),
}

model PullRequestFilter {
  sourceBranch?: string(name='sourceBranch', example='feature-.*'),
  targetBranch?: string(name='targetBranch', example='master'),
  types?: [ string ](name='types'),
}

model PushFilter {
  branch?: string(name='branch', example='master'),
  tag?: string(name='tag', example='prod-.*'),
}

model ReleaseDetail {
  bizStatus?: string(name='bizStatus', example='Running'),
  envName?: string(name='envName', example='dev'),
  finishedTime?: string(name='finishedTime', example='2021-11-19T09:34:38Z'),
  gitEventSnapshot?: GitEventSnapshot(name='gitEventSnapshot'),
  latestTaskExecError?: TaskExecError(name='latestTaskExecError'),
  message?: string(name='message', example='Triggered manually.'),
  pipelineName?: string(name='pipelineName', example='p-1704952599751-wUOczb'),
  pipelineTriggerEventName?: string(name='pipelineTriggerEventName', example='p-codeup-1714271977972-pa4w'),
  releaseOutputs?: map[string]any(name='releaseOutputs', example='{"framework":{"region":"cn-hangzhou","service":{"serviceName":"web-framework","description":"Serverless Devs Web Framework Service","role":"","logConfig":{"project":"","logstore":"","enableRequestMetrics":false,"enableInstanceMetrics":false,"logBeginRule":"None"},"serviceId":"4c9d0e79-16b8-4951-a6b8-169d2037d217","createdTime":"2021-12-07T09:24:08Z","lastModifiedTime":"2022-04-09T09:16:51Z","vpcConfig":{"vpcId":"","vSwitchIds":[],"securityGroupId":"","role":""},"internetAccess":true,"nasConfig":{"userId":-1,"groupId":-1,"mountPoints":[]},"tracingConfig":{},"name":"web-framework"},"function":{"functionId":"e81904f0-24d0-45df-bb53-06da64d01395","functionName":"todolist","description":"Serverless Devs Web Framework Function","runtime":"nodejs12","handler":"index.handler","timeout":60,"initializer":"","initializationTimeout":3,"codeSize":1757093,"codeChecksum":"7185648203525194222","memorySize":256,"environmentVariables":{},"createdTime":"2022-03-15T15:36:22Z","lastModifiedTime":"2022-04-09T09:16:50Z","instanceConcurrency":1,"instanceType":"e1","instanceLifecycleConfig":{"preFreeze":{"handler":"","timeout":3},"preStop":{"handler":"","timeout":3}},"name":"todolist"},"triggers":[{"triggerName":"httpTrigger","description":"","triggerId":"7f2373ce-df1a-4013-b4e5-899989d9b27e","triggerType":"http","triggerConfig":{"methods":["GET","POST"],"authType":"anonymous"},"createdTime":"2022-03-15T15:36:23Z","lastModifiedTime":"2022-04-09T09:16:51Z","name":"httpTrigger"}],"customDomains":[{"domainName":"todolist.web-framework.1835799444022432.cn-hangzhou.fc.devsapp.net","accountId":"1835799444022432","protocol":"HTTP","certConfig":{},"tlsConfig":{},"apiVersion":"2016-08-15","routeConfig":{"routes":[{"path":"/*","serviceName":"web-framework","functionName":"todolist","methods":["GET","POST"]}]},"createdTime":"2022-03-15T15:36:28Z","lastModifiedTime":"2022-04-09T09:17:00Z"}]}}'),
  repositorySnapshot?: RepositorySpec(name='repositorySnapshot'),
  templateConfigSnapshot?: TemplateConfig(name='templateConfigSnapshot'),
}

model Repository {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test-description'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Repository'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', example='my-repository', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec: RepositorySpec(name='spec'),
  uid?: string(name='uid', example='1455541096***548'),
}

model RepositoryConfig {
  branchName: string(name='branchName', example='master'),
  manifest?: string(name='manifest', example='src/s.yaml'),
  repositoryName: string(name='repositoryName', example='my-repository'),
}

model RepositorySpec {
  cloneUrl: string(name='cloneUrl', example='https://github.com/DDofDD/start-springboot-lfgy.git'),
  connectionName: string(name='connectionName', example='awesome-connection'),
  displayName?: string(name='displayName', example='my-repo-name'),
  id?: long(name='id', example='312649'),
  owner?: string(name='owner', example='my-org-name'),
  platform?: string(name='platform', example='github'),
  webUrl?: string(name='webUrl', example='https://github.com/my-org-name/my-repo-name'),
}

model ResourceDetail {
  address?: string(name='address', example='alicloud_fc_trigger.cn-shanghai-fc-stable-diffusion-sd'),
  attributeValues?: map[string]any(name='attributeValues', example='{"config":"{\\"methods\\":[\\"GET\\",\\"POST\\",\\"PUT\\",\\"DELETE\\"],\\"authType\\":\\"anonymous\\",\\"disableURLInternet\\":true}","config_mns":null,"function":"sd","id":"fc-stable-diffusion:sd:defaultTrigger","last_modified":"2024-04-17T13:20:53Z","name":"defaultTrigger","name_prefix":null,"role":"","service":"fc-stable-diffusion","source_arn":"","trigger_id":"mock-trigger","type":"http"}'),
  mode?: string(name='mode', example='managed'),
  name?: string(name='name', example='cn-shanghai-fc-stable-diffusion-sd'),
  type?: string(name='type', example='alicloud_fc_trigger'),
}

model ResourceDrift {
  address?: string(name='address', example='alicloud_fc_trigger.cn-shanghai-fc-stable-diffusion-sd'),
  change?: {
    actions?: [ string ](name='actions'),
    after?: any(name='after', example='{"description":"mock deployment","id":"fc-demo-model-scope","internet_access":true,"last_modified":"2024-04-17T13:20:56Z","log_config":[],"name":"fc-demo-model-scope","name_prefix":null,"nas_config":[{"group_id":0,"mount_points":[{"mount_dir":"/mnt/auto","server_addr":"mock-addr.cn-shanghai.nas.aliyuncs.com:/fc-demo-model-scope"}],"user_id":0}],"publish":null,"role":"acs:ram::mock-role:role/aliyunfcdefaultrole","service_id":"mock-service","tags":null,"tracing_config":[],"version":null,"vpc_config":[{"security_group_id":"sg-mock","vpc_id":"vpc-mock","vswitch_ids":["vsw-mock"]}]}'),
    before?: any(name='before', example='{"description":"modelscope deployment","id":"fc-demo-model-scope","internet_access":true,"last_modified":"2024-04-17T13:20:56Z","log_config":[],"name":"fc-demo-model-scope","name_prefix":null,"nas_config":[{"group_id":0,"mount_points":[{"mount_dir":"/mnt/auto","server_addr":"mock-addr.cn-shanghai.nas.aliyuncs.com:/fc-demo-model-scope"}],"user_id":0}],"publish":null,"role":"acs:ram::mock-role:role/aliyunfcdefaultrole","service_id":"mock-service","tags":null,"tracing_config":[],"version":null,"vpc_config":[{"security_group_id":"sg-mock","vpc_id":"vpc-mock","vswitch_ids":["vsw-mock"]}]}'),
  }(name='change'),
  mode?: string(name='mode', example='managed'),
  name?: string(name='name', example='cn-shanghai-fc-stable-diffusion-sd'),
  type?: string(name='type', example='alicloud_fc_trigger'),
}

model RunAfter {
  name?: string(name='name', example='task-1'),
}

model RunPipelineConfig {
  pipelineSpec?: PipelineSpec(name='pipelineSpec'),
  variables?: [
    Variable
  ](name='variables'),
  yamlFileContent?: string(name='yamlFileContent'),
  yamlFilePath?: string(name='yamlFilePath'),
}

model ServiceSpec {
  environment: string(name='environment', example='my-env'),
  roleArn?: string(name='roleArn', example='acs:ram::1455541096306548:role/aliyunfcdefaultrole'),
  template: string(name='template', example='serverless-devs.com/alicloud-multi-functions/service-single-function/deployment'),
  templateVariables: map[string]any(name='templateVariables'),
  templateVersion?: int32(name='templateVersion', example='1'),
}

model Task {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  deletionTime?: string(name='deletionTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='Task example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Task'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', example='my-task', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: TaskSpec(name='spec'),
  status?: TaskStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model TaskExec {
  context?: Context(name='context'),
  name?: string(name='name', example='task-1'),
  runAfters?: [
    RunAfter
  ](name='runAfters'),
  taskTemplate?: string(name='taskTemplate', example='serverless-runner'),
}

model TaskExecError {
  code?: string(name='code', example='AccessDenied'),
  extraInfo?: string(name='extraInfo', example='部署辅助函数权限不足，需要添加额外的权限以解决问题。https://help.aliyun.com'),
  message?: string(name='message', example='部署服务[_appcenter-xxx]失败，权限不足'),
  requestId?: string(name='requestId', example='1-26d1287xxxxx'),
  title?: string(name='title', example='权限不足错误'),
}

model TaskInvocation {
  instanceID?: string(name='instanceID', example='c-nkj8shz7xxxx'),
  invocationID?: string(name='invocationID', example='E099843B-10A2-4936-9964-4E0EE263D564'),
  invocationTarget?: string(name='invocationTarget', example='acs:fc:cn-hangzhou:143xxxx:services/xxx.LATEST/functions/xxx'),
  output?: string(name='output', example='{"key1":"value1","key2":"value2"}'),
  requestID?: string(name='requestID', example='1B3058B1-F1C9-457C-B95C-2C250A4B3118'),
  slsLogStore?: string(name='slsLogStore', example='my-sls-logstore'),
  slsProject?: string(name='slsProject', example='my-sls-project'),
  status?: string(name='status', example='success'),
}

model TaskSpec {
  context?: Context(name='context'),
  templateName?: string(name='templateName', example='my-task-template'),
}

model TaskStatus {
  executionDetails?: [ string ](name='executionDetails'),
  invocations?: [
    TaskInvocation
  ](name='invocations'),
  latestExecError?: TaskExecError(name='latestExecError'),
  phase?: string(name='phase', example='Success'),
  statusGeneration?: long(name='statusGeneration', example='123'),
}

model TaskTemplate {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  deletionTime?: string(name='deletionTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='TaskTemplate example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='TaskTemplate'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', example='my-task-template', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: TaskTemplateSpec(name='spec'),
  uid?: string(name='uid', example='1455541096***548'),
}

model TaskTemplateSpec {
  context?: Context(name='context'),
  description?: string(name='description', example='build&deploy.'),
  executeCondition?: Condition(name='executeCondition'),
  worker?: TaskWorker(name='worker'),
}

model TaskWorker {
  presetWorker?: string(name='presetWorker', example='serverless-runner'),
}

model TemplateConfig {
  parameters?: map[string]any(name='parameters', example='{"region":"cn-hangzhou"}'),
  templateName: string(name='templateName', example='start-springboot'),
}

model TerraformInputVariable {
  defaultJson?: string(name='defaultJson', example='{"key":"value"}'),
  description?: string(name='description', example='test variable'),
  name: string(name='name', example='namePrefix'),
  nullable?: boolean(name='nullable', example='true'),
  sensitive?: boolean(name='sensitive', example='false'),
  type?: string(name='type', example='string'),
}

model TerraformOutputValue {
  description?: string(name='description', example='The VPC ID where the resource is located.'),
  name: string(name='name', example='vpcId'),
  sensitive?: boolean(name='sensitive', example='false'),
}

model Variable {
  name?: string(name='name', example='object_key'),
  value?: string(name='value', example='object_value'),
}

model ActivateConnectionRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  account?: GitAccount(name='account', position='Body'),
  credential?: OAuthCredential(name='credential', position='Body'),
}

model ActivateConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Connection  
}

async function activateConnection(request: ActivateConnectionRequest): ActivateConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ActivateConnection', 'PATCH', '/2023-07-14/connections/{name}/activate', 'json', false, 'json', request);
}

model CancelPipelineRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model CancelPipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

async function cancelPipeline(request: CancelPipelineRequest): CancelPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelPipeline', 'PUT', '/2023-07-14/pipelines/{name}/cancel', 'json', false, 'json', request);
}

model CancelTaskRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model CancelTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelTask', 'PUT', '/2023-07-14/tasks/{name}/cancel', 'json', false, 'json', request);
}

model CreateConnectionRequest {
  body?: Connection(name='body', position='Body'),
}

model CreateConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Connection  
}

async function createConnection(request: CreateConnectionRequest): CreateConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateConnection', 'POST', '/2023-07-14/connections', 'json', false, 'json', request);
}

model CreateEnvironmentRequest {
  project: string(name='project', example='demo-project', position='Path'),
  body?: Environment(name='body', position='Body'),
}

model CreateEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Environment  
}

async function createEnvironment(request: CreateEnvironmentRequest): CreateEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateEnvironment', 'POST', '/2023-07-14/projects/{project}/environments', 'json', false, 'json', request);
}

model CreatePipelineRequest {
  body?: Pipeline(name='body', position='Body'),
}

model CreatePipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePipeline', 'POST', '/2023-07-14/pipelines', 'json', false, 'json', request);
}

model CreatePipelineTemplateRequest {
  body?: PipelineTemplate(name='body', position='Body'),
}

model CreatePipelineTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTemplate  
}

async function createPipelineTemplate(request: CreatePipelineTemplateRequest): CreatePipelineTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePipelineTemplate', 'POST', '/2023-07-14/pipelinetemplates', 'json', false, 'json', request);
}

model CreatePipelineTriggerRequest {
  body?: PipelineTrigger(name='body', position='Body'),
}

model CreatePipelineTriggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTrigger  
}

async function createPipelineTrigger(request: CreatePipelineTriggerRequest): CreatePipelineTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePipelineTrigger', 'POST', '/2023-07-14/pipelinetriggers', 'json', false, 'json', request);
}

model CreatePipelineTriggerEventRequest {
  body?: PipelineTriggerEvent(name='body', position='Body'),
}

model CreatePipelineTriggerEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTriggerEvent  
}

async function createPipelineTriggerEvent(request: CreatePipelineTriggerEventRequest): CreatePipelineTriggerEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePipelineTriggerEvent', 'POST', '/2023-07-14/pipelinetriggerevents', 'json', false, 'json', request);
}

model CreateProjectRequest {
  body?: Project(name='body', position='Body'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Project  
}

async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProject', 'POST', '/2023-07-14/projects', 'json', false, 'json', request);
}

model CreateRepositoryRequest {
  body?: Repository(name='body', position='Body'),
}

model CreateRepositoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Repository  
}

async function createRepository(request: CreateRepositoryRequest): CreateRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateRepository', 'POST', '/2023-07-14/repositories', 'json', false, 'json', request);
}

model CreateTaskRequest {
  body?: Task(name='body', position='Body'),
}

model CreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTask', 'POST', '/2023-07-14/tasks', 'json', false, 'json', request);
}

model CreateTaskTemplateRequest {
  body?: TaskTemplate(name='body', position='Body'),
}

model CreateTaskTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskTemplate  
}

async function createTaskTemplate(request: CreateTaskTemplateRequest): CreateTaskTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTaskTemplate', 'POST', '/2023-07-14/tasktemplates', 'json', false, 'json', request);
}

model DeleteConnectionRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  force?: boolean(name='force', example='true', position='Query'),
}

model DeleteConnectionResponseBody = {
  requestId?: string(name='requestId', example='A5152937-1C8A-5260-90FA-520CEF028D2D'),
}

model DeleteConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConnectionResponseBody(name='body'),
}

async function deleteConnection(request: DeleteConnectionRequest): DeleteConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConnection', 'DELETE', '/2023-07-14/connections/{name}', 'json', false, 'json', request);
}

model DeleteEnvironmentRequest {
  project: string(name='project', example='demo-project', position='Path'),
  name: string(name='name', example='demo-env', position='Path'),
}

model DeleteEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

async function deleteEnvironment(request: DeleteEnvironmentRequest): DeleteEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteEnvironment', 'DELETE', '/2023-07-14/projects/{project}/environments/{name}', 'none', false, 'json', request);
}

model DeletePipelineTemplateRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model DeletePipelineTemplateResponseBody = {
  requestId?: string(name='requestId', example='E2977805-E133-5966-878B-6499E6A04D3C'),
}

model DeletePipelineTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePipelineTemplateResponseBody(name='body'),
}

async function deletePipelineTemplate(request: DeletePipelineTemplateRequest): DeletePipelineTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePipelineTemplate', 'DELETE', '/2023-07-14/pipelinetemplates/{name}', 'json', false, 'json', request);
}

model DeletePipelineTriggerRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model DeletePipelineTriggerResponseBody = {
  requestId?: string(name='requestId', example='A5152937-1C8A-5260-90FA-520CEF028D2D'),
}

model DeletePipelineTriggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePipelineTriggerResponseBody(name='body'),
}

async function deletePipelineTrigger(request: DeletePipelineTriggerRequest): DeletePipelineTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePipelineTrigger', 'DELETE', '/2023-07-14/pipelinetriggers/{name}', 'json', false, 'json', request);
}

model DeletePipelineTriggerEventRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model DeletePipelineTriggerEventResponseBody = {
  requestId?: string(name='requestId', example='BD835E20-EA35-5EE9-A38E-15F9E4AC0B73'),
}

model DeletePipelineTriggerEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePipelineTriggerEventResponseBody(name='body'),
}

async function deletePipelineTriggerEvent(request: DeletePipelineTriggerEventRequest): DeletePipelineTriggerEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeletePipelineTriggerEvent', 'DELETE', '/2023-07-14/pipelinetriggerevents/{name}', 'json', false, 'json', request);
}

model DeleteProjectRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  force?: boolean(name='force', example='true', position='Query'),
}

model DeleteProjectResponseBody = {
  requestId?: string(name='requestId', example='D9A4CC0F-132B-5EDC-B252-5E11ADFA4B4E'),
}

model DeleteProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteProjectResponseBody(name='body'),
}

async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProject', 'DELETE', '/2023-07-14/projects/{name}', 'json', false, 'json', request);
}

model DeleteRepositoryRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model DeleteRepositoryResponseBody = {
  requestId?: string(name='requestId', example='1EEC6F09-A0DA-5A0E-9C3A-DA90B4346B9A'),
}

model DeleteRepositoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteRepositoryResponseBody(name='body'),
}

async function deleteRepository(request: DeleteRepositoryRequest): DeleteRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteRepository', 'DELETE', '/2023-07-14/repositories/{name}', 'json', false, 'json', request);
}

model DeleteTaskTemplateRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model DeleteTaskTemplateResponseBody = {
  requestId?: string(name='requestId', example='C08FBF2B-9F8E-5415-9EB1-3DC741805C29'),
}

model DeleteTaskTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTaskTemplateResponseBody(name='body'),
}

async function deleteTaskTemplate(request: DeleteTaskTemplateRequest): DeleteTaskTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteTaskTemplate', 'DELETE', '/2023-07-14/tasktemplates/{name}', 'json', false, 'json', request);
}

model FetchConnectionCredentialRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model FetchConnectionCredentialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OAuthCredential  
}

async function fetchConnectionCredential(request: FetchConnectionCredentialRequest): FetchConnectionCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FetchConnectionCredential', 'GET', '/2023-07-14/connections/{name}/fetchCredential', 'json', false, 'json', request);
}

model FetchRepositoryCheckoutRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  branch?: string(name='branch', example='main', position='Query'),
  commit?: string(name='commit', example='8828d0087db4210bb1bfeadba90ae52f2938431d', position='Query'),
  tag?: string(name='tag', example='v1.31.0-alpha.0', position='Query'),
}

model FetchRepositoryCheckoutResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Checkout  
}

async function fetchRepositoryCheckout(request: FetchRepositoryCheckoutRequest): FetchRepositoryCheckoutResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FetchRepositoryCheckout', 'GET', '/2023-07-14/repositories/{name}/fetchCheckout', 'json', false, 'json', request);
}

model GetConnectionRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Connection  
}

async function getConnection(request: GetConnectionRequest): GetConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetConnection', 'GET', '/2023-07-14/connections/{name}', 'json', false, 'json', request);
}

model GetEnvironmentRequest {
  project: string(name='project', example='demo-project', position='Path'),
  name: string(name='name', example='demo-env', position='Path'),
}

model GetEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Environment  
}

async function getEnvironment(request: GetEnvironmentRequest): GetEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEnvironment', 'GET', '/2023-07-14/projects/{project}/environments/{name}', 'json', false, 'json', request);
}

model GetPipelineRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetPipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

async function getPipeline(request: GetPipelineRequest): GetPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipeline', 'GET', '/2023-07-14/pipelines/{name}', 'json', false, 'json', request);
}

model GetPipelineTemplateRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetPipelineTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTemplate  
}

async function getPipelineTemplate(request: GetPipelineTemplateRequest): GetPipelineTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineTemplate', 'GET', '/2023-07-14/pipelinetemplates/{name}', 'json', false, 'json', request);
}

model GetPipelineTriggerRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetPipelineTriggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTrigger  
}

async function getPipelineTrigger(request: GetPipelineTriggerRequest): GetPipelineTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineTrigger', 'GET', '/2023-07-14/pipelinetriggers/{name}', 'json', false, 'json', request);
}

model GetPipelineTriggerEventRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetPipelineTriggerEventResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTriggerEvent  
}

async function getPipelineTriggerEvent(request: GetPipelineTriggerEventRequest): GetPipelineTriggerEventResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipelineTriggerEvent', 'GET', '/2023-07-14/pipelinetriggerevents/{name}', 'json', false, 'json', request);
}

model GetProjectRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Project  
}

async function getProject(request: GetProjectRequest): GetProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProject', 'GET', '/2023-07-14/projects/{name}', 'json', false, 'json', request);
}

model GetRepositoryRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetRepositoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Repository  
}

async function getRepository(request: GetRepositoryRequest): GetRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepository', 'GET', '/2023-07-14/repositories/{name}', 'json', false, 'json', request);
}

model GetTaskRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTask', 'GET', '/2023-07-14/tasks/{name}', 'json', false, 'json', request);
}

model GetTaskTemplateRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetTaskTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskTemplate  
}

async function getTaskTemplate(request: GetTaskTemplateRequest): GetTaskTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTaskTemplate', 'GET', '/2023-07-14/tasktemplates/{name}', 'json', false, 'json', request);
}

model ListConnectionsRequest {
  keyword?: string(name='keyword', example='auto-', position='Query'),
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='100', position='Query'),
}

model ListConnectionsResponseBody = {
  data?: [
    Connection
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
  totalCount?: long(name='totalCount', example='1'),
}

model ListConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConnectionsResponseBody(name='body'),
}

async function listConnections(request: ListConnectionsRequest): ListConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConnections', 'GET', '/2023-07-14/connections', 'json', false, 'json', request);
}

model ListEnvironmentsRequest {
  project: string(name='project', example='demo-project', position='Path'),
  keyword?: string(name='keyword', example='dev', position='Query'),
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
}

model ListEnvironmentsResponseBody = {
  data?: [
    Environment
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='50'),
  totalCount?: long(name='totalCount', example='100'),
}

model ListEnvironmentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvironmentsResponseBody(name='body'),
}

async function listEnvironments(request: ListEnvironmentsRequest): ListEnvironmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEnvironments', 'GET', '/2023-07-14/projects/{project}/environments/', 'json', false, 'json', request);
}

model ListPipelineTemplatesRequest {
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
}

model ListPipelineTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [
    PipelineTemplate
  ](name='body'),
}

async function listPipelineTemplates(request: ListPipelineTemplatesRequest): ListPipelineTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineTemplates', 'GET', '/2023-07-14/pipelinetemplates', 'array', false, 'json', request);
}

model ListPipelineTriggerEventsRequest {
  keyword?: string(name='keyword', example='demo', position='Query'),
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
}

model ListPipelineTriggerEventsResponseBody = {
  data?: [
    PipelineTriggerEvent
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  totalCount?: long(name='totalCount', example='1'),
}

model ListPipelineTriggerEventsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPipelineTriggerEventsResponseBody(name='body'),
}

async function listPipelineTriggerEvents(request: ListPipelineTriggerEventsRequest): ListPipelineTriggerEventsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineTriggerEvents', 'GET', '/2023-07-14/pipelinetriggerevents', 'json', false, 'json', request);
}

model ListPipelineTriggersRequest {
  keyword?: string(name='keyword', example='demo', position='Query'),
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
}

model ListPipelineTriggersResponseBody = {
  data?: [
    PipelineTrigger
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  totalCount?: long(name='totalCount', example='1'),
}

model ListPipelineTriggersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPipelineTriggersResponseBody(name='body'),
}

async function listPipelineTriggers(request: ListPipelineTriggersRequest): ListPipelineTriggersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelineTriggers', 'GET', '/2023-07-14/pipelinetriggers', 'json', false, 'json', request);
}

model ListPipelinesRequest {
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
}

model ListPipelinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [
    Pipeline
  ](name='body'),
}

async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelines', 'GET', '/2023-07-14/pipelines', 'array', false, 'json', request);
}

model ListProjectsRequest {
  keyword?: string(name='keyword', example='spring-boot', position='Query'),
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='100', position='Query'),
}

model ListProjectsResponseBody = {
  data?: [
    Project
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
  totalCount?: long(name='totalCount', example='1'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjects', 'GET', '/2023-07-14/projects', 'json', false, 'json', request);
}

model ListRepositoriesRequest {
  keyword?: string(name='keyword', example='repo-start-springboot', position='Query'),
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='100', position='Query'),
}

model ListRepositoriesResponseBody = {
  data?: [
    Repository
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
  totalCount?: long(name='totalCount', example='1'),
}

model ListRepositoriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListRepositoriesResponseBody(name='body'),
}

async function listRepositories(request: ListRepositoriesRequest): ListRepositoriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListRepositories', 'GET', '/2023-07-14/repositories', 'json', false, 'json', request);
}

model ListTaskTemplatesRequest {
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
}

model ListTaskTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [
    TaskTemplate
  ](name='body'),
}

async function listTaskTemplates(request: ListTaskTemplatesRequest): ListTaskTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTaskTemplates', 'GET', '/2023-07-14/tasktemplates', 'array', false, 'json', request);
}

model ListTasksRequest {
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [
    Task
  ](name='body'),
}

async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTasks', 'GET', '/2023-07-14/tasks', 'array', false, 'json', request);
}

model PutEnvironmentRequest {
  project: string(name='project', example='demo-project', position='Path'),
  name: string(name='name', example='demo-env', position='Path'),
  body?: Environment(name='body', position='Body'),
  force?: boolean(name='force', example='false', position='Query'),
}

model PutEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Environment  
}

async function putEnvironment(request: PutEnvironmentRequest): PutEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutEnvironment', 'PUT', '/2023-07-14/projects/{project}/environments/{name}', 'json', false, 'json', request);
}

model PutPipelineStatusRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  body?: Pipeline(name='body', position='Body'),
  force?: boolean(name='force', example='false', position='Query'),
}

model PutPipelineStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

async function putPipelineStatus(request: PutPipelineStatusRequest): PutPipelineStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutPipelineStatus', 'PUT', '/2023-07-14/pipelines/{name}/status', 'json', false, 'json', request);
}

model PutPipelineTemplateRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  body?: PipelineTemplate(name='body', position='Body'),
  force?: boolean(name='force', example='false', position='Query'),
}

model PutPipelineTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTemplate  
}

async function putPipelineTemplate(request: PutPipelineTemplateRequest): PutPipelineTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutPipelineTemplate', 'PUT', '/2023-07-14/pipelinetemplates/{name}', 'json', false, 'json', request);
}

model PutPipelineTriggerRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  body?: PipelineTrigger(name='body', position='Body'),
  force?: boolean(name='force', example='false', position='Query'),
}

model PutPipelineTriggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTrigger  
}

async function putPipelineTrigger(request: PutPipelineTriggerRequest): PutPipelineTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutPipelineTrigger', 'PUT', '/2023-07-14/pipelinetriggers/{name}', 'json', false, 'json', request);
}

model PutProjectRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  body?: Project(name='body', position='Body'),
  force?: boolean(name='force', example='true', position='Query'),
}

model PutProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Project  
}

async function putProject(request: PutProjectRequest): PutProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutProject', 'PUT', '/2023-07-14/projects/{name}', 'json', false, 'json', request);
}

model PutTaskStatusRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  body?: Task(name='body', position='Body'),
  force?: boolean(name='force', example='false', position='Query'),
}

model PutTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

async function putTaskStatus(request: PutTaskStatusRequest): PutTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutTaskStatus', 'PUT', '/2023-07-14/tasks/{name}/status', 'json', false, 'json', request);
}

model PutTaskTemplateRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  body?: TaskTemplate(name='body', position='Body'),
  force?: boolean(name='force', example='false', position='Query'),
}

model PutTaskTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TaskTemplate  
}

async function putTaskTemplate(request: PutTaskTemplateRequest): PutTaskTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutTaskTemplate', 'PUT', '/2023-07-14/tasktemplates/{name}', 'json', false, 'json', request);
}

model RefreshConnectionRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model RefreshConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Connection  
}

async function refreshConnection(request: RefreshConnectionRequest): RefreshConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RefreshConnection', 'PATCH', '/2023-07-14/connections/{name}/refresh', 'json', false, 'json', request);
}

model ResumeTaskRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model ResumeTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

async function resumeTask(request: ResumeTaskRequest): ResumeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeTask', 'PUT', '/2023-07-14/tasks/{name}/resume', 'json', false, 'json', request);
}

model RetryTaskRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model RetryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

async function retryTask(request: RetryTaskRequest): RetryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RetryTask', 'PUT', '/2023-07-14/tasks/{name}/retry', 'json', false, 'json', request);
}

model StartPipelineRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model StartPipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

async function startPipeline(request: StartPipelineRequest): StartPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartPipeline', 'PUT', '/2023-07-14/pipelines/{name}/start', 'json', false, 'json', request);
}

model StartTaskRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model StartTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

async function startTask(request: StartTaskRequest): StartTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartTask', 'PUT', '/2023-07-14/tasks/{name}/start', 'json', false, 'json', request);
}

model UpdateEnvironmentRequest {
  project: string(name='project', example='demo-project', position='Path'),
  name: string(name='name', example='demo-env', position='Path'),
  body?: Environment(name='body', position='Body'),
}

model UpdateEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Environment  
}

async function updateEnvironment(request: UpdateEnvironmentRequest): UpdateEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateEnvironment', 'PATCH', '/2023-07-14/projects/{project}/environments/{name}', 'json', false, 'json', request);
}

model UpdatePipelineTriggerRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  body?: PipelineTrigger(name='body', position='Body'),
}

model UpdatePipelineTriggerResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: PipelineTrigger  
}

async function updatePipelineTrigger(request: UpdatePipelineTriggerRequest): UpdatePipelineTriggerResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdatePipelineTrigger', 'PATCH', '/2023-07-14/pipelinetriggers/{name}', 'json', false, 'json', request);
}

model UpdateProjectRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  body?: Project(name='body', position='Body'),
  force?: boolean(name='force', example='true', position='Query'),
}

model UpdateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Project  
}

async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProject', 'PATCH', '/2023-07-14/projects/{name}', 'json', false, 'json', request);
}

