/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'Devs';
  @version = '2023-07-14';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model Artifact {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test-description'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Artifact'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', description='This parameter is required.', example='my-artifact', minLength=1, maxLength=64),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: ArtifactSpec(name='spec'),
  status?: ArtifactStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
  updatedTime?: string(name='updatedTime', example='2021-11-19T09:34:38Z'),
}

model ArtifactCode {
  checksum?: string(name='checksum'),
  url?: string(name='url'),
}

model ArtifactMeta {
  checksum?: string(name='checksum', example='CRC-64 code'),
  name?: string(name='name', example='my-artifact'),
}

model ArtifactSpec {
  runtime: string(name='runtime', description='This parameter is required.', example='custom.debian10'),
  type: string(name='type', description='This parameter is required.', example='FC代码包、工作流yaml'),
  uri: string(name='uri', description='This parameter is required.', example='oss://cn-hangzhou/my-bucket/my.zip'),
}

model ArtifactStatus {
  arn?: string(name='arn', example='acs:devs:cn-hangzhou:123456:artifacts/my-first-artifact'),
  checksum?: string(name='checksum', example='2825179536350****'),
  size?: long(name='size', example='1024'),
}

model ArtifactTempBucketToken {
  credentials?: {
    accessKeyId?: string(name='accessKeyId'),
    accessKeySecret?: string(name='accessKeySecret'),
    securityToken?: string(name='securityToken'),
  }(name='credentials'),
  ossBucketName?: string(name='ossBucketName'),
  ossObjectName?: string(name='ossObjectName'),
  ossRegion?: string(name='ossRegion'),
}

model BranchFilter {
  name?: string(name='name', example='master'),
}

model BuildCacheConfig {
  keyPath?: map[string]any(name='keyPath', example='{ 	"3C75C832-0EAD-40D6-8FA1-2BA9171C926B": "~/.npm", 	"D256BB7A-1886-4A19-A75B-A1FDC23D5A00": "~/.cache" }'),
  paths?: [ string ](name='paths'),
}

model BuildConfig {
  default?: DefaultBuilderConfig(name='default'),
}

model Checkout {
  ref?: string(name='ref', example='+001691d0768ca49e9550beeb59fbc163f33b7e88:refs/remotes/origin/master'),
  remote?: string(name='remote', example='https:/your_token/@github.com/buptwzj/test-initRepo4.git'),
}

model CodeVersionReference {
  branch?: string(name='branch', example='main'),
  commitID?: string(name='commitID', example='12721ec262d03a93809ba2bbc717963cb298ceca'),
}

model Condition {
  expression?: string(name='expression'),
}

model Connection {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test-description'),
  kind?: string(name='kind', example='Connection'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', description='This parameter is required.', example='my-connection', minLength=1, maxLength=40),
  spec: ConnectionSpec(name='spec', description='This parameter is required.'),
  status?: ConnectionStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model ConnectionSpec {
  account?: GitAccount(name='account'),
  gitlabConfig?: GitLabConfig(name='gitlabConfig'),
  platform: string(name='platform', description='This parameter is required.', example='github'),
}

model ConnectionStatus {
  installation?: Installation(name='installation'),
}

model Context {
  data?: map[string]any(name='data'),
}

model ContextSchema {
  description?: string(name='description', example='[git](https://git-scm.com/) address for [git clone](https://git-scm.com/docs/git-clone).'),
  hint?: string(name='hint', example='git@gitlab.alibaba-inc.com:serverless/lambda.git'),
  name?: string(name='name', example='gitRepoUrl'),
  required?: boolean(name='required', example='true'),
  type?: string(name='type', example='string'),
}

model DefaultBuilderConfig {
  cache?: BuildCacheConfig(name='cache'),
  languages?: [ string ](name='languages'),
  steps?: [ any ](name='steps'),
}

model DeleteModelOutput {
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model DeployCustomContainerAsyncOutput {
  data?: string(name='data'),
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId: string(name='requestId', description='This parameter is required.'),
  success?: boolean(name='success'),
}

model DeployCustomContainerInput {
  accountID?: string(name='accountID'),
  concurrencyConfig?: {
    reservedConcurrency?: int32(name='reservedConcurrency'),
  }(name='concurrencyConfig'),
  cpu?: float(name='cpu'),
  customContainerConfig?: {
    command?: [ string ](name='command'),
    entrypoint?: [ string ](name='entrypoint'),
    healthCheckConfig?: {
      failureThreshold?: int32(name='failureThreshold'),
      httpGetUrl?: string(name='httpGetUrl'),
      initialDelaySeconds?: int32(name='initialDelaySeconds'),
      periodSeconds?: int32(name='periodSeconds'),
      successThreshold?: int32(name='successThreshold'),
      timeoutSeconds?: long(name='timeoutSeconds'),
    }(name='healthCheckConfig'),
    image?: string(name='image'),
    instanceConcurrency?: int32(name='instanceConcurrency'),
    instanceLifecycleConfig?: {
      initializer?: {
        handler?: string(name='handler'),
        timeout?: int32(name='timeout'),
      }(name='initializer'),
      preStop?: {
        handler?: string(name='handler'),
        timeout?: int32(name='timeout'),
      }(name='preStop'),
    }(name='instanceLifecycleConfig'),
    port?: int32(name='port'),
  }(name='customContainerConfig'),
  description?: string(name='description'),
  diskSize?: int32(name='diskSize'),
  envName?: string(name='envName'),
  environmentVariables?: map[string]any(name='environmentVariables'),
  gpuConfig?: {
    gpuMemorySize?: long(name='gpuMemorySize'),
    gpuType?: string(name='gpuType'),
  }(name='gpuConfig'),
  httpTrigger?: {
    qualifier?: string(name='qualifier'),
    triggerConfig?: {
      authType?: string(name='authType'),
      dsableURLInternet?: boolean(name='dsableURLInternet'),
      methods?: [ string ](name='methods'),
    }(name='triggerConfig'),
  }(name='httpTrigger'),
  logConfig?: {
    enableInstanceMetrics?: boolean(name='enableInstanceMetrics'),
    enableRequestMetrics?: boolean(name='enableRequestMetrics'),
    logBeginRule?: string(name='logBeginRule'),
    logstore?: string(name='logstore'),
    project?: string(name='project'),
  }(name='logConfig'),
  memorySize?: int32(name='memorySize'),
  modelConfig?: {
    framework?: string(name='framework'),
    multiModelConfig?: [
      ModelConfig
    ](name='multiModelConfig'),
    prefix?: string(name='prefix'),
    sourceType?: string(name='sourceType'),
    srcModelScopeModelID?: string(name='srcModelScopeModelID'),
    srcModelScopeModelRevision?: string(name='srcModelScopeModelRevision'),
    srcModelScopeToken?: string(name='srcModelScopeToken'),
    srcOssBucket?: string(name='srcOssBucket'),
    srcOssPath?: string(name='srcOssPath'),
    srcOssRegion?: string(name='srcOssRegion'),
  }(name='modelConfig'),
  name: string(name='name', description='This parameter is required.'),
  nasConfig?: {
    groupId?: long(name='groupId'),
    mountPoints?: [ string ](name='mountPoints'),
    userId?: long(name='userId'),
  }(name='nasConfig'),
  originalName?: string(name='originalName'),
  projectName?: string(name='projectName'),
  provisionConfig?: {
    alwaysAllocateGPU?: boolean(name='alwaysAllocateGPU'),
    scheduledActions?: [ 
      {
        endTime?: string(name='endTime'),
        name?: string(name='name'),
        scheduleExpression?: string(name='scheduleExpression'),
        startTime?: string(name='startTime'),
        target?: int32(name='target'),
        timeZone?: string(name='timeZone'),
      }
    ](name='scheduledActions'),
    target?: long(name='target'),
  }(name='provisionConfig'),
  region?: string(name='region'),
  reportStatusURL?: string(name='reportStatusURL'),
  role: string(name='role', description='This parameter is required.'),
  timeout?: int32(name='timeout'),
  traceId?: string(name='traceId'),
  vpcConfig?: {
    securityGroupId?: string(name='securityGroupId'),
    vSwitchIds?: [ string ](name='vSwitchIds'),
    vpcId?: string(name='vpcId'),
  }(name='vpcConfig'),
}

model DeployCustomContainerOutput {
  data?: {
    deploymentTaskID?: string(name='deploymentTaskID'),
    errorMessage?: string(name='errorMessage'),
    finished?: boolean(name='finished'),
    nasConfigStr?: string(name='nasConfigStr'),
    serviceName?: string(name='serviceName'),
    traceID?: string(name='traceID'),
    urlInternet?: string(name='urlInternet'),
    urlIntranet?: string(name='urlIntranet'),
    vpcConfigStr?: string(name='vpcConfigStr'),
  }(name='data'),
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId: string(name='requestId', description='This parameter is required.'),
  success?: boolean(name='success'),
}

model DeployEnvironmentOptions {
  services?: [ string ](name='services'),
}

model DeployHuggingFaceModelAsyncOutput {
  data?: string(name='data'),
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId: string(name='requestId', description='This parameter is required.'),
  success?: boolean(name='success'),
}

model DeployHuggingFaceModelInput {
  accountID?: string(name='accountID'),
  concurrencyConfig?: {
    reservedConcurrency?: int32(name='reservedConcurrency'),
  }(name='concurrencyConfig'),
  cpu?: float(name='cpu'),
  description?: string(name='description'),
  diskSize?: int32(name='diskSize'),
  envName?: string(name='envName'),
  environmentVariables?: map[string]any(name='environmentVariables'),
  gpuConfig?: {
    gpuMemorySize?: int32(name='gpuMemorySize'),
    gpuType?: string(name='gpuType'),
  }(name='gpuConfig'),
  httpTrigger?: {
    qualifier?: string(name='qualifier'),
    triggerConfig?: {
      authType?: string(name='authType'),
      dsableURLInternet?: boolean(name='dsableURLInternet'),
      methods?: [ string ](name='methods'),
    }(name='triggerConfig'),
  }(name='httpTrigger'),
  imageName?: string(name='imageName'),
  instanceConcurrency?: int32(name='instanceConcurrency'),
  logConfig?: {
    enableInstanceMetrics?: boolean(name='enableInstanceMetrics'),
    enableRequestMetrics?: boolean(name='enableRequestMetrics'),
    logBeginRule?: string(name='logBeginRule'),
    logstore?: string(name='logstore'),
    project?: string(name='project'),
  }(name='logConfig'),
  memorySize?: int32(name='memorySize'),
  modelConfig?: {
    fmkHuggingFaceConfig?: {
      framework?: string(name='framework'),
      task?: string(name='task'),
    }(name='fmkHuggingFaceConfig'),
    framework?: string(name='framework'),
    multiModelConfig?: [
      ModelConfig
    ](name='multiModelConfig'),
    prefix?: string(name='prefix'),
    sourceType?: string(name='sourceType'),
    srcModelScopeModelID?: string(name='srcModelScopeModelID'),
    srcModelScopeModelRevision?: string(name='srcModelScopeModelRevision'),
    srcModelScopeToken?: string(name='srcModelScopeToken'),
    srcOssBucket?: string(name='srcOssBucket'),
    srcOssPath?: string(name='srcOssPath'),
    srcOssRegion?: string(name='srcOssRegion'),
  }(name='modelConfig'),
  name: string(name='name', description='This parameter is required.'),
  nasConfig?: {
    groupId?: int32(name='groupId'),
    mountPoints?: [ string ](name='mountPoints'),
    userId?: int32(name='userId'),
  }(name='nasConfig'),
  originalName?: string(name='originalName'),
  projectName?: string(name='projectName'),
  provisionConfig?: {
    alwaysAllocateGPU?: boolean(name='alwaysAllocateGPU'),
    scheduledActions?: [ 
      {
        endTime?: string(name='endTime'),
        name?: string(name='name'),
        scheduleExpression?: string(name='scheduleExpression'),
        startTime?: string(name='startTime'),
        target?: int32(name='target'),
        timeZone?: string(name='timeZone'),
      }
    ](name='scheduledActions'),
    target?: int32(name='target'),
  }(name='provisionConfig'),
  region?: string(name='region'),
  reportStatusURL?: string(name='reportStatusURL'),
  role: string(name='role', description='This parameter is required.'),
  timeout?: int32(name='timeout'),
  traceId?: string(name='traceId'),
  vpcConfig?: {
    securityGroupId?: string(name='securityGroupId'),
    vSwitchIds?: [ string ](name='vSwitchIds'),
    vpcId?: string(name='vpcId'),
  }(name='vpcConfig'),
}

model DeployHuggingFaceModelOutput {
  data?: {
    deploymentTaskID?: string(name='deploymentTaskID'),
    errorMessage?: string(name='errorMessage'),
    finished?: boolean(name='finished'),
    serviceName?: string(name='serviceName'),
    taskType?: string(name='taskType'),
    traceID?: string(name='traceID'),
    urlInternet?: string(name='urlInternet'),
    urlIntranet?: string(name='urlIntranet'),
  }(name='data'),
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId: string(name='requestId', description='This parameter is required.'),
  success?: boolean(name='success'),
}

model DeployModelScopeModelAsyncOutput {
  data?: string(name='data'),
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId: string(name='requestId', description='This parameter is required.'),
  success?: boolean(name='success'),
}

model DeployModelScopeModelInput {
  accountID?: string(name='accountID'),
  concurrencyConfig?: {
    reservedConcurrency?: int32(name='reservedConcurrency'),
  }(name='concurrencyConfig'),
  cpu?: float(name='cpu'),
  description?: string(name='description'),
  diskSize?: int32(name='diskSize'),
  envName?: string(name='envName'),
  environmentVariables?: map[string]any(name='environmentVariables'),
  gpuConfig?: {
    gpuMemorySize?: int32(name='gpuMemorySize'),
    gpuType?: string(name='gpuType'),
  }(name='gpuConfig'),
  httpTrigger?: {
    qualifier?: string(name='qualifier'),
    triggerConfig?: {
      authType?: string(name='authType'),
      dsableURLInternet?: boolean(name='dsableURLInternet'),
      methods?: [ string ](name='methods'),
    }(name='triggerConfig'),
  }(name='httpTrigger'),
  imageName?: string(name='imageName'),
  instanceConcurrency?: int32(name='instanceConcurrency'),
  logConfig?: {
    enableInstanceMetrics?: boolean(name='enableInstanceMetrics'),
    enableRequestMetrics?: boolean(name='enableRequestMetrics'),
    logBeginRule?: string(name='logBeginRule'),
    logstore?: string(name='logstore'),
    project?: string(name='project'),
  }(name='logConfig'),
  memorySize?: int32(name='memorySize'),
  modelConfig?: {
    framework?: string(name='framework'),
    multiModelConfig?: [
      ModelConfig
    ](name='multiModelConfig'),
    prefix?: string(name='prefix'),
    sourceType?: string(name='sourceType'),
    srcModelScopeModelID?: string(name='srcModelScopeModelID'),
    srcModelScopeModelRevision?: string(name='srcModelScopeModelRevision'),
    srcModelScopeToken?: string(name='srcModelScopeToken'),
    srcOssBucket?: string(name='srcOssBucket'),
    srcOssPath?: string(name='srcOssPath'),
    srcOssRegion?: string(name='srcOssRegion'),
  }(name='modelConfig'),
  name: string(name='name', description='This parameter is required.'),
  nasConfig?: {
    groupId?: int32(name='groupId'),
    mountPoints?: [ string ](name='mountPoints'),
    userId?: int32(name='userId'),
  }(name='nasConfig'),
  originalName?: string(name='originalName'),
  projectName?: string(name='projectName'),
  provisionConfig?: {
    alwaysAllocateGPU?: boolean(name='alwaysAllocateGPU'),
    scheduledActions?: [ 
      {
        endTime?: string(name='endTime'),
        name?: string(name='name'),
        scheduleExpression?: string(name='scheduleExpression'),
        startTime?: string(name='startTime'),
        target?: int32(name='target'),
        timeZone?: string(name='timeZone'),
      }
    ](name='scheduledActions'),
    target?: int32(name='target'),
  }(name='provisionConfig'),
  region?: string(name='region'),
  reportStatusURL?: string(name='reportStatusURL'),
  role: string(name='role', description='This parameter is required.'),
  timeout?: int32(name='timeout'),
  traceId?: string(name='traceId'),
  vpcConfig?: {
    securityGroupId?: string(name='securityGroupId'),
    vSwitchIds?: [ string ](name='vSwitchIds'),
    vpcId?: string(name='vpcId'),
  }(name='vpcConfig'),
}

model DeployModelScopeModelOutput {
  data?: {
    deploymentTaskID?: string(name='deploymentTaskID'),
    errorMessage?: string(name='errorMessage'),
    finished?: boolean(name='finished'),
    serviceName?: string(name='serviceName'),
    taskType?: string(name='taskType'),
    traceID?: string(name='traceID'),
    urlInternet?: string(name='urlInternet'),
    urlIntranet?: string(name='urlIntranet'),
  }(name='data'),
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId: string(name='requestId', description='This parameter is required.'),
  success?: boolean(name='success'),
}

model DeployOllamaModelAsyncOutput {
  data?: string(name='data'),
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId: string(name='requestId', description='This parameter is required.'),
  success?: boolean(name='success'),
}

model DeployOllamaModelInput {
  accountID?: string(name='accountID'),
  concurrencyConfig?: {
    reservedConcurrency?: int32(name='reservedConcurrency'),
  }(name='concurrencyConfig'),
  cpu?: float(name='cpu'),
  description?: string(name='description'),
  diskSize?: int32(name='diskSize'),
  envName?: string(name='envName'),
  environmentVariables?: map[string]any(name='environmentVariables'),
  gpuConfig?: {
    gpuMemorySize?: int32(name='gpuMemorySize'),
    gpuType?: string(name='gpuType'),
  }(name='gpuConfig'),
  httpTrigger?: {
    qualifier?: string(name='qualifier'),
    triggerConfig?: {
      authType?: string(name='authType'),
      dsableURLInternet?: boolean(name='dsableURLInternet'),
      methods?: [ string ](name='methods'),
    }(name='triggerConfig'),
  }(name='httpTrigger'),
  imageName?: string(name='imageName'),
  instanceConcurrency?: int32(name='instanceConcurrency'),
  logConfig?: {
    enableInstanceMetrics?: boolean(name='enableInstanceMetrics'),
    enableRequestMetrics?: boolean(name='enableRequestMetrics'),
    logBeginRule?: string(name='logBeginRule'),
    logstore?: string(name='logstore'),
    project?: string(name='project'),
  }(name='logConfig'),
  memorySize?: int32(name='memorySize'),
  modelConfig?: {
    fmkOllamaConfig?: {
      minP?: float(name='minP'),
      mirostat?: int32(name='mirostat'),
      mirostatEta?: float(name='mirostatEta'),
      mirostatTau?: float(name='mirostatTau'),
      modelName?: string(name='modelName'),
      modelfileAdapter?: string(name='modelfileAdapter'),
      modelfileAdditionalFromsString?: string(name='modelfileAdditionalFromsString'),
      modelfileFullTextPostfix?: string(name='modelfileFullTextPostfix'),
      modelfileParams?: string(name='modelfileParams'),
      modelfileSystem?: string(name='modelfileSystem'),
      modelfileTemplate?: string(name='modelfileTemplate'),
      numCtx?: int32(name='numCtx'),
      numPredict?: int32(name='numPredict'),
      quantize?: string(name='quantize'),
      repeatLastN?: int32(name='repeatLastN'),
      repeatPenalty?: float(name='repeatPenalty'),
      seed?: int32(name='seed'),
      singleModelFile?: string(name='singleModelFile'),
      splitedModelStartFile?: string(name='splitedModelStartFile'),
      stop?: string(name='stop'),
      stream?: boolean(name='stream'),
      temperature?: float(name='temperature'),
      tfsZ?: float(name='tfsZ'),
      topK?: int32(name='topK'),
      topP?: float(name='topP'),
    }(name='fmkOllamaConfig'),
    framework?: string(name='framework'),
    multiModelConfig?: [
      ModelConfig
    ](name='multiModelConfig'),
    prefix?: string(name='prefix'),
    sourceType?: string(name='sourceType'),
    srcModelScopeModelID?: string(name='srcModelScopeModelID'),
    srcModelScopeModelRevision?: string(name='srcModelScopeModelRevision'),
    srcModelScopeToken?: string(name='srcModelScopeToken'),
    srcOssBucket?: string(name='srcOssBucket'),
    srcOssPath?: string(name='srcOssPath'),
    srcOssRegion?: string(name='srcOssRegion'),
  }(name='modelConfig'),
  name: string(name='name', description='This parameter is required.'),
  nasConfig?: {
    groupId?: int32(name='groupId'),
    mountPoints?: [ string ](name='mountPoints'),
    userId?: int32(name='userId'),
  }(name='nasConfig'),
  originalName?: string(name='originalName'),
  projectName?: string(name='projectName'),
  provisionConfig?: {
    alwaysAllocateGPU?: boolean(name='alwaysAllocateGPU'),
    scheduledActions?: [ 
      {
        endTime?: string(name='endTime'),
        name?: string(name='name'),
        scheduleExpression?: string(name='scheduleExpression'),
        startTime?: string(name='startTime'),
        target?: int32(name='target'),
        timeZone?: string(name='timeZone'),
      }
    ](name='scheduledActions'),
    target?: int32(name='target'),
  }(name='provisionConfig'),
  region?: string(name='region'),
  reportStatusURL?: string(name='reportStatusURL'),
  role: string(name='role', description='This parameter is required.'),
  timeout?: int32(name='timeout'),
  traceId?: string(name='traceId'),
  vpcConfig?: {
    securityGroupId?: string(name='securityGroupId'),
    vSwitchIds?: [ string ](name='vSwitchIds'),
    vpcId?: string(name='vpcId'),
  }(name='vpcConfig'),
}

model DeployOllamaModelOutput {
  data?: {
    deploymentTaskID?: string(name='deploymentTaskID'),
    errorMessage?: string(name='errorMessage'),
    finished?: boolean(name='finished'),
    modelName?: string(name='modelName'),
    serviceName?: string(name='serviceName'),
    traceID?: string(name='traceID'),
    urlInternet?: string(name='urlInternet'),
    urlIntranet?: string(name='urlIntranet'),
  }(name='data'),
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId: string(name='requestId', description='This parameter is required.'),
  success?: boolean(name='success'),
}

model DeployTensorRtModelAsyncOutput {
  data?: string(name='data'),
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId: string(name='requestId', description='This parameter is required.'),
  success?: boolean(name='success'),
}

model DeployTensorRtModelInput {
  accountID?: string(name='accountID'),
  concurrencyConfig?: {
    reservedConcurrency?: int32(name='reservedConcurrency'),
  }(name='concurrencyConfig'),
  cpu?: float(name='cpu'),
  description?: string(name='description'),
  diskSize?: int32(name='diskSize'),
  envName?: string(name='envName'),
  environmentVariables?: map[string]any(name='environmentVariables'),
  gpuConfig?: {
    gpuMemorySize?: int32(name='gpuMemorySize'),
    gpuType?: string(name='gpuType'),
  }(name='gpuConfig'),
  httpTrigger?: {
    qualifier?: string(name='qualifier'),
    triggerConfig?: {
      authType?: string(name='authType'),
      dsableURLInternet?: boolean(name='dsableURLInternet'),
      methods?: [ string ](name='methods'),
    }(name='triggerConfig'),
  }(name='httpTrigger'),
  imageName?: string(name='imageName'),
  instanceConcurrency?: int32(name='instanceConcurrency'),
  logConfig?: {
    enableInstanceMetrics?: boolean(name='enableInstanceMetrics'),
    enableRequestMetrics?: boolean(name='enableRequestMetrics'),
    logBeginRule?: string(name='logBeginRule'),
    logstore?: string(name='logstore'),
    project?: string(name='project'),
  }(name='logConfig'),
  memorySize?: int32(name='memorySize'),
  modelConfig?: {
    framework?: string(name='framework'),
    multiModelConfig?: [
      ModelConfig
    ](name='multiModelConfig'),
    prefix?: string(name='prefix'),
    sourceType?: string(name='sourceType'),
    srcModelScopeModelID?: string(name='srcModelScopeModelID'),
    srcModelScopeModelRevision?: string(name='srcModelScopeModelRevision'),
    srcModelScopeToken?: string(name='srcModelScopeToken'),
    srcOssBucket?: string(name='srcOssBucket'),
    srcOssPath?: string(name='srcOssPath'),
    srcOssRegion?: string(name='srcOssRegion'),
  }(name='modelConfig'),
  name: string(name='name', description='This parameter is required.'),
  nasConfig?: {
    groupId?: int32(name='groupId'),
    mountPoints?: [ 
      {
        enableTLS?: boolean(name='enableTLS'),
        mountDir?: string(name='mountDir'),
        serverAddr?: string(name='serverAddr'),
      }
    ](name='mountPoints'),
    userId?: int32(name='userId'),
  }(name='nasConfig'),
  originalName?: string(name='originalName'),
  projectName?: string(name='projectName'),
  provisionConfig?: {
    alwaysAllocateGPU?: boolean(name='alwaysAllocateGPU'),
    scheduledActions?: [ 
      {
        endTime?: string(name='endTime'),
        name?: string(name='name'),
        scheduleExpression?: string(name='scheduleExpression'),
        startTime?: string(name='startTime'),
        target?: int32(name='target'),
        timeZone?: string(name='timeZone'),
      }
    ](name='scheduledActions'),
    target?: int32(name='target'),
  }(name='provisionConfig'),
  region?: string(name='region'),
  reportStatusURL?: string(name='reportStatusURL'),
  role: string(name='role', description='This parameter is required.'),
  timeout?: int32(name='timeout'),
  traceId?: string(name='traceId'),
  vpcConfig?: {
    securityGroupId?: string(name='securityGroupId'),
    vSwitchIds?: [ string ](name='vSwitchIds'),
    vpcId?: string(name='vpcId'),
  }(name='vpcConfig'),
}

model DeployTensorRtModelOutput {
  data?: {
    deploymentTaskID?: string(name='deploymentTaskID'),
    errorMessage?: string(name='errorMessage'),
    finished?: boolean(name='finished'),
    serviceName?: string(name='serviceName'),
    traceID?: string(name='traceID'),
    urlInternet?: string(name='urlInternet'),
    urlIntranet?: string(name='urlIntranet'),
  }(name='data'),
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId: string(name='requestId', description='This parameter is required.'),
  success?: boolean(name='success'),
}

model DeployVllmModelAsyncOutput {
  data?: string(name='data'),
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId: string(name='requestId', description='This parameter is required.'),
  success?: boolean(name='success'),
}

model DeployVllmModelInput {
  accountID?: string(name='accountID'),
  concurrencyConfig?: {
    reservedConcurrency?: int32(name='reservedConcurrency'),
  }(name='concurrencyConfig'),
  cpu?: float(name='cpu'),
  description?: string(name='description'),
  diskSize?: int32(name='diskSize'),
  envName?: string(name='envName'),
  environmentVariables?: map[string]any(name='environmentVariables'),
  gpuConfig?: {
    gpuMemorySize?: int32(name='gpuMemorySize'),
    gpuType?: string(name='gpuType'),
  }(name='gpuConfig'),
  httpTrigger?: {
    qualifier?: string(name='qualifier'),
    triggerConfig?: {
      authType?: string(name='authType'),
      dsableURLInternet?: boolean(name='dsableURLInternet'),
      methods?: [ string ](name='methods'),
    }(name='triggerConfig'),
  }(name='httpTrigger'),
  imageName?: string(name='imageName'),
  instanceConcurrency?: int32(name='instanceConcurrency'),
  logConfig?: {
    enableInstanceMetrics?: boolean(name='enableInstanceMetrics'),
    enableRequestMetrics?: boolean(name='enableRequestMetrics'),
    logBeginRule?: string(name='logBeginRule'),
    logstore?: string(name='logstore'),
    project?: string(name='project'),
  }(name='logConfig'),
  memorySize?: int32(name='memorySize'),
  modelConfig?: {
    fmkVllmConfig?: {
      apiKey?: string(name='apiKey'),
      blockSize?: int32(name='blockSize'),
      chatTemplate?: string(name='chatTemplate'),
      dtype?: string(name='dtype'),
      fullTextPostfix?: string(name='fullTextPostfix'),
      gpuMemoryUtilization?: float(name='gpuMemoryUtilization'),
      loadFormat?: string(name='loadFormat'),
      maxModelLen?: int32(name='maxModelLen'),
      maxParallelLoadingWorkers?: int32(name='maxParallelLoadingWorkers'),
      quantization?: string(name='quantization'),
      servedModelName?: string(name='servedModelName'),
      swapSpace?: int32(name='swapSpace'),
    }(name='fmkVllmConfig'),
    framework?: string(name='framework'),
    multiModelConfig?: [
      ModelConfig
    ](name='multiModelConfig'),
    prefix?: string(name='prefix'),
    sourceType?: string(name='sourceType'),
    srcModelScopeModelID?: string(name='srcModelScopeModelID'),
    srcModelScopeModelRevision?: string(name='srcModelScopeModelRevision'),
    srcModelScopeToken?: string(name='srcModelScopeToken'),
    srcOssBucket?: string(name='srcOssBucket'),
    srcOssPath?: string(name='srcOssPath'),
    srcOssRegion?: string(name='srcOssRegion'),
  }(name='modelConfig'),
  name: string(name='name', description='This parameter is required.'),
  nasConfig?: {
    groupId?: int32(name='groupId'),
    mountPoints?: [ 
      {
        enableTLS?: boolean(name='enableTLS'),
        mountDir?: string(name='mountDir'),
        serverAddr?: string(name='serverAddr'),
      }
    ](name='mountPoints'),
    userId?: int32(name='userId'),
  }(name='nasConfig'),
  originalName?: string(name='originalName'),
  projectName?: string(name='projectName'),
  provisionConfig?: {
    alwaysAllocateGPU?: boolean(name='alwaysAllocateGPU'),
    scheduledActions?: [ 
      {
        endTime?: string(name='endTime'),
        name?: string(name='name'),
        scheduleExpression?: string(name='scheduleExpression'),
        startTime?: string(name='startTime'),
        target?: int32(name='target'),
        timeZone?: string(name='timeZone'),
      }
    ](name='scheduledActions'),
    target?: int32(name='target'),
  }(name='provisionConfig'),
  region?: string(name='region'),
  reportStatusURL?: string(name='reportStatusURL'),
  role: string(name='role', description='This parameter is required.'),
  timeout?: int32(name='timeout'),
  traceId?: string(name='traceId'),
  vpcConfig?: {
    securityGroupId?: string(name='securityGroupId'),
    vSwitchIds?: [ string ](name='vSwitchIds'),
    vpcId?: string(name='vpcId'),
  }(name='vpcConfig'),
}

model DeployVllmModelOutput {
  data?: {
    deploymentTaskID?: string(name='deploymentTaskID'),
    errorMessage?: string(name='errorMessage'),
    finished?: boolean(name='finished'),
    modelName?: string(name='modelName'),
    serviceName?: string(name='serviceName'),
    traceID?: string(name='traceID'),
    urlInternet?: string(name='urlInternet'),
    urlIntranet?: string(name='urlIntranet'),
  }(name='data'),
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId: string(name='requestId', description='This parameter is required.'),
  success?: boolean(name='success'),
}

model DownloadModelOutput {
  data?: {
    modelPath?: string(name='modelPath'),
    taskType?: string(name='taskType'),
  }(name='data'),
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId: string(name='requestId', description='This parameter is required.'),
  success?: boolean(name='success'),
}

model Environment {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test env'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Environment'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', description='This parameter is required.', example='demo-env'),
  projectName?: string(name='projectName', example='demo-project'),
  spec: EnvironmentSpec(name='spec', description='This parameter is required.'),
  status?: EnvironmentStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model EnvironmentBaseline {
  servicesInstances?: map[string]ServiceInstance(name='servicesInstances'),
  variables?: map[string]Variable(name='variables'),
}

model EnvironmentChanges {
  services?: map[string]any(name='services'),
}

model EnvironmentDeployment {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='commit by xxx.'),
  kind?: string(name='kind', example='Deployment'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', description='This parameter is required.', example='my-deployment', minLength=1, maxLength=63),
  spec?: EnvironmentDeploymentSpec(name='spec'),
  status?: EnvironmentDeploymentStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model EnvironmentDeploymentSpec {
  baseline?: EnvironmentSnapshot(name='baseline'),
  changes?: EnvironmentChanges(name='changes'),
  skipRemoveResources?: boolean(name='skipRemoveResources', example='false'),
  target?: EnvironmentStagedConfigs(name='target'),
  webhookCodeContext?: WebhookCodeContext(name='webhookCodeContext'),
}

model EnvironmentDeploymentStatus {
  finishedTime?: string(name='finishedTime'),
  phase?: string(name='phase', example='Running'),
  pipelineName?: string(name='pipelineName', example='my-pipeline'),
  serviceDeployments?: map[string]string(name='serviceDeployments'),
}

model EnvironmentSnapshot {
  services?: map[string]ServiceInstance(name='services'),
}

model EnvironmentSpec {
  roleArn?: string(name='roleArn', example='acs:ram::*******:role/aliyundevsdefaultrole'),
  stagedConfigs?: EnvironmentStagedConfigs(name='stagedConfigs'),
  type?: string(name='type', example='Testing'),
}

model EnvironmentStagedConfigs {
  services?: map[string]ServiceConfig(name='services'),
  variables?: map[string]Variable(name='variables'),
}

model EnvironmentStatus {
  latestEnvironmentDeploymentName?: string(name='latestEnvironmentDeploymentName'),
  observedGeneration?: long(name='observedGeneration', example='1'),
  observedTime?: string(name='observedTime', example='2021-11-19T09:34:38Z'),
  servicesInstances?: map[string]ServiceInstance(name='servicesInstances'),
  servicesWithPendingChanges?: [ string ](name='servicesWithPendingChanges'),
}

model EventFilterConfig {
  branch?: BranchFilter(name='branch'),
}

model FinalizeConfig {
  steps?: [ any ](name='steps'),
}

model GetModelStatusOutput {
  data?: {
    currentBytes?: long(name='currentBytes'),
    errMessage?: string(name='errMessage'),
    fileSize?: long(name='fileSize'),
    finished?: boolean(name='finished'),
    finishedTime?: long(name='finishedTime'),
    speed?: long(name='speed'),
    startTime?: long(name='startTime'),
    total?: long(name='total'),
  }(name='data'),
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  requestId?: string(name='requestId'),
  success?: boolean(name='success'),
}

model GitAccount {
  avatar?: string(name='avatar', example='https://gitee.com/assets/no_portrait.png'),
  displayName?: string(name='displayName', example='your_displayname'),
  id?: string(name='id', example='1'),
  name?: string(name='name', example='your_username'),
  uri?: string(name='uri', example='https://gitlab.com'),
}

model GitEventSnapshot {
  branch?: string(name='branch', example='main'),
  commitID?: string(name='commitID', example='12721ec262d03a93809ba2bbc717963cb298ceca'),
  tag?: string(name='tag', example='1.0'),
}

model GitLabConfig {
  token?: string(name='token', example='your-token'),
  uri?: string(name='uri', example='http://gitlab.c16194660f14898a0810408171302ac.cn-shanghai.alicontainer.com/'),
}

model InitializeConfig {
  steps?: [ any ](name='steps'),
}

model Installation {
  actionUri?: string(name='actionUri', example='https://github.com/login/oauth/authorize?client_id=86059a1b2bb20d3e5fc3&scope=repo,repo:status,delete_repo'),
  message?: string(name='message', example='Please click \\"actionUri\\" to complete the OAuth authorization process'),
  stage?: string(name='stage', example='finished'),
}

model ModelAsyncTask {
  errCode?: string(name='errCode'),
  errMsg?: string(name='errMsg'),
  finished?: boolean(name='finished'),
  finishedTime?: long(name='finishedTime'),
  result?: any(name='result'),
  startTime?: long(name='startTime'),
  taskType?: string(name='taskType'),
  updateTime?: long(name='updateTime'),
}

model ModelConfig {
  bucket?: string(name='bucket'),
  framework?: string(name='framework'),
  model?: string(name='model'),
  multiModelConfig?: [
    ModelConfig
  ](name='multiModelConfig'),
  path?: string(name='path'),
  prefix?: string(name='prefix'),
  region?: string(name='region'),
  reversion?: string(name='reversion'),
  token?: string(name='token'),
  type: string(name='type', description='This parameter is required.', example='modelscope'),
}

model ModelFile {
  isDir?: boolean(name='isDir'),
  modeTime?: long(name='modeTime'),
  name?: string(name='name'),
  path?: string(name='path'),
  size?: long(name='size'),
}

model ModelFilePreview {
  content?: string(name='content'),
  hash?: string(name='hash'),
  isCompressedImage?: boolean(name='isCompressedImage'),
  isDir?: boolean(name='isDir'),
  name?: string(name='name'),
  path?: string(name='path'),
  size?: long(name='size'),
  unpreviewable?: boolean(name='unpreviewable'),
}

model ModelProvider {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test-description'),
  kind?: string(name='kind', example='Toolset'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', description='This parameter is required.', example='my-toolset'),
  uid?: string(name='uid', example='1455541096***548'),
}

model ModelProviderAuthorization {
  authConfig?: map[string]string(name='authConfig'),
  type?: string(name='type', example='apiKey'),
}

model ModelProviderSchema {
  detail?: string(name='detail'),
  type?: string(name='type', example='OpenAPI'),
}

model ModelProviderSpec {
  authorization?: ModelProviderAuthorization(name='authorization'),
  schema?: ModelProviderSchema(name='schema'),
}

model ModelTask {
  errMsg?: string(name='errMsg'),
  fileSize?: double(name='fileSize'),
  finishTime?: double(name='finishTime'),
  finished?: boolean(name='finished'),
  startTime?: double(name='startTime'),
  status?: string(name='status'),
  taskId?: string(name='taskId'),
  total?: float(name='total'),
}

model OAuthCredential {
  createdTime: long(name='createdTime', description='This parameter is required.', example='1716176924603'),
  expiration: long(name='expiration', description='This parameter is required.', example='1716263324603'),
  refreshToken?: string(name='refreshToken', example='4d77bfae284770d94ebeed6b0199ebfd65e3943ba4f1e44dc36d792a93ba0d13'),
  scope?: string(name='scope', example='user_info projects pull_requests hook gists emails'),
  token: string(name='token', description='This parameter is required.', example='4e84246b6b3962cd3d207aad1ea2f911'),
  type?: string(name='type', example='bearer'),
}

model OperationModelFileAction {
  action: string(name='action', description='This parameter is required.'),
  destination?: string(name='destination'),
  source?: string(name='source'),
  target?: string(name='target'),
}

model Pipeline {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='Pipeline example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Pipeline'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', description='This parameter is required.', example='my-pipeline', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: PipelineSpec(name='spec'),
  status?: PipelineStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model PipelineSpec {
  context?: Context(name='context'),
  templateName?: string(name='templateName', example='my-pipeline-template'),
  templateSpec?: PipelineTemplateSpec(name='templateSpec'),
}

model PipelineStatus {
  latestExecError?: TaskExecError(name='latestExecError'),
  phase?: string(name='phase', example='Success'),
}

model PipelineTemplate {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  deletionTime?: string(name='deletionTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='PipelineTemplate example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='PipelineTemplate'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', description='This parameter is required.', example='my-pipeline-template', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: PipelineTemplateSpec(name='spec'),
  uid?: string(name='uid', example='1455541096***548'),
}

model PipelineTemplateSpec {
  context?: Context(name='context'),
  tasks?: [
    TaskExec
  ](name='tasks'),
}

model Project {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test-description'),
  kind?: string(name='kind', example='Project'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', description='This parameter is required.', example='my-project', minLength=1, maxLength=40),
  status?: ProjectStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model ProjectSpec {
}

model ProjectStatus {
  services?: [
    ServiceMeta
  ](name='services'),
}

model PullRequestFilter {
  sourceBranch?: string(name='sourceBranch', example='feature-.*'),
  targetBranch?: string(name='targetBranch', example='master'),
  types?: [ string ](name='types'),
}

model PushFilter {
  branch?: string(name='branch', example='master'),
  tag?: string(name='tag', example='prod-.*'),
}

model Repository {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test-description'),
  kind?: string(name='kind', example='Repository'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', description='This parameter is required.', example='my-repository', minLength=1, maxLength=40),
  spec: RepositorySpec(name='spec', description='This parameter is required.'),
  uid?: string(name='uid', example='1455541096***548'),
}

model RepositorySourceConfig {
  codeVersion?: CodeVersionReference(name='codeVersion'),
  filter?: EventFilterConfig(name='filter'),
  repositoryName: string(name='repositoryName', description='This parameter is required.', example='my-repository'),
}

model RepositorySpec {
  cloneUrl: string(name='cloneUrl', description='This parameter is required.', example='https://github.com/DDofDD/start-springboot-lfgy.git'),
  connectionName: string(name='connectionName', description='This parameter is required.', example='awesome-connection'),
  displayName?: string(name='displayName', example='my-repo-name'),
  id?: long(name='id', example='312649'),
  owner?: string(name='owner', example='my-org-name'),
  platform?: string(name='platform', example='github'),
  webUrl?: string(name='webUrl', example='https://github.com/my-org-name/my-repo-name'),
}

model RunAfter {
  name?: string(name='name', example='task-1'),
}

model ServiceBaseline {
  serviceInstance?: ServiceInstance(name='serviceInstance'),
}

model ServiceChanges {
  merge?: map[string]any(name='merge', example='{}: 不进行修改'),
}

model ServiceCommandStep {
  path?: string(name='path', example='./'),
  run?: string(name='run', example='s invoke'),
}

model ServiceComponentStep {
  component?: string(name='component', example='fc3 invoke'),
}

model ServiceConfig {
  artifact?: ArtifactMeta(name='artifact'),
  build?: BuildConfig(name='build'),
  component?: string(name='component', example='fc3@1.0.0'),
  props?: map[string]any(name='props'),
  source?: SourceConfig(name='source'),
  type?: string(name='type', example='Function'),
  variables?: map[string]Variable(name='variables'),
}

model ServiceDeployment {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='commit by xxx.'),
  environmentDeploymentName?: string(name='environmentDeploymentName', example='my-environment-deployment'),
  kind?: string(name='kind', example='Deployment'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', description='This parameter is required.', example='my-deployment', minLength=1, maxLength=63),
  status?: ServiceDeploymentStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model ServiceDeploymentSpec {
  baseline?: ServiceBaseline(name='baseline'),
  changes?: ServiceChanges(name='changes'),
  skipRemoveResources?: boolean(name='skipRemoveResources', example='false'),
  target?: ServiceBaseline(name='target'),
}

model ServiceDeploymentStatus {
  finishedTime?: string(name='finishedTime'),
  phase?: string(name='phase', example='Running'),
  pipelineName?: string(name='pipelineName', example='my-pipeline'),
  startTime?: string(name='startTime'),
  taskName?: string(name='taskName', example='my-task'),
}

model ServiceInstance {
  config?: ServiceConfig(name='config'),
  latestDeployment?: {
    finishedTime?: string(name='finishedTime'),
    name?: string(name='name'),
    phase?: string(name='phase', example='Running'),
    startTime?: string(name='startTime'),
  }(name='latestDeployment'),
  outputs?: map[string]any(name='outputs', example='{}'),
  variables?: map[string]Variable(name='variables'),
}

model ServiceMeta {
  name?: string(name='name', example='my-service'),
  type?: string(name='type', example='fc3'),
}

model ServicePluginStep {
  args?: map[string]any(name='args', example='{"key":"value"}'),
  plugin?: string(name='plugin', example='dingding-robot'),
}

model SourceConfig {
  oss?: OpenStructOssSourceConfig(name='oss'),
  repository?: RepositorySourceConfig(name='repository'),
  template?: TemplateSourceConfig(name='template'),
}

model Task {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='Task example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='Task'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', description='This parameter is required.', example='my-task', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: TaskSpec(name='spec'),
  status?: TaskStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model TaskExec {
  context?: Context(name='context'),
  name?: string(name='name', example='task-1'),
  runAfters?: [
    RunAfter
  ](name='runAfters'),
  taskTemplate?: string(name='taskTemplate', example='serverless-runner'),
}

model TaskExecError {
  code?: string(name='code', example='AccessDenied'),
  extraInfo?: string(name='extraInfo', example='部署辅助函数权限不足，需要添加额外的权限以解决问题。https://help.aliyun.com'),
  message?: string(name='message', example='部署服务[_appcenter-xxx]失败，权限不足'),
  requestId?: string(name='requestId', example='1-26d1287xxxxx'),
  title?: string(name='title', example='权限不足错误'),
}

model TaskInvocation {
  instanceID?: string(name='instanceID', example='c-nkj8shz7xxxx'),
  invocationID?: string(name='invocationID', example='E099843B-10A2-4936-9964-4E0EE263D564'),
  invocationTarget?: string(name='invocationTarget', example='acs:fc:cn-hangzhou:143xxxx:services/xxx.LATEST/functions/xxx'),
  output?: string(name='output', example='{"key1":"value1","key2":"value2"}'),
  requestID?: string(name='requestID', example='1B3058B1-F1C9-457C-B95C-2C250A4B3118'),
  slsLogStore?: string(name='slsLogStore', example='my-sls-logstore'),
  slsProject?: string(name='slsProject', example='my-sls-project'),
  status?: string(name='status', example='success'),
}

model TaskSpec {
  context?: Context(name='context'),
  templateName?: string(name='templateName', example='my-task-template'),
}

model TaskStatus {
  executionDetails?: [ string ](name='executionDetails'),
  invocations?: [
    TaskInvocation
  ](name='invocations'),
  latestExecError?: TaskExecError(name='latestExecError'),
  phase?: string(name='phase', example='Success'),
  statusGeneration?: long(name='statusGeneration', example='123'),
}

model TaskTemplate {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  deletionTime?: string(name='deletionTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='TaskTemplate example.'),
  generation?: int32(name='generation', example='1'),
  kind?: string(name='kind', example='TaskTemplate'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', description='This parameter is required.', example='my-task-template', minLength=1, maxLength=40),
  resourceVersion?: int32(name='resourceVersion', example='1'),
  spec?: TaskTemplateSpec(name='spec'),
  uid?: string(name='uid', example='1455541096***548'),
}

model TaskTemplateSpec {
  context?: Context(name='context'),
  description?: string(name='description', example='build&deploy.'),
  executeCondition?: Condition(name='executeCondition'),
  worker?: TaskWorker(name='worker'),
}

model TaskWorker {
  presetWorker?: string(name='presetWorker', example='serverless-runner'),
}

model Template {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='It is a template'),
  kind?: string(name='kind', example='Template'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name', example='demo-template'),
  spec?: TemplateSpec(name='spec'),
  status?: TemplateStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model TemplateConfig {
  parameters?: map[string]string(name='parameters', example='{"region":"cn-hangzhou"}'),
  serviceNameChanges?: map[string]string(name='serviceNameChanges', example='{"svc1":"svc2"}'),
  templateName: string(name='templateName', description='This parameter is required.', example='start-springboot'),
  variableValues?: TemplateVariableValueMap(name='variableValues'),
}

model TemplateParameterSchema {
  default?: any(name='default', example='defaultValue'),
  description?: string(name='description', example='Parameters for testing'),
  enum?: [ string ](name='enum'),
  pattern?: string(name='pattern', example='"^[a-zA-Z._-]+$"'),
  required?: boolean(name='required', example='true'),
  roleExtension?: {
    authorities?: [ string ](name='authorities'),
    name?: string(name='name'),
    service?: string(name='service'),
  }(name='roleExtension'),
  sensitive?: boolean(name='sensitive', example='false'),
  title?: string(name='title', example='demo'),
  type: string(name='type', description='This parameter is required.', example='string'),
}

model TemplateRevision {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='It is a template revision'),
  kind?: string(name='kind', example='TemplateRevision'),
  labels?: map[string]string(name='labels'),
  name?: string(name='name', example='demo-template'),
  spec?: TemplateSpec(name='spec'),
  status?: {
    packageUrl?: string(name='packageUrl', example='https://registry.serverless-devs.com/details.html?name=template-test&package_type=v3'),
    phase?: string(name='phase', example='Published'),
    pipelineName?: string(name='pipelineName', example='p-default'),
    templateUrl?: string(name='templateUrl', example='https://cap.console.aliyun.com/template-detail?template=adasdasdaewe-adadqwe'),
  }(name='status'),
  templateName?: string(name='templateName', example='demo-template'),
  uid?: string(name='uid', example='1455541096***548'),
}

model TemplateServiceConfig {
  artifact?: ArtifactMeta(name='artifact'),
  build?: BuildConfig(name='build'),
  component?: string(name='component', example='fc3@1.0.0'),
  props?: map[string]any(name='props'),
  source?: SourceConfig(name='source'),
  type?: string(name='type', example='Function'),
  variables?: map[string]TemplateParameterSchema(name='variables'),
}

model TemplateSourceConfig {
  downloadUrl?: string(name='downloadUrl', example='https://api.devsapp.cn/v3/packages/start-modelscope-v3/zipball/0.1.6'),
  name?: string(name='name', example='start-springboot-cap'),
}

model TemplateSpec {
  author: string(name='author', description='This parameter is required.', example='CAP'),
  category: string(name='category', description='This parameter is required.', example='AI'),
  license?: string(name='license', example='Apache-1.0'),
  packageName?: string(name='packageName', example='demo-package'),
  readme: string(name='readme', description='This parameter is required.'),
  registryToken?: string(name='registryToken'),
  services?: map[string]TemplateServiceConfig(name='services'),
  source?: {
    repository?: RepositorySourceConfig(name='repository'),
  }(name='source'),
  variables?: map[string]TemplateParameterSchema(name='variables'),
  version?: string(name='version'),
}

model TemplateStatus {
  latestDeployment?: {
    finishedTime?: string(name='finishedTime'),
    phase?: string(name='phase', example='BuildFinished'),
    pipelineName?: string(name='pipelineName'),
    startTime?: string(name='startTime'),
  }(name='latestDeployment'),
  latestVersion?: string(name='latestVersion', example='1.0.0'),
  packageUrl?: string(name='packageUrl', example='https://registry.serverless-devs.com/details.html?name=template-test&package_type=v3'),
  phase?: string(name='phase', example='Published'),
  templateUrl?: string(name='templateUrl', example='https://cap.console.aliyun.com/template-detail?template=adasdasdaewe-adadqwe'),
}

model TemplateVariableValueMap {
  services?: map[string]map[string]any(name='services'),
  shared?: map[string]any(name='shared', example='{"TEST_KEY":"new_value"}'),
}

model Tool {
  method?: string(name='method'),
  path?: string(name='path'),
  toolId?: string(name='toolId'),
  toolName?: string(name='toolName'),
}

model Toolset {
  createdTime?: string(name='createdTime', example='2021-11-19T09:34:38Z'),
  description?: string(name='description', example='test-description'),
  kind?: string(name='kind', example='Toolset'),
  labels?: map[string]string(name='labels'),
  name: string(name='name', description='This parameter is required.', example='my-toolset'),
  status?: ToolsetStatus(name='status'),
  uid?: string(name='uid', example='1455541096***548'),
}

model ToolsetAuthorization {
  authConfig?: map[string]string(name='authConfig'),
  type?: string(name='type', example='apiKey'),
}

model ToolsetSchema {
  detail?: string(name='detail'),
  type?: string(name='type', example='OpenAPI'),
}

model ToolsetSpec {
  authorization?: ToolsetAuthorization(name='authorization'),
  schema?: ToolsetSchema(name='schema'),
}

model ToolsetStatus {
  tools?: map[string]Tool(name='tools'),
}

model Variable {
  encrypted?: boolean(name='encrypted', example='false'),
  sensitive?: boolean(name='sensitive', example='false'),
  value?: any(name='value', example='object_value'),
}

model WebhookCodeContext {
  branch?: string(name='branch', example='master'),
  commitID?: string(name='commitID', example='b1dd9ba168dfef1cb3a1dd608b6054c771a93959'),
  description?: string(name='description', example='my PR decscription'),
  eventType?: string(name='eventType', example='PUSH'),
  message?: string(name='message', example='commit message'),
  prType?: string(name='prType', example='merged'),
  repoUrl?: string(name='repoUrl', example='https://codeup.aliyun.com/my-namespace/my-repo.git'),
  sourceBranch?: string(name='sourceBranch', example='master'),
  tag?: string(name='tag', example='release-0.0.1'),
  targetBranch?: string(name='targetBranch', example='master'),
  title?: string(name='title', example='# FIX'),
}

model OpenStructOssSourceConfig {
  bucket?: string(name='bucket', example='demo-bucket'),
  object?: string(name='object', example='demo-object'),
}

model ActivateConnectionRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  account?: GitAccount(name='account', position='Body'),
  credential?: OAuthCredential(name='credential', position='Body'),
}

model ActivateConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Connection  
}

/**
  * @param request  the request parameters of ActivateConnection  ActivateConnectionRequest
  * @return ActivateConnectionResponse
 */
async function activateConnection(request: ActivateConnectionRequest): ActivateConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ActivateConnection', 'PATCH', '/2023-07-14/connections/{name}/activate', 'json', false, 'json', request);
}

model CancelPipelineRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model CancelPipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

/**
  * @param request  the request parameters of CancelPipeline  CancelPipelineRequest
  * @return CancelPipelineResponse
 */
async function cancelPipeline(request: CancelPipelineRequest): CancelPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelPipeline', 'PUT', '/2023-07-14/pipelines/{name}/cancel', 'json', false, 'json', request);
}

model CancelTaskRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model CancelTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

/**
  * @param request  the request parameters of CancelTask  CancelTaskRequest
  * @return CancelTaskResponse
 */
async function cancelTask(request: CancelTaskRequest): CancelTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CancelTask', 'PUT', '/2023-07-14/tasks/{name}/cancel', 'json', false, 'json', request);
}

model CreateArtifactRequest {
  body?: Artifact(name='body', position='Body'),
}

model CreateArtifactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Artifact  
}

/**
  * @param request  the request parameters of CreateArtifact  CreateArtifactRequest
  * @return CreateArtifactResponse
 */
async function createArtifact(request: CreateArtifactRequest): CreateArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateArtifact', 'POST', '/2023-07-14/artifacts', 'json', false, 'json', request);
}

model CreateEnvironmentRequest {
  projectName: string(name='projectName', description='This parameter is required.', example='demo-project', position='Path'),
  body?: Environment(name='body', position='Body'),
}

model CreateEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Environment  
}

/**
  * @param request  the request parameters of CreateEnvironment  CreateEnvironmentRequest
  * @return CreateEnvironmentResponse
 */
async function createEnvironment(request: CreateEnvironmentRequest): CreateEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateEnvironment', 'POST', '/2023-07-14/projects/{projectName}/environments', 'json', false, 'json', request);
}

model CreatePipelineRequest {
  body?: Pipeline(name='body', position='Body'),
}

model CreatePipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

/**
  * @param request  the request parameters of CreatePipeline  CreatePipelineRequest
  * @return CreatePipelineResponse
 */
async function createPipeline(request: CreatePipelineRequest): CreatePipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreatePipeline', 'POST', '/2023-07-14/pipelines', 'json', false, 'json', request);
}

model CreateProjectRequest {
  body?: Project(name='body', position='Body'),
}

model CreateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Project  
}

/**
  * @param request  the request parameters of CreateProject  CreateProjectRequest
  * @return CreateProjectResponse
 */
async function createProject(request: CreateProjectRequest): CreateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateProject', 'POST', '/2023-07-14/projects', 'json', false, 'json', request);
}

model CreateTaskRequest {
  body?: Task(name='body', position='Body'),
}

model CreateTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

/**
  * @param request  the request parameters of CreateTask  CreateTaskRequest
  * @return CreateTaskResponse
 */
async function createTask(request: CreateTaskRequest): CreateTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateTask', 'POST', '/2023-07-14/tasks', 'json', false, 'json', request);
}

model DeleteArtifactRequest {
  name?: string(name='name', example='demo-artifact', position='Path'),
}

model DeleteArtifactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteArtifact  DeleteArtifactRequest
  * @return DeleteArtifactResponse
 */
async function deleteArtifact(request: DeleteArtifactRequest): DeleteArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteArtifact', 'DELETE', '/2023-07-14/artifacts/{name}', 'none', false, 'json', request);
}

model DeleteConnectionRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  force?: boolean(name='force', example='true', position='Query'),
}

model DeleteConnectionResponseBody = {
  requestId?: string(name='requestId', example='A5152937-1C8A-5260-90FA-520CEF028D2D'),
}

model DeleteConnectionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteConnectionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteConnection  DeleteConnectionRequest
  * @return DeleteConnectionResponse
 */
async function deleteConnection(request: DeleteConnectionRequest): DeleteConnectionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteConnection', 'DELETE', '/2023-07-14/connections/{name}', 'json', false, 'json', request);
}

model DeleteEnvironmentRequest {
  projectName: string(name='projectName', description='This parameter is required.', example='demo-project', position='Path'),
  name: string(name='name', description='This parameter is required.', example='demo-env', position='Path'),
}

model DeleteEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteEnvironment  DeleteEnvironmentRequest
  * @return DeleteEnvironmentResponse
 */
async function deleteEnvironment(request: DeleteEnvironmentRequest): DeleteEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteEnvironment', 'DELETE', '/2023-07-14/projects/{projectName}/environments/{name}', 'none', false, 'json', request);
}

model DeleteProjectRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  force?: boolean(name='force', example='true', position='Query'),
}

model DeleteProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
}

/**
  * @param request  the request parameters of DeleteProject  DeleteProjectRequest
  * @return DeleteProjectResponse
 */
async function deleteProject(request: DeleteProjectRequest): DeleteProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteProject', 'DELETE', '/2023-07-14/projects/{name}', 'none', false, 'json', request);
}

model DeployEnvironmentRequest {
  projectName?: string(name='projectName', example='demo-name', position='Path'),
  name?: string(name='name', example='demo-name', position='Path'),
  body?: DeployEnvironmentOptions(name='body', position='Body'),
}

model DeployEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnvironmentDeployment  
}

/**
  * @param request  the request parameters of DeployEnvironment  DeployEnvironmentRequest
  * @return DeployEnvironmentResponse
 */
async function deployEnvironment(request: DeployEnvironmentRequest): DeployEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeployEnvironment', 'PATCH', '/2023-07-14/projects/{projectName}/environments/{name}/deploy', 'json', false, 'json', request);
}

model FetchArtifactDownloadUrlRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model FetchArtifactDownloadUrlResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ArtifactCode  
}

/**
  * @param request  the request parameters of FetchArtifactDownloadUrl  FetchArtifactDownloadUrlRequest
  * @return FetchArtifactDownloadUrlResponse
 */
async function fetchArtifactDownloadUrl(request: FetchArtifactDownloadUrlRequest): FetchArtifactDownloadUrlResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FetchArtifactDownloadUrl', 'GET', '/2023-07-14/artifacts/{name}/fetchCode', 'json', false, 'json', request);
}

model FetchArtifactTempBucketTokenRequest {
}

model FetchArtifactTempBucketTokenResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ArtifactTempBucketToken  
}

/**
  * @param request  the request parameters of FetchArtifactTempBucketToken  FetchArtifactTempBucketTokenRequest
  * @return FetchArtifactTempBucketTokenResponse
 */
async function fetchArtifactTempBucketToken(request: FetchArtifactTempBucketTokenRequest): FetchArtifactTempBucketTokenResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FetchArtifactTempBucketToken', 'GET', '/2023-07-14/artifacts/action/fetchTempBucketToken', 'json', false, 'json', request);
}

model FetchConnectionCredentialRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model FetchConnectionCredentialResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: OAuthCredential  
}

/**
  * @param request  the request parameters of FetchConnectionCredential  FetchConnectionCredentialRequest
  * @return FetchConnectionCredentialResponse
 */
async function fetchConnectionCredential(request: FetchConnectionCredentialRequest): FetchConnectionCredentialResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'FetchConnectionCredential', 'GET', '/2023-07-14/connections/{name}/fetchCredential', 'json', false, 'json', request);
}

model GetArtifactRequest {
  name?: string(name='name', example='demo-artifact', position='Path'),
}

model GetArtifactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Artifact  
}

/**
  * @param request  the request parameters of GetArtifact  GetArtifactRequest
  * @return GetArtifactResponse
 */
async function getArtifact(request: GetArtifactRequest): GetArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetArtifact', 'GET', '/2023-07-14/artifacts/{name}', 'json', false, 'json', request);
}

model GetEnvironmentRequest {
  projectName: string(name='projectName', description='This parameter is required.', example='demo-project', position='Path'),
  name: string(name='name', description='This parameter is required.', example='demo-env', position='Path'),
}

model GetEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Environment  
}

/**
  * @param request  the request parameters of GetEnvironment  GetEnvironmentRequest
  * @return GetEnvironmentResponse
 */
async function getEnvironment(request: GetEnvironmentRequest): GetEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEnvironment', 'GET', '/2023-07-14/projects/{projectName}/environments/{name}', 'json', false, 'json', request);
}

model GetEnvironmentDeploymentRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetEnvironmentDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnvironmentDeployment  
}

/**
  * @param request  the request parameters of GetEnvironmentDeployment  GetEnvironmentDeploymentRequest
  * @return GetEnvironmentDeploymentResponse
 */
async function getEnvironmentDeployment(request: GetEnvironmentDeploymentRequest): GetEnvironmentDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetEnvironmentDeployment', 'GET', '/2023-07-14/environmentdeployments/{name}', 'json', false, 'json', request);
}

model GetPipelineRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetPipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

/**
  * @param request  the request parameters of GetPipeline  GetPipelineRequest
  * @return GetPipelineResponse
 */
async function getPipeline(request: GetPipelineRequest): GetPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetPipeline', 'GET', '/2023-07-14/pipelines/{name}', 'json', false, 'json', request);
}

model GetProjectRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Project  
}

/**
  * @param request  the request parameters of GetProject  GetProjectRequest
  * @return GetProjectResponse
 */
async function getProject(request: GetProjectRequest): GetProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetProject', 'GET', '/2023-07-14/projects/{name}', 'json', false, 'json', request);
}

model GetRepositoryRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetRepositoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Repository  
}

/**
  * @param request  the request parameters of GetRepository  GetRepositoryRequest
  * @return GetRepositoryResponse
 */
async function getRepository(request: GetRepositoryRequest): GetRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetRepository', 'GET', '/2023-07-14/repositories/{name}', 'json', false, 'json', request);
}

model GetServiceDeploymentRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetServiceDeploymentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ServiceDeployment  
}

/**
  * @param request  the request parameters of GetServiceDeployment  GetServiceDeploymentRequest
  * @return GetServiceDeploymentResponse
 */
async function getServiceDeployment(request: GetServiceDeploymentRequest): GetServiceDeploymentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetServiceDeployment', 'GET', '/2023-07-14/servicedeployments/{name}', 'json', false, 'json', request);
}

model GetTaskRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model GetTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

/**
  * @param request  the request parameters of GetTask  GetTaskRequest
  * @return GetTaskResponse
 */
async function getTask(request: GetTaskRequest): GetTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTask', 'GET', '/2023-07-14/tasks/{name}', 'json', false, 'json', request);
}

model ListConnectionsRequest {
  keyword?: string(name='keyword', example='auto-', position='Query'),
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='100', position='Query'),
}

model ListConnectionsResponseBody = {
  data?: [
    Connection
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
  totalCount?: long(name='totalCount', example='1'),
}

model ListConnectionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListConnectionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListConnections  ListConnectionsRequest
  * @return ListConnectionsResponse
 */
async function listConnections(request: ListConnectionsRequest): ListConnectionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListConnections', 'GET', '/2023-07-14/connections', 'json', false, 'json', request);
}

model ListEnvironmentsRequest {
  projectName: string(name='projectName', description='This parameter is required.', example='demo-project', position='Path'),
  keyword?: string(name='keyword', example='dev', position='Query'),
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
}

model ListEnvironmentsResponseBody = {
  data?: [
    Environment
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='50'),
  totalCount?: long(name='totalCount', example='100'),
}

model ListEnvironmentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListEnvironmentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListEnvironments  ListEnvironmentsRequest
  * @return ListEnvironmentsResponse
 */
async function listEnvironments(request: ListEnvironmentsRequest): ListEnvironmentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListEnvironments', 'GET', '/2023-07-14/projects/{projectName}/environments/', 'json', false, 'json', request);
}

model ListPipelinesRequest {
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
}

model ListPipelinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [
    Pipeline
  ](name='body'),
}

/**
  * @param request  the request parameters of ListPipelines  ListPipelinesRequest
  * @return ListPipelinesResponse
 */
async function listPipelines(request: ListPipelinesRequest): ListPipelinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListPipelines', 'GET', '/2023-07-14/pipelines', 'array', false, 'json', request);
}

model ListProjectsRequest {
  keyword?: string(name='keyword', example='spring-boot', position='Query'),
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='100', position='Query'),
}

model ListProjectsResponseBody = {
  data?: [
    Project
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='100'),
  totalCount?: long(name='totalCount', example='1'),
}

model ListProjectsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListProjectsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListProjects  ListProjectsRequest
  * @return ListProjectsResponse
 */
async function listProjects(request: ListProjectsRequest): ListProjectsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListProjects', 'GET', '/2023-07-14/projects', 'json', false, 'json', request);
}

model ListServiceDeploymentsRequest {
  keyword?: string(name='keyword', example='demo', position='Query'),
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
  pageNumber?: long(name='pageNumber', example='1', position='Query'),
  pageSize?: long(name='pageSize', example='10', position='Query'),
}

model ListServiceDeploymentsResponseBody = {
  data?: [
    ServiceDeployment
  ](name='data'),
  pageNumber?: long(name='pageNumber', example='1'),
  pageSize?: long(name='pageSize', example='10'),
  totalCount?: long(name='totalCount', example='50'),
}

model ListServiceDeploymentsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListServiceDeploymentsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListServiceDeployments  ListServiceDeploymentsRequest
  * @return ListServiceDeploymentsResponse
 */
async function listServiceDeployments(request: ListServiceDeploymentsRequest): ListServiceDeploymentsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListServiceDeployments', 'GET', '/2023-07-14/servicedeployments', 'json', false, 'json', request);
}

model ListTasksRequest {
  labelSelector?: [ string ](name='labelSelector', shrink='simple', position='Query'),
}

model ListTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: [
    Task
  ](name='body'),
}

/**
  * @param request  the request parameters of ListTasks  ListTasksRequest
  * @return ListTasksResponse
 */
async function listTasks(request: ListTasksRequest): ListTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListTasks', 'GET', '/2023-07-14/tasks', 'array', false, 'json', request);
}

model PreviewEnvironmentRequest {
  projectName: string(name='projectName', description='This parameter is required.', example='demo-project', position='Path'),
  name: string(name='name', description='This parameter is required.', example='demo-env', position='Path'),
}

model PreviewEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: EnvironmentDeploymentSpec  
}

/**
  * @param request  the request parameters of PreviewEnvironment  PreviewEnvironmentRequest
  * @return PreviewEnvironmentResponse
 */
async function previewEnvironment(request: PreviewEnvironmentRequest): PreviewEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PreviewEnvironment', 'GET', '/2023-07-14/projects/{projectName}/environments/{name}/preview', 'json', false, 'json', request);
}

model PutArtifactRequest {
  name?: string(name='name', example='demo-artifact', position='Path'),
  body?: Artifact(name='body', position='Body'),
  force?: boolean(name='force', example='false', position='Query'),
}

model PutArtifactResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Artifact  
}

/**
  * @param request  the request parameters of PutArtifact  PutArtifactRequest
  * @return PutArtifactResponse
 */
async function putArtifact(request: PutArtifactRequest): PutArtifactResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutArtifact', 'PUT', '/2023-07-14/artifacts/{name}', 'json', false, 'json', request);
}

model PutPipelineStatusRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  body?: Pipeline(name='body', position='Body'),
  force?: boolean(name='force', example='false', position='Query'),
}

model PutPipelineStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

/**
  * @param request  the request parameters of PutPipelineStatus  PutPipelineStatusRequest
  * @return PutPipelineStatusResponse
 */
async function putPipelineStatus(request: PutPipelineStatusRequest): PutPipelineStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutPipelineStatus', 'PUT', '/2023-07-14/pipelines/{name}/status', 'json', false, 'json', request);
}

model PutTaskStatusRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  body?: Task(name='body', position='Body'),
  force?: boolean(name='force', example='false', position='Query'),
}

model PutTaskStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

/**
  * @param request  the request parameters of PutTaskStatus  PutTaskStatusRequest
  * @return PutTaskStatusResponse
 */
async function putTaskStatus(request: PutTaskStatusRequest): PutTaskStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PutTaskStatus', 'PUT', '/2023-07-14/tasks/{name}/status', 'json', false, 'json', request);
}

model RenderServicesByTemplateRequest {
  parameters?: map[string]any(name='parameters', example='{"region":"cn-hangzhou"}', position='Body'),
  projectName?: string(name='projectName', example='my-project', position='Body'),
  serviceNameChanges?: map[string]string(name='serviceNameChanges', example='{"svc1":"svc2"}', position='Body'),
  templateName: string(name='templateName', description='This parameter is required.', example='start-springboot', position='Body'),
  variableValues?: TemplateVariableValueMap(name='variableValues', position='Body'),
}

model RenderServicesByTemplateResponseBody = {
  changedServiceNames?: map[string]string(name='changedServiceNames'),
  services?: map[string]ServiceConfig(name='services'),
  variables?: map[string]Variable(name='variables'),
}

model RenderServicesByTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RenderServicesByTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RenderServicesByTemplate  RenderServicesByTemplateRequest
  * @return RenderServicesByTemplateResponse
 */
async function renderServicesByTemplate(request: RenderServicesByTemplateRequest): RenderServicesByTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RenderServicesByTemplate', 'POST', '/2023-07-14/templates/action/renderServices', 'json', false, 'json', request);
}

model ResumeTaskRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model ResumeTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

/**
  * @param request  the request parameters of ResumeTask  ResumeTaskRequest
  * @return ResumeTaskResponse
 */
async function resumeTask(request: ResumeTaskRequest): ResumeTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ResumeTask', 'PUT', '/2023-07-14/tasks/{name}/resume', 'json', false, 'json', request);
}

model RetryTaskRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model RetryTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

/**
  * @param request  the request parameters of RetryTask  RetryTaskRequest
  * @return RetryTaskResponse
 */
async function retryTask(request: RetryTaskRequest): RetryTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'RetryTask', 'PUT', '/2023-07-14/tasks/{name}/retry', 'json', false, 'json', request);
}

model StartPipelineRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model StartPipelineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Pipeline  
}

/**
  * @param request  the request parameters of StartPipeline  StartPipelineRequest
  * @return StartPipelineResponse
 */
async function startPipeline(request: StartPipelineRequest): StartPipelineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartPipeline', 'PUT', '/2023-07-14/pipelines/{name}/start', 'json', false, 'json', request);
}

model StartTaskRequest {
  name?: string(name='name', example='demo-name', position='Path'),
}

model StartTaskResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Task  
}

/**
  * @param request  the request parameters of StartTask  StartTaskRequest
  * @return StartTaskResponse
 */
async function startTask(request: StartTaskRequest): StartTaskResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'StartTask', 'PUT', '/2023-07-14/tasks/{name}/start', 'json', false, 'json', request);
}

model UpdateEnvironmentRequest {
  projectName: string(name='projectName', description='This parameter is required.', example='demo-project', position='Path'),
  name: string(name='name', description='This parameter is required.', example='demo-env', position='Path'),
  body?: Environment(name='body', position='Body'),
}

model UpdateEnvironmentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Environment  
}

/**
  * @param request  the request parameters of UpdateEnvironment  UpdateEnvironmentRequest
  * @return UpdateEnvironmentResponse
 */
async function updateEnvironment(request: UpdateEnvironmentRequest): UpdateEnvironmentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateEnvironment', 'PUT', '/2023-07-14/projects/{projectName}/environments/{name}', 'json', false, 'json', request);
}

model UpdateProjectRequest {
  name?: string(name='name', example='demo-name', position='Path'),
  body?: Project(name='body', position='Body'),
}

model UpdateProjectResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: Project  
}

/**
  * @param request  the request parameters of UpdateProject  UpdateProjectRequest
  * @return UpdateProjectResponse
 */
async function updateProject(request: UpdateProjectRequest): UpdateProjectResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateProject', 'PUT', '/2023-07-14/projects/{name}', 'json', false, 'json', request);
}

