/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'waf-openapi';
  @version = '2016-11-11';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-qingdao = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-beijing = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-chengdu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-zhangjiakou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-huhehaote = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hangzhou = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-heyuan = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-wulanchabu = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-hongkong = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    eu-central-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'wafopenapi.ap-southeast-1.aliyuncs.com',
    cn-shanghai-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-shenzhen-finance-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
    cn-north-2-gov-1 = 'wafopenapi.cn-hangzhou.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model CreateInstanceRequest {
  autoRenewDuration?: int32(name='AutoRenewDuration', position='Query'),
  clientToken: string(name='ClientToken', position='Query'),
  duration: int32(name='Duration', position='Query'),
  extBandwidth?: int32(name='ExtBandwidth', position='Query'),
  extDomainPackage?: int32(name='ExtDomainPackage', position='Query'),
  isAutoRenew?: boolean(name='IsAutoRenew', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packageCode: string(name='PackageCode', position='Query'),
  pricingCycle: string(name='PricingCycle', position='Query'),
}

model CreateInstanceResponseBody = {
  instanceId?: string(name='InstanceId'),
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstanceRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model ReleaseInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  clientToken: string(name='ClientToken', position='Query'),
  duration: int32(name='Duration', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pricingCycle: string(name='PricingCycle', position='Query'),
}

model RenewInstanceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeInstanceRequest {
  clientToken: string(name='ClientToken', position='Query'),
  extBandwidth: int32(name='ExtBandwidth', position='Query'),
  extDomainPackage: int32(name='ExtDomainPackage', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packageCode: string(name='PackageCode', position='Query'),
}

model UpgradeInstanceResponseBody = {
  orderId?: string(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model UpgradeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeInstanceResponseBody(name='body'),
}

async function upgradeInstance(request: UpgradeInstanceRequest): UpgradeInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeInstance', 'POST', '/', 'json', false, 'json', request);
}

