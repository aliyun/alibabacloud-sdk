/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'igraph';
  @version = '2021-06-21';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model ErrorResponse {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='internal server error'),
  requestId?: string(name='requestId', example='90D6B8F5-FE97-4509-9AAB-367836C51818'),
}

model CreateGraphRequest {
  instanceId: string(name='instanceId', position='Path'),
  graphName: string(name='graphName', position='Path'),
  body?: string(name='body', position='Body'),
  namespace?: string(name='namespace', position='Query'),
}

model CreateGraphResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId', example='{}'),
  result?: map[string]any(name='result'),
}

model CreateGraphResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGraphResponseBody(name='body'),
}

async function createGraph(request: CreateGraphRequest): CreateGraphResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateGraph', 'POST', '/openapi/igraph/instances/{instanceId}/graphs/{graphName}', 'json', false, 'json', request);
}

model CreateGraphSchemaRequest {
  instanceId: string(name='instanceId', position='Path'),
  graphName: string(name='graphName', position='Path'),
  body?: string(name='body', position='Body'),
  namespace?: string(name='namespace', position='Query'),
}

model CreateGraphSchemaResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model CreateGraphSchemaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateGraphSchemaResponseBody(name='body'),
}

async function createGraphSchema(request: CreateGraphSchemaRequest): CreateGraphSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'CreateGraphSchema', 'POST', '/openapi/igraph/instances/{instanceId}/graphs/{graphName}/schemas', 'json', false, 'json', request);
}

model DeleteGraphRequest {
  instanceId: string(name='instanceId', position='Path'),
  graphName: string(name='graphName', position='Path'),
  namespace?: string(name='namespace', position='Query'),
}

model DeleteGraphResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model DeleteGraphResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteGraphResponseBody(name='body'),
}

async function deleteGraph(request: DeleteGraphRequest): DeleteGraphResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'DeleteGraph', 'DELETE', '/openapi/igraph/instances/{instanceId}/graphs/{graphName}', 'json', false, 'json', request);
}

model GetGraphRequest {
  instanceId?: string(name='instanceId', position='Path'),
  graphName?: string(name='graphName', position='Path'),
  namespace?: string(name='namespace', position='Query'),
}

model GetGraphResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model GetGraphResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGraphResponseBody(name='body'),
}

async function getGraph(request: GetGraphRequest): GetGraphResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGraph', 'GET', '/openapi/igraph/instances/{instanceId}/graphs/{graphName}', 'json', false, 'json', request);
}

model GetGraphSchemaRequest {
  instanceId: string(name='instanceId', position='Path'),
  graphName: string(name='graphName', position='Path'),
  graphSchemaName: string(name='graphSchemaName', position='Path'),
  namespace?: string(name='namespace', position='Query'),
}

model GetGraphSchemaResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model GetGraphSchemaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetGraphSchemaResponseBody(name='body'),
}

async function getGraphSchema(request: GetGraphSchemaRequest): GetGraphSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetGraphSchema', 'GET', '/openapi/igraph/instances/{instanceId}/graphs/{graphName}/schemas/{graphSchemaName}', 'json', false, 'json', request);
}

model GetIgraphLabelBackFlowRequest {
  graphName: string(name='graphName', position='Path'),
  instanceId: string(name='instanceId', position='Path'),
  labelName?: string(name='labelName', position='Path'),
}

model GetIgraphLabelBackFlowResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model GetIgraphLabelBackFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIgraphLabelBackFlowResponseBody(name='body'),
}

async function getIgraphLabelBackFlow(request: GetIgraphLabelBackFlowRequest): GetIgraphLabelBackFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIgraphLabelBackFlow', 'GET', '/openapi/igraph/instances/{instanceId}/graphs/{graphName}/label/{labelName}/backflow', 'json', false, 'json', request);
}

model GetIgraphLabelLastBackflowRequest {
  instanceId: string(name='instanceId', position='Path'),
  graphName: string(name='graphName', position='Path'),
  labelName: string(name='labelName', position='Path'),
}

model GetIgraphLabelLastBackflowResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model GetIgraphLabelLastBackflowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIgraphLabelLastBackflowResponseBody(name='body'),
}

async function getIgraphLabelLastBackflow(request: GetIgraphLabelLastBackflowRequest): GetIgraphLabelLastBackflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIgraphLabelLastBackflow', 'GET', '/openapi/igraph/instances/{instanceId}/graphs/{graphName}/label/{labelName}/backflow/last', 'json', false, 'json', request);
}

model GetIgraphTableDetailRequest {
  instanceId?: string(name='instanceId', position='Path'),
  graphName?: string(name='graphName', position='Path'),
  tableName?: string(name='tableName', position='Path'),
}

model GetIgraphTableDetailResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model GetIgraphTableDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIgraphTableDetailResponseBody(name='body'),
}

async function getIgraphTableDetail(request: GetIgraphTableDetailRequest): GetIgraphTableDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIgraphTableDetail', 'GET', '/openapi/igraph/instances/{instanceId}/graphs/{graphName}/tables/{tableName}/detail', 'json', false, 'json', request);
}

model GetIgraphTablesBackFlowRequest {
  instanceId: string(name='instanceId', position='Path'),
  graphName: string(name='graphName', position='Path'),
  namespace?: string(name='namespace', position='Query'),
}

model GetIgraphTablesBackFlowResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model GetIgraphTablesBackFlowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetIgraphTablesBackFlowResponseBody(name='body'),
}

async function getIgraphTablesBackFlow(request: GetIgraphTablesBackFlowRequest): GetIgraphTablesBackFlowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetIgraphTablesBackFlow', 'GET', '/openapi/igraph/instances/{instanceId}/graphs/{graphName}/backflows', 'json', false, 'json', request);
}

model GetInstanceRequest {
  instanceId: string(name='instanceId', position='Path'),
  namespace?: string(name='namespace', position='Query'),
}

model GetInstanceResponseBody = {
  code?: string(name='code', example='SystemError'),
  message?: string(name='message', example='SystemError'),
  requestId?: string(name='requestId', example='90D6B8F5-FE97-4509-9AAB-367836C51818'),
  result?: {
    resourceGroupId?: string(name='resourceGroupId'),
  }(name='result'),
}

model GetInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceResponseBody(name='body'),
}

async function getInstance(request: GetInstanceRequest): GetInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstance', 'GET', '/openapi/igraph/instances/{instanceId}', 'json', false, 'json', request);
}

model GetInstanceDigestRequest {
  instanceId?: string(name='instanceId', position='Path'),
  namespace?: string(name='namespace', position='Query'),
}

model GetInstanceDigestResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model GetInstanceDigestResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetInstanceDigestResponseBody(name='body'),
}

async function getInstanceDigest(request: GetInstanceDigestRequest): GetInstanceDigestResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetInstanceDigest', 'GET', '/openapi/igraph/instances/{instanceId}/digest', 'json', false, 'json', request);
}

model GetTableDetailRequest {
  instanceId: string(name='instanceId', position='Path'),
  tableName: string(name='tableName', position='Path'),
}

model GetTableDetailResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model GetTableDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTableDetailResponseBody(name='body'),
}

async function getTableDetail(request: GetTableDetailRequest): GetTableDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTableDetail', 'GET', '/openapi/igraph/instances/{instanceId}/tables/{tableName}/detail', 'json', false, 'json', request);
}

model GetTableLastBackflowRequest {
  instanceId: string(name='instanceId', position='Path'),
  tableName: string(name='tableName', position='Path'),
  partition?: string(name='partition', position='Query'),
}

model GetTableLastBackflowResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model GetTableLastBackflowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetTableLastBackflowResponseBody(name='body'),
}

async function getTableLastBackflow(request: GetTableLastBackflowRequest): GetTableLastBackflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'GetTableLastBackflow', 'GET', '/openapi/igraph/instances/{instanceId}/table/{tableName}/backflow/last', 'json', false, 'json', request);
}

model ListDemoGraphSchemasRequest {
}

model ListDemoGraphSchemasResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
  returnTimeMs?: string(name='returnTimeMs'),
}

model ListDemoGraphSchemasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListDemoGraphSchemasResponseBody(name='body'),
}

async function listDemoGraphSchemas(request: ListDemoGraphSchemasRequest): ListDemoGraphSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListDemoGraphSchemas', 'GET', '/openapi/igraph/instances/demo/schemas', 'json', false, 'json', request);
}

model ListGraphSchemasRequest {
  instanceId: string(name='instanceId', position='Path'),
  graphName: string(name='graphName', position='Path'),
  namespace?: string(name='namespace', position='Query'),
  pageLimit?: string(name='pageLimit', position='Query'),
  pageStart?: string(name='pageStart', position='Query'),
  returnSpec?: string(name='returnSpec', position='Query'),
  schemaStatus?: string(name='schemaStatus', position='Query'),
}

model ListGraphSchemasResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model ListGraphSchemasResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListGraphSchemasResponseBody(name='body'),
}

async function listGraphSchemas(request: ListGraphSchemasRequest): ListGraphSchemasResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListGraphSchemas', 'GET', '/openapi/igraph/instances/{instanceId}/graphs/{graphName}/schemas', 'json', false, 'json', request);
}

model ListIgraphInstancesRequest {
  pageContinue?: string(name='pageContinue', position='Query'),
  pageLimit?: string(name='pageLimit', position='Query'),
  resourceGroupId?: string(name='resourceGroupId', position='Query'),
  tags?: [ 
    {
      key?: string(name='key'),
      value?: string(name='value'),
    }
  ](name='tags', shrink='json', position='Query'),
}

model ListIgraphInstancesResponseBody = {
  code?: string(name='code', example='InternalServerError'),
  message?: string(name='message', example='internal server error'),
  requestId?: string(name='requestId', example='90D6B8F5-FE97-4509-9AAB-367836C51818'),
  result?: [ 
    {
      resourceGroupId?: string(name='resourceGroupId'),
    }
  ](name='result'),
}

model ListIgraphInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListIgraphInstancesResponseBody(name='body'),
}

async function listIgraphInstances(request: ListIgraphInstancesRequest): ListIgraphInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListIgraphInstances', 'GET', '/openapi/igraph/instances', 'json', false, 'json', request);
}

model ListInstanceGraphRequest {
  instanceId?: string(name='instanceId', position='Path'),
  namespace?: string(name='namespace', position='Query'),
}

model ListInstanceGraphResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model ListInstanceGraphResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListInstanceGraphResponseBody(name='body'),
}

async function listInstanceGraph(request: ListInstanceGraphRequest): ListInstanceGraphResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'ListInstanceGraph', 'GET', '/openapi/igraph/instances/{instanceId}/graphs', 'json', false, 'json', request);
}

model PublishGraphSchemaRequest {
  instanceId: string(name='instanceId', position='Path'),
  graphName: string(name='graphName', position='Path'),
  graphSchemaName: string(name='graphSchemaName', position='Path'),
  namespace?: string(name='namespace', position='Query'),
}

model PublishGraphSchemaResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model PublishGraphSchemaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: PublishGraphSchemaResponseBody(name='body'),
}

async function publishGraphSchema(request: PublishGraphSchemaRequest): PublishGraphSchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'PublishGraphSchema', 'PUT', '/openapi/igraph/instances/{instanceId}/graphs/{graphName}/schemas/{graphSchemaName}', 'json', false, 'json', request);
}

model SearchIgraphDemoRequest {
}

model SearchIgraphDemoResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
  returnTimeMs?: long(name='returnTimeMs'),
}

model SearchIgraphDemoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SearchIgraphDemoResponseBody(name='body'),
}

async function searchIgraphDemo(request: SearchIgraphDemoRequest): SearchIgraphDemoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'SearchIgraphDemo', 'POST', '/openapi/igraph/tool/actions/search_demo', 'json', false, 'json', request);
}

model TriggerLabelBackflowRequest {
  instanceId: string(name='instanceId', position='Path'),
  graphName: string(name='graphName', position='Path'),
  labelName: string(name='labelName', position='Path'),
  odpsPartition?: string(name='odpsPartition', position='Query'),
  timestamp?: string(name='timestamp', position='Query'),
}

model TriggerLabelBackflowResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model TriggerLabelBackflowResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TriggerLabelBackflowResponseBody(name='body'),
}

async function triggerLabelBackflow(request: TriggerLabelBackflowRequest): TriggerLabelBackflowResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'TriggerLabelBackflow', 'POST', '/openapi/igraph/instances/{instanceId}/graphs/{graphName}/label/{labelName}/backflow', 'json', false, 'json', request);
}

model UpdateGraphDescriptionRequest {
  instanceId: string(name='instanceId', position='Path'),
  graphName: string(name='graphName', position='Path'),
  namespace?: string(name='namespace', position='Query'),
}

model UpdateGraphDescriptionResponseBody = {
  code?: string(name='code'),
  message?: string(name='message'),
  requestId?: string(name='requestId'),
  result?: map[string]any(name='result'),
}

model UpdateGraphDescriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpdateGraphDescriptionResponseBody(name='body'),
}

async function updateGraphDescription(request: UpdateGraphDescriptionRequest): UpdateGraphDescriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RESTFUL', 'UpdateGraphDescription', 'PUT', '/openapi/igraph/instances/{instanceId}/graphs/{graphName}/description', 'json', false, 'json', request);
}

