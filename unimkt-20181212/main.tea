/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    cn-hangzhou = 'cloudcode.cn-hangzhou.aliyuncs.com',
    cn-shanghai = 'cloudcode.cn-shanghai.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('unimkt', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ChangeMediaStatusRequest {
  accessStatus?: string(name='AccessStatus'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  mediaId?: string(name='MediaId'),
  mediaStatus?: string(name='MediaStatus'),
  message?: string(name='Message'),
  messageKey?: string(name='MessageKey'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ChangeMediaStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    accessStatus?: string(name='AccessStatus'),
    accessWay?: string(name='AccessWay'),
    config?: string(name='Config'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    firstScene?: string(name='FirstScene'),
    keyWords?: string(name='KeyWords'),
    mediaId?: string(name='MediaId'),
    mediaName?: string(name='MediaName'),
    mediaStatus?: string(name='MediaStatus'),
    mediaType?: string(name='MediaType'),
    modifyTime?: long(name='ModifyTime'),
    os?: string(name='Os'),
    secondScene?: string(name='SecondScene'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeMediaStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeMediaStatusResponseBody(name='body'),
}

async function changeMediaStatusWithOptions(request: ChangeMediaStatusRequest, runtime: Util.RuntimeOptions): ChangeMediaStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeMediaStatus', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeMediaStatus(request: ChangeMediaStatusRequest): ChangeMediaStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeMediaStatusWithOptions(request, runtime);
}

model ChangeSlotStatusRequest {
  adSlotCorporateStatus?: string(name='AdSlotCorporateStatus'),
  adSlotId?: string(name='AdSlotId'),
  adSlotStatus?: string(name='AdSlotStatus'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  message?: string(name='Message'),
  messageKey?: string(name='MessageKey'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ChangeSlotStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    adSlotCorporateStatus?: string(name='AdSlotCorporateStatus'),
    adSlotId?: string(name='AdSlotId'),
    adSlotName?: string(name='AdSlotName'),
    adSlotStatus?: string(name='AdSlotStatus'),
    adSlotTemplateId?: string(name='AdSlotTemplateId'),
    adSlotType?: string(name='AdSlotType'),
    blockingRule?: string(name='BlockingRule'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    inspireScene?: string(name='InspireScene'),
    mediaId?: string(name='MediaId'),
    mediaName?: string(name='MediaName'),
    modifyTime?: long(name='ModifyTime'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeSlotStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeSlotStatusResponseBody(name='body'),
}

async function changeSlotStatusWithOptions(request: ChangeSlotStatusRequest, runtime: Util.RuntimeOptions): ChangeSlotStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeSlotStatus', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeSlotStatus(request: ChangeSlotStatusRequest): ChangeSlotStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeSlotStatusWithOptions(request, runtime);
}

model ChangeTenantStatusRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  message?: string(name='Message'),
  messageKey?: string(name='MessageKey'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  status?: string(name='Status'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ChangeTenantStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    business?: string(name='Business'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    settleInfo?: string(name='SettleInfo'),
    status?: string(name='Status'),
    tenantDescription?: string(name='TenantDescription'),
    tenantId?: string(name='TenantId'),
    tenantName?: string(name='TenantName'),
    userName?: string(name='UserName'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeTenantStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeTenantStatusResponseBody(name='body'),
}

async function changeTenantStatusWithOptions(request: ChangeTenantStatusRequest, runtime: Util.RuntimeOptions): ChangeTenantStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeTenantStatus', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeTenantStatus(request: ChangeTenantStatusRequest): ChangeTenantStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeTenantStatusWithOptions(request, runtime);
}

model ChangeTenantUserStatusRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  message?: string(name='Message'),
  messageKey?: string(name='MessageKey'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  status?: string(name='Status'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ChangeTenantUserStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    business?: string(name='Business'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    originSite?: string(name='OriginSite'),
    originSiteUserId?: string(name='OriginSiteUserId'),
    originSiteUserName?: string(name='OriginSiteUserName'),
    status?: string(name='Status'),
    tenantId?: string(name='TenantId'),
    tenantName?: string(name='TenantName'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeTenantUserStatusResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeTenantUserStatusResponseBody(name='body'),
}

async function changeTenantUserStatusWithOptions(request: ChangeTenantUserStatusRequest, runtime: Util.RuntimeOptions): ChangeTenantUserStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeTenantUserStatus', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeTenantUserStatus(request: ChangeTenantUserStatusRequest): ChangeTenantUserStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeTenantUserStatusWithOptions(request, runtime);
}

model ChargeLaunchRequest {
  alipayOpenId?: string(name='AlipayOpenId'),
  channelId?: string(name='ChannelId'),
  extra?: string(name='Extra'),
  outerCode?: string(name='OuterCode'),
}

model ChargeLaunchResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model ChargeLaunchResponse = {
  headers: map[string]string(name='headers'),
  body: ChargeLaunchResponseBody(name='body'),
}

async function chargeLaunchWithOptions(request: ChargeLaunchRequest, runtime: Util.RuntimeOptions): ChargeLaunchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChargeLaunch', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function chargeLaunch(request: ChargeLaunchRequest): ChargeLaunchResponse {
  var runtime = new Util.RuntimeOptions{};
  return chargeLaunchWithOptions(request, runtime);
}

model CheckDeviceRequest {
  channelId?: string(name='ChannelId'),
  deviceSn?: string(name='DeviceSn'),
}

model CheckDeviceResponseBody = {
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  plans?: {
    planDto?: [ 
    {
      endTime?: string(name='EndTime'),
      id?: long(name='Id'),
      name?: string(name='Name'),
      startTime?: string(name='StartTime'),
    }
  ](name='PlanDto')
  }(name='Plans'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model CheckDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: CheckDeviceResponseBody(name='body'),
}

async function checkDeviceWithOptions(request: CheckDeviceRequest, runtime: Util.RuntimeOptions): CheckDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckDevice', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkDevice(request: CheckDeviceRequest): CheckDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkDeviceWithOptions(request, runtime);
}

model CheckReceivingDetailRequest {
  channelId?: string(name='ChannelId'),
  deviceCode?: string(name='DeviceCode'),
  v?: string(name='V'),
}

model CheckReceivingDetailResponseBody = {
  errorCode?: string(name='ErrorCode'),
  hasPromotion?: boolean(name='HasPromotion'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
  tradeOrderId?: string(name='TradeOrderId'),
  unionAmount?: string(name='UnionAmount'),
}

model CheckReceivingDetailResponse = {
  headers: map[string]string(name='headers'),
  body: CheckReceivingDetailResponseBody(name='body'),
}

async function checkReceivingDetailWithOptions(request: CheckReceivingDetailRequest, runtime: Util.RuntimeOptions): CheckReceivingDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckReceivingDetail', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkReceivingDetail(request: CheckReceivingDetailRequest): CheckReceivingDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkReceivingDetailWithOptions(request, runtime);
}

model CheckTenantBizRequest {
  adSlotId?: string(name='AdSlotId'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  mediaId?: string(name='MediaId'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CheckTenantBizResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    canAccessAdSlot?: boolean(name='CanAccessAdSlot'),
    canAccessMedia?: boolean(name='CanAccessMedia'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CheckTenantBizResponse = {
  headers: map[string]string(name='headers'),
  body: CheckTenantBizResponseBody(name='body'),
}

async function checkTenantBizWithOptions(request: CheckTenantBizRequest, runtime: Util.RuntimeOptions): CheckTenantBizResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckTenantBiz', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkTenantBiz(request: CheckTenantBizRequest): CheckTenantBizResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkTenantBizWithOptions(request, runtime);
}

model CountUserRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  sspUser?: map[string]any(name='SspUser'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CountUserShrinkRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  sspUserShrink?: string(name='SspUser'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CountUserResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: int32(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CountUserResponse = {
  headers: map[string]string(name='headers'),
  body: CountUserResponseBody(name='body'),
}

async function countUserWithOptions(tmpReq: CountUserRequest, runtime: Util.RuntimeOptions): CountUserResponse {
  Util.validateModel(tmpReq);
  var request = new CountUserShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sspUser)) {
    request.sspUserShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sspUser, 'SspUser', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CountUser', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function countUser(request: CountUserRequest): CountUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return countUserWithOptions(request, runtime);
}

model CreateCalculationRequest {
  clientToken?: string(name='ClientToken'),
  cloudCodeUserId?: string(name='CloudCodeUserId'),
  queryString?: string(name='QueryString'),
}

model CreateCalculationResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model CreateCalculationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCalculationResponseBody(name='body'),
}

async function createCalculationWithOptions(request: CreateCalculationRequest, runtime: Util.RuntimeOptions): CreateCalculationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCalculation', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCalculation(request: CreateCalculationRequest): CreateCalculationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCalculationWithOptions(request, runtime);
}

model CreateFlowRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  flow?: map[string]any(name='Flow'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreateFlowShrinkRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  flowShrink?: string(name='Flow'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreateFlowResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    applyUserId?: string(name='ApplyUserId'),
    approveTime?: long(name='ApproveTime'),
    approveUserId?: string(name='ApproveUserId'),
    businessKey?: string(name='BusinessKey'),
    childStatus?: string(name='ChildStatus'),
    extInfo?: string(name='ExtInfo'),
    flowId?: string(name='FlowId'),
    gmtCreateTime?: long(name='GmtCreateTime'),
    gmtModifiedTime?: long(name='GmtModifiedTime'),
    newData?: string(name='NewData'),
    oldData?: string(name='OldData'),
    reasonType?: string(name='ReasonType'),
    status?: string(name='Status'),
    tenantId?: string(name='TenantId'),
    type?: string(name='Type'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateFlowResponse = {
  headers: map[string]string(name='headers'),
  body: CreateFlowResponseBody(name='body'),
}

async function createFlowWithOptions(tmpReq: CreateFlowRequest, runtime: Util.RuntimeOptions): CreateFlowResponse {
  Util.validateModel(tmpReq);
  var request = new CreateFlowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.flow)) {
    request.flowShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.flow, 'Flow', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateFlow', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createFlow(request: CreateFlowRequest): CreateFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return createFlowWithOptions(request, runtime);
}

model CreateMediaRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  media?: map[string]any(name='Media'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreateMediaShrinkRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  mediaShrink?: string(name='Media'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreateMediaResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    accessStatus?: string(name='AccessStatus'),
    accessWay?: string(name='AccessWay'),
    config?: string(name='Config'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    firstScene?: string(name='FirstScene'),
    keyWords?: string(name='KeyWords'),
    mediaId?: string(name='MediaId'),
    mediaName?: string(name='MediaName'),
    mediaStatus?: string(name='MediaStatus'),
    mediaType?: string(name='MediaType'),
    modifyTime?: long(name='ModifyTime'),
    os?: string(name='Os'),
    secondScene?: string(name='SecondScene'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateMediaResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMediaResponseBody(name='body'),
}

async function createMediaWithOptions(tmpReq: CreateMediaRequest, runtime: Util.RuntimeOptions): CreateMediaResponse {
  Util.validateModel(tmpReq);
  var request = new CreateMediaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.media)) {
    request.mediaShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.media, 'Media', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateMedia', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createMedia(request: CreateMediaRequest): CreateMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMediaWithOptions(request, runtime);
}

model CreateProxyBrandUserRequest {
  brandUserNick?: string(name='BrandUserNick'),
  channelId?: string(name='ChannelId'),
  clientToken?: string(name='ClientToken'),
  company?: string(name='Company'),
  contactName?: string(name='ContactName'),
  contactPhone?: string(name='ContactPhone'),
  industry?: string(name='Industry'),
  proxyUserId?: long(name='ProxyUserId'),
}

model CreateProxyBrandUserResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateProxyBrandUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateProxyBrandUserResponseBody(name='body'),
}

async function createProxyBrandUserWithOptions(request: CreateProxyBrandUserRequest, runtime: Util.RuntimeOptions): CreateProxyBrandUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateProxyBrandUser', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createProxyBrandUser(request: CreateProxyBrandUserRequest): CreateProxyBrandUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createProxyBrandUserWithOptions(request, runtime);
}

model CreateRuleRequest {
  adRule?: map[string]any(name='AdRule'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreateRuleShrinkRequest {
  adRuleShrink?: string(name='AdRule'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreateRuleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    accessStatus?: string(name='AccessStatus'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    relatedAdSlots?: string(name='RelatedAdSlots'),
    ruleConfig?: string(name='RuleConfig'),
    ruleId?: string(name='RuleId'),
    ruleName?: string(name='RuleName'),
    ruleRId?: string(name='RuleRId'),
    ruleType?: string(name='RuleType'),
    status?: string(name='Status'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateRuleResponse = {
  headers: map[string]string(name='headers'),
  body: CreateRuleResponseBody(name='body'),
}

async function createRuleWithOptions(tmpReq: CreateRuleRequest, runtime: Util.RuntimeOptions): CreateRuleResponse {
  Util.validateModel(tmpReq);
  var request = new CreateRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.adRule)) {
    request.adRuleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.adRule, 'AdRule', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateRule', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createRule(request: CreateRuleRequest): CreateRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return createRuleWithOptions(request, runtime);
}

model CreateSlotRequest {
  adSlot?: map[string]any(name='AdSlot'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreateSlotShrinkRequest {
  adSlotShrink?: string(name='AdSlot'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreateSlotResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    adSlotCorporateStatus?: string(name='AdSlotCorporateStatus'),
    adSlotId?: string(name='AdSlotId'),
    adSlotName?: string(name='AdSlotName'),
    adSlotStatus?: string(name='AdSlotStatus'),
    adSlotTemplateId?: string(name='AdSlotTemplateId'),
    adSlotType?: string(name='AdSlotType'),
    blockingRule?: string(name='BlockingRule'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    inspireScene?: string(name='InspireScene'),
    mediaId?: string(name='MediaId'),
    mediaName?: string(name='MediaName'),
    modifyTime?: long(name='ModifyTime'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateSlotResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSlotResponseBody(name='body'),
}

async function createSlotWithOptions(tmpReq: CreateSlotRequest, runtime: Util.RuntimeOptions): CreateSlotResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSlotShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.adSlot)) {
    request.adSlotShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.adSlot, 'AdSlot', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSlot', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSlot(request: CreateSlotRequest): CreateSlotResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSlotWithOptions(request, runtime);
}

model CreateTenantRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenant?: map[string]any(name='Tenant'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreateTenantShrinkRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantShrink?: string(name='Tenant'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreateTenantResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    business?: string(name='Business'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    settleInfo?: string(name='SettleInfo'),
    status?: string(name='Status'),
    tenantDescription?: string(name='TenantDescription'),
    tenantId?: string(name='TenantId'),
    tenantName?: string(name='TenantName'),
    userName?: string(name='UserName'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTenantResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTenantResponseBody(name='body'),
}

async function createTenantWithOptions(tmpReq: CreateTenantRequest, runtime: Util.RuntimeOptions): CreateTenantResponse {
  Util.validateModel(tmpReq);
  var request = new CreateTenantShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tenant)) {
    request.tenantShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenant, 'Tenant', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTenant', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTenant(request: CreateTenantRequest): CreateTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTenantWithOptions(request, runtime);
}

model CreateTenantUserRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  tenantUser?: map[string]any(name='TenantUser'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreateTenantUserShrinkRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  tenantUserShrink?: string(name='TenantUser'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreateTenantUserResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    business?: string(name='Business'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    originSite?: string(name='OriginSite'),
    originSiteUserId?: string(name='OriginSiteUserId'),
    originSiteUserName?: string(name='OriginSiteUserName'),
    settleInfo?: string(name='SettleInfo'),
    status?: string(name='Status'),
    tenantId?: string(name='TenantId'),
    tenantName?: string(name='TenantName'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
    version?: string(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateTenantUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateTenantUserResponseBody(name='body'),
}

async function createTenantUserWithOptions(tmpReq: CreateTenantUserRequest, runtime: Util.RuntimeOptions): CreateTenantUserResponse {
  Util.validateModel(tmpReq);
  var request = new CreateTenantUserShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tenantUser)) {
    request.tenantUserShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenantUser, 'TenantUser', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateTenantUser', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createTenantUser(request: CreateTenantUserRequest): CreateTenantUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createTenantUserWithOptions(request, runtime);
}

model CreateUnionTaskRequest {
  brandUserId?: long(name='BrandUserId'),
  brandUserNick?: string(name='BrandUserNick'),
  channel?: string(name='Channel'),
  channelId?: string(name='ChannelId'),
  clientToken?: string(name='ClientToken'),
  contentId?: long(name='ContentId'),
  contentUrl?: string(name='ContentUrl'),
  customCreativeType?: string(name='CustomCreativeType'),
  endTime?: string(name='EndTime'),
  industryLabelBagId?: int32(name='IndustryLabelBagId'),
  name?: string(name='Name'),
  proxyUserId?: long(name='ProxyUserId'),
  quota?: long(name='Quota'),
  quotaDay?: long(name='QuotaDay'),
  startTime?: string(name='StartTime'),
  taskBizType?: string(name='TaskBizType'),
  taskRuleType?: string(name='TaskRuleType'),
  taskType?: string(name='TaskType'),
}

model CreateUnionTaskResponseBody = {
  code?: int32(name='Code'),
  data?: long(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateUnionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUnionTaskResponseBody(name='body'),
}

async function createUnionTaskWithOptions(request: CreateUnionTaskRequest, runtime: Util.RuntimeOptions): CreateUnionTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUnionTask', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUnionTask(request: CreateUnionTaskRequest): CreateUnionTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUnionTaskWithOptions(request, runtime);
}

model CreateUserRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  sspUser?: map[string]any(name='SspUser'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreateUserShrinkRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  sspUserShrink?: string(name='SspUser'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreateUserResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    email?: string(name='Email'),
    gmtCreateTime?: long(name='GmtCreateTime'),
    gmtModifiedTime?: long(name='GmtModifiedTime'),
    isDeleteTag?: string(name='IsDeleteTag'),
    mobilePhone?: string(name='MobilePhone'),
    roleCode?: string(name='RoleCode'),
    sspUserId?: string(name='SspUserId'),
    status?: string(name='Status'),
    tenantId?: string(name='TenantId'),
    tenantUserId?: string(name='TenantUserId'),
    userName?: string(name='UserName'),
    yunPersonsId?: string(name='YunPersonsId'),
    yunUid?: string(name='YunUid'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateUserResponse = {
  headers: map[string]string(name='headers'),
  body: CreateUserResponseBody(name='body'),
}

async function createUserWithOptions(tmpReq: CreateUserRequest, runtime: Util.RuntimeOptions): CreateUserResponse {
  Util.validateModel(tmpReq);
  var request = new CreateUserShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sspUser)) {
    request.sspUserShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sspUser, 'SspUser', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateUser', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createUser(request: CreateUserRequest): CreateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return createUserWithOptions(request, runtime);
}

model CreatesSlotTemplateRequest {
  adSlotTemplate?: map[string]any(name='AdSlotTemplate'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreatesSlotTemplateShrinkRequest {
  adSlotTemplateShrink?: string(name='AdSlotTemplate'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model CreatesSlotTemplateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    adSlotTemplateDescription?: string(name='AdSlotTemplateDescription'),
    adSlotTemplateId?: string(name='AdSlotTemplateId'),
    adSlotTemplateName?: string(name='AdSlotTemplateName'),
    adSlotTemplatePic?: string(name='AdSlotTemplatePic'),
    adSlotTemplatePreview?: string(name='AdSlotTemplatePreview'),
    adSlotTemplateTitle?: string(name='AdSlotTemplateTitle'),
    adSlotType?: string(name='AdSlotType'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    templateConfig?: string(name='TemplateConfig'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreatesSlotTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: CreatesSlotTemplateResponseBody(name='body'),
}

async function createsSlotTemplateWithOptions(tmpReq: CreatesSlotTemplateRequest, runtime: Util.RuntimeOptions): CreatesSlotTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new CreatesSlotTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.adSlotTemplate)) {
    request.adSlotTemplateShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.adSlotTemplate, 'AdSlotTemplate', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreatesSlotTemplate', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createsSlotTemplate(request: CreatesSlotTemplateRequest): CreatesSlotTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return createsSlotTemplateWithOptions(request, runtime);
}

model DeleteRuleRequest {
  adRule?: map[string]any(name='AdRule'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  message?: string(name='Message'),
  messageKey?: string(name='MessageKey'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  ruleId?: string(name='RuleId'),
  status?: string(name='Status'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model DeleteRuleShrinkRequest {
  adRuleShrink?: string(name='AdRule'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  message?: string(name='Message'),
  messageKey?: string(name='MessageKey'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  ruleId?: string(name='RuleId'),
  status?: string(name='Status'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model DeleteRuleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    relatedAdSlots?: string(name='RelatedAdSlots'),
    ruleConfig?: string(name='RuleConfig'),
    ruleId?: string(name='RuleId'),
    ruleName?: string(name='RuleName'),
    ruleRId?: string(name='RuleRId'),
    ruleType?: string(name='RuleType'),
    status?: string(name='Status'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteRuleResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteRuleResponseBody(name='body'),
}

async function deleteRuleWithOptions(tmpReq: DeleteRuleRequest, runtime: Util.RuntimeOptions): DeleteRuleResponse {
  Util.validateModel(tmpReq);
  var request = new DeleteRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.adRule)) {
    request.adRuleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.adRule, 'AdRule', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteRule', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteRule(request: DeleteRuleRequest): DeleteRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteRuleWithOptions(request, runtime);
}

model EndUnionTaskRequest {
  channelId?: string(name='ChannelId'),
  proxyUserId?: long(name='ProxyUserId'),
  taskId?: long(name='TaskId'),
}

model EndUnionTaskResponseBody = {
  code?: int32(name='Code'),
  data?: boolean(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EndUnionTaskResponse = {
  headers: map[string]string(name='headers'),
  body: EndUnionTaskResponseBody(name='body'),
}

async function endUnionTaskWithOptions(request: EndUnionTaskRequest, runtime: Util.RuntimeOptions): EndUnionTaskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EndUnionTask', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function endUnionTask(request: EndUnionTaskRequest): EndUnionTaskResponse {
  var runtime = new Util.RuntimeOptions{};
  return endUnionTaskWithOptions(request, runtime);
}

model GetMainPartListRequest {
  accountType?: string(name='AccountType', description='业务类型，见接口文档枚举'),
  mainName?: string(name='MainName', description='主体名称，mainName'),
  mainType?: int32(name='MainType', description='主体类型：0代理商1直投2被代理品牌	1'),
  pageIndex?: int32(name='PageIndex', description='分页参数：页码 从1开始'),
  pageSize?: int32(name='PageSize', description='分页参数，每页大小'),
  parentMainId?: long(name='ParentMainId', description='代理商主体ID'),
}

model GetMainPartListResponseBody = {
  code?: long(name='Code'),
  data?: {
    count?: long(name='Count'),
    list?: [ 
      {
        accountNo?: string(name='AccountNo'),
        accountType?: string(name='AccountType'),
        brandUserId?: long(name='BrandUserId'),
        brandUserNick?: string(name='BrandUserNick'),
        mainId?: long(name='MainId'),
        mainName?: string(name='MainName'),
        proxyUserId?: long(name='ProxyUserId'),
      }
    ](name='List'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetMainPartListResponse = {
  headers: map[string]string(name='headers'),
  body: GetMainPartListResponseBody(name='body'),
}

async function getMainPartListWithOptions(request: GetMainPartListRequest, runtime: Util.RuntimeOptions): GetMainPartListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetMainPartList', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getMainPartList(request: GetMainPartListRequest): GetMainPartListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getMainPartListWithOptions(request, runtime);
}

model GetUnionTaskStatusRequest {
  alipayOpenId?: long(name='AlipayOpenId'),
  sign?: string(name='Sign'),
  taskId?: long(name='TaskId'),
  userId?: long(name='UserId'),
  userNick?: string(name='UserNick'),
}

model GetUnionTaskStatusResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  result?: boolean(name='Result'),
  success?: boolean(name='Success'),
}

model GetUnionTaskStatusResponse = {
  headers: map[string]string(name='headers'),
  body: GetUnionTaskStatusResponseBody(name='body'),
}

async function getUnionTaskStatusWithOptions(request: GetUnionTaskStatusRequest, runtime: Util.RuntimeOptions): GetUnionTaskStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetUnionTaskStatus', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getUnionTaskStatus(request: GetUnionTaskStatusRequest): GetUnionTaskStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return getUnionTaskStatusWithOptions(request, runtime);
}

model KeepAliveRequest {
  cellId?: string(name='CellId'),
  channelId?: string(name='ChannelId'),
  deviceSn?: string(name='DeviceSn'),
  networkType?: int32(name='NetworkType'),
  tac?: string(name='Tac'),
}

model KeepAliveResponseBody = {
  data?: string(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model KeepAliveResponse = {
  headers: map[string]string(name='headers'),
  body: KeepAliveResponseBody(name='body'),
}

async function keepAliveWithOptions(request: KeepAliveRequest, runtime: Util.RuntimeOptions): KeepAliveResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('KeepAlive', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function keepAlive(request: KeepAliveRequest): KeepAliveResponse {
  var runtime = new Util.RuntimeOptions{};
  return keepAliveWithOptions(request, runtime);
}

model ListFlowRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  listFlow?: map[string]any(name='ListFlow'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ListFlowShrinkRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  listFlowShrink?: string(name='ListFlow'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ListFlowResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: [ 
    {
      applyUserId?: string(name='ApplyUserId'),
      approveTime?: long(name='ApproveTime'),
      approveUserId?: string(name='ApproveUserId'),
      businessKey?: string(name='BusinessKey'),
      childStatus?: string(name='ChildStatus'),
      extInfo?: string(name='ExtInfo'),
      flowId?: string(name='FlowId'),
      gmtCreateTime?: long(name='GmtCreateTime'),
      gmtModifiedTime?: long(name='GmtModifiedTime'),
      newData?: string(name='NewData'),
      oldData?: string(name='OldData'),
      reasonType?: string(name='ReasonType'),
      status?: string(name='Status'),
      tenantId?: string(name='TenantId'),
      type?: string(name='Type'),
    }
  ](name='Model'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: long(name='Total'),
}

model ListFlowResponse = {
  headers: map[string]string(name='headers'),
  body: ListFlowResponseBody(name='body'),
}

async function listFlowWithOptions(tmpReq: ListFlowRequest, runtime: Util.RuntimeOptions): ListFlowResponse {
  Util.validateModel(tmpReq);
  var request = new ListFlowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.listFlow)) {
    request.listFlowShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.listFlow, 'ListFlow', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListFlow', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listFlow(request: ListFlowRequest): ListFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return listFlowWithOptions(request, runtime);
}

model ListMediaRequest {
  accessStatus?: string(name='AccessStatus'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  endCreateTime?: long(name='EndCreateTime'),
  environment?: string(name='Environment'),
  firstScene?: string(name='FirstScene'),
  mediaName?: map[string]any(name='MediaName'),
  mediaStatus?: string(name='MediaStatus'),
  mediaType?: string(name='MediaType'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  os?: string(name='Os'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  secondScene?: string(name='SecondScene'),
  startCreateTime?: long(name='StartCreateTime'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ListMediaShrinkRequest {
  accessStatus?: string(name='AccessStatus'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  endCreateTime?: long(name='EndCreateTime'),
  environment?: string(name='Environment'),
  firstScene?: string(name='FirstScene'),
  mediaNameShrink?: string(name='MediaName'),
  mediaStatus?: string(name='MediaStatus'),
  mediaType?: string(name='MediaType'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  os?: string(name='Os'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  secondScene?: string(name='SecondScene'),
  startCreateTime?: long(name='StartCreateTime'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ListMediaResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: [ 
    {
      accessStatus?: string(name='AccessStatus'),
      accessWay?: string(name='AccessWay'),
      config?: string(name='Config'),
      createTime?: long(name='CreateTime'),
      extInfo?: string(name='ExtInfo'),
      firstScene?: string(name='FirstScene'),
      keyWords?: string(name='KeyWords'),
      mediaId?: string(name='MediaId'),
      mediaName?: string(name='MediaName'),
      mediaStatus?: string(name='MediaStatus'),
      mediaType?: string(name='MediaType'),
      modifyTime?: long(name='ModifyTime'),
      os?: string(name='Os'),
      secondScene?: string(name='SecondScene'),
      tenantId?: string(name='TenantId'),
      version?: long(name='Version'),
    }
  ](name='Model'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: long(name='Total'),
}

model ListMediaResponse = {
  headers: map[string]string(name='headers'),
  body: ListMediaResponseBody(name='body'),
}

async function listMediaWithOptions(tmpReq: ListMediaRequest, runtime: Util.RuntimeOptions): ListMediaResponse {
  Util.validateModel(tmpReq);
  var request = new ListMediaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.mediaName)) {
    request.mediaNameShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mediaName, 'MediaName', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMedia', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMedia(request: ListMediaRequest): ListMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMediaWithOptions(request, runtime);
}

model ListMediaNameRequest {
  accessStatus?: string(name='AccessStatus'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  endCreateTime?: long(name='EndCreateTime'),
  environment?: string(name='Environment'),
  firstScene?: string(name='FirstScene'),
  mediaName?: map[string]any(name='MediaName'),
  mediaStatus?: string(name='MediaStatus'),
  mediaType?: string(name='MediaType'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  os?: string(name='Os'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  secondScene?: string(name='SecondScene'),
  startCreateTime?: long(name='StartCreateTime'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ListMediaNameShrinkRequest {
  accessStatus?: string(name='AccessStatus'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  endCreateTime?: long(name='EndCreateTime'),
  environment?: string(name='Environment'),
  firstScene?: string(name='FirstScene'),
  mediaNameShrink?: string(name='MediaName'),
  mediaStatus?: string(name='MediaStatus'),
  mediaType?: string(name='MediaType'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  os?: string(name='Os'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  secondScene?: string(name='SecondScene'),
  startCreateTime?: long(name='StartCreateTime'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ListMediaNameResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: [ 
    {
      mediaId?: string(name='MediaId'),
      mediaName?: string(name='MediaName'),
    }
  ](name='Model'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: long(name='Total'),
}

model ListMediaNameResponse = {
  headers: map[string]string(name='headers'),
  body: ListMediaNameResponseBody(name='body'),
}

async function listMediaNameWithOptions(tmpReq: ListMediaNameRequest, runtime: Util.RuntimeOptions): ListMediaNameResponse {
  Util.validateModel(tmpReq);
  var request = new ListMediaNameShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.mediaName)) {
    request.mediaNameShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mediaName, 'MediaName', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListMediaName', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listMediaName(request: ListMediaNameRequest): ListMediaNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return listMediaNameWithOptions(request, runtime);
}

model ListRuleRequest {
  adSlotId?: string(name='AdSlotId'),
  adSlotName?: string(name='AdSlotName'),
  adSlotType?: string(name='AdSlotType'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  endCreateTime?: long(name='EndCreateTime'),
  environment?: string(name='Environment'),
  mediaId?: string(name='MediaId'),
  mediaName?: string(name='MediaName'),
  mediaStatus?: string(name='MediaStatus'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ruleId?: string(name='RuleId'),
  ruleName?: string(name='RuleName'),
  ruleType?: string(name='RuleType'),
  startCreateTime?: long(name='StartCreateTime'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ListRuleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: [ 
    {
      createTime?: long(name='CreateTime'),
      extInfo?: string(name='ExtInfo'),
      modifyTime?: long(name='ModifyTime'),
      relatedAdSlots?: string(name='RelatedAdSlots'),
      ruleConfig?: string(name='RuleConfig'),
      ruleId?: string(name='RuleId'),
      ruleName?: string(name='RuleName'),
      ruleRId?: string(name='RuleRId'),
      ruleType?: string(name='RuleType'),
      status?: string(name='Status'),
      tenantId?: string(name='TenantId'),
      version?: long(name='Version'),
    }
  ](name='Model'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: long(name='Total'),
}

model ListRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ListRuleResponseBody(name='body'),
}

async function listRuleWithOptions(request: ListRuleRequest, runtime: Util.RuntimeOptions): ListRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRule', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRule(request: ListRuleRequest): ListRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRuleWithOptions(request, runtime);
}

model ListRuleAreaRequest {
  adSlotId?: string(name='AdSlotId'),
  adSlotType?: string(name='AdSlotType'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  endCreateTime?: long(name='EndCreateTime'),
  environment?: string(name='Environment'),
  mediaId?: string(name='MediaId'),
  mediaStatus?: string(name='MediaStatus'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  ruleId?: string(name='RuleId'),
  ruleName?: string(name='RuleName'),
  ruleType?: string(name='RuleType'),
  startCreateTime?: long(name='StartCreateTime'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ListRuleAreaResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: [ 
    {
      adSlotId?: string(name='AdSlotId'),
      adSlotName?: string(name='AdSlotName'),
      mediaId?: string(name='MediaId'),
      mediaName?: string(name='MediaName'),
      recordId?: string(name='RecordId'),
      ruleId?: string(name='RuleId'),
      ruleName?: string(name='RuleName'),
      ruleType?: string(name='RuleType'),
      status?: string(name='Status'),
      tenantId?: string(name='TenantId'),
    }
  ](name='Model'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: long(name='Total'),
}

model ListRuleAreaResponse = {
  headers: map[string]string(name='headers'),
  body: ListRuleAreaResponseBody(name='body'),
}

async function listRuleAreaWithOptions(request: ListRuleAreaRequest, runtime: Util.RuntimeOptions): ListRuleAreaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListRuleArea', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listRuleArea(request: ListRuleAreaRequest): ListRuleAreaResponse {
  var runtime = new Util.RuntimeOptions{};
  return listRuleAreaWithOptions(request, runtime);
}

model ListSlotRequest {
  adSlotCorporateStatus?: string(name='AdSlotCorporateStatus'),
  adSlotId?: string(name='AdSlotId'),
  adSlotName?: string(name='AdSlotName'),
  adSlotStatus?: string(name='AdSlotStatus'),
  adSlotType?: string(name='AdSlotType'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  endCreateTime?: long(name='EndCreateTime'),
  environment?: string(name='Environment'),
  mediaId?: string(name='MediaId'),
  mediaName?: string(name='MediaName'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startCreateTime?: long(name='StartCreateTime'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ListSlotResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: [ 
    {
      adSlotCorporateStatus?: string(name='AdSlotCorporateStatus'),
      adSlotId?: string(name='AdSlotId'),
      adSlotName?: string(name='AdSlotName'),
      adSlotStatus?: string(name='AdSlotStatus'),
      adSlotTemplateId?: string(name='AdSlotTemplateId'),
      adSlotType?: string(name='AdSlotType'),
      blockingRule?: string(name='BlockingRule'),
      createTime?: long(name='CreateTime'),
      extInfo?: string(name='ExtInfo'),
      inspireScene?: string(name='InspireScene'),
      mediaId?: string(name='MediaId'),
      mediaName?: string(name='MediaName'),
      modifyTime?: long(name='ModifyTime'),
      tenantId?: string(name='TenantId'),
      version?: long(name='Version'),
    }
  ](name='Model'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: long(name='Total'),
}

model ListSlotResponse = {
  headers: map[string]string(name='headers'),
  body: ListSlotResponseBody(name='body'),
}

async function listSlotWithOptions(request: ListSlotRequest, runtime: Util.RuntimeOptions): ListSlotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListSlot', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listSlot(request: ListSlotRequest): ListSlotResponse {
  var runtime = new Util.RuntimeOptions{};
  return listSlotWithOptions(request, runtime);
}

model ListTenantRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  endCreateTime?: long(name='EndCreateTime'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startCreateTime?: long(name='StartCreateTime'),
  status?: string(name='Status'),
  tenantId?: string(name='TenantId'),
  tenantName?: string(name='TenantName'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ListTenantResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: [ 
    {
      bizId?: string(name='BizId'),
      business?: string(name='Business'),
      createTime?: long(name='CreateTime'),
      extInfo?: string(name='ExtInfo'),
      modifyTime?: long(name='ModifyTime'),
      settleInfo?: string(name='SettleInfo'),
      status?: string(name='Status'),
      tenantDescription?: string(name='TenantDescription'),
      tenantId?: string(name='TenantId'),
      tenantName?: string(name='TenantName'),
      version?: long(name='Version'),
    }
  ](name='Model'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: long(name='Total'),
}

model ListTenantResponse = {
  headers: map[string]string(name='headers'),
  body: ListTenantResponseBody(name='body'),
}

async function listTenantWithOptions(request: ListTenantRequest, runtime: Util.RuntimeOptions): ListTenantResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTenant', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTenant(request: ListTenantRequest): ListTenantResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTenantWithOptions(request, runtime);
}

model ListTenantNameRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  endCreateTime?: long(name='EndCreateTime'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  startCreateTime?: long(name='StartCreateTime'),
  status?: string(name='Status'),
  tenantId?: string(name='TenantId'),
  tenantName?: string(name='TenantName'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ListTenantNameResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: [ 
    {
      tenantDescription?: string(name='TenantDescription'),
      tenantId?: string(name='TenantId'),
      tenantName?: string(name='TenantName'),
    }
  ](name='Model'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: long(name='Total'),
}

model ListTenantNameResponse = {
  headers: map[string]string(name='headers'),
  body: ListTenantNameResponseBody(name='body'),
}

async function listTenantNameWithOptions(request: ListTenantNameRequest, runtime: Util.RuntimeOptions): ListTenantNameResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListTenantName', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listTenantName(request: ListTenantNameRequest): ListTenantNameResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTenantNameWithOptions(request, runtime);
}

model ListUserRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sspUser?: map[string]any(name='SspUser'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ListUserShrinkRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  sspUserShrink?: string(name='SspUser'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ListUserResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: [ 
    {
      email?: string(name='Email'),
      gmtCreateTime?: long(name='GmtCreateTime'),
      gmtModifiedTime?: long(name='GmtModifiedTime'),
      isDeleteTag?: string(name='IsDeleteTag'),
      mobilePhone?: string(name='MobilePhone'),
      roleCode?: string(name='RoleCode'),
      sspUserId?: string(name='SspUserId'),
      status?: string(name='Status'),
      tenantId?: string(name='TenantId'),
      tenantUserId?: string(name='TenantUserId'),
      userName?: string(name='UserName'),
      yunPersonsId?: string(name='YunPersonsId'),
      yunUid?: string(name='YunUid'),
    }
  ](name='Model'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: long(name='Total'),
}

model ListUserResponse = {
  headers: map[string]string(name='headers'),
  body: ListUserResponseBody(name='body'),
}

async function listUserWithOptions(tmpReq: ListUserRequest, runtime: Util.RuntimeOptions): ListUserResponse {
  Util.validateModel(tmpReq);
  var request = new ListUserShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sspUser)) {
    request.sspUserShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sspUser, 'SspUser', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListUser', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listUser(request: ListUserRequest): ListUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return listUserWithOptions(request, runtime);
}

model ModifyMediaRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  media?: map[string]any(name='Media'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ModifyMediaShrinkRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  mediaShrink?: string(name='Media'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ModifyMediaResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    accessStatus?: string(name='AccessStatus'),
    accessWay?: string(name='AccessWay'),
    config?: string(name='Config'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    firstScene?: string(name='FirstScene'),
    keyWords?: string(name='KeyWords'),
    mediaId?: string(name='MediaId'),
    mediaName?: string(name='MediaName'),
    mediaStatus?: string(name='MediaStatus'),
    mediaType?: string(name='MediaType'),
    modifyTime?: long(name='ModifyTime'),
    os?: string(name='Os'),
    secondScene?: string(name='SecondScene'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyMediaResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyMediaResponseBody(name='body'),
}

async function modifyMediaWithOptions(tmpReq: ModifyMediaRequest, runtime: Util.RuntimeOptions): ModifyMediaResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyMediaShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.media)) {
    request.mediaShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.media, 'Media', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyMedia', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyMedia(request: ModifyMediaRequest): ModifyMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyMediaWithOptions(request, runtime);
}

model ModifyRuleRequest {
  adRule?: map[string]any(name='AdRule'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ModifyRuleShrinkRequest {
  adRuleShrink?: string(name='AdRule'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ModifyRuleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    relatedAdSlots?: string(name='RelatedAdSlots'),
    ruleConfig?: string(name='RuleConfig'),
    ruleId?: string(name='RuleId'),
    ruleName?: string(name='RuleName'),
    ruleRId?: string(name='RuleRId'),
    ruleType?: string(name='RuleType'),
    status?: string(name='Status'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyRuleResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyRuleResponseBody(name='body'),
}

async function modifyRuleWithOptions(tmpReq: ModifyRuleRequest, runtime: Util.RuntimeOptions): ModifyRuleResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyRuleShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.adRule)) {
    request.adRuleShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.adRule, 'AdRule', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyRule', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyRule(request: ModifyRuleRequest): ModifyRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyRuleWithOptions(request, runtime);
}

model ModifySlotRequest {
  adSlot?: map[string]any(name='AdSlot'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ModifySlotShrinkRequest {
  adSlotShrink?: string(name='AdSlot'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ModifySlotResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    adSlotCorporateStatus?: string(name='AdSlotCorporateStatus'),
    adSlotId?: string(name='AdSlotId'),
    adSlotName?: string(name='AdSlotName'),
    adSlotStatus?: string(name='AdSlotStatus'),
    adSlotTemplateId?: string(name='AdSlotTemplateId'),
    adSlotType?: string(name='AdSlotType'),
    blockingRule?: string(name='BlockingRule'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    inspireScene?: string(name='InspireScene'),
    mediaId?: string(name='MediaId'),
    mediaName?: string(name='MediaName'),
    modifyTime?: long(name='ModifyTime'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifySlotResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySlotResponseBody(name='body'),
}

async function modifySlotWithOptions(tmpReq: ModifySlotRequest, runtime: Util.RuntimeOptions): ModifySlotResponse {
  Util.validateModel(tmpReq);
  var request = new ModifySlotShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.adSlot)) {
    request.adSlotShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.adSlot, 'AdSlot', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySlot', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySlot(request: ModifySlotRequest): ModifySlotResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySlotWithOptions(request, runtime);
}

model ModifySlotTemplateRequest {
  adSlotTemplate?: map[string]any(name='AdSlotTemplate'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ModifySlotTemplateShrinkRequest {
  adSlotTemplateShrink?: string(name='AdSlotTemplate'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ModifySlotTemplateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    adSlotTemplateDescription?: string(name='AdSlotTemplateDescription'),
    adSlotTemplateId?: string(name='AdSlotTemplateId'),
    adSlotTemplateName?: string(name='AdSlotTemplateName'),
    adSlotTemplatePic?: string(name='AdSlotTemplatePic'),
    adSlotTemplatePreview?: string(name='AdSlotTemplatePreview'),
    adSlotTemplateTitle?: string(name='AdSlotTemplateTitle'),
    adSlotType?: string(name='AdSlotType'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    templateConfig?: string(name='TemplateConfig'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifySlotTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: ModifySlotTemplateResponseBody(name='body'),
}

async function modifySlotTemplateWithOptions(tmpReq: ModifySlotTemplateRequest, runtime: Util.RuntimeOptions): ModifySlotTemplateResponse {
  Util.validateModel(tmpReq);
  var request = new ModifySlotTemplateShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.adSlotTemplate)) {
    request.adSlotTemplateShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.adSlotTemplate, 'AdSlotTemplate', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifySlotTemplate', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifySlotTemplate(request: ModifySlotTemplateRequest): ModifySlotTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifySlotTemplateWithOptions(request, runtime);
}

model ModifyTenantInfoRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenant?: map[string]any(name='Tenant'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ModifyTenantInfoShrinkRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantShrink?: string(name='Tenant'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model ModifyTenantInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    business?: string(name='Business'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    settleInfo?: string(name='SettleInfo'),
    status?: string(name='Status'),
    tenantDescription?: string(name='TenantDescription'),
    tenantId?: string(name='TenantId'),
    tenantName?: string(name='TenantName'),
    userName?: string(name='UserName'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyTenantInfoResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyTenantInfoResponseBody(name='body'),
}

async function modifyTenantInfoWithOptions(tmpReq: ModifyTenantInfoRequest, runtime: Util.RuntimeOptions): ModifyTenantInfoResponse {
  Util.validateModel(tmpReq);
  var request = new ModifyTenantInfoShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.tenant)) {
    request.tenantShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.tenant, 'Tenant', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyTenantInfo', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyTenantInfo(request: ModifyTenantInfoRequest): ModifyTenantInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyTenantInfoWithOptions(request, runtime);
}

model PushDeviceStatusRequest {
  channelId?: string(name='ChannelId'),
  deviceSn?: string(name='DeviceSn'),
  status?: int32(name='Status'),
}

model PushDeviceStatusResponseBody = {
  data?: string(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model PushDeviceStatusResponse = {
  headers: map[string]string(name='headers'),
  body: PushDeviceStatusResponseBody(name='body'),
}

async function pushDeviceStatusWithOptions(request: PushDeviceStatusRequest, runtime: Util.RuntimeOptions): PushDeviceStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PushDeviceStatus', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pushDeviceStatus(request: PushDeviceStatusRequest): PushDeviceStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushDeviceStatusWithOptions(request, runtime);
}

model PushExtraTradeDetailRequest {
  channelId?: string(name='ChannelId'),
  commodityId?: string(name='CommodityId'),
  commodityName?: string(name='CommodityName'),
  deviceSn?: string(name='DeviceSn'),
  orderId?: string(name='OrderId'),
  salePrice?: float(name='SalePrice'),
  tradePrice?: float(name='TradePrice'),
  tradeStatus?: int32(name='TradeStatus'),
  tradeTime?: long(name='TradeTime'),
}

model PushExtraTradeDetailResponseBody = {
  data?: string(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model PushExtraTradeDetailResponse = {
  headers: map[string]string(name='headers'),
  body: PushExtraTradeDetailResponseBody(name='body'),
}

async function pushExtraTradeDetailWithOptions(request: PushExtraTradeDetailRequest, runtime: Util.RuntimeOptions): PushExtraTradeDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PushExtraTradeDetail', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pushExtraTradeDetail(request: PushExtraTradeDetailRequest): PushExtraTradeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushExtraTradeDetailWithOptions(request, runtime);
}

model PushFaultEventRequest {
  channelId?: string(name='ChannelId'),
  deviceSn?: string(name='DeviceSn'),
  faultComment?: string(name='FaultComment'),
  faultType?: string(name='FaultType'),
  time?: long(name='Time'),
  type?: int32(name='Type'),
}

model PushFaultEventResponseBody = {
  data?: string(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model PushFaultEventResponse = {
  headers: map[string]string(name='headers'),
  body: PushFaultEventResponseBody(name='body'),
}

async function pushFaultEventWithOptions(request: PushFaultEventRequest, runtime: Util.RuntimeOptions): PushFaultEventResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PushFaultEvent', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pushFaultEvent(request: PushFaultEventRequest): PushFaultEventResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushFaultEventWithOptions(request, runtime);
}

model PushTradeDetailRequest {
  alipayOrderId?: string(name='AlipayOrderId'),
  channelId?: string(name='ChannelId'),
  commodityId?: string(name='CommodityId'),
  commodityName?: string(name='CommodityName'),
  deviceSn?: string(name='DeviceSn'),
  endTime?: long(name='EndTime'),
  outerTradeId?: string(name='OuterTradeId'),
  salePrice?: float(name='SalePrice'),
  startTime?: long(name='StartTime'),
  tradeOrderId?: string(name='TradeOrderId'),
  tradePrice?: float(name='TradePrice'),
  tradeStatus?: int32(name='TradeStatus'),
  tradeTime?: long(name='TradeTime'),
  verificationStatus?: int32(name='VerificationStatus'),
}

model PushTradeDetailResponseBody = {
  data?: string(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model PushTradeDetailResponse = {
  headers: map[string]string(name='headers'),
  body: PushTradeDetailResponseBody(name='body'),
}

async function pushTradeDetailWithOptions(request: PushTradeDetailRequest, runtime: Util.RuntimeOptions): PushTradeDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PushTradeDetail', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pushTradeDetail(request: PushTradeDetailRequest): PushTradeDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushTradeDetailWithOptions(request, runtime);
}

model QueryAppPromotionRequest {
  channelId?: string(name='ChannelId'),
  extra?: string(name='Extra'),
  userId?: string(name='UserId'),
  userType?: string(name='UserType'),
}

model QueryAppPromotionResponseBody = {
  errorCode?: int32(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  result?: string(name='Result'),
  success?: boolean(name='Success'),
}

model QueryAppPromotionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAppPromotionResponseBody(name='body'),
}

async function queryAppPromotionWithOptions(request: QueryAppPromotionRequest, runtime: Util.RuntimeOptions): QueryAppPromotionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryAppPromotion', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAppPromotion(request: QueryAppPromotionRequest): QueryAppPromotionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppPromotionWithOptions(request, runtime);
}

model QueryAppTasksRequest {
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  taskId?: long(name='TaskId'),
  taskType?: string(name='TaskType'),
}

model QueryAppTasksResponseBody = {
  code?: int32(name='Code'),
  data?: {
    count?: int32(name='Count'),
    list?: [ 
      {
        accountNo?: string(name='AccountNo'),
        allContentStatus?: int32(name='AllContentStatus'),
        balance?: long(name='Balance'),
        balanceDay?: long(name='BalanceDay'),
        brandUserId?: long(name='BrandUserId'),
        chargeCost?: long(name='ChargeCost'),
        contentIds?: string(name='ContentIds'),
        endTime?: string(name='EndTime'),
        id?: long(name='Id'),
        name?: string(name='Name'),
        openScene?: int32(name='OpenScene'),
        popularizePosition?: int32(name='PopularizePosition'),
        priceType?: string(name='PriceType'),
        priority?: int32(name='Priority'),
        proxyUserId?: long(name='ProxyUserId'),
        quota?: long(name='Quota'),
        quotaDay?: long(name='QuotaDay'),
        startTime?: string(name='StartTime'),
        status?: int32(name='Status'),
        timeSchema?: string(name='TimeSchema'),
      }
    ](name='List'),
  }(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAppTasksResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAppTasksResponseBody(name='body'),
}

async function queryAppTasksWithOptions(request: QueryAppTasksRequest, runtime: Util.RuntimeOptions): QueryAppTasksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryAppTasks', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAppTasks(request: QueryAppTasksRequest): QueryAppTasksResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAppTasksWithOptions(request, runtime);
}

model QueryAvailableBalanceRequest {
  channelId?: string(name='ChannelId'),
  proxyUserId?: long(name='ProxyUserId'),
}

model QueryAvailableBalanceResponseBody = {
  code?: int32(name='Code'),
  data?: long(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAvailableBalanceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAvailableBalanceResponseBody(name='body'),
}

async function queryAvailableBalanceWithOptions(request: QueryAvailableBalanceRequest, runtime: Util.RuntimeOptions): QueryAvailableBalanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryAvailableBalance', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAvailableBalance(request: QueryAvailableBalanceRequest): QueryAvailableBalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAvailableBalanceWithOptions(request, runtime);
}

model QueryChannelHistoryDataRequest {
  channelId?: string(name='ChannelId'),
  endTime?: string(name='EndTime'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  startTime?: string(name='StartTime'),
  taskType?: string(name='TaskType'),
}

model QueryChannelHistoryDataResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryChannelHistoryDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryChannelHistoryDataResponseBody(name='body'),
}

async function queryChannelHistoryDataWithOptions(request: QueryChannelHistoryDataRequest, runtime: Util.RuntimeOptions): QueryChannelHistoryDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryChannelHistoryData', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryChannelHistoryData(request: QueryChannelHistoryDataRequest): QueryChannelHistoryDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryChannelHistoryDataWithOptions(request, runtime);
}

model QueryContentInfoRequest {
  contentId?: long(name='ContentId'),
}

model QueryContentInfoResponseBody = {
  code?: int32(name='Code'),
  data?: {
    brandUserId?: long(name='BrandUserId'),
    chainValue?: string(name='ChainValue'),
    id?: long(name='Id'),
    name?: string(name='Name'),
    openScene?: int32(name='OpenScene'),
    proxyUserId?: long(name='ProxyUserId'),
    status?: int32(name='Status'),
    templateType?: string(name='TemplateType'),
  }(name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryContentInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryContentInfoResponseBody(name='body'),
}

async function queryContentInfoWithOptions(request: QueryContentInfoRequest, runtime: Util.RuntimeOptions): QueryContentInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryContentInfo', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryContentInfo(request: QueryContentInfoRequest): QueryContentInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryContentInfoWithOptions(request, runtime);
}

model QueryContentListRequest {
  brandUserId?: long(name='BrandUserId'),
  channelId?: string(name='ChannelId'),
  proxyUserId?: long(name='ProxyUserId'),
  taskBizType?: string(name='TaskBizType'),
  taskType?: string(name='TaskType'),
}

model QueryContentListResponseBody = {
  code?: int32(name='Code'),
  data?: [  map[string]any ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryContentListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryContentListResponseBody(name='body'),
}

async function queryContentListWithOptions(request: QueryContentListRequest, runtime: Util.RuntimeOptions): QueryContentListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryContentList', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryContentList(request: QueryContentListRequest): QueryContentListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryContentListWithOptions(request, runtime);
}

model QueryFlowRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  flowId?: string(name='FlowId'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QueryFlowResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    applyUserId?: string(name='ApplyUserId'),
    approveTime?: long(name='ApproveTime'),
    approveUserId?: string(name='ApproveUserId'),
    businessKey?: string(name='BusinessKey'),
    childStatus?: string(name='ChildStatus'),
    extInfo?: string(name='ExtInfo'),
    flowId?: string(name='FlowId'),
    gmtCreateTime?: long(name='GmtCreateTime'),
    gmtModifiedTime?: long(name='GmtModifiedTime'),
    newData?: string(name='NewData'),
    oldData?: string(name='OldData'),
    reasonType?: string(name='ReasonType'),
    status?: string(name='Status'),
    tenantId?: string(name='TenantId'),
    type?: string(name='Type'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFlowResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFlowResponseBody(name='body'),
}

async function queryFlowWithOptions(request: QueryFlowRequest, runtime: Util.RuntimeOptions): QueryFlowResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryFlow', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryFlow(request: QueryFlowRequest): QueryFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFlowWithOptions(request, runtime);
}

model QueryIncomeDataRequest {
  adSlotId?: string(name='AdSlotId'),
  adSlotName?: string(name='AdSlotName'),
  adSlotType?: string(name='AdSlotType'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  dimension?: string(name='Dimension'),
  endTime?: long(name='EndTime'),
  environment?: string(name='Environment'),
  mediaId?: string(name='MediaId'),
  mediaName?: map[string]any(name='MediaName'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  queryType?: string(name='QueryType'),
  startTime?: long(name='StartTime'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QueryIncomeDataShrinkRequest {
  adSlotId?: string(name='AdSlotId'),
  adSlotName?: string(name='AdSlotName'),
  adSlotType?: string(name='AdSlotType'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  dimension?: string(name='Dimension'),
  endTime?: long(name='EndTime'),
  environment?: string(name='Environment'),
  mediaId?: string(name='MediaId'),
  mediaNameShrink?: string(name='MediaName'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  queryType?: string(name='QueryType'),
  startTime?: long(name='StartTime'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QueryIncomeDataResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    accEstIncomeRate?: string(name='AccEstIncomeRate'),
    accessStatus?: long(name='AccessStatus'),
    accumulatedIncome?: long(name='AccumulatedIncome'),
    adSlotClickRate?: string(name='AdSlotClickRate'),
    adSlotHitRate?: string(name='AdSlotHitRate'),
    adSlotHitTimes?: long(name='AdSlotHitTimes'),
    adSlotId?: string(name='AdSlotId'),
    adSlotName?: string(name='AdSlotName'),
    adSlotRequests?: long(name='AdSlotRequests'),
    adSlotShowRate?: string(name='AdSlotShowRate'),
    adSlotType?: string(name='AdSlotType'),
    channelId?: string(name='ChannelId'),
    channelName?: string(name='ChannelName'),
    clickTimes?: long(name='ClickTimes'),
    ecpm?: long(name='Ecpm'),
    ecpmRate?: string(name='EcpmRate'),
    endTime?: long(name='EndTime'),
    estimatedIncome?: long(name='EstimatedIncome'),
    lastDayEstimatedIncome?: long(name='LastDayEstimatedIncome'),
    mediaId?: string(name='MediaId'),
    mediaName?: string(name='MediaName'),
    showTimes?: long(name='ShowTimes'),
    startTime?: long(name='StartTime'),
    thisDaysEstIncome?: long(name='ThisDaysEstIncome'),
    thisDaysEstIncomeRate?: string(name='ThisDaysEstIncomeRate'),
    thisMonEstIncomeRate?: string(name='ThisMonEstIncomeRate'),
    thisMonEstimatedIncome?: long(name='ThisMonEstimatedIncome'),
    thisYearEstIncomeRate?: string(name='ThisYearEstIncomeRate'),
    thisYearIncome?: long(name='ThisYearIncome'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryIncomeDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryIncomeDataResponseBody(name='body'),
}

async function queryIncomeDataWithOptions(tmpReq: QueryIncomeDataRequest, runtime: Util.RuntimeOptions): QueryIncomeDataResponse {
  Util.validateModel(tmpReq);
  var request = new QueryIncomeDataShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.mediaName)) {
    request.mediaNameShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mediaName, 'MediaName', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryIncomeData', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryIncomeData(request: QueryIncomeDataRequest): QueryIncomeDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryIncomeDataWithOptions(request, runtime);
}

model QueryIncomeTrendRequest {
  adSlotId?: string(name='AdSlotId'),
  adSlotName?: string(name='AdSlotName'),
  adSlotType?: string(name='AdSlotType'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  dimension?: string(name='Dimension'),
  endTime?: long(name='EndTime'),
  environment?: string(name='Environment'),
  mediaId?: string(name='MediaId'),
  mediaName?: map[string]any(name='MediaName'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryType?: string(name='QueryType'),
  slot?: long(name='Slot'),
  slotDimension?: string(name='SlotDimension'),
  startTime?: long(name='StartTime'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QueryIncomeTrendShrinkRequest {
  adSlotId?: string(name='AdSlotId'),
  adSlotName?: string(name='AdSlotName'),
  adSlotType?: string(name='AdSlotType'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  dimension?: string(name='Dimension'),
  endTime?: long(name='EndTime'),
  environment?: string(name='Environment'),
  mediaId?: string(name='MediaId'),
  mediaNameShrink?: string(name='MediaName'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  queryType?: string(name='QueryType'),
  slot?: long(name='Slot'),
  slotDimension?: string(name='SlotDimension'),
  startTime?: long(name='StartTime'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QueryIncomeTrendResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: [ 
    {
      accEstIncomeRate?: string(name='AccEstIncomeRate'),
      accessStatus?: long(name='AccessStatus'),
      adSlotClickRate?: string(name='AdSlotClickRate'),
      adSlotHitRate?: string(name='AdSlotHitRate'),
      adSlotHitTimes?: long(name='AdSlotHitTimes'),
      adSlotId?: string(name='AdSlotId'),
      adSlotName?: string(name='AdSlotName'),
      adSlotRequests?: long(name='AdSlotRequests'),
      adSlotShowRate?: string(name='AdSlotShowRate'),
      adSlotType?: string(name='AdSlotType'),
      bizDate?: long(name='BizDate'),
      channelId?: string(name='ChannelId'),
      channelName?: string(name='ChannelName'),
      clickTimes?: long(name='ClickTimes'),
      ecpm?: long(name='Ecpm'),
      ecpmRate?: string(name='EcpmRate'),
      endTime?: long(name='EndTime'),
      estimatedIncome?: long(name='EstimatedIncome'),
      mediaId?: string(name='MediaId'),
      mediaName?: string(name='MediaName'),
      showTimes?: long(name='ShowTimes'),
      startTime?: long(name='StartTime'),
      thisDaysEstIncome?: long(name='ThisDaysEstIncome'),
      thisDaysEstIncomeRate?: string(name='ThisDaysEstIncomeRate'),
      thisMonEstIncomeRate?: string(name='ThisMonEstIncomeRate'),
      thisYearEstIncomeRate?: string(name='ThisYearEstIncomeRate'),
    }
  ](name='Model'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: long(name='Total'),
}

model QueryIncomeTrendResponse = {
  headers: map[string]string(name='headers'),
  body: QueryIncomeTrendResponseBody(name='body'),
}

async function queryIncomeTrendWithOptions(tmpReq: QueryIncomeTrendRequest, runtime: Util.RuntimeOptions): QueryIncomeTrendResponse {
  Util.validateModel(tmpReq);
  var request = new QueryIncomeTrendShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.mediaName)) {
    request.mediaNameShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.mediaName, 'MediaName', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryIncomeTrend', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryIncomeTrend(request: QueryIncomeTrendRequest): QueryIncomeTrendResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryIncomeTrendWithOptions(request, runtime);
}

model QueryIndustryLabelBagRequest {
  channelId?: string(name='ChannelId'),
}

model QueryIndustryLabelBagResponseBody = {
  code?: int32(name='Code'),
  data?: [  map[string]any ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryIndustryLabelBagResponse = {
  headers: map[string]string(name='headers'),
  body: QueryIndustryLabelBagResponseBody(name='body'),
}

async function queryIndustryLabelBagWithOptions(request: QueryIndustryLabelBagRequest, runtime: Util.RuntimeOptions): QueryIndustryLabelBagResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryIndustryLabelBag', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryIndustryLabelBag(request: QueryIndustryLabelBagRequest): QueryIndustryLabelBagResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryIndustryLabelBagWithOptions(request, runtime);
}

model QueryMediaRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  mediaId?: string(name='MediaId'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QueryMediaResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    accessStatus?: string(name='AccessStatus'),
    accessWay?: string(name='AccessWay'),
    config?: string(name='Config'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    firstScene?: string(name='FirstScene'),
    keyWords?: string(name='KeyWords'),
    mediaId?: string(name='MediaId'),
    mediaName?: string(name='MediaName'),
    mediaStatus?: string(name='MediaStatus'),
    mediaType?: string(name='MediaType'),
    modifyTime?: long(name='ModifyTime'),
    os?: string(name='Os'),
    secondScene?: string(name='SecondScene'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryMediaResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMediaResponseBody(name='body'),
}

async function queryMediaWithOptions(request: QueryMediaRequest, runtime: Util.RuntimeOptions): QueryMediaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryMedia', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryMedia(request: QueryMediaRequest): QueryMediaResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMediaWithOptions(request, runtime);
}

model QueryPromotionRequest {
  alipayOpenId?: string(name='AlipayOpenId'),
  channelId?: string(name='ChannelId'),
  extra?: string(name='Extra'),
  proxyChannelId?: string(name='ProxyChannelId'),
  userId?: string(name='UserId'),
}

model QueryPromotionResponseBody = {
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  noPromotionUrl?: string(name='NoPromotionUrl'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
  unionAmount?: string(name='UnionAmount'),
  url?: string(name='Url'),
}

model QueryPromotionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPromotionResponseBody(name='body'),
}

async function queryPromotionWithOptions(request: QueryPromotionRequest, runtime: Util.RuntimeOptions): QueryPromotionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryPromotion', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryPromotion(request: QueryPromotionRequest): QueryPromotionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPromotionWithOptions(request, runtime);
}

model QueryRuleRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  ruleId?: string(name='RuleId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QueryRuleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    accessStatus?: string(name='AccessStatus'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    relatedAdSlots?: string(name='RelatedAdSlots'),
    ruleConfig?: string(name='RuleConfig'),
    ruleId?: string(name='RuleId'),
    ruleName?: string(name='RuleName'),
    ruleRId?: string(name='RuleRId'),
    ruleType?: string(name='RuleType'),
    status?: string(name='Status'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRuleResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRuleResponseBody(name='body'),
}

async function queryRuleWithOptions(request: QueryRuleRequest, runtime: Util.RuntimeOptions): QueryRuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryRule', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryRule(request: QueryRuleRequest): QueryRuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRuleWithOptions(request, runtime);
}

model QuerySlotRequest {
  adSlotId?: string(name='AdSlotId'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QuerySlotResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    adSlotCorporateStatus?: string(name='AdSlotCorporateStatus'),
    adSlotId?: string(name='AdSlotId'),
    adSlotName?: string(name='AdSlotName'),
    adSlotStatus?: string(name='AdSlotStatus'),
    adSlotTemplateId?: string(name='AdSlotTemplateId'),
    adSlotType?: string(name='AdSlotType'),
    blockingRule?: string(name='BlockingRule'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    inspireScene?: string(name='InspireScene'),
    mediaId?: string(name='MediaId'),
    mediaName?: string(name='MediaName'),
    modifyTime?: long(name='ModifyTime'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySlotResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySlotResponseBody(name='body'),
}

async function querySlotWithOptions(request: QuerySlotRequest, runtime: Util.RuntimeOptions): QuerySlotResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySlot', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySlot(request: QuerySlotRequest): QuerySlotResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySlotWithOptions(request, runtime);
}

model QuerySlotTemplateRequest {
  adSlotTemplateId?: string(name='AdSlotTemplateId'),
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QuerySlotTemplateResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    adSlotTemplateDescription?: string(name='AdSlotTemplateDescription'),
    adSlotTemplateId?: string(name='AdSlotTemplateId'),
    adSlotTemplateName?: string(name='AdSlotTemplateName'),
    adSlotTemplatePic?: string(name='AdSlotTemplatePic'),
    adSlotTemplatePreview?: string(name='AdSlotTemplatePreview'),
    adSlotTemplateTitle?: string(name='AdSlotTemplateTitle'),
    adSlotType?: string(name='AdSlotType'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    templateConfig?: string(name='TemplateConfig'),
    tenantId?: string(name='TenantId'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySlotTemplateResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySlotTemplateResponseBody(name='body'),
}

async function querySlotTemplateWithOptions(request: QuerySlotTemplateRequest, runtime: Util.RuntimeOptions): QuerySlotTemplateResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySlotTemplate', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySlotTemplate(request: QuerySlotTemplateRequest): QuerySlotTemplateResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySlotTemplateWithOptions(request, runtime);
}

model QueryTaskBizTypeRequest {
  channelId?: string(name='ChannelId'),
}

model QueryTaskBizTypeResponseBody = {
  code?: int32(name='Code'),
  data?: [  map[string]any ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTaskBizTypeResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTaskBizTypeResponseBody(name='body'),
}

async function queryTaskBizTypeWithOptions(request: QueryTaskBizTypeRequest, runtime: Util.RuntimeOptions): QueryTaskBizTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTaskBizType', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTaskBizType(request: QueryTaskBizTypeRequest): QueryTaskBizTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTaskBizTypeWithOptions(request, runtime);
}

model QueryTaskRuleLimitRequest {
  channelId?: string(name='ChannelId'),
}

model QueryTaskRuleLimitResponseBody = {
  code?: int32(name='Code'),
  data?: [  map[string]any ](name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTaskRuleLimitResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTaskRuleLimitResponseBody(name='body'),
}

async function queryTaskRuleLimitWithOptions(request: QueryTaskRuleLimitRequest, runtime: Util.RuntimeOptions): QueryTaskRuleLimitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTaskRuleLimit', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTaskRuleLimit(request: QueryTaskRuleLimitRequest): QueryTaskRuleLimitResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTaskRuleLimitWithOptions(request, runtime);
}

model QueryTaskRulesRequest {
  taskId?: long(name='TaskId'),
  taskRuleType?: string(name='TaskRuleType'),
}

model QueryTaskRulesResponseBody = {
  code?: int32(name='Code'),
  data?: [ 
    {
      content?: string(name='Content'),
      id?: int32(name='Id'),
      taskId?: long(name='TaskId'),
      type?: int32(name='Type'),
    }
  ](name='Data'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTaskRulesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTaskRulesResponseBody(name='body'),
}

async function queryTaskRulesWithOptions(request: QueryTaskRulesRequest, runtime: Util.RuntimeOptions): QueryTaskRulesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTaskRules', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTaskRules(request: QueryTaskRulesRequest): QueryTaskRulesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTaskRulesWithOptions(request, runtime);
}

model QueryTenantBizConfigRequest {
  appName?: string(name='AppName'),
  bizId?: string(name='BizId'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QueryTenantBizConfigResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: [ 
    {
      bizId?: string(name='BizId'),
      configDescription?: string(name='ConfigDescription'),
      configValueType?: string(name='ConfigValueType'),
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTenantBizConfigResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTenantBizConfigResponseBody(name='body'),
}

async function queryTenantBizConfigWithOptions(request: QueryTenantBizConfigRequest, runtime: Util.RuntimeOptions): QueryTenantBizConfigResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTenantBizConfig', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTenantBizConfig(request: QueryTenantBizConfigRequest): QueryTenantBizConfigResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTenantBizConfigWithOptions(request, runtime);
}

model QueryTenantInfoRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QueryTenantInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    business?: string(name='Business'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    settleInfo?: string(name='SettleInfo'),
    status?: string(name='Status'),
    tenantDescription?: string(name='TenantDescription'),
    tenantId?: string(name='TenantId'),
    tenantName?: string(name='TenantName'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTenantInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTenantInfoResponseBody(name='body'),
}

async function queryTenantInfoWithOptions(request: QueryTenantInfoRequest, runtime: Util.RuntimeOptions): QueryTenantInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTenantInfo', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTenantInfo(request: QueryTenantInfoRequest): QueryTenantInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTenantInfoWithOptions(request, runtime);
}

model QueryTenantUserRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QueryTenantUserResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    business?: string(name='Business'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    originSite?: string(name='OriginSite'),
    originSiteUserId?: string(name='OriginSiteUserId'),
    originSiteUserName?: string(name='OriginSiteUserName'),
    status?: string(name='Status'),
    tenantId?: string(name='TenantId'),
    tenantName?: string(name='TenantName'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTenantUserResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTenantUserResponseBody(name='body'),
}

async function queryTenantUserWithOptions(request: QueryTenantUserRequest, runtime: Util.RuntimeOptions): QueryTenantUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTenantUser', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTenantUser(request: QueryTenantUserRequest): QueryTenantUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTenantUserWithOptions(request, runtime);
}

model QueryTenantUserByUserIdRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QueryTenantUserByUserIdResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    business?: string(name='Business'),
    createTime?: long(name='CreateTime'),
    extInfo?: string(name='ExtInfo'),
    modifyTime?: long(name='ModifyTime'),
    originSite?: string(name='OriginSite'),
    originSiteUserId?: string(name='OriginSiteUserId'),
    originSiteUserName?: string(name='OriginSiteUserName'),
    status?: string(name='Status'),
    tenantId?: string(name='TenantId'),
    tenantName?: string(name='TenantName'),
    userId?: string(name='UserId'),
    userName?: string(name='UserName'),
    version?: long(name='Version'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryTenantUserByUserIdResponse = {
  headers: map[string]string(name='headers'),
  body: QueryTenantUserByUserIdResponseBody(name='body'),
}

async function queryTenantUserByUserIdWithOptions(request: QueryTenantUserByUserIdRequest, runtime: Util.RuntimeOptions): QueryTenantUserByUserIdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryTenantUserByUserId', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryTenantUserByUserId(request: QueryTenantUserByUserIdRequest): QueryTenantUserByUserIdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryTenantUserByUserIdWithOptions(request, runtime);
}

model QueryUnionChannelRequest {
  channelId?: string(name='ChannelId'),
}

model QueryUnionChannelResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUnionChannelResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUnionChannelResponseBody(name='body'),
}

async function queryUnionChannelWithOptions(request: QueryUnionChannelRequest, runtime: Util.RuntimeOptions): QueryUnionChannelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryUnionChannel', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryUnionChannel(request: QueryUnionChannelRequest): QueryUnionChannelResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUnionChannelWithOptions(request, runtime);
}

model QueryUnionContentInfoRequest {
  channelId?: string(name='ChannelId'),
  contentId?: string(name='ContentId'),
  proxyUserId?: long(name='ProxyUserId'),
}

model QueryUnionContentInfoResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUnionContentInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUnionContentInfoResponseBody(name='body'),
}

async function queryUnionContentInfoWithOptions(request: QueryUnionContentInfoRequest, runtime: Util.RuntimeOptions): QueryUnionContentInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryUnionContentInfo', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryUnionContentInfo(request: QueryUnionContentInfoRequest): QueryUnionContentInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUnionContentInfoWithOptions(request, runtime);
}

model QueryUnionPromotionRequest {
  alipayOpenId?: long(name='AlipayOpenId'),
  channelId?: string(name='ChannelId'),
  proxyChannelId?: string(name='ProxyChannelId'),
  sign?: string(name='Sign'),
  unionBizType?: string(name='UnionBizType'),
  userId?: long(name='UserId'),
  userNick?: string(name='UserNick'),
}

model QueryUnionPromotionResponseBody = {
  bizErrorCode?: string(name='BizErrorCode'),
  errorCode?: int32(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  result?: [  map[string]any ](name='Result'),
  success?: boolean(name='Success'),
}

model QueryUnionPromotionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUnionPromotionResponseBody(name='body'),
}

async function queryUnionPromotionWithOptions(request: QueryUnionPromotionRequest, runtime: Util.RuntimeOptions): QueryUnionPromotionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryUnionPromotion', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryUnionPromotion(request: QueryUnionPromotionRequest): QueryUnionPromotionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUnionPromotionWithOptions(request, runtime);
}

model QueryUnionSumChannelDataRequest {
  channelId?: string(name='ChannelId'),
  taskType?: string(name='TaskType'),
}

model QueryUnionSumChannelDataResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUnionSumChannelDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUnionSumChannelDataResponseBody(name='body'),
}

async function queryUnionSumChannelDataWithOptions(request: QueryUnionSumChannelDataRequest, runtime: Util.RuntimeOptions): QueryUnionSumChannelDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryUnionSumChannelData', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryUnionSumChannelData(request: QueryUnionSumChannelDataRequest): QueryUnionSumChannelDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUnionSumChannelDataWithOptions(request, runtime);
}

model QueryUnionTaskInfoRequest {
  channelId?: string(name='ChannelId'),
  proxyUserId?: long(name='ProxyUserId'),
  taskId?: long(name='TaskId'),
}

model QueryUnionTaskInfoResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUnionTaskInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUnionTaskInfoResponseBody(name='body'),
}

async function queryUnionTaskInfoWithOptions(request: QueryUnionTaskInfoRequest, runtime: Util.RuntimeOptions): QueryUnionTaskInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryUnionTaskInfo', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryUnionTaskInfo(request: QueryUnionTaskInfoRequest): QueryUnionTaskInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUnionTaskInfoWithOptions(request, runtime);
}

model QueryUnionTaskListRequest {
  brandUserId?: long(name='BrandUserId'),
  channelId?: string(name='ChannelId'),
  pageIndex?: int32(name='PageIndex'),
  pageSize?: int32(name='PageSize'),
  proxyUserId?: long(name='ProxyUserId'),
}

model QueryUnionTaskListResponseBody = {
  code?: int32(name='Code'),
  data?: map[string]any(name='Data'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUnionTaskListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUnionTaskListResponseBody(name='body'),
}

async function queryUnionTaskListWithOptions(request: QueryUnionTaskListRequest, runtime: Util.RuntimeOptions): QueryUnionTaskListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryUnionTaskList', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryUnionTaskList(request: QueryUnionTaskListRequest): QueryUnionTaskListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUnionTaskListWithOptions(request, runtime);
}

model QueryUserRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  sspUser?: map[string]any(name='SspUser'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QueryUserShrinkRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  sspUserShrink?: string(name='SspUser'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model QueryUserResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    email?: string(name='Email'),
    gmtCreateTime?: long(name='GmtCreateTime'),
    gmtModifiedTime?: long(name='GmtModifiedTime'),
    isDeleteTag?: string(name='IsDeleteTag'),
    mobilePhone?: string(name='MobilePhone'),
    roleCode?: string(name='RoleCode'),
    sspUserId?: string(name='SspUserId'),
    status?: string(name='Status'),
    tenantId?: string(name='TenantId'),
    tenantUserId?: string(name='TenantUserId'),
    userName?: string(name='UserName'),
    yunPersonsId?: string(name='YunPersonsId'),
    yunUid?: string(name='YunUid'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUserResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUserResponseBody(name='body'),
}

async function queryUserWithOptions(tmpReq: QueryUserRequest, runtime: Util.RuntimeOptions): QueryUserResponse {
  Util.validateModel(tmpReq);
  var request = new QueryUserShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sspUser)) {
    request.sspUserShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sspUser, 'SspUser', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryUser', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryUser(request: QueryUserRequest): QueryUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUserWithOptions(request, runtime);
}

model ReduceAmountRequest {
  amount?: long(name='Amount'),
  channelId?: string(name='ChannelId'),
  taskId?: long(name='TaskId'),
  v?: string(name='V'),
}

model ReduceAmountResponseBody = {
  data?: {
    chargeDetail?: string(name='ChargeDetail'),
    price?: long(name='Price'),
    taskId?: long(name='TaskId'),
  }(name='Data'),
  errorCode?: int32(name='ErrorCode'),
  errorMsg?: string(name='ErrorMsg'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ReduceAmountResponse = {
  headers: map[string]string(name='headers'),
  body: ReduceAmountResponseBody(name='body'),
}

async function reduceAmountWithOptions(request: ReduceAmountRequest, runtime: Util.RuntimeOptions): ReduceAmountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReduceAmount', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reduceAmount(request: ReduceAmountRequest): ReduceAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return reduceAmountWithOptions(request, runtime);
}

model RegistDeviceRequest {
  channelId?: string(name='ChannelId'),
  city?: string(name='City'),
  detailAddr?: string(name='DetailAddr'),
  deviceModelNumber?: string(name='DeviceModelNumber'),
  deviceName?: string(name='DeviceName'),
  deviceType?: string(name='DeviceType'),
  district?: string(name='District'),
  firstScene?: string(name='FirstScene'),
  floor?: string(name='Floor'),
  locationName?: string(name='LocationName'),
  outerCode?: string(name='OuterCode'),
  province?: string(name='Province'),
  secondScene?: string(name='SecondScene'),
}

model RegistDeviceResponseBody = {
  data?: string(name='Data'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model RegistDeviceResponse = {
  headers: map[string]string(name='headers'),
  body: RegistDeviceResponseBody(name='body'),
}

async function registDeviceWithOptions(request: RegistDeviceRequest, runtime: Util.RuntimeOptions): RegistDeviceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RegistDevice', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function registDevice(request: RegistDeviceRequest): RegistDeviceResponse {
  var runtime = new Util.RuntimeOptions{};
  return registDeviceWithOptions(request, runtime);
}

model SaveCpmTradeRequest {
  advertType?: string(name='AdvertType'),
  age?: int32(name='Age'),
  applyPrice?: string(name='ApplyPrice'),
  bizType?: string(name='BizType'),
  channelId?: string(name='ChannelId'),
  chargeType?: string(name='ChargeType'),
  costDetail?: string(name='CostDetail'),
  deviceCode?: string(name='DeviceCode'),
  extendString?: string(name='ExtendString'),
  holdId?: string(name='HoldId'),
  outerCode?: string(name='OuterCode'),
  realCostAmount?: string(name='RealCostAmount'),
  sex?: string(name='Sex'),
  taskId?: string(name='TaskId'),
  taskTag?: string(name='TaskTag'),
  taskType?: string(name='TaskType'),
  tradeTime?: long(name='TradeTime'),
  v?: string(name='V'),
}

model SaveCpmTradeResponseBody = {
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model SaveCpmTradeResponse = {
  headers: map[string]string(name='headers'),
  body: SaveCpmTradeResponseBody(name='body'),
}

async function saveCpmTradeWithOptions(request: SaveCpmTradeRequest, runtime: Util.RuntimeOptions): SaveCpmTradeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveCpmTrade', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveCpmTrade(request: SaveCpmTradeRequest): SaveCpmTradeResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveCpmTradeWithOptions(request, runtime);
}

model ScanCodeNotificationRequest {
  age?: int32(name='Age'),
  alipayOpenId?: string(name='AlipayOpenId'),
  applyPrice?: int32(name='ApplyPrice'),
  bizResult?: string(name='BizResult'),
  bizType?: string(name='BizType'),
  brandNick?: string(name='BrandNick'),
  brandUserId?: string(name='BrandUserId'),
  channelId?: string(name='ChannelId'),
  chargeTag?: string(name='ChargeTag'),
  cid?: string(name='Cid'),
  commodityId?: string(name='CommodityId'),
  costDetail?: string(name='CostDetail'),
  deviceCode?: string(name='DeviceCode'),
  deviceType?: string(name='DeviceType'),
  holderId?: string(name='HolderId'),
  outerCode?: string(name='OuterCode'),
  phase?: string(name='Phase'),
  proxyUserId?: string(name='ProxyUserId'),
  queryStr?: string(name='QueryStr'),
  realCostAmount?: string(name='RealCostAmount'),
  salePrice?: int32(name='SalePrice'),
  sex?: string(name='Sex'),
  taskId?: string(name='TaskId'),
  taskType?: string(name='TaskType'),
  v?: string(name='V'),
}

model ScanCodeNotificationResponseBody = {
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model ScanCodeNotificationResponse = {
  headers: map[string]string(name='headers'),
  body: ScanCodeNotificationResponseBody(name='body'),
}

async function scanCodeNotificationWithOptions(request: ScanCodeNotificationRequest, runtime: Util.RuntimeOptions): ScanCodeNotificationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ScanCodeNotification', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function scanCodeNotification(request: ScanCodeNotificationRequest): ScanCodeNotificationResponse {
  var runtime = new Util.RuntimeOptions{};
  return scanCodeNotificationWithOptions(request, runtime);
}

model SendTaokeInfoRequest {
  address?: string(name='Address'),
  age?: string(name='Age'),
  brandId?: string(name='BrandId'),
  channelId?: string(name='ChannelId'),
  city?: string(name='City'),
  componentId?: string(name='ComponentId'),
  district?: string(name='District'),
  environmentType?: string(name='EnvironmentType'),
  gender?: string(name='Gender'),
  imei?: string(name='Imei'),
  ip?: string(name='Ip'),
  mac?: string(name='Mac'),
  mediaId?: string(name='MediaId'),
  payPrice?: string(name='PayPrice'),
  phone?: string(name='Phone'),
  plat?: string(name='Plat'),
  productId?: string(name='ProductId'),
  productTitle?: string(name='ProductTitle'),
  province?: string(name='Province'),
  sellPrice?: string(name='SellPrice'),
  status?: string(name='Status'),
  userId?: string(name='UserId'),
  v?: string(name='V'),
}

model SendTaokeInfoResponseBody = {
  errorCode?: string(name='ErrorCode'),
  errorMessage?: string(name='ErrorMessage'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SendTaokeInfoResponse = {
  headers: map[string]string(name='headers'),
  body: SendTaokeInfoResponseBody(name='body'),
}

async function sendTaokeInfoWithOptions(request: SendTaokeInfoRequest, runtime: Util.RuntimeOptions): SendTaokeInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SendTaokeInfo', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function sendTaokeInfo(request: SendTaokeInfoRequest): SendTaokeInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return sendTaokeInfoWithOptions(request, runtime);
}

model SyncUnionOrderRequest {
  age?: int32(name='Age'),
  applyPrice?: long(name='ApplyPrice'),
  bizSerialNumber?: string(name='BizSerialNumber'),
  brandName?: string(name='BrandName'),
  brandUserId?: long(name='BrandUserId'),
  channelId?: string(name='ChannelId'),
  deviceId?: string(name='DeviceId'),
  extendInfo?: string(name='ExtendInfo'),
  holderId?: string(name='HolderId'),
  industryLabelBagId?: int32(name='IndustryLabelBagId'),
  proxyChannelId?: string(name='ProxyChannelId'),
  proxyUserId?: long(name='ProxyUserId'),
  realCostAmount?: long(name='RealCostAmount'),
  sex?: string(name='Sex'),
  status?: string(name='Status'),
  taskBizType?: string(name='TaskBizType'),
  taskId?: long(name='TaskId'),
  taskRuleType?: string(name='TaskRuleType'),
  taskType?: string(name='TaskType'),
  tradeTimeString?: string(name='TradeTimeString'),
  v?: string(name='V'),
}

model SyncUnionOrderResponseBody = {
  aliPayOrderId?: string(name='AliPayOrderId'),
  errorCode?: string(name='ErrorCode'),
  msg?: string(name='Msg'),
  requestId?: string(name='RequestId'),
  status?: boolean(name='Status'),
}

model SyncUnionOrderResponse = {
  headers: map[string]string(name='headers'),
  body: SyncUnionOrderResponseBody(name='body'),
}

async function syncUnionOrderWithOptions(request: SyncUnionOrderRequest, runtime: Util.RuntimeOptions): SyncUnionOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SyncUnionOrder', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function syncUnionOrder(request: SyncUnionOrderRequest): SyncUnionOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return syncUnionOrderWithOptions(request, runtime);
}

model UpdateFlowRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  flow?: map[string]any(name='Flow'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model UpdateFlowShrinkRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  flowShrink?: string(name='Flow'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model UpdateFlowResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    applyUserId?: string(name='ApplyUserId'),
    approveTime?: long(name='ApproveTime'),
    approveUserId?: string(name='ApproveUserId'),
    businessKey?: string(name='BusinessKey'),
    childStatus?: string(name='ChildStatus'),
    extInfo?: string(name='ExtInfo'),
    flowId?: string(name='FlowId'),
    gmtCreateTime?: long(name='GmtCreateTime'),
    gmtModifiedTime?: long(name='GmtModifiedTime'),
    newData?: string(name='NewData'),
    oldData?: string(name='OldData'),
    reasonType?: string(name='ReasonType'),
    status?: string(name='Status'),
    tenantId?: string(name='TenantId'),
    type?: string(name='Type'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateFlowResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateFlowResponseBody(name='body'),
}

async function updateFlowWithOptions(tmpReq: UpdateFlowRequest, runtime: Util.RuntimeOptions): UpdateFlowResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateFlowShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.flow)) {
    request.flowShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.flow, 'Flow', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateFlow', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateFlow(request: UpdateFlowRequest): UpdateFlowResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateFlowWithOptions(request, runtime);
}

model UpdateUserRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  sspUser?: map[string]any(name='SspUser'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model UpdateUserShrinkRequest {
  appName?: string(name='AppName'),
  business?: string(name='Business'),
  clientToken?: string(name='ClientToken'),
  environment?: string(name='Environment'),
  originSiteUserId?: string(name='OriginSiteUserId'),
  sspUserShrink?: string(name='SspUser'),
  tenantId?: string(name='TenantId'),
  userId?: string(name='UserId'),
  userSite?: string(name='UserSite'),
}

model UpdateUserResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  model?: {
    email?: string(name='Email'),
    gmtCreateTime?: long(name='GmtCreateTime'),
    gmtModifiedTime?: long(name='GmtModifiedTime'),
    isDeleteTag?: string(name='IsDeleteTag'),
    mobilePhone?: string(name='MobilePhone'),
    roleCode?: string(name='RoleCode'),
    sspUserId?: string(name='SspUserId'),
    status?: string(name='Status'),
    tenantId?: string(name='TenantId'),
    tenantUserId?: string(name='TenantUserId'),
    userName?: string(name='UserName'),
    yunPersonsId?: string(name='YunPersonsId'),
    yunUid?: string(name='YunUid'),
  }(name='Model'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpdateUserResponse = {
  headers: map[string]string(name='headers'),
  body: UpdateUserResponseBody(name='body'),
}

async function updateUserWithOptions(tmpReq: UpdateUserRequest, runtime: Util.RuntimeOptions): UpdateUserResponse {
  Util.validateModel(tmpReq);
  var request = new UpdateUserShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.sspUser)) {
    request.sspUserShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.sspUser, 'SspUser', 'json');
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpdateUser', '2018-12-12', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function updateUser(request: UpdateUserRequest): UpdateUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return updateUserWithOptions(request, runtime);
}

