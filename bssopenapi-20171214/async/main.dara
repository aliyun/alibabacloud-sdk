/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'BssOpenApi';
  @version = '2017-12-14';
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'business.aliyuncs.com',
    cn-shanghai = 'business.aliyuncs.com',
    ap-southeast-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-northeast-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-northeast-2 = 'business.ap-southeast-1.aliyuncs.com',
    ap-northeast-2-pop = 'business.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'business.ap-southeast-1.aliyuncs.com',
    cn-beijing = 'business.aliyuncs.com',
    cn-beijing-finance-1 = 'business.aliyuncs.com',
    cn-beijing-finance-pop = 'business.aliyuncs.com',
    cn-beijing-gov-1 = 'business.aliyuncs.com',
    cn-beijing-nu16-b01 = 'business.aliyuncs.com',
    cn-chengdu = 'business.aliyuncs.com',
    cn-edge-1 = 'business.aliyuncs.com',
    cn-fujian = 'business.aliyuncs.com',
    cn-haidian-cm12-c01 = 'business.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'business.aliyuncs.com',
    cn-hangzhou-finance = 'business.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'business.aliyuncs.com',
    cn-hangzhou-test-306 = 'business.aliyuncs.com',
    cn-hongkong = 'business.aliyuncs.com',
    cn-hongkong-finance-pop = 'business.aliyuncs.com',
    cn-huhehaote = 'business.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'business.aliyuncs.com',
    cn-north-2-gov-1 = 'business.aliyuncs.com',
    cn-qingdao = 'business.aliyuncs.com',
    cn-qingdao-nebula = 'business.aliyuncs.com',
    cn-shanghai-et15-b01 = 'business.aliyuncs.com',
    cn-shanghai-et2-b01 = 'business.aliyuncs.com',
    cn-shanghai-finance-1 = 'business.aliyuncs.com',
    cn-shanghai-inner = 'business.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'business.aliyuncs.com',
    cn-shenzhen = 'business.aliyuncs.com',
    cn-shenzhen-finance-1 = 'business.aliyuncs.com',
    cn-shenzhen-inner = 'business.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'business.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'business.aliyuncs.com',
    cn-wuhan = 'business.aliyuncs.com',
    cn-wulanchabu = 'business.aliyuncs.com',
    cn-yushanfang = 'business.aliyuncs.com',
    cn-zhangbei = 'business.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'business.aliyuncs.com',
    cn-zhangjiakou = 'business.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'business.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'business.aliyuncs.com',
    eu-central-1 = 'business.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'business.ap-southeast-1.aliyuncs.com',
    eu-west-1-oxs = 'business.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'business.ap-southeast-1.aliyuncs.com',
    rus-west-1-pop = 'business.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'business.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'business.ap-southeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddAccountRelationRequest {
  childNick?: string(name='ChildNick', position='Query'),
  childUserId: long(name='ChildUserId', example='1512996702208737', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  parentUserId: long(name='ParentUserId', example='1738376485192612', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  permissionCodes?: [ string ](name='PermissionCodes', example='CHECK_TARGET_CONSUMPTION', position='Query'),
  relationType: string(name='RelationType', example='enterprise_group', position='Query'),
  requestId: string(name='RequestId', example='32324242444', position='Query'),
  roleCodes?: [ string ](name='RoleCodes', example='trusteeship', position='Query'),
}

model AddAccountRelationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    hostId?: string(name='HostId', description='HostId', example='HostId'),
    relationId?: long(name='RelationId', example='RelationId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model AddAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  body: AddAccountRelationResponseBody(name='body'),
}

async function addAccountRelation(request: AddAccountRelationRequest): AddAccountRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAccountRelation', 'POST', '/', 'json', false, 'json', request);
}

model AllocateCostUnitResourceRequest {
  fromUnitId: long(name='FromUnitId', example='0', position='Query'),
  fromUnitUserId: long(name='FromUnitUserId', example='273394581313325532', position='Query'),
  resourceInstanceList: [ 
    {
      apportionCode?: string(name='ApportionCode', example='qwer1-cn-beijing'),
      commodityCode: string(name='CommodityCode', example='oss'),
      resourceId: string(name='ResourceId', example='cn-hangzhou;standard'),
      resourceUserId: long(name='ResourceUserId', example='273394581313325532'),
    }
  ](name='ResourceInstanceList', position='Query'),
  toUnitId: long(name='ToUnitId', example='186419', position='Query'),
  toUnitUserId: long(name='ToUnitUserId', example='241021678450941490', position='Query'),
}

model AllocateCostUnitResourceResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    isSuccess?: boolean(name='IsSuccess', example='true'),
    toUnitId?: long(name='ToUnitId', example='32857346527'),
    toUnitUserId?: long(name='ToUnitUserId', example='34857693874'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='845C629F-47A7-4F46-A470-ED5047C4C250'),
  success?: boolean(name='Success', example='false'),
}

model AllocateCostUnitResourceResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateCostUnitResourceResponseBody(name='body'),
}

async function allocateCostUnitResource(request: AllocateCostUnitResourceRequest): AllocateCostUnitResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateCostUnitResource', 'POST', '/', 'json', false, 'json', request);
}

model ApplyInvoiceRequest {
  addressId: long(name='AddressId', example='237958367', position='Query'),
  applyUserNick: string(name='ApplyUserNick', example='test', position='Query'),
  customerId: long(name='CustomerId', example='124132423', position='Query'),
  invoiceAmount: long(name='InvoiceAmount', example='124132', position='Query'),
  invoiceByAmount?: boolean(name='InvoiceByAmount', example='true', position='Query'),
  invoicingType?: int32(name='InvoicingType', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  processWay?: int32(name='ProcessWay', example='1', position='Query'),
  selectedIds: [ long ](name='SelectedIds', example='384752367', position='Query'),
  userRemark?: string(name='UserRemark', example='test', position='Query'),
}

model ApplyInvoiceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    invoiceApplyId?: long(name='InvoiceApplyId', example='1323125534'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model ApplyInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyInvoiceResponseBody(name='body'),
}

async function applyInvoice(request: ApplyInvoiceRequest): ApplyInvoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyInvoice', 'POST', '/', 'json', false, 'json', request);
}

model CancelOrderRequest {
  orderId: string(name='OrderId', example='73465432785', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model CancelOrderResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostId?: string(name='HostId', example='cn'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='30D2285E-A848-4ECB-AA74-4954C60858A1'),
  success?: boolean(name='Success', example='true'),
}

model CancelOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOrderResponseBody(name='body'),
}

async function cancelOrder(request: CancelOrderRequest): CancelOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOrder', 'POST', '/', 'json', false, 'json', request);
}

model ChangeResellerConsumeAmountRequest {
  adjustType: string(name='AdjustType', example='increase/decrease', position='Query'),
  amount: string(name='Amount', example='10.00', position='Query'),
  businessType: string(name='BusinessType', example='quota_amount_adjust', position='Query'),
  currency: string(name='Currency', example='CNY', position='Query'),
  extendMap?: string(name='ExtendMap', example='{}', position='Query'),
  outBizId: string(name='OutBizId', example='1647396865', position='Query'),
  ownerId: long(name='OwnerId', position='Query'),
  source: string(name='Source', example='system', position='Query'),
}

model ChangeResellerConsumeAmountResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='300.00'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
  success?: boolean(name='Success', example='true'),
}

model ChangeResellerConsumeAmountResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeResellerConsumeAmountResponseBody(name='body'),
}

async function changeResellerConsumeAmount(request: ChangeResellerConsumeAmountRequest): ChangeResellerConsumeAmountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResellerConsumeAmount', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmRelationRequest {
  childUserId?: long(name='ChildUserId', example='1512996702208737', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  confirmCode: string(name='ConfirmCode', example='child_agree', position='Query'),
  parentUserId?: long(name='ParentUserId', example='1738376485192612', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  permissionCodes: [ string ](name='PermissionCodes', example='SYNCHRONIZE_FINANCE_IDENTITY', position='Query'),
  relationId?: long(name='RelationId', example='51463', position='Query'),
  relationType?: string(name='RelationType', position='Query'),
  requestId: string(name='RequestId', example='request_id', position='Query'),
}

model ConfirmRelationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    hostId?: string(name='HostId', description='HostId', example='HostId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='request_id'),
  success?: boolean(name='Success', example='true'),
}

model ConfirmRelationResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmRelationResponseBody(name='body'),
}

async function confirmRelation(request: ConfirmRelationRequest): ConfirmRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmRelation', 'POST', '/', 'json', false, 'json', request);
}

model ConvertChargeTypeRequest {
  instanceId: string(name='InstanceId', example='rm-kasjgfjshgf', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', example='6', position='Query'),
  productCode: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  subscriptionType: string(name='SubscriptionType', example='Subscription', position='Query'),
}

model ConvertChargeTypeResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    orderId?: string(name='OrderId', example='202657601410661'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model ConvertChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ConvertChargeTypeResponseBody(name='body'),
}

async function convertChargeType(request: ConvertChargeTypeRequest): ConvertChargeTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertChargeType', 'POST', '/', 'json', false, 'json', request);
}

model CreateAgAccountRequest {
  accountAttr?: string(name='AccountAttr', example='1', position='Query'),
  cityName?: string(name='CityName', position='Query'),
  enterpriseName?: string(name='EnterpriseName', position='Query'),
  firstName?: string(name='FirstName', position='Query'),
  lastName?: string(name='LastName', position='Query'),
  loginEmail: string(name='LoginEmail', example='email', position='Query'),
  nationCode?: string(name='NationCode', example='CN', position='Query'),
  postcode?: string(name='Postcode', example='350000', position='Query'),
  provinceName?: string(name='ProvinceName', position='Query'),
}

model CreateAgAccountResponseBody = {
  agRelationDto?: {
    mpk?: string(name='Mpk', description='MPKÔºàUIDÔºâ', example='1785287436011964'),
    pk?: string(name='Pk', example='1728240534507590'),
    ramAdminRoleName?: string(name='RamAdminRoleName', example='admin-role'),
    type?: string(name='Type', example='FINACE_CLOUD'),
  }(name='AgRelationDto'),
  code?: string(name='Code', example='LOGIN_EMAIL_HAS_BEEN_USED'),
  message?: string(name='Message', example='loginEmail=685741089H@chinaunicom.cn,has used'),
  requestId?: string(name='RequestId', example='EAE08A27-386C-579E-966D-8853EC3C5D0E'),
  success?: boolean(name='Success', example='true'),
}

model CreateAgAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAgAccountResponseBody(name='body'),
}

async function createAgAccount(request: CreateAgAccountRequest): CreateAgAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAgAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateCostUnitRequest {
  unitEntityList?: [ 
    {
      ownerUid: long(name='OwnerUid', example='982375623'),
      parentUnitId: long(name='ParentUnitId', example='-1'),
      unitName: string(name='UnitName', example='test'),
    }
  ](name='UnitEntityList', position='Query'),
}

model CreateCostUnitResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    costUnitDtoList?: [ 
      {
        ownerUid?: long(name='OwnerUid', example='26387563'),
        parentUnitId?: long(name='ParentUnitId', example='-1'),
        unitId?: long(name='UnitId', example='84327659328'),
        unitName?: string(name='UnitName', example='test'),
      }
    ](name='CostUnitDtoList'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', example='true'),
}

model CreateCostUnitResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCostUnitResponseBody(name='body'),
}

async function createCostUnit(request: CreateCostUnitRequest): CreateCostUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCostUnit', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  clientToken?: string(name='ClientToken', example='JASIOFKVNVIXXXXXX', position='Query'),
  logistics?: string(name='Logistics', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameter?: [ 
    {
      code: string(name='Code', example='InstanceType'),
      value: string(name='Value', example='disk'),
    }
  ](name='Parameter', position='Query'),
  period?: int32(name='Period', example='12', position='Query'),
  productCode: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  renewPeriod?: int32(name='RenewPeriod', example='12', position='Query'),
  renewalStatus?: string(name='RenewalStatus', example='ManualRenewal', position='Query'),
  subscriptionType: string(name='SubscriptionType', example='Subscription', position='Query'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    instanceId?: string(name='InstanceId', example='OSSBAG-cn-v1hxxxxx23'),
    orderId?: string(name='OrderId', example='20240xxxx21'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='C880B065-A781-4F19-B6DD-3E0E3B715C64'),
  success?: boolean(name='Success', example='true'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateResellerUserQuotaRequest {
  amount: string(name='Amount', example='100', position='Query'),
  currency: string(name='Currency', example='CNY', position='Query'),
  outBizId?: string(name='OutBizId', example='7ed0bedc-056e-4a71-9249-4581615c028f', position='Query'),
  ownerId: long(name='OwnerId', position='Query'),
}

model CreateResellerUserQuotaResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model CreateResellerUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResellerUserQuotaResponseBody(name='body'),
}

async function createResellerUserQuota(request: CreateResellerUserQuotaRequest): CreateResellerUserQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResellerUserQuota', 'POST', '/', 'json', false, 'json', request);
}

model CreateResourcePackageRequest {
  duration?: int32(name='Duration', example='6', position='Query'),
  effectiveDate?: string(name='EffectiveDate', example='2020-03-03T12:00:00Z', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packageType?: string(name='PackageType', example='FPT_ossbag_absolute_Storage_sh', position='Query'),
  pricingCycle?: string(name='PricingCycle', example='Month', position='Query'),
  productCode?: string(name='ProductCode', example='ossbag', position='Query'),
  specification?: string(name='Specification', example='40', position='Query'),
}

model CreateResourcePackageResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    instanceId?: string(name='InstanceId', example='OSSBAG-cn-****s'),
    orderId?: long(name='OrderId', example='202407022550621'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  orderId?: long(name='OrderId', example='202407022550621'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model CreateResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourcePackageResponseBody(name='body'),
}

async function createResourcePackage(request: CreateResourcePackageRequest): CreateResourcePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResourcePackage', 'POST', '/', 'json', false, 'json', request);
}

model CreateSavingsPlansInstanceRequest {
  commodityCode: string(name='CommodityCode', description='commodityCode', example='savingplan_common_public_cn', position='Query'),
  duration: string(name='Duration', description='duration', example='1', minLength=1, position='Query'),
  effectiveDate?: string(name='EffectiveDate', description='effectiveDate', example='2021-12-31T00:00:00Z', position='Query'),
  payMode: string(name='PayMode', description='payMode', example='total', position='Query'),
  poolValue: string(name='PoolValue', description='poolValue', example='0.1', position='Query'),
  pricingCycle: string(name='PricingCycle', description='pricingCycle', example='Year', position='Query'),
  region?: string(name='Region', description='region', example='cn-hangzhou', position='Query'),
  specType?: string(name='SpecType', description='specType', example='family', position='Query'),
  specification?: string(name='Specification', description='specification', example='ecs.g6', position='Query'),
  type: string(name='Type', description='type', example='univeral', position='Query'),
}

model CreateSavingsPlansInstanceResponseBody = {
  code?: string(name='Code', description='code', example='PARAM_ERROR'),
  data?: {
    orderId?: long(name='OrderId', description='orderId', example='202110260001'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId', example='26dabb0c-8ca0-4aa0-8143-30499f3fe304'),
  success?: boolean(name='Success', description='success', example='true'),
}

model CreateSavingsPlansInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSavingsPlansInstanceResponseBody(name='body'),
}

async function createSavingsPlansInstance(request: CreateSavingsPlansInstanceRequest): CreateSavingsPlansInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSavingsPlansInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCostUnitRequest {
  ownerUid: long(name='OwnerUid', example='2135342', position='Query'),
  unitId: long(name='UnitId', example='376348', position='Query'),
}

model DeleteCostUnitResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    isSuccess?: boolean(name='IsSuccess', example='true'),
    ownerUid?: long(name='OwnerUid', example='12431'),
    unitId?: long(name='UnitId', example='123412343'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCostUnitResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCostUnitResponseBody(name='body'),
}

async function deleteCostUnit(request: DeleteCostUnitRequest): DeleteCostUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCostUnit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeCostBudgetsSummaryRequest {
  budgetName?: string(name='BudgetName', description='È¢ÑÁÆóÂêçÁß∞', position='Query'),
  budgetStatus?: string(name='BudgetStatus', description='È¢ÑÁÆóÁä∂ÊÄÅ', example='notOverdue', position='Query'),
  budgetType?: string(name='BudgetType', description='È¢ÑÁÆóÁ±ªÂûã', example='cost', position='Query'),
  maxResults?: int32(name='MaxResults', description='ËØªÂèñÁöÑÊúÄÂ§ßÊï∞ÊçÆËÆ∞ÂΩïÊï∞Èáè', example='5', position='Query'),
  nextToken?: string(name='NextToken', description='ÂºÄÂßãËØªÂèñÁöÑ‰ΩçÁΩÆ', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6NH0=', position='Query'),
}

model DescribeCostBudgetsSummaryResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostId?: string(name='HostId', description='Á´ôÁÇπÂêçÁß∞', example='cn'),
    items?: [ 
      {
        budget?: map[string]any(name='Budget', example='{           "budgetCycleType": "monthly",           "budgetMemo": "",           "totalBudgetAmount": 220         }'),
        budgetName?: string(name='BudgetName'),
        budgetStatus?: string(name='BudgetStatus', example='overdue'),
        budgetType?: string(name='BudgetType', example='cost'),
        calculatedValues?: map[string]any(name='CalculatedValues', example='{           "actualConsumeSum": 88.6,           "actualAddForecastedAmount": 89.6,           "actualAndBudgetComparison": "20.73%"         }'),
        consumePeriod?: map[string]any(name='ConsumePeriod', example='{           "consumePeriodBegin": "2022-10",           "consumePeriodEnd": "2022-11"         }'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', description='Êú¨Ê¨°ËØ∑Ê±ÇÊâÄËøîÂõûÁöÑÊúÄÂ§ßËÆ∞ÂΩïÊù°Êï∞„ÄÇ', example='5'),
    nextToken?: string(name='NextToken', description='‰∏ãÈ°µtoken', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6NH0='),
    totalCount?: int32(name='TotalCount', description='ÊÄªËÆ∞ÂΩïÊï∞„ÄÇ', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='3BFC23FE-A182-4D96-A1E4-7521B30B8E43'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCostBudgetsSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCostBudgetsSummaryResponseBody(name='body'),
}

async function describeCostBudgetsSummary(request: DescribeCostBudgetsSummaryRequest): DescribeCostBudgetsSummaryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeCostBudgetsSummary', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceAmortizedCostByAmortizationPeriodRequest {
  billOwnerIdList?: [ string ](name='BillOwnerIdList', position='Body'),
  billUserIdList?: [ string ](name='BillUserIdList', position='Body'),
  billingCycle: string(name='BillingCycle', description='Ë¥¶ÊúüÊúà„ÄÅÊëäÈîÄÊúà', example='2022-10', maxLength=256, position='Body'),
  consumePeriodFilter?: [ string ](name='ConsumePeriodFilter', description='Ë¥¶ÊúüÊúàÁ≠õÈÄâÊù°‰ª∂', position='Body'),
  costUnitCode?: string(name='CostUnitCode', description='Ë¥¢Âä°ÂçïÂÖÉcode', example='123#', maxLength=256, position='Body'),
  instanceIdList?: [ string ](name='InstanceIdList', position='Body'),
  maxResults?: int32(name='MaxResults', example='20', position='Body'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U', maxLength=2560, position='Body'),
  productCode?: string(name='ProductCode', example='rds', maxLength=256, position='Body'),
  productDetail?: string(name='ProductDetail', example='rds', maxLength=256, position='Body'),
  subscriptionType?: string(name='SubscriptionType', description='ËÆ¢ÈòÖÁ±ªÂûã', example='Subscription', maxLength=256, position='Body'),
}

model DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountID?: string(name='AccountID', example='185766xxxx'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    items?: [ 
      {
        amortizationPeriod?: string(name='AmortizationPeriod', description='ÊëäÈîÄÊúà', example='202210'),
        amortizationStatus?: string(name='AmortizationStatus', description='ÊëäÈîÄÁä∂ÊÄÅ', example='amortized'),
        billAccountID?: long(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billOwnerID?: long(name='BillOwnerID', example='185xxxxx489'),
        billOwnerName?: string(name='BillOwnerName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        consumePeriod?: string(name='ConsumePeriod', description='Ë¥¶Êúü', example='202210'),
        costUnit?: string(name='CostUnit', description='Ë¥¢Âä°ÂçïÂÖÉ'),
        costUnitCode?: string(name='CostUnitCode', description='Ë¥¢Âä°ÂçïÂÖÉcode', example='1234'),
        currentAmortizationDeductedByCashCoupons?: double(name='CurrentAmortizationDeductedByCashCoupons', example='0'),
        currentAmortizationDeductedByCoupons?: double(name='CurrentAmortizationDeductedByCoupons', example='0'),
        currentAmortizationDeductedByPrepaidCard?: double(name='CurrentAmortizationDeductedByPrepaidCard', example='0'),
        currentAmortizationExpenditureAmount?: double(name='CurrentAmortizationExpenditureAmount', example='0'),
        currentAmortizationInvoiceDiscount?: double(name='CurrentAmortizationInvoiceDiscount', example='0'),
        currentAmortizationPretaxAmount?: double(name='CurrentAmortizationPretaxAmount', example='0'),
        currentAmortizationPretaxGrossAmount?: double(name='CurrentAmortizationPretaxGrossAmount', example='0'),
        currentAmortizationRoundDownDiscount?: double(name='CurrentAmortizationRoundDownDiscount', example='0'),
        deductedByCashCoupons?: double(name='DeductedByCashCoupons', description='‰ª£ÈáëÂà∏ÊäµÊâ£', example='0'),
        deductedByCoupons?: double(name='DeductedByCoupons', description='‰ºòÊÉ†Âà∏ÊäµÊâ£', example='0'),
        deductedByPrepaidCard?: double(name='DeductedByPrepaidCard', description='ÂÇ®ÂÄºÂç°ÊîØ‰ªòÈáëÈ¢ù', example='0'),
        expenditureAmount?: double(name='ExpenditureAmount', description='Ê∂àË¥πÈáëÈ¢ùÔºàÂèØÂºÄÁ•®Ôºâ', example='0'),
        instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: double(name='InvoiceDiscount', description='‰ºòÊÉ†ÈáëÈ¢ù', example='0'),
        pretaxAmount?: double(name='PretaxAmount', description='Â∫î‰ªòÈáëÈ¢ù', example='0'),
        pretaxGrossAmount?: double(name='PretaxGrossAmount', description='ÂÆòÁΩë‰ª∑', example='0'),
        previouslyAmortizedDeductedByCashCoupons?: double(name='PreviouslyAmortizedDeductedByCashCoupons', example='0'),
        previouslyAmortizedDeductedByCoupons?: double(name='PreviouslyAmortizedDeductedByCoupons', example='0'),
        previouslyAmortizedDeductedByPrepaidCard?: double(name='PreviouslyAmortizedDeductedByPrepaidCard', example='0'),
        previouslyAmortizedExpenditureAmount?: double(name='PreviouslyAmortizedExpenditureAmount', example='0'),
        previouslyAmortizedInvoiceDiscount?: double(name='PreviouslyAmortizedInvoiceDiscount', example='0'),
        previouslyAmortizedPretaxAmount?: double(name='PreviouslyAmortizedPretaxAmount', example='0'),
        previouslyAmortizedPretaxGrossAmount?: double(name='PreviouslyAmortizedPretaxGrossAmount', example='0'),
        previouslyAmortizedRoundDownDiscount?: double(name='PreviouslyAmortizedRoundDownDiscount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productDetailCode?: string(name='ProductDetailCode', example='rds'),
        productName?: string(name='ProductName'),
        region?: string(name='Region'),
        remainingAmortizationDeductedByCashCoupons?: double(name='RemainingAmortizationDeductedByCashCoupons', example='0'),
        remainingAmortizationDeductedByCoupons?: double(name='RemainingAmortizationDeductedByCoupons', example='0'),
        remainingAmortizationDeductedByPrepaidCard?: double(name='RemainingAmortizationDeductedByPrepaidCard', example='0'),
        remainingAmortizationExpenditureAmount?: double(name='RemainingAmortizationExpenditureAmount', example='0'),
        remainingAmortizationInvoiceDiscount?: double(name='RemainingAmortizationInvoiceDiscount', example='0'),
        remainingAmortizationPretaxAmount?: double(name='RemainingAmortizationPretaxAmount', example='0'),
        remainingAmortizationPretaxGrossAmount?: double(name='RemainingAmortizationPretaxGrossAmount', example='0'),
        remainingAmortizationRoundDownDiscount?: double(name='RemainingAmortizationRoundDownDiscount', example='0'),
        resourceGroup?: string(name='ResourceGroup'),
        roundDownDiscount?: double(name='RoundDownDiscount', description='ÊäπÈõ∂ÈáëÈ¢ù', example='0'),
        splitAccountName?: string(name='SplitAccountName', example='test**1122'),
        splitItemID?: string(name='SplitItemID', example='i-28bycvyb4'),
        splitItemName?: string(name='SplitItemName', example='iZ28bycvyb4Z'),
        splitProductDetail?: string(name='SplitProductDetail', example='rds'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='tag'),
        zone?: string(name='Zone'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='100'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeInstanceAmortizedCostByAmortizationPeriodResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody(name='body'),
}

async function describeInstanceAmortizedCostByAmortizationPeriod(request: DescribeInstanceAmortizedCostByAmortizationPeriodRequest): DescribeInstanceAmortizedCostByAmortizationPeriodResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAmortizedCostByAmortizationPeriod', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceAmortizedCostByConsumePeriodRequest {
  amortizationPeriodFilter?: [ string ](name='AmortizationPeriodFilter', description='ÊëäÈîÄÊúàÁ≠õÈÄâÊù°‰ª∂', position='Body'),
  billOwnerIdList?: [ string ](name='BillOwnerIdList', position='Body'),
  billUserIdList?: [ string ](name='BillUserIdList', position='Body'),
  billingCycle: string(name='BillingCycle', description='Ë¥¶ÊúüÊúà„ÄÅÊëäÈîÄÊúà', example='2022-10', maxLength=256, position='Body'),
  costUnitCode?: string(name='CostUnitCode', description='Ë¥¢Âä°ÂçïÂÖÉcode', example='123#', maxLength=256, position='Body'),
  instanceIdList?: [ string ](name='InstanceIdList', position='Body'),
  maxResults?: int32(name='MaxResults', example='20', position='Body'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U', maxLength=2560, position='Body'),
  productCode?: string(name='ProductCode', example='rds', maxLength=256, position='Body'),
  productDetail?: string(name='ProductDetail', example='rds', maxLength=256, position='Body'),
  subscriptionType?: string(name='SubscriptionType', description='ËÆ¢ÈòÖÁ±ªÂûã', example='Subscription', maxLength=256, position='Body'),
}

model DescribeInstanceAmortizedCostByConsumePeriodResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountID?: string(name='AccountID', example='185766xxxx'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    items?: [ 
      {
        amortizationPeriod?: string(name='AmortizationPeriod', description='ÊëäÈîÄÊúà', example='202210'),
        amortizationStatus?: string(name='AmortizationStatus', description='ÊëäÈîÄÁä∂ÊÄÅ', example='amortized'),
        billAccountID?: long(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billOwnerID?: long(name='BillOwnerID', example='185xxxxx489'),
        billOwnerName?: string(name='BillOwnerName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        consumePeriod?: string(name='ConsumePeriod', description='Ë¥¶Êúü', example='202210'),
        costUnit?: string(name='CostUnit', description='Ë¥¢Âä°ÂçïÂÖÉ'),
        costUnitCode?: string(name='CostUnitCode', description='Ë¥¢Âä°ÂçïÂÖÉcode', example='1234'),
        currentAmortizationDeductedByCashCoupons?: double(name='CurrentAmortizationDeductedByCashCoupons', example='0'),
        currentAmortizationDeductedByCoupons?: double(name='CurrentAmortizationDeductedByCoupons', example='0'),
        currentAmortizationDeductedByPrepaidCard?: double(name='CurrentAmortizationDeductedByPrepaidCard', example='0'),
        currentAmortizationExpenditureAmount?: double(name='CurrentAmortizationExpenditureAmount', example='0'),
        currentAmortizationInvoiceDiscount?: double(name='CurrentAmortizationInvoiceDiscount', example='0'),
        currentAmortizationPretaxAmount?: double(name='CurrentAmortizationPretaxAmount', example='0'),
        currentAmortizationPretaxGrossAmount?: double(name='CurrentAmortizationPretaxGrossAmount', example='0'),
        currentAmortizationRoundDownDiscount?: double(name='CurrentAmortizationRoundDownDiscount', example='0'),
        deductedByCashCoupons?: double(name='DeductedByCashCoupons', description='‰ª£ÈáëÂà∏ÊäµÊâ£', example='0'),
        deductedByCoupons?: double(name='DeductedByCoupons', description='‰ºòÊÉ†Âà∏ÊäµÊâ£', example='0'),
        deductedByPrepaidCard?: double(name='DeductedByPrepaidCard', description='ÂÇ®ÂÄºÂç°ÊîØ‰ªòÈáëÈ¢ù', example='0'),
        expenditureAmount?: double(name='ExpenditureAmount', description='Ê∂àË¥πÈáëÈ¢ùÔºàÂèØÂºÄÁ•®Ôºâ', example='0'),
        instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: double(name='InvoiceDiscount', description='‰ºòÊÉ†ÈáëÈ¢ù', example='0'),
        pretaxAmount?: double(name='PretaxAmount', description='Â∫î‰ªòÈáëÈ¢ù', example='0'),
        pretaxGrossAmount?: double(name='PretaxGrossAmount', description='ÂÆòÁΩë‰ª∑', example='0'),
        previouslyAmortizedDeductedByCashCoupons?: double(name='PreviouslyAmortizedDeductedByCashCoupons', example='0'),
        previouslyAmortizedDeductedByCoupons?: double(name='PreviouslyAmortizedDeductedByCoupons', example='0'),
        previouslyAmortizedDeductedByPrepaidCard?: double(name='PreviouslyAmortizedDeductedByPrepaidCard', example='0'),
        previouslyAmortizedExpenditureAmount?: double(name='PreviouslyAmortizedExpenditureAmount', example='0'),
        previouslyAmortizedInvoiceDiscount?: double(name='PreviouslyAmortizedInvoiceDiscount', example='0'),
        previouslyAmortizedPretaxAmount?: double(name='PreviouslyAmortizedPretaxAmount', example='0'),
        previouslyAmortizedPretaxGrossAmount?: double(name='PreviouslyAmortizedPretaxGrossAmount', example='0'),
        previouslyAmortizedRoundDownDiscount?: double(name='PreviouslyAmortizedRoundDownDiscount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productDetailCode?: string(name='ProductDetailCode', example='rds'),
        productName?: string(name='ProductName'),
        region?: string(name='Region'),
        remainingAmortizationDeductedByCashCoupons?: double(name='RemainingAmortizationDeductedByCashCoupons', example='0'),
        remainingAmortizationDeductedByCoupons?: double(name='RemainingAmortizationDeductedByCoupons', example='0'),
        remainingAmortizationDeductedByPrepaidCard?: double(name='RemainingAmortizationDeductedByPrepaidCard', example='0'),
        remainingAmortizationExpenditureAmount?: double(name='RemainingAmortizationExpenditureAmount', example='0'),
        remainingAmortizationInvoiceDiscount?: double(name='RemainingAmortizationInvoiceDiscount', example='0'),
        remainingAmortizationPretaxAmount?: double(name='RemainingAmortizationPretaxAmount', example='0'),
        remainingAmortizationPretaxGrossAmount?: double(name='RemainingAmortizationPretaxGrossAmount', example='0'),
        remainingAmortizationRoundDownDiscount?: double(name='RemainingAmortizationRoundDownDiscount', example='0'),
        resourceGroup?: string(name='ResourceGroup'),
        roundDownDiscount?: double(name='RoundDownDiscount', description='ÊäπÈõ∂ÈáëÈ¢ù', example='0'),
        splitAccountName?: string(name='SplitAccountName', example='test**1122'),
        splitItemID?: string(name='SplitItemID', example='i-28bycvyb4'),
        splitItemName?: string(name='SplitItemName', example='iZ28bycvyb4Z'),
        splitProductDetail?: string(name='SplitProductDetail', example='rds'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='tag'),
        zone?: string(name='Zone'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='100'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeInstanceAmortizedCostByConsumePeriodResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAmortizedCostByConsumePeriodResponseBody(name='body'),
}

async function describeInstanceAmortizedCostByConsumePeriod(request: DescribeInstanceAmortizedCostByConsumePeriodRequest): DescribeInstanceAmortizedCostByConsumePeriodResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceAmortizedCostByConsumePeriod', 'POST', '/', 'json', true, 'form', request);
}

model DescribeInstanceBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='122', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', example='2020-03', position='Query'),
  billingDate?: string(name='BillingDate', example='2020-03-02', position='Query'),
  granularity?: string(name='Granularity', example='MONTHLY', position='Query'),
  instanceID?: string(name='InstanceID', example='abc', position='Query'),
  isBillingItem?: boolean(name='IsBillingItem', example='false', position='Query'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', example='false', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCm', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productCode?: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo', position='Query'),
}

model DescribeInstanceBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='122'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-03'),
    items?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        billAccountID?: string(name='BillAccountID', example='122'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billingDate?: string(name='BillingDate', example='2020-03-20'),
        billingItem?: string(name='BillingItem'),
        billingItemCode?: string(name='BillingItemCode', example='disk'),
        billingType?: string(name='BillingType'),
        bizType?: string(name='BizType', example='trusteeship'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0.1'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0.1'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0.1'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage', example='0.1'),
        instanceConfig?: string(name='InstanceConfig', example='CPUÔºö12'),
        instanceID?: string(name='InstanceID', example='i-dadada'),
        instanceSpec?: string(name='InstanceSpec', example='ecs.sn1ne.3xlarge'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0.1'),
        item?: string(name='Item', example='PayAsYouGoBill'),
        itemName?: string(name='ItemName', example='iZ28bycvyb4Z'),
        listPrice?: string(name='ListPrice', example='100'),
        listPriceUnit?: string(name='ListPriceUnit'),
        nickName?: string(name='NickName', example='test'),
        outstandingAmount?: float(name='OutstandingAmount', example='0.1'),
        ownerID?: string(name='OwnerID', example='123'),
        paymentAmount?: float(name='PaymentAmount', example='0.1'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='0.1'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0.1'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        region?: string(name='Region'),
        resourceGroup?: string(name='ResourceGroup'),
        servicePeriod?: string(name='ServicePeriod', example='3600'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='key:testKey value:testValue; key:testKey1 value:testValues1'),
        usage?: string(name='Usage', example='100'),
        usageUnit?: string(name='UsageUnit', example='GB'),
        zone?: string(name='Zone'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCm'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeInstanceBillResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceBillResponseBody(name='body'),
}

async function describeInstanceBill(request: DescribeInstanceBillRequest): DescribeInstanceBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceBill', 'POST', '/', 'json', false, 'json', request);
}

model DescribePricingModuleRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  productCode: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  subscriptionType: string(name='SubscriptionType', example='Subscription', position='Query'),
}

model DescribePricingModuleResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    attributeList?: {
      attribute?: [ 
      {
        code?: string(name='Code', example='DBInstanceStorage'),
        name?: string(name='Name'),
        unit?: string(name='Unit', example='GB'),
        values?: {
          attributeValue?: [ 
          {
            name?: string(name='Name'),
            remark?: string(name='Remark'),
            type?: string(name='Type', example='single_string'),
            value?: string(name='Value', example='mysql.n2.medium.1'),
          }
        ](name='AttributeValue')
        }(name='Values'),
      }
    ](name='Attribute')
    }(name='AttributeList'),
    moduleList?: {
      module?: [ 
      {
        configList?: {
          configList?: [ string ](name='ConfigList')
        }(name='ConfigList'),
        currency?: string(name='Currency', example='CNY'),
        moduleCode?: string(name='ModuleCode', example='InstanceType'),
        moduleName?: string(name='ModuleName'),
        priceType?: string(name='PriceType', example='Month'),
      }
    ](name='Module')
    }(name='ModuleList'),
  }(name='Data'),
  message?: string(name='Message', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', example='C40A8EE0-8084-49FE-B66E-5E1C3B6AE025'),
  success?: boolean(name='Success', example='true'),
}

model DescribePricingModuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePricingModuleResponseBody(name='body'),
}

async function describePricingModule(request: DescribePricingModuleRequest): DescribePricingModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePricingModule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeProductAmortizedCostByAmortizationPeriodRequest {
  billOwnerIdList?: [ string ](name='BillOwnerIdList', position='Body'),
  billUserIdList?: [ string ](name='BillUserIdList', position='Body'),
  billingCycle: string(name='BillingCycle', example='2022-10', maxLength=256, position='Body'),
  consumePeriodFilter?: [ string ](name='ConsumePeriodFilter', position='Body'),
  costUnitCode?: string(name='CostUnitCode', example='123#', maxLength=256, position='Body'),
  maxResults?: int32(name='MaxResults', example='20', position='Body'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U', maxLength=2560, position='Body'),
  productCode?: string(name='ProductCode', example='rds', maxLength=256, position='Body'),
  productDetail?: string(name='ProductDetail', example='rds', maxLength=256, position='Body'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription', maxLength=256, position='Body'),
}

model DescribeProductAmortizedCostByAmortizationPeriodResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountID?: string(name='AccountID', example='185766xxxx'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    items?: [ 
      {
        amortizationPeriod?: string(name='AmortizationPeriod', example='202210'),
        amortizationStatus?: string(name='AmortizationStatus', example='amortized'),
        billAccountID?: long(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billOwnerID?: long(name='BillOwnerID', example='185xxxxx489'),
        billOwnerName?: string(name='BillOwnerName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        consumePeriod?: string(name='ConsumePeriod', example='202210'),
        currentAmortizationDeductedByCashCoupons?: double(name='CurrentAmortizationDeductedByCashCoupons', example='0'),
        currentAmortizationDeductedByCoupons?: double(name='CurrentAmortizationDeductedByCoupons', example='0'),
        currentAmortizationDeductedByPrepaidCard?: double(name='CurrentAmortizationDeductedByPrepaidCard', example='0'),
        currentAmortizationExpenditureAmount?: double(name='CurrentAmortizationExpenditureAmount', example='0'),
        currentAmortizationInvoiceDiscount?: double(name='CurrentAmortizationInvoiceDiscount', example='0'),
        currentAmortizationPretaxAmount?: double(name='CurrentAmortizationPretaxAmount', example='0'),
        currentAmortizationPretaxGrossAmount?: double(name='CurrentAmortizationPretaxGrossAmount', example='0'),
        currentAmortizationRoundDownDiscount?: double(name='CurrentAmortizationRoundDownDiscount', example='0'),
        deductedByCashCoupons?: double(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: double(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: double(name='DeductedByPrepaidCard', example='0'),
        expenditureAmount?: double(name='ExpenditureAmount', example='0'),
        invoiceDiscount?: double(name='InvoiceDiscount', example='0'),
        pretaxAmount?: double(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: double(name='PretaxGrossAmount', example='0'),
        previouslyAmortizedDeductedByCashCoupons?: double(name='PreviouslyAmortizedDeductedByCashCoupons', example='0'),
        previouslyAmortizedDeductedByCoupons?: double(name='PreviouslyAmortizedDeductedByCoupons', example='0'),
        previouslyAmortizedDeductedByPrepaidCard?: double(name='PreviouslyAmortizedDeductedByPrepaidCard', example='0'),
        previouslyAmortizedExpenditureAmount?: double(name='PreviouslyAmortizedExpenditureAmount', example='0'),
        previouslyAmortizedInvoiceDiscount?: double(name='PreviouslyAmortizedInvoiceDiscount', example='0'),
        previouslyAmortizedPretaxAmount?: double(name='PreviouslyAmortizedPretaxAmount', example='0'),
        previouslyAmortizedPretaxGrossAmount?: double(name='PreviouslyAmortizedPretaxGrossAmount', example='0'),
        previouslyAmortizedRoundDownDiscount?: double(name='PreviouslyAmortizedRoundDownDiscount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productDetailCode?: string(name='ProductDetailCode', example='rds'),
        productName?: string(name='ProductName'),
        remainingAmortizationDeductedByCashCoupons?: double(name='RemainingAmortizationDeductedByCashCoupons', example='0'),
        remainingAmortizationDeductedByCoupons?: double(name='RemainingAmortizationDeductedByCoupons', example='0'),
        remainingAmortizationDeductedByPrepaidCard?: double(name='RemainingAmortizationDeductedByPrepaidCard', example='0'),
        remainingAmortizationExpenditureAmount?: double(name='RemainingAmortizationExpenditureAmount', example='0'),
        remainingAmortizationInvoiceDiscount?: double(name='RemainingAmortizationInvoiceDiscount', example='0'),
        remainingAmortizationPretaxAmount?: double(name='RemainingAmortizationPretaxAmount', example='0'),
        remainingAmortizationPretaxGrossAmount?: double(name='RemainingAmortizationPretaxGrossAmount', example='0'),
        remainingAmortizationRoundDownDiscount?: double(name='RemainingAmortizationRoundDownDiscount', example='0'),
        roundDownDiscount?: double(name='RoundDownDiscount', example='0'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='100'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeProductAmortizedCostByAmortizationPeriodResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProductAmortizedCostByAmortizationPeriodResponseBody(name='body'),
}

async function describeProductAmortizedCostByAmortizationPeriod(request: DescribeProductAmortizedCostByAmortizationPeriodRequest): DescribeProductAmortizedCostByAmortizationPeriodResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProductAmortizedCostByAmortizationPeriod', 'POST', '/', 'json', true, 'form', request);
}

model DescribeProductAmortizedCostByConsumePeriodRequest {
  amortizationPeriodFilter?: [ string ](name='AmortizationPeriodFilter', description='ÊëäÈîÄÊúàÁ≠õÈÄâÊù°‰ª∂', position='Body'),
  billOwnerIdList?: [ string ](name='BillOwnerIdList', position='Body'),
  billUserIdList?: [ string ](name='BillUserIdList', position='Body'),
  billingCycle: string(name='BillingCycle', example='2022-10', maxLength=256, position='Body'),
  costUnitCode?: string(name='CostUnitCode', example='123#', maxLength=256, position='Body'),
  maxResults?: int32(name='MaxResults', example='20', position='Body'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U', maxLength=2560, position='Body'),
  productCode?: string(name='ProductCode', example='rds', maxLength=256, position='Body'),
  productDetail?: string(name='ProductDetail', example='rds', maxLength=256, position='Body'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription', maxLength=256, position='Body'),
}

model DescribeProductAmortizedCostByConsumePeriodResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountID?: string(name='AccountID', example='185766xxxx'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    items?: [ 
      {
        amortizationPeriod?: string(name='AmortizationPeriod', example='202210'),
        amortizationStatus?: string(name='AmortizationStatus', example='amortized'),
        billAccountID?: long(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billOwnerID?: long(name='BillOwnerID', example='185xxxxx489'),
        billOwnerName?: string(name='BillOwnerName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        consumePeriod?: string(name='ConsumePeriod', example='202210'),
        currentAmortizationDeductedByCashCoupons?: double(name='CurrentAmortizationDeductedByCashCoupons', example='0'),
        currentAmortizationDeductedByCoupons?: double(name='CurrentAmortizationDeductedByCoupons', example='0'),
        currentAmortizationDeductedByPrepaidCard?: double(name='CurrentAmortizationDeductedByPrepaidCard', example='0'),
        currentAmortizationExpenditureAmount?: double(name='CurrentAmortizationExpenditureAmount', example='0'),
        currentAmortizationInvoiceDiscount?: double(name='CurrentAmortizationInvoiceDiscount', example='0'),
        currentAmortizationPretaxAmount?: double(name='CurrentAmortizationPretaxAmount', example='0'),
        currentAmortizationPretaxGrossAmount?: double(name='CurrentAmortizationPretaxGrossAmount', example='0'),
        currentAmortizationRoundDownDiscount?: double(name='CurrentAmortizationRoundDownDiscount', example='0'),
        deductedByCashCoupons?: double(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: double(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: double(name='DeductedByPrepaidCard', example='0'),
        expenditureAmount?: double(name='ExpenditureAmount', example='0'),
        invoiceDiscount?: double(name='InvoiceDiscount', example='0'),
        pretaxAmount?: double(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: double(name='PretaxGrossAmount', example='0'),
        previouslyAmortizedDeductedByCashCoupons?: double(name='PreviouslyAmortizedDeductedByCashCoupons', example='0'),
        previouslyAmortizedDeductedByCoupons?: double(name='PreviouslyAmortizedDeductedByCoupons', example='0'),
        previouslyAmortizedDeductedByPrepaidCard?: double(name='PreviouslyAmortizedDeductedByPrepaidCard', example='0'),
        previouslyAmortizedExpenditureAmount?: double(name='PreviouslyAmortizedExpenditureAmount', example='0'),
        previouslyAmortizedInvoiceDiscount?: double(name='PreviouslyAmortizedInvoiceDiscount', example='0'),
        previouslyAmortizedPretaxAmount?: double(name='PreviouslyAmortizedPretaxAmount', example='0'),
        previouslyAmortizedPretaxGrossAmount?: double(name='PreviouslyAmortizedPretaxGrossAmount', example='0'),
        previouslyAmortizedRoundDownDiscount?: double(name='PreviouslyAmortizedRoundDownDiscount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productDetailCode?: string(name='ProductDetailCode', example='rds'),
        productName?: string(name='ProductName'),
        remainingAmortizationDeductedByCashCoupons?: double(name='RemainingAmortizationDeductedByCashCoupons', example='0'),
        remainingAmortizationDeductedByCoupons?: double(name='RemainingAmortizationDeductedByCoupons', example='0'),
        remainingAmortizationDeductedByPrepaidCard?: double(name='RemainingAmortizationDeductedByPrepaidCard', example='0'),
        remainingAmortizationExpenditureAmount?: double(name='RemainingAmortizationExpenditureAmount', example='0'),
        remainingAmortizationInvoiceDiscount?: double(name='RemainingAmortizationInvoiceDiscount', example='0'),
        remainingAmortizationPretaxAmount?: double(name='RemainingAmortizationPretaxAmount', example='0'),
        remainingAmortizationPretaxGrossAmount?: double(name='RemainingAmortizationPretaxGrossAmount', example='0'),
        remainingAmortizationRoundDownDiscount?: double(name='RemainingAmortizationRoundDownDiscount', example='0'),
        roundDownDiscount?: double(name='RoundDownDiscount', example='0'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='100'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeProductAmortizedCostByConsumePeriodResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeProductAmortizedCostByConsumePeriodResponseBody(name='body'),
}

async function describeProductAmortizedCostByConsumePeriod(request: DescribeProductAmortizedCostByConsumePeriodRequest): DescribeProductAmortizedCostByConsumePeriodResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeProductAmortizedCostByConsumePeriod', 'POST', '/', 'json', true, 'form', request);
}

model DescribeResourceCoverageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query coverage details. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='200', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results. You do not need to set this parameter if you query coverage details within a specific time range for the first time. The response returns a token that you can use to query coverage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more coverage details can be queried.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9', position='Query'),
  periodType: string(name='PeriodType', description='The time granularity at which coverage details are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR', position='Query'),
  resourceType: string(name='ResourceType', description='The type of deduction plans whose coverage details are queried. Valid values: RI and SCU.', example='RI', position='Query'),
  startPeriod: string(name='StartPeriod', description='The beginning of the time range to query.

The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00', position='Query'),
}

model DescribeResourceCoverageDetailResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    items?: [ 
      {
        capacityUnit?: string(name='CapacityUnit', description='The unit that is used to measure the resources deducted from deduction plans.'),
        commodityCode?: string(name='CommodityCode', description='The code of the service.', example='ecs'),
        commodityName?: string(name='CommodityName', description='The name and billing method of the service.'),
        coveragePercentage?: float(name='CoveragePercentage', description='The coverage rate of a deduction plan.', example='1'),
        currency?: string(name='Currency', description='The currency in which deduction plans were priced.', example='CNY'),
        deductQuantity?: float(name='DeductQuantity', description='The amount of the resources deducted from a deduction plan.', example='1'),
        endTime?: string(name='EndTime', description='The end of the time range in which the coverage details were queried.', example='2021-04-01 01:00:00'),
        instanceId?: string(name='InstanceId', description='The ID of a pay-as-you-go instance.', example='i-bp1d9x623987rlj0dx4xx'),
        instanceSpec?: string(name='InstanceSpec', description='The specifications of a deduction plan.', example='ecs.t5-lc2m1.nano'),
        paymentAmount?: float(name='PaymentAmount', description='The amount of the bill.', example='0'),
        productCode?: string(name='ProductCode', description='The code of the service.', example='ecs'),
        productName?: string(name='ProductName', description='The name of the service.'),
        region?: string(name='Region', description='The region.'),
        regionNo?: string(name='RegionNo', description='The code of the region.', example='cn-hangzhou-dg-a01'),
        startTime?: string(name='StartTime', description='The beginning of the time range in which the coverage details were queried.', example='2021-04-01 00:00:00'),
        totalQuantity?: float(name='TotalQuantity', description='The total amount of resources consumed.', example='1'),
        userId?: string(name='UserId', description='The ID of the account.', example='123745698925000'),
        userName?: string(name='UserName', description='The username of the account.', example='test13@test.aliyun.com'),
        zone?: string(name='Zone', description='The code of the zone.', example='cn-hangzhou-i'),
        zoneName?: string(name='ZoneName', description='The zone.'),
      }
    ](name='Items', description='The data entries.'),
    maxResults?: int32(name='MaxResults', description='The number of entries returned on the current page.', example='200'),
    nextToken?: string(name='NextToken', description='The token of the next page.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10000'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeResourceCoverageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceCoverageDetailResponseBody(name='body'),
}

/**
  * 1\\. The queried coverage details are the same as those displayed in the table on the Coverage tab of the Manage Reserved Instances page in the Billing Management console.
  * 2\\. You can call this operation to query the coverage details of RIs or SCUs.
  * 3\\. You can call this operation to query coverage details at an hourly, daily, or monthly granularity.
  *
 */
async function describeResourceCoverageDetail(request: DescribeResourceCoverageDetailRequest): DescribeResourceCoverageDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceCoverageDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceCoverageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query total coverage data. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00', position='Query'),
  periodType: string(name='PeriodType', description='The time granularity at which total coverage data is queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR', position='Query'),
  resourceType: string(name='ResourceType', description='The type of deduction plans whose total coverage data is queried. Valid values: RI and SCU.', example='RI', position='Query'),
  startPeriod: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00', position='Query'),
}

model DescribeResourceCoverageTotalResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    periodCoverage?: [ 
      {
        coveragePercentage?: float(name='CoveragePercentage', description='The coverage rate of deduction plans within the specified period.', example='0.1'),
        period?: string(name='Period', description='The period.

The value is in the format of yyyyMMddHH.', example='2020110100'),
      }
    ](name='PeriodCoverage', description='The information about the coverage rate of deduction plans within a period.'),
    totalCoverage?: {
      capacityUnit?: string(name='CapacityUnit', description='The unit that is used to measure the resources deducted from deduction plans.'),
      coveragePercentage?: float(name='CoveragePercentage', description='The total coverage rate of deduction plans.', example='1'),
      deductQuantity?: float(name='DeductQuantity', description='The total amount of the resources deducted from deduction plans.', example='1'),
      totalQuantity?: float(name='TotalQuantity', description='The total amount of resources consumed.', example='1'),
    }(name='TotalCoverage', description='The information about the total coverage data of deduction plans.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeResourceCoverageTotalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceCoverageTotalResponseBody(name='body'),
}

/**
  * The queried total coverage data is the same as the aggregated data displayed on the Coverage tab of the Manage Reserved Instances page in the Billing Management console.
  * You can call this operation to query the total coverage data of RIs or SCUs.
  *
 */
async function describeResourceCoverageTotal(request: DescribeResourceCoverageTotalRequest): DescribeResourceCoverageTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceCoverageTotal', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourcePackageProductRequest {
  productCode?: string(name='ProductCode', example='ossbag', position='Query'),
}

model DescribeResourcePackageProductResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    resourcePackages?: {
      resourcePackage?: [ 
      {
        name?: string(name='Name'),
        packageTypes?: {
          packageType?: [ 
          {
            code?: string(name='Code', example='FPT_ossbag_deadlineAcc_CdnOut_common_sz'),
            name?: string(name='Name'),
            properties?: {
              property?: [ 
              {
                name?: string(name='Name', example='region'),
                value?: string(name='Value', example='cn-shenzhen'),
              }
            ](name='Property')
            }(name='Properties'),
            specifications?: {
              specification?: [ 
              {
                availableDurations?: {
                  availableDuration?: [ 
                  {
                    name?: string(name='Name', example='6 Month'),
                    unit?: string(name='Unit', example='Month'),
                    value?: int32(name='Value', example='6'),
                  }
                ](name='AvailableDuration')
                }(name='AvailableDurations'),
                name?: string(name='Name', example='1TB'),
                value?: string(name='Value', example='1024'),
              }
            ](name='Specification')
            }(name='Specifications'),
          }
        ](name='PackageType')
        }(name='PackageTypes'),
        productCode?: string(name='ProductCode', example='ossbag'),
        productType?: string(name='ProductType', example='ossbag'),
      }
    ](name='ResourcePackage')
    }(name='ResourcePackages'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  orderId?: long(name='OrderId', example='72353765387'),
  requestId?: string(name='RequestId', example='BBEF51A3-E933-4F40-A534-C673CBDB9C80'),
  success?: boolean(name='Success', example='true'),
}

model DescribeResourcePackageProductResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourcePackageProductResponseBody(name='body'),
}

async function describeResourcePackageProduct(request: DescribeResourcePackageProductRequest): DescribeResourcePackageProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourcePackageProduct', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceUsageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', example='123745698925000', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='200', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results. You do not need to set this parameter if you query usage details within a specific time range for the first time. The response returns a token that you can use to query usage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more usage details can be queried.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9', position='Query'),
  periodType: string(name='PeriodType', description='The time granularity at which usage details are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR', position='Query'),
  resourceType: string(name='ResourceType', description='The type of deduction plans whose usage details are queried. Valid values: RI and SCU.', example='RI', position='Query'),
  startPeriod: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00', position='Query'),
}

model DescribeResourceUsageDetailResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    items?: [ 
      {
        capacityUnit?: string(name='CapacityUnit', description='The unit that is used to measure the resources deducted from deduction plans.'),
        currency?: string(name='Currency', description='The currency in which deduction plans were priced.', example='CNY'),
        deductQuantity?: float(name='DeductQuantity', description='The amount of the resources deducted from deduction plans.', example='1'),
        endTime?: string(name='EndTime', description='The end of the time range in which the usage details were queried.', example='2021-04-01 01:00:00'),
        imageType?: string(name='ImageType', description='The operating system.', example='linux'),
        instanceSpec?: string(name='InstanceSpec', description='The specifications of a deduction plan.', example='ecs.t5-lc2m1.nano'),
        postpaidCost?: string(name='PostpaidCost', description='The equivalent of pay-as-you-go costs.', example='0.06'),
        potentialSavedCost?: string(name='PotentialSavedCost', description='The potential net savings.', example='0.13'),
        quantity?: long(name='Quantity', description='The number of deduction plans.', example='2'),
        region?: string(name='Region', description='The region.'),
        regionNo?: string(name='RegionNo', description='The code of the region.', example='cn-hangzhou-dg-a01'),
        reservationCost?: string(name='ReservationCost', description='The fee of purchased deduction plans.', example='0'),
        resourceInstanceId?: string(name='ResourceInstanceId', description='The ID of a deduction plan.', example='ecsri-bp147nnfz21225k9mpix00'),
        savedCost?: string(name='SavedCost', description='The net savings.', example='0.06'),
        startTime?: string(name='StartTime', description='The beginning of the time range in which the usage details were queried.', example='2021-04-01 00:00:00'),
        status?: string(name='Status', description='The status of the deduction plan.', example='Valid'),
        statusName?: string(name='StatusName', description='The name of the state.'),
        totalQuantity?: float(name='TotalQuantity', description='The total capacity of deduction plans.', example='2'),
        usagePercentage?: float(name='UsagePercentage', description='The usage of deduction plans.', example='0.5'),
        userId?: string(name='UserId', description='The ID of the account.', example='123745698925000'),
        userName?: string(name='UserName', description='The username of the account.', example='test@aliyun.com'),
        zone?: string(name='Zone', description='The code of the zone.', example='cn-hangzhou-i'),
        zoneName?: string(name='ZoneName', description='The zone.'),
      }
    ](name='Items', description='The data entries.'),
    maxResults?: int32(name='MaxResults', description='The number of entries returned on the current page.', example='200'),
    nextToken?: string(name='NextToken', description='The token of the next page.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10000'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeResourceUsageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceUsageDetailResponseBody(name='body'),
}

async function describeResourceUsageDetail(request: DescribeResourceUsageDetailRequest): DescribeResourceUsageDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceUsageDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceUsageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', example='123745698925000', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', example='2021-01-02 00:00:00', position='Query'),
  periodType: string(name='PeriodType', example='HOUR', position='Query'),
  resourceType: string(name='ResourceType', example='RI', position='Query'),
  startPeriod: string(name='StartPeriod', example='2021-01-01 00:00:00', position='Query'),
}

model DescribeResourceUsageTotalResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    periodCoverage?: [ 
      {
        period?: string(name='Period', description='The period.', example='2021071500'),
        usagePercentage?: float(name='UsagePercentage', description='The usage of deduction plans within the specified period.', example='0.1'),
      }
    ](name='PeriodCoverage', description='The information about the usage of deduction plans within a period.'),
    totalUsage?: {
      postpaidCost?: float(name='PostpaidCost', description='The total costs of pay-as-you-go instances.', example='200'),
      potentialSavedCost?: float(name='PotentialSavedCost', description='The total potential savings.', example='100'),
      reservationCost?: float(name='ReservationCost', description='The fee of purchased deduction plans.', example='10'),
      savedCost?: float(name='SavedCost', description='The total savings.', example='100'),
      usagePercentage?: float(name='UsagePercentage', description='The total usage of deduction plans.', example='1'),
    }(name='TotalUsage', description='The information about the total usage data of deduction plans.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='364C7C81-5E5E-51A0-B738-1969D2671B05'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='True'),
}

model DescribeResourceUsageTotalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceUsageTotalResponseBody(name='body'),
}

async function describeResourceUsageTotal(request: DescribeResourceUsageTotalRequest): DescribeResourceUsageTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceUsageTotal', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSavingsPlansCoverageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query coverage details. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-08-09 00:00:00', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='300', position='Query'),
  periodType: string(name='PeriodType', description='The time granularity at which coverage details are queried. Valid values: MONTH, DAY, and HOUR.', example='DAY', position='Query'),
  startPeriod: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-07-15 13:40:45', position='Query'),
  token?: string(name='Token', description='The token that is used to retrieve the next page of results. You do not need to set this parameter if you query coverage details within a specific time range for the first time. The response returns a token that you can use to query coverage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more coverage details can be queried.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9', position='Query'),
}

model DescribeSavingsPlansCoverageDetailResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    items?: [ 
      {
        coveragePercentage?: float(name='CoveragePercentage', description='The coverage.', example='0.9'),
        currency?: string(name='Currency', description='The currency.', example='CNY'),
        deductAmount?: float(name='DeductAmount', description='The deducted amount.', example='100'),
        endPeriod?: string(name='EndPeriod', description='The end time.', example='2021-05-05 15:00:00'),
        instanceId?: string(name='InstanceId', description='The ID of the instance.', example='spn-a1fhs54c243hP22'),
        instanceSpec?: string(name='InstanceSpec', description='The specifications.', example='7th_generation_X86_group'),
        postpaidCost?: float(name='PostpaidCost', description='The pay-as-you-go cost.', example='200'),
        region?: string(name='Region', description='The region.'),
        startPeriod?: string(name='StartPeriod', description='The start time.', example='2021-05-05 14:00:00'),
        totalAmount?: float(name='TotalAmount', description='The total expenditure.', example='100'),
        userId?: long(name='UserId', description='The ID of the account.', example='2831685687844416'),
        userName?: string(name='UserName', description='The username of the account.', example='tester1@test.aliyun.com'),
      }
    ](name='Items', description='The data entries.'),
    nextToken?: string(name='NextToken', description='The token of the next page.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
    totalCount?: int32(name='TotalCount', description='The total number of entries.', example='400'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeSavingsPlansCoverageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSavingsPlansCoverageDetailResponseBody(name='body'),
}

async function describeSavingsPlansCoverageDetail(request: DescribeSavingsPlansCoverageDetailRequest): DescribeSavingsPlansCoverageDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSavingsPlansCoverageDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSavingsPlansCoverageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query coverage summary. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-07-20 00:00:00', position='Query'),
  periodType: string(name='PeriodType', description='The time granularity at which coverage summary are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR', position='Query'),
  startPeriod: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-07-15 00:00:00', position='Query'),
}

model DescribeSavingsPlansCoverageTotalResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    periodCoverage?: [ 
      {
        percentage?: float(name='Percentage', description='The coverage.', example='1'),
        period?: string(name='Period', description='The period.

The value is in the format of yyyyMMddHH.', example='2021071500'),
      }
    ](name='PeriodCoverage', description='The coverage in different periods.'),
    totalCoverage?: {
      coveragePercentage?: float(name='CoveragePercentage', description='The total coverage.', example='1'),
      deductAmount?: float(name='DeductAmount', description='The total deducted amount.', example='100'),
    }(name='TotalCoverage', description='The coverage summary.'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeSavingsPlansCoverageTotalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSavingsPlansCoverageTotalResponseBody(name='body'),
}

async function describeSavingsPlansCoverageTotal(request: DescribeSavingsPlansCoverageTotalRequest): DescribeSavingsPlansCoverageTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSavingsPlansCoverageTotal', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSavingsPlansUsageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query usage details. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='300', position='Query'),
  periodType: string(name='PeriodType', description='The time granularity at which usage details are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR', position='Query'),
  startPeriod: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00', position='Query'),
  token?: string(name='Token', description='The token that is used to retrieve the next page of results. You do not need to set this parameter if you query usage details within a specific time range for the first time. The response returns a token that you can use to query usage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more coverage details can be queried.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9', position='Query'),
}

model DescribeSavingsPlansUsageDetailResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    items?: [ 
      {
        currency?: string(name='Currency', description='The currency.', example='CNY'),
        deductValue?: float(name='DeductValue', description='The used amount of the savings plan.', example='3.94'),
        endPeriod?: string(name='EndPeriod', description='The end time.', example='2021-08-09 00:00:00'),
        instanceId?: string(name='InstanceId', description='The ID of the instance.', example='spn-a1fhs54c243hP22'),
        poolValue?: float(name='PoolValue', description='The total amount of the savings plan.', example='29.84'),
        postpaidCost?: float(name='PostpaidCost', description='The pay-as-you-go cost.', example='4.2'),
        savedCost?: float(name='SavedCost', description='The amount that is saved.', example='0.08'),
        startPeriod?: string(name='StartPeriod', description='The start time.', example='2021-08-01 00:00:00'),
        status?: string(name='Status', description='The status of the instance.

A value of -1 indicates that the payment is overdue. A value of 1 indicates that the instance is active.', example='-1'),
        type?: string(name='Type', description='The type of the savings plan. Valid values: universal and ECS compute.'),
        usagePercentage?: float(name='UsagePercentage', description='The usage.', example='0.9'),
        userId?: long(name='UserId', description='The ID of the account.', example='123745698925000'),
        userName?: string(name='UserName', description='The username of the account.', example='test13@test.aliyun.com'),
      }
    ](name='Items', description='The data entries.'),
    nextToken?: string(name='NextToken', description='The token of the next page.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2ldhsSI6MTB9'),
    totalCount?: int32(name='TotalCount', description='The total number of entries.', example='1000'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeSavingsPlansUsageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSavingsPlansUsageDetailResponseBody(name='body'),
}

async function describeSavingsPlansUsageDetail(request: DescribeSavingsPlansUsageDetailRequest): DescribeSavingsPlansUsageDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSavingsPlansUsageDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSavingsPlansUsageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query usage summary. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00', position='Query'),
  periodType: string(name='PeriodType', description='The time granularity at which usage summary are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR', position='Query'),
  startPeriod: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00', position='Query'),
}

model DescribeSavingsPlansUsageTotalResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    periodCoverage?: [ 
      {
        percentage?: float(name='Percentage', description='The usage.', example='1'),
        period?: string(name='Period', description='The period.

The value is in the format of yyyyMMddHH.', example='2021041500'),
      }
    ](name='PeriodCoverage', description='The usage in different periods.'),
    totalUsage?: {
      poolValue?: float(name='PoolValue', description='The total amount of the savings plan.', example='100'),
      postpaidCost?: float(name='PostpaidCost', description='The pay-as-you-go cost.', example='200'),
      savedCost?: float(name='SavedCost', description='The amount that is saved.', example='100'),
      usagePercentage?: float(name='UsagePercentage', description='The total usage.', example='1'),
    }(name='TotalUsage', description='The usage summary.'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeSavingsPlansUsageTotalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSavingsPlansUsageTotalResponseBody(name='body'),
}

async function describeSavingsPlansUsageTotal(request: DescribeSavingsPlansUsageTotalRequest): DescribeSavingsPlansUsageTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSavingsPlansUsageTotal', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSplitItemBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='123', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', example='2020-03', position='Query'),
  billingDate?: string(name='BillingDate', example='2020-03-02', position='Query'),
  granularity?: string(name='Granularity', example='Monthly', position='Query'),
  instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productCode?: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  splitItemID?: string(name='SplitItemID', example='i-kjhdskjgshfdlkjfdh', position='Query'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo', position='Query'),
  tagFilter?: [ 
    {
      tagKey?: string(name='TagKey', example='TestKey'),
      tagValues?: [ string ](name='TagValues', example='TestValue'),
    }
  ](name='TagFilter', position='Query'),
}

model DescribeSplitItemBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185xxxx3489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-03'),
    items?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        billAccountID?: string(name='BillAccountID', example='185xxxx3489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billingDate?: string(name='BillingDate', example='2020-01-20'),
        billingItem?: string(name='BillingItem'),
        billingItemCode?: string(name='BillingItemCode', example='disk'),
        billingType?: string(name='BillingType'),
        bizType?: string(name='BizType', example='trusteeship'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage', example='0'),
        instanceConfig?: string(name='InstanceConfig', example='CPU:12'),
        instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh'),
        instanceSpec?: string(name='InstanceSpec', example='ecs.sn1ne.3xlarge'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        item?: string(name='Item', example='PayAsYouGoBill'),
        itemName?: string(name='ItemName', example='iZ28bycvyb4Z'),
        listPrice?: string(name='ListPrice', example='0.12'),
        listPriceUnit?: string(name='ListPriceUnit'),
        nickName?: string(name='NickName', example='nick'),
        outstandingAmount?: float(name='OutstandingAmount', example='0.1'),
        ownerID?: string(name='OwnerID', example='169***013'),
        paymentAmount?: float(name='PaymentAmount', example='0'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        region?: string(name='Region'),
        resourceGroup?: string(name='ResourceGroup'),
        servicePeriod?: string(name='ServicePeriod', example='20'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        splitAccountID?: string(name='SplitAccountID', example='12**122'),
        splitAccountName?: string(name='SplitAccountName', example='test**1122'),
        splitBillingCycle?: string(name='SplitBillingCycle', example='2021-06'),
        splitBillingDate?: string(name='SplitBillingDate', example='2021-06-01'),
        splitCommodityCode?: string(name='SplitCommodityCode', example='rds'),
        splitItemID?: string(name='SplitItemID', example='i-28bycvyb4'),
        splitItemName?: string(name='SplitItemName', example='iZ28bycvyb4Z'),
        splitProductDetail?: string(name='SplitProductDetail'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='key:testKey value:testValue; key:testKey1 value:testValues1'),
        usage?: string(name='Usage', example='100'),
        usageUnit?: string(name='UsageUnit', example='GB'),
        zone?: string(name='Zone'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUQARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeSplitItemBillResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSplitItemBillResponseBody(name='body'),
}

async function describeSplitItemBill(request: DescribeSplitItemBillRequest): DescribeSplitItemBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSplitItemBill', 'POST', '/', 'json', false, 'json', request);
}

model EnableBillGenerationRequest {
  ownerId: long(name='OwnerId', position='Query'),
  productCode: string(name='ProductCode', example='ess', position='Query'),
}

model EnableBillGenerationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    boolean?: boolean(name='Boolean'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='5F2648ED-170B-5882-BFF4-98BE522A60F2'),
  success?: boolean(name='Success', example='true'),
}

model EnableBillGenerationResponse = {
  headers: map[string]string(name='headers'),
  body: EnableBillGenerationResponseBody(name='body'),
}

async function enableBillGeneration(request: EnableBillGenerationRequest): EnableBillGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableBillGeneration', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountRelationRequest {
  relationId?: long(name='RelationId', description='relationId', position='Query'),
  requestId?: string(name='RequestId', description='requestId', example='requestId', position='Query'),
}

model GetAccountRelationResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: {
    childUserId?: long(name='ChildUserId'),
    endTime?: long(name='EndTime', example='2021-12-01'),
    gmtModified?: long(name='GmtModified', example='2021-12-01'),
    id?: long(name='Id', description='id'),
    parentUserId?: long(name='ParentUserId', description='parentUserId'),
    startTime?: long(name='StartTime', example='2021-11-01'),
    status?: string(name='Status', example='RELATED'),
    type?: string(name='Type', description='type', example='enterprise_group'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId', example='RequestId'),
  success?: boolean(name='Success', description='success', example='true'),
}

model GetAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountRelationResponseBody(name='body'),
}

async function getAccountRelation(request: GetAccountRelationRequest): GetAccountRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountRelation', 'GET', '/', 'json', false, 'json', request);
}

model GetCustomerAccountInfoRequest {
  ownerId: long(name='OwnerId', position='Query'),
}

model GetCustomerAccountInfoResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountType?: string(name='AccountType', example='1'),
    creditLimitStatus?: string(name='CreditLimitStatus', example='Freeze'),
    hostingStatus?: string(name='HostingStatus', example='FREEZE'),
    isCertified?: boolean(name='IsCertified', example='true'),
    loginEmail?: string(name='LoginEmail', example='xxxx@aliyun.com'),
    mpk?: long(name='Mpk', example='1051360339779133'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='94017C56-1725-5DD9-AB41-B3BAE791D600'),
  success?: boolean(name='Success', example='true'),
}

model GetCustomerAccountInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomerAccountInfoResponseBody(name='body'),
}

async function getCustomerAccountInfo(request: GetCustomerAccountInfoRequest): GetCustomerAccountInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomerAccountInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetCustomerListRequest {
}

model GetCustomerListResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    uidList?: [ string ](name='UidList'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model GetCustomerListResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomerListResponseBody(name='body'),
}

async function getCustomerList(request: GetCustomerListRequest): GetCustomerListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomerList', 'POST', '/', 'json', false, 'json', request);
}

model GetOrderDetailRequest {
  orderId: string(name='OrderId', example='32453453', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model GetOrderDetailResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostName?: string(name='HostName', example='test'),
    orderList?: {
      order?: [ 
      {
        afterTaxAmount?: string(name='AfterTaxAmount', example='0'),
        commodityCode?: string(name='CommodityCode'),
        config?: string(name='Config', example='DBInstanceClass:[DBInstanceClass:rds.mysql.s1.small;EngineVersion:8.0;Region:cn-qingdao;]DBFlowType:[Region:cn-qingdao;]'),
        createTime?: string(name='CreateTime', example='2017-06-08T09:41:30Z'),
        currency?: string(name='Currency', example='CNY'),
        instanceIDs?: string(name='InstanceIDs', example='["rm-bp1a2vsr018313t6o"]'),
        operator?: string(name='Operator', example='23424243432'),
        orderId?: string(name='OrderId', example='3453425324'),
        orderSubType?: string(name='OrderSubType'),
        orderType?: string(name='OrderType', example='New'),
        originalConfig?: string(name='OriginalConfig', example='DBInstanceClass:[DBInstanceClass:rds.mysql.s1.small;EngineVersion:8.0;Region:cn-qingdao;]DBFlowType:[Region:cn-qingdao;]'),
        paymentCurrency?: string(name='PaymentCurrency', example='CNY'),
        paymentStatus?: string(name='PaymentStatus', example='Paid'),
        paymentTime?: string(name='PaymentTime', example='2017-06-08T09:41:30Z'),
        pretaxAmount?: string(name='PretaxAmount', example='0'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productType?: string(name='ProductType', example='rds'),
        quantity?: string(name='Quantity', example='1'),
        region?: string(name='Region', example='cn-hangzhou'),
        relatedOrderId?: string(name='RelatedOrderId', example='4353453534543'),
        subOrderId?: string(name='SubOrderId', example='234343'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tax?: string(name='Tax', example='1'),
        usageEndTime?: string(name='UsageEndTime', example='2117-06-08T16:00:00Z'),
        usageStartTime?: string(name='UsageStartTime', example='2017-06-08T16:00:00Z'),
      }
    ](name='Order')
    }(name='OrderList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
  success?: boolean(name='Success', example='true'),
}

model GetOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrderDetailResponseBody(name='body'),
}

async function getOrderDetail(request: GetOrderDetailRequest): GetOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOrderDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetPayAsYouGoPriceRequest {
  moduleList: [ 
    {
      config: string(name='Config', example='InstanceType:ecs.g5.xlarge,IoOptimized:IoOptimized,ImageOs:linux'),
      moduleCode: string(name='ModuleCode', example='InstanceType'),
      priceType: string(name='PriceType', example='Hour'),
    }
  ](name='ModuleList', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productCode: string(name='ProductCode', example='ecs', position='Query'),
  productType?: string(name='ProductType', example='ecs', position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
  subscriptionType: string(name='SubscriptionType', example='PayAsYouGo', position='Query'),
}

model GetPayAsYouGoPriceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currency?: string(name='Currency', example='CNY'),
    moduleDetails?: {
      moduleDetail?: [ 
      {
        costAfterDiscount?: float(name='CostAfterDiscount', example='100'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='20'),
        moduleCode?: string(name='ModuleCode', example='InstanceType'),
        originalCost?: float(name='OriginalCost', example='1.77'),
        unitPrice?: float(name='UnitPrice', example='0'),
      }
    ](name='ModuleDetail')
    }(name='ModuleDetails'),
    promotionDetails?: {
      promotionDetail?: [ 
      {
        promotionDesc?: string(name='PromotionDesc'),
        promotionId?: long(name='PromotionId', example='10200210'),
        promotionName?: string(name='PromotionName'),
      }
    ](name='PromotionDetail')
    }(name='PromotionDetails'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='1537A007-72D7-4165-8A26-8694A38E219A'),
  success?: boolean(name='Success', example='true'),
}

model GetPayAsYouGoPriceResponse = {
  headers: map[string]string(name='headers'),
  body: GetPayAsYouGoPriceResponseBody(name='body'),
}

async function getPayAsYouGoPrice(request: GetPayAsYouGoPriceRequest): GetPayAsYouGoPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPayAsYouGoPrice', 'POST', '/', 'json', false, 'json', request);
}

model GetResourcePackagePriceRequest {
  duration?: int32(name='Duration', example='6', position='Query'),
  effectiveDate?: string(name='EffectiveDate', example='2020-02-10T12:00:00Z', position='Query'),
  instanceId?: string(name='InstanceId', example='OSSBAG-cn-0xl0002', position='Query'),
  orderType?: string(name='OrderType', example='BUY', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packageType?: string(name='PackageType', example='FPT_ossbag_periodMonthlyAcc_NetworkOut_finance_common', position='Query'),
  pricingCycle?: string(name='PricingCycle', example='Month', position='Query'),
  productCode?: string(name='ProductCode', example='ossbag', position='Query'),
  specification?: string(name='Specification', example='500', position='Query'),
}

model GetResourcePackagePriceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currency?: string(name='Currency', example='CNY'),
    discountPrice?: float(name='DiscountPrice', example='215040'),
    originalPrice?: float(name='OriginalPrice', example='1290240'),
    promotions?: {
      promotion?: [ 
      {
        id?: long(name='Id', example='1000680914'),
        name?: string(name='Name'),
      }
    ](name='Promotion')
    }(name='Promotions'),
    tradePrice?: float(name='TradePrice', example='1075200'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='BBEF51A3-E933-4F40-A534-C673CBDB9C80'),
  success?: boolean(name='Success', example='true'),
}

model GetResourcePackagePriceResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourcePackagePriceResponseBody(name='body'),
}

async function getResourcePackagePrice(request: GetResourcePackagePriceRequest): GetResourcePackagePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourcePackagePrice', 'POST', '/', 'json', false, 'json', request);
}

model GetSubscriptionPriceRequest {
  instanceId?: string(name='InstanceId', example='i-khkjhxxxxxxxxx', position='Query'),
  moduleList: [ 
    {
      config: string(name='Config', example='PackageCode:version_1'),
      moduleCode: string(name='ModuleCode', example='PackageCode'),
      moduleStatus?: int32(name='ModuleStatus', example='1'),
      tag?: string(name='Tag', example='213213123'),
    }
  ](name='ModuleList', position='Query'),
  orderType: string(name='OrderType', example='NewOrder', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productCode: string(name='ProductCode', example='ecs', position='Query'),
  productType?: string(name='ProductType', example='ecs', position='Query'),
  quantity?: int32(name='Quantity', example='1', position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
  servicePeriodQuantity?: int32(name='ServicePeriodQuantity', example='1', position='Query'),
  servicePeriodUnit?: string(name='ServicePeriodUnit', example='Year', position='Query'),
  subscriptionType: string(name='SubscriptionType', example='Subscription', position='Query'),
}

model GetSubscriptionPriceResponseBody = {
  code?: string(name='Code', example='InvalidConfigCod'),
  data?: {
    currency?: string(name='Currency', example='CNY'),
    discountPrice?: float(name='DiscountPrice', example='100'),
    moduleDetails?: {
      moduleDetail?: [ 
      {
        costAfterDiscount?: float(name='CostAfterDiscount', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='100'),
        moduleCode?: string(name='ModuleCode', example='PackageCode'),
        originalCost?: float(name='OriginalCost', example='200'),
        unitPrice?: float(name='UnitPrice', example='0'),
      }
    ](name='ModuleDetail')
    }(name='ModuleDetails'),
    originalPrice?: float(name='OriginalPrice', example='900'),
    promotionDetails?: {
      promotionDetail?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', example='test'),
        promotionId?: long(name='PromotionId', example='1021199213'),
        promotionName?: string(name='PromotionName', example='test'),
      }
    ](name='PromotionDetail')
    }(name='PromotionDetails'),
    quantity?: int32(name='Quantity', example='1'),
    tradePrice?: float(name='TradePrice', example='0'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='30E7066E-AE6F-4E59-AFE6-11386CE3AFA7'),
  success?: boolean(name='Success', example='true'),
}

model GetSubscriptionPriceResponse = {
  headers: map[string]string(name='headers'),
  body: GetSubscriptionPriceResponseBody(name='body'),
}

async function getSubscriptionPrice(request: GetSubscriptionPriceRequest): GetSubscriptionPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSubscriptionPrice', 'POST', '/', 'json', false, 'json', request);
}

model InquiryPriceRefundInstanceRequest {
  clientToken?: string(name='ClientToken', description='clientToken', example='793F021C-B589-1225-82A9-99232AEBE494', position='Query'),
  instanceId?: string(name='InstanceId', description='instanceId', example='i-bp1etb69sqxgl4*******', position='Query'),
  productCode?: string(name='ProductCode', description='productCode', example='ecs', position='Query'),
  productType?: string(name='ProductType', description='productType', example='‚Äù‚Äú', position='Query'),
}

model InquiryPriceRefundInstanceResponseBody = {
  code?: string(name='Code', description='code', example='200'),
  data?: {
    currency?: string(name='Currency', description='currency', example='CNY'),
    hostId?: string(name='HostId', description='hostId', example='cn'),
    instanceId?: string(name='InstanceId', description='instanceId', example='i-bp1etb69sqxgl4*******'),
    refundAmount?: double(name='RefundAmount', description='refundAmount', example='12.34'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='message', example='success'),
  requestId?: string(name='RequestId', description='requestId', example='UUID'),
  success?: boolean(name='Success', description='success', example='true'),
}

model InquiryPriceRefundInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: InquiryPriceRefundInstanceResponseBody(name='body'),
}

async function inquiryPriceRefundInstance(request: InquiryPriceRefundInstanceRequest): InquiryPriceRefundInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InquiryPriceRefundInstance', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountRelationRequest {
  childNick?: string(name='ChildNick', position='Query'),
  childUserId?: long(name='ChildUserId', example='1512996702208737', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  parentUserId?: long(name='ParentUserId', example='1738376485192612', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  permissionCodes?: [ string ](name='PermissionCodes', example='SYNCHRONIZE_FINANCE_IDENTITY', position='Query'),
  relationId?: long(name='RelationId', example='51463', position='Query'),
  relationOperation: string(name='RelationOperation', example='ADD', position='Query'),
  relationType?: string(name='RelationType', example='enterprise_group', position='Query'),
  requestId: string(name='RequestId', example='request_id', position='Query'),
  roleCodes?: [ string ](name='RoleCodes', example='trusteeship', position='Query'),
}

model ModifyAccountRelationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    hostId?: string(name='HostId', description='HostId', example='HostId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='request_id'),
  success?: boolean(name='Success', example='true'),
}

model ModifyAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountRelationResponseBody(name='body'),
}

async function modifyAccountRelation(request: ModifyAccountRelationRequest): ModifyAccountRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountRelation', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCostUnitRequest {
  unitEntityList?: [ 
    {
      newUnitName: string(name='NewUnitName', example='newTest'),
      ownerUid: long(name='OwnerUid', example='1321312312'),
      unitId: long(name='UnitId', example='2524352'),
    }
  ](name='UnitEntityList', position='Query'),
}

model ModifyCostUnitResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: [ 
    {
      isSuccess?: boolean(name='IsSuccess', example='true'),
      ownerUid?: long(name='OwnerUid', example='823756287'),
      unitId?: long(name='UnitId', example='356349875'),
    }
  ](name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', example='true'),
}

model ModifyCostUnitResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCostUnitResponseBody(name='body'),
}

async function modifyCostUnit(request: ModifyCostUnitRequest): ModifyCostUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCostUnit', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceRequest {
  clientToken?: string(name='ClientToken', example='JAKSJFHFAKJSF', position='Query'),
  instanceId?: string(name='InstanceId', example='rm-akjhkdsjhfskjfhd', position='Query'),
  modifyType: string(name='ModifyType', example='Upgrade', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameter?: [ 
    {
      code: string(name='Code', example='test'),
      value: string(name='Value', example='test'),
    }
  ](name='Parameter', position='Query'),
  productCode: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  subscriptionType: string(name='SubscriptionType', example='Subscription', position='Query'),
}

model ModifyInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostId?: string(name='HostId', example='testId'),
    orderId?: string(name='OrderId', example='202653252354351'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model ModifyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceResponseBody(name='body'),
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstance', 'POST', '/', 'json', false, 'json', request);
}

model QueryAccountBalanceRequest {
}

model QueryAccountBalanceResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    availableAmount?: string(name='AvailableAmount', example='10000.00'),
    availableCashAmount?: string(name='AvailableCashAmount', example='10000.00'),
    creditAmount?: string(name='CreditAmount', example='0.00'),
    currency?: string(name='Currency', example='CNY'),
    mybankCreditAmount?: string(name='MybankCreditAmount', example='0.00'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='16176743-6DC7-4CB3-BB25-A13982D8DFAD'),
  success?: boolean(name='Success', example='true'),
}

model QueryAccountBalanceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAccountBalanceResponseBody(name='body'),
}

async function queryAccountBalance(request: QueryAccountBalanceRequest): QueryAccountBalanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAccountBalance', 'POST', '/', 'json', false, 'json', request);
}

model QueryAccountBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='122', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', example='2018-07', position='Query'),
  billingDate?: string(name='BillingDate', example='2021-06-01', position='Query'),
  granularity?: string(name='Granularity', example='Monthly', position='Query'),
  isGroupByProduct?: boolean(name='IsGroupByProduct', example='false', position='Query'),
  ownerID?: long(name='OwnerID', example='2353425334', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  productCode?: string(name='ProductCode', example='rds', position='Query'),
}

model QueryAccountBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='1857xxxxx489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-03'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        billAccountID?: string(name='BillAccountID', example='1857xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billingDate?: string(name='BillingDate', example='2021-03-01'),
        bizType?: string(name='BizType', example='trusteeship'),
        cashAmount?: float(name='CashAmount', example='0'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        outstandingAmount?: float(name='OutstandingAmount', example='0'),
        ownerID?: string(name='OwnerID', example='325434254'),
        ownerName?: string(name='OwnerName', example='aligzncloudtest2'),
        paymentAmount?: float(name='PaymentAmount', example='0'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productName?: string(name='ProductName', example='rds'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
      }
    ](name='Item')
    }(name='Items'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='3BFC23FE-A182-4D96-A1E4-7521B30B8E43'),
  success?: boolean(name='Success', example='true'),
}

model QueryAccountBillResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAccountBillResponseBody(name='body'),
}

async function queryAccountBill(request: QueryAccountBillRequest): QueryAccountBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAccountBill', 'POST', '/', 'json', false, 'json', request);
}

model QueryAccountTransactionDetailsRequest {
  createTimeEnd?: string(name='CreateTimeEnd', example='2022-12-20', position='Query'),
  createTimeStart?: string(name='CreateTimeStart', example='2022-01-20', position='Query'),
  maxResults?: int32(name='MaxResults', example='0', position='Query'),
  nextToken?: string(name='NextToken', example='ABEDSDS124DASA', position='Query'),
  recordID?: string(name='RecordID', example='2022120336190912', position='Query'),
  transactionChannel?: string(name='TransactionChannel', example='ALIPAY', position='Query'),
  transactionChannelSN?: string(name='TransactionChannelSN', example='2022112122001470591458665933', position='Query'),
  transactionNumber?: string(name='TransactionNumber', example='410874027490089', position='Query'),
  transactionType?: string(name='TransactionType', example='CHARGE', position='Query'),
}

model QueryAccountTransactionDetailsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountName?: string(name='AccountName', example='yidi'),
    accountTransactionsList?: {
      accountTransactionsList?: [ 
      {
        amount?: string(name='Amount', example='1.00'),
        balance?: string(name='Balance', example='0'),
        billingCycle?: string(name='BillingCycle', example='2022-10'),
        fundType?: string(name='FundType', example='Cash'),
        recordID?: string(name='RecordID', example='2022120336190912'),
        remarks?: string(name='Remarks'),
        transactionAccount?: string(name='TransactionAccount', example='fortune_test@xxx.com'),
        transactionChannel?: string(name='TransactionChannel', example='ALIPAY'),
        transactionChannelSN?: string(name='TransactionChannelSN', example='123232434343532'),
        transactionFlow?: string(name='TransactionFlow', example='Income'),
        transactionNumber?: string(name='TransactionNumber', example='43342334'),
        transactionTime?: string(name='TransactionTime', example='2022-10-01'),
        transactionType?: string(name='TransactionType', example='Consumption'),
      }
    ](name='AccountTransactionsList')
    }(name='AccountTransactionsList'),
    maxResults?: int32(name='MaxResults', example='0'),
    nextToken?: string(name='NextToken', example='ASHDADS'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='asadadad-edafafafaasd'),
  success?: boolean(name='Success', example='true'),
}

model QueryAccountTransactionDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAccountTransactionDetailsResponseBody(name='body'),
}

async function queryAccountTransactionDetails(request: QueryAccountTransactionDetailsRequest): QueryAccountTransactionDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAccountTransactionDetails', 'POST', '/', 'json', false, 'json', request);
}

model QueryAccountTransactionsRequest {
  createTimeEnd?: string(name='CreateTimeEnd', example='2020-03-06T01:55:00Z', position='Query'),
  createTimeStart?: string(name='CreateTimeStart', example='2020-03-05T01:46:09Z', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  recordID?: string(name='RecordID', example='20200302', position='Query'),
  transactionChannel?: string(name='TransactionChannel', example='AccountBalance', position='Query'),
  transactionChannelSN?: string(name='TransactionChannelSN', example='12342134', position='Query'),
  transactionFlow?: string(name='TransactionFlow', example='Income', position='Query'),
  transactionNumber?: string(name='TransactionNumber', example='133314076', position='Query'),
  transactionType?: string(name='TransactionType', example='Payment', position='Query'),
}

model QueryAccountTransactionsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    accountTransactionsList?: {
      accountTransactionsList?: [ 
      {
        amount?: string(name='Amount', example='0'),
        balance?: string(name='Balance', example='0'),
        billingCycle?: string(name='BillingCycle', example='2020-03'),
        fundType?: string(name='FundType', example='Cash'),
        recordID?: string(name='RecordID', example='2020030242'),
        remarks?: string(name='Remarks', example='NAT_GW'),
        transactionAccount?: string(name='TransactionAccount', example='213562146'),
        transactionChannel?: string(name='TransactionChannel', example='AccountBalance'),
        transactionChannelSN?: string(name='TransactionChannelSN', example='1234354325'),
        transactionFlow?: string(name='TransactionFlow', example='Expense'),
        transactionNumber?: string(name='TransactionNumber', example='43342334'),
        transactionTime?: string(name='TransactionTime', example='2020-03-10T02:03:20Z'),
        transactionType?: string(name='TransactionType', example='Consumption'),
      }
    ](name='AccountTransactionsList')
    }(name='AccountTransactionsList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='8634E02D-0942-4B1D-8295-5352FE9A1F39'),
  success?: boolean(name='Success', example='true'),
}

model QueryAccountTransactionsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAccountTransactionsResponseBody(name='body'),
}

async function queryAccountTransactions(request: QueryAccountTransactionsRequest): QueryAccountTransactionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAccountTransactions', 'POST', '/', 'json', false, 'json', request);
}

model QueryAvailableInstancesRequest {
  createTimeEnd?: string(name='CreateTimeEnd', example='2016-05-23T12:00:00Z', position='Query'),
  createTimeStart?: string(name='CreateTimeStart', example='2016-05-23T12:00:00Z', position='Query'),
  endTimeEnd?: string(name='EndTimeEnd', example='2016-05-23T12:00:00Z', position='Query'),
  endTimeStart?: string(name='EndTimeStart', example='2016-05-23T12:00:00Z', position='Query'),
  instanceIDs?: string(name='InstanceIDs', example='rm-xxxxxxxxxxxx', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  productCode?: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  region?: string(name='Region', example='cn-hangzhou', position='Query'),
  renewStatus?: string(name='RenewStatus', example='AutoRenewal', position='Query'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription', position='Query'),
}

model QueryAvailableInstancesResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    instanceList?: [ 
      {
        createTime?: string(name='CreateTime', example='2019-09-08T16:00:00Z'),
        endTime?: string(name='EndTime', example='2019-09-08T16:00:00Z'),
        expectedReleaseTime?: string(name='ExpectedReleaseTime', example='2019-09-08T16:00:00Z'),
        instanceID?: string(name='InstanceID', example='1049056'),
        ownerId?: long(name='OwnerId', example='325352345'),
        productCode?: string(name='ProductCode', example='rds'),
        productType?: string(name='ProductType', example='rds'),
        region?: string(name='Region', example='cn-hangzhou'),
        releaseTime?: string(name='ReleaseTime', example='2019-09-08T16:00:00Z'),
        renewStatus?: string(name='RenewStatus', example='ManualRenewal'),
        renewalDuration?: int32(name='RenewalDuration', example='1'),
        renewalDurationUnit?: string(name='RenewalDurationUnit', example='M'),
        seller?: string(name='Seller', example='123123123'),
        sellerId?: long(name='SellerId', example='123123123'),
        status?: string(name='Status'),
        stopTime?: string(name='StopTime', example='2019-09-08T16:00:00Z'),
        subStatus?: string(name='SubStatus'),
        subscriptionType?: string(name='SubscriptionType', example='Subscription'),
      }
    ](name='InstanceList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='11'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='C7C15585-8349-4C62-BEE4-5A391841B9BE'),
  success?: boolean(name='Success', example='true'),
}

model QueryAvailableInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAvailableInstancesResponseBody(name='body'),
}

async function queryAvailableInstances(request: QueryAvailableInstancesRequest): QueryAvailableInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAvailableInstances', 'POST', '/', 'json', false, 'json', request);
}

model QueryBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='123', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', example='2018-07', position='Query'),
  isDisplayLocalCurrency?: boolean(name='IsDisplayLocalCurrency', example='false', position='Query'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', example='true', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  productCode?: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription', position='Query'),
  type?: string(name='Type', example='SubscriptionOrder', position='Query'),
}

model QueryBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185xxxxx489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-02'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        afterTaxAmount?: float(name='AfterTaxAmount', example='0'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        item?: string(name='Item', example='SubscriptionOrder'),
        outstandingAmount?: float(name='OutstandingAmount', example='0'),
        ownerID?: string(name='OwnerID', example='3532535235'),
        paymentAmount?: float(name='PaymentAmount', example='0'),
        paymentCurrency?: string(name='PaymentCurrency', example='USD'),
        paymentTime?: string(name='PaymentTime', example='2020-03-11 08:00:00'),
        paymentTransactionID?: string(name='PaymentTransactionID', example='2O3AADJFEAF2PDKSFAMFCB11918'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='100'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        recordID?: string(name='RecordID', example='2020xxxx5912'),
        roundDownDiscount?: string(name='RoundDownDiscount', example='0'),
        status?: string(name='Status', example='PayFinish'),
        subOrderId?: string(name='SubOrderId', example='325345254353'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tax?: float(name='Tax', example='0'),
        usageEndTime?: string(name='UsageEndTime', example='2020-03-11 08:00:00'),
        usageStartTime?: string(name='UsageStartTime', example='2020-03-11 07:00:00'),
      }
    ](name='Item')
    }(name='Items'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='1'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='AE3F4057-DFC9-4B81-8858-F620651010C9'),
  success?: boolean(name='Success', example='true'),
}

model QueryBillResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBillResponseBody(name='body'),
}

async function queryBill(request: QueryBillRequest): QueryBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBill', 'POST', '/', 'json', false, 'json', request);
}

model QueryBillOverviewRequest {
  billOwnerId?: long(name='BillOwnerId', example='1234', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', example='2018-07', position='Query'),
  productCode?: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription', position='Query'),
}

model QueryBillOverviewResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185766xxxx'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-03'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        afterTaxAmount?: float(name='AfterTaxAmount', example='0'),
        billAccountID?: string(name='BillAccountID', example='185766xxxx'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        item?: string(name='Item', example='PayAsYouGoBill'),
        outstandingAmount?: float(name='OutstandingAmount', example='0'),
        ownerID?: string(name='OwnerID', example='1222'),
        paymentAmount?: float(name='PaymentAmount', example='100'),
        paymentCurrency?: string(name='PaymentCurrency', example='USD'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='100'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='100'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail', example='NAT Gateway (Pay-As-You-Go)'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        roundDownDiscount?: string(name='RoundDownDiscount', example='0'),
        subscriptionType?: string(name='SubscriptionType', example='Subscription'),
        tax?: float(name='Tax', example='0'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='BCB1E1BC-05BF-4217-80EE-BF09A29407BA'),
  success?: boolean(name='Success', example='true'),
}

model QueryBillOverviewResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBillOverviewResponseBody(name='body'),
}

async function queryBillOverview(request: QueryBillOverviewRequest): QueryBillOverviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBillOverview', 'POST', '/', 'json', false, 'json', request);
}

model QueryBillToOSSSubscriptionRequest {
}

model QueryBillToOSSSubscriptionResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185xxxxx03489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    items?: {
      item?: [ 
      {
        bucketOwnerId?: long(name='BucketOwnerId', example='1369168081849304'),
        bucketPath?: string(name='BucketPath', example='Billing/BillingItemDetailMonthly/'),
        subscribeBucket?: string(name='SubscribeBucket', example='billingtestbucket'),
        subscribeLanguage?: string(name='SubscribeLanguage', example='zh'),
        subscribeTime?: string(name='SubscribeTime', example='2019-10-30 15:40:11'),
        subscribeType?: string(name='SubscribeType', example='BillingItemDetailForBillingPeriod'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='9EEAE43F-1E4D-4734-AE93-5049878AC103'),
  success?: boolean(name='Success', example='true'),
}

model QueryBillToOSSSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBillToOSSSubscriptionResponseBody(name='body'),
}

async function queryBillToOSSSubscription(request: QueryBillToOSSSubscriptionRequest): QueryBillToOSSSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBillToOSSSubscription', 'POST', '/', 'json', false, 'json', request);
}

model QueryCashCouponsRequest {
  effectiveOrNot?: boolean(name='EffectiveOrNot', example='true', position='Query'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd', example='2018-08-01T00:00:00Z', position='Query'),
  expiryTimeStart?: string(name='ExpiryTimeStart', example='2018-08-01T00:00:00Z', position='Query'),
}

model QueryCashCouponsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    cashCoupon?: [ 
    {
      applicableProducts?: string(name='ApplicableProducts'),
      applicableScenarios?: string(name='ApplicableScenarios'),
      balance?: string(name='Balance', example='100.00'),
      cashCouponId?: long(name='CashCouponId', example='34534253254325'),
      cashCouponNo?: string(name='CashCouponNo', example='Q-b1485def8f04a'),
      effectiveTime?: string(name='EffectiveTime', example='2018-08-02T15:15:50Z'),
      expiryTime?: string(name='ExpiryTime', example='2019-01-29T15:15:50Z'),
      grantedTime?: string(name='GrantedTime', example='2018-08-02T15:15:50Z'),
      nominalValue?: string(name='NominalValue', example='100.00'),
      status?: string(name='Status', example='Available'),
    }
  ](name='CashCoupon')
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='147B566E-DB4C-4E43-BDBB-5DB1D9D268DB'),
  success?: boolean(name='Success', example='true'),
}

model QueryCashCouponsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCashCouponsResponseBody(name='body'),
}

async function queryCashCoupons(request: QueryCashCouponsRequest): QueryCashCouponsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCashCoupons', 'POST', '/', 'json', false, 'json', request);
}

model QueryCommodityListRequest {
  productCode: string(name='ProductCode', example='ecs', position='Query'),
}

model QueryCommodityListResponseBody = {
  code?: string(name='Code', example='NotApplicable'),
  data?: {
    commodityList?: [ 
      {
        chargeType?: string(name='ChargeType', example='POSTPAY'),
        commodityCode?: string(name='CommodityCode', example='ecs'),
        commodityName?: string(name='CommodityName'),
      }
    ](name='CommodityList'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', description='Id of the request', example='CC706AAC-75A6-55B5-9AB7-7D171C6C7655'),
  success?: boolean(name='Success', example='True'),
}

model QueryCommodityListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCommodityListResponseBody(name='body'),
}

async function queryCommodityList(request: QueryCommodityListRequest): QueryCommodityListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCommodityList', 'GET', '/', 'json', false, 'json', request);
}

model QueryCostUnitRequest {
  ownerUid: long(name='OwnerUid', example='28394563429587', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  parentUnitId: long(name='ParentUnitId', example='-1', position='Query'),
}

model QueryCostUnitResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    costUnitDtoList?: [ 
      {
        ownerUid?: long(name='OwnerUid', example='2343464'),
        parentUnitId?: long(name='ParentUnitId', example='-1'),
        unitId?: long(name='UnitId', example='23534'),
        unitName?: string(name='UnitName', example='test'),
      }
    ](name='CostUnitDtoList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model QueryCostUnitResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCostUnitResponseBody(name='body'),
}

async function queryCostUnit(request: QueryCostUnitRequest): QueryCostUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCostUnit', 'POST', '/', 'json', false, 'json', request);
}

model QueryCostUnitResourceRequest {
  ownerUid: long(name='OwnerUid', example='23453245', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  unitId: long(name='UnitId', example='235325', position='Query'),
}

model QueryCostUnitResourceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    costUnit?: {
      ownerUid?: long(name='OwnerUid', example='321432'),
      parentUnitId?: long(name='ParentUnitId', example='23421'),
      unitId?: long(name='UnitId', example='123412'),
      unitName?: string(name='UnitName', example='test'),
    }(name='CostUnit'),
    costUnitStatisInfo?: {
      resourceCount?: long(name='ResourceCount', example='1'),
      resourceGroupCount?: long(name='ResourceGroupCount', example='1'),
      subUnitCount?: long(name='SubUnitCount', example='2'),
      totalResourceCount?: long(name='TotalResourceCount', example='3'),
      totalResourceGroupCount?: long(name='TotalResourceGroupCount', example='2'),
      totalUserCount?: long(name='TotalUserCount', example='2'),
      userCount?: long(name='UserCount', example='0'),
    }(name='CostUnitStatisInfo'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    resourceInstanceDtoList?: [ 
      {
        apportionCode?: string(name='ApportionCode', example='test'),
        apportionName?: string(name='ApportionName', example='test'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        commodityName?: string(name='CommodityName'),
        relatedResources?: string(name='RelatedResources', example='oss'),
        resourceGroup?: string(name='ResourceGroup'),
        resourceId?: string(name='ResourceId', example='OSSBAG-cn-v0h1s4hma018'),
        resourceNick?: string(name='ResourceNick', example='testResource'),
        resourceStatus?: string(name='ResourceStatus', example='Available'),
        resourceTag?: string(name='ResourceTag', example='testResource'),
        resourceType?: string(name='ResourceType', example='FPT_ossbag_absolute_Storage_bj'),
        resourceUserId?: long(name='ResourceUserId', example='2424242134'),
        resourceUserName?: string(name='ResourceUserName', example='test@test.aliyun.com'),
      }
    ](name='ResourceInstanceDtoList'),
    totalCount?: int32(name='TotalCount', example='12'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='04332CB7-9A57-4461-97E0-02821D044414'),
  success?: boolean(name='Success', example='true'),
}

model QueryCostUnitResourceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCostUnitResourceResponseBody(name='body'),
}

async function queryCostUnitResource(request: QueryCostUnitResourceRequest): QueryCostUnitResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCostUnitResource', 'POST', '/', 'json', false, 'json', request);
}

model QueryCustomerAddressListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model QueryCustomerAddressListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    customerInvoiceAddressList?: {
      customerInvoiceAddress?: [ 
      {
        addressee?: string(name='Addressee', example='test'),
        bizType?: string(name='BizType', example='test'),
        city?: string(name='City'),
        county?: string(name='County'),
        deliveryAddress?: string(name='DeliveryAddress'),
        id?: long(name='Id', description='ID„ÄÇ', example='311601051'),
        phone?: string(name='Phone', example='138xxxxxxxx'),
        postalCode?: string(name='PostalCode', example='000000'),
        province?: string(name='Province'),
        street?: string(name='Street'),
        userId?: long(name='UserId', example='4382956342857'),
        userNick?: string(name='UserNick', example='testNick'),
      }
    ](name='CustomerInvoiceAddress')
    }(name='CustomerInvoiceAddressList'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='BBEF51A3-E933-4F40-A534-C673CBDB9C80'),
  success?: boolean(name='Success', example='true'),
}

model QueryCustomerAddressListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCustomerAddressListResponseBody(name='body'),
}

async function queryCustomerAddressList(request: QueryCustomerAddressListRequest): QueryCustomerAddressListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCustomerAddressList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDPUtilizationDetailRequest {
  commodityCode?: string(name='CommodityCode', example='ecsRi', position='Query'),
  deductedInstanceId?: string(name='DeductedInstanceId', example='oss-123123', position='Query'),
  endTime: string(name='EndTime', example='2019-05-23 12:00:00', position='Query'),
  includeShare: boolean(name='IncludeShare', example='true', position='Query'),
  instanceId?: string(name='InstanceId', example='oss-123123', position='Query'),
  instanceSpec?: string(name='InstanceSpec', example='Instancetyp', position='Query'),
  lastToken?: string(name='LastToken', example='CAESF***zNTAw', position='Query'),
  limit?: int32(name='Limit', example='20', position='Query'),
  prodCode?: string(name='ProdCode', example='oss', position='Query'),
  startTime: string(name='StartTime', example='2019-05-23 12:00:00', position='Query'),
}

model QueryDPUtilizationDetailResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    detailList?: {
      detailList?: [ 
      {
        deductDate?: string(name='DeductDate', example='2019/5/23 12:00'),
        deductFactorTotal?: float(name='DeductFactorTotal', example='1'),
        deductHours?: float(name='DeductHours', example='24'),
        deductMeasure?: float(name='DeductMeasure', example='1'),
        deductQuantity?: float(name='DeductQuantity', example='1'),
        deductedCommodityCode?: string(name='DeductedCommodityCode', example='rds'),
        deductedInstanceId?: string(name='DeductedInstanceId', example='oss-123123'),
        deductedProductDetail?: string(name='DeductedProductDetail'),
        instanceId?: string(name='InstanceId', example='oss-123123'),
        instanceSpec?: string(name='InstanceSpec', example='rds.mysql.s3.large'),
        region?: string(name='Region', example='cn-hangzhou'),
        resCode?: string(name='ResCode', example='PutRequest'),
        shareUid?: long(name='ShareUid', example='1111111111'),
        uid?: long(name='Uid', example='1111111111'),
      }
    ](name='DetailList')
    }(name='DetailList'),
    nextToken?: string(name='NextToken', example='CAESF***zNTAw'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='DF58589C-A06C-4224-8615-7797E6474FA3'),
  success?: boolean(name='Success', example='true'),
}

model QueryDPUtilizationDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDPUtilizationDetailResponseBody(name='body'),
}

async function queryDPUtilizationDetail(request: QueryDPUtilizationDetailRequest): QueryDPUtilizationDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDPUtilizationDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryEvaluateListRequest {
  billCycle?: string(name='BillCycle', example='2020-03', position='Query'),
  bizTypeList?: [ string ](name='BizTypeList', example='ALIYUN', position='Query'),
  endAmount?: long(name='EndAmount', example='1000', position='Query'),
  endBizTime?: string(name='EndBizTime', example='2020-02-02 15:00:00', position='Query'),
  endSearchTime?: string(name='EndSearchTime', example='2020-03-02 12:00:00', position='Query'),
  outBizId?: string(name='OutBizId', example='2387432832696', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  sortType?: int32(name='SortType', example='1', position='Query'),
  startAmount?: long(name='StartAmount', example='100', position='Query'),
  startBizTime?: string(name='StartBizTime', example='2020-02-02 12:00:00', position='Query'),
  startSearchTime?: string(name='StartSearchTime', example='2020-02-02 12:00:00', position='Query'),
  type?: int32(name='Type', example='1', position='Query'),
}

model QueryEvaluateListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    evaluateList?: {
      evaluate?: [ 
      {
        billCycle?: string(name='BillCycle', example='202002'),
        billId?: long(name='BillId', example='234543254325'),
        bizTime?: string(name='BizTime', example='2018-10-10 18:05:44'),
        bizType?: string(name='BizType', example='ALIYUN'),
        canInvoiceAmount?: long(name='CanInvoiceAmount', example='123213'),
        gmtCreate?: string(name='GmtCreate', example='2018-10-10 18:05:44'),
        gmtModified?: string(name='GmtModified', example='2018-10-10 18:05:44'),
        id?: long(name='Id', example='1325321532'),
        invoicedAmount?: long(name='InvoicedAmount', example='10000'),
        itemId?: long(name='ItemId', example='23453245'),
        name?: string(name='Name'),
        offsetAcceptAmount?: long(name='OffsetAcceptAmount', example='500'),
        offsetCostAmount?: long(name='OffsetCostAmount', example='500'),
        opId?: string(name='OpId', example='12341'),
        originalAmount?: long(name='OriginalAmount', example='-10000'),
        outBizId?: string(name='OutBizId', example='124324213421'),
        presentAmount?: long(name='PresentAmount', example='-10000'),
        status?: int32(name='Status', example='1'),
        type?: int32(name='Type', example='1'),
        userId?: long(name='UserId', example='2738543'),
        userNick?: string(name='UserNick', example='test'),
      }
    ](name='Evaluate')
    }(name='EvaluateList'),
    hostId?: string(name='HostId', example='cn'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='2'),
    totalInvoiceAmount?: long(name='TotalInvoiceAmount', example='12344'),
    totalUnAppliedInvoiceAmount?: long(name='TotalUnAppliedInvoiceAmount', example='12344'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='D35FF10E-1B2E-4ABA-8401-0AE17725F50B'),
  success?: boolean(name='Success', example='true'),
}

model QueryEvaluateListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEvaluateListResponseBody(name='body'),
}

async function queryEvaluateList(request: QueryEvaluateListRequest): QueryEvaluateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEvaluateList', 'POST', '/', 'json', false, 'json', request);
}

model QueryFinancialAccountInfoRequest {
  userId: long(name='UserId', example='1990699401005016', position='Query'),
}

model QueryFinancialAccountInfoResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountType?: string(name='AccountType', example='MEMBER'),
    isFinancialAccount?: boolean(name='IsFinancialAccount', example='true'),
    memberGroupId?: long(name='MemberGroupId', example='124'),
    memberGroupName?: string(name='MemberGroupName'),
    memberNickName?: string(name='MemberNickName'),
    userName?: string(name='UserName', example='killortop3'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='97426BC2-792E-41F5-92B8-73C710DA7779'),
  success?: boolean(name='Success', example='true'),
}

model QueryFinancialAccountInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFinancialAccountInfoResponseBody(name='body'),
}

async function queryFinancialAccountInfo(request: QueryFinancialAccountInfoRequest): QueryFinancialAccountInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFinancialAccountInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryInstanceBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='122', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', example='2020-03', position='Query'),
  billingDate?: string(name='BillingDate', example='2020-03-03', position='Query'),
  granularity?: string(name='Granularity', example='MONTHLY', position='Query'),
  isBillingItem?: boolean(name='IsBillingItem', example='false', position='Query'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  productCode?: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo', position='Query'),
}

model QueryInstanceBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185xxxx3489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-03'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        billingDate?: string(name='BillingDate', example='2020-03'),
        billingItem?: string(name='BillingItem'),
        billingType?: string(name='BillingType'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage', example='NULL'),
        instanceConfig?: string(name='InstanceConfig', example='CPU:12'),
        instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh'),
        instanceSpec?: string(name='InstanceSpec', example='ecs.sn1ne.3xlarge'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        item?: string(name='Item', example='PayAsYouGoBill'),
        listPrice?: string(name='ListPrice', example='100'),
        listPriceUnit?: string(name='ListPriceUnit'),
        nickName?: string(name='NickName', example='test'),
        outstandingAmount?: float(name='OutstandingAmount', example='0'),
        ownerID?: string(name='OwnerID', example='169***013'),
        paymentAmount?: float(name='PaymentAmount', example='0'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        region?: string(name='Region'),
        resourceGroup?: string(name='ResourceGroup'),
        servicePeriod?: string(name='ServicePeriod', example='10'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='tag'),
        usage?: string(name='Usage', example='100'),
        usageUnit?: string(name='UsageUnit', example='GB'),
        zone?: string(name='Zone', example='cn-hangzhou-h'),
      }
    ](name='Item')
    }(name='Items'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='2'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model QueryInstanceBillResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInstanceBillResponseBody(name='body'),
}

async function queryInstanceBill(request: QueryInstanceBillRequest): QueryInstanceBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInstanceBill', 'POST', '/', 'json', false, 'json', request);
}

model QueryInstanceByTagRequest {
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', example='instance', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='ecs'),
      value?: string(name='Value', example='001'),
    }
  ](name='Tag', position='Query'),
}

model QueryInstanceByTagResponseBody = {
  code?: string(name='Code', example='PARAM_ERROR'),
  message?: string(name='Message', example='param is null'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCm'),
  requestId?: string(name='RequestId', example='9EC6C0B7-3397-5FAE-9915-8972CDDB1211'),
  success?: boolean(name='Success', example='true'),
  tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='spn-xxxxx'),
      resourceType?: string(name='ResourceType', example='instance'),
      tag?: [ 
        {
          key?: string(name='Key', example='tag1'),
          value?: string(name='Value', example='10'),
        }
      ](name='Tag'),
    }
  ](name='TagResource'),
}

model QueryInstanceByTagResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInstanceByTagResponseBody(name='body'),
}

async function queryInstanceByTag(request: QueryInstanceByTagRequest): QueryInstanceByTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInstanceByTag', 'POST', '/', 'json', false, 'json', request);
}

model QueryInstanceGaapCostRequest {
  billingCycle: string(name='BillingCycle', example='2020-03', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  productCode?: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo', position='Query'),
}

model QueryInstanceGaapCostResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostId?: string(name='HostId', example='1.1.1.1'),
    modules?: {
      module?: [ 
      {
        accountingUnit?: string(name='AccountingUnit'),
        billType?: string(name='BillType', example='SubscriptionOrder'),
        billingCycle?: string(name='BillingCycle', example='2020-03'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: string(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: string(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: string(name='DeductedByPrepaidCard', example='0'),
        gaapDeductedByCashCoupons?: string(name='GaapDeductedByCashCoupons', example='0'),
        gaapDeductedByCoupons?: string(name='GaapDeductedByCoupons', example='0'),
        gaapDeductedByPrepaidCard?: string(name='GaapDeductedByPrepaidCard', example='0'),
        gaapPaymentAmount?: string(name='GaapPaymentAmount', example='0'),
        gaapPretaxAmount?: string(name='GaapPretaxAmount', example='0'),
        gaapPretaxAmountLocal?: string(name='GaapPretaxAmountLocal', example='0'),
        gaapPretaxGrossAmount?: string(name='GaapPretaxGrossAmount', example='0'),
        gaapPricingDiscount?: string(name='GaapPricingDiscount', example='0'),
        instanceID?: string(name='InstanceID', example='OSSBAG-cn-0xl0xxxxxx'),
        monthGaapDeductedByCashCoupons?: string(name='MonthGaapDeductedByCashCoupons', example='0.75'),
        monthGaapDeductedByCoupons?: string(name='MonthGaapDeductedByCoupons', example='0'),
        monthGaapDeductedByPrepaidCard?: string(name='MonthGaapDeductedByPrepaidCard', example='0'),
        monthGaapPaymentAmount?: string(name='MonthGaapPaymentAmount', example='0'),
        monthGaapPretaxAmount?: string(name='MonthGaapPretaxAmount', example='0'),
        monthGaapPretaxAmountLocal?: string(name='MonthGaapPretaxAmountLocal', example='0.99'),
        monthGaapPretaxGrossAmount?: string(name='MonthGaapPretaxGrossAmount', example='0.99'),
        monthGaapPricingDiscount?: string(name='MonthGaapPricingDiscount', example='0,.25'),
        orderId?: string(name='OrderId', example='213123213123'),
        orderType?: string(name='OrderType', example='New'),
        ownerID?: string(name='OwnerID', example='123213123123'),
        payTime?: string(name='PayTime', example='2018-06-15 15:59:57'),
        payerAccount?: string(name='PayerAccount', example='23534534'),
        paymentAmount?: string(name='PaymentAmount', example='0'),
        paymentCurrency?: string(name='PaymentCurrency', example='CNY'),
        pretaxAmount?: string(name='PretaxAmount', example='0'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount', example='123'),
        pricingDiscount?: string(name='PricingDiscount', example='1'),
        productCode?: string(name='ProductCode', example='rds'),
        productType?: string(name='ProductType', example='rds'),
        region?: string(name='Region', example='cn-hangzhou'),
        resourceGroup?: string(name='ResourceGroup'),
        subOrderId?: string(name='SubOrderId', example='12434345'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='tag'),
        unallocatedDeductedByCashCoupons?: string(name='UnallocatedDeductedByCashCoupons', example='0'),
        unallocatedDeductedByCoupons?: string(name='UnallocatedDeductedByCoupons', example='0'),
        unallocatedDeductedByPrepaidCard?: string(name='UnallocatedDeductedByPrepaidCard', example='0'),
        unallocatedPaymentAmount?: string(name='UnallocatedPaymentAmount', example='0'),
        unallocatedPretaxAmount?: string(name='UnallocatedPretaxAmount', example='0'),
        unallocatedPretaxAmountLocal?: string(name='UnallocatedPretaxAmountLocal', example='0'),
        unallocatedPretaxGrossAmount?: string(name='UnallocatedPretaxGrossAmount', example='0'),
        unallocatedPricingDiscount?: string(name='UnallocatedPricingDiscount', example='0'),
        usageEndDate?: string(name='UsageEndDate', example='2019-05-01 00:00:00'),
        usageStartDate?: string(name='UsageStartDate', example='2019-04-01 00:00:00'),
      }
    ](name='Module')
    }(name='Modules'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='CCBB1BB9-22F1-4177-867B-7A75D665B488'),
  success?: boolean(name='Success', example='true'),
}

model QueryInstanceGaapCostResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInstanceGaapCostResponseBody(name='body'),
}

async function queryInstanceGaapCost(request: QueryInstanceGaapCostRequest): QueryInstanceGaapCostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInstanceGaapCost', 'POST', '/', 'json', false, 'json', request);
}

model QueryInvoicingCustomerListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model QueryInvoicingCustomerListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    customerInvoiceList?: {
      customerInvoice?: [ 
      {
        adjustType?: long(name='AdjustType', example='1'),
        bank?: string(name='Bank'),
        bankNo?: string(name='BankNo', example='389576348573296349853476'),
        customerType?: long(name='CustomerType', example='1'),
        defaultRemark?: string(name='DefaultRemark'),
        endCycle?: long(name='EndCycle', example='202003'),
        gmtCreate?: string(name='GmtCreate', example='2018-09-07 15:26:20'),
        id?: long(name='Id', example='239875502738'),
        invoiceTitle?: string(name='InvoiceTitle'),
        issueType?: long(name='IssueType', example='1'),
        operatingLicenseAddress?: string(name='OperatingLicenseAddress'),
        operatingLicensePhone?: string(name='OperatingLicensePhone', example='138xxxxxxxx'),
        registerNo?: string(name='RegisterNo', example='21343245342534'),
        startCycle?: long(name='StartCycle', example='202002'),
        status?: long(name='Status', example='2'),
        taxationLicense?: string(name='TaxationLicense', example='taxationLicense.jpg'),
        taxpayerType?: long(name='TaxpayerType', example='1'),
        titleChangeInstructions?: string(name='TitleChangeInstructions', example='instruction.doc'),
        type?: long(name='Type', example='1'),
        userId?: long(name='UserId', example='34565465675'),
        userNick?: string(name='UserNick', example='testNick'),
      }
    ](name='CustomerInvoice')
    }(name='CustomerInvoiceList'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='BBEF51A3-E933-4F40-A534-C673CBDB9C80'),
  success?: boolean(name='Success', example='true'),
}

model QueryInvoicingCustomerListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInvoicingCustomerListResponseBody(name='body'),
}

async function queryInvoicingCustomerList(request: QueryInvoicingCustomerListRequest): QueryInvoicingCustomerListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInvoicingCustomerList', 'POST', '/', 'json', false, 'json', request);
}

model QueryOrdersRequest {
  createTimeEnd?: string(name='CreateTimeEnd', example='2016-05-23T12:00:00Z', position='Query'),
  createTimeStart?: string(name='CreateTimeStart', example='2016-05-23T13:00:00Z', position='Query'),
  orderType?: string(name='OrderType', example='New', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  paymentStatus?: string(name='PaymentStatus', example='Paid', position='Query'),
  productCode?: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription', position='Query'),
}

model QueryOrdersResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostName?: string(name='HostName', example='test'),
    orderList?: {
      order?: [ 
      {
        afterTaxAmount?: string(name='AfterTaxAmount', example='66'),
        commodityCode?: string(name='CommodityCode', example='ecs'),
        createTime?: string(name='CreateTime', example='2017-06-08T09:41:30Z'),
        currency?: string(name='Currency', example='CNY'),
        orderId?: string(name='OrderId', example='34532532'),
        orderType?: string(name='OrderType', example='New'),
        paymentCurrency?: string(name='PaymentCurrency', example='CNY'),
        paymentStatus?: string(name='PaymentStatus', example='Paid'),
        paymentTime?: string(name='PaymentTime', example='2017-06-08T09:41:30Z'),
        pretaxAmount?: string(name='PretaxAmount', example='0'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productType?: string(name='ProductType', example='rds'),
        relatedOrderId?: string(name='RelatedOrderId', example='234535345345342'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tax?: string(name='Tax', example='1'),
      }
    ](name='Order')
    }(name='OrderList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='61293E7A-3406-4447-8620-EC88B0AA66AD'),
  success?: boolean(name='Success', example='true'),
}

model QueryOrdersResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOrdersResponseBody(name='body'),
}

async function queryOrders(request: QueryOrdersRequest): QueryOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrders', 'POST', '/', 'json', false, 'json', request);
}

model QueryPermissionListRequest {
  relationId: long(name='RelationId', example='51463', position='Query'),
}

model QueryPermissionListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    endTime?: string(name='EndTime', example='2021-03-06T15:12Z'),
    masterId?: long(name='MasterId', example='1990699401005016'),
    memberId?: long(name='MemberId', example='1851253838840762'),
    permissionList?: [ 
      {
        endTime?: string(name='EndTime', example='2021-03-05T15:12Z'),
        permissionCode?: string(name='PermissionCode', example='allow_synchronize_finance_identity'),
        permissionName?: string(name='PermissionName'),
        startTime?: string(name='StartTime', example='2021-03-02T15:12Z'),
      }
    ](name='PermissionList'),
    relationType?: string(name='RelationType', example='FinancialManagement'),
    setupTime?: string(name='SetupTime', example='2021-03-02T15:12Z'),
    startTime?: string(name='StartTime', example='2021-03-02T15:12Z'),
    state?: string(name='State', example='RELATED'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='F6E29451-A3CD-4705-806D-0112D08F5C49'),
  success?: boolean(name='Success', example='true'),
}

model QueryPermissionListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPermissionListResponseBody(name='body'),
}

async function queryPermissionList(request: QueryPermissionListRequest): QueryPermissionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPermissionList', 'POST', '/', 'json', false, 'json', request);
}

model QueryPrepaidCardsRequest {
  effectiveOrNot?: boolean(name='EffectiveOrNot', example='true', position='Query'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd', example='2018-08-01T00:00:00Z', position='Query'),
  expiryTimeStart?: string(name='ExpiryTimeStart', example='2018-08-01T00:00:00Z', position='Query'),
}

model QueryPrepaidCardsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    prepaidCard?: [ 
    {
      applicableProducts?: string(name='ApplicableProducts'),
      applicableScenarios?: string(name='ApplicableScenarios', example='test'),
      balance?: string(name='Balance', example='100.00'),
      effectiveTime?: string(name='EffectiveTime', example='2018-08-03T01:39:11Z'),
      expiryTime?: string(name='ExpiryTime', example='2019-08-04T01:39:11Z'),
      grantedTime?: string(name='GrantedTime', example='2018-08-03T01:39:11Z'),
      nominalValue?: string(name='NominalValue', example='100.00'),
      prepaidCardId?: long(name='PrepaidCardId', example='213432432'),
      prepaidCardNo?: string(name='PrepaidCardNo', example='Q-7edaab979fc9'),
      status?: string(name='Status', example='Available'),
    }
  ](name='PrepaidCard')
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='7EA6C02D-06D0-4213-9C3B-E67910F7D1EB'),
  success?: boolean(name='Success', example='true'),
}

model QueryPrepaidCardsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPrepaidCardsResponseBody(name='body'),
}

async function queryPrepaidCards(request: QueryPrepaidCardsRequest): QueryPrepaidCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPrepaidCards', 'POST', '/', 'json', false, 'json', request);
}

model QueryPriceEntityListRequest {
  commodityCode: string(name='CommodityCode', example='ecs', position='Query'),
}

model QueryPriceEntityListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    priceEntityInfoList?: [ 
      {
        priceEntityCode?: string(name='PriceEntityCode', example='instance_type'),
        priceEntityName?: string(name='PriceEntityName'),
        priceFactorList?: [ 
          {
            priceFactorCode?: string(name='PriceFactorCode', example='vm_region_no'),
            priceFactorName?: string(name='PriceFactorName'),
            priceFactorValueList?: [ string ](name='PriceFactorValueList'),
          }
        ](name='PriceFactorList'),
      }
    ](name='PriceEntityInfoList'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', description='Id of the request', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model QueryPriceEntityListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPriceEntityListResponseBody(name='body'),
}

async function queryPriceEntityList(request: QueryPriceEntityListRequest): QueryPriceEntityListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPriceEntityList', 'GET', '/', 'json', false, 'json', request);
}

model QueryProductListRequest {
  pageNum: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
  queryTotalCount?: boolean(name='QueryTotalCount', example='true', position='Query'),
}

model QueryProductListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    productList?: {
      product?: [ 
      {
        productCode?: string(name='ProductCode', example='cdn'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='CDN'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
      }
    ](name='Product')
    }(name='ProductList'),
    totalCount?: int32(name='TotalCount', example='449'),
  }(name='Data'),
  message?: string(name='Message', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', example='94858229-2758-4663-A7D0-99490D541F15'),
  success?: boolean(name='Success', example='true'),
}

model QueryProductListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductListResponseBody(name='body'),
}

async function queryProductList(request: QueryProductListRequest): QueryProductListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryProductList', 'POST', '/', 'json', false, 'json', request);
}

model QueryRIUtilizationDetailRequest {
  deductedInstanceId?: string(name='DeductedInstanceId', example='jsdgfsdhgsdjh', position='Query'),
  endTime: string(name='EndTime', example='2019-05-23 12:00:00', position='Query'),
  instanceSpec?: string(name='InstanceSpec', example='Instancetyp', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  RICommodityCode: string(name='RICommodityCode', example='ecsRi', position='Query'),
  RIInstanceId?: string(name='RIInstanceId', example='dsudfgdsjh', position='Query'),
  startTime: string(name='StartTime', example='2019-05-23 12:00:00', position='Query'),
}

model QueryRIUtilizationDetailResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    detailList?: {
      detailList?: [ 
      {
        deductDate?: string(name='DeductDate', example='2019-05-23 12:00:00'),
        deductFactorTotal?: float(name='DeductFactorTotal', example='1'),
        deductHours?: string(name='DeductHours', example='24'),
        deductQuantity?: float(name='DeductQuantity', example='1'),
        deductedCommodityCode?: string(name='DeductedCommodityCode', example='rds'),
        deductedInstanceId?: string(name='DeductedInstanceId', example='safdffghfgh'),
        deductedProductDetail?: string(name='DeductedProductDetail'),
        instanceSpec?: string(name='InstanceSpec', example='rds.mysql.s3.large'),
        RIInstanceId?: string(name='RIInstanceId', example='324253645'),
      }
    ](name='DetailList')
    }(name='DetailList'),
    pageNum?: long(name='PageNum', example='1'),
    pageSize?: long(name='PageSize', example='20'),
    totalCount?: long(name='TotalCount', example='0'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='DF58589C-A06C-4224-8615-7797E6474FA3'),
  success?: boolean(name='Success', example='true'),
}

model QueryRIUtilizationDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRIUtilizationDetailResponseBody(name='body'),
}

async function queryRIUtilizationDetail(request: QueryRIUtilizationDetailRequest): QueryRIUtilizationDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRIUtilizationDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryRedeemRequest {
  effectiveOrNot?: boolean(name='EffectiveOrNot', example='true', position='Query'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd', example='2018-08-01T00:00:00Z', position='Query'),
  expiryTimeStart?: string(name='ExpiryTimeStart', example='2018-08-01T00:00:00Z', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='10', position='Query'),
}

model QueryRedeemResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    pageNum?: long(name='PageNum', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    redeem?: {
      redeem?: [ 
      {
        applicableProducts?: string(name='ApplicableProducts'),
        balance?: string(name='Balance', example='0'),
        effectiveTime?: string(name='EffectiveTime', example='2018-05-14 20:25:00'),
        expiryTime?: string(name='ExpiryTime', example='2018-06-13 20:25:00'),
        grantedTime?: string(name='GrantedTime', example='2018-05-14 20:25:00'),
        nominalValue?: string(name='NominalValue', example='0'),
        redeemId?: string(name='RedeemId', example='1342'),
        redeemNo?: string(name='RedeemNo', example='4889*****1610'),
        specification?: string(name='Specification'),
        status?: string(name='Status', example='Generated'),
      }
    ](name='Redeem')
    }(name='Redeem'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='E503DC7B-E4F0-4B3C-BC89-BCECF1338F0B'),
  success?: boolean(name='Success', example='true'),
}

model QueryRedeemResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRedeemResponseBody(name='body'),
}

async function queryRedeem(request: QueryRedeemRequest): QueryRedeemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRedeem', 'GET', '/', 'json', false, 'json', request);
}

model QueryRelationListRequest {
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  statusList?: [ string ](name='StatusList', example='RELATED', position='Query'),
  userId: long(name='UserId', example='1990699401005016', position='Query'),
}

model QueryRelationListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    financialRelationInfoList?: [ 
      {
        accountId?: long(name='AccountId', example='1851253838840762'),
        accountName?: string(name='AccountName', example='caiwuyun_test4'),
        accountNickName?: string(name='AccountNickName', example='test4'),
        accountType?: string(name='AccountType', example='MEMBER'),
        endTime?: string(name='EndTime', example='2021-03-08T15:12Z'),
        relationId?: long(name='RelationId', example='51463'),
        relationType?: string(name='RelationType', example='FinancialManagement'),
        setupTime?: string(name='SetupTime', example='2021-03-02T15:12Z'),
        startTime?: string(name='StartTime', example='2021-03-02T15:12Z'),
        state?: string(name='State', example='RELATED'),
      }
    ](name='FinancialRelationInfoList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='7FC5D662-37FD-40A6-85B1-33442D815184'),
  success?: boolean(name='Success', example='true'),
}

model QueryRelationListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRelationListResponseBody(name='body'),
}

async function queryRelationList(request: QueryRelationListRequest): QueryRelationListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRelationList', 'POST', '/', 'json', false, 'json', request);
}

model QueryResellerAvailableQuotaRequest {
  itemCodes?: string(name='ItemCodes', position='Query'),
  ownerId: long(name='OwnerId', position='Query'),
}

model QueryResellerAvailableQuotaResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='300'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model QueryResellerAvailableQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: QueryResellerAvailableQuotaResponseBody(name='body'),
}

async function queryResellerAvailableQuota(request: QueryResellerAvailableQuotaRequest): QueryResellerAvailableQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryResellerAvailableQuota', 'POST', '/', 'json', false, 'json', request);
}

model QueryResourcePackageInstancesRequest {
  expiryTimeEnd?: string(name='ExpiryTimeEnd', example='2020-02-02T13:00:00Z', position='Query'),
  expiryTimeStart?: string(name='ExpiryTimeStart', example='2020-02-02T12:00:00Z', position='Query'),
  includePartner?: boolean(name='IncludePartner', example='true', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  productCode?: string(name='ProductCode', example='rds', position='Query'),
}

model QueryResourcePackageInstancesResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostId?: string(name='HostId', example='cn'),
    instances?: {
      instance?: [ 
      {
        applicableProducts?: {
          product?: [ string ](name='Product')
        }(name='ApplicableProducts'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        deductType?: string(name='DeductType', example='Absolute'),
        effectiveTime?: string(name='EffectiveTime', example='2018-09-12T09:51:56Z'),
        expiryTime?: string(name='ExpiryTime', example='2019-03-12T16:00:00Z'),
        instanceId?: string(name='InstanceId', example='OSSBAG-cn-v0h1s4hma01'),
        packageType?: string(name='PackageType', example='FPT_ossbag_absolute_Storage_sh'),
        region?: string(name='Region', example='cn-hangzhou'),
        remainingAmount?: string(name='RemainingAmount', example='40.000'),
        remainingAmountUnit?: string(name='RemainingAmountUnit', example='GB'),
        remark?: string(name='Remark'),
        status?: string(name='Status', example='Available'),
        totalAmount?: string(name='TotalAmount', example='40.000'),
        totalAmountUnit?: string(name='TotalAmountUnit', example='GB'),
      }
    ](name='Instance')
    }(name='Instances'),
    pageNum?: string(name='PageNum', example='1'),
    pageSize?: string(name='PageSize', example='20'),
    totalCount?: string(name='TotalCount', example='12'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='12'),
}

model QueryResourcePackageInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryResourcePackageInstancesResponseBody(name='body'),
}

async function queryResourcePackageInstances(request: QueryResourcePackageInstancesRequest): QueryResourcePackageInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryResourcePackageInstances', 'POST', '/', 'json', false, 'json', request);
}

model QuerySavingsPlansDeductLogRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2022-01-05 00:00:00', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='spn-XXXXXXX', position='Query'),
  instanceType?: string(name='InstanceType', description='The type of the instance ID based on which the data is queried. Valid values:

*   spn: queries data based on the ID of the savings plan instance.
*   product: queries data based on the ID of the cloud service instance.', example='spn', position='Query'),
  locale?: string(name='Locale', description='The language of the return data. Valid values:

*   ZH: Chinese
*   EN: English', example='ZH', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20', minimum=1, maximum=100, position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2022-01-01 00:00:00', position='Query'),
}

model QuerySavingsPlansDeductLogResponseBody = {
  code?: string(name='Code', description='The error code.', example='PARAM_ERROR'),
  data?: {
    items?: [ 
      {
        billModule?: string(name='BillModule', description='The billable item for which the fee is deducted.'),
        deductCommodity?: string(name='DeductCommodity', description='The service for which the fee is deducted.'),
        deductFee?: string(name='DeductFee', description='The deducted amount.', example='0.52'),
        deductInstanceId?: string(name='DeductInstanceId', description='The ID of the instance for which the fee is deducted.', example='i-XXXXXXXXX'),
        deductRate?: string(name='DeductRate', description='The deduction rate.', example='1.0'),
        discountRate?: string(name='DiscountRate', description='The discount used for the current deduction.', example='0.069'),
        endTime?: string(name='EndTime', description='The end of the billing cycle for which the fee is deducted.', example='2020-12-01 01:00:00'),
        instanceId?: string(name='InstanceId', description='The ID of the savings plan instance.', example='spn-xxxxxxx'),
        ownerId?: long(name='OwnerId', example='1906589291020438'),
        savingsType?: string(name='SavingsType', description='The type of the savings plan. Valid values:

*   universal: general-purpose
*   ecs: ECS compute', example='ecs'),
        startTime?: string(name='StartTime', description='The beginning of the billing cycle for which the fee is deducted. The time is in the format of yyyy-MM-dd HH:mm:ss.', example='2020-12-01 00:00:00'),
        userId?: long(name='UserId', description='The ID of the user.', example='1906589291020438'),
      }
    ](name='Items', description='The deduction details.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries.', example='20'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='61293E7A-3406-4447-8620-EC88B0AA66AD'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model QuerySavingsPlansDeductLogResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySavingsPlansDeductLogResponseBody(name='body'),
}

async function querySavingsPlansDeductLog(request: QuerySavingsPlansDeductLogRequest): QuerySavingsPlansDeductLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySavingsPlansDeductLog', 'POST', '/', 'json', false, 'json', request);
}

model QuerySavingsPlansDiscountRequest {
  commodityCode: string(name='CommodityCode', description='commodityCode', example='ecs', position='Query'),
  cycle: string(name='Cycle', description='cycle', example='1:Year', position='Query'),
  locale?: string(name='Locale', description='locale', example='ZH', position='Query'),
  moduleCode?: string(name='ModuleCode', description='moduleCode', example='instance_type', position='Query'),
  pageNum?: int32(name='PageNum', description='pageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', description='pageSize', example='20', position='Query'),
  payMode: string(name='PayMode', description='payMode', example='total', position='Query'),
  region?: string(name='Region', description='region', example='cn-hangzhou', position='Query'),
  spec?: string(name='Spec', description='spec', example='ecs.g6', position='Query'),
  spnType: string(name='SpnType', description='spnType', example='universal', position='Query'),
}

model QuerySavingsPlansDiscountResponseBody = {
  code?: string(name='Code', description='code', example='PARAM_ERROR'),
  data?: {
    hostId?: string(name='HostId', description='hostId', example='100.104.180.109'),
    items?: [ 
      {
        commodityName?: string(name='CommodityName'),
        contractDiscountRate?: string(name='ContractDiscountRate', example='0.85'),
        cycle?: string(name='Cycle', example='1:Year'),
        discountRate?: string(name='DiscountRate', example='0.85'),
        moduleName?: string(name='ModuleName'),
        payMode?: string(name='PayMode', example='total'),
        region?: string(name='Region', example='cn-zhangjiakou-na62-a01'),
        spec?: string(name='Spec', example='ecs.g6'),
        spnType?: string(name='SpnType', example='universal'),
      }
    ](name='Items'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='message', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', description='requestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', description='success', example='true'),
}

model QuerySavingsPlansDiscountResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySavingsPlansDiscountResponseBody(name='body'),
}

async function querySavingsPlansDiscount(request: QuerySavingsPlansDiscountRequest): QuerySavingsPlansDiscountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySavingsPlansDiscount', 'GET', '/', 'json', false, 'json', request);
}

model QuerySavingsPlansInstanceRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00', position='Query'),
  instanceId?: string(name='InstanceId', description='The ID of the savings plan instance.', example='spn-xxxxxxx', position='Query'),
  locale?: string(name='Locale', description='The language of the return data. Valid values:

*   ZH: Chinese
*   EN: English', example='ZH', position='Query'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20', minimum=1, position='Query'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2020-01-01 00:00:00', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag to query.'),
      value?: string(name='Value', description='The value of the tag to query.'),
    }
  ](name='Tag', position='Query'),
}

model QuerySavingsPlansInstanceResponseBody = {
  code?: string(name='Code', description='The error code.', example='Success'),
  data?: {
    items?: [ 
      {
        allocationStatus?: string(name='AllocationStatus', description='The allocation status. Valid values:

*   unallocated
*   allocated
*   beAllocated', example='unallocated'),
        currency?: string(name='Currency', description='The currency. Valid values: CNY and USD.', example='CNY'),
        cycle?: string(name='Cycle', example='1:Year'),
        deductCycleType?: string(name='DeductCycleType', example='HOUR'),
        endTime?: string(name='EndTime', description='The time when the instance expires. The time is in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
        endTimestamp?: long(name='EndTimestamp', example='1663135741039'),
        instanceFamily?: string(name='InstanceFamily', description='The instance family information. For an instance of the Elastic Compute Service (ECS) compute type, the value indicates the ECS instance family or the ECS instance family package.', example='ecs.g6'),
        instanceId?: string(name='InstanceId', description='The ID of the savings plan instance.', example='spn-xxxxxxxx'),
        lastBillTotalUsage?: string(name='LastBillTotalUsage', example='100.0'),
        lastBillUtilization?: string(name='LastBillUtilization', example='0.8'),
        payMode?: string(name='PayMode', description='The payment type. Valid values:

*   total: All Upfront
*   half: Partial Upfront
*   zero: No Upfront', example='total'),
        poolValue?: string(name='PoolValue', description='The commitment.', example='1.00'),
        prepayFee?: string(name='PrepayFee', description='The prepaid amount.', example='8760.00'),
        region?: string(name='Region', description='The region.', example='cn-zhangjiakou-na62-a01'),
        savingsType?: string(name='SavingsType', description='The type of the savings plan. Valid values:

*   universal: general-purpose
*   ecs: ECS compute', example='ECS'),
        startTime?: string(name='StartTime', description='The time when the instance takes effect. The time is in the format of yyyy-MM-dd HH:mm:ss.', example='2020-01-01 00:00:00'),
        startTimestamp?: long(name='StartTimestamp', example='1663135741039'),
        status?: string(name='Status', description='The status of the instance. Valid values:

*   NORMAL: normal
*   LIMIT: stopped due to overdue payment
*   RELEASE: released', example='NORMAL'),
        tags?: [ 
          {
            key?: string(name='Key', description='The key of the tag.'),
            value?: string(name='Value', description='The value of the tag.'),
          }
        ](name='Tags', description='The details about the tags.'),
        totalSave?: string(name='TotalSave', description='The total amount that is saved.', example='20.00'),
        utilization?: string(name='Utilization', description='The total usage.', example='1.0'),
      }
    ](name='Items', description='The details about the instances.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries.', example='100'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='61293E7A-3406-4447-8620-EC88B0AA66AD'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model QuerySavingsPlansInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySavingsPlansInstanceResponseBody(name='body'),
}

async function querySavingsPlansInstance(request: QuerySavingsPlansInstanceRequest): QuerySavingsPlansInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySavingsPlansInstance', 'POST', '/', 'json', false, 'json', request);
}

model QuerySettleBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='123', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', example='2018-07', position='Query'),
  isDisplayLocalCurrency?: boolean(name='IsDisplayLocalCurrency', example='false', position='Query'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', example='20', position='Query'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productCode?: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  recordID?: string(name='RecordID', example='12233', position='Query'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription', position='Query'),
  type?: string(name='Type', example='SubscriptionOrder', position='Query'),
}

model QuerySettleBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185xxxxx489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-02'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        afterTaxAmount?: float(name='AfterTaxAmount', example='0'),
        billAccountID?: string(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        item?: string(name='Item', example='SubscriptionOrder'),
        outstandingAmount?: float(name='OutstandingAmount', example='0'),
        ownerID?: string(name='OwnerID', example='3532535235'),
        paymentAmount?: float(name='PaymentAmount', example='0'),
        paymentCurrency?: string(name='PaymentCurrency', example='USD'),
        paymentTime?: string(name='PaymentTime', example='2020-03-11 08:00:00'),
        paymentTransactionID?: string(name='PaymentTransactionID', example='2O3AADJFEAF2PDKSFAMFCB11918'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='100'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        recordID?: string(name='RecordID', example='2020xxxx5912'),
        roundDownDiscount?: string(name='RoundDownDiscount', example='0'),
        status?: string(name='Status', example='PayFinish'),
        subOrderId?: string(name='SubOrderId', example='325345254353'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tax?: float(name='Tax', example='0'),
        usageEndTime?: string(name='UsageEndTime', example='2020-03-11 08:00:00'),
        usageStartTime?: string(name='UsageStartTime', example='2020-03-11 07:00:00'),
      }
    ](name='Item')
    }(name='Items'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUQARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='200'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='AE3F4057-DFC9-4B81-8858-F620651010C9'),
  success?: boolean(name='Success', example='true'),
}

model QuerySettleBillResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySettleBillResponseBody(name='body'),
}

async function querySettleBill(request: QuerySettleBillRequest): QuerySettleBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySettleBill', 'POST', '/', 'json', false, 'json', request);
}

model QuerySkuPriceListRequest {
  commodityCode: string(name='CommodityCode', example='ecs', position='Query'),
  nextPageToken?: string(name='NextPageToken', example='080112060a0422020800180022490a470342000000315333303332363436363336333433393636333136333338333733373333333133373336363336323634363336363337333836333636333636313336363433363332', position='Query'),
  pageSize: int32(name='PageSize', example='20', position='Query'),
  priceEntityCode: string(name='PriceEntityCode', position='Query'),
  priceFactorConditionMap?: map[string] [ string ](name='PriceFactorConditionMap', shrink='json', position='Query'),
}

model QuerySkuPriceListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    skuPricePage?: {
      nextPageToken?: string(name='NextPageToken', example='080112060a0422020800180022490a470342000000315333303332363436363336333433393636333136333338333733373333333133373336363336323634363336363337333836333636333636313336363433363332'),
      skuPriceList?: [ 
        {
          cskuPriceList?: [ 
            {
              cskuCode?: string(name='CskuCode', example='ac74dd7b52ae6389ddef099283fb8275'),
              currency?: string(name='Currency', example='CNY'),
              price?: string(name='Price', example='100'),
              priceMode?: string(name='PriceMode', example='STEP_ARRIVE'),
              priceType?: string(name='PriceType', example='hourPrice'),
              priceUnit?: string(name='PriceUnit'),
              rangeList?: [ 
                {
                  factorCode?: string(name='FactorCode'),
                  max?: string(name='Max', example='10'),
                  min?: string(name='Min', example='1'),
                  type?: string(name='Type', example='LORC'),
                }
              ](name='RangeList'),
              usageUnit?: string(name='UsageUnit'),
            }
          ](name='CskuPriceList'),
          skuCode?: string(name='SkuCode', description='sku code', example='017c15a31507bc6de22aa93777461adc'),
          skuFactorMap?: map[string]string(name='SkuFactorMap'),
        }
      ](name='SkuPriceList'),
      totalCount?: int32(name='TotalCount', example='18732'),
    }(name='SkuPricePage'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', description='Id of the request', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', example='true'),
}

model QuerySkuPriceListResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySkuPriceListResponseBody(name='body'),
}

async function querySkuPriceList(request: QuerySkuPriceListRequest): QuerySkuPriceListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySkuPriceList', 'GET', '/', 'json', false, 'json', request);
}

model QuerySplitItemBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='123', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', example='2020-03', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', example='1', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  productCode?: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo', position='Query'),
}

model QuerySplitItemBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185xxxx3489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-03'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        billingDate?: string(name='BillingDate', example='2020-01-20'),
        billingItem?: string(name='BillingItem'),
        billingType?: string(name='BillingType'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage', example='NULL'),
        instanceConfig?: string(name='InstanceConfig', example='CPU:12'),
        instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh'),
        instanceSpec?: string(name='InstanceSpec', example='ecs.sn1ne.3xlarge'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        item?: string(name='Item', example='PayAsYouGoBill'),
        listPrice?: string(name='ListPrice', example='100'),
        listPriceUnit?: string(name='ListPriceUnit'),
        nickName?: string(name='NickName', example='test'),
        outstandingAmount?: float(name='OutstandingAmount', example='0'),
        ownerID?: string(name='OwnerID', example='169***013'),
        paymentAmount?: float(name='PaymentAmount', example='0'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        region?: string(name='Region', example='cn-hangzhou'),
        resourceGroup?: string(name='ResourceGroup'),
        servicePeriod?: string(name='ServicePeriod', example='10'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        splitAccountID?: string(name='SplitAccountID', example='122'),
        splitAccountName?: string(name='SplitAccountName', example='12@test.com'),
        splitBillingCycle?: string(name='SplitBillingCycle', example='2020-06'),
        splitCommodityCode?: string(name='SplitCommodityCode', example='rds'),
        splitItemID?: string(name='SplitItemID', example='i-28bycvyb4'),
        splitItemName?: string(name='SplitItemName', example='iZ28bycvyb4Z'),
        splitProductDetail?: string(name='SplitProductDetail', example='rds'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='tag'),
        usage?: string(name='Usage', example='100'),
        usageUnit?: string(name='UsageUnit', example='GB'),
        zone?: string(name='Zone', example='cn-hangzhou-h'),
      }
    ](name='Item')
    }(name='Items'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='2'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model QuerySplitItemBillResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySplitItemBillResponseBody(name='body'),
}

async function querySplitItemBill(request: QuerySplitItemBillRequest): QuerySplitItemBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySplitItemBill', 'POST', '/', 'json', false, 'json', request);
}

model QueryUserOmsDataRequest {
  dataType: string(name='DataType', example='Hour', position='Query'),
  endTime: string(name='EndTime', example='2020-02-21T12:00:00Z', position='Query'),
  marker?: string(name='Marker', example='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', example='1', position='Query'),
  startTime: string(name='StartTime', example='2020-02-20T12:00:00Z', position='Query'),
  table: string(name='Table', example='rds', position='Query'),
}

model QueryUserOmsDataResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostId?: string(name='HostId', example='cn'),
    marker?: string(name='Marker', example='NextToken'),
    omsData?: [  map[string]any ](name='OmsData'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model QueryUserOmsDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUserOmsDataResponseBody(name='body'),
}

async function queryUserOmsData(request: QueryUserOmsDataRequest): QueryUserOmsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserOmsData', 'POST', '/', 'json', false, 'json', request);
}

model RefundInstanceRequest {
  clientToken?: string(name='ClientToken', description='clientToken', example='793F021C-B589-1225-82A9-99232AEBE494', position='Query'),
  immediatelyRelease?: string(name='ImmediatelyRelease', description='immediatelyRelease', example='1', position='Query'),
  instanceId?: string(name='InstanceId', description='instanceId', example='i-bp1etb69sqxgl4*******', position='Query'),
  productCode?: string(name='ProductCode', description='productCode', example='ecs', position='Query'),
  productType?: string(name='ProductType', description='productType', example='‚Äù‚Äú', position='Query'),
}

model RefundInstanceResponseBody = {
  code?: string(name='Code', description='code', example='ResourceNotExists'),
  data?: {
    hostId?: string(name='HostId', description='hostId', example='cn'),
    orderId?: long(name='OrderId', description='orderId', example='2100000000***'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='message', example='success'),
  requestId?: string(name='RequestId', description='requestId', example='UUID'),
  success?: boolean(name='Success', description='success', example='false'),
}

model RefundInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RefundInstanceResponseBody(name='body'),
}

async function refundInstance(request: RefundInstanceRequest): RefundInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefundInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstanceRequest {
  instanceIds: string(name='InstanceIds', description='instanceIds', example='rm-xxxxxxxxxxxx', position='Query'),
  ownerId: long(name='OwnerId', description='ownerId', position='Query'),
  productCode: string(name='ProductCode', description='productCode', example='ecs', position='Query'),
  productType?: string(name='ProductType', description='productType', example='ecs', position='Query'),
  region?: string(name='Region', description='region', example='cn-hangzhou', position='Query'),
  renewStatus?: string(name='RenewStatus', description='renewStatus', example='AutoRenewal', position='Query'),
  subscriptionType: string(name='SubscriptionType', description='subscriptionType', example='PayAsYouGo', position='Query'),
}

model ReleaseInstanceResponseBody = {
  code?: string(name='Code', description='code', example='Invalid_Product_Code'),
  data?: {
    hostId?: string(name='HostId', description='hostId', example='cn'),
    releaseResult?: boolean(name='ReleaseResult', description='releaseResult', example='true'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='message', example='successful'),
  requestId?: string(name='RequestId', description='requestId', example='UUID'),
  success?: boolean(name='Success', description='success', example='true'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model RelieveAccountRelationRequest {
  childUserId?: long(name='ChildUserId', example='1512996702208737', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  parentUserId?: long(name='ParentUserId', example='1738376485192612', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  relationId?: long(name='RelationId', example='RelationId', position='Query'),
  relationType?: string(name='RelationType', example='enterprise_group', position='Query'),
  requestId: string(name='RequestId', example='request_id', position='Query'),
}

model RelieveAccountRelationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    hostId?: string(name='HostId', description='hostid', example='HostId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='request_id'),
  success?: boolean(name='Success', example='true'),
}

model RelieveAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  body: RelieveAccountRelationResponseBody(name='body'),
}

async function relieveAccountRelation(request: RelieveAccountRelationRequest): RelieveAccountRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RelieveAccountRelation', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  clientToken?: string(name='ClientToken', example='ASKJHKLASJHAFSLKJH', position='Query'),
  instanceId: string(name='InstanceId', example='rm-skjdhaskjdh', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productCode: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  renewPeriod: int32(name='RenewPeriod', example='6', position='Query'),
}

model RenewInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    orderId?: string(name='OrderId', example='202657601410661'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', false, 'json', request);
}

model RenewResourcePackageRequest {
  duration: int32(name='Duration', example='1', position='Query'),
  effectiveDate?: string(name='EffectiveDate', example='2020-02-02T12:00:00Z', position='Query'),
  instanceId: string(name='InstanceId', example='lskd****sljhsdj', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pricingCycle: string(name='PricingCycle', example='Month', position='Query'),
}

model RenewResourcePackageResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    instanceId?: string(name='InstanceId', example='OSSBAG-cn-0xl0n****003'),
    orderId?: long(name='OrderId', example='204322560333'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  orderId?: long(name='OrderId', example='204322301110333'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model RenewResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: RenewResourcePackageResponseBody(name='body'),
}

async function renewResourcePackage(request: RenewResourcePackageRequest): RenewResourcePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewResourcePackage', 'POST', '/', 'json', false, 'json', request);
}

model SaveUserCreditRequest {
  avoidExpiration: boolean(name='AvoidExpiration', example='true', position='Query'),
  avoidNotification: boolean(name='AvoidNotification', example='true', position='Query'),
  avoidPrepaidExpiration: boolean(name='AvoidPrepaidExpiration', example='true', position='Query'),
  avoidPrepaidNotification: boolean(name='AvoidPrepaidNotification', example='true', position='Query'),
  creditType: string(name='CreditType', position='Query'),
  creditValue: string(name='CreditValue', position='Query'),
  description: string(name='Description', example='description', position='Query'),
  operator: string(name='Operator', example='65683', position='Query'),
}

model SaveUserCreditResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='9EEAE43F-1E4D-4734-AE93-5049878AC103'),
  success?: boolean(name='Success', example='true'),
}

model SaveUserCreditResponse = {
  headers: map[string]string(name='headers'),
  body: SaveUserCreditResponseBody(name='body'),
}

async function saveUserCredit(request: SaveUserCreditRequest): SaveUserCreditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveUserCredit', 'POST', '/', 'json', false, 'json', request);
}

model SetAllExpirationDayRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  unifyExpireDay: string(name='UnifyExpireDay', example='10', position='Query'),
}

model SetAllExpirationDayResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model SetAllExpirationDayResponse = {
  headers: map[string]string(name='headers'),
  body: SetAllExpirationDayResponseBody(name='body'),
}

async function setAllExpirationDay(request: SetAllExpirationDayRequest): SetAllExpirationDayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAllExpirationDay', 'POST', '/', 'json', false, 'json', request);
}

model SetCreditLabelActionRequest {
  actionType: string(name='ActionType', example='SET', position='Query'),
  clearCycle?: string(name='ClearCycle', position='Query'),
  creditAmount: string(name='CreditAmount', example='1000', position='Query'),
  currencyCode?: string(name='CurrencyCode', example='CNY', position='Query'),
  dailyCycle?: string(name='DailyCycle', position='Query'),
  description?: string(name='Description', position='Query'),
  isNeedAddSettleLabel?: string(name='IsNeedAddSettleLabel', position='Query'),
  isNeedAdjustCreditAccount?: string(name='IsNeedAdjustCreditAccount', position='Query'),
  isNeedSaveNotifyRule?: string(name='IsNeedSaveNotifyRule', position='Query'),
  isNeedSetCreditAmount?: string(name='IsNeedSetCreditAmount', position='Query'),
  needNotice?: boolean(name='NeedNotice', position='Query'),
  newCreateMode?: boolean(name='NewCreateMode', position='Query'),
  operator?: string(name='Operator', example='78394', position='Query'),
  requestId: string(name='RequestId', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27', position='Query'),
  siteCode?: string(name='SiteCode', position='Query'),
  source: string(name='Source', example='dellidc', position='Query'),
  uid: string(name='Uid', example='1911503093565030', position='Query'),
}

model SetCreditLabelActionResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model SetCreditLabelActionResponse = {
  headers: map[string]string(name='headers'),
  body: SetCreditLabelActionResponseBody(name='body'),
}

async function setCreditLabelAction(request: SetCreditLabelActionRequest): SetCreditLabelActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCreditLabelAction', 'POST', '/', 'json', false, 'json', request);
}

model SetRenewalRequest {
  instanceIDs: string(name='InstanceIDs', example='rm-askjdhaskfjh', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productCode?: string(name='ProductCode', example='rds', position='Query'),
  productType?: string(name='ProductType', example='rds', position='Query'),
  renewalPeriod?: int32(name='RenewalPeriod', example='1', position='Query'),
  renewalPeriodUnit?: string(name='RenewalPeriodUnit', example='M', position='Query'),
  renewalStatus: string(name='RenewalStatus', example='AutoRenewal', position='Query'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo', position='Query'),
}

model SetRenewalResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model SetRenewalResponse = {
  headers: map[string]string(name='headers'),
  body: SetRenewalResponseBody(name='body'),
}

async function setRenewal(request: SetRenewalRequest): SetRenewalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetRenewal', 'POST', '/', 'json', false, 'json', request);
}

model SetResellerUserAlarmThresholdRequest {
  alarmThresholds?: string(name='AlarmThresholds', example='[{\\"denominator\\":100,\\"numerator\\":30,\\"thresholdType\\":1}]', position='Query'),
  alarmType: string(name='AlarmType', example='quota_low_balance', position='Query'),
  ownerId: long(name='OwnerId', position='Query'),
}

model SetResellerUserAlarmThresholdResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model SetResellerUserAlarmThresholdResponse = {
  headers: map[string]string(name='headers'),
  body: SetResellerUserAlarmThresholdResponseBody(name='body'),
}

async function setResellerUserAlarmThreshold(request: SetResellerUserAlarmThresholdRequest): SetResellerUserAlarmThresholdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetResellerUserAlarmThreshold', 'POST', '/', 'json', false, 'json', request);
}

model SetResellerUserQuotaRequest {
  amount: string(name='Amount', example='750', position='Query'),
  currency?: string(name='Currency', position='Query'),
  outBizId?: string(name='OutBizId', example='OD2022040818295234777795624764689', position='Query'),
  ownerId: long(name='OwnerId', position='Query'),
}

model SetResellerUserQuotaResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', example='true'),
}

model SetResellerUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: SetResellerUserQuotaResponseBody(name='body'),
}

async function setResellerUserQuota(request: SetResellerUserQuotaRequest): SetResellerUserQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetResellerUserQuota', 'POST', '/', 'json', false, 'json', request);
}

model SetResellerUserStatusRequest {
  businessType: string(name='BusinessType', example='FREEZE', position='Query'),
  ownerId: string(name='OwnerId', position='Query'),
  status: string(name='Status', example='Freeze', position='Query'),
  stopMode?: string(name='StopMode', position='Query'),
}

model SetResellerUserStatusResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', example='true'),
}

model SetResellerUserStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetResellerUserStatusResponseBody(name='body'),
}

async function setResellerUserStatus(request: SetResellerUserStatusRequest): SetResellerUserStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetResellerUserStatus', 'POST', '/', 'json', false, 'json', request);
}

model SubscribeBillToOSSRequest {
  beginBillingCycle?: string(name='BeginBillingCycle', example='2021-03', position='Query'),
  bucketOwnerId?: long(name='BucketOwnerId', example='12341324', position='Query'),
  bucketPath?: string(name='BucketPath', description='OSS BucketÂ≠òÂÇ®Ë∑ØÂæÑ', example='testpath', position='Query'),
  multAccountRelSubscribe?: string(name='MultAccountRelSubscribe', example='MA', position='Query'),
  subscribeBucket: string(name='SubscribeBucket', example='xxxxxx-bucket', position='Query'),
  subscribeType?: string(name='SubscribeType', example='BillingItemDetailForBillingPeriod', position='Query'),
}

model SubscribeBillToOSSResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='F61FCE4B-9B56-4FD9-A17E-******'),
  success?: boolean(name='Success', example='true'),
}

model SubscribeBillToOSSResponse = {
  headers: map[string]string(name='headers'),
  body: SubscribeBillToOSSResponseBody(name='body'),
}

async function subscribeBillToOSS(request: SubscribeBillToOSSRequest): SubscribeBillToOSSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubscribeBillToOSS', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', example='instance', position='Query'),
  tag: [ 
    {
      key: string(name='Key', example='tag1'),
      value: string(name='Value', example='001'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  code?: string(name='Code', example='InternalError'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', example='1537A007-72D7-4165-8A26-8694A38E219A'),
  success?: boolean(name='Success', example='true'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnsubscribeBillToOSSRequest {
  multAccountRelSubscribe?: string(name='MultAccountRelSubscribe', example='MA', position='Query'),
  subscribeType: string(name='SubscribeType', example='BillingItemDetailForBillingPeriod', position='Query'),
}

model UnsubscribeBillToOSSResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='D23FE74C-742F-4624-A82B-******'),
  success?: boolean(name='Success', example='true'),
}

model UnsubscribeBillToOSSResponse = {
  headers: map[string]string(name='headers'),
  body: UnsubscribeBillToOSSResponseBody(name='body'),
}

async function unsubscribeBillToOSS(request: UnsubscribeBillToOSSRequest): UnsubscribeBillToOSSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnsubscribeBillToOSS', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='true', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', example='instance', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  code?: string(name='Code', example='PARAM_ERROR'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', example='C7C15585-8349-4C62-BEE4-5A391841B9BE'),
  success?: boolean(name='Success', example='true'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeResourcePackageRequest {
  effectiveDate?: string(name='EffectiveDate', example='2020-02-02T12:00:00Z', position='Query'),
  instanceId?: string(name='InstanceId', example='OSSBAG-cn-0xl*****x002', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  specification?: string(name='Specification', example='51200', position='Query'),
}

model UpgradeResourcePackageResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    instanceId?: string(name='InstanceId', example='OSSBAG-cn-0xl*****002'),
    orderId?: long(name='OrderId', example='73387246238746'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  orderId?: long(name='OrderId', example='73387246238746'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model UpgradeResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeResourcePackageResponseBody(name='body'),
}

async function upgradeResourcePackage(request: UpgradeResourcePackageRequest): UpgradeResourcePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeResourcePackage', 'POST', '/', 'json', false, 'json', request);
}

