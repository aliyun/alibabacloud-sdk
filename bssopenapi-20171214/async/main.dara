/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'BssOpenApi';
  @version = '2017-12-14';
  @endpointRule = 'regional';
  @endpointMap = {
    ap-northeast-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-northeast-2-pop = 'business.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'business.ap-southeast-1.aliyuncs.com',
    cn-beijing = 'business.aliyuncs.com',
    cn-beijing-finance-1 = 'business.aliyuncs.com',
    cn-beijing-finance-pop = 'business.aliyuncs.com',
    cn-beijing-gov-1 = 'business.aliyuncs.com',
    cn-beijing-nu16-b01 = 'business.aliyuncs.com',
    cn-chengdu = 'business.aliyuncs.com',
    cn-edge-1 = 'business.aliyuncs.com',
    cn-fujian = 'business.aliyuncs.com',
    cn-haidian-cm12-c01 = 'business.aliyuncs.com',
    cn-hangzhou = 'business.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'business.aliyuncs.com',
    cn-hangzhou-finance = 'business.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'business.aliyuncs.com',
    cn-hangzhou-test-306 = 'business.aliyuncs.com',
    cn-hongkong = 'business.aliyuncs.com',
    cn-hongkong-finance-pop = 'business.aliyuncs.com',
    cn-huhehaote = 'business.aliyuncs.com',
    cn-north-2-gov-1 = 'business.aliyuncs.com',
    cn-qingdao = 'business.aliyuncs.com',
    cn-qingdao-nebula = 'business.aliyuncs.com',
    cn-shanghai = 'business.aliyuncs.com',
    cn-shanghai-et15-b01 = 'business.aliyuncs.com',
    cn-shanghai-et2-b01 = 'business.aliyuncs.com',
    cn-shanghai-finance-1 = 'business.aliyuncs.com',
    cn-shanghai-inner = 'business.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'business.aliyuncs.com',
    cn-shenzhen = 'business.aliyuncs.com',
    cn-shenzhen-finance-1 = 'business.aliyuncs.com',
    cn-shenzhen-inner = 'business.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'business.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'business.aliyuncs.com',
    cn-wuhan = 'business.aliyuncs.com',
    cn-yushanfang = 'business.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'business.aliyuncs.com',
    cn-zhangjiakou = 'business.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'business.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'business.aliyuncs.com',
    eu-central-1 = 'business.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'business.ap-southeast-1.aliyuncs.com',
    eu-west-1-oxs = 'business.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'business.ap-southeast-1.aliyuncs.com',
    rus-west-1-pop = 'business.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'business.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'business.ap-southeast-1.aliyuncs.com',
  };
}

function close(): void {
  @handler.close();
}

model AddAccountRelationRequest {
  childNick?: string(name='ChildNick', position='Query'),
  childUserId: long(name='ChildUserId', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  parentUserId: long(name='ParentUserId', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  permissionCodes?: [ string ](name='PermissionCodes', position='Query'),
  relationType: string(name='RelationType', position='Query'),
  requestId: string(name='RequestId', position='Query'),
  roleCodes?: [ string ](name='RoleCodes', position='Query'),
}

model AddAccountRelationResponseBody = {
  code?: string(name='Code'),
  data?: {
    hostId?: string(name='HostId'),
    relationId?: long(name='RelationId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AddAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  body: AddAccountRelationResponseBody(name='body'),
}

async function addAccountRelation(request: AddAccountRelationRequest): AddAccountRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AddAccountRelation', 'POST', '/', 'json', false, 'json', request);
}

model AllocateCostUnitResourceRequest {
  fromUnitId: long(name='FromUnitId', position='Query'),
  fromUnitUserId: long(name='FromUnitUserId', position='Query'),
  resourceInstanceList: [ 
    {
      apportionCode?: string(name='ApportionCode'),
      commodityCode: string(name='CommodityCode'),
      resourceId: string(name='ResourceId'),
      resourceUserId: long(name='ResourceUserId'),
    }
  ](name='ResourceInstanceList', position='Query'),
  toUnitId: long(name='ToUnitId', position='Query'),
  toUnitUserId: long(name='ToUnitUserId', position='Query'),
}

model AllocateCostUnitResourceResponseBody = {
  code?: string(name='Code'),
  data?: {
    isSuccess?: boolean(name='IsSuccess'),
    toUnitId?: long(name='ToUnitId'),
    toUnitUserId?: long(name='ToUnitUserId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model AllocateCostUnitResourceResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateCostUnitResourceResponseBody(name='body'),
}

async function allocateCostUnitResource(request: AllocateCostUnitResourceRequest): AllocateCostUnitResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AllocateCostUnitResource', 'POST', '/', 'json', false, 'json', request);
}

model ApplyInvoiceRequest {
  addressId: long(name='AddressId', position='Query'),
  applyUserNick: string(name='ApplyUserNick', position='Query'),
  customerId: long(name='CustomerId', position='Query'),
  invoiceAmount: long(name='InvoiceAmount', position='Query'),
  invoiceByAmount?: boolean(name='InvoiceByAmount', position='Query'),
  invoicingType?: int32(name='InvoicingType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  processWay?: int32(name='ProcessWay', position='Query'),
  selectedIds: [ long ](name='SelectedIds', position='Query'),
  userRemark?: string(name='UserRemark', position='Query'),
}

model ApplyInvoiceResponseBody = {
  code?: string(name='Code'),
  data?: {
    invoiceApplyId?: long(name='InvoiceApplyId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ApplyInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyInvoiceResponseBody(name='body'),
}

async function applyInvoice(request: ApplyInvoiceRequest): ApplyInvoiceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ApplyInvoice', 'POST', '/', 'json', false, 'json', request);
}

model CancelOrderRequest {
  orderId: string(name='OrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model CancelOrderResponseBody = {
  code?: string(name='Code'),
  data?: {
    hostId?: string(name='HostId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CancelOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOrderResponseBody(name='body'),
}

async function cancelOrder(request: CancelOrderRequest): CancelOrderResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelOrder', 'POST', '/', 'json', false, 'json', request);
}

model ChangeResellerConsumeAmountRequest {
  adjustType: string(name='AdjustType', position='Query'),
  amount: string(name='Amount', position='Query'),
  businessType: string(name='BusinessType', position='Query'),
  currency: string(name='Currency', position='Query'),
  extendMap?: string(name='ExtendMap', position='Query'),
  outBizId: string(name='OutBizId', position='Query'),
  ownerId: long(name='OwnerId', position='Query'),
  source: string(name='Source', position='Query'),
}

model ChangeResellerConsumeAmountResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeResellerConsumeAmountResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeResellerConsumeAmountResponseBody(name='body'),
}

async function changeResellerConsumeAmount(request: ChangeResellerConsumeAmountRequest): ChangeResellerConsumeAmountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResellerConsumeAmount', 'POST', '/', 'json', false, 'json', request);
}

model ConfirmRelationRequest {
  childUserId?: long(name='ChildUserId', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  confirmCode: string(name='ConfirmCode', position='Query'),
  parentUserId?: long(name='ParentUserId', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  permissionCodes: [ string ](name='PermissionCodes', position='Query'),
  relationId?: long(name='RelationId', position='Query'),
  relationType?: string(name='RelationType', position='Query'),
  requestId: string(name='RequestId', position='Query'),
}

model ConfirmRelationResponseBody = {
  code?: string(name='Code'),
  data?: {
    hostId?: string(name='HostId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConfirmRelationResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmRelationResponseBody(name='body'),
}

async function confirmRelation(request: ConfirmRelationRequest): ConfirmRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConfirmRelation', 'POST', '/', 'json', false, 'json', request);
}

model ConvertChargeTypeRequest {
  instanceId: string(name='InstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  period?: int32(name='Period', position='Query'),
  productCode: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  subscriptionType: string(name='SubscriptionType', position='Query'),
}

model ConvertChargeTypeResponseBody = {
  code?: string(name='Code'),
  data?: {
    orderId?: string(name='OrderId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ConvertChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ConvertChargeTypeResponseBody(name='body'),
}

async function convertChargeType(request: ConvertChargeTypeRequest): ConvertChargeTypeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ConvertChargeType', 'POST', '/', 'json', false, 'json', request);
}

model CreateAgAccountRequest {
  accountAttr?: string(name='AccountAttr', position='Query'),
  cityName?: string(name='CityName', position='Query'),
  enterpriseName?: string(name='EnterpriseName', position='Query'),
  firstName?: string(name='FirstName', position='Query'),
  lastName?: string(name='LastName', position='Query'),
  loginEmail: string(name='LoginEmail', position='Query'),
  nationCode?: string(name='NationCode', position='Query'),
  postcode?: string(name='Postcode', position='Query'),
  provinceName?: string(name='ProvinceName', position='Query'),
}

model CreateAgAccountResponseBody = {
  agRelationDto?: {
    mpk?: string(name='Mpk'),
    pk?: string(name='Pk'),
    ramAdminRoleName?: string(name='RamAdminRoleName'),
    type?: string(name='Type'),
  }(name='AgRelationDto'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateAgAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAgAccountResponseBody(name='body'),
}

async function createAgAccount(request: CreateAgAccountRequest): CreateAgAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateAgAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateCostUnitRequest {
  unitEntityList?: [ 
    {
      ownerUid: long(name='OwnerUid'),
      parentUnitId: long(name='ParentUnitId'),
      unitName: string(name='UnitName'),
    }
  ](name='UnitEntityList', position='Query'),
}

model CreateCostUnitResponseBody = {
  code?: string(name='Code'),
  data?: {
    costUnitDtoList?: [ 
      {
        ownerUid?: long(name='OwnerUid'),
        parentUnitId?: long(name='ParentUnitId'),
        unitId?: long(name='UnitId'),
        unitName?: string(name='UnitName'),
      }
    ](name='CostUnitDtoList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateCostUnitResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCostUnitResponseBody(name='body'),
}

async function createCostUnit(request: CreateCostUnitRequest): CreateCostUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateCostUnit', 'POST', '/', 'json', false, 'json', request);
}

model CreateInstanceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  logistics?: string(name='Logistics', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameter?: [ 
    {
      code: string(name='Code'),
      value: string(name='Value'),
    }
  ](name='Parameter', position='Query'),
  period?: int32(name='Period', position='Query'),
  productCode: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  renewPeriod?: int32(name='RenewPeriod', position='Query'),
  renewalStatus?: string(name='RenewalStatus', position='Query'),
  subscriptionType: string(name='SubscriptionType', position='Query'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    instanceId?: string(name='InstanceId'),
    orderId?: string(name='OrderId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateInstance', 'POST', '/', 'json', false, 'json', request);
}

model CreateResellerUserQuotaRequest {
  amount: string(name='Amount', position='Query'),
  currency: string(name='Currency', position='Query'),
  outBizId?: string(name='OutBizId', position='Query'),
  ownerId: long(name='OwnerId', position='Query'),
}

model CreateResellerUserQuotaResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateResellerUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResellerUserQuotaResponseBody(name='body'),
}

async function createResellerUserQuota(request: CreateResellerUserQuotaRequest): CreateResellerUserQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResellerUserQuota', 'POST', '/', 'json', false, 'json', request);
}

model CreateResourcePackageRequest {
  duration?: int32(name='Duration', position='Query'),
  effectiveDate?: string(name='EffectiveDate', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packageType?: string(name='PackageType', position='Query'),
  pricingCycle?: string(name='PricingCycle', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  specification?: string(name='Specification', position='Query'),
}

model CreateResourcePackageResponseBody = {
  code?: string(name='Code'),
  data?: {
    instanceId?: string(name='InstanceId'),
    orderId?: long(name='OrderId'),
  }(name='Data'),
  message?: string(name='Message'),
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourcePackageResponseBody(name='body'),
}

async function createResourcePackage(request: CreateResourcePackageRequest): CreateResourcePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateResourcePackage', 'POST', '/', 'json', false, 'json', request);
}

model CreateSavingsPlansInstanceRequest {
  commodityCode: string(name='CommodityCode', description='commodityCode', position='Query'),
  duration: string(name='Duration', description='duration', minLength=1, position='Query'),
  effectiveDate?: string(name='EffectiveDate', description='effectiveDate', position='Query'),
  payMode: string(name='PayMode', description='payMode', position='Query'),
  poolValue: string(name='PoolValue', description='poolValue', position='Query'),
  pricingCycle: string(name='PricingCycle', description='pricingCycle', position='Query'),
  region?: string(name='Region', description='region', position='Query'),
  specType?: string(name='SpecType', description='specType', position='Query'),
  specification?: string(name='Specification', description='specification', position='Query'),
  type: string(name='Type', description='type', position='Query'),
}

model CreateSavingsPlansInstanceResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    orderId?: long(name='OrderId', description='orderId'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model CreateSavingsPlansInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSavingsPlansInstanceResponseBody(name='body'),
}

async function createSavingsPlansInstance(request: CreateSavingsPlansInstanceRequest): CreateSavingsPlansInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSavingsPlansInstance', 'POST', '/', 'json', false, 'json', request);
}

model DeleteCostUnitRequest {
  ownerUid: long(name='OwnerUid', position='Query'),
  unitId: long(name='UnitId', position='Query'),
}

model DeleteCostUnitResponseBody = {
  code?: string(name='Code'),
  data?: {
    isSuccess?: boolean(name='IsSuccess'),
    ownerUid?: long(name='OwnerUid'),
    unitId?: long(name='UnitId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DeleteCostUnitResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCostUnitResponseBody(name='body'),
}

async function deleteCostUnit(request: DeleteCostUnitRequest): DeleteCostUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteCostUnit', 'POST', '/', 'json', false, 'json', request);
}

model DescribeInstanceBillRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', position='Query'),
  billingDate?: string(name='BillingDate', position='Query'),
  granularity?: string(name='Granularity', position='Query'),
  instanceID?: string(name='InstanceID', position='Query'),
  isBillingItem?: boolean(name='IsBillingItem', position='Query'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  subscriptionType?: string(name='SubscriptionType', position='Query'),
}

model DescribeInstanceBillResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountID?: string(name='AccountID'),
    accountName?: string(name='AccountName'),
    billingCycle?: string(name='BillingCycle'),
    items?: [ 
      {
        adjustAmount?: float(name='AdjustAmount'),
        billAccountID?: string(name='BillAccountID'),
        billAccountName?: string(name='BillAccountName'),
        billingDate?: string(name='BillingDate'),
        billingItem?: string(name='BillingItem'),
        billingItemCode?: string(name='BillingItemCode'),
        billingType?: string(name='BillingType'),
        bizType?: string(name='BizType'),
        cashAmount?: float(name='CashAmount'),
        commodityCode?: string(name='CommodityCode'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage'),
        instanceConfig?: string(name='InstanceConfig'),
        instanceID?: string(name='InstanceID'),
        instanceSpec?: string(name='InstanceSpec'),
        internetIP?: string(name='InternetIP'),
        intranetIP?: string(name='IntranetIP'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        item?: string(name='Item'),
        itemName?: string(name='ItemName'),
        listPrice?: string(name='ListPrice'),
        listPriceUnit?: string(name='ListPriceUnit'),
        nickName?: string(name='NickName'),
        outstandingAmount?: float(name='OutstandingAmount'),
        ownerID?: string(name='OwnerID'),
        paymentAmount?: float(name='PaymentAmount'),
        pipCode?: string(name='PipCode'),
        pretaxAmount?: float(name='PretaxAmount'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType'),
        region?: string(name='Region'),
        resourceGroup?: string(name='ResourceGroup'),
        servicePeriod?: string(name='ServicePeriod'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        subscriptionType?: string(name='SubscriptionType'),
        tag?: string(name='Tag'),
        usage?: string(name='Usage'),
        usageUnit?: string(name='UsageUnit'),
        zone?: string(name='Zone'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults'),
    nextToken?: string(name='NextToken'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeInstanceBillResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceBillResponseBody(name='body'),
}

async function describeInstanceBill(request: DescribeInstanceBillRequest): DescribeInstanceBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeInstanceBill', 'POST', '/', 'json', false, 'json', request);
}

model DescribePricingModuleRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  productCode: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  subscriptionType: string(name='SubscriptionType', position='Query'),
}

model DescribePricingModuleResponseBody = {
  code?: string(name='Code'),
  data?: {
    attributeList?: {
      attribute?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
        unit?: string(name='Unit'),
        values?: {
          attributeValue?: [ 
          {
            name?: string(name='Name'),
            remark?: string(name='Remark'),
            type?: string(name='Type'),
            value?: string(name='Value'),
          }
        ](name='AttributeValue')
        }(name='Values'),
      }
    ](name='Attribute')
    }(name='AttributeList'),
    moduleList?: {
      module?: [ 
      {
        configList?: {
          configList?: [ string ](name='ConfigList')
        }(name='ConfigList'),
        currency?: string(name='Currency'),
        moduleCode?: string(name='ModuleCode'),
        moduleName?: string(name='ModuleName'),
        priceType?: string(name='PriceType'),
      }
    ](name='Module')
    }(name='ModuleList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribePricingModuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePricingModuleResponseBody(name='body'),
}

async function describePricingModule(request: DescribePricingModuleRequest): DescribePricingModuleResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribePricingModule', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceCoverageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  periodType: string(name='PeriodType', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  startPeriod: string(name='StartPeriod', position='Query'),
}

model DescribeResourceCoverageDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        capacityUnit?: string(name='CapacityUnit'),
        commodityCode?: string(name='CommodityCode'),
        commodityName?: string(name='CommodityName'),
        coveragePercentage?: float(name='CoveragePercentage'),
        currency?: string(name='Currency'),
        deductQuantity?: float(name='DeductQuantity'),
        endTime?: string(name='EndTime'),
        instanceId?: string(name='InstanceId'),
        instanceSpec?: string(name='InstanceSpec'),
        paymentAmount?: float(name='PaymentAmount'),
        productCode?: string(name='ProductCode'),
        productName?: string(name='ProductName'),
        region?: string(name='Region'),
        regionNo?: string(name='RegionNo'),
        startTime?: string(name='StartTime'),
        totalQuantity?: float(name='TotalQuantity'),
        userId?: string(name='UserId'),
        userName?: string(name='UserName'),
        zone?: string(name='Zone'),
        zoneName?: string(name='ZoneName'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults'),
    nextToken?: string(name='NextToken'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeResourceCoverageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceCoverageDetailResponseBody(name='body'),
}

async function describeResourceCoverageDetail(request: DescribeResourceCoverageDetailRequest): DescribeResourceCoverageDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceCoverageDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceCoverageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', position='Query'),
  periodType: string(name='PeriodType', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  startPeriod: string(name='StartPeriod', position='Query'),
}

model DescribeResourceCoverageTotalResponseBody = {
  code?: string(name='Code'),
  data?: {
    periodCoverage?: [ 
      {
        coveragePercentage?: float(name='CoveragePercentage'),
        period?: string(name='Period'),
      }
    ](name='PeriodCoverage'),
    totalCoverage?: {
      capacityUnit?: string(name='CapacityUnit'),
      coveragePercentage?: float(name='CoveragePercentage'),
      deductQuantity?: float(name='DeductQuantity'),
      totalQuantity?: float(name='TotalQuantity'),
    }(name='TotalCoverage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeResourceCoverageTotalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceCoverageTotalResponseBody(name='body'),
}

async function describeResourceCoverageTotal(request: DescribeResourceCoverageTotalRequest): DescribeResourceCoverageTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceCoverageTotal', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourcePackageProductRequest {
  productCode?: string(name='ProductCode', position='Query'),
}

model DescribeResourcePackageProductResponseBody = {
  code?: string(name='Code'),
  data?: {
    resourcePackages?: {
      resourcePackage?: [ 
      {
        name?: string(name='Name'),
        packageTypes?: {
          packageType?: [ 
          {
            code?: string(name='Code'),
            name?: string(name='Name'),
            properties?: {
              property?: [ 
              {
                name?: string(name='Name'),
                value?: string(name='Value'),
              }
            ](name='Property')
            }(name='Properties'),
            specifications?: {
              specification?: [ 
              {
                availableDurations?: {
                  availableDuration?: [ 
                  {
                    name?: string(name='Name'),
                    unit?: string(name='Unit'),
                    value?: int32(name='Value'),
                  }
                ](name='AvailableDuration')
                }(name='AvailableDurations'),
                name?: string(name='Name'),
                value?: string(name='Value'),
              }
            ](name='Specification')
            }(name='Specifications'),
          }
        ](name='PackageType')
        }(name='PackageTypes'),
        productCode?: string(name='ProductCode'),
        productType?: string(name='ProductType'),
      }
    ](name='ResourcePackage')
    }(name='ResourcePackages'),
  }(name='Data'),
  message?: string(name='Message'),
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeResourcePackageProductResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourcePackageProductResponseBody(name='body'),
}

async function describeResourcePackageProduct(request: DescribeResourcePackageProductRequest): DescribeResourcePackageProductResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourcePackageProduct', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceUsageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  periodType: string(name='PeriodType', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  startPeriod: string(name='StartPeriod', position='Query'),
}

model DescribeResourceUsageDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        capacityUnit?: string(name='CapacityUnit'),
        currency?: string(name='Currency'),
        deductQuantity?: float(name='DeductQuantity'),
        endTime?: string(name='EndTime'),
        imageType?: string(name='ImageType'),
        instanceSpec?: string(name='InstanceSpec'),
        postpaidCost?: string(name='PostpaidCost'),
        potentialSavedCost?: string(name='PotentialSavedCost'),
        quantity?: long(name='Quantity'),
        region?: string(name='Region'),
        regionNo?: string(name='RegionNo'),
        reservationCost?: string(name='ReservationCost'),
        resourceInstanceId?: string(name='ResourceInstanceId'),
        savedCost?: string(name='SavedCost'),
        startTime?: string(name='StartTime'),
        status?: string(name='Status'),
        statusName?: string(name='StatusName'),
        totalQuantity?: float(name='TotalQuantity'),
        usagePercentage?: float(name='UsagePercentage'),
        userId?: string(name='UserId'),
        userName?: string(name='UserName'),
        zone?: string(name='Zone'),
        zoneName?: string(name='ZoneName'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults'),
    nextToken?: string(name='NextToken'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeResourceUsageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceUsageDetailResponseBody(name='body'),
}

async function describeResourceUsageDetail(request: DescribeResourceUsageDetailRequest): DescribeResourceUsageDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceUsageDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeResourceUsageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', position='Query'),
  periodType: string(name='PeriodType', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  startPeriod: string(name='StartPeriod', position='Query'),
}

model DescribeResourceUsageTotalResponseBody = {
  code?: string(name='Code'),
  data?: {
    periodCoverage?: [ 
      {
        period?: string(name='Period'),
        usagePercentage?: float(name='UsagePercentage'),
      }
    ](name='PeriodCoverage'),
    totalUsage?: {
      postpaidCost?: float(name='PostpaidCost'),
      potentialSavedCost?: float(name='PotentialSavedCost'),
      reservationCost?: float(name='ReservationCost'),
      savedCost?: float(name='SavedCost'),
      usagePercentage?: float(name='UsagePercentage'),
    }(name='TotalUsage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeResourceUsageTotalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceUsageTotalResponseBody(name='body'),
}

async function describeResourceUsageTotal(request: DescribeResourceUsageTotalRequest): DescribeResourceUsageTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeResourceUsageTotal', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSavingsPlansCoverageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  periodType: string(name='PeriodType', position='Query'),
  startPeriod: string(name='StartPeriod', position='Query'),
  token?: string(name='Token', position='Query'),
}

model DescribeSavingsPlansCoverageDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        coveragePercentage?: float(name='CoveragePercentage'),
        currency?: string(name='Currency'),
        deductAmount?: float(name='DeductAmount'),
        endPeriod?: string(name='EndPeriod'),
        instanceId?: string(name='InstanceId'),
        instanceSpec?: string(name='InstanceSpec'),
        postpaidCost?: float(name='PostpaidCost'),
        region?: string(name='Region'),
        startPeriod?: string(name='StartPeriod'),
        totalAmount?: float(name='TotalAmount'),
        userId?: long(name='UserId'),
        userName?: string(name='UserName'),
      }
    ](name='Items'),
    nextToken?: string(name='NextToken'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSavingsPlansCoverageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSavingsPlansCoverageDetailResponseBody(name='body'),
}

async function describeSavingsPlansCoverageDetail(request: DescribeSavingsPlansCoverageDetailRequest): DescribeSavingsPlansCoverageDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSavingsPlansCoverageDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSavingsPlansCoverageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', position='Query'),
  periodType: string(name='PeriodType', position='Query'),
  startPeriod: string(name='StartPeriod', position='Query'),
}

model DescribeSavingsPlansCoverageTotalResponseBody = {
  code?: string(name='Code'),
  data?: {
    periodCoverage?: [ 
      {
        percentage?: float(name='Percentage'),
        period?: string(name='Period'),
      }
    ](name='PeriodCoverage'),
    totalCoverage?: {
      coveragePercentage?: float(name='CoveragePercentage'),
      deductAmount?: float(name='DeductAmount'),
    }(name='TotalCoverage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSavingsPlansCoverageTotalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSavingsPlansCoverageTotalResponseBody(name='body'),
}

async function describeSavingsPlansCoverageTotal(request: DescribeSavingsPlansCoverageTotalRequest): DescribeSavingsPlansCoverageTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSavingsPlansCoverageTotal', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSavingsPlansUsageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  periodType: string(name='PeriodType', position='Query'),
  startPeriod: string(name='StartPeriod', position='Query'),
  token?: string(name='Token', position='Query'),
}

model DescribeSavingsPlansUsageDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        currency?: string(name='Currency'),
        deductValue?: float(name='DeductValue'),
        endPeriod?: string(name='EndPeriod'),
        instanceId?: string(name='InstanceId'),
        poolValue?: float(name='PoolValue'),
        postpaidCost?: float(name='PostpaidCost'),
        savedCost?: float(name='SavedCost'),
        startPeriod?: string(name='StartPeriod'),
        status?: string(name='Status'),
        type?: string(name='Type'),
        usagePercentage?: float(name='UsagePercentage'),
        userId?: long(name='UserId'),
        userName?: string(name='UserName'),
      }
    ](name='Items'),
    nextToken?: string(name='NextToken'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSavingsPlansUsageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSavingsPlansUsageDetailResponseBody(name='body'),
}

async function describeSavingsPlansUsageDetail(request: DescribeSavingsPlansUsageDetailRequest): DescribeSavingsPlansUsageDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSavingsPlansUsageDetail', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSavingsPlansUsageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  endPeriod?: string(name='EndPeriod', position='Query'),
  periodType: string(name='PeriodType', position='Query'),
  startPeriod: string(name='StartPeriod', position='Query'),
}

model DescribeSavingsPlansUsageTotalResponseBody = {
  code?: string(name='Code'),
  data?: {
    periodCoverage?: [ 
      {
        percentage?: float(name='Percentage'),
        period?: string(name='Period'),
      }
    ](name='PeriodCoverage'),
    totalUsage?: {
      poolValue?: float(name='PoolValue'),
      postpaidCost?: float(name='PostpaidCost'),
      savedCost?: float(name='SavedCost'),
      usagePercentage?: float(name='UsagePercentage'),
    }(name='TotalUsage'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSavingsPlansUsageTotalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSavingsPlansUsageTotalResponseBody(name='body'),
}

async function describeSavingsPlansUsageTotal(request: DescribeSavingsPlansUsageTotalRequest): DescribeSavingsPlansUsageTotalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSavingsPlansUsageTotal', 'POST', '/', 'json', false, 'json', request);
}

model DescribeSplitItemBillRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', position='Query'),
  billingDate?: string(name='BillingDate', position='Query'),
  granularity?: string(name='Granularity', position='Query'),
  instanceID?: string(name='InstanceID', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  splitItemID?: string(name='SplitItemID', position='Query'),
  subscriptionType?: string(name='SubscriptionType', position='Query'),
  tagFilter?: [ 
    {
      tagKey?: string(name='TagKey'),
      tagValues?: [ string ](name='TagValues'),
    }
  ](name='TagFilter', position='Query'),
}

model DescribeSplitItemBillResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountID?: string(name='AccountID'),
    accountName?: string(name='AccountName'),
    billingCycle?: string(name='BillingCycle'),
    items?: [ 
      {
        adjustAmount?: float(name='AdjustAmount'),
        billAccountID?: string(name='BillAccountID'),
        billAccountName?: string(name='BillAccountName'),
        billingDate?: string(name='BillingDate'),
        billingItem?: string(name='BillingItem'),
        billingItemCode?: string(name='BillingItemCode'),
        billingType?: string(name='BillingType'),
        bizType?: string(name='BizType'),
        cashAmount?: float(name='CashAmount'),
        commodityCode?: string(name='CommodityCode'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage'),
        instanceConfig?: string(name='InstanceConfig'),
        instanceID?: string(name='InstanceID'),
        instanceSpec?: string(name='InstanceSpec'),
        internetIP?: string(name='InternetIP'),
        intranetIP?: string(name='IntranetIP'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        item?: string(name='Item'),
        itemName?: string(name='ItemName'),
        listPrice?: string(name='ListPrice'),
        listPriceUnit?: string(name='ListPriceUnit'),
        nickName?: string(name='NickName'),
        outstandingAmount?: float(name='OutstandingAmount'),
        ownerID?: string(name='OwnerID'),
        paymentAmount?: float(name='PaymentAmount'),
        pipCode?: string(name='PipCode'),
        pretaxAmount?: float(name='PretaxAmount'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType'),
        region?: string(name='Region'),
        resourceGroup?: string(name='ResourceGroup'),
        servicePeriod?: string(name='ServicePeriod'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        splitAccountID?: string(name='SplitAccountID'),
        splitAccountName?: string(name='SplitAccountName'),
        splitBillingCycle?: string(name='SplitBillingCycle'),
        splitBillingDate?: string(name='SplitBillingDate'),
        splitCommodityCode?: string(name='SplitCommodityCode'),
        splitItemID?: string(name='SplitItemID'),
        splitItemName?: string(name='SplitItemName'),
        splitProductDetail?: string(name='SplitProductDetail'),
        subscriptionType?: string(name='SubscriptionType'),
        tag?: string(name='Tag'),
        usage?: string(name='Usage'),
        usageUnit?: string(name='UsageUnit'),
        zone?: string(name='Zone'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults'),
    nextToken?: string(name='NextToken'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model DescribeSplitItemBillResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSplitItemBillResponseBody(name='body'),
}

async function describeSplitItemBill(request: DescribeSplitItemBillRequest): DescribeSplitItemBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeSplitItemBill', 'POST', '/', 'json', false, 'json', request);
}

model EnableBillGenerationRequest {
  ownerId: long(name='OwnerId', position='Query'),
  productCode: string(name='ProductCode', position='Query'),
}

model EnableBillGenerationResponseBody = {
  code?: string(name='Code'),
  data?: {
    boolean?: boolean(name='Boolean'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model EnableBillGenerationResponse = {
  headers: map[string]string(name='headers'),
  body: EnableBillGenerationResponseBody(name='body'),
}

async function enableBillGeneration(request: EnableBillGenerationRequest): EnableBillGenerationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'EnableBillGeneration', 'POST', '/', 'json', false, 'json', request);
}

model GetAccountRelationRequest {
  relationId?: long(name='RelationId', description='relationId', position='Query'),
  requestId?: string(name='RequestId', description='requestId', position='Query'),
}

model GetAccountRelationResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    childUserId?: long(name='ChildUserId'),
    endTime?: long(name='EndTime'),
    gmtModified?: long(name='GmtModified'),
    id?: long(name='Id', description='id'),
    parentUserId?: long(name='ParentUserId', description='parentUserId'),
    startTime?: long(name='StartTime'),
    status?: string(name='Status'),
    type?: string(name='Type', description='type'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model GetAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  body: GetAccountRelationResponseBody(name='body'),
}

async function getAccountRelation(request: GetAccountRelationRequest): GetAccountRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetAccountRelation', 'GET', '/', 'json', false, 'json', request);
}

model GetCustomerAccountInfoRequest {
  ownerId: long(name='OwnerId', position='Query'),
}

model GetCustomerAccountInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountType?: string(name='AccountType'),
    creditLimitStatus?: string(name='CreditLimitStatus'),
    hostingStatus?: string(name='HostingStatus'),
    isCertified?: boolean(name='IsCertified'),
    loginEmail?: string(name='LoginEmail'),
    mpk?: long(name='Mpk'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCustomerAccountInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomerAccountInfoResponseBody(name='body'),
}

async function getCustomerAccountInfo(request: GetCustomerAccountInfoRequest): GetCustomerAccountInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomerAccountInfo', 'POST', '/', 'json', false, 'json', request);
}

model GetCustomerListRequest {
}

model GetCustomerListResponseBody = {
  code?: string(name='Code'),
  data?: {
    uidList?: [ string ](name='UidList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetCustomerListResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomerListResponseBody(name='body'),
}

async function getCustomerList(request: GetCustomerListRequest): GetCustomerListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetCustomerList', 'POST', '/', 'json', false, 'json', request);
}

model GetOrderDetailRequest {
  orderId: string(name='OrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
}

model GetOrderDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    hostName?: string(name='HostName'),
    orderList?: {
      order?: [ 
      {
        afterTaxAmount?: string(name='AfterTaxAmount'),
        commodityCode?: string(name='CommodityCode'),
        config?: string(name='Config'),
        createTime?: string(name='CreateTime'),
        currency?: string(name='Currency'),
        instanceIDs?: string(name='InstanceIDs'),
        operator?: string(name='Operator'),
        orderId?: string(name='OrderId'),
        orderSubType?: string(name='OrderSubType'),
        orderType?: string(name='OrderType'),
        originalConfig?: string(name='OriginalConfig'),
        paymentCurrency?: string(name='PaymentCurrency'),
        paymentStatus?: string(name='PaymentStatus'),
        paymentTime?: string(name='PaymentTime'),
        pretaxAmount?: string(name='PretaxAmount'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
        productType?: string(name='ProductType'),
        quantity?: string(name='Quantity'),
        region?: string(name='Region'),
        relatedOrderId?: string(name='RelatedOrderId'),
        subOrderId?: string(name='SubOrderId'),
        subscriptionType?: string(name='SubscriptionType'),
        tax?: string(name='Tax'),
        usageEndTime?: string(name='UsageEndTime'),
        usageStartTime?: string(name='UsageStartTime'),
      }
    ](name='Order')
    }(name='OrderList'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrderDetailResponseBody(name='body'),
}

async function getOrderDetail(request: GetOrderDetailRequest): GetOrderDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOrderDetail', 'POST', '/', 'json', false, 'json', request);
}

model GetPayAsYouGoPriceRequest {
  moduleList: [ 
    {
      config: string(name='Config'),
      moduleCode: string(name='ModuleCode'),
      priceType: string(name='PriceType'),
    }
  ](name='ModuleList', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productCode: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  region?: string(name='Region', position='Query'),
  subscriptionType: string(name='SubscriptionType', position='Query'),
}

model GetPayAsYouGoPriceResponseBody = {
  code?: string(name='Code'),
  data?: {
    currency?: string(name='Currency'),
    moduleDetails?: {
      moduleDetail?: [ 
      {
        costAfterDiscount?: float(name='CostAfterDiscount'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        moduleCode?: string(name='ModuleCode'),
        originalCost?: float(name='OriginalCost'),
        unitPrice?: float(name='UnitPrice'),
      }
    ](name='ModuleDetail')
    }(name='ModuleDetails'),
    promotionDetails?: {
      promotionDetail?: [ 
      {
        promotionDesc?: string(name='PromotionDesc'),
        promotionId?: long(name='PromotionId'),
        promotionName?: string(name='PromotionName'),
      }
    ](name='PromotionDetail')
    }(name='PromotionDetails'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetPayAsYouGoPriceResponse = {
  headers: map[string]string(name='headers'),
  body: GetPayAsYouGoPriceResponseBody(name='body'),
}

async function getPayAsYouGoPrice(request: GetPayAsYouGoPriceRequest): GetPayAsYouGoPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPayAsYouGoPrice', 'POST', '/', 'json', false, 'json', request);
}

model GetResourcePackagePriceRequest {
  duration?: int32(name='Duration', position='Query'),
  effectiveDate?: string(name='EffectiveDate', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  packageType?: string(name='PackageType', position='Query'),
  pricingCycle?: string(name='PricingCycle', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  specification?: string(name='Specification', position='Query'),
}

model GetResourcePackagePriceResponseBody = {
  code?: string(name='Code'),
  data?: {
    currency?: string(name='Currency'),
    discountPrice?: float(name='DiscountPrice'),
    originalPrice?: float(name='OriginalPrice'),
    promotions?: {
      promotion?: [ 
      {
        id?: long(name='Id'),
        name?: string(name='Name'),
      }
    ](name='Promotion')
    }(name='Promotions'),
    tradePrice?: float(name='TradePrice'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetResourcePackagePriceResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourcePackagePriceResponseBody(name='body'),
}

async function getResourcePackagePrice(request: GetResourcePackagePriceRequest): GetResourcePackagePriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetResourcePackagePrice', 'POST', '/', 'json', false, 'json', request);
}

model GetSubscriptionPriceRequest {
  instanceId?: string(name='InstanceId', position='Query'),
  moduleList: [ 
    {
      config: string(name='Config'),
      moduleCode: string(name='ModuleCode'),
      moduleStatus?: int32(name='ModuleStatus'),
      tag?: string(name='Tag'),
    }
  ](name='ModuleList', position='Query'),
  orderType: string(name='OrderType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productCode: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  quantity?: int32(name='Quantity', position='Query'),
  region?: string(name='Region', position='Query'),
  servicePeriodQuantity?: int32(name='ServicePeriodQuantity', position='Query'),
  servicePeriodUnit?: string(name='ServicePeriodUnit', position='Query'),
  subscriptionType: string(name='SubscriptionType', position='Query'),
}

model GetSubscriptionPriceResponseBody = {
  code?: string(name='Code'),
  data?: {
    currency?: string(name='Currency'),
    discountPrice?: float(name='DiscountPrice'),
    moduleDetails?: {
      moduleDetail?: [ 
      {
        costAfterDiscount?: float(name='CostAfterDiscount'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        moduleCode?: string(name='ModuleCode'),
        originalCost?: float(name='OriginalCost'),
        unitPrice?: float(name='UnitPrice'),
      }
    ](name='ModuleDetail')
    }(name='ModuleDetails'),
    originalPrice?: float(name='OriginalPrice'),
    promotionDetails?: {
      promotionDetail?: [ 
      {
        promotionDesc?: string(name='PromotionDesc'),
        promotionId?: long(name='PromotionId'),
        promotionName?: string(name='PromotionName'),
      }
    ](name='PromotionDetail')
    }(name='PromotionDetails'),
    quantity?: int32(name='Quantity'),
    tradePrice?: float(name='TradePrice'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model GetSubscriptionPriceResponse = {
  headers: map[string]string(name='headers'),
  body: GetSubscriptionPriceResponseBody(name='body'),
}

async function getSubscriptionPrice(request: GetSubscriptionPriceRequest): GetSubscriptionPriceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSubscriptionPrice', 'POST', '/', 'json', false, 'json', request);
}

model InquiryPriceRefundInstanceRequest {
  clientToken?: string(name='ClientToken', description='clientToken', position='Query'),
  instanceId?: string(name='InstanceId', description='instanceId', position='Query'),
  productCode?: string(name='ProductCode', description='productCode', position='Query'),
  productType?: string(name='ProductType', description='productType', position='Query'),
}

model InquiryPriceRefundInstanceResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    currency?: string(name='Currency', description='currency'),
    hostId?: string(name='HostId', description='hostId'),
    instanceId?: string(name='InstanceId', description='instanceId'),
    refundAmount?: double(name='RefundAmount', description='refundAmount'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model InquiryPriceRefundInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: InquiryPriceRefundInstanceResponseBody(name='body'),
}

async function inquiryPriceRefundInstance(request: InquiryPriceRefundInstanceRequest): InquiryPriceRefundInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'InquiryPriceRefundInstance', 'POST', '/', 'json', false, 'json', request);
}

model ModifyAccountRelationRequest {
  childNick?: string(name='ChildNick', position='Query'),
  childUserId?: long(name='ChildUserId', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  parentUserId?: long(name='ParentUserId', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  permissionCodes?: [ string ](name='PermissionCodes', position='Query'),
  relationId?: long(name='RelationId', position='Query'),
  relationOperation: string(name='RelationOperation', position='Query'),
  relationType?: string(name='RelationType', position='Query'),
  requestId: string(name='RequestId', position='Query'),
  roleCodes?: [ string ](name='RoleCodes', position='Query'),
}

model ModifyAccountRelationResponseBody = {
  code?: string(name='Code'),
  data?: {
    hostId?: string(name='HostId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountRelationResponseBody(name='body'),
}

async function modifyAccountRelation(request: ModifyAccountRelationRequest): ModifyAccountRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyAccountRelation', 'POST', '/', 'json', false, 'json', request);
}

model ModifyCostUnitRequest {
  unitEntityList?: [ 
    {
      newUnitName: string(name='NewUnitName'),
      ownerUid: long(name='OwnerUid'),
      unitId: long(name='UnitId'),
    }
  ](name='UnitEntityList', position='Query'),
}

model ModifyCostUnitResponseBody = {
  code?: string(name='Code'),
  data?: [ 
    {
      isSuccess?: boolean(name='IsSuccess'),
      ownerUid?: long(name='OwnerUid'),
      unitId?: long(name='UnitId'),
    }
  ](name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyCostUnitResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCostUnitResponseBody(name='body'),
}

async function modifyCostUnit(request: ModifyCostUnitRequest): ModifyCostUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyCostUnit', 'POST', '/', 'json', false, 'json', request);
}

model ModifyInstanceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  modifyType: string(name='ModifyType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  parameter?: [ 
    {
      code: string(name='Code'),
      value: string(name='Value'),
    }
  ](name='Parameter', position='Query'),
  productCode: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  subscriptionType: string(name='SubscriptionType', position='Query'),
}

model ModifyInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    hostId?: string(name='HostId'),
    orderId?: string(name='OrderId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ModifyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceResponseBody(name='body'),
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyInstance', 'POST', '/', 'json', false, 'json', request);
}

model QueryAccountBalanceRequest {
}

model QueryAccountBalanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    availableAmount?: string(name='AvailableAmount'),
    availableCashAmount?: string(name='AvailableCashAmount'),
    creditAmount?: string(name='CreditAmount'),
    currency?: string(name='Currency'),
    mybankCreditAmount?: string(name='MybankCreditAmount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAccountBalanceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAccountBalanceResponseBody(name='body'),
}

async function queryAccountBalance(request: QueryAccountBalanceRequest): QueryAccountBalanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAccountBalance', 'POST', '/', 'json', false, 'json', request);
}

model QueryAccountBillRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', position='Query'),
  billingDate?: string(name='BillingDate', position='Query'),
  granularity?: string(name='Granularity', position='Query'),
  isGroupByProduct?: boolean(name='IsGroupByProduct', position='Query'),
  ownerID?: long(name='OwnerID', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
}

model QueryAccountBillResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountID?: string(name='AccountID'),
    accountName?: string(name='AccountName'),
    billingCycle?: string(name='BillingCycle'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount'),
        billAccountID?: string(name='BillAccountID'),
        billAccountName?: string(name='BillAccountName'),
        billingDate?: string(name='BillingDate'),
        bizType?: string(name='BizType'),
        cashAmount?: float(name='CashAmount'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        outstandingAmount?: float(name='OutstandingAmount'),
        ownerID?: string(name='OwnerID'),
        ownerName?: string(name='OwnerName'),
        paymentAmount?: float(name='PaymentAmount'),
        pipCode?: string(name='PipCode'),
        pretaxAmount?: float(name='PretaxAmount'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
        productName?: string(name='ProductName'),
        subscriptionType?: string(name='SubscriptionType'),
      }
    ](name='Item')
    }(name='Items'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAccountBillResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAccountBillResponseBody(name='body'),
}

async function queryAccountBill(request: QueryAccountBillRequest): QueryAccountBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAccountBill', 'POST', '/', 'json', false, 'json', request);
}

model QueryAccountTransactionDetailsRequest {
  createTimeEnd?: string(name='CreateTimeEnd', position='Query'),
  createTimeStart?: string(name='CreateTimeStart', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  recordID?: string(name='RecordID', position='Query'),
  transactionChannel?: string(name='TransactionChannel', position='Query'),
  transactionChannelSN?: string(name='TransactionChannelSN', position='Query'),
  transactionNumber?: string(name='TransactionNumber', position='Query'),
  transactionType?: string(name='TransactionType', position='Query'),
}

model QueryAccountTransactionDetailsResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountName?: string(name='AccountName'),
    accountTransactionsList?: {
      accountTransactionsList?: [ 
      {
        amount?: string(name='Amount'),
        balance?: string(name='Balance'),
        billingCycle?: string(name='BillingCycle'),
        fundType?: string(name='FundType'),
        recordID?: string(name='RecordID'),
        remarks?: string(name='Remarks'),
        transactionAccount?: string(name='TransactionAccount'),
        transactionChannel?: string(name='TransactionChannel'),
        transactionChannelSN?: string(name='TransactionChannelSN'),
        transactionFlow?: string(name='TransactionFlow'),
        transactionNumber?: string(name='TransactionNumber'),
        transactionTime?: string(name='TransactionTime'),
        transactionType?: string(name='TransactionType'),
      }
    ](name='AccountTransactionsList')
    }(name='AccountTransactionsList'),
    maxResults?: int32(name='MaxResults'),
    nextToken?: string(name='NextToken'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAccountTransactionDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAccountTransactionDetailsResponseBody(name='body'),
}

async function queryAccountTransactionDetails(request: QueryAccountTransactionDetailsRequest): QueryAccountTransactionDetailsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAccountTransactionDetails', 'POST', '/', 'json', false, 'json', request);
}

model QueryAccountTransactionsRequest {
  createTimeEnd?: string(name='CreateTimeEnd', position='Query'),
  createTimeStart?: string(name='CreateTimeStart', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  recordID?: string(name='RecordID', position='Query'),
  transactionChannel?: string(name='TransactionChannel', position='Query'),
  transactionChannelSN?: string(name='TransactionChannelSN', position='Query'),
  transactionFlow?: string(name='TransactionFlow', position='Query'),
  transactionNumber?: string(name='TransactionNumber', position='Query'),
  transactionType?: string(name='TransactionType', position='Query'),
}

model QueryAccountTransactionsResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountName?: string(name='AccountName'),
    accountTransactionsList?: {
      accountTransactionsList?: [ 
      {
        amount?: string(name='Amount'),
        balance?: string(name='Balance'),
        billingCycle?: string(name='BillingCycle'),
        fundType?: string(name='FundType'),
        recordID?: string(name='RecordID'),
        remarks?: string(name='Remarks'),
        transactionAccount?: string(name='TransactionAccount'),
        transactionChannel?: string(name='TransactionChannel'),
        transactionChannelSN?: string(name='TransactionChannelSN'),
        transactionFlow?: string(name='TransactionFlow'),
        transactionNumber?: string(name='TransactionNumber'),
        transactionTime?: string(name='TransactionTime'),
        transactionType?: string(name='TransactionType'),
      }
    ](name='AccountTransactionsList')
    }(name='AccountTransactionsList'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAccountTransactionsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAccountTransactionsResponseBody(name='body'),
}

async function queryAccountTransactions(request: QueryAccountTransactionsRequest): QueryAccountTransactionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAccountTransactions', 'POST', '/', 'json', false, 'json', request);
}

model QueryAvailableInstancesRequest {
  createTimeEnd?: string(name='CreateTimeEnd', position='Query'),
  createTimeStart?: string(name='CreateTimeStart', position='Query'),
  endTimeEnd?: string(name='EndTimeEnd', position='Query'),
  endTimeStart?: string(name='EndTimeStart', position='Query'),
  instanceIDs?: string(name='InstanceIDs', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  region?: string(name='Region', position='Query'),
  renewStatus?: string(name='RenewStatus', position='Query'),
  subscriptionType?: string(name='SubscriptionType', position='Query'),
}

model QueryAvailableInstancesResponseBody = {
  code?: string(name='Code'),
  data?: {
    instanceList?: [ 
      {
        createTime?: string(name='CreateTime'),
        endTime?: string(name='EndTime'),
        expectedReleaseTime?: string(name='ExpectedReleaseTime'),
        instanceID?: string(name='InstanceID'),
        ownerId?: long(name='OwnerId'),
        productCode?: string(name='ProductCode'),
        productType?: string(name='ProductType'),
        region?: string(name='Region'),
        releaseTime?: string(name='ReleaseTime'),
        renewStatus?: string(name='RenewStatus'),
        renewalDuration?: int32(name='RenewalDuration'),
        renewalDurationUnit?: string(name='RenewalDurationUnit'),
        seller?: string(name='Seller'),
        sellerId?: long(name='SellerId'),
        status?: string(name='Status'),
        stopTime?: string(name='StopTime'),
        subStatus?: string(name='SubStatus'),
        subscriptionType?: string(name='SubscriptionType'),
      }
    ](name='InstanceList'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryAvailableInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAvailableInstancesResponseBody(name='body'),
}

async function queryAvailableInstances(request: QueryAvailableInstancesRequest): QueryAvailableInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryAvailableInstances', 'POST', '/', 'json', false, 'json', request);
}

model QueryBillRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', position='Query'),
  isDisplayLocalCurrency?: boolean(name='IsDisplayLocalCurrency', position='Query'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  subscriptionType?: string(name='SubscriptionType', position='Query'),
  type?: string(name='Type', position='Query'),
}

model QueryBillResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountID?: string(name='AccountID'),
    accountName?: string(name='AccountName'),
    billingCycle?: string(name='BillingCycle'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount'),
        afterTaxAmount?: float(name='AfterTaxAmount'),
        cashAmount?: float(name='CashAmount'),
        commodityCode?: string(name='CommodityCode'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        item?: string(name='Item'),
        outstandingAmount?: float(name='OutstandingAmount'),
        ownerID?: string(name='OwnerID'),
        paymentAmount?: float(name='PaymentAmount'),
        paymentCurrency?: string(name='PaymentCurrency'),
        paymentTime?: string(name='PaymentTime'),
        paymentTransactionID?: string(name='PaymentTransactionID'),
        pipCode?: string(name='PipCode'),
        pretaxAmount?: float(name='PretaxAmount'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType'),
        recordID?: string(name='RecordID'),
        roundDownDiscount?: string(name='RoundDownDiscount'),
        status?: string(name='Status'),
        subOrderId?: string(name='SubOrderId'),
        subscriptionType?: string(name='SubscriptionType'),
        tax?: float(name='Tax'),
        usageEndTime?: string(name='UsageEndTime'),
        usageStartTime?: string(name='UsageStartTime'),
      }
    ](name='Item')
    }(name='Items'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryBillResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBillResponseBody(name='body'),
}

async function queryBill(request: QueryBillRequest): QueryBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBill', 'POST', '/', 'json', false, 'json', request);
}

model QueryBillOverviewRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  subscriptionType?: string(name='SubscriptionType', position='Query'),
}

model QueryBillOverviewResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountID?: string(name='AccountID'),
    accountName?: string(name='AccountName'),
    billingCycle?: string(name='BillingCycle'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount'),
        afterTaxAmount?: float(name='AfterTaxAmount'),
        billAccountID?: string(name='BillAccountID'),
        billAccountName?: string(name='BillAccountName'),
        bizType?: string(name='BizType'),
        cashAmount?: float(name='CashAmount'),
        commodityCode?: string(name='CommodityCode'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        item?: string(name='Item'),
        outstandingAmount?: float(name='OutstandingAmount'),
        ownerID?: string(name='OwnerID'),
        paymentAmount?: float(name='PaymentAmount'),
        paymentCurrency?: string(name='PaymentCurrency'),
        pipCode?: string(name='PipCode'),
        pretaxAmount?: float(name='PretaxAmount'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType'),
        roundDownDiscount?: string(name='RoundDownDiscount'),
        subscriptionType?: string(name='SubscriptionType'),
        tax?: float(name='Tax'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryBillOverviewResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBillOverviewResponseBody(name='body'),
}

async function queryBillOverview(request: QueryBillOverviewRequest): QueryBillOverviewResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBillOverview', 'POST', '/', 'json', false, 'json', request);
}

model QueryBillToOSSSubscriptionRequest {
}

model QueryBillToOSSSubscriptionResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountID?: string(name='AccountID'),
    accountName?: string(name='AccountName'),
    items?: {
      item?: [ 
      {
        bucketOwnerId?: long(name='BucketOwnerId'),
        bucketPath?: string(name='BucketPath'),
        subscribeBucket?: string(name='SubscribeBucket'),
        subscribeLanguage?: string(name='SubscribeLanguage'),
        subscribeTime?: string(name='SubscribeTime'),
        subscribeType?: string(name='SubscribeType'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryBillToOSSSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBillToOSSSubscriptionResponseBody(name='body'),
}

async function queryBillToOSSSubscription(request: QueryBillToOSSSubscriptionRequest): QueryBillToOSSSubscriptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryBillToOSSSubscription', 'POST', '/', 'json', false, 'json', request);
}

model QueryCashCouponsRequest {
  effectiveOrNot?: boolean(name='EffectiveOrNot', position='Query'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd', position='Query'),
  expiryTimeStart?: string(name='ExpiryTimeStart', position='Query'),
}

model QueryCashCouponsResponseBody = {
  code?: string(name='Code'),
  data?: {
    cashCoupon?: [ 
    {
      applicableProducts?: string(name='ApplicableProducts'),
      applicableScenarios?: string(name='ApplicableScenarios'),
      balance?: string(name='Balance'),
      cashCouponId?: long(name='CashCouponId'),
      cashCouponNo?: string(name='CashCouponNo'),
      effectiveTime?: string(name='EffectiveTime'),
      expiryTime?: string(name='ExpiryTime'),
      grantedTime?: string(name='GrantedTime'),
      nominalValue?: string(name='NominalValue'),
      status?: string(name='Status'),
    }
  ](name='CashCoupon')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCashCouponsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCashCouponsResponseBody(name='body'),
}

async function queryCashCoupons(request: QueryCashCouponsRequest): QueryCashCouponsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCashCoupons', 'POST', '/', 'json', false, 'json', request);
}

model QueryCostUnitRequest {
  ownerUid: long(name='OwnerUid', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  parentUnitId: long(name='ParentUnitId', position='Query'),
}

model QueryCostUnitResponseBody = {
  code?: string(name='Code'),
  data?: {
    costUnitDtoList?: [ 
      {
        ownerUid?: long(name='OwnerUid'),
        parentUnitId?: long(name='ParentUnitId'),
        unitId?: long(name='UnitId'),
        unitName?: string(name='UnitName'),
      }
    ](name='CostUnitDtoList'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCostUnitResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCostUnitResponseBody(name='body'),
}

async function queryCostUnit(request: QueryCostUnitRequest): QueryCostUnitResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCostUnit', 'POST', '/', 'json', false, 'json', request);
}

model QueryCostUnitResourceRequest {
  ownerUid: long(name='OwnerUid', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  unitId: long(name='UnitId', position='Query'),
}

model QueryCostUnitResourceResponseBody = {
  code?: string(name='Code'),
  data?: {
    costUnit?: {
      ownerUid?: long(name='OwnerUid'),
      parentUnitId?: long(name='ParentUnitId'),
      unitId?: long(name='UnitId'),
      unitName?: string(name='UnitName'),
    }(name='CostUnit'),
    costUnitStatisInfo?: {
      resourceCount?: long(name='ResourceCount'),
      resourceGroupCount?: long(name='ResourceGroupCount'),
      subUnitCount?: long(name='SubUnitCount'),
      totalResourceCount?: long(name='TotalResourceCount'),
      totalResourceGroupCount?: long(name='TotalResourceGroupCount'),
      totalUserCount?: long(name='TotalUserCount'),
      userCount?: long(name='UserCount'),
    }(name='CostUnitStatisInfo'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    resourceInstanceDtoList?: [ 
      {
        apportionCode?: string(name='ApportionCode'),
        apportionName?: string(name='ApportionName'),
        commodityCode?: string(name='CommodityCode'),
        commodityName?: string(name='CommodityName'),
        relatedResources?: string(name='RelatedResources'),
        resourceGroup?: string(name='ResourceGroup'),
        resourceId?: string(name='ResourceId'),
        resourceNick?: string(name='ResourceNick'),
        resourceStatus?: string(name='ResourceStatus'),
        resourceTag?: string(name='ResourceTag'),
        resourceType?: string(name='ResourceType'),
        resourceUserId?: long(name='ResourceUserId'),
        resourceUserName?: string(name='ResourceUserName'),
      }
    ](name='ResourceInstanceDtoList'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCostUnitResourceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCostUnitResourceResponseBody(name='body'),
}

async function queryCostUnitResource(request: QueryCostUnitResourceRequest): QueryCostUnitResourceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCostUnitResource', 'POST', '/', 'json', false, 'json', request);
}

model QueryCustomerAddressListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model QueryCustomerAddressListResponseBody = {
  code?: string(name='Code'),
  data?: {
    customerInvoiceAddressList?: {
      customerInvoiceAddress?: [ 
      {
        addressee?: string(name='Addressee'),
        bizType?: string(name='BizType'),
        city?: string(name='City'),
        county?: string(name='County'),
        deliveryAddress?: string(name='DeliveryAddress'),
        id?: long(name='Id'),
        phone?: string(name='Phone'),
        postalCode?: string(name='PostalCode'),
        province?: string(name='Province'),
        street?: string(name='Street'),
        userId?: long(name='UserId'),
        userNick?: string(name='UserNick'),
      }
    ](name='CustomerInvoiceAddress')
    }(name='CustomerInvoiceAddressList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryCustomerAddressListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCustomerAddressListResponseBody(name='body'),
}

async function queryCustomerAddressList(request: QueryCustomerAddressListRequest): QueryCustomerAddressListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryCustomerAddressList', 'POST', '/', 'json', false, 'json', request);
}

model QueryDPUtilizationDetailRequest {
  commodityCode?: string(name='CommodityCode', position='Query'),
  deductedInstanceId?: string(name='DeductedInstanceId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  includeShare: boolean(name='IncludeShare', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceSpec?: string(name='InstanceSpec', position='Query'),
  lastToken?: string(name='LastToken', position='Query'),
  limit?: int32(name='Limit', position='Query'),
  prodCode?: string(name='ProdCode', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model QueryDPUtilizationDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    detailList?: {
      detailList?: [ 
      {
        deductDate?: string(name='DeductDate'),
        deductFactorTotal?: float(name='DeductFactorTotal'),
        deductHours?: float(name='DeductHours'),
        deductMeasure?: float(name='DeductMeasure'),
        deductQuantity?: float(name='DeductQuantity'),
        deductedCommodityCode?: string(name='DeductedCommodityCode'),
        deductedInstanceId?: string(name='DeductedInstanceId'),
        deductedProductDetail?: string(name='DeductedProductDetail'),
        instanceId?: string(name='InstanceId'),
        instanceSpec?: string(name='InstanceSpec'),
        region?: string(name='Region'),
        resCode?: string(name='ResCode'),
        shareUid?: long(name='ShareUid'),
        uid?: long(name='Uid'),
      }
    ](name='DetailList')
    }(name='DetailList'),
    nextToken?: string(name='NextToken'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryDPUtilizationDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDPUtilizationDetailResponseBody(name='body'),
}

async function queryDPUtilizationDetail(request: QueryDPUtilizationDetailRequest): QueryDPUtilizationDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryDPUtilizationDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryEvaluateListRequest {
  billCycle?: string(name='BillCycle', position='Query'),
  bizTypeList?: [ string ](name='BizTypeList', position='Query'),
  endAmount?: long(name='EndAmount', position='Query'),
  endBizTime?: string(name='EndBizTime', position='Query'),
  endSearchTime?: string(name='EndSearchTime', position='Query'),
  outBizId?: string(name='OutBizId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  sortType?: int32(name='SortType', position='Query'),
  startAmount?: long(name='StartAmount', position='Query'),
  startBizTime?: string(name='StartBizTime', position='Query'),
  startSearchTime?: string(name='StartSearchTime', position='Query'),
  type?: int32(name='Type', position='Query'),
}

model QueryEvaluateListResponseBody = {
  code?: string(name='Code'),
  data?: {
    evaluateList?: {
      evaluate?: [ 
      {
        billCycle?: string(name='BillCycle'),
        billId?: long(name='BillId'),
        bizTime?: string(name='BizTime'),
        bizType?: string(name='BizType'),
        canInvoiceAmount?: long(name='CanInvoiceAmount'),
        gmtCreate?: string(name='GmtCreate'),
        gmtModified?: string(name='GmtModified'),
        id?: long(name='Id'),
        invoicedAmount?: long(name='InvoicedAmount'),
        itemId?: long(name='ItemId'),
        name?: string(name='Name'),
        offsetAcceptAmount?: long(name='OffsetAcceptAmount'),
        offsetCostAmount?: long(name='OffsetCostAmount'),
        opId?: string(name='OpId'),
        originalAmount?: long(name='OriginalAmount'),
        outBizId?: string(name='OutBizId'),
        presentAmount?: long(name='PresentAmount'),
        status?: int32(name='Status'),
        type?: int32(name='Type'),
        userId?: long(name='UserId'),
        userNick?: string(name='UserNick'),
      }
    ](name='Evaluate')
    }(name='EvaluateList'),
    hostId?: string(name='HostId'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    totalInvoiceAmount?: long(name='TotalInvoiceAmount'),
    totalUnAppliedInvoiceAmount?: long(name='TotalUnAppliedInvoiceAmount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryEvaluateListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEvaluateListResponseBody(name='body'),
}

async function queryEvaluateList(request: QueryEvaluateListRequest): QueryEvaluateListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryEvaluateList', 'POST', '/', 'json', false, 'json', request);
}

model QueryFinancialAccountInfoRequest {
  userId: long(name='UserId', position='Query'),
}

model QueryFinancialAccountInfoResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountType?: string(name='AccountType'),
    isFinancialAccount?: boolean(name='IsFinancialAccount'),
    memberGroupId?: long(name='MemberGroupId'),
    memberGroupName?: string(name='MemberGroupName'),
    memberNickName?: string(name='MemberNickName'),
    userName?: string(name='UserName'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryFinancialAccountInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFinancialAccountInfoResponseBody(name='body'),
}

async function queryFinancialAccountInfo(request: QueryFinancialAccountInfoRequest): QueryFinancialAccountInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryFinancialAccountInfo', 'POST', '/', 'json', false, 'json', request);
}

model QueryInstanceBillRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', position='Query'),
  billingDate?: string(name='BillingDate', position='Query'),
  granularity?: string(name='Granularity', position='Query'),
  isBillingItem?: boolean(name='IsBillingItem', position='Query'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  subscriptionType?: string(name='SubscriptionType', position='Query'),
}

model QueryInstanceBillResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountID?: string(name='AccountID'),
    accountName?: string(name='AccountName'),
    billingCycle?: string(name='BillingCycle'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount'),
        billingDate?: string(name='BillingDate'),
        billingItem?: string(name='BillingItem'),
        billingType?: string(name='BillingType'),
        cashAmount?: float(name='CashAmount'),
        commodityCode?: string(name='CommodityCode'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage'),
        instanceConfig?: string(name='InstanceConfig'),
        instanceID?: string(name='InstanceID'),
        instanceSpec?: string(name='InstanceSpec'),
        internetIP?: string(name='InternetIP'),
        intranetIP?: string(name='IntranetIP'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        item?: string(name='Item'),
        listPrice?: string(name='ListPrice'),
        listPriceUnit?: string(name='ListPriceUnit'),
        nickName?: string(name='NickName'),
        outstandingAmount?: float(name='OutstandingAmount'),
        ownerID?: string(name='OwnerID'),
        paymentAmount?: float(name='PaymentAmount'),
        pipCode?: string(name='PipCode'),
        pretaxAmount?: float(name='PretaxAmount'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType'),
        region?: string(name='Region'),
        resourceGroup?: string(name='ResourceGroup'),
        servicePeriod?: string(name='ServicePeriod'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        subscriptionType?: string(name='SubscriptionType'),
        tag?: string(name='Tag'),
        usage?: string(name='Usage'),
        usageUnit?: string(name='UsageUnit'),
        zone?: string(name='Zone'),
      }
    ](name='Item')
    }(name='Items'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryInstanceBillResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInstanceBillResponseBody(name='body'),
}

async function queryInstanceBill(request: QueryInstanceBillRequest): QueryInstanceBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInstanceBill', 'POST', '/', 'json', false, 'json', request);
}

model QueryInstanceByTagRequest {
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model QueryInstanceByTagResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag'),
    }
  ](name='TagResource'),
}

model QueryInstanceByTagResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInstanceByTagResponseBody(name='body'),
}

async function queryInstanceByTag(request: QueryInstanceByTagRequest): QueryInstanceByTagResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInstanceByTag', 'POST', '/', 'json', false, 'json', request);
}

model QueryInstanceGaapCostRequest {
  billingCycle: string(name='BillingCycle', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  subscriptionType?: string(name='SubscriptionType', position='Query'),
}

model QueryInstanceGaapCostResponseBody = {
  code?: string(name='Code'),
  data?: {
    hostId?: string(name='HostId'),
    modules?: {
      module?: [ 
      {
        accountingUnit?: string(name='AccountingUnit'),
        billType?: string(name='BillType'),
        billingCycle?: string(name='BillingCycle'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: string(name='DeductedByCashCoupons'),
        deductedByCoupons?: string(name='DeductedByCoupons'),
        deductedByPrepaidCard?: string(name='DeductedByPrepaidCard'),
        gaapDeductedByCashCoupons?: string(name='GaapDeductedByCashCoupons'),
        gaapDeductedByCoupons?: string(name='GaapDeductedByCoupons'),
        gaapDeductedByPrepaidCard?: string(name='GaapDeductedByPrepaidCard'),
        gaapPaymentAmount?: string(name='GaapPaymentAmount'),
        gaapPretaxAmount?: string(name='GaapPretaxAmount'),
        gaapPretaxAmountLocal?: string(name='GaapPretaxAmountLocal'),
        gaapPretaxGrossAmount?: string(name='GaapPretaxGrossAmount'),
        gaapPricingDiscount?: string(name='GaapPricingDiscount'),
        instanceID?: string(name='InstanceID'),
        monthGaapDeductedByCashCoupons?: string(name='MonthGaapDeductedByCashCoupons'),
        monthGaapDeductedByCoupons?: string(name='MonthGaapDeductedByCoupons'),
        monthGaapDeductedByPrepaidCard?: string(name='MonthGaapDeductedByPrepaidCard'),
        monthGaapPaymentAmount?: string(name='MonthGaapPaymentAmount'),
        monthGaapPretaxAmount?: string(name='MonthGaapPretaxAmount'),
        monthGaapPretaxAmountLocal?: string(name='MonthGaapPretaxAmountLocal'),
        monthGaapPretaxGrossAmount?: string(name='MonthGaapPretaxGrossAmount'),
        monthGaapPricingDiscount?: string(name='MonthGaapPricingDiscount'),
        orderId?: string(name='OrderId'),
        orderType?: string(name='OrderType'),
        ownerID?: string(name='OwnerID'),
        payTime?: string(name='PayTime'),
        payerAccount?: string(name='PayerAccount'),
        paymentAmount?: string(name='PaymentAmount'),
        paymentCurrency?: string(name='PaymentCurrency'),
        pretaxAmount?: string(name='PretaxAmount'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount'),
        pricingDiscount?: string(name='PricingDiscount'),
        productCode?: string(name='ProductCode'),
        productType?: string(name='ProductType'),
        region?: string(name='Region'),
        resourceGroup?: string(name='ResourceGroup'),
        subOrderId?: string(name='SubOrderId'),
        subscriptionType?: string(name='SubscriptionType'),
        tag?: string(name='Tag'),
        unallocatedDeductedByCashCoupons?: string(name='UnallocatedDeductedByCashCoupons'),
        unallocatedDeductedByCoupons?: string(name='UnallocatedDeductedByCoupons'),
        unallocatedDeductedByPrepaidCard?: string(name='UnallocatedDeductedByPrepaidCard'),
        unallocatedPaymentAmount?: string(name='UnallocatedPaymentAmount'),
        unallocatedPretaxAmount?: string(name='UnallocatedPretaxAmount'),
        unallocatedPretaxAmountLocal?: string(name='UnallocatedPretaxAmountLocal'),
        unallocatedPretaxGrossAmount?: string(name='UnallocatedPretaxGrossAmount'),
        unallocatedPricingDiscount?: string(name='UnallocatedPricingDiscount'),
        usageEndDate?: string(name='UsageEndDate'),
        usageStartDate?: string(name='UsageStartDate'),
      }
    ](name='Module')
    }(name='Modules'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryInstanceGaapCostResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInstanceGaapCostResponseBody(name='body'),
}

async function queryInstanceGaapCost(request: QueryInstanceGaapCostRequest): QueryInstanceGaapCostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInstanceGaapCost', 'POST', '/', 'json', false, 'json', request);
}

model QueryInvoicingCustomerListRequest {
  ownerId?: long(name='OwnerId', position='Query'),
}

model QueryInvoicingCustomerListResponseBody = {
  code?: string(name='Code'),
  data?: {
    customerInvoiceList?: {
      customerInvoice?: [ 
      {
        adjustType?: long(name='AdjustType'),
        bank?: string(name='Bank'),
        bankNo?: string(name='BankNo'),
        customerType?: long(name='CustomerType'),
        defaultRemark?: string(name='DefaultRemark'),
        endCycle?: long(name='EndCycle'),
        gmtCreate?: string(name='GmtCreate'),
        id?: long(name='Id'),
        invoiceTitle?: string(name='InvoiceTitle'),
        issueType?: long(name='IssueType'),
        operatingLicenseAddress?: string(name='OperatingLicenseAddress'),
        operatingLicensePhone?: string(name='OperatingLicensePhone'),
        registerNo?: string(name='RegisterNo'),
        startCycle?: long(name='StartCycle'),
        status?: long(name='Status'),
        taxationLicense?: string(name='TaxationLicense'),
        taxpayerType?: long(name='TaxpayerType'),
        titleChangeInstructions?: string(name='TitleChangeInstructions'),
        type?: long(name='Type'),
        userId?: long(name='UserId'),
        userNick?: string(name='UserNick'),
      }
    ](name='CustomerInvoice')
    }(name='CustomerInvoiceList'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryInvoicingCustomerListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInvoicingCustomerListResponseBody(name='body'),
}

async function queryInvoicingCustomerList(request: QueryInvoicingCustomerListRequest): QueryInvoicingCustomerListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryInvoicingCustomerList', 'POST', '/', 'json', false, 'json', request);
}

model QueryMonthlyBillRequest {
  billingCycle: string(name='BillingCycle', position='Query'),
}

model QueryMonthlyBillResponseBody = {
  code?: string(name='Code'),
  data?: {
    billingCycle?: string(name='BillingCycle'),
    items?: {
      item?: [ 
      {
        afterTaxAmount?: float(name='AfterTaxAmount'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        item?: string(name='Item'),
        outstandingAmount?: float(name='OutstandingAmount'),
        paymentAmount?: float(name='PaymentAmount'),
        paymentCurrency?: string(name='PaymentCurrency'),
        pretaxAmount?: float(name='PretaxAmount'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
        productType?: string(name='ProductType'),
        solutionCode?: string(name='SolutionCode'),
        solutionName?: string(name='SolutionName'),
        subscriptionType?: string(name='SubscriptionType'),
        tax?: float(name='Tax'),
      }
    ](name='Item')
    }(name='Items'),
    newInvoiceAmount?: float(name='NewInvoiceAmount'),
    outstandingAmount?: float(name='OutstandingAmount'),
    totalOutstandingAmount?: float(name='TotalOutstandingAmount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryMonthlyBillResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMonthlyBillResponseBody(name='body'),
}

async function queryMonthlyBill(request: QueryMonthlyBillRequest): QueryMonthlyBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMonthlyBill', 'POST', '/', 'json', false, 'json', request);
}

model QueryMonthlyInstanceConsumptionRequest {
  billingCycle: string(name='BillingCycle', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  subscriptionType?: string(name='SubscriptionType', position='Query'),
}

model QueryMonthlyInstanceConsumptionResponseBody = {
  code?: string(name='Code'),
  data?: {
    billingCycle?: string(name='BillingCycle'),
    items?: {
      item?: [ 
      {
        afterTaxAmount?: float(name='AfterTaxAmount'),
        currency?: string(name='Currency'),
        discountAmount?: float(name='DiscountAmount'),
        instanceID?: string(name='InstanceID'),
        ownerID?: string(name='OwnerID'),
        payerAccount?: string(name='PayerAccount'),
        paymentCurrency?: string(name='PaymentCurrency'),
        pretaxAmount?: float(name='PretaxAmount'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
        productType?: string(name='ProductType'),
        region?: string(name='Region'),
        resourceGroup?: string(name='ResourceGroup'),
        subscriptionType?: string(name='SubscriptionType'),
        tag?: string(name='Tag'),
        tax?: float(name='Tax'),
      }
    ](name='Item')
    }(name='Items'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryMonthlyInstanceConsumptionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMonthlyInstanceConsumptionResponseBody(name='body'),
}

async function queryMonthlyInstanceConsumption(request: QueryMonthlyInstanceConsumptionRequest): QueryMonthlyInstanceConsumptionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryMonthlyInstanceConsumption', 'POST', '/', 'json', false, 'json', request);
}

model QueryOrdersRequest {
  createTimeEnd?: string(name='CreateTimeEnd', position='Query'),
  createTimeStart?: string(name='CreateTimeStart', position='Query'),
  orderType?: string(name='OrderType', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  paymentStatus?: string(name='PaymentStatus', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  subscriptionType?: string(name='SubscriptionType', position='Query'),
}

model QueryOrdersResponseBody = {
  code?: string(name='Code'),
  data?: {
    hostName?: string(name='HostName'),
    orderList?: {
      order?: [ 
      {
        afterTaxAmount?: string(name='AfterTaxAmount'),
        commodityCode?: string(name='CommodityCode'),
        createTime?: string(name='CreateTime'),
        currency?: string(name='Currency'),
        orderId?: string(name='OrderId'),
        orderType?: string(name='OrderType'),
        paymentCurrency?: string(name='PaymentCurrency'),
        paymentStatus?: string(name='PaymentStatus'),
        paymentTime?: string(name='PaymentTime'),
        pretaxAmount?: string(name='PretaxAmount'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
        productType?: string(name='ProductType'),
        relatedOrderId?: string(name='RelatedOrderId'),
        subscriptionType?: string(name='SubscriptionType'),
        tax?: string(name='Tax'),
      }
    ](name='Order')
    }(name='OrderList'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryOrdersResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOrdersResponseBody(name='body'),
}

async function queryOrders(request: QueryOrdersRequest): QueryOrdersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryOrders', 'POST', '/', 'json', false, 'json', request);
}

model QueryPermissionListRequest {
  relationId: long(name='RelationId', position='Query'),
}

model QueryPermissionListResponseBody = {
  code?: string(name='Code'),
  data?: {
    endTime?: string(name='EndTime'),
    masterId?: long(name='MasterId'),
    memberId?: long(name='MemberId'),
    permissionList?: [ 
      {
        endTime?: string(name='EndTime'),
        permissionCode?: string(name='PermissionCode'),
        permissionName?: string(name='PermissionName'),
        startTime?: string(name='StartTime'),
      }
    ](name='PermissionList'),
    relationType?: string(name='RelationType'),
    setupTime?: string(name='SetupTime'),
    startTime?: string(name='StartTime'),
    state?: string(name='State'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryPermissionListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPermissionListResponseBody(name='body'),
}

async function queryPermissionList(request: QueryPermissionListRequest): QueryPermissionListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPermissionList', 'POST', '/', 'json', false, 'json', request);
}

model QueryPrepaidCardsRequest {
  effectiveOrNot?: boolean(name='EffectiveOrNot', position='Query'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd', position='Query'),
  expiryTimeStart?: string(name='ExpiryTimeStart', position='Query'),
}

model QueryPrepaidCardsResponseBody = {
  code?: string(name='Code'),
  data?: {
    prepaidCard?: [ 
    {
      applicableProducts?: string(name='ApplicableProducts'),
      applicableScenarios?: string(name='ApplicableScenarios'),
      balance?: string(name='Balance'),
      effectiveTime?: string(name='EffectiveTime'),
      expiryTime?: string(name='ExpiryTime'),
      grantedTime?: string(name='GrantedTime'),
      nominalValue?: string(name='NominalValue'),
      prepaidCardId?: long(name='PrepaidCardId'),
      prepaidCardNo?: string(name='PrepaidCardNo'),
      status?: string(name='Status'),
    }
  ](name='PrepaidCard')
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryPrepaidCardsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPrepaidCardsResponseBody(name='body'),
}

async function queryPrepaidCards(request: QueryPrepaidCardsRequest): QueryPrepaidCardsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryPrepaidCards', 'POST', '/', 'json', false, 'json', request);
}

model QueryProductListRequest {
  pageNum: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  queryTotalCount?: boolean(name='QueryTotalCount', position='Query'),
}

model QueryProductListResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    productList?: {
      product?: [ 
      {
        productCode?: string(name='ProductCode'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType'),
        subscriptionType?: string(name='SubscriptionType'),
      }
    ](name='Product')
    }(name='ProductList'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryProductListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductListResponseBody(name='body'),
}

async function queryProductList(request: QueryProductListRequest): QueryProductListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryProductList', 'POST', '/', 'json', false, 'json', request);
}

model QueryRIUtilizationDetailRequest {
  deductedInstanceId?: string(name='DeductedInstanceId', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  instanceSpec?: string(name='InstanceSpec', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  RICommodityCode: string(name='RICommodityCode', position='Query'),
  RIInstanceId?: string(name='RIInstanceId', position='Query'),
  startTime: string(name='StartTime', position='Query'),
}

model QueryRIUtilizationDetailResponseBody = {
  code?: string(name='Code'),
  data?: {
    detailList?: {
      detailList?: [ 
      {
        deductDate?: string(name='DeductDate'),
        deductFactorTotal?: float(name='DeductFactorTotal'),
        deductHours?: string(name='DeductHours'),
        deductQuantity?: float(name='DeductQuantity'),
        deductedCommodityCode?: string(name='DeductedCommodityCode'),
        deductedInstanceId?: string(name='DeductedInstanceId'),
        deductedProductDetail?: string(name='DeductedProductDetail'),
        instanceSpec?: string(name='InstanceSpec'),
        RIInstanceId?: string(name='RIInstanceId'),
      }
    ](name='DetailList')
    }(name='DetailList'),
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRIUtilizationDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRIUtilizationDetailResponseBody(name='body'),
}

async function queryRIUtilizationDetail(request: QueryRIUtilizationDetailRequest): QueryRIUtilizationDetailResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRIUtilizationDetail', 'POST', '/', 'json', false, 'json', request);
}

model QueryRedeemRequest {
  effectiveOrNot?: boolean(name='EffectiveOrNot', position='Query'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd', position='Query'),
  expiryTimeStart?: string(name='ExpiryTimeStart', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
}

model QueryRedeemResponseBody = {
  code?: string(name='Code'),
  data?: {
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    redeem?: {
      redeem?: [ 
      {
        applicableProducts?: string(name='ApplicableProducts'),
        balance?: string(name='Balance'),
        effectiveTime?: string(name='EffectiveTime'),
        expiryTime?: string(name='ExpiryTime'),
        grantedTime?: string(name='GrantedTime'),
        nominalValue?: string(name='NominalValue'),
        redeemId?: string(name='RedeemId'),
        redeemNo?: string(name='RedeemNo'),
        specification?: string(name='Specification'),
        status?: string(name='Status'),
      }
    ](name='Redeem')
    }(name='Redeem'),
    totalCount?: long(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRedeemResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRedeemResponseBody(name='body'),
}

async function queryRedeem(request: QueryRedeemRequest): QueryRedeemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRedeem', 'GET', '/', 'json', false, 'json', request);
}

model QueryRelationListRequest {
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  statusList?: [ string ](name='StatusList', position='Query'),
  userId: long(name='UserId', position='Query'),
}

model QueryRelationListResponseBody = {
  code?: string(name='Code'),
  data?: {
    financialRelationInfoList?: [ 
      {
        accountId?: long(name='AccountId'),
        accountName?: string(name='AccountName'),
        accountNickName?: string(name='AccountNickName'),
        accountType?: string(name='AccountType'),
        endTime?: string(name='EndTime'),
        relationId?: long(name='RelationId'),
        relationType?: string(name='RelationType'),
        setupTime?: string(name='SetupTime'),
        startTime?: string(name='StartTime'),
        state?: string(name='State'),
      }
    ](name='FinancialRelationInfoList'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryRelationListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRelationListResponseBody(name='body'),
}

async function queryRelationList(request: QueryRelationListRequest): QueryRelationListResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryRelationList', 'POST', '/', 'json', false, 'json', request);
}

model QueryResellerAvailableQuotaRequest {
  itemCodes?: string(name='ItemCodes', position='Query'),
  ownerId: long(name='OwnerId', position='Query'),
}

model QueryResellerAvailableQuotaResponseBody = {
  code?: string(name='Code'),
  data?: string(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryResellerAvailableQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: QueryResellerAvailableQuotaResponseBody(name='body'),
}

async function queryResellerAvailableQuota(request: QueryResellerAvailableQuotaRequest): QueryResellerAvailableQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryResellerAvailableQuota', 'POST', '/', 'json', false, 'json', request);
}

model QueryResourcePackageInstancesRequest {
  expiryTimeEnd?: string(name='ExpiryTimeEnd', position='Query'),
  expiryTimeStart?: string(name='ExpiryTimeStart', position='Query'),
  includePartner?: boolean(name='IncludePartner', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
}

model QueryResourcePackageInstancesResponseBody = {
  code?: string(name='Code'),
  data?: {
    hostId?: string(name='HostId'),
    instances?: {
      instance?: [ 
      {
        applicableProducts?: {
          product?: [ string ](name='Product')
        }(name='ApplicableProducts'),
        deductType?: string(name='DeductType'),
        effectiveTime?: string(name='EffectiveTime'),
        expiryTime?: string(name='ExpiryTime'),
        instanceId?: string(name='InstanceId'),
        packageType?: string(name='PackageType'),
        region?: string(name='Region'),
        remainingAmount?: string(name='RemainingAmount'),
        remainingAmountUnit?: string(name='RemainingAmountUnit'),
        remark?: string(name='Remark'),
        status?: string(name='Status'),
        totalAmount?: string(name='TotalAmount'),
        totalAmountUnit?: string(name='TotalAmountUnit'),
      }
    ](name='Instance')
    }(name='Instances'),
    pageNum?: string(name='PageNum'),
    pageSize?: string(name='PageSize'),
    totalCount?: string(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  page?: int32(name='Page'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  total?: int32(name='Total'),
}

model QueryResourcePackageInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryResourcePackageInstancesResponseBody(name='body'),
}

async function queryResourcePackageInstances(request: QueryResourcePackageInstancesRequest): QueryResourcePackageInstancesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryResourcePackageInstances', 'POST', '/', 'json', false, 'json', request);
}

model QuerySavingsPlansDeductLogRequest {
  endTime?: string(name='EndTime', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  instanceType?: string(name='InstanceType', position='Query'),
  locale?: string(name='Locale', position='Query'),
  pageNum?: int32(name='PageNum', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, maximum=100, position='Query'),
  startTime?: string(name='StartTime', position='Query'),
}

model QuerySavingsPlansDeductLogResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        billModule?: string(name='BillModule'),
        deductCommodity?: string(name='DeductCommodity'),
        deductFee?: string(name='DeductFee'),
        deductInstanceId?: string(name='DeductInstanceId'),
        deductRate?: string(name='DeductRate'),
        discountRate?: string(name='DiscountRate'),
        endTime?: string(name='EndTime'),
        instanceId?: string(name='InstanceId'),
        savingsType?: string(name='SavingsType'),
        startTime?: string(name='StartTime'),
        userId?: long(name='UserId'),
      }
    ](name='Items'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySavingsPlansDeductLogResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySavingsPlansDeductLogResponseBody(name='body'),
}

async function querySavingsPlansDeductLog(request: QuerySavingsPlansDeductLogRequest): QuerySavingsPlansDeductLogResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySavingsPlansDeductLog', 'POST', '/', 'json', false, 'json', request);
}

model QuerySavingsPlansInstanceRequest {
  endTime?: string(name='EndTime', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  locale?: string(name='Locale', position='Query'),
  pageNum?: int32(name='PageNum', minimum=1, position='Query'),
  pageSize?: int32(name='PageSize', minimum=1, position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model QuerySavingsPlansInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    items?: [ 
      {
        allocationStatus?: string(name='AllocationStatus'),
        currency?: string(name='Currency'),
        cycle?: string(name='Cycle'),
        endTime?: string(name='EndTime'),
        endTimestamp?: long(name='EndTimestamp'),
        instanceFamily?: string(name='InstanceFamily'),
        instanceId?: string(name='InstanceId'),
        lastBillTotalUsage?: string(name='LastBillTotalUsage'),
        lastBillUtilization?: string(name='LastBillUtilization'),
        payMode?: string(name='PayMode'),
        poolValue?: string(name='PoolValue'),
        prepayFee?: string(name='PrepayFee'),
        region?: string(name='Region'),
        savingsType?: string(name='SavingsType'),
        startTime?: string(name='StartTime'),
        startTimestamp?: long(name='StartTimestamp'),
        status?: string(name='Status'),
        tags?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Tags'),
        totalSave?: string(name='TotalSave'),
        utilization?: string(name='Utilization'),
      }
    ](name='Items'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySavingsPlansInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySavingsPlansInstanceResponseBody(name='body'),
}

async function querySavingsPlansInstance(request: QuerySavingsPlansInstanceRequest): QuerySavingsPlansInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySavingsPlansInstance', 'POST', '/', 'json', false, 'json', request);
}

model QuerySettleBillRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', position='Query'),
  isDisplayLocalCurrency?: boolean(name='IsDisplayLocalCurrency', position='Query'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', position='Query'),
  maxResults?: int32(name='MaxResults', position='Query'),
  nextToken?: string(name='NextToken', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  recordID?: string(name='RecordID', position='Query'),
  subscriptionType?: string(name='SubscriptionType', position='Query'),
  type?: string(name='Type', position='Query'),
}

model QuerySettleBillResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountID?: string(name='AccountID'),
    accountName?: string(name='AccountName'),
    billingCycle?: string(name='BillingCycle'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount'),
        afterTaxAmount?: float(name='AfterTaxAmount'),
        billAccountID?: string(name='BillAccountID'),
        billAccountName?: string(name='BillAccountName'),
        bizType?: string(name='BizType'),
        cashAmount?: float(name='CashAmount'),
        commodityCode?: string(name='CommodityCode'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        item?: string(name='Item'),
        outstandingAmount?: float(name='OutstandingAmount'),
        ownerID?: string(name='OwnerID'),
        paymentAmount?: float(name='PaymentAmount'),
        paymentCurrency?: string(name='PaymentCurrency'),
        paymentTime?: string(name='PaymentTime'),
        paymentTransactionID?: string(name='PaymentTransactionID'),
        pipCode?: string(name='PipCode'),
        pretaxAmount?: float(name='PretaxAmount'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType'),
        recordID?: string(name='RecordID'),
        roundDownDiscount?: string(name='RoundDownDiscount'),
        status?: string(name='Status'),
        subOrderId?: string(name='SubOrderId'),
        subscriptionType?: string(name='SubscriptionType'),
        tax?: float(name='Tax'),
        usageEndTime?: string(name='UsageEndTime'),
        usageStartTime?: string(name='UsageStartTime'),
      }
    ](name='Item')
    }(name='Items'),
    maxResults?: int32(name='MaxResults'),
    nextToken?: string(name='NextToken'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySettleBillResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySettleBillResponseBody(name='body'),
}

async function querySettleBill(request: QuerySettleBillRequest): QuerySettleBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySettleBill', 'POST', '/', 'json', false, 'json', request);
}

model QuerySettlementBillRequest {
  billingCycle: string(name='BillingCycle', position='Query'),
  endTime?: string(name='EndTime', position='Query'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  startTime?: string(name='StartTime', position='Query'),
  subscriptionType?: string(name='SubscriptionType', position='Query'),
  type?: string(name='Type', position='Query'),
}

model QuerySettlementBillResponseBody = {
  code?: string(name='Code'),
  data?: {
    billingCycle?: string(name='BillingCycle'),
    items?: {
      item?: [ 
      {
        accountDiscount?: float(name='AccountDiscount'),
        afterTaxAmount?: float(name='AfterTaxAmount'),
        billID?: string(name='BillID'),
        chargeDiscount?: float(name='ChargeDiscount'),
        clearedTime?: string(name='ClearedTime'),
        config?: string(name='Config'),
        createTime?: string(name='CreateTime'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        invoiceNo?: string(name='InvoiceNo'),
        item?: string(name='Item'),
        linkedCustomerOrderID?: string(name='LinkedCustomerOrderID'),
        mybankPaymentAmount?: float(name='MybankPaymentAmount'),
        orderID?: string(name='OrderID'),
        orderType?: string(name='OrderType'),
        originalOrderID?: string(name='OriginalOrderID'),
        outstandingAmount?: float(name='OutstandingAmount'),
        ownerID?: string(name='OwnerID'),
        payerAccount?: string(name='PayerAccount'),
        paymentAmount?: float(name='PaymentAmount'),
        paymentCurrency?: string(name='PaymentCurrency'),
        paymentTime?: string(name='PaymentTime'),
        pretaxAmount?: float(name='PretaxAmount'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        previousBillingCycleBalance?: float(name='PreviousBillingCycleBalance'),
        productCode?: string(name='ProductCode'),
        productType?: string(name='ProductType'),
        promotion?: string(name='Promotion'),
        quantity?: string(name='Quantity'),
        recordID?: string(name='RecordID'),
        region?: string(name='Region'),
        seller?: string(name='Seller'),
        solutionID?: string(name='SolutionID'),
        solutionName?: string(name='SolutionName'),
        status?: string(name='Status'),
        suborderID?: string(name='SuborderID'),
        subscriptionType?: string(name='SubscriptionType'),
        tax?: float(name='Tax'),
        usageEndTime?: string(name='UsageEndTime'),
        usageStartTime?: string(name='UsageStartTime'),
      }
    ](name='Item')
    }(name='Items'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySettlementBillResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySettlementBillResponseBody(name='body'),
}

async function querySettlementBill(request: QuerySettlementBillRequest): QuerySettlementBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySettlementBill', 'POST', '/', 'json', false, 'json', request);
}

model QuerySplitItemBillRequest {
  billOwnerId?: long(name='BillOwnerId', minimum=-1, maximum=9223372036854775807, position='Query'),
  billingCycle: string(name='BillingCycle', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNum?: int32(name='PageNum', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  subscriptionType?: string(name='SubscriptionType', position='Query'),
}

model QuerySplitItemBillResponseBody = {
  code?: string(name='Code'),
  data?: {
    accountID?: string(name='AccountID'),
    accountName?: string(name='AccountName'),
    billingCycle?: string(name='BillingCycle'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount'),
        billingDate?: string(name='BillingDate'),
        billingItem?: string(name='BillingItem'),
        billingType?: string(name='BillingType'),
        cashAmount?: float(name='CashAmount'),
        commodityCode?: string(name='CommodityCode'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage'),
        instanceConfig?: string(name='InstanceConfig'),
        instanceID?: string(name='InstanceID'),
        instanceSpec?: string(name='InstanceSpec'),
        internetIP?: string(name='InternetIP'),
        intranetIP?: string(name='IntranetIP'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        item?: string(name='Item'),
        listPrice?: string(name='ListPrice'),
        listPriceUnit?: string(name='ListPriceUnit'),
        nickName?: string(name='NickName'),
        outstandingAmount?: float(name='OutstandingAmount'),
        ownerID?: string(name='OwnerID'),
        paymentAmount?: float(name='PaymentAmount'),
        pipCode?: string(name='PipCode'),
        pretaxAmount?: float(name='PretaxAmount'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType'),
        region?: string(name='Region'),
        resourceGroup?: string(name='ResourceGroup'),
        servicePeriod?: string(name='ServicePeriod'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        splitAccountID?: string(name='SplitAccountID'),
        splitAccountName?: string(name='SplitAccountName'),
        splitBillingCycle?: string(name='SplitBillingCycle'),
        splitCommodityCode?: string(name='SplitCommodityCode'),
        splitItemID?: string(name='SplitItemID'),
        splitItemName?: string(name='SplitItemName'),
        splitProductDetail?: string(name='SplitProductDetail'),
        subscriptionType?: string(name='SubscriptionType'),
        tag?: string(name='Tag'),
        usage?: string(name='Usage'),
        usageUnit?: string(name='UsageUnit'),
        zone?: string(name='Zone'),
      }
    ](name='Item')
    }(name='Items'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QuerySplitItemBillResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySplitItemBillResponseBody(name='body'),
}

async function querySplitItemBill(request: QuerySplitItemBillRequest): QuerySplitItemBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QuerySplitItemBill', 'POST', '/', 'json', false, 'json', request);
}

model QueryUserOmsDataRequest {
  dataType: string(name='DataType', position='Query'),
  endTime: string(name='EndTime', position='Query'),
  marker?: string(name='Marker', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  startTime: string(name='StartTime', position='Query'),
  table: string(name='Table', position='Query'),
}

model QueryUserOmsDataResponseBody = {
  code?: string(name='Code'),
  data?: {
    hostId?: string(name='HostId'),
    marker?: string(name='Marker'),
    omsData?: [  map[string]any ](name='OmsData'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryUserOmsDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUserOmsDataResponseBody(name='body'),
}

async function queryUserOmsData(request: QueryUserOmsDataRequest): QueryUserOmsDataResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryUserOmsData', 'POST', '/', 'json', false, 'json', request);
}

model RefundInstanceRequest {
  clientToken?: string(name='ClientToken', description='clientToken', position='Query'),
  immediatelyRelease?: string(name='ImmediatelyRelease', description='immediatelyRelease', position='Query'),
  instanceId?: string(name='InstanceId', description='instanceId', position='Query'),
  productCode?: string(name='ProductCode', description='productCode', position='Query'),
  productType?: string(name='ProductType', description='productType', position='Query'),
}

model RefundInstanceResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    hostId?: string(name='HostId', description='hostId'),
    orderId?: long(name='OrderId', description='orderId'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model RefundInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RefundInstanceResponseBody(name='body'),
}

async function refundInstance(request: RefundInstanceRequest): RefundInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RefundInstance', 'POST', '/', 'json', false, 'json', request);
}

model ReleaseInstanceRequest {
  instanceIds: string(name='InstanceIds', description='instanceIds', position='Query'),
  ownerId: long(name='OwnerId', description='ownerId', position='Query'),
  productCode: string(name='ProductCode', description='productCode', position='Query'),
  productType?: string(name='ProductType', description='productType', position='Query'),
  region?: string(name='Region', description='region', position='Query'),
  renewStatus?: string(name='RenewStatus', description='renewStatus', position='Query'),
  subscriptionType: string(name='SubscriptionType', description='subscriptionType', position='Query'),
}

model ReleaseInstanceResponseBody = {
  code?: string(name='Code', description='code'),
  data?: {
    hostId?: string(name='HostId', description='hostId'),
    releaseResult?: boolean(name='ReleaseResult', description='releaseResult'),
  }(name='Data'),
  message?: string(name='Message', description='message'),
  requestId?: string(name='RequestId', description='requestId'),
  success?: boolean(name='Success', description='success'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReleaseInstance', 'POST', '/', 'json', false, 'json', request);
}

model RelieveAccountRelationRequest {
  childUserId?: long(name='ChildUserId', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  parentUserId?: long(name='ParentUserId', minimum=-9223372036854775808, maximum=9223372036854775807, position='Query'),
  relationId?: long(name='RelationId', position='Query'),
  relationType?: string(name='RelationType', position='Query'),
  requestId: string(name='RequestId', position='Query'),
}

model RelieveAccountRelationResponseBody = {
  code?: string(name='Code'),
  data?: {
    hostId?: string(name='HostId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RelieveAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  body: RelieveAccountRelationResponseBody(name='body'),
}

async function relieveAccountRelation(request: RelieveAccountRelationRequest): RelieveAccountRelationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RelieveAccountRelation', 'POST', '/', 'json', false, 'json', request);
}

model RenewInstanceRequest {
  clientToken?: string(name='ClientToken', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productCode: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  renewPeriod: int32(name='RenewPeriod', position='Query'),
}

model RenewInstanceResponseBody = {
  code?: string(name='Code'),
  data?: {
    orderId?: string(name='OrderId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewInstance', 'POST', '/', 'json', false, 'json', request);
}

model RenewResourcePackageRequest {
  duration: int32(name='Duration', position='Query'),
  effectiveDate?: string(name='EffectiveDate', position='Query'),
  instanceId: string(name='InstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pricingCycle: string(name='PricingCycle', position='Query'),
}

model RenewResourcePackageResponseBody = {
  code?: string(name='Code'),
  data?: {
    instanceId?: string(name='InstanceId'),
    orderId?: long(name='OrderId'),
  }(name='Data'),
  message?: string(name='Message'),
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model RenewResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: RenewResourcePackageResponseBody(name='body'),
}

async function renewResourcePackage(request: RenewResourcePackageRequest): RenewResourcePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RenewResourcePackage', 'POST', '/', 'json', false, 'json', request);
}

model SaveUserCreditRequest {
  avoidExpiration: boolean(name='AvoidExpiration', position='Query'),
  avoidNotification: boolean(name='AvoidNotification', position='Query'),
  avoidPrepaidExpiration: boolean(name='AvoidPrepaidExpiration', position='Query'),
  avoidPrepaidNotification: boolean(name='AvoidPrepaidNotification', position='Query'),
  creditType: string(name='CreditType', position='Query'),
  creditValue: string(name='CreditValue', position='Query'),
  description: string(name='Description', position='Query'),
  operator: string(name='Operator', position='Query'),
}

model SaveUserCreditResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SaveUserCreditResponse = {
  headers: map[string]string(name='headers'),
  body: SaveUserCreditResponseBody(name='body'),
}

async function saveUserCredit(request: SaveUserCreditRequest): SaveUserCreditResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SaveUserCredit', 'POST', '/', 'json', false, 'json', request);
}

model SetAllExpirationDayRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  unifyExpireDay: string(name='UnifyExpireDay', position='Query'),
}

model SetAllExpirationDayResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetAllExpirationDayResponse = {
  headers: map[string]string(name='headers'),
  body: SetAllExpirationDayResponseBody(name='body'),
}

async function setAllExpirationDay(request: SetAllExpirationDayRequest): SetAllExpirationDayResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetAllExpirationDay', 'POST', '/', 'json', false, 'json', request);
}

model SetCreditLabelActionRequest {
  actionType: string(name='ActionType', position='Query'),
  clearCycle?: string(name='ClearCycle', position='Query'),
  creditAmount: string(name='CreditAmount', position='Query'),
  currencyCode?: string(name='CurrencyCode', position='Query'),
  dailyCycle?: string(name='DailyCycle', position='Query'),
  description?: string(name='Description', position='Query'),
  isNeedAddSettleLabel?: string(name='IsNeedAddSettleLabel', position='Query'),
  isNeedAdjustCreditAccount?: string(name='IsNeedAdjustCreditAccount', position='Query'),
  isNeedSaveNotifyRule?: string(name='IsNeedSaveNotifyRule', position='Query'),
  isNeedSetCreditAmount?: string(name='IsNeedSetCreditAmount', position='Query'),
  needNotice?: boolean(name='NeedNotice', position='Query'),
  newCreateMode?: boolean(name='NewCreateMode', position='Query'),
  operator?: string(name='Operator', position='Query'),
  requestId: string(name='RequestId', position='Query'),
  siteCode?: string(name='SiteCode', position='Query'),
  source: string(name='Source', position='Query'),
  uid: string(name='Uid', position='Query'),
}

model SetCreditLabelActionResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetCreditLabelActionResponse = {
  headers: map[string]string(name='headers'),
  body: SetCreditLabelActionResponseBody(name='body'),
}

async function setCreditLabelAction(request: SetCreditLabelActionRequest): SetCreditLabelActionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetCreditLabelAction', 'POST', '/', 'json', false, 'json', request);
}

model SetRenewalRequest {
  instanceIDs: string(name='InstanceIDs', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  productCode?: string(name='ProductCode', position='Query'),
  productType?: string(name='ProductType', position='Query'),
  renewalPeriod?: int32(name='RenewalPeriod', position='Query'),
  renewalPeriodUnit?: string(name='RenewalPeriodUnit', position='Query'),
  renewalStatus: string(name='RenewalStatus', position='Query'),
  subscriptionType?: string(name='SubscriptionType', position='Query'),
}

model SetRenewalResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetRenewalResponse = {
  headers: map[string]string(name='headers'),
  body: SetRenewalResponseBody(name='body'),
}

async function setRenewal(request: SetRenewalRequest): SetRenewalResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetRenewal', 'POST', '/', 'json', false, 'json', request);
}

model SetResellerUserAlarmThresholdRequest {
  alarmThresholds?: string(name='AlarmThresholds', position='Query'),
  alarmType: string(name='AlarmType', position='Query'),
  ownerId: long(name='OwnerId', position='Query'),
}

model SetResellerUserAlarmThresholdResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetResellerUserAlarmThresholdResponse = {
  headers: map[string]string(name='headers'),
  body: SetResellerUserAlarmThresholdResponseBody(name='body'),
}

async function setResellerUserAlarmThreshold(request: SetResellerUserAlarmThresholdRequest): SetResellerUserAlarmThresholdResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetResellerUserAlarmThreshold', 'POST', '/', 'json', false, 'json', request);
}

model SetResellerUserQuotaRequest {
  amount: string(name='Amount', position='Query'),
  currency?: string(name='Currency', position='Query'),
  outBizId?: string(name='OutBizId', position='Query'),
  ownerId: long(name='OwnerId', position='Query'),
}

model SetResellerUserQuotaResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetResellerUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: SetResellerUserQuotaResponseBody(name='body'),
}

async function setResellerUserQuota(request: SetResellerUserQuotaRequest): SetResellerUserQuotaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetResellerUserQuota', 'POST', '/', 'json', false, 'json', request);
}

model SetResellerUserStatusRequest {
  businessType: string(name='BusinessType', position='Query'),
  ownerId: string(name='OwnerId', position='Query'),
  status: string(name='Status', position='Query'),
}

model SetResellerUserStatusResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetResellerUserStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetResellerUserStatusResponseBody(name='body'),
}

async function setResellerUserStatus(request: SetResellerUserStatusRequest): SetResellerUserStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetResellerUserStatus', 'POST', '/', 'json', false, 'json', request);
}

model SubscribeBillToOSSRequest {
  beginBillingCycle?: string(name='BeginBillingCycle', position='Query'),
  bucketOwnerId?: long(name='BucketOwnerId', position='Query'),
  bucketPath?: string(name='BucketPath', description='OSS Bucket存储路径', position='Query'),
  multAccountRelSubscribe?: string(name='MultAccountRelSubscribe', position='Query'),
  subscribeBucket: string(name='SubscribeBucket', position='Query'),
  subscribeType?: string(name='SubscribeType', position='Query'),
}

model SubscribeBillToOSSResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubscribeBillToOSSResponse = {
  headers: map[string]string(name='headers'),
  body: SubscribeBillToOSSResponseBody(name='body'),
}

async function subscribeBillToOSS(request: SubscribeBillToOSSRequest): SubscribeBillToOSSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SubscribeBillToOSS', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UnsubscribeBillToOSSRequest {
  multAccountRelSubscribe?: string(name='MultAccountRelSubscribe', position='Query'),
  subscribeType: string(name='SubscribeType', position='Query'),
}

model UnsubscribeBillToOSSResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnsubscribeBillToOSSResponse = {
  headers: map[string]string(name='headers'),
  body: UnsubscribeBillToOSSResponseBody(name='body'),
}

async function unsubscribeBillToOSS(request: UnsubscribeBillToOSSRequest): UnsubscribeBillToOSSResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UnsubscribeBillToOSS', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  code?: string(name='Code'),
  data?: boolean(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpgradeResourcePackageRequest {
  effectiveDate?: string(name='EffectiveDate', position='Query'),
  instanceId?: string(name='InstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  specification?: string(name='Specification', position='Query'),
}

model UpgradeResourcePackageResponseBody = {
  code?: string(name='Code'),
  data?: {
    instanceId?: string(name='InstanceId'),
    orderId?: long(name='OrderId'),
  }(name='Data'),
  message?: string(name='Message'),
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UpgradeResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeResourcePackageResponseBody(name='body'),
}

async function upgradeResourcePackage(request: UpgradeResourcePackageRequest): UpgradeResourcePackageResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpgradeResourcePackage', 'POST', '/', 'json', false, 'json', request);
}

