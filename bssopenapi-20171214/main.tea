/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'business.aliyuncs.com',
    cn-shanghai = 'business.aliyuncs.com',
    ap-southeast-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-northeast-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-northeast-2 = 'business.ap-southeast-1.aliyuncs.com',
    ap-northeast-2-pop = 'business.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'business.ap-southeast-1.aliyuncs.com',
    cn-beijing = 'business.aliyuncs.com',
    cn-beijing-finance-1 = 'business.aliyuncs.com',
    cn-beijing-finance-pop = 'business.aliyuncs.com',
    cn-beijing-gov-1 = 'business.aliyuncs.com',
    cn-beijing-nu16-b01 = 'business.aliyuncs.com',
    cn-chengdu = 'business.aliyuncs.com',
    cn-edge-1 = 'business.aliyuncs.com',
    cn-fujian = 'business.aliyuncs.com',
    cn-haidian-cm12-c01 = 'business.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'business.aliyuncs.com',
    cn-hangzhou-finance = 'business.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'business.aliyuncs.com',
    cn-hangzhou-test-306 = 'business.aliyuncs.com',
    cn-hongkong = 'business.aliyuncs.com',
    cn-hongkong-finance-pop = 'business.aliyuncs.com',
    cn-huhehaote = 'business.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'business.aliyuncs.com',
    cn-north-2-gov-1 = 'business.aliyuncs.com',
    cn-qingdao = 'business.aliyuncs.com',
    cn-qingdao-nebula = 'business.aliyuncs.com',
    cn-shanghai-et15-b01 = 'business.aliyuncs.com',
    cn-shanghai-et2-b01 = 'business.aliyuncs.com',
    cn-shanghai-finance-1 = 'business.aliyuncs.com',
    cn-shanghai-inner = 'business.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'business.aliyuncs.com',
    cn-shenzhen = 'business.aliyuncs.com',
    cn-shenzhen-finance-1 = 'business.aliyuncs.com',
    cn-shenzhen-inner = 'business.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'business.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'business.aliyuncs.com',
    cn-wuhan = 'business.aliyuncs.com',
    cn-wulanchabu = 'business.aliyuncs.com',
    cn-yushanfang = 'business.aliyuncs.com',
    cn-zhangbei = 'business.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'business.aliyuncs.com',
    cn-zhangjiakou = 'business.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'business.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'business.aliyuncs.com',
    eu-central-1 = 'business.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'business.ap-southeast-1.aliyuncs.com',
    eu-west-1-oxs = 'business.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'business.ap-southeast-1.aliyuncs.com',
    rus-west-1-pop = 'business.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'business.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'business.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('bssopenapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddAccountRelationRequest {
  childNick?: string(name='ChildNick', description='The display name of the member. This helps clarify the scenario in which the account is used.', example='xxx project'),
  childUserId?: long(name='ChildUserId', description='The ID of the Alibaba Cloud account that is used as the member.', example='1512996702208737'),
  parentUserId?: long(name='ParentUserId', description='The ID of the Alibaba Cloud account that is used as the management account.', example='1738376485192612'),
  permissionCodes?: [ string ](name='PermissionCodes', description='The permissions that can be granted to the member. Valid values:

*   SYNCHRONIZE_FINANCE_IDENTITY: allows the credit control identity to be shared with the member.
*   SYNCHRONIZE_FINANCE_DISCOUNT_POLICY_TO_TARGET: allows the discount policy to be shared with the member.
*   FORBID_WITHDRAW_CASH: does not allow the member to withdraw the balance.
*   FORBID_MANAGE_INVOICE: does not allow the member to manage invoices.
*   CHECK_FINANCE_INFO: requests to view information about the financial relationship.
*   MANAGE_TARGET_INVOICE: allows the member to manage invoices.
*   CHECK_TARGET_CONSUMPTION: allows the member to view the bills.', example='CHECK_TARGET_CONSUMPTION'),
  relationType?: string(name='RelationType', description='The type of the financial relationship. Set the value to enterprise_group.', example='enterprise_group'),
  requestId?: string(name='RequestId', description='The unique ID of the request. The ID is used to mark a request and troubleshoot a problem.', example='32324242444'),
  roleCodes?: [ string ](name='RoleCodes', description='The roles that can be assigned to the member. Set the value to trusteeship.', example='trusteeship'),
}

model AddAccountRelationResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  data?: {
    hostId?: string(name='HostId', description='HostId', example='HostId'),
    relationId?: long(name='RelationId', description='The ID of the financial relationship.', example='RelationId'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Message returned'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='Request ID'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model AddAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddAccountRelationResponseBody(name='body'),
}

/**
  * 1\\. For more information about a financial relationship, see [Financial relationships](https://help.aliyun.com/document_detail/100376.html?spm=a2c4g.11186623.6.563.52a83908ypl4yE) or [Financial relationships](https://www.alibabacloud.com/help/en/doc-detail/116383.html). 2. If enterprise names used by the management account and a member for real-name verification are the same, you do not need to call an API operation for confirmation. Otherwise, you must call the ConfirmRelation operation for confirmation.
  *
  * @param request AddAccountRelationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return AddAccountRelationResponse
 */
async function addAccountRelationWithOptions(request: AddAccountRelationRequest, runtime: Util.RuntimeOptions): AddAccountRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.childNick)) {
    query['ChildNick'] = request.childNick;
  }
  if (!Util.isUnset(request.childUserId)) {
    query['ChildUserId'] = request.childUserId;
  }
  if (!Util.isUnset(request.parentUserId)) {
    query['ParentUserId'] = request.parentUserId;
  }
  if (!Util.isUnset(request.permissionCodes)) {
    query['PermissionCodes'] = request.permissionCodes;
  }
  if (!Util.isUnset(request.relationType)) {
    query['RelationType'] = request.relationType;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.roleCodes)) {
    query['RoleCodes'] = request.roleCodes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddAccountRelation',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 1\\. For more information about a financial relationship, see [Financial relationships](https://help.aliyun.com/document_detail/100376.html?spm=a2c4g.11186623.6.563.52a83908ypl4yE) or [Financial relationships](https://www.alibabacloud.com/help/en/doc-detail/116383.html). 2. If enterprise names used by the management account and a member for real-name verification are the same, you do not need to call an API operation for confirmation. Otherwise, you must call the ConfirmRelation operation for confirmation.
  *
  * @param request AddAccountRelationRequest
  * @return AddAccountRelationResponse
 */
async function addAccountRelation(request: AddAccountRelationRequest): AddAccountRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAccountRelationWithOptions(request, runtime);
}

model AllocateCostUnitResourceRequest {
  fromUnitId?: long(name='FromUnitId', description='The ID of the source cost center.

*   A value of 0 indicates that the resources to be transferred have not been allocated to a cost center.
*   A value greater than 0 indicates the ID of an existing cost center.', example='0'),
  fromUnitUserId?: long(name='FromUnitUserId', description='The user ID of the owner of the source cost center.', example='273394581313325532'),
  resourceInstanceList?: [ 
    {
      apportionCode?: string(name='ApportionCode', description='The split item of the shared instance. This parameter is required only for shared instances.

*   Eight cloud services support bill splitting. The commodity codes of the eight services are oss, dcdn, snapshot, vod, cdn, live, cbwp, and pcdn.
*   You can obtain the split item of a shared instance by calling QueryCostUnitResource operation to obtain all resource instances within a cost center.', example='qwer1-cn-beijing'),
      commodityCode?: string(name='CommodityCode', description='The commodity code of the resource instance.', example='oss'),
      resourceId?: string(name='ResourceId', description='The ID of the resource instance.', example='cn-hangzhou;standard'),
      resourceUserId?: long(name='ResourceUserId', description='The user ID of the resource instance owner.', example='273394581313325532'),
    }
  ](name='ResourceInstanceList', description='The resource instances to be transferred.'),
  toUnitId?: long(name='ToUnitId', description='The ID of the destination cost center.

*   A value of -1 indicates that the allocated resources are changed to unallocated.
*   A value greater than 0 indicates the ID of an existing cost center.', example='186419'),
  toUnitUserId?: long(name='ToUnitUserId', description='The user ID of the owner of the destination cost center.', example='241021678450941490'),
}

model AllocateCostUnitResourceResponseBody = {
  code?: string(name='Code', description='The status code.', example='success'),
  data?: {
    isSuccess?: boolean(name='IsSuccess', description='Indicates whether resources are allocated to the specified cost center. Valid values:

*   true: The resources are allocated to the specified cost center.
*   false: The resources fail to be allocated to the specified cost center.', example='true'),
    toUnitId?: long(name='ToUnitId', description='The ID of the destination cost center.', example='32857346527'),
    toUnitUserId?: long(name='ToUnitUserId', description='The user ID of the owner of the destination cost center.', example='34857693874'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='845C629F-47A7-4F46-A470-ED5047C4C250'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='false'),
}

model AllocateCostUnitResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateCostUnitResourceResponseBody(name='body'),
}

async function allocateCostUnitResourceWithOptions(request: AllocateCostUnitResourceRequest, runtime: Util.RuntimeOptions): AllocateCostUnitResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fromUnitId)) {
    query['FromUnitId'] = request.fromUnitId;
  }
  if (!Util.isUnset(request.fromUnitUserId)) {
    query['FromUnitUserId'] = request.fromUnitUserId;
  }
  if (!Util.isUnset(request.resourceInstanceList)) {
    query['ResourceInstanceList'] = request.resourceInstanceList;
  }
  if (!Util.isUnset(request.toUnitId)) {
    query['ToUnitId'] = request.toUnitId;
  }
  if (!Util.isUnset(request.toUnitUserId)) {
    query['ToUnitUserId'] = request.toUnitUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateCostUnitResource',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateCostUnitResource(request: AllocateCostUnitResourceRequest): AllocateCostUnitResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateCostUnitResourceWithOptions(request, runtime);
}

model ApplyInvoiceRequest {
  addressId?: long(name='AddressId', description='The ID of the address to which the invoice is delivered. This parameter is required if the invoice is a paper invoice. Set the ID to the value of the AddressId parameter returned by calling the QueryCustomerAddressList operation.', example='237958367'),
  applyUserNick?: string(name='ApplyUserNick', description='The nickname of the applicant. The system does not verify the nickname.', example='test'),
  customerId?: long(name='CustomerId', description='The ID of the customer. Set the ID to the value of the CustomerId parameter returned by calling the QueryInvoicingCustomerList operation.', example='124132423'),
  invoiceAmount?: long(name='InvoiceAmount', description='The amount of the invoice. Unit: Cent.', example='124132'),
  invoiceByAmount?: boolean(name='InvoiceByAmount', description='Specifies whether to invoice by amount. A value of true indicates that the user applies for the invoice based on the InvoiceAmount parameter. A value of false indicates that the user applies for the invoice based on the total amount of the invoicing items.', example='true'),
  invoicingType?: int32(name='InvoicingType', description='The type of the invoice. Valid values:

*   0: paper invoice
*   1: electronic invoice', example='1'),
  ownerId?: long(name='OwnerId'),
  processWay?: int32(name='ProcessWay', description='The channel that is used to process the invoice. A value of 0 indicates that the invoice is processed by Alibaba Cloud. A value of 1 indicates that the invoice is processed by the tax platform. Set the value to 1.', example='1'),
  selectedIds?: [ long ](name='SelectedIds', description='The IDs of the selected invoicing items. Set the IDs to the IDs returned by calling the QueryEvaluateList operation.', example='384752367'),
  userRemark?: string(name='UserRemark', description='The remarks made by the user.', example='test'),
}

model ApplyInvoiceResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    invoiceApplyId?: long(name='InvoiceApplyId', description='The ID of the application.', example='1323125534'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ApplyInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyInvoiceResponseBody(name='body'),
}

async function applyInvoiceWithOptions(request: ApplyInvoiceRequest, runtime: Util.RuntimeOptions): ApplyInvoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressId)) {
    query['AddressId'] = request.addressId;
  }
  if (!Util.isUnset(request.applyUserNick)) {
    query['ApplyUserNick'] = request.applyUserNick;
  }
  if (!Util.isUnset(request.customerId)) {
    query['CustomerId'] = request.customerId;
  }
  if (!Util.isUnset(request.invoiceAmount)) {
    query['InvoiceAmount'] = request.invoiceAmount;
  }
  if (!Util.isUnset(request.invoiceByAmount)) {
    query['InvoiceByAmount'] = request.invoiceByAmount;
  }
  if (!Util.isUnset(request.invoicingType)) {
    query['InvoicingType'] = request.invoicingType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.processWay)) {
    query['ProcessWay'] = request.processWay;
  }
  if (!Util.isUnset(request.selectedIds)) {
    query['SelectedIds'] = request.selectedIds;
  }
  if (!Util.isUnset(request.userRemark)) {
    query['UserRemark'] = request.userRemark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyInvoice',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyInvoice(request: ApplyInvoiceRequest): ApplyInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyInvoiceWithOptions(request, runtime);
}

model CancelOrderRequest {
  orderId?: string(name='OrderId', description='The ID of the order.', example='73465432785'),
  ownerId?: long(name='OwnerId'),
}

model CancelOrderResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    hostId?: string(name='HostId', description='The ID of the host.', example='cn'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='30D2285E-A848-4ECB-AA74-4954C60858A1'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model CancelOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOrderResponseBody(name='body'),
}

async function cancelOrderWithOptions(request: CancelOrderRequest, runtime: Util.RuntimeOptions): CancelOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelOrder',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelOrder(request: CancelOrderRequest): CancelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOrderWithOptions(request, runtime);
}

model ChangeResellerConsumeAmountRequest {
  adjustType?: string(name='AdjustType', description='The type of the consumption amount adjustment. Valid values: increase: The consumption amount increases because new consumption occurs. decrease: The consumption amount decreases because funds are added to the account. This parameter is required.', example='increase/decrease'),
  amount?: string(name='Amount', description='The amount to be adjusted. Unit: CNY', example='10.00'),
  businessType?: string(name='BusinessType', description='The type of the business.', example='quota_amount_adjust'),
  currency?: string(name='Currency', description='The type of the currency.', example='CNY'),
  extendMap?: string(name='ExtendMap', description='The extended field of a message.', example='{}'),
  outBizId?: string(name='OutBizId', description='The ID of the primary key for external business. The ID is used for idempotence verification.', example='1647396865'),
  ownerId?: long(name='OwnerId'),
  source?: string(name='Source', description='The source of the request. Specify the system name for the parameter.', example='system'),
}

model ChangeResellerConsumeAmountResponseBody = {
  code?: string(name='Code', description='The error code returned if the call failed. For more information, see the "Error codes" section of the topic.', example='200'),
  data?: string(name='Data', description='The consumption quota for the quota ledger after adjustment.', example='300.00'),
  message?: string(name='Message', description='The message returned.', example='successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
  success?: boolean(name='Success', description='Indicates whether the call is successful. A value of true indicates that the call is successful. A value of false indicates that the call failed.', example='true'),
}

model ChangeResellerConsumeAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeResellerConsumeAmountResponseBody(name='body'),
}

async function changeResellerConsumeAmountWithOptions(request: ChangeResellerConsumeAmountRequest, runtime: Util.RuntimeOptions): ChangeResellerConsumeAmountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adjustType)) {
    query['AdjustType'] = request.adjustType;
  }
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.currency)) {
    query['Currency'] = request.currency;
  }
  if (!Util.isUnset(request.extendMap)) {
    query['ExtendMap'] = request.extendMap;
  }
  if (!Util.isUnset(request.outBizId)) {
    query['OutBizId'] = request.outBizId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResellerConsumeAmount',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeResellerConsumeAmount(request: ChangeResellerConsumeAmountRequest): ChangeResellerConsumeAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResellerConsumeAmountWithOptions(request, runtime);
}

model ConfirmRelationRequest {
  childUserId?: long(name='ChildUserId', description='The ID of the Alibaba Cloud account that is used as the member.', example='1512996702208737'),
  confirmCode?: string(name='ConfirmCode', description='The operation to be performed to confirm the invitation. Valid values:

*   child_agree: The member accepts the invitation.
*   child_disagree: The member rejects the invitation.
*   Canceled by the master account: The management account cancels the confirmation.', example='child_agree'),
  parentUserId?: long(name='ParentUserId', description='The ID of the Alibaba Cloud account that is used as the management account.', example='1738376485192612'),
  permissionCodes?: [ string ](name='PermissionCodes', description='The permissions that can be granted to the member. Valid values:

*   SYNCHRONIZE_FINANCE_IDENTITY: allows the credit control identity to be shared with the member.
*   SYNCHRONIZE_FINANCE_DISCOUNT_POLICY_TO_TARGET: allows the discount policy to be shared with the member.
*   FORBID_WITHDRAW_CASH: does not allow the member to withdraw the balance.
*   FORBID_MANAGE_INVOICE: does not allow the member to manage invoices.
*   CHECK_FINANCE_INFO: requests to view information about the financial relationship.
*   MANAGE_TARGET_INVOICE: allows the member to manage invoices.
*   CHECK_TARGET_CONSUMPTION: allows the member to view the bills.', example='SYNCHRONIZE_FINANCE_IDENTITY'),
  relationId?: long(name='RelationId', description='The ID of the financial relationship. Set this parameter to the value of the RelationId response parameter returned by calling the QueryRelationList operation.', example='51463'),
  relationType?: string(name='RelationType', description='The type of the financial relationship. Set the value to enterprise_group.', example='Type of the financial relationship'),
  requestId?: string(name='RequestId', description='The unique ID of the request.', example='request_id'),
}

model ConfirmRelationResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  data?: {
    hostId?: string(name='HostId', description='HostId', example='HostId'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Message returned'),
  requestId?: string(name='RequestId', description='The unique ID of the request.', example='request_id'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ConfirmRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmRelationResponseBody(name='body'),
}

/**
  * 1\\. A member needs to confirm an invitation only if a financial management relationship is established between the management account and the member and enterprise names used by the management account and the member for real-name verification are different. 2. The permissions to be confirmed must be the same as those granted to the member when the management account initiates the invitation.
  *
  * @param request ConfirmRelationRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ConfirmRelationResponse
 */
async function confirmRelationWithOptions(request: ConfirmRelationRequest, runtime: Util.RuntimeOptions): ConfirmRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.childUserId)) {
    query['ChildUserId'] = request.childUserId;
  }
  if (!Util.isUnset(request.confirmCode)) {
    query['ConfirmCode'] = request.confirmCode;
  }
  if (!Util.isUnset(request.parentUserId)) {
    query['ParentUserId'] = request.parentUserId;
  }
  if (!Util.isUnset(request.permissionCodes)) {
    query['PermissionCodes'] = request.permissionCodes;
  }
  if (!Util.isUnset(request.relationId)) {
    query['RelationId'] = request.relationId;
  }
  if (!Util.isUnset(request.relationType)) {
    query['RelationType'] = request.relationType;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmRelation',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 1\\. A member needs to confirm an invitation only if a financial management relationship is established between the management account and the member and enterprise names used by the management account and the member for real-name verification are different. 2. The permissions to be confirmed must be the same as those granted to the member when the management account initiates the invitation.
  *
  * @param request ConfirmRelationRequest
  * @return ConfirmRelationResponse
 */
async function confirmRelation(request: ConfirmRelationRequest): ConfirmRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmRelationWithOptions(request, runtime);
}

model ConvertChargeTypeRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='rm-kasjgfjshgf'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', description='The subscription duration. Unit: months. This parameter is required if you switch the billing method to subscription. Valid values:

*   1 to 9
*   12
*   24
*   36', example='6'),
  productCode?: string(name='ProductCode', description='The code of the service to which the instance belongs.', example='rds'),
  productType?: string(name='ProductType', description='The type of the service to which the instance belongs.', example='rds'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method of the instance. Valid values:

*   Subscription: subscription
*   PayAsYouGo: pay-as-you-go

>  After the call is successful, the billing method of the instance is switched.', example='Subscription'),
}

model ConvertChargeTypeResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    orderId?: string(name='OrderId', description='The ID of the order.', example='202657601410661'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ConvertChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConvertChargeTypeResponseBody(name='body'),
}

async function convertChargeTypeWithOptions(request: ConvertChargeTypeRequest, runtime: Util.RuntimeOptions): ConvertChargeTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConvertChargeType',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function convertChargeType(request: ConvertChargeTypeRequest): ConvertChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return convertChargeTypeWithOptions(request, runtime);
}

model CreateAgAccountRequest {
  accountAttr?: string(name='AccountAttr', description='The attribute of the account. To view the attribute of the account, use the account to log on to the Alibaba Cloud Management Console, move the pointer over the profile picture in the upper-right corner, and then click **Security Settings**.', example='1'),
  cityName?: string(name='CityName', description='The name of the city.', example='Beijing'),
  enterpriseName?: string(name='EnterpriseName', description='The name of the enterprise.', example='Dongguan ChuangNeng Electric Appliance Co., Ltd'),
  firstName?: string(name='FirstName', description='The first name.', example='Zhicheng'),
  lastName?: string(name='LastName', description='The last name.

The last name can be up to 64 characters in length.', example='Wu'),
  loginEmail?: string(name='LoginEmail', description='The email address used to log on to the account.', example='email'),
  nationCode?: string(name='NationCode', description='The country code.', example='CN'),
  postcode?: string(name='Postcode', description='The zip code.', example='350000'),
  provinceName?: string(name='ProvinceName', description='The name of the province. This parameter is optional.', example='Beijing'),
}

model CreateAgAccountResponseBody = {
  agRelationDto?: {
    mpk?: string(name='Mpk', description='The ID of the account that is used to call the CreateAgAccount operation.', example='1785287436011964'),
    pk?: string(name='Pk', description='The ID of the account that is created.', example='1728240534507590'),
    ramAdminRoleName?: string(name='RamAdminRoleName', description='The role of the account that is created.', example='admin-role'),
    type?: string(name='Type', description='The type of the relationship.', example='FINACE_CLOUD'),
  }(name='AgRelationDto', description='The relationship between the account that is used to call the CreateAgAccount operation and the account that is created.'),
  code?: string(name='Code', description='The status code returned.', example='LOGIN_EMAIL_HAS_BEEN_USED'),
  message?: string(name='Message', description='The error message returned.', example='loginEmail=685741089H@chinaunicom.cn,has used'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='EAE08A27-386C-579E-966D-8853EC3C5D0E'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateAgAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAgAccountResponseBody(name='body'),
}

/**
  * You can call this operation to create an account so as to establish a master-member financial relationship.
  *
  * @param request CreateAgAccountRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return CreateAgAccountResponse
 */
async function createAgAccountWithOptions(request: CreateAgAccountRequest, runtime: Util.RuntimeOptions): CreateAgAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountAttr)) {
    query['AccountAttr'] = request.accountAttr;
  }
  if (!Util.isUnset(request.cityName)) {
    query['CityName'] = request.cityName;
  }
  if (!Util.isUnset(request.enterpriseName)) {
    query['EnterpriseName'] = request.enterpriseName;
  }
  if (!Util.isUnset(request.firstName)) {
    query['FirstName'] = request.firstName;
  }
  if (!Util.isUnset(request.lastName)) {
    query['LastName'] = request.lastName;
  }
  if (!Util.isUnset(request.loginEmail)) {
    query['LoginEmail'] = request.loginEmail;
  }
  if (!Util.isUnset(request.nationCode)) {
    query['NationCode'] = request.nationCode;
  }
  if (!Util.isUnset(request.postcode)) {
    query['Postcode'] = request.postcode;
  }
  if (!Util.isUnset(request.provinceName)) {
    query['ProvinceName'] = request.provinceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAgAccount',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to create an account so as to establish a master-member financial relationship.
  *
  * @param request CreateAgAccountRequest
  * @return CreateAgAccountResponse
 */
async function createAgAccount(request: CreateAgAccountRequest): CreateAgAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAgAccountWithOptions(request, runtime);
}

model CreateCostUnitRequest {
  unitEntityList?: [ 
    {
      ownerUid?: long(name='OwnerUid', description='The user ID of the owner of the cost center.', example='982375623'),
      parentUnitId?: long(name='ParentUnitId', description='The ID of the parent cost center. A value of -1 indicates the root cost center.', example='-1'),
      unitName?: string(name='UnitName', description='The name of the cost center.', example='test'),
    }
  ](name='UnitEntityList', description='The list of cost centers.'),
}

model CreateCostUnitResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    costUnitDtoList?: [ 
      {
        ownerUid?: long(name='OwnerUid', description='The user ID of the owner of the cost center.', example='26387563'),
        parentUnitId?: long(name='ParentUnitId', description='The ID of the parent cost center. A value of -1 indicates the root cost center.', example='-1'),
        unitId?: long(name='UnitId', description='The ID of the cost center.', example='84327659328'),
        unitName?: string(name='UnitName', description='The name of the cost center.', example='test'),
      }
    ](name='CostUnitDtoList', description='The list of cost center entities.'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
}

model CreateCostUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCostUnitResponseBody(name='body'),
}

async function createCostUnitWithOptions(request: CreateCostUnitRequest, runtime: Util.RuntimeOptions): CreateCostUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.unitEntityList)) {
    query['UnitEntityList'] = request.unitEntityList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCostUnit',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCostUnit(request: CreateCostUnitRequest): CreateCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCostUnitWithOptions(request, runtime);
}

model CreateInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. The server checks whether a request that uses the same client token has been received. If a request that uses the same client token has been received, the server returns the same request result as the previous request.', example='JASIOFKVNVIXXXXXX'),
  logistics?: string(name='Logistics', description='The logistics address of this order. This parameter is generally valid for physical orders.', example='{"cityCode":"330100","cityName":"Hangzhou","contactName":"Test","countryCode":"","districtName":"Puyan Street","email":"\\*\\*@example.com","mobilePhone":"153564848844","phone":"1234567","provCode":"330000","provName":"Zhejiang","streetCode":"33010610","streetName":"Zhuantang","zipCode":"0000"}'),
  ownerId?: long(name='OwnerId'),
  parameter?: [ 
    {
      code?: string(name='Code', description='The code property of the Nth module. Value of N: 1 to 100. If multiple module property parameters are involved, concatenate multiple parameters based on the value of N in sequence.', example='InstanceType'),
      value?: string(name='Value', description='The value property of the Nth module. Value of N: 1 to 100.', example='disk'),
    }
  ](name='Parameter', description='The details of the modules.'),
  period?: int32(name='Period', description='The subscription duration. Unit: month. The value must be an integral multiple of 12.

>  This parameter is required if you create a subscription instance.', example='12'),
  productCode?: string(name='ProductCode', description='The code of the service to which the instance belongs. You can query the service code by calling the **QueryProductList** operation or viewing **Codes of Alibaba Cloud Services**.', example='rds'),
  productType?: string(name='ProductType', description='The type of the service.', example='rds'),
  renewPeriod?: int32(name='RenewPeriod', description='The auto-renewal period. Unit: month.

>  This parameter is required if the **RenewalStatus** parameter is set to **AutoRenewal**.', example='12'),
  renewalStatus?: string(name='RenewalStatus', description='The renewal method. Valid values:

*   AutoRenewal: The instance is automatically renewed.
*   ManualRenewal: The instance is manually renewed.

Default value: ManualRenewal.', example='ManualRenewal'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: the subscription billing method.
*   PayAsYouGo: the pay-as-you-go billing method.', example='Subscription'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    instanceId?: string(name='InstanceId', description='The ID of the instance for which the order was created.', example='OSSBAG-cn-v1hxxxxx23'),
    orderId?: string(name='OrderId', description='The ID of the order that was created.', example='20240xxxx21'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C880B065-A781-4F19-B6DD-3E0E3B715C64'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.logistics)) {
    query['Logistics'] = request.logistics;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parameter)) {
    query['Parameter'] = request.parameter;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.renewPeriod)) {
    query['RenewPeriod'] = request.renewPeriod;
  }
  if (!Util.isUnset(request.renewalStatus)) {
    query['RenewalStatus'] = request.renewalStatus;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateResellerUserQuotaRequest {
  amount?: string(name='Amount', example='100'),
  currency?: string(name='Currency', example='CNY'),
  outBizId?: string(name='OutBizId', example='7ed0bedc-056e-4a71-9249-4581615c028f'),
  ownerId?: long(name='OwnerId'),
}

model CreateResellerUserQuotaResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model CreateResellerUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResellerUserQuotaResponseBody(name='body'),
}

async function createResellerUserQuotaWithOptions(request: CreateResellerUserQuotaRequest, runtime: Util.RuntimeOptions): CreateResellerUserQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.currency)) {
    query['Currency'] = request.currency;
  }
  if (!Util.isUnset(request.outBizId)) {
    query['OutBizId'] = request.outBizId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateResellerUserQuota',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createResellerUserQuota(request: CreateResellerUserQuotaRequest): CreateResellerUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResellerUserQuotaWithOptions(request, runtime);
}

model CreateResourcePackageRequest {
  duration?: int32(name='Duration', description='The validity period of the resource plan.', example='6'),
  effectiveDate?: string(name='EffectiveDate', description='The time when the resource plan takes effect. If you leave this parameter empty, the resource plan immediately takes effect by default.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-03-03T12:00:00Z'),
  ownerId?: long(name='OwnerId'),
  packageType?: string(name='PackageType', description='The type of the resource plan. Set this parameter to the code of the **resource plan** returned by calling the **DescribeResourcePackageProduct** operation.', example='FPT_ossbag_absolute_Storage_sh'),
  pricingCycle?: string(name='PricingCycle', description='The unit of the validity period of the resource plan. Valid values:

*   Month
*   Year

Default value: Month.', example='Month'),
  productCode?: string(name='ProductCode', description='The code of the service. You can query the code by calling the **QueryProductList** operation or viewing **Codes of Alibaba Cloud services**.', example='ossbag'),
  specification?: string(name='Specification', description='The specifications of the resource plan. Set this parameter to the value of the **specifications** returned by calling the **DescribeResourcePackageProduct** operation.', example='40'),
}

model CreateResourcePackageResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    instanceId?: string(name='InstanceId', description='The ID of the resource plan.', example='OSSBAG-cn-****s'),
    orderId?: long(name='OrderId', description='The ID of the order.', example='202407022550621'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='202407022550621'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model CreateResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResourcePackageResponseBody(name='body'),
}

async function createResourcePackageWithOptions(request: CreateResourcePackageRequest, runtime: Util.RuntimeOptions): CreateResourcePackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.effectiveDate)) {
    query['EffectiveDate'] = request.effectiveDate;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.packageType)) {
    query['PackageType'] = request.packageType;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateResourcePackage',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createResourcePackage(request: CreateResourcePackageRequest): CreateResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourcePackageWithOptions(request, runtime);
}

model CreateSavingsPlansInstanceRequest {
  commodityCode?: string(name='CommodityCode', example='savingplan_common_public_cn'),
  duration?: string(name='Duration', example='1'),
  effectiveDate?: string(name='EffectiveDate', example='2021-12-31T00:00:00Z'),
  extendMap?: map[string]string(name='ExtendMap'),
  payMode?: string(name='PayMode', example='total'),
  poolValue?: string(name='PoolValue', example='0.1'),
  pricingCycle?: string(name='PricingCycle', example='Year'),
  region?: string(name='Region', example='cn-hangzhou'),
  specType?: string(name='SpecType', example='family'),
  specification?: string(name='Specification', example='ecs.g6'),
  type?: string(name='Type', example='univeral'),
}

model CreateSavingsPlansInstanceShrinkRequest {
  commodityCode?: string(name='CommodityCode', example='savingplan_common_public_cn'),
  duration?: string(name='Duration', example='1'),
  effectiveDate?: string(name='EffectiveDate', example='2021-12-31T00:00:00Z'),
  extendMapShrink?: string(name='ExtendMap'),
  payMode?: string(name='PayMode', example='total'),
  poolValue?: string(name='PoolValue', example='0.1'),
  pricingCycle?: string(name='PricingCycle', example='Year'),
  region?: string(name='Region', example='cn-hangzhou'),
  specType?: string(name='SpecType', example='family'),
  specification?: string(name='Specification', example='ecs.g6'),
  type?: string(name='Type', example='univeral'),
}

model CreateSavingsPlansInstanceResponseBody = {
  code?: string(name='Code', example='PARAM_ERROR'),
  data?: {
    orderId?: long(name='OrderId', example='202110260001'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='26dabb0c-8ca0-4aa0-8143-30499f3fe304'),
  success?: boolean(name='Success', example='true'),
}

model CreateSavingsPlansInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSavingsPlansInstanceResponseBody(name='body'),
}

async function createSavingsPlansInstanceWithOptions(tmpReq: CreateSavingsPlansInstanceRequest, runtime: Util.RuntimeOptions): CreateSavingsPlansInstanceResponse {
  Util.validateModel(tmpReq);
  var request = new CreateSavingsPlansInstanceShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.extendMap)) {
    request.extendMapShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.extendMap, 'ExtendMap', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.effectiveDate)) {
    query['EffectiveDate'] = request.effectiveDate;
  }
  if (!Util.isUnset(request.extendMapShrink)) {
    query['ExtendMap'] = request.extendMapShrink;
  }
  if (!Util.isUnset(request.payMode)) {
    query['PayMode'] = request.payMode;
  }
  if (!Util.isUnset(request.poolValue)) {
    query['PoolValue'] = request.poolValue;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.specType)) {
    query['SpecType'] = request.specType;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSavingsPlansInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSavingsPlansInstance(request: CreateSavingsPlansInstanceRequest): CreateSavingsPlansInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSavingsPlansInstanceWithOptions(request, runtime);
}

model DeleteCostUnitRequest {
  ownerUid?: long(name='OwnerUid', description='The user ID of the cost center owner.', example='2135342'),
  unitId?: long(name='UnitId', description='The ID of the cost center. A value of -1 indicates the root cost center.', example='376348'),
}

model DeleteCostUnitResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    isSuccess?: boolean(name='IsSuccess', description='Indicates whether the call is complete.', example='true'),
    ownerUid?: long(name='OwnerUid', description='The user ID of the cost center owner.', example='12431'),
    unitId?: long(name='UnitId', description='The ID of the cost center.', example='123412343'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DeleteCostUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCostUnitResponseBody(name='body'),
}

async function deleteCostUnitWithOptions(request: DeleteCostUnitRequest, runtime: Util.RuntimeOptions): DeleteCostUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerUid)) {
    query['OwnerUid'] = request.ownerUid;
  }
  if (!Util.isUnset(request.unitId)) {
    query['UnitId'] = request.unitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCostUnit',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCostUnit(request: DeleteCostUnitRequest): DeleteCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCostUnitWithOptions(request, runtime);
}

model DescribeCostBudgetsSummaryRequest {
  budgetName?: string(name='BudgetName', description='The name of the budget. Fuzzy match is supported.', example='Annual budget'),
  budgetStatus?: string(name='BudgetStatus', description='The status of the budget. Valid values: overdue and notOverdue. A value of overdue specifies to filter expired budgets. A value of notOverdue specifies to filter budgets that do not expire. By default, if you do not specify this parameter, information about all budgets is to be returned.', example='notOverdue'),
  budgetType?: string(name='BudgetType', description='The type of the budget. Valid values: cost, byquantity, and asset. A value of cost specifies to filter expense budgets. A value of byquantity specifies to filter budgets calculated based on the resource usage. A value of asset specifies to filter usage or coverage budgets. By default, information about all budgets is returned if you do not specify this parameter.', example='cost'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Default value: 10. Maximum value: 10. Minimum value: 1.', example='5'),
  nextToken?: string(name='NextToken', description='The position in which the query starts. You must set this parameter to null or the token that is obtained from the previous query. Otherwise, an error is returned. If you set the NextToken parameter to null, the query starts from the beginning. The default value is null.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6NH0='),
}

model DescribeCostBudgetsSummaryResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='Success'),
  data?: {
    hostId?: string(name='HostId', description='The site of the host.', example='cn'),
    items?: [ 
      {
        budget?: map[string]any(name='Budget', description='The information about the budget. The BudgetCycleType parameter indicates the cycle of the budget. Valid values: daily, monthly, quarterly, and yearly. The TotalBudgetAmount parameter indicates the total budget. The BudgetMemo parameter indicates the remarks of the budget.', example='{           "budgetCycleType": "monthly",           "budgetMemo": "",           "totalBudgetAmount": 220         }'),
        budgetName?: string(name='BudgetName', description='The name of the budget.', example='Annual budget'),
        budgetStatus?: string(name='BudgetStatus', description='The status of the budget.', example='overdue'),
        budgetType?: string(name='BudgetType', description='The type of the budget.', example='cost'),
        calculatedValues?: map[string]any(name='CalculatedValues', description='The information about the estimate-to-actual analysis. The ActualConsumeSum parameter indicates the accumulated actual value. The ActualAddForecastedAmount parameter indicates the sum of accumulated actual value and predicted value. If the BudgetType parameter is set to cost, the sum of actual value and predicted value includes the actual cost incurred from the budget start date to the current date and the predicted cost from the current date to the budget end date. If the BudgetType parameter is set to asset, the sum of actual value and predicted value includes the actual usage or coverage from the budget start date to the budget end date. If the budget end date minus the current date is more than one year, the part that exceeds one year is not included. The ActualAndBudgetComparison parameter indicates the comparison between the actual value and the predicted value. The value of the ActualAndBudgetComparison parameter is calculated based on the following formula: Accumulated actual value/Total budget × 100%.', example='{           "actualConsumeSum": 88.6,           "actualAddForecastedAmount": 89.6,           "actualAndBudgetComparison": "20.73%"         }'),
        consumePeriod?: map[string]any(name='ConsumePeriod', description='The information about the billing cycle. The ConsumePeriodBegin parameter indicates the start date of the budget. The ConsumePeriodEnd parameter indicates the end date of the budget.', example='{           "consumePeriodBegin": "2022-10",           "consumePeriodEnd": "2022-11"         }'),
      }
    ](name='Items', description='The data that is returned.'),
    maxResults?: int32(name='MaxResults', description='The maximum number of entries that are returned.', example='5'),
    nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6NH0='),
    totalCount?: int32(name='TotalCount', description='The total number of entries that are returned.', example='20'),
  }(name='Data', description='The data that is returned.'),
  message?: string(name='Message', description='The error message.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='3BFC23FE-A182-4D96-A1E4-7521B30B8E43'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DescribeCostBudgetsSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCostBudgetsSummaryResponseBody(name='body'),
}

/**
  * This operation is in beta testing and is only available for specific users in the whitelist. Excessive calls may result in performance issues. For example, the response times out.
  *
  * @param request DescribeCostBudgetsSummaryRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeCostBudgetsSummaryResponse
 */
async function describeCostBudgetsSummaryWithOptions(request: DescribeCostBudgetsSummaryRequest, runtime: Util.RuntimeOptions): DescribeCostBudgetsSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.budgetName)) {
    query['BudgetName'] = request.budgetName;
  }
  if (!Util.isUnset(request.budgetStatus)) {
    query['BudgetStatus'] = request.budgetStatus;
  }
  if (!Util.isUnset(request.budgetType)) {
    query['BudgetType'] = request.budgetType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCostBudgetsSummary',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * This operation is in beta testing and is only available for specific users in the whitelist. Excessive calls may result in performance issues. For example, the response times out.
  *
  * @param request DescribeCostBudgetsSummaryRequest
  * @return DescribeCostBudgetsSummaryResponse
 */
async function describeCostBudgetsSummary(request: DescribeCostBudgetsSummaryRequest): DescribeCostBudgetsSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCostBudgetsSummaryWithOptions(request, runtime);
}

model DescribeInstanceAmortizedCostByAmortizationPeriodRequest {
  billOwnerIdList?: [ string ](name='BillOwnerIdList', description='The ID of the member to which the bill belongs. The member ID is used to filter bills. If you specify a value for this parameter, you can query the bills of the specified member. If you leave this parameter empty, the bills of the current account and all members of the current account are queried. You can specify a maximum of 10 IDs.'),
  billUserIdList?: [ string ](name='BillUserIdList', description='The ID of the member that needs to settle the bill. The member ID is used to filter bills. If you specify a value for this parameter, you can query the bills of the specified member account. If you leave this parameter empty, the bills of the current account and all members of the current account are queried by default. You can specify a maximum of 10 IDs.'),
  billingCycle?: string(name='BillingCycle', description='The allocation month. Format: YYYY-MM.', example='2022-10'),
  consumePeriodFilter?: [ string ](name='ConsumePeriodFilter', description='The billing cycle that is used to filter bills. You can specify a maximum of 10 billing cycles.'),
  costUnitCode?: string(name='CostUnitCode', description='The code of the cost center.', example='123#'),
  instanceIdList?: [ string ](name='InstanceIdList', description='The instance ID that is used to filter bills. You can specify multiple instance IDs to query bills of multiple instances. If you leave this parameter empty, the bills of all instances are queried by default. You can specify a maximum of 10 instance IDs.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='20'),
  nextToken?: string(name='NextToken', description='The position from which the query starts. The parameter must be left empty or set to the value of the NextToken parameter returned from the last call. Otherwise, an error is returned. If this parameter is left empty, data is queried from the beginning.', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
  productCode?: string(name='ProductCode', description='The code of the service. You can obtain the value of this parameter by calling the QueryProductList operation or the DescribeResourcePackageProduct operation.', example='rds'),
  productDetail?: string(name='ProductDetail', description='The specific service resource.', example='rds'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: the subscription billing method
*   PayAsYouGo: the pay-as-you-go billing method', example='Subscription'),
}

model DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  data?: {
    accountID?: string(name='AccountID', description='The ID of the account.', example='185766xxxx'),
    accountName?: string(name='AccountName', description='The name of the account.', example='test@test.aliyunid.com'),
    items?: [ 
      {
        amortizationPeriod?: string(name='AmortizationPeriod', description='The allocation month. Format: YYYYMM.', example='202210'),
        amortizationStatus?: string(name='AmortizationStatus', description='The allocation status. Valid values:

*   amortized: allocated
*   unAmortized: not allocated', example='amortized'),
        billAccountID?: long(name='BillAccountID', description='The ID of the account to which the bill belongs.', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', description='The name of the account to which the bill belongs.', example='test@test.aliyunid.com'),
        billOwnerID?: long(name='BillOwnerID', description='The ID of the account to which the resource belongs.', example='185xxxxx489'),
        billOwnerName?: string(name='BillOwnerName', description='The name of the account to which the resource belongs.', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', description='The business type.', example='trusteeship'),
        consumePeriod?: string(name='ConsumePeriod', description='The billing cycle. Format: YYYYMM.', example='202210'),
        costUnit?: string(name='CostUnit', description='The cost center.', example='Not allocated'),
        costUnitCode?: string(name='CostUnitCode', description='The code of the cost center.', example='1234'),
        currentAmortizationDeductedByCashCoupons?: double(name='CurrentAmortizationDeductedByCashCoupons', description='The amount deducted by using vouchers and allocated to the current allocation month.', example='0'),
        currentAmortizationDeductedByCoupons?: double(name='CurrentAmortizationDeductedByCoupons', description='The amount deducted by using coupons and allocated to the current allocation month.', example='0'),
        currentAmortizationDeductedByPrepaidCard?: double(name='CurrentAmortizationDeductedByPrepaidCard', description='The amount deducted by using prepaid cards and allocated to the current allocation month.', example='0'),
        currentAmortizationExpenditureAmount?: double(name='CurrentAmortizationExpenditureAmount', description='The expenditure amount allocated to the current allocation month. Invoicing is supported.', example='0'),
        currentAmortizationInvoiceDiscount?: double(name='CurrentAmortizationInvoiceDiscount', description='The discount amount allocated to the current allocation month.', example='0'),
        currentAmortizationPretaxAmount?: double(name='CurrentAmortizationPretaxAmount', description='The pretax amount allocated to the current allocation month.', example='0'),
        currentAmortizationPretaxGrossAmount?: double(name='CurrentAmortizationPretaxGrossAmount', description='The pretax gross amount allocated to the current allocation month.', example='0'),
        currentAmortizationRoundDownDiscount?: double(name='CurrentAmortizationRoundDownDiscount', description='The round-off amount allocated to the current allocation month.', example='0'),
        deductedByCashCoupons?: double(name='DeductedByCashCoupons', description='The amount deducted by using vouchers.', example='0'),
        deductedByCoupons?: double(name='DeductedByCoupons', description='The amount deducted by using coupons.', example='0'),
        deductedByPrepaidCard?: double(name='DeductedByPrepaidCard', description='The amount deducted by using prepaid cards.', example='0'),
        expenditureAmount?: double(name='ExpenditureAmount', description='The expenditure amount. Invoicing is supported.', example='0'),
        instanceID?: string(name='InstanceID', description='The ID of the instance.', example='i-kjhdskjgshfdlkjfdh'),
        internetIP?: string(name='InternetIP', description='The public IP address of the instance.', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', description='The private IP address of the instance.', example='192.xx.xx.xx'),
        invoiceDiscount?: double(name='InvoiceDiscount', description='The discount amount.', example='0'),
        pretaxAmount?: double(name='PretaxAmount', description='The pretax amount.', example='0'),
        pretaxGrossAmount?: double(name='PretaxGrossAmount', description='The pretax gross amount.', example='0'),
        previouslyAmortizedDeductedByCashCoupons?: double(name='PreviouslyAmortizedDeductedByCashCoupons', description='The amount deducted by using vouchers and allocated before the current allocation month.', example='0'),
        previouslyAmortizedDeductedByCoupons?: double(name='PreviouslyAmortizedDeductedByCoupons', description='The amount deducted by using coupons and allocated before the current allocation month.', example='0'),
        previouslyAmortizedDeductedByPrepaidCard?: double(name='PreviouslyAmortizedDeductedByPrepaidCard', description='The amount deducted by using prepaid cards and allocated before the current allocation month.', example='0'),
        previouslyAmortizedExpenditureAmount?: double(name='PreviouslyAmortizedExpenditureAmount', description='The expenditure amount allocated before the allocation month. Invoicing is supported.', example='0'),
        previouslyAmortizedInvoiceDiscount?: double(name='PreviouslyAmortizedInvoiceDiscount', description='The discount amount allocated before the current allocation month.', example='0'),
        previouslyAmortizedPretaxAmount?: double(name='PreviouslyAmortizedPretaxAmount', description='The pretax amount allocated before the current allocation month.', example='0'),
        previouslyAmortizedPretaxGrossAmount?: double(name='PreviouslyAmortizedPretaxGrossAmount', description='The pretax gross amount allocated before the current allocation month.', example='0'),
        previouslyAmortizedRoundDownDiscount?: double(name='PreviouslyAmortizedRoundDownDiscount', description='The round-off amount allocated before the current allocation month.', example='0'),
        productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
        productDetail?: string(name='ProductDetail', description='The specific service resource.', example='ApsaraDB RDS'),
        productDetailCode?: string(name='ProductDetailCode', description='The code of the specific service resource.', example='rds'),
        productName?: string(name='ProductName', description='The name of the service.', example='ApsaraDB RDS'),
        region?: string(name='Region', description='The region.', example='China (Hangzhou)'),
        remainingAmortizationDeductedByCashCoupons?: double(name='RemainingAmortizationDeductedByCashCoupons', description='The amount deducted by using vouchers and to be allocated to one or more future allocation months.', example='0'),
        remainingAmortizationDeductedByCoupons?: double(name='RemainingAmortizationDeductedByCoupons', description='The amount deducted by using coupons and to be allocated to one or more future allocation months.', example='0'),
        remainingAmortizationDeductedByPrepaidCard?: double(name='RemainingAmortizationDeductedByPrepaidCard', description='The amount deducted by using prepaid cards and to be allocated to one or more future allocation months.', example='0'),
        remainingAmortizationExpenditureAmount?: double(name='RemainingAmortizationExpenditureAmount', description='The expenditure amount to be allocated to one or more future allocation months. Invoicing is supported.', example='0'),
        remainingAmortizationInvoiceDiscount?: double(name='RemainingAmortizationInvoiceDiscount', description='The discount amount to be allocated to one or more future allocation months.', example='0'),
        remainingAmortizationPretaxAmount?: double(name='RemainingAmortizationPretaxAmount', description='The pretax amount to be allocated to one or more future allocation months.', example='0'),
        remainingAmortizationPretaxGrossAmount?: double(name='RemainingAmortizationPretaxGrossAmount', description='The pretax gross amount to be allocated to one or more future allocation months.', example='0'),
        remainingAmortizationRoundDownDiscount?: double(name='RemainingAmortizationRoundDownDiscount', description='The round-off amount to be allocated to one or more future allocation months.', example='0'),
        resourceGroup?: string(name='ResourceGroup', description='The name of the resource group.', example='Default resource group'),
        roundDownDiscount?: double(name='RoundDownDiscount', description='The round-off amount.', example='0'),
        splitAccountName?: string(name='SplitAccountName', description='The name of the account to which the split item belongs.', example='test**1122'),
        splitItemID?: string(name='SplitItemID', description='The ID of the split item.', example='i-28bycvyb4'),
        splitItemName?: string(name='SplitItemName', description='The name of the split item.', example='iZ28bycvyb4Z'),
        splitProductDetail?: string(name='SplitProductDetail', description='The name of the specific service resource to which the split item belongs.', example='rds'),
        subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: the subscription billing method
*   PayAsYouGo: the pay-as-you-go billing method', example='PayAsYouGo'),
        tag?: string(name='Tag', description='The tag of the instance.', example='tag'),
        zone?: string(name='Zone', description='The ID of the zone.', example='cn-hangzhou'),
      }
    ](name='Items', description='The data entries returned.'),
    maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='100'),
    nextToken?: string(name='NextToken', description='The position from which the results started to return. The parameter must be left empty or set to the value of the NextToken parameter returned from the last call. Otherwise, an error is returned. If this parameter is left empty, data is queried from the beginning.', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='100'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DescribeInstanceAmortizedCostByAmortizationPeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody(name='body'),
}

/**
  * You can view and export the allocated costs of the current month after 10:00 on the fourth day of the next month. The allocated costs of a single allocation month may involve orders or bills in different billing cycles. If a historical allocated amount is incorrect, the historical allocated costs need to be adjusted. As a result, the allocated costs displayed for a single allocation month may be different at different time points.
  *
  * @param request DescribeInstanceAmortizedCostByAmortizationPeriodRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceAmortizedCostByAmortizationPeriodResponse
 */
async function describeInstanceAmortizedCostByAmortizationPeriodWithOptions(request: DescribeInstanceAmortizedCostByAmortizationPeriodRequest, runtime: Util.RuntimeOptions): DescribeInstanceAmortizedCostByAmortizationPeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.billOwnerIdList)) {
    body['BillOwnerIdList'] = request.billOwnerIdList;
  }
  if (!Util.isUnset(request.billUserIdList)) {
    body['BillUserIdList'] = request.billUserIdList;
  }
  if (!Util.isUnset(request.billingCycle)) {
    body['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.consumePeriodFilter)) {
    body['ConsumePeriodFilter'] = request.consumePeriodFilter;
  }
  if (!Util.isUnset(request.costUnitCode)) {
    body['CostUnitCode'] = request.costUnitCode;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    body['InstanceIdList'] = request.instanceIdList;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productDetail)) {
    body['ProductDetail'] = request.productDetail;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    body['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAmortizedCostByAmortizationPeriod',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can view and export the allocated costs of the current month after 10:00 on the fourth day of the next month. The allocated costs of a single allocation month may involve orders or bills in different billing cycles. If a historical allocated amount is incorrect, the historical allocated costs need to be adjusted. As a result, the allocated costs displayed for a single allocation month may be different at different time points.
  *
  * @param request DescribeInstanceAmortizedCostByAmortizationPeriodRequest
  * @return DescribeInstanceAmortizedCostByAmortizationPeriodResponse
 */
async function describeInstanceAmortizedCostByAmortizationPeriod(request: DescribeInstanceAmortizedCostByAmortizationPeriodRequest): DescribeInstanceAmortizedCostByAmortizationPeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAmortizedCostByAmortizationPeriodWithOptions(request, runtime);
}

model DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest {
  amortizationDateEnd?: string(name='AmortizationDateEnd', example='2023-05-10'),
  amortizationDateStart?: string(name='AmortizationDateStart', example='2023-05-10'),
  billOwnerIdList?: [ string ](name='BillOwnerIdList'),
  billUserIdList?: [ string ](name='BillUserIdList'),
  billingCycle?: string(name='BillingCycle', example='2023-05'),
  costUnitCode?: string(name='CostUnitCode', example='123#'),
  instanceIdList?: [ string ](name='InstanceIdList'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
  productCode?: string(name='ProductCode', example='rds'),
  productDetail?: string(name='ProductDetail', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountID?: string(name='AccountID', example='185766xxxx'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    hostId?: string(name='HostId', example='cn'),
    items?: [ 
      {
        amortizationPeriod?: string(name='AmortizationPeriod', example='2022-10'),
        amortizationPeriodDay?: string(name='AmortizationPeriodDay', example='2022-10-10'),
        amortizationStatus?: string(name='AmortizationStatus', example='amortized'),
        billAccountID?: long(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billOwnerID?: long(name='BillOwnerID', example='185xxxxx489'),
        billOwnerName?: string(name='BillOwnerName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        consumePeriod?: string(name='ConsumePeriod', example='2022-10'),
        consumePeriodDay?: string(name='ConsumePeriodDay', example='2022-10-10'),
        costUnit?: string(name='CostUnit'),
        costUnitCode?: string(name='CostUnitCode', example='1234'),
        currentAmortizationDeductedByCashCoupons?: double(name='CurrentAmortizationDeductedByCashCoupons', example='0'),
        currentAmortizationDeductedByCoupons?: double(name='CurrentAmortizationDeductedByCoupons', example='0'),
        currentAmortizationDeductedByPrepaidCard?: double(name='CurrentAmortizationDeductedByPrepaidCard', example='0'),
        currentAmortizationExpenditureAmount?: double(name='CurrentAmortizationExpenditureAmount', example='0'),
        currentAmortizationInvoiceDiscount?: double(name='CurrentAmortizationInvoiceDiscount', example='0'),
        currentAmortizationPretaxAmount?: double(name='CurrentAmortizationPretaxAmount', example='0'),
        currentAmortizationPretaxGrossAmount?: double(name='CurrentAmortizationPretaxGrossAmount', example='0'),
        currentAmortizationRoundDownDiscount?: double(name='CurrentAmortizationRoundDownDiscount', example='0'),
        deductedByCashCoupons?: double(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: double(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: double(name='DeductedByPrepaidCard', example='0'),
        expenditureAmount?: double(name='ExpenditureAmount', example='0'),
        instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: double(name='InvoiceDiscount', example='0'),
        pretaxAmount?: double(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: double(name='PretaxGrossAmount', example='0'),
        previouslyAmortizedDeductedByCashCoupons?: double(name='PreviouslyAmortizedDeductedByCashCoupons', example='0'),
        previouslyAmortizedDeductedByCoupons?: double(name='PreviouslyAmortizedDeductedByCoupons', example='0'),
        previouslyAmortizedDeductedByPrepaidCard?: double(name='PreviouslyAmortizedDeductedByPrepaidCard', example='0'),
        previouslyAmortizedExpenditureAmount?: double(name='PreviouslyAmortizedExpenditureAmount', example='0'),
        previouslyAmortizedInvoiceDiscount?: double(name='PreviouslyAmortizedInvoiceDiscount', example='0'),
        previouslyAmortizedPretaxAmount?: double(name='PreviouslyAmortizedPretaxAmount', example='0'),
        previouslyAmortizedPretaxGrossAmount?: double(name='PreviouslyAmortizedPretaxGrossAmount', example='0'),
        previouslyAmortizedRoundDownDiscount?: double(name='PreviouslyAmortizedRoundDownDiscount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productDetailCode?: string(name='ProductDetailCode', example='rds'),
        productName?: string(name='ProductName'),
        region?: string(name='Region'),
        remainingAmortizationDeductedByCashCoupons?: double(name='RemainingAmortizationDeductedByCashCoupons', example='0'),
        remainingAmortizationDeductedByCoupons?: double(name='RemainingAmortizationDeductedByCoupons', example='0'),
        remainingAmortizationDeductedByPrepaidCard?: double(name='RemainingAmortizationDeductedByPrepaidCard', example='0'),
        remainingAmortizationExpenditureAmount?: double(name='RemainingAmortizationExpenditureAmount', example='0'),
        remainingAmortizationInvoiceDiscount?: double(name='RemainingAmortizationInvoiceDiscount', example='0'),
        remainingAmortizationPretaxAmount?: double(name='RemainingAmortizationPretaxAmount', example='0'),
        remainingAmortizationPretaxGrossAmount?: double(name='RemainingAmortizationPretaxGrossAmount', example='0'),
        remainingAmortizationRoundDownDiscount?: double(name='RemainingAmortizationRoundDownDiscount', example='0'),
        resourceGroup?: string(name='ResourceGroup'),
        roundDownDiscount?: double(name='RoundDownDiscount', example='0'),
        splitAccountName?: string(name='SplitAccountName', example='test**1122'),
        splitItemID?: string(name='SplitItemID', example='i-28bycvyb4'),
        splitItemName?: string(name='SplitItemName', example='iZ28bycvyb4Z'),
        splitProductDetail?: string(name='SplitProductDetail', example='rds'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='tag'),
        zone?: string(name='Zone'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='100'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='Successful！'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceAmortizedCostByAmortizationPeriodDateResponseBody(name='body'),
}

async function describeInstanceAmortizedCostByAmortizationPeriodDateWithOptions(request: DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest, runtime: Util.RuntimeOptions): DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.amortizationDateEnd)) {
    body['AmortizationDateEnd'] = request.amortizationDateEnd;
  }
  if (!Util.isUnset(request.amortizationDateStart)) {
    body['AmortizationDateStart'] = request.amortizationDateStart;
  }
  if (!Util.isUnset(request.billOwnerIdList)) {
    body['BillOwnerIdList'] = request.billOwnerIdList;
  }
  if (!Util.isUnset(request.billUserIdList)) {
    body['BillUserIdList'] = request.billUserIdList;
  }
  if (!Util.isUnset(request.billingCycle)) {
    body['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.costUnitCode)) {
    body['CostUnitCode'] = request.costUnitCode;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    body['InstanceIdList'] = request.instanceIdList;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productDetail)) {
    body['ProductDetail'] = request.productDetail;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    body['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAmortizedCostByAmortizationPeriodDate',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceAmortizedCostByAmortizationPeriodDate(request: DescribeInstanceAmortizedCostByAmortizationPeriodDateRequest): DescribeInstanceAmortizedCostByAmortizationPeriodDateResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAmortizedCostByAmortizationPeriodDateWithOptions(request, runtime);
}

model DescribeInstanceAmortizedCostByConsumePeriodRequest {
  amortizationPeriodFilter?: [ string ](name='AmortizationPeriodFilter'),
  billOwnerIdList?: [ string ](name='BillOwnerIdList'),
  billUserIdList?: [ string ](name='BillUserIdList'),
  billingCycle?: string(name='BillingCycle', example='2022-10'),
  costUnitCode?: string(name='CostUnitCode', example='123#'),
  instanceIdList?: [ string ](name='InstanceIdList'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
  productCode?: string(name='ProductCode', example='rds'),
  productDetail?: string(name='ProductDetail', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model DescribeInstanceAmortizedCostByConsumePeriodResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountID?: string(name='AccountID', example='185766xxxx'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    items?: [ 
      {
        amortizationPeriod?: string(name='AmortizationPeriod', example='202210'),
        amortizationStatus?: string(name='AmortizationStatus', example='amortized'),
        billAccountID?: long(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billOwnerID?: long(name='BillOwnerID', example='185xxxxx489'),
        billOwnerName?: string(name='BillOwnerName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        consumePeriod?: string(name='ConsumePeriod', example='202210'),
        costUnit?: string(name='CostUnit'),
        costUnitCode?: string(name='CostUnitCode', example='1234'),
        currentAmortizationDeductedByCashCoupons?: double(name='CurrentAmortizationDeductedByCashCoupons', example='0'),
        currentAmortizationDeductedByCoupons?: double(name='CurrentAmortizationDeductedByCoupons', example='0'),
        currentAmortizationDeductedByPrepaidCard?: double(name='CurrentAmortizationDeductedByPrepaidCard', example='0'),
        currentAmortizationExpenditureAmount?: double(name='CurrentAmortizationExpenditureAmount', example='0'),
        currentAmortizationInvoiceDiscount?: double(name='CurrentAmortizationInvoiceDiscount', example='0'),
        currentAmortizationPretaxAmount?: double(name='CurrentAmortizationPretaxAmount', example='0'),
        currentAmortizationPretaxGrossAmount?: double(name='CurrentAmortizationPretaxGrossAmount', example='0'),
        currentAmortizationRoundDownDiscount?: double(name='CurrentAmortizationRoundDownDiscount', example='0'),
        deductedByCashCoupons?: double(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: double(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: double(name='DeductedByPrepaidCard', example='0'),
        expenditureAmount?: double(name='ExpenditureAmount', example='0'),
        instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: double(name='InvoiceDiscount', example='0'),
        pretaxAmount?: double(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: double(name='PretaxGrossAmount', example='0'),
        previouslyAmortizedDeductedByCashCoupons?: double(name='PreviouslyAmortizedDeductedByCashCoupons', example='0'),
        previouslyAmortizedDeductedByCoupons?: double(name='PreviouslyAmortizedDeductedByCoupons', example='0'),
        previouslyAmortizedDeductedByPrepaidCard?: double(name='PreviouslyAmortizedDeductedByPrepaidCard', example='0'),
        previouslyAmortizedExpenditureAmount?: double(name='PreviouslyAmortizedExpenditureAmount', example='0'),
        previouslyAmortizedInvoiceDiscount?: double(name='PreviouslyAmortizedInvoiceDiscount', example='0'),
        previouslyAmortizedPretaxAmount?: double(name='PreviouslyAmortizedPretaxAmount', example='0'),
        previouslyAmortizedPretaxGrossAmount?: double(name='PreviouslyAmortizedPretaxGrossAmount', example='0'),
        previouslyAmortizedRoundDownDiscount?: double(name='PreviouslyAmortizedRoundDownDiscount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productDetailCode?: string(name='ProductDetailCode', example='rds'),
        productName?: string(name='ProductName'),
        region?: string(name='Region'),
        remainingAmortizationDeductedByCashCoupons?: double(name='RemainingAmortizationDeductedByCashCoupons', example='0'),
        remainingAmortizationDeductedByCoupons?: double(name='RemainingAmortizationDeductedByCoupons', example='0'),
        remainingAmortizationDeductedByPrepaidCard?: double(name='RemainingAmortizationDeductedByPrepaidCard', example='0'),
        remainingAmortizationExpenditureAmount?: double(name='RemainingAmortizationExpenditureAmount', example='0'),
        remainingAmortizationInvoiceDiscount?: double(name='RemainingAmortizationInvoiceDiscount', example='0'),
        remainingAmortizationPretaxAmount?: double(name='RemainingAmortizationPretaxAmount', example='0'),
        remainingAmortizationPretaxGrossAmount?: double(name='RemainingAmortizationPretaxGrossAmount', example='0'),
        remainingAmortizationRoundDownDiscount?: double(name='RemainingAmortizationRoundDownDiscount', example='0'),
        resourceGroup?: string(name='ResourceGroup'),
        roundDownDiscount?: double(name='RoundDownDiscount', example='0'),
        splitAccountName?: string(name='SplitAccountName', example='test**1122'),
        splitItemID?: string(name='SplitItemID', example='i-28bycvyb4'),
        splitItemName?: string(name='SplitItemName', example='iZ28bycvyb4Z'),
        splitProductDetail?: string(name='SplitProductDetail', example='rds'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='tag'),
        zone?: string(name='Zone'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='100'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='Successful！'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeInstanceAmortizedCostByConsumePeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceAmortizedCostByConsumePeriodResponseBody(name='body'),
}

async function describeInstanceAmortizedCostByConsumePeriodWithOptions(request: DescribeInstanceAmortizedCostByConsumePeriodRequest, runtime: Util.RuntimeOptions): DescribeInstanceAmortizedCostByConsumePeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.amortizationPeriodFilter)) {
    body['AmortizationPeriodFilter'] = request.amortizationPeriodFilter;
  }
  if (!Util.isUnset(request.billOwnerIdList)) {
    body['BillOwnerIdList'] = request.billOwnerIdList;
  }
  if (!Util.isUnset(request.billUserIdList)) {
    body['BillUserIdList'] = request.billUserIdList;
  }
  if (!Util.isUnset(request.billingCycle)) {
    body['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.costUnitCode)) {
    body['CostUnitCode'] = request.costUnitCode;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    body['InstanceIdList'] = request.instanceIdList;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productDetail)) {
    body['ProductDetail'] = request.productDetail;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    body['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAmortizedCostByConsumePeriod',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceAmortizedCostByConsumePeriod(request: DescribeInstanceAmortizedCostByConsumePeriodRequest): DescribeInstanceAmortizedCostByConsumePeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAmortizedCostByConsumePeriodWithOptions(request, runtime);
}

model DescribeInstanceBillRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the member. If you specify this parameter, the bills of the member are queried. If you do not specify this parameter, the bills of the current account are queried by default.', example='122'),
  billingCycle?: string(name='BillingCycle', description='The billing cycle. Specify the parameter in the YYYY-MM format.
Only the latest 18 month billing cycle is supported.', example='2020-03'),
  billingDate?: string(name='BillingDate', description='The billing date. This parameter is required only when the Granularity parameter is set to DAILY. Format: YYYY-MM-DD.', example='2020-03-02'),
  granularity?: string(name='Granularity', description='The granularity at which bills are queried. Valid values:

*   MONTHLY: queries bills on a monthly basis. The data that you query is the same as the data searched by instances on the Billing Details tab of the Bill Details page in the User Center console.
*   DAILY: queries bills on a daily basis. The data that you query is the same as the data searched by days on the Billing Details tab of the Bill Details page in the User Center console.

The BillingDate parameter is required if you set the Granularity parameter to DAILY.', example='MONTHLY'),
  instanceID?: string(name='InstanceID', description='The ID of the instance.', example='abc'),
  isBillingItem?: boolean(name='IsBillingItem', description='Specifies whether to query data by billable items. Valid values:

*   false: The data that you query is the same as the data searched by instances on the Billing Details tab of the Bill Details page in the User Center console.
*   true: The data that you query is the same as the data searched by billable items on the Billing Details tab of the Bill Details page in the User Center console.

Default value: false.', example='false'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', description='Specifies whether to filter bills if both the pretax gross amount and pretax amount are 0. Valid values:

*   false: does not filter bills.
*   true: filters bills.', example='false'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='20'),
  nextToken?: string(name='NextToken', description='The token that is used to indicate the position where the results for the current call start. The parameter must be left empty or set to the value of the NextToken parameter that is returned from the last call. Otherwise, an error is returned. If the parameter is left empty, data is queried from the first item.', example='CAESEgoQCg4KCm'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
  productType?: string(name='ProductType', description='The type of the service.', example='rds'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: the subscription billing method.
*   PayAsYouGo: the pay-as-you-go billing method.', example='PayAsYouGo'),
}

model DescribeInstanceBillResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    accountID?: string(name='AccountID', description='The ID of the account.', example='122'),
    accountName?: string(name='AccountName', description='The name of the account.', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', description='The billing cycle in the YYYY-MM format.', example='2020-03'),
    items?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', description='The amount deducted with credit refund.', example='0'),
        billAccountID?: string(name='BillAccountID', description='The ID of the account to which the bill belongs.', example='122'),
        billAccountName?: string(name='BillAccountName', description='The name of the account to which the bill belongs.', example='test@test.aliyunid.com'),
        billingDate?: string(name='BillingDate', description='The billing date. This parameter is returned only if the Granularity parameter is set to DAILY. Format: YYYY-MM-DD.', example='2020-03-20'),
        billingItem?: string(name='BillingItem', description='The billable item. A value is returned only if the IsBillingItem parameter is set to true.', example='Bandwidth'),
        billingItemCode?: string(name='BillingItemCode', description='The code of the billable item.', example='disk'),
        billingType?: string(name='BillingType', description='The billing method.', example='Other'),
        bizType?: string(name='BizType', description='The type of business.', example='trusteeship'),
        cashAmount?: float(name='CashAmount', description='The amount paid in cash. The amount deducted with credit refund is not included.', example='0'),
        commodityCode?: string(name='CommodityCode', description='The code of the commodity. The code is the same as that in Cost Center.', example='rds'),
        costUnit?: string(name='CostUnit', description='The cost center.', example='Not allocated'),
        currency?: string(name='Currency', description='The type of currency. Valid values:

*   CNY
*   USD
*   JPY', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', description='The amount deducted with vouchers.', example='0.1'),
        deductedByCoupons?: float(name='DeductedByCoupons', description='The amount deducted with coupons.', example='0.1'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', description='The amount deducted with prepaid cards.', example='0.1'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage', description='The amount deducted with resource plans. This parameter is valid only when the isBillingItem parameter is set to true.', example='0.1'),
        instanceConfig?: string(name='InstanceConfig', description='The configurations of the instance.', example='CPU：12'),
        instanceID?: string(name='InstanceID', description='The ID of the instance.', example='i-dadada'),
        instanceSpec?: string(name='InstanceSpec', description='The type of the instance.', example='ecs.sn1ne.3xlarge'),
        internetIP?: string(name='InternetIP', description='The public IP address.', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', description='The private IP address.', example='192.xx.xx.xx'),
        invoiceDiscount?: float(name='InvoiceDiscount', description='The discount amount.', example='0.1'),
        item?: string(name='Item', description='The type of the bill.

*   SubscriptionOrder: the subscription bill.
*   PayAsYouGoBill: the pay-as-you-go bill,
*   Refund: the refund.
*   Adjustment: the adjustment bill.', example='PayAsYouGoBill'),
        itemName?: string(name='ItemName', description='The name of the project.', example='iZ28bycvyb4Z'),
        listPrice?: string(name='ListPrice', description='The unit price of the service. This parameter is valid only when the isBillingItem parameter is set to true.', example='100'),
        listPriceUnit?: string(name='ListPriceUnit', description='The unit of the unit price. This parameter is valid only when the isBillingItem parameter is set to true.', example='CNY'),
        nickName?: string(name='NickName', description='The name of the instance.', example='test'),
        outstandingAmount?: float(name='OutstandingAmount', description='The unsettled amount.', example='0.1'),
        ownerID?: string(name='OwnerID', description='The ID of the account that owns the resource. This parameter is returned in multi-account payment scenario.', example='123'),
        paymentAmount?: float(name='PaymentAmount', description='The amount paid in cash. The amount deducted with credit refund is not included.', example='0.1'),
        pipCode?: string(name='PipCode', description='The code of the service. The code is the same as that in Cost Center.', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', description='The pretax amount.', example='0.1'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', description='The pretax gross amount.', example='0.1'),
        productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
        productDetail?: string(name='ProductDetail', description='The details of the service.', example='ApsaraDB RDS'),
        productName?: string(name='ProductName', description='The name of the service.', example='ApsaraDB RDS'),
        productType?: string(name='ProductType', description='The type of the service.', example='rds'),
        region?: string(name='Region', description='The ID of the region.', example='China (Hangzhou)'),
        resourceGroup?: string(name='ResourceGroup', description='The ID of the resource group.', example='Default resource group'),
        servicePeriod?: string(name='ServicePeriod', description='The service duration.', example='3600'),
        servicePeriodUnit?: string(name='ServicePeriodUnit', description='The unit of the service duration.', example='Second'),
        subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: the subscription billing method.
*   PayAsYouGo: the pay-as-you-go billing method.', example='PayAsYouGo'),
        tag?: string(name='Tag', description='The tag of the resource.', example='key:testKey value:testValue; key:testKey1 value:testValues1'),
        usage?: string(name='Usage', description='The usage of the service. This parameter is valid only when the isBillingItem parameter is set to true. The usage is the total usage in all bills in the billing cycle, not the amount that you purchase. For example, if 1 GB of storage is used and bills are generated every hour, the usage is 1 GB per hour. In this case, the usage is 24 GB per day.', example='100'),
        usageUnit?: string(name='UsageUnit', description='The unit of usage. This parameter is valid only when the isBillingItem parameter is set to true.', example='GB'),
        zone?: string(name='Zone', description='The ID of the zone.', example='Hangzhou Zone B'),
      }
    ](name='Items', description='The details of the bill.'),
    maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='20'),
    nextToken?: string(name='NextToken', description='The position where the query stopped. If this parameter is left empty, all the results are returned. If you perform another call, you must set the NextToken parameter to the value of this parameter.', example='CAESEgoQCg4KCm'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='20'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeInstanceBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceBillResponseBody(name='body'),
}

/**
  * *   Instance bills are generated after the total bill is split. In most cases, the instance bills do not include data generated on the last day of the specified billing cycle.
  * *   The instance information may change during the billing cycle. The instance configurations and types in monthly bills are subject to the point in time when you query bills. For more information, see the corresponding bill details.
  * *   You can query data generated after June 2020 for Cloud Communications services. You can query data generated after November 2020 for Alibaba Cloud Domains.
  *
  * @param request DescribeInstanceBillRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeInstanceBillResponse
 */
async function describeInstanceBillWithOptions(request: DescribeInstanceBillRequest, runtime: Util.RuntimeOptions): DescribeInstanceBillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.billingDate)) {
    query['BillingDate'] = request.billingDate;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.instanceID)) {
    query['InstanceID'] = request.instanceID;
  }
  if (!Util.isUnset(request.isBillingItem)) {
    query['IsBillingItem'] = request.isBillingItem;
  }
  if (!Util.isUnset(request.isHideZeroCharge)) {
    query['IsHideZeroCharge'] = request.isHideZeroCharge;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceBill',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   Instance bills are generated after the total bill is split. In most cases, the instance bills do not include data generated on the last day of the specified billing cycle.
  * *   The instance information may change during the billing cycle. The instance configurations and types in monthly bills are subject to the point in time when you query bills. For more information, see the corresponding bill details.
  * *   You can query data generated after June 2020 for Cloud Communications services. You can query data generated after November 2020 for Alibaba Cloud Domains.
  *
  * @param request DescribeInstanceBillRequest
  * @return DescribeInstanceBillResponse
 */
async function describeInstanceBill(request: DescribeInstanceBillRequest): DescribeInstanceBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceBillWithOptions(request, runtime);
}

model DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest {
  billOwnerIdList?: [ string ](name='BillOwnerIdList'),
  billUserIdList?: [ string ](name='BillUserIdList'),
  billingCycle?: string(name='BillingCycle', example='2023-04'),
  costUnitCode?: string(name='CostUnitCode', example='123#'),
  instanceIdList?: [ string ](name='InstanceIdList'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
  productCode?: string(name='ProductCode', example='rds'),
  productDetail?: string(name='ProductDetail', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
}

model DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountID?: string(name='AccountID', example='185766xxxx'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    items?: [ 
      {
        amortizationPeriod?: string(name='AmortizationPeriod', example='2022-10'),
        amortizationPeriodDay?: string(name='AmortizationPeriodDay', example='2022-10-10'),
        amortizationStatus?: string(name='AmortizationStatus', example='amortized'),
        billAccountID?: long(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billOwnerID?: long(name='BillOwnerID', example='185xxxxx489'),
        billOwnerName?: string(name='BillOwnerName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        consumePeriod?: string(name='ConsumePeriod', example='2022-10'),
        costUnit?: string(name='CostUnit'),
        costUnitCode?: string(name='CostUnitCode', example='1234'),
        currentAmortizationDeductedByCoupons?: double(name='CurrentAmortizationDeductedByCoupons', example='0'),
        currentAmortizationInvoiceDiscount?: double(name='CurrentAmortizationInvoiceDiscount', example='0'),
        currentAmortizationPretaxAmount?: double(name='CurrentAmortizationPretaxAmount', example='10'),
        currentAmortizationPretaxGrossAmount?: double(name='CurrentAmortizationPretaxGrossAmount', example='10'),
        currentAmortizationRoundDownDiscount?: double(name='CurrentAmortizationRoundDownDiscount', example='0'),
        deductedByCoupons?: double(name='DeductedByCoupons', example='0'),
        instanceConfig?: string(name='InstanceConfig', example='CPU:12'),
        instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: double(name='InvoiceDiscount', example='0'),
        pretaxAmount?: double(name='PretaxAmount', example='100'),
        pretaxGrossAmount?: double(name='PretaxGrossAmount', example='100'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productDetailCode?: string(name='ProductDetailCode', example='rds'),
        productName?: string(name='ProductName'),
        referFrInstanceID?: string(name='ReferFrInstanceID', example='spn-001'),
        referFrOwnerID?: string(name='ReferFrOwnerID', example='185xxxxx489'),
        referFrProductDetailCode?: string(name='ReferFrProductDetailCode', example='savingplan_common_public_cn'),
        region?: string(name='Region'),
        resourceGroup?: string(name='ResourceGroup'),
        roundDownDiscount?: double(name='RoundDownDiscount', example='0'),
        splitAccountName?: string(name='SplitAccountName', example='12@test.com'),
        splitItemID?: string(name='SplitItemID', example='i-28bycvyb4'),
        splitItemName?: string(name='SplitItemName', example='iZ28bycvyb4Z'),
        splitProductDetail?: string(name='SplitProductDetail', example='rds'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='key:testKey value:testValue; key:testKey1 value:testValues1'),
        unusedAmortizationDeductedByCoupons?: double(name='UnusedAmortizationDeductedByCoupons', example='0'),
        unusedAmortizationInvoiceDiscount?: double(name='UnusedAmortizationInvoiceDiscount', example='0'),
        unusedAmortizationPretaxAmount?: double(name='UnusedAmortizationPretaxAmount', example='0'),
        unusedAmortizationPretaxGrossAmount?: double(name='UnusedAmortizationPretaxGrossAmount', example='0'),
        unusedAmortizationRoundDownDiscount?: double(name='UnusedAmortizationRoundDownDiscount', example='0'),
        zone?: string(name='Zone'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='400'),
  }(name='Data'),
  message?: string(name='Message', example='Successful！'),
  requestId?: string(name='RequestId', example='EAE08A27-386C-579E-966D-8853EC3C5D0E'),
  success?: boolean(name='Success', example='true'),
}

model DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponseBody(name='body'),
}

async function describeInstanceDeductAmortizedCostByAmortizationPeriodWithOptions(request: DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest, runtime: Util.RuntimeOptions): DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.billOwnerIdList)) {
    body['BillOwnerIdList'] = request.billOwnerIdList;
  }
  if (!Util.isUnset(request.billUserIdList)) {
    body['BillUserIdList'] = request.billUserIdList;
  }
  if (!Util.isUnset(request.billingCycle)) {
    body['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.costUnitCode)) {
    body['CostUnitCode'] = request.costUnitCode;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    body['InstanceIdList'] = request.instanceIdList;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productDetail)) {
    body['ProductDetail'] = request.productDetail;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    body['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceDeductAmortizedCostByAmortizationPeriod',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceDeductAmortizedCostByAmortizationPeriod(request: DescribeInstanceDeductAmortizedCostByAmortizationPeriodRequest): DescribeInstanceDeductAmortizedCostByAmortizationPeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceDeductAmortizedCostByAmortizationPeriodWithOptions(request, runtime);
}

model DescribePricingModuleRequest {
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', description='The service code. You can query the service code by calling the **QueryProductList** operation.', example='rds'),
  productType?: string(name='ProductType', description='The type of the service. You can query the service type by calling the **QueryProductList** operation.', example='rds'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: subscription
*   PayAsYouGo: pay-as-you-go', example='Subscription'),
}

model DescribePricingModuleResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    attributeList?: {
      attribute?: [ 
      {
        code?: string(name='Code', description='The code of the attribute.', example='DBInstanceStorage'),
        name?: string(name='Name', description='The name of the attribute.', example='Capacity'),
        unit?: string(name='Unit', description='The unit of the attribute.', example='GB'),
        values?: {
          attributeValue?: [ 
          {
            name?: string(name='Name', description='The attribute value that corresponds to the module code.', example='2 Cores and 4 GB Memory (Basic Edition)'),
            remark?: string(name='Remark', description='The description of the module values.', example='Connections: 4,000 IOPS is related to storage space'),
            type?: string(name='Type', description='The type of the attribute value that corresponds to the module code. Valid values:

*   single_float: single value
*   range_float: range value', example='single_string'),
            value?: string(name='Value', description='The attribute value that corresponds to the module code.

>  If the Type parameter is set to range_float, the valid values of this parameter range from 1024 to 1024000. A value of 1024 indicates that the step size is 1024.', example='mysql.n2.medium.1'),
          }
        ](name='AttributeValue')
        }(name='Values', description='The attribute values.'),
      }
    ](name='Attribute')
    }(name='AttributeList', description='The module attributes.'),
    moduleList?: {
      module?: [ 
      {
        configList?: {
          configList?: [ string ](name='ConfigList')
        }(name='ConfigList'),
        currency?: string(name='Currency', description='The currency. Default value: CNY.', example='CNY'),
        moduleCode?: string(name='ModuleCode', description='The code of the pricing module.', example='InstanceType'),
        moduleName?: string(name='ModuleName', description='The name of the pricing module.', example='Instance'),
        priceType?: string(name='PriceType', description='The price type. Valid values:

*   Usage: usage price
*   Hour: hourly price
*   Day: daily price
*   Week: weekly price
*   Month: monthly price
*   Year: annual price', example='Month'),
      }
    ](name='Module')
    }(name='ModuleList', description='The pricing information of modules.'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C40A8EE0-8084-49FE-B66E-5E1C3B6AE025'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribePricingModuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePricingModuleResponseBody(name='body'),
}

async function describePricingModuleWithOptions(request: DescribePricingModuleRequest, runtime: Util.RuntimeOptions): DescribePricingModuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePricingModule',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePricingModule(request: DescribePricingModuleRequest): DescribePricingModuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePricingModuleWithOptions(request, runtime);
}

model DescribeProductAmortizedCostByAmortizationPeriodRequest {
  billOwnerIdList?: [ string ](name='BillOwnerIdList', description='The instance ID that is used to filter bills. You can specify multiple instance IDs to query bills of multiple instances. If you leave this parameter empty, the bills of all instances are queried by default. You can specify a maximum of 10 instance IDs.'),
  billUserIdList?: [ string ](name='BillUserIdList', description='The ID of the member that needs to settle the bill. The member ID is used to filter bills. If you specify a value for this parameter, you can query the bills of the specified member. If you leave this parameter empty, the bills of the current account and all members of the current account are queried by default. You can specify a maximum of 10 IDs.'),
  billingCycle?: string(name='BillingCycle', description='The allocation month. Format: YYYY-MM.', example='2022-10'),
  consumePeriodFilter?: [ string ](name='ConsumePeriodFilter', description='The billing cycle that is used to filter bills. You can specify a maximum of 10 billing cycles.'),
  costUnitCode?: string(name='CostUnitCode', description='The code of the cost center.', example='123#'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='20'),
  nextToken?: string(name='NextToken', description='The position from which the query starts. The parameter must be left empty or set to the value of the NextToken parameter returned from the last call. Otherwise, an error is returned. If this parameter is left empty, data is queried from the beginning.', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
  productCode?: string(name='ProductCode', description='The code of the service. You can obtain the value of this parameter by calling the QueryProductList operation or the DescribeResourcePackageProduct operation.', example='rds'),
  productDetail?: string(name='ProductDetail', description='The specific service resource.', example='rds'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: the subscription billing method
*   PayAsYouGo: the pay-as-you-go billing method', example='Subscription'),
}

model DescribeProductAmortizedCostByAmortizationPeriodResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  data?: {
    accountID?: string(name='AccountID', description='The ID of the account.', example='185766xxxx'),
    accountName?: string(name='AccountName', description='The name of the account.', example='test@test.aliyunid.com'),
    items?: [ 
      {
        amortizationPeriod?: string(name='AmortizationPeriod', description='The allocation month. Format: YYYYMM.', example='202210'),
        amortizationStatus?: string(name='AmortizationStatus', description='The allocation status. Valid values:

*   amortized: allocated
*   unAmortized: not allocated', example='amortized'),
        billAccountID?: long(name='BillAccountID', description='The ID of the account to which the bill belongs.', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', description='The name of the account to which the bill belongs.', example='test@test.aliyunid.com'),
        billOwnerID?: long(name='BillOwnerID', description='The ID of the account to which the resource belongs.', example='185xxxxx489'),
        billOwnerName?: string(name='BillOwnerName', description='The name of the account to which the resource belongs.', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', description='The business type.', example='trusteeship'),
        consumePeriod?: string(name='ConsumePeriod', description='The billing cycle. Format: YYYYMM.', example='202210'),
        currentAmortizationDeductedByCashCoupons?: double(name='CurrentAmortizationDeductedByCashCoupons', description='The amount deducted by using vouchers and allocated to the current allocation month.', example='0'),
        currentAmortizationDeductedByCoupons?: double(name='CurrentAmortizationDeductedByCoupons', description='The amount deducted by using coupons and allocated to the current allocation month.', example='0'),
        currentAmortizationDeductedByPrepaidCard?: double(name='CurrentAmortizationDeductedByPrepaidCard', description='The amount deducted by using prepaid cards and allocated to the current allocation month.', example='0'),
        currentAmortizationExpenditureAmount?: double(name='CurrentAmortizationExpenditureAmount', description='The expenditure amount allocated to the current allocation month. Invoicing is supported.', example='0'),
        currentAmortizationInvoiceDiscount?: double(name='CurrentAmortizationInvoiceDiscount', description='The discount amount allocated to the current allocation month.', example='0'),
        currentAmortizationPretaxAmount?: double(name='CurrentAmortizationPretaxAmount', description='The pretax amount allocated to the current allocation month.', example='0'),
        currentAmortizationPretaxGrossAmount?: double(name='CurrentAmortizationPretaxGrossAmount', description='The pretax gross amount allocated to the current allocation month.', example='0'),
        currentAmortizationRoundDownDiscount?: double(name='CurrentAmortizationRoundDownDiscount', description='The round-off amount allocated to the current allocation month.', example='0'),
        deductedByCashCoupons?: double(name='DeductedByCashCoupons', description='The amount deducted by using vouchers.', example='0'),
        deductedByCoupons?: double(name='DeductedByCoupons', description='The amount deducted by using coupons.', example='0'),
        deductedByPrepaidCard?: double(name='DeductedByPrepaidCard', description='The amount deducted by using prepaid cards.', example='0'),
        expenditureAmount?: double(name='ExpenditureAmount', description='The expenditure amount. Invoicing is supported.', example='0'),
        invoiceDiscount?: double(name='InvoiceDiscount', description='The discount amount.', example='0'),
        pretaxAmount?: double(name='PretaxAmount', description='The pretax amount.', example='0'),
        pretaxGrossAmount?: double(name='PretaxGrossAmount', description='The pretax gross amount.', example='0'),
        previouslyAmortizedDeductedByCashCoupons?: double(name='PreviouslyAmortizedDeductedByCashCoupons', description='The amount deducted by using vouchers and allocated before the current allocation month.', example='0'),
        previouslyAmortizedDeductedByCoupons?: double(name='PreviouslyAmortizedDeductedByCoupons', description='The amount deducted by using coupons and allocated before the current allocation month.', example='0'),
        previouslyAmortizedDeductedByPrepaidCard?: double(name='PreviouslyAmortizedDeductedByPrepaidCard', description='The amount deducted by using prepaid cards and allocated before the current allocation month.', example='0'),
        previouslyAmortizedExpenditureAmount?: double(name='PreviouslyAmortizedExpenditureAmount', description='The expenditure amount allocated before the current allocation month. Invoicing is supported.', example='0'),
        previouslyAmortizedInvoiceDiscount?: double(name='PreviouslyAmortizedInvoiceDiscount', description='The discount amount allocated before the current allocation month.', example='0'),
        previouslyAmortizedPretaxAmount?: double(name='PreviouslyAmortizedPretaxAmount', description='The pretax amount allocated before the current allocation month.', example='0'),
        previouslyAmortizedPretaxGrossAmount?: double(name='PreviouslyAmortizedPretaxGrossAmount', description='The pretax gross amount allocated before the current allocation month.', example='0'),
        previouslyAmortizedRoundDownDiscount?: double(name='PreviouslyAmortizedRoundDownDiscount', description='The round-off amount allocated before the current allocation month.', example='0'),
        productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
        productDetail?: string(name='ProductDetail', description='The specific service resource.', example='ApsaraDB RDS'),
        productDetailCode?: string(name='ProductDetailCode', description='The code of the specific service resource.', example='rds'),
        productName?: string(name='ProductName', description='The name of the service.', example='ApsaraDB RDS'),
        remainingAmortizationDeductedByCashCoupons?: double(name='RemainingAmortizationDeductedByCashCoupons', description='The amount deducted by using vouchers and to be allocated to one or more future allocation months.', example='0'),
        remainingAmortizationDeductedByCoupons?: double(name='RemainingAmortizationDeductedByCoupons', description='The amount deducted by using coupons and to be allocated to one or more future allocation months.', example='0'),
        remainingAmortizationDeductedByPrepaidCard?: double(name='RemainingAmortizationDeductedByPrepaidCard', description='The amount deducted by using prepaid cards and to be allocated to one or more future allocation months.', example='0'),
        remainingAmortizationExpenditureAmount?: double(name='RemainingAmortizationExpenditureAmount', description='The expenditure amount to be allocated to one or more future allocation months. Invoicing is supported.', example='0'),
        remainingAmortizationInvoiceDiscount?: double(name='RemainingAmortizationInvoiceDiscount', description='The discount amount to be allocated to one or more future allocation months.', example='0'),
        remainingAmortizationPretaxAmount?: double(name='RemainingAmortizationPretaxAmount', description='The pretax amount to be allocated to one or more future allocation months.', example='0'),
        remainingAmortizationPretaxGrossAmount?: double(name='RemainingAmortizationPretaxGrossAmount', description='The pretax gross amount to be allocated to one or more future allocation months.', example='0'),
        remainingAmortizationRoundDownDiscount?: double(name='RemainingAmortizationRoundDownDiscount', description='The round-off amount to be allocated to one or more future allocation months.', example='0'),
        roundDownDiscount?: double(name='RoundDownDiscount', description='The round-off amount.', example='0'),
        subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: the subscription billing method
*   PayAsYouGo: the pay-as-you-go billing method', example='PayAsYouGo'),
      }
    ](name='Items', description='The data entries returned.'),
    maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='100'),
    nextToken?: string(name='NextToken', description='The position from which the results started to return. The parameter must be left empty or set to the value of the NextToken parameter returned from the last call. Otherwise, an error is returned. If this parameter is left empty, data is queried from the beginning.', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='100'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DescribeProductAmortizedCostByAmortizationPeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProductAmortizedCostByAmortizationPeriodResponseBody(name='body'),
}

/**
  * You can view and export the allocated costs of the current month after 10:00 on the fourth day of the next month. The allocated costs of a single allocation month may involve orders or bills in different billing cycles. If a historical allocated amount is incorrect, the historical allocated costs need to be adjusted. As a result, the allocated costs displayed for a single allocation month may be different at different time points.
  *
  * @param request DescribeProductAmortizedCostByAmortizationPeriodRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeProductAmortizedCostByAmortizationPeriodResponse
 */
async function describeProductAmortizedCostByAmortizationPeriodWithOptions(request: DescribeProductAmortizedCostByAmortizationPeriodRequest, runtime: Util.RuntimeOptions): DescribeProductAmortizedCostByAmortizationPeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.billOwnerIdList)) {
    body['BillOwnerIdList'] = request.billOwnerIdList;
  }
  if (!Util.isUnset(request.billUserIdList)) {
    body['BillUserIdList'] = request.billUserIdList;
  }
  if (!Util.isUnset(request.billingCycle)) {
    body['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.consumePeriodFilter)) {
    body['ConsumePeriodFilter'] = request.consumePeriodFilter;
  }
  if (!Util.isUnset(request.costUnitCode)) {
    body['CostUnitCode'] = request.costUnitCode;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productDetail)) {
    body['ProductDetail'] = request.productDetail;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    body['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProductAmortizedCostByAmortizationPeriod',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can view and export the allocated costs of the current month after 10:00 on the fourth day of the next month. The allocated costs of a single allocation month may involve orders or bills in different billing cycles. If a historical allocated amount is incorrect, the historical allocated costs need to be adjusted. As a result, the allocated costs displayed for a single allocation month may be different at different time points.
  *
  * @param request DescribeProductAmortizedCostByAmortizationPeriodRequest
  * @return DescribeProductAmortizedCostByAmortizationPeriodResponse
 */
async function describeProductAmortizedCostByAmortizationPeriod(request: DescribeProductAmortizedCostByAmortizationPeriodRequest): DescribeProductAmortizedCostByAmortizationPeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProductAmortizedCostByAmortizationPeriodWithOptions(request, runtime);
}

model DescribeProductAmortizedCostByConsumePeriodRequest {
  amortizationPeriodFilter?: [ string ](name='AmortizationPeriodFilter'),
  billOwnerIdList?: [ string ](name='BillOwnerIdList'),
  billUserIdList?: [ string ](name='BillUserIdList'),
  billingCycle?: string(name='BillingCycle', example='2022-10'),
  costUnitCode?: string(name='CostUnitCode', example='123#'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
  productCode?: string(name='ProductCode', example='rds'),
  productDetail?: string(name='ProductDetail', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model DescribeProductAmortizedCostByConsumePeriodResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountID?: string(name='AccountID', example='185766xxxx'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    items?: [ 
      {
        amortizationPeriod?: string(name='AmortizationPeriod', example='202210'),
        amortizationStatus?: string(name='AmortizationStatus', example='amortized'),
        billAccountID?: long(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billOwnerID?: long(name='BillOwnerID', example='185xxxxx489'),
        billOwnerName?: string(name='BillOwnerName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        consumePeriod?: string(name='ConsumePeriod', example='202210'),
        currentAmortizationDeductedByCashCoupons?: double(name='CurrentAmortizationDeductedByCashCoupons', example='0'),
        currentAmortizationDeductedByCoupons?: double(name='CurrentAmortizationDeductedByCoupons', example='0'),
        currentAmortizationDeductedByPrepaidCard?: double(name='CurrentAmortizationDeductedByPrepaidCard', example='0'),
        currentAmortizationExpenditureAmount?: double(name='CurrentAmortizationExpenditureAmount', example='0'),
        currentAmortizationInvoiceDiscount?: double(name='CurrentAmortizationInvoiceDiscount', example='0'),
        currentAmortizationPretaxAmount?: double(name='CurrentAmortizationPretaxAmount', example='0'),
        currentAmortizationPretaxGrossAmount?: double(name='CurrentAmortizationPretaxGrossAmount', example='0'),
        currentAmortizationRoundDownDiscount?: double(name='CurrentAmortizationRoundDownDiscount', example='0'),
        deductedByCashCoupons?: double(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: double(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: double(name='DeductedByPrepaidCard', example='0'),
        expenditureAmount?: double(name='ExpenditureAmount', example='0'),
        invoiceDiscount?: double(name='InvoiceDiscount', example='0'),
        pretaxAmount?: double(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: double(name='PretaxGrossAmount', example='0'),
        previouslyAmortizedDeductedByCashCoupons?: double(name='PreviouslyAmortizedDeductedByCashCoupons', example='0'),
        previouslyAmortizedDeductedByCoupons?: double(name='PreviouslyAmortizedDeductedByCoupons', example='0'),
        previouslyAmortizedDeductedByPrepaidCard?: double(name='PreviouslyAmortizedDeductedByPrepaidCard', example='0'),
        previouslyAmortizedExpenditureAmount?: double(name='PreviouslyAmortizedExpenditureAmount', example='0'),
        previouslyAmortizedInvoiceDiscount?: double(name='PreviouslyAmortizedInvoiceDiscount', example='0'),
        previouslyAmortizedPretaxAmount?: double(name='PreviouslyAmortizedPretaxAmount', example='0'),
        previouslyAmortizedPretaxGrossAmount?: double(name='PreviouslyAmortizedPretaxGrossAmount', example='0'),
        previouslyAmortizedRoundDownDiscount?: double(name='PreviouslyAmortizedRoundDownDiscount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productDetailCode?: string(name='ProductDetailCode', example='rds'),
        productName?: string(name='ProductName'),
        remainingAmortizationDeductedByCashCoupons?: double(name='RemainingAmortizationDeductedByCashCoupons', example='0'),
        remainingAmortizationDeductedByCoupons?: double(name='RemainingAmortizationDeductedByCoupons', example='0'),
        remainingAmortizationDeductedByPrepaidCard?: double(name='RemainingAmortizationDeductedByPrepaidCard', example='0'),
        remainingAmortizationExpenditureAmount?: double(name='RemainingAmortizationExpenditureAmount', example='0'),
        remainingAmortizationInvoiceDiscount?: double(name='RemainingAmortizationInvoiceDiscount', example='0'),
        remainingAmortizationPretaxAmount?: double(name='RemainingAmortizationPretaxAmount', example='0'),
        remainingAmortizationPretaxGrossAmount?: double(name='RemainingAmortizationPretaxGrossAmount', example='0'),
        remainingAmortizationRoundDownDiscount?: double(name='RemainingAmortizationRoundDownDiscount', example='0'),
        roundDownDiscount?: double(name='RoundDownDiscount', example='0'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='100'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='Successful！'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeProductAmortizedCostByConsumePeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProductAmortizedCostByConsumePeriodResponseBody(name='body'),
}

async function describeProductAmortizedCostByConsumePeriodWithOptions(request: DescribeProductAmortizedCostByConsumePeriodRequest, runtime: Util.RuntimeOptions): DescribeProductAmortizedCostByConsumePeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.amortizationPeriodFilter)) {
    body['AmortizationPeriodFilter'] = request.amortizationPeriodFilter;
  }
  if (!Util.isUnset(request.billOwnerIdList)) {
    body['BillOwnerIdList'] = request.billOwnerIdList;
  }
  if (!Util.isUnset(request.billUserIdList)) {
    body['BillUserIdList'] = request.billUserIdList;
  }
  if (!Util.isUnset(request.billingCycle)) {
    body['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.costUnitCode)) {
    body['CostUnitCode'] = request.costUnitCode;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productDetail)) {
    body['ProductDetail'] = request.productDetail;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    body['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProductAmortizedCostByConsumePeriod',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProductAmortizedCostByConsumePeriod(request: DescribeProductAmortizedCostByConsumePeriodRequest): DescribeProductAmortizedCostByConsumePeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProductAmortizedCostByConsumePeriodWithOptions(request, runtime);
}

model DescribeResourceCoverageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query coverage details. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='200'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results. You do not need to set this parameter if you query coverage details within a specific time range for the first time. The response returns a token that you can use to query coverage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more coverage details can be queried.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
  periodType?: string(name='PeriodType', description='The time granularity at which coverage details are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR'),
  resourceType?: string(name='ResourceType', description='The type of deduction plans whose coverage details are queried. Valid values: RI and SCU.', example='RI'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query.

The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
}

model DescribeResourceCoverageDetailResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    items?: [ 
      {
        capacityUnit?: string(name='CapacityUnit', description='The unit that is used to measure the resources deducted from deduction plans.'),
        commodityCode?: string(name='CommodityCode', description='The code of the service.', example='ecs'),
        commodityName?: string(name='CommodityName', description='The name and billing method of the service.'),
        coveragePercentage?: float(name='CoveragePercentage', description='The coverage rate of a deduction plan.', example='1'),
        currency?: string(name='Currency', description='The currency in which deduction plans were priced.', example='CNY'),
        deductQuantity?: float(name='DeductQuantity', description='The amount of the resources deducted from a deduction plan.', example='1'),
        endTime?: string(name='EndTime', description='The end of the time range in which the coverage details were queried.', example='2021-04-01 01:00:00'),
        instanceId?: string(name='InstanceId', description='The ID of a pay-as-you-go instance.', example='i-bp1d9x623987rlj0dx4xx'),
        instanceSpec?: string(name='InstanceSpec', description='The specifications of a deduction plan.', example='ecs.t5-lc2m1.nano'),
        paymentAmount?: float(name='PaymentAmount', description='The amount of the bill.', example='0'),
        productCode?: string(name='ProductCode', description='The code of the service.', example='ecs'),
        productName?: string(name='ProductName', description='The name of the service.'),
        region?: string(name='Region', description='The region.'),
        regionNo?: string(name='RegionNo', description='The code of the region.', example='cn-hangzhou-dg-a01'),
        startTime?: string(name='StartTime', description='The beginning of the time range in which the coverage details were queried.', example='2021-04-01 00:00:00'),
        totalQuantity?: float(name='TotalQuantity', description='The total amount of resources consumed.', example='1'),
        userId?: string(name='UserId', description='The ID of the account.', example='123745698925000'),
        userName?: string(name='UserName', description='The username of the account.', example='test13@test.aliyun.com'),
        zone?: string(name='Zone', description='The code of the zone.', example='cn-hangzhou-i'),
        zoneName?: string(name='ZoneName', description='The zone.'),
      }
    ](name='Items', description='The data entries.'),
    maxResults?: int32(name='MaxResults', description='The number of entries returned on the current page.', example='200'),
    nextToken?: string(name='NextToken', description='The token of the next page.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10000'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeResourceCoverageDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceCoverageDetailResponseBody(name='body'),
}

/**
  * 1\\. The queried coverage details are the same as those displayed in the table on the Coverage tab of the Manage Reserved Instances page in the Billing Management console.
  * 2\\. You can call this operation to query the coverage details of RIs or SCUs.
  * 3\\. You can call this operation to query coverage details at an hourly, daily, or monthly granularity.
  *
  * @param request DescribeResourceCoverageDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeResourceCoverageDetailResponse
 */
async function describeResourceCoverageDetailWithOptions(request: DescribeResourceCoverageDetailRequest, runtime: Util.RuntimeOptions): DescribeResourceCoverageDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceCoverageDetail',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 1\\. The queried coverage details are the same as those displayed in the table on the Coverage tab of the Manage Reserved Instances page in the Billing Management console.
  * 2\\. You can call this operation to query the coverage details of RIs or SCUs.
  * 3\\. You can call this operation to query coverage details at an hourly, daily, or monthly granularity.
  *
  * @param request DescribeResourceCoverageDetailRequest
  * @return DescribeResourceCoverageDetailResponse
 */
async function describeResourceCoverageDetail(request: DescribeResourceCoverageDetailRequest): DescribeResourceCoverageDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceCoverageDetailWithOptions(request, runtime);
}

model DescribeResourceCoverageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query total coverage data. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00'),
  periodType?: string(name='PeriodType', description='The time granularity at which total coverage data is queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR'),
  resourceType?: string(name='ResourceType', description='The type of deduction plans whose total coverage data is queried. Valid values: RI and SCU.', example='RI'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
}

model DescribeResourceCoverageTotalResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    periodCoverage?: [ 
      {
        coveragePercentage?: float(name='CoveragePercentage', description='The coverage rate of deduction plans within the specified period.', example='0.1'),
        period?: string(name='Period', description='The period.

The value is in the format of yyyyMMddHH.', example='2020110100'),
      }
    ](name='PeriodCoverage', description='The information about the coverage rate of deduction plans within a period.'),
    totalCoverage?: {
      capacityUnit?: string(name='CapacityUnit', description='The unit that is used to measure the resources deducted from deduction plans.'),
      coveragePercentage?: float(name='CoveragePercentage', description='The total coverage rate of deduction plans.', example='1'),
      deductQuantity?: float(name='DeductQuantity', description='The total amount of the resources deducted from deduction plans.', example='1'),
      totalQuantity?: float(name='TotalQuantity', description='The total amount of resources consumed.', example='1'),
    }(name='TotalCoverage', description='The information about the total coverage data of deduction plans.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeResourceCoverageTotalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceCoverageTotalResponseBody(name='body'),
}

/**
  * The queried total coverage data is the same as the aggregated data displayed on the Coverage tab of the Manage Reserved Instances page in the Billing Management console.
  * You can call this operation to query the total coverage data of RIs or SCUs.
  *
  * @param request DescribeResourceCoverageTotalRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeResourceCoverageTotalResponse
 */
async function describeResourceCoverageTotalWithOptions(request: DescribeResourceCoverageTotalRequest, runtime: Util.RuntimeOptions): DescribeResourceCoverageTotalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceCoverageTotal',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The queried total coverage data is the same as the aggregated data displayed on the Coverage tab of the Manage Reserved Instances page in the Billing Management console.
  * You can call this operation to query the total coverage data of RIs or SCUs.
  *
  * @param request DescribeResourceCoverageTotalRequest
  * @return DescribeResourceCoverageTotalResponse
 */
async function describeResourceCoverageTotal(request: DescribeResourceCoverageTotalRequest): DescribeResourceCoverageTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceCoverageTotalWithOptions(request, runtime);
}

model DescribeResourcePackageProductRequest {
  productCode?: string(name='ProductCode', description='The code of the service.', example='ossbag'),
}

model DescribeResourcePackageProductResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    resourcePackages?: {
      resourcePackage?: [ 
      {
        name?: string(name='Name', description='The name of the resource plan.', example='Object Storage Service (OSS) resource plan (monthly)'),
        packageTypes?: {
          packageType?: [ 
          {
            code?: string(name='Code', description='The code of the resource plan.', example='FPT_ossbag_deadlineAcc_CdnOut_common_sz'),
            name?: string(name='Name', description='The name of the resource plan type.', example='Back-to-origin traffic plan - China (Shenzhen)'),
            properties?: {
              property?: [ 
              {
                name?: string(name='Name', description='The name of the property.', example='region'),
                value?: string(name='Value', description='The value of the property.', example='cn-shenzhen'),
              }
            ](name='Property')
            }(name='Properties', description='The properties of the resource plan.'),
            specifications?: {
              specification?: [ 
              {
                availableDurations?: {
                  availableDuration?: [ 
                  {
                    name?: string(name='Name', description='The name of the validity period.', example='6 Month'),
                    unit?: string(name='Unit', description='The unit of the validity period for the resource plan. Valid values:

*   Month
*   Year

Default value: Month.', example='Month'),
                    value?: int32(name='Value', description='The value of the validity period.', example='6'),
                  }
                ](name='AvailableDuration')
                }(name='AvailableDurations', description='The validity periods available for the resource plan.'),
                name?: string(name='Name', description='The name of the specification.', example='1TB'),
                value?: string(name='Value', description='The value of the specification.', example='1024'),
              }
            ](name='Specification')
            }(name='Specifications', description='The specifications of the resource plan.'),
          }
        ](name='PackageType')
        }(name='PackageTypes', description='The types of the resource plans.'),
        productCode?: string(name='ProductCode', description='The code of the service.', example='ossbag'),
        productType?: string(name='ProductType', description='The type of the service.', example='ossbag'),
      }
    ](name='ResourcePackage')
    }(name='ResourcePackages', description='The details about the resource plans.'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='72353765387'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BBEF51A3-E933-4F40-A534-C673CBDB9C80'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model DescribeResourcePackageProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourcePackageProductResponseBody(name='body'),
}

async function describeResourcePackageProductWithOptions(request: DescribeResourcePackageProductRequest, runtime: Util.RuntimeOptions): DescribeResourcePackageProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourcePackageProduct',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourcePackageProduct(request: DescribeResourcePackageProductRequest): DescribeResourcePackageProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePackageProductWithOptions(request, runtime);
}

model DescribeResourceUsageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='200'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results. You do not need to set this parameter if you query usage details within a specific time range for the first time. The response returns a token that you can use to query usage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more usage details can be queried.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
  periodType?: string(name='PeriodType', description='The time granularity at which usage details are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR'),
  resourceType?: string(name='ResourceType', description='The type of deduction plans whose usage details are queried. Valid values: RI and SCU.', example='RI'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
}

model DescribeResourceUsageDetailResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    items?: [ 
      {
        capacityUnit?: string(name='CapacityUnit', description='The unit that is used to measure the resources deducted from deduction plans.'),
        currency?: string(name='Currency', description='The currency in which deduction plans were priced.', example='CNY'),
        deductQuantity?: float(name='DeductQuantity', description='The amount of the resources deducted from deduction plans.', example='1'),
        endTime?: string(name='EndTime', description='The end of the time range in which the usage details were queried.', example='2021-04-01 01:00:00'),
        imageType?: string(name='ImageType', description='The operating system.', example='linux'),
        instanceSpec?: string(name='InstanceSpec', description='The specifications of a deduction plan.', example='ecs.t5-lc2m1.nano'),
        postpaidCost?: string(name='PostpaidCost', description='The equivalent of pay-as-you-go costs.', example='0.06'),
        potentialSavedCost?: string(name='PotentialSavedCost', description='The potential net savings.', example='0.13'),
        quantity?: long(name='Quantity', description='The number of deduction plans.', example='2'),
        region?: string(name='Region', description='The region.'),
        regionNo?: string(name='RegionNo', description='The code of the region.', example='cn-hangzhou-dg-a01'),
        reservationCost?: string(name='ReservationCost', description='The fee of purchased deduction plans.', example='0'),
        resourceInstanceId?: string(name='ResourceInstanceId', description='The ID of a deduction plan.', example='ecsri-bp147nnfz21225k9mpix00'),
        savedCost?: string(name='SavedCost', description='The net savings.', example='0.06'),
        startTime?: string(name='StartTime', description='The beginning of the time range in which the usage details were queried.', example='2021-04-01 00:00:00'),
        status?: string(name='Status', description='The status of the deduction plan.', example='Valid'),
        statusName?: string(name='StatusName', description='The name of the state.'),
        totalQuantity?: float(name='TotalQuantity', description='The total capacity of deduction plans.', example='2'),
        usagePercentage?: float(name='UsagePercentage', description='The usage of deduction plans.', example='0.5'),
        userId?: string(name='UserId', description='The ID of the account.', example='123745698925000'),
        userName?: string(name='UserName', description='The username of the account.', example='test@aliyun.com'),
        zone?: string(name='Zone', description='The code of the zone.', example='cn-hangzhou-i'),
        zoneName?: string(name='ZoneName', description='The zone.'),
      }
    ](name='Items', description='The data entries.'),
    maxResults?: int32(name='MaxResults', description='The number of entries returned on the current page.', example='200'),
    nextToken?: string(name='NextToken', description='The token of the next page.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10000'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeResourceUsageDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceUsageDetailResponseBody(name='body'),
}

async function describeResourceUsageDetailWithOptions(request: DescribeResourceUsageDetailRequest, runtime: Util.RuntimeOptions): DescribeResourceUsageDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceUsageDetail',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceUsageDetail(request: DescribeResourceUsageDetailRequest): DescribeResourceUsageDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceUsageDetailWithOptions(request, runtime);
}

model DescribeResourceUsageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account whose data you want to query. If you do not specify this parameter, the data of the current account and its linked accounts is queried. To query the data of a linked account, specify the ID of the linked account. You can specify only one account ID.', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format. The specified time is excluded from the time range. If you do not specify this parameter, this parameter is set to the current time.', example='2021-01-02 00:00:00'),
  periodType?: string(name='PeriodType', description='The time granularity at which the data is queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR'),
  resourceType?: string(name='ResourceType', description='The type of the resource plan. Valid values: RI and SCU.', example='RI'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query. Specify the time in the yyyy-MM-dd HH:mm:ss format. The specified time is included in the time range.', example='2021-01-01 00:00:00'),
}

model DescribeResourceUsageTotalResponseBody = {
  code?: string(name='Code', description='The response code.', example='Success'),
  data?: {
    periodCoverage?: [ 
      {
        period?: string(name='Period', description='The period.', example='2021071500'),
        usagePercentage?: float(name='UsagePercentage', description='The usage of resource plans.', example='0.1'),
      }
    ](name='PeriodCoverage', description='The usage of resource plans in the specified period.'),
    totalUsage?: {
      postpaidCost?: float(name='PostpaidCost', description='The total costs of pay-as-you-go instances.', example='200'),
      potentialSavedCost?: float(name='PotentialSavedCost', description='The total potential savings.', example='100'),
      reservationCost?: float(name='ReservationCost', description='The fee of purchased resource plans.', example='10'),
      savedCost?: float(name='SavedCost', description='The total savings.', example='100'),
      usagePercentage?: float(name='UsagePercentage', description='The total usage of resource plans.', example='1'),
    }(name='TotalUsage', description='The total usage of resource plans.'),
  }(name='Data', description='The queried data.'),
  message?: string(name='Message', description='The returned message. If the request was successful, a success message is returned. If the request failed, an error message is returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The request ID.', example='364C7C81-5E5E-51A0-B738-1969D2671B05'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='True'),
}

model DescribeResourceUsageTotalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceUsageTotalResponseBody(name='body'),
}

async function describeResourceUsageTotalWithOptions(request: DescribeResourceUsageTotalRequest, runtime: Util.RuntimeOptions): DescribeResourceUsageTotalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceUsageTotal',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceUsageTotal(request: DescribeResourceUsageTotalRequest): DescribeResourceUsageTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceUsageTotalWithOptions(request, runtime);
}

model DescribeSavingsPlansCoverageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query coverage details. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-08-09 00:00:00'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='300'),
  periodType?: string(name='PeriodType', description='The time granularity at which coverage details are queried. Valid values: MONTH, DAY, and HOUR.', example='DAY'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-07-15 13:40:45'),
  token?: string(name='Token', description='The token that is used to retrieve the next page of results. You do not need to set this parameter if you query coverage details within a specific time range for the first time. The response returns a token that you can use to query coverage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more coverage details can be queried.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
}

model DescribeSavingsPlansCoverageDetailResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    items?: [ 
      {
        coveragePercentage?: float(name='CoveragePercentage', description='The coverage.', example='0.9'),
        currency?: string(name='Currency', description='The currency.', example='CNY'),
        deductAmount?: float(name='DeductAmount', description='The deducted amount.', example='100'),
        endPeriod?: string(name='EndPeriod', description='The end time.', example='2021-05-05 15:00:00'),
        instanceId?: string(name='InstanceId', description='The ID of the instance.', example='spn-a1fhs54c243hP22'),
        instanceSpec?: string(name='InstanceSpec', description='The specifications.', example='7th_generation_X86_group'),
        ownerId?: long(name='OwnerId'),
        postpaidCost?: float(name='PostpaidCost', description='The pay-as-you-go cost.', example='200'),
        region?: string(name='Region', description='The region.'),
        startPeriod?: string(name='StartPeriod', description='The start time.', example='2021-05-05 14:00:00'),
        totalAmount?: float(name='TotalAmount', description='The total expenditure.', example='100'),
        userId?: long(name='UserId', description='The ID of the account.', example='2831685687844416'),
        userName?: string(name='UserName', description='The username of the account.', example='tester1@test.aliyun.com'),
      }
    ](name='Items', description='The data entries.'),
    nextToken?: string(name='NextToken', description='The token of the next page.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
    totalCount?: int32(name='TotalCount', description='The total number of entries.', example='400'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeSavingsPlansCoverageDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSavingsPlansCoverageDetailResponseBody(name='body'),
}

async function describeSavingsPlansCoverageDetailWithOptions(request: DescribeSavingsPlansCoverageDetailRequest, runtime: Util.RuntimeOptions): DescribeSavingsPlansCoverageDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSavingsPlansCoverageDetail',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSavingsPlansCoverageDetail(request: DescribeSavingsPlansCoverageDetailRequest): DescribeSavingsPlansCoverageDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSavingsPlansCoverageDetailWithOptions(request, runtime);
}

model DescribeSavingsPlansCoverageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query coverage summary. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-07-20 00:00:00'),
  periodType?: string(name='PeriodType', description='The time granularity at which coverage summary are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-07-15 00:00:00'),
}

model DescribeSavingsPlansCoverageTotalResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    periodCoverage?: [ 
      {
        percentage?: float(name='Percentage', description='The coverage.', example='1'),
        period?: string(name='Period', description='The period.

The value is in the format of yyyyMMddHH.', example='2021071500'),
      }
    ](name='PeriodCoverage', description='The coverage in different periods.'),
    totalCoverage?: {
      coveragePercentage?: float(name='CoveragePercentage', description='The total coverage.', example='1'),
      deductAmount?: float(name='DeductAmount', description='The total deducted amount.', example='100'),
    }(name='TotalCoverage', description='The coverage summary.'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeSavingsPlansCoverageTotalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSavingsPlansCoverageTotalResponseBody(name='body'),
}

async function describeSavingsPlansCoverageTotalWithOptions(request: DescribeSavingsPlansCoverageTotalRequest, runtime: Util.RuntimeOptions): DescribeSavingsPlansCoverageTotalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSavingsPlansCoverageTotal',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSavingsPlansCoverageTotal(request: DescribeSavingsPlansCoverageTotalRequest): DescribeSavingsPlansCoverageTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSavingsPlansCoverageTotalWithOptions(request, runtime);
}

model DescribeSavingsPlansUsageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query usage details. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='300'),
  periodType?: string(name='PeriodType', description='The time granularity at which usage details are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
  token?: string(name='Token', description='The token that is used to retrieve the next page of results. You do not need to set this parameter if you query usage details within a specific time range for the first time. The response returns a token that you can use to query usage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more coverage details can be queried.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
}

model DescribeSavingsPlansUsageDetailResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    items?: [ 
      {
        currency?: string(name='Currency', description='The currency.', example='CNY'),
        deductValue?: float(name='DeductValue', description='The used amount of the savings plan.', example='3.94'),
        endPeriod?: string(name='EndPeriod', description='The end time.', example='2021-08-09 00:00:00'),
        instanceId?: string(name='InstanceId', description='The ID of the instance.', example='spn-a1fhs54c243hP22'),
        poolValue?: float(name='PoolValue', description='The total amount of the savings plan.', example='29.84'),
        postpaidCost?: float(name='PostpaidCost', description='The pay-as-you-go cost.', example='4.2'),
        savedCost?: float(name='SavedCost', description='The amount that is saved.', example='0.08'),
        startPeriod?: string(name='StartPeriod', description='The start time.', example='2021-08-01 00:00:00'),
        status?: string(name='Status', description='The status of the instance.

A value of -1 indicates that the payment is overdue. A value of 1 indicates that the instance is active.', example='-1'),
        type?: string(name='Type', description='The type of the savings plan. Valid values: universal and ECS compute.'),
        usagePercentage?: float(name='UsagePercentage', description='The usage.', example='0.9'),
        userId?: long(name='UserId', description='The ID of the account.', example='123745698925000'),
        userName?: string(name='UserName', description='The username of the account.', example='test13@test.aliyun.com'),
      }
    ](name='Items', description='The data entries.'),
    nextToken?: string(name='NextToken', description='The token of the next page.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2ldhsSI6MTB9'),
    totalCount?: int32(name='TotalCount', description='The total number of entries.', example='1000'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeSavingsPlansUsageDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSavingsPlansUsageDetailResponseBody(name='body'),
}

async function describeSavingsPlansUsageDetailWithOptions(request: DescribeSavingsPlansUsageDetailRequest, runtime: Util.RuntimeOptions): DescribeSavingsPlansUsageDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSavingsPlansUsageDetail',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSavingsPlansUsageDetail(request: DescribeSavingsPlansUsageDetailRequest): DescribeSavingsPlansUsageDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSavingsPlansUsageDetailWithOptions(request, runtime);
}

model DescribeSavingsPlansUsageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query usage summary. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00'),
  periodType?: string(name='PeriodType', description='The time granularity at which usage summary are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
}

model DescribeSavingsPlansUsageTotalResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    periodCoverage?: [ 
      {
        percentage?: float(name='Percentage', description='The usage.', example='1'),
        period?: string(name='Period', description='The period.

The value is in the format of yyyyMMddHH.', example='2021041500'),
      }
    ](name='PeriodCoverage', description='The usage in different periods.'),
    totalUsage?: {
      poolValue?: float(name='PoolValue', description='The total amount of the savings plan.', example='100'),
      postpaidCost?: float(name='PostpaidCost', description='The pay-as-you-go cost.', example='200'),
      savedCost?: float(name='SavedCost', description='The amount that is saved.', example='100'),
      usagePercentage?: float(name='UsagePercentage', description='The total usage.', example='1'),
    }(name='TotalUsage', description='The usage summary.'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeSavingsPlansUsageTotalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSavingsPlansUsageTotalResponseBody(name='body'),
}

async function describeSavingsPlansUsageTotalWithOptions(request: DescribeSavingsPlansUsageTotalRequest, runtime: Util.RuntimeOptions): DescribeSavingsPlansUsageTotalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSavingsPlansUsageTotal',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSavingsPlansUsageTotal(request: DescribeSavingsPlansUsageTotalRequest): DescribeSavingsPlansUsageTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSavingsPlansUsageTotalWithOptions(request, runtime);
}

model DescribeSplitItemBillRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the member. If you specify this parameter, the bills of the member are queried. If you do not specify this parameter, the bills of the current account are queried by default.', example='123'),
  billingCycle?: string(name='BillingCycle', description='The billing cycle. Specify the parameter in the YYYY-MM format.', example='2020-03'),
  billingDate?: string(name='BillingDate', description='The billing date. This parameter is required only when the Granularity parameter is set to DAILY. Format: YYYY-MM-DD.', example='2020-03-02'),
  granularity?: string(name='Granularity', description='The granularity at which bills are queried. Valid values:

*   MONTHLY: queries bills on a monthly basis. The data that you query is the same as the data that is queried by billing cycles in the Split Bill module of the User Center console.
*   DAILY: queries bills on a daily basis. The data that you query is the same as the data that is queried by days in the Split Bill module of the User Center console.

If you specify DAILY for this parameter, the BillingDate parameter is required.', example='Monthly'),
  instanceID?: string(name='InstanceID', description='The ID of the instance.', example='i-kjhdskjgshfdlkjfdh'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to query. Default value: 20. Maximum value: 300.', example='20'),
  nextToken?: string(name='NextToken', description='The token that is used for the next query. The parameter must be left empty or set to the value of the NextToken parameter returned in the last call. Otherwise, an error is returned. If the parameter is left empty, the data is queried from the first entry.', example='CAESEgoQCg4KCmd'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
  productType?: string(name='ProductType', description='The type of the service.', example='rds'),
  splitItemID?: string(name='SplitItemID', description='The ID of the split item.', example='i-kjhdskjgshfdlkjfdh'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values: Subscription: the subscription billing method. PayAsYouGo: the pay-as-you-go billing method. This parameter must be used with the ProductCode parameter.', example='PayAsYouGo'),
  tagFilter?: [ 
    {
      tagKey?: string(name='TagKey', description='The TagFilter.N parameter is used to query bills that match a specified tag. The value of the TagFilter.N parameter must be a key-value pair. The tag key must be 1 to 128 characters in length. Valid values of N: 1 to 20.

*   If only the TagFilter.N.TagKey parameter is specified, all bills associated with the tag key are queried.
*   If you specify multiple tag key-value pairs at the same time, bills that meet any one of the tag key-value pairs are queried.
*   If the tags added to resources change, you can query only the bills that are generated within the period in which the tags and resources are associated.', example='TestKey'),
      tagValues?: [ string ](name='TagValues', description='You can specify the TagValues.N parameter to query bills that match the specified tag value. The value of the TagValues.N parameter must be a string. The tag value must be 1 to 128 characters in length. Valid values of N: 1 to 20.

*   If you specify the TagValues.N parameter, the TagFilter.N.TagKey parameter is required. Otherwise, the error message InvalidParameter.TagValues is returned.
*   If you specify multiple tag values, split bills that match one of the tag values are queried.', example='TestValue'),
    }
  ](name='TagFilter', description='The tags that are used to filter split bills. You can specify multiple tag values. If you specify multiple tag values, split bills that match one of the tag values are queried.'),
}

model DescribeSplitItemBillResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    accountID?: string(name='AccountID', description='The ID of the account.', example='185xxxx3489'),
    accountName?: string(name='AccountName', description='The ID of the account.', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', description='The billing cycle. Format: YYYY-MM.', example='2020-03'),
    items?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', description='The amount deducted with credit refund.', example='0'),
        billAccountID?: string(name='BillAccountID', description='The ID of the account to which the bill belongs.', example='185xxxx3489'),
        billAccountName?: string(name='BillAccountName', description='The name of the account to which the bill belongs.', example='test@test.aliyunid.com'),
        billingDate?: string(name='BillingDate', description='The billing date. Format: YYYY-MM-DD. This parameter is not supported.', example='2020-01-20'),
        billingItem?: string(name='BillingItem', description='The billable item.', example='Bandwidth'),
        billingItemCode?: string(name='BillingItemCode', description='The code of the billable item.', example='disk'),
        billingType?: string(name='BillingType', description='The billing method.', example='Other'),
        bizType?: string(name='BizType', description='The type of the business.', example='trusteeship'),
        cashAmount?: float(name='CashAmount', description='The amount paid in cash. The amount deducted with credit refund is not included.', example='0'),
        commodityCode?: string(name='CommodityCode', description='The code of the commodity. The code is the same as that displayed in the Split Bill module of the User Center console.', example='rds'),
        costUnit?: string(name='CostUnit', description='The cost center.', example='Not allocated'),
        currency?: string(name='Currency', description='The type of currency. Valid values: CNY, USD, and JPY.', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', description='The amount deducted with vouchers.', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', description='The amount deducted with coupons.', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', description='The amount deducted with prepaid cards.', example='0'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage', description='The amount deducted with resource plans.', example='0'),
        instanceConfig?: string(name='InstanceConfig', description='The configurations of the instance.', example='CPU:12'),
        instanceID?: string(name='InstanceID', description='The ID of the instance.', example='i-kjhdskjgshfdlkjfdh'),
        instanceSpec?: string(name='InstanceSpec', description='The type of the instance.', example='ecs.sn1ne.3xlarge'),
        internetIP?: string(name='InternetIP', description='The public IP address.', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', description='The private IP address.', example='192.xx.xx.xx'),
        invoiceDiscount?: float(name='InvoiceDiscount', description='The discount amount.', example='0'),
        item?: string(name='Item', description='The type of the bill. Valid values: SubscriptionOrder: the subscription bill. PayAsYouGoBill: the pay-as-you-go bill. Refund: the refund. Adjustment: the adjustment bill.', example='PayAsYouGoBill'),
        itemName?: string(name='ItemName', description='The name of the split item.', example='iZ28bycvyb4Z'),
        listPrice?: string(name='ListPrice', description='The unit price.', example='0.12'),
        listPriceUnit?: string(name='ListPriceUnit', description='The unit of the unit price.', example='CNY/GB'),
        nickName?: string(name='NickName', description='The name of the instance.', example='nick'),
        outstandingAmount?: float(name='OutstandingAmount', description='The amount that is unsettled.', example='0.1'),
        ownerID?: string(name='OwnerID', description='The ID of the account that owns the resource. This parameter is returned in multi-account scenario.', example='169***013'),
        paymentAmount?: float(name='PaymentAmount', description='The amount paid in cash. The amount deducted with credit refund is included.', example='0'),
        pipCode?: string(name='PipCode', description='The code of the service. The code is the same as that displayed in the Split Bill module of the User Center console.', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', description='The pretax amount.', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', description='The pretax gross amount.', example='0'),
        productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
        productDetail?: string(name='ProductDetail', description='The details of the service.', example='ApsaraDB RDS'),
        productName?: string(name='ProductName', description='The name of the service.', example='ApsaraDB RDS'),
        productType?: string(name='ProductType', description='The type of the service.', example='rds'),
        region?: string(name='Region', description='The ID of the region.', example='China (Hangzhou)'),
        resourceGroup?: string(name='ResourceGroup', description='The ID of the resource group.', example='Default resource group'),
        servicePeriod?: string(name='ServicePeriod', description='The duration of the service.', example='20'),
        servicePeriodUnit?: string(name='ServicePeriodUnit', description='The unit of the service duration.', example='Hour'),
        splitAccountID?: string(name='SplitAccountID', description='The ID of the account to which the split bill belongs.', example='12**122'),
        splitAccountName?: string(name='SplitAccountName', description='The name of the account to which the split item belongs.', example='test**1122'),
        splitBillingCycle?: string(name='SplitBillingCycle', description='The billing cycle in which the bill is split.', example='2021-06'),
        splitBillingDate?: string(name='SplitBillingDate', description='The day on which the bill is split.', example='2021-06-01'),
        splitCommodityCode?: string(name='SplitCommodityCode', description='The code of the split item.', example='rds'),
        splitItemID?: string(name='SplitItemID', description='The ID of the split item.', example='i-28bycvyb4'),
        splitItemName?: string(name='SplitItemName', description='The name of the split item.', example='iZ28bycvyb4Z'),
        splitProductDetail?: string(name='SplitProductDetail', description='The details of the service.', example='ApsaraDB RDS'),
        subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values: Subscription: the subscription billing method. PayAsYouGo: the pay-as-you-go billing method.', example='PayAsYouGo'),
        tag?: string(name='Tag', description='The tag of the resource. If tags added to resources change, the bills generated during the period in which resources and tags are associated are returned.', example='key:testKey value:testValue; key:testKey1 value:testValues1'),
        usage?: string(name='Usage', description='The amount of resource usage.', example='100'),
        usageUnit?: string(name='UsageUnit', description='The unit of usage.', example='GB'),
        zone?: string(name='Zone', description='The zone.', example='Qingdao Zone B'),
      }
    ](name='Items', description='The details of the bill.'),
    maxResults?: int32(name='MaxResults', description='The maximum number of entries returned.', example='20'),
    nextToken?: string(name='NextToken', description='The token used for the next query. If this parameter is empty, all the results are returned. When you perform the next query, you must set the NextToken parameter to this value.', example='CAESEgoQCg4K'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='20'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model DescribeSplitItemBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSplitItemBillResponseBody(name='body'),
}

/**
  * *   The data that you query by calling this operation is the same as the data that is queried by billing cycles in the Split Bill module of Cost Allocation.
  * *   You can query split bills that were generated within the last 12 months by calling this operation.
  * *   You can query split bills only after you enable the [Split Bill](https://usercenter2.aliyun.com/finance/split-bill) service in the User Center console.
  *
  * @param request DescribeSplitItemBillRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeSplitItemBillResponse
 */
async function describeSplitItemBillWithOptions(request: DescribeSplitItemBillRequest, runtime: Util.RuntimeOptions): DescribeSplitItemBillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.billingDate)) {
    query['BillingDate'] = request.billingDate;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.instanceID)) {
    query['InstanceID'] = request.instanceID;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.splitItemID)) {
    query['SplitItemID'] = request.splitItemID;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  if (!Util.isUnset(request.tagFilter)) {
    query['TagFilter'] = request.tagFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSplitItemBill',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   The data that you query by calling this operation is the same as the data that is queried by billing cycles in the Split Bill module of Cost Allocation.
  * *   You can query split bills that were generated within the last 12 months by calling this operation.
  * *   You can query split bills only after you enable the [Split Bill](https://usercenter2.aliyun.com/finance/split-bill) service in the User Center console.
  *
  * @param request DescribeSplitItemBillRequest
  * @return DescribeSplitItemBillResponse
 */
async function describeSplitItemBill(request: DescribeSplitItemBillRequest): DescribeSplitItemBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSplitItemBillWithOptions(request, runtime);
}

model EnableBillGenerationRequest {
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', description='The code of the product.', example='ess'),
}

model EnableBillGenerationResponseBody = {
  code?: string(name='Code', description='The status code.', example='200'),
  data?: {
    boolean?: boolean(name='Boolean', description='Indicates whether the feature is enabled.', example='true'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5F2648ED-170B-5882-BFF4-98BE522A60F2'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model EnableBillGenerationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableBillGenerationResponseBody(name='body'),
}

async function enableBillGenerationWithOptions(request: EnableBillGenerationRequest, runtime: Util.RuntimeOptions): EnableBillGenerationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableBillGeneration',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableBillGeneration(request: EnableBillGenerationRequest): EnableBillGenerationResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableBillGenerationWithOptions(request, runtime);
}

model GetAccountRelationRequest {
  relationId?: long(name='RelationId', description='The ID of the financial relationship.', example='Value returned by calling the AddAccountRelation operation'),
  requestId?: string(name='RequestId', description='The unique ID of the request. The ID is used to mark a request and troubleshoot a problem.', example='requestId'),
}

model GetAccountRelationResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  data?: {
    childUserId?: long(name='ChildUserId', description='The ID of the Alibaba Cloud account that is used as a member.', example='ID of the Alibaba Cloud account that is used as a member'),
    endTime?: long(name='EndTime', description='The time when the financial relationship between the management account and the member was terminated.', example='2021-12-01'),
    gmtModified?: long(name='GmtModified', description='The time when the financial relationship between the management account and the member was modified.', example='2021-12-01'),
    id?: long(name='Id', description='The ID of the financial relationship.', example='ID of the financial relationship'),
    parentUserId?: long(name='ParentUserId', description='The ID of the Alibaba Cloud account that is used as the management account.', example='ID of the Alibaba Cloud account that is used as the management account'),
    startTime?: long(name='StartTime', description='The time when the financial relationship between the management account and the member was established.', example='2021-11-01'),
    status?: string(name='Status', description='The status of the financial relationship between the management account and the member.', example='RELATED'),
    type?: string(name='Type', description='The type of the financial relationship.', example='enterprise_group'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='The message returned.', example='Message returned'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='RequestId'),
  success?: boolean(name='Success', description='Indicates whether the call is successful.', example='true'),
}

model GetAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccountRelationResponseBody(name='body'),
}

async function getAccountRelationWithOptions(request: GetAccountRelationRequest, runtime: Util.RuntimeOptions): GetAccountRelationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccountRelation',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccountRelation(request: GetAccountRelationRequest): GetAccountRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountRelationWithOptions(request, runtime);
}

model GetCustomerAccountInfoRequest {
  ownerId?: long(name='OwnerId'),
}

model GetCustomerAccountInfoResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    accountType?: string(name='AccountType', description='The type of the account. A value of 1 indicates an enterprise account. A value of 0 indicates an individual account.', example='1'),
    creditLimitStatus?: string(name='CreditLimitStatus', description='The business status of the customer. Valid values:

Freeze: The business is frozen.

Thaw: The business is unfrozen.

Trusteeship: The business is hosted.

TrusteeshipCancel: The business is not hosted.', example='Freeze'),
    hostingStatus?: string(name='HostingStatus', description='The hosting status of the credit information and instances of the customer. If the credit information and instances of the customer are managed on Alibaba Cloud, Alibaba Cloud suspends a customer service upon overdue payment. Valid values:

FREEZE: The business of the customer is frozen.

TRUSTEESHIP: The business of the customer is hosted.', example='FREEZE'),
    isCertified?: boolean(name='IsCertified', description='Indicates whether the account passes the real-name verification.', example='true'),
    loginEmail?: string(name='LoginEmail', description='The email address of the customer.', example='xxxx@aliyun.com'),
    mpk?: long(name='Mpk', description='The ID of the management account.', example='1051360339779133'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='94017C56-1725-5DD9-AB41-B3BAE791D600'),
  success?: boolean(name='Success', description='Indicates whether the call is successful. A value of true indicates that the call is successful. A value of false indicates that the call failed.', example='true'),
}

model GetCustomerAccountInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCustomerAccountInfoResponseBody(name='body'),
}

async function getCustomerAccountInfoWithOptions(request: GetCustomerAccountInfoRequest, runtime: Util.RuntimeOptions): GetCustomerAccountInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCustomerAccountInfo',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCustomerAccountInfo(request: GetCustomerAccountInfoRequest): GetCustomerAccountInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomerAccountInfoWithOptions(request, runtime);
}

model GetCustomerListResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  data?: {
    uidList?: [ string ](name='UidList', description='The list of customer IDs.'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request. You can use the ID to query logs and troubleshoot issues.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the call is successful. Valid values:

*   **true**: The call is successful.
*   **false**: The call failed.', example='true'),
}

model GetCustomerListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCustomerListResponseBody(name='body'),
}

/**
  * The system queries the IDs of customers of a VNO based on the AccessKey pair used in the request.
  *
  * @param request GetCustomerListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetCustomerListResponse
 */
async function getCustomerListWithOptions(runtime: Util.RuntimeOptions): GetCustomerListResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetCustomerList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The system queries the IDs of customers of a VNO based on the AccessKey pair used in the request.
  *
  * @return GetCustomerListResponse
 */
async function getCustomerList(): GetCustomerListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomerListWithOptions(runtime);
}

model GetOrderDetailRequest {
  orderId?: string(name='OrderId', description='The ID of the order.', example='32453453'),
  ownerId?: long(name='OwnerId'),
}

model GetOrderDetailResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    hostName?: string(name='HostName', description='The hostname.', example='test'),
    orderList?: {
      order?: [ 
      {
        afterTaxAmount?: string(name='AfterTaxAmount', description='The aftertaxt amount of the order.', example='0'),
        commodityCode?: string(name='CommodityCode', description='The service code.', example='ecs'),
        config?: string(name='Config', description='The configurations of the main service.', example='DBInstanceClass:[DBInstanceClass:rds.mysql.s1.small;EngineVersion:8.0;Region:cn-qingdao;]DBFlowType:[Region:cn-qingdao;]'),
        createTime?: string(name='CreateTime', description='The time when the order was created.', example='2017-06-08T09:41:30Z'),
        currency?: string(name='Currency', description='The currency.', example='CNY'),
        instanceIDs?: string(name='InstanceIDs', description='The instance IDs.', example='["rm-bp1a2vsr018313t6o"]'),
        operator?: string(name='Operator', description='The ID of the Resource Access Management (RAM) user who performs operations on the order. If no RAM user is involved, leave this parameter blank.', example='23424243432'),
        orderId?: string(name='OrderId', description='The ID of the order.', example='3453425324'),
        orderSubType?: string(name='OrderSubType', description='The type of the suborder. Valid values:

*   ProductSubOrder: the service suborder
*   RefundSubOrder: the refund suborder', example='ProductSubOrder'),
        orderType?: string(name='OrderType', description='The type of the order. Valid values:

*   New: purchases an instance.
*   Renew: renews an instance.
*   Upgrade: upgrades the configurations of an instance.
*   Refund: applies for a refund.
*   Convert: switches the billing method.
*   Downgrade: downgrades the configurations of an instance.
*   ResizeDisk: resizes the disk.', example='New'),
        originalConfig?: string(name='OriginalConfig', description='The module information without standardized conversion.', example='DBInstanceClass:[DBInstanceClass:rds.mysql.s1.small;EngineVersion:8.0;Region:cn-qingdao;]DBFlowType:[Region:cn-qingdao;]'),
        paymentCurrency?: string(name='PaymentCurrency', description='The currency of payment.', example='CNY'),
        paymentStatus?: string(name='PaymentStatus', description='The status of payment. Valid values:

*   Unpaid: The order is not paid.
*   Paid: The order is paid.
*   Cancelled: The order is canceled.', example='Paid'),
        paymentTime?: string(name='PaymentTime', description='The time of payment.', example='2017-06-08T09:41:30Z'),
        pretaxAmount?: string(name='PretaxAmount', description='The pretax amount of the order.', example='0'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal', description='The pretax amount of the order in local currency.', example='0'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount', description='The pretax gross amount of the order.', example='0'),
        productCode?: string(name='ProductCode', description='The code of the main service.', example='rds'),
        productType?: string(name='ProductType', description='The type of the main service.', example='rds'),
        quantity?: string(name='Quantity', description='The number of main services.', example='1'),
        region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
        relatedOrderId?: string(name='RelatedOrderId', description='The ID of the associated order.', example='4353453534543'),
        subOrderId?: string(name='SubOrderId', description='The ID of the suborder.', example='234343'),
        subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: subscription
*   PayAsYouGo: pay-as-you-go', example='PayAsYouGo'),
        tax?: string(name='Tax', description='The tax of the order.', example='1'),
        usageEndTime?: string(name='UsageEndTime', description='The time when the service ends.', example='2117-06-08T16:00:00Z'),
        usageStartTime?: string(name='UsageStartTime', description='The time when the service starts.', example='2017-06-08T16:00:00Z'),
      }
    ](name='Order')
    }(name='OrderList', description='The details of the order.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model GetOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOrderDetailResponseBody(name='body'),
}

async function getOrderDetailWithOptions(request: GetOrderDetailRequest, runtime: Util.RuntimeOptions): GetOrderDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOrderDetail',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOrderDetail(request: GetOrderDetailRequest): GetOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOrderDetailWithOptions(request, runtime);
}

model GetPayAsYouGoPriceRequest {
  moduleList?: [ 
    {
      config?: string(name='Config', description='The configuration of the Nth pricing module. Valid values of N: 1 to 50. Format: AA:aa,BB:bb. The values of AA and BB are the property IDs of the pricing module. The values of aa and bb are the property values of the pricing module.

>  You can call the [DescribePricingModule](~~96469~~) operation to obtain the configuration parameters of the pricing module.', example='InstanceType:ecs.g5.xlarge,IoOptimized:IoOptimized,ImageOs:linux'),
      moduleCode?: string(name='ModuleCode', description='The code of the Nth pricing module.

>  You can call the [DescribePricingModule](~~96469~~) operation to obtain the module code.', example='InstanceType'),
      priceType?: string(name='PriceType', description='The price type of the Nth pricing module. Valid values:

*   Hour: hourly price
*   Usage: usage price
*   Month: monthly price
*   Year: annual price

>  You can call the [DescribePricingModule](~~96469~~) operation to obtain the configuration parameters of the pricing module.', example='Hour'),
    }
  ](name='ModuleList', description='The details of pricing modules.'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', description='The code of the service.', example='ecs'),
  productType?: string(name='ProductType', description='The type of the service.', example='ecs'),
  region?: string(name='Region', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Set the value to PayAsYouGo.', example='PayAsYouGo'),
}

model GetPayAsYouGoPriceResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    currency?: string(name='Currency', description='The type of the currency. Valid values:

*   CNY: Chinese Yuan
*   USD: US dollar
*   JPY: Japanese Yen', example='CNY'),
    moduleDetails?: {
      moduleDetail?: [ 
      {
        costAfterDiscount?: float(name='CostAfterDiscount', description='The discount price.', example='100'),
        invoiceDiscount?: float(name='InvoiceDiscount', description='The discount that was applied.', example='20'),
        moduleCode?: string(name='ModuleCode', description='The code of the pricing module.', example='InstanceType'),
        originalCost?: float(name='OriginalCost', description='The original price.', example='1.77'),
        unitPrice?: float(name='UnitPrice', description='The unit price.', example='0'),
      }
    ](name='ModuleDetail')
    }(name='ModuleDetails', description='The price details of the pricing module.'),
    promotionDetails?: {
      promotionDetail?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', description='The description of the discount.', example='This discount allows you to use a service at the minimum price and is provided for testing purposes only.'),
        promotionId?: long(name='PromotionId', description='The ID of the discount.', example='10200210'),
        promotionName?: string(name='PromotionName', description='The name of the discount.', example='This discount allows you to use a service at the minimum price and is provided for testing purposes only.'),
      }
    ](name='PromotionDetail')
    }(name='PromotionDetails', description='The details of the discount.'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1537A007-72D7-4165-8A26-8694A38E219A'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetPayAsYouGoPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPayAsYouGoPriceResponseBody(name='body'),
}

/**
  * ### Usage notes
  * 1.  Call the QueryProductList operation to obtain the code of the service. For more information, see [QueryProductList](~~95984~~).
  * 2.  Call the DescribePricingModule operation to obtain the configuration parameters of the service. For more information, see [DescribePricingModule](~~96469~~).
  * 3.  Call the GetPayAsYouGoPrice operation to obtain the pay-as-you-go price of the service based on the returned configuration parameters.
  *
  * @param request GetPayAsYouGoPriceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetPayAsYouGoPriceResponse
 */
async function getPayAsYouGoPriceWithOptions(request: GetPayAsYouGoPriceRequest, runtime: Util.RuntimeOptions): GetPayAsYouGoPriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.moduleList)) {
    query['ModuleList'] = request.moduleList;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPayAsYouGoPrice',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ### Usage notes
  * 1.  Call the QueryProductList operation to obtain the code of the service. For more information, see [QueryProductList](~~95984~~).
  * 2.  Call the DescribePricingModule operation to obtain the configuration parameters of the service. For more information, see [DescribePricingModule](~~96469~~).
  * 3.  Call the GetPayAsYouGoPrice operation to obtain the pay-as-you-go price of the service based on the returned configuration parameters.
  *
  * @param request GetPayAsYouGoPriceRequest
  * @return GetPayAsYouGoPriceResponse
 */
async function getPayAsYouGoPrice(request: GetPayAsYouGoPriceRequest): GetPayAsYouGoPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPayAsYouGoPriceWithOptions(request, runtime);
}

model GetResourcePackagePriceRequest {
  duration?: int32(name='Duration', description='The validity period of the resource plan. The value must be the same as the duration of the resource plan specified in the specifications.', example='6'),
  effectiveDate?: string(name='EffectiveDate', description='The time when the resource plan takes effect. If you do not specify this parameter, the resource plan immediately takes effect by default. Specify the time in the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time must be in UTC.', example='2020-02-10T12:00:00Z'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='OSSBAG-cn-0xl0002'),
  orderType?: string(name='OrderType', description='The type of the order. Valid values:

*   BUY: You place the order to purchase an instance.
*   UPGRADE: You place the order to upgrade an instance.
*   RENEW: You place the order to renew an instance.

Default value: BUY.', example='BUY'),
  ownerId?: long(name='OwnerId'),
  packageType?: string(name='PackageType', description='The type of the resource plan. The value must be the same as the value of the **ProductCode** parameter that is returned when you call the **DescribeResourcePackageProduct** operation.', example='FPT_ossbag_periodMonthlyAcc_NetworkOut_finance_common'),
  pricingCycle?: string(name='PricingCycle', description='The unit of validity period of the resource plan. Valid values:

*   Month
*   Year', example='Month'),
  productCode?: string(name='ProductCode', description='The code of service. You can query the service code by calling the **QueryProductList** operation or viewing **Codes of Alibaba Cloud Services**.', example='ossbag'),
  specification?: string(name='Specification', description='The specifications of the resource plan.', example='500'),
}

model GetResourcePackagePriceResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    currency?: string(name='Currency', description='The type of the currency.', example='CNY'),
    discountPrice?: float(name='DiscountPrice', description='The discounted amount. Unit: CNY.', example='215040'),
    originalPrice?: float(name='OriginalPrice', description='The original price. Unit: CNY.', example='1290240'),
    promotions?: {
      promotion?: [ 
      {
        id?: long(name='Id', description='The ID of the promotion.', example='1000680914'),
        name?: string(name='Name', description='The description of the discount.', example='A discount of 17% is offered if you purchase a resource plan for six months.'),
      }
    ](name='Promotion')
    }(name='Promotions', description='The details of the discount.'),
    tradePrice?: float(name='TradePrice', description='The price at which the transaction is made. Unit: CNY.', example='1075200'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BBEF51A3-E933-4F40-A534-C673CBDB9C80'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetResourcePackagePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourcePackagePriceResponseBody(name='body'),
}

async function getResourcePackagePriceWithOptions(request: GetResourcePackagePriceRequest, runtime: Util.RuntimeOptions): GetResourcePackagePriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.effectiveDate)) {
    query['EffectiveDate'] = request.effectiveDate;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.packageType)) {
    query['PackageType'] = request.packageType;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourcePackagePrice',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourcePackagePrice(request: GetResourcePackagePriceRequest): GetResourcePackagePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourcePackagePriceWithOptions(request, runtime);
}

model GetSubscriptionPriceRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance for which the price is queried. This parameter is required if you upgrade an instance. You can specify this parameter to obtain the pre-upgrade configurations of the instance.', example='i-khkjhxxxxxxxxx'),
  moduleList?: [ 
    {
      config?: string(name='Config', description='The configurations of the Nth pricing module. Valid values of N: 1 to 50. Format: AA:aa,BB:bb. The values of AA and BB are the property IDs of the pricing module. The values of aa and bb are the property values of the pricing module.', example='PackageCode:version_1'),
      moduleCode?: string(name='ModuleCode', description='The identifier of the Nth pricing module.', example='PackageCode'),
      moduleStatus?: int32(name='ModuleStatus', description='The status of the pricing module. This parameter is required only if the order type is Upgrade. Valid values:

*   1: adds one or more instances.
*   2: modifies the configurations of an instance. In the upgrade scenario, if the configurations of the pricing module change, you must specify this value for the parameter.

Default value: 1.', example='1'),
      tag?: string(name='Tag', description='The tag of the specified resource. This parameter is required only if you upgrade or modify the configurations of an Alibaba Cloud service. For example, if you want to modify the configurations of a disk, you can use a tag to identify the ID of the disk.', example='213213123'),
    }
  ](name='ModuleList', description='The information about the pricing module.'),
  orderType?: string(name='OrderType', description='The type of the order. Valid values:

*   NewOrder: purchases an instance of an Alibaba Cloud service.
*   Renewal: renews an instance of an Alibaba Cloud service.
*   Upgrade: upgrades an instance of an Alibaba Cloud service.', example='NewOrder'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', description='The code of the service. For more information about the service code, see **Codes of Alibaba Cloud Services**.', example='ecs'),
  productType?: string(name='ProductType', description='The type of the service. Specify the parameter based on the pricing document of the specific service.', example='ecs'),
  quantity?: int32(name='Quantity', description='The quantity.', example='1'),
  region?: string(name='Region', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
  servicePeriodQuantity?: int32(name='ServicePeriodQuantity', description='The service duration.', example='1'),
  servicePeriodUnit?: string(name='ServicePeriodUnit', description='The unit of the service duration. Valid values:

*   Year
*   Month', example='Year'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Set the value to Subscription.', example='Subscription'),
}

model GetSubscriptionPriceResponseBody = {
  code?: string(name='Code', description='The status code.', example='InvalidConfigCod'),
  data?: {
    currency?: string(name='Currency', description='The type of currency. Valid values:

*   CNY: Chinese Yuan
*   USD: US dollar
*   JPY: Japanese Yen', example='CNY'),
    discountPrice?: float(name='DiscountPrice', description='The discount that was applied.', example='100'),
    moduleDetails?: {
      moduleDetail?: [ 
      {
        costAfterDiscount?: float(name='CostAfterDiscount', description='The discount price.', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', description='The discount that was applied.', example='100'),
        moduleCode?: string(name='ModuleCode', description='The identifier of the pricing module.', example='PackageCode'),
        originalCost?: float(name='OriginalCost', description='The original price of the service.', example='200'),
        unitPrice?: float(name='UnitPrice', description='The unit price.', example='0'),
      }
    ](name='ModuleDetail')
    }(name='ModuleDetails', description='The price details of the pricing module.'),
    originalPrice?: float(name='OriginalPrice', description='The original price of the service.', example='900'),
    promotionDetails?: {
      promotionDetail?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', description='The description of the discount.', example='test'),
        promotionId?: long(name='PromotionId', description='The ID of the discount.', example='1021199213'),
        promotionName?: string(name='PromotionName', description='The name of the discount.', example='test'),
      }
    ](name='PromotionDetail')
    }(name='PromotionDetails', description='The details of the discount.'),
    quantity?: int32(name='Quantity', description='The quantity.', example='1'),
    tradePrice?: float(name='TradePrice', description='The discount price.', example='0'),
  }(name='Data', description='The information about the service price.'),
  message?: string(name='Message', description='The message returned.', example='Successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='30E7066E-AE6F-4E59-AFE6-11386CE3AFA7'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model GetSubscriptionPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSubscriptionPriceResponseBody(name='body'),
}

/**
  * 1.  Call the QueryProductList operation to obtain the code of the service. For more information, see [QueryProductList](~~95984~~).
  * 2.  Call the DescribePricingModule operation to obtain the configuration parameters of the service. For more information, see [DescribePricingModule](~~96469~~).
  * 3.  Call the GetSubscriptionPrice operation to obtain the pricing of the service based on the returned configuration parameters.
  *
  * @param request GetSubscriptionPriceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return GetSubscriptionPriceResponse
 */
async function getSubscriptionPriceWithOptions(request: GetSubscriptionPriceRequest, runtime: Util.RuntimeOptions): GetSubscriptionPriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.moduleList)) {
    query['ModuleList'] = request.moduleList;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.quantity)) {
    query['Quantity'] = request.quantity;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.servicePeriodQuantity)) {
    query['ServicePeriodQuantity'] = request.servicePeriodQuantity;
  }
  if (!Util.isUnset(request.servicePeriodUnit)) {
    query['ServicePeriodUnit'] = request.servicePeriodUnit;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSubscriptionPrice',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 1.  Call the QueryProductList operation to obtain the code of the service. For more information, see [QueryProductList](~~95984~~).
  * 2.  Call the DescribePricingModule operation to obtain the configuration parameters of the service. For more information, see [DescribePricingModule](~~96469~~).
  * 3.  Call the GetSubscriptionPrice operation to obtain the pricing of the service based on the returned configuration parameters.
  *
  * @param request GetSubscriptionPriceRequest
  * @return GetSubscriptionPriceResponse
 */
async function getSubscriptionPrice(request: GetSubscriptionPriceRequest): GetSubscriptionPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSubscriptionPriceWithOptions(request, runtime);
}

model InquiryPriceRefundInstanceRequest {
  clientToken?: string(name='ClientToken', description='This parameter is required for scenarios that need idempotence. The UUID that is used to ensure the idempotence of the request.', example='793F021C-B589-1225-82A9-99232AEBE494'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. This parameter is required for unsubscription scenarios.', example='i-bp1etb69sqxgl4*******'),
  productCode?: string(name='ProductCode', description='The code of the service. This parameter is required for unsubscription scenarios.', example='ecs'),
  productType?: string(name='ProductType', description='The type of the service. This parameter is required for unsubscription scenarios. Unless otherwise specified, set this parameter to an empty string.', example='”“'),
}

model InquiryPriceRefundInstanceResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='200'),
  data?: {
    currency?: string(name='Currency', description='The currency.', example='CNY. CNY: Chinese Yuan. USD: United States dollar. JPY: Japanese Yen.'),
    hostId?: string(name='HostId', description='The site of the execution host.', example='cn'),
    instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1etb69sqxgl4*******'),
    refundAmount?: double(name='RefundAmount', description='The refundable amount.', example='12.34'),
  }(name='Data', description='data'),
  message?: string(name='Message', description='The description of the execution result.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='UUID'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='true'),
}

model InquiryPriceRefundInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InquiryPriceRefundInstanceResponseBody(name='body'),
}

/**
  * 1.  **Check the information about unsubscription and confirm the unsubscription terms and refundable amount. The resource that is unsubscribed cannot be restored.**
  * 2.  Refunds are applicable only for the actual paid amount. Vouchers used for the purchase are non-refundable.
  * 3.  For more information, see [Rules for unsubscribing from resources](https://help.aliyun.com/knowledge_detail/116043.html?spm=a2c81.e1d666e.app.2.62ae11271Kd6iM).
  *
  * @param request InquiryPriceRefundInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return InquiryPriceRefundInstanceResponse
 */
async function inquiryPriceRefundInstanceWithOptions(request: InquiryPriceRefundInstanceRequest, runtime: Util.RuntimeOptions): InquiryPriceRefundInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InquiryPriceRefundInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 1.  **Check the information about unsubscription and confirm the unsubscription terms and refundable amount. The resource that is unsubscribed cannot be restored.**
  * 2.  Refunds are applicable only for the actual paid amount. Vouchers used for the purchase are non-refundable.
  * 3.  For more information, see [Rules for unsubscribing from resources](https://help.aliyun.com/knowledge_detail/116043.html?spm=a2c81.e1d666e.app.2.62ae11271Kd6iM).
  *
  * @param request InquiryPriceRefundInstanceRequest
  * @return InquiryPriceRefundInstanceResponse
 */
async function inquiryPriceRefundInstance(request: InquiryPriceRefundInstanceRequest): InquiryPriceRefundInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return inquiryPriceRefundInstanceWithOptions(request, runtime);
}

model ModifyAccountRelationRequest {
  childNick?: string(name='ChildNick', description='The display name of the member. This helps clarify the scenario in which the account is used.', example='Display name of the member'),
  childUserId?: long(name='ChildUserId', description='The ID of the Alibaba Cloud account that is used as the member.', example='1512996702208737'),
  parentUserId?: long(name='ParentUserId', description='The ID of the Alibaba Cloud account that is used as the management account.', example='1738376485192612'),
  permissionCodes?: [ string ](name='PermissionCodes', description='The permissions that can be modified. Valid values:

*   SYNCHRONIZE_FINANCE_IDENTITY: allows the credit control identity to be shared with the member.
*   SYNCHRONIZE_FINANCE_DISCOUNT_POLICY_TO_TARGET: allows the discount policy to be shared with the member.
*   FORBID_WITHDRAW_CASH: does not allow the member to withdraw the balance.
*   FORBID_MANAGE_INVOICE: does not allow the member to manage invoices.
*   CHECK_FINANCE_INFO: requests to view information about the financial relationship.
*   MANAGE_TARGET_INVOICE: allows the member to manage invoices.
*   CHECK_TARGET_CONSUMPTION: allows the member to view the bills.', example='SYNCHRONIZE_FINANCE_IDENTITY'),
  relationId?: long(name='RelationId', description='The ID of the financial relationship. Set this parameter to the value of the relationId response parameter returned by calling the QueryRelationList operation.', example='51463'),
  relationOperation?: string(name='RelationOperation', description='The operation to be performed. Valid values:

*   ADD
*   DELETE', example='ADD'),
  relationType?: string(name='RelationType', description='The type of the financial relationship. Set the value to enterprise_group.', example='enterprise_group'),
  requestId?: string(name='RequestId', description='The unique ID of the request. The ID is used to mark a request and troubleshoot a problem.', example='request_id'),
  roleCodes?: [ string ](name='RoleCodes', description='The roles that can be assigned to the member. You cannot modify the roles.', example='trusteeship'),
}

model ModifyAccountRelationResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  data?: {
    hostId?: string(name='HostId', description='HostId', example='HostId'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Message returned'),
  requestId?: string(name='RequestId', description='The unique ID of the request.', example='request_id'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model ModifyAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccountRelationResponseBody(name='body'),
}

async function modifyAccountRelationWithOptions(request: ModifyAccountRelationRequest, runtime: Util.RuntimeOptions): ModifyAccountRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.childNick)) {
    query['ChildNick'] = request.childNick;
  }
  if (!Util.isUnset(request.childUserId)) {
    query['ChildUserId'] = request.childUserId;
  }
  if (!Util.isUnset(request.parentUserId)) {
    query['ParentUserId'] = request.parentUserId;
  }
  if (!Util.isUnset(request.permissionCodes)) {
    query['PermissionCodes'] = request.permissionCodes;
  }
  if (!Util.isUnset(request.relationId)) {
    query['RelationId'] = request.relationId;
  }
  if (!Util.isUnset(request.relationOperation)) {
    query['RelationOperation'] = request.relationOperation;
  }
  if (!Util.isUnset(request.relationType)) {
    query['RelationType'] = request.relationType;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.roleCodes)) {
    query['RoleCodes'] = request.roleCodes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountRelation',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccountRelation(request: ModifyAccountRelationRequest): ModifyAccountRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountRelationWithOptions(request, runtime);
}

model ModifyCostUnitRequest {
  unitEntityList?: [ 
    {
      newUnitName?: string(name='NewUnitName', description='The new name of the cost center.', example='newTest'),
      ownerUid?: long(name='OwnerUid', description='The user ID of the cost center owner.', example='1321312312'),
      unitId?: long(name='UnitId', description='The ID of the cost center.', example='2524352'),
    }
  ](name='UnitEntityList', description='The cost centers to be modified.'),
}

model ModifyCostUnitResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: [ 
    {
      isSuccess?: boolean(name='IsSuccess', description='Indicates whether the cost center was modified.', example='true'),
      ownerUid?: long(name='OwnerUid', description='The user ID of the cost center owner.', example='823756287'),
      unitId?: long(name='UnitId', description='The ID of the cost center.', example='356349875'),
    }
  ](name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model ModifyCostUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCostUnitResponseBody(name='body'),
}

async function modifyCostUnitWithOptions(request: ModifyCostUnitRequest, runtime: Util.RuntimeOptions): ModifyCostUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.unitEntityList)) {
    query['UnitEntityList'] = request.unitEntityList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCostUnit',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCostUnit(request: ModifyCostUnitRequest): ModifyCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCostUnitWithOptions(request, runtime);
}

model ModifyInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the value, but you must ensure that it is unique among different requests.', example='JAKSJFHFAKJSF'),
  instanceId?: string(name='InstanceId', description='The ID of the instance for which you want to modify the configurations.', example='rm-akjhkdsjhfskjfhd'),
  modifyType?: string(name='ModifyType', description='The type of configuration modifications. Valid values:

*   Upgrade: upgrades the configurations of the instance.
*   Downgrade: downgrades the configurations of the instance.', example='Upgrade'),
  ownerId?: long(name='OwnerId'),
  parameter?: [ 
    {
      code?: string(name='Code', description='The code of the parameter n. Valid values of n: 1 to 100. Multiple parameters are concatenated in the order of n.

>  Only the parameters of the attributes that you want to modify for the instance must be configured. For example, if the instance has Attribute A and Attribute B and only Attribute A must be modified, configure only the parameter of Attribute A.', example='test'),
      value?: string(name='Value', description='The value of the parameter n. Valid values of n: 1 to 100.', example='test'),
    }
  ](name='Parameter', description='The details about the parameters.'),
  productCode?: string(name='ProductCode', description='The code of the service to which the instance belongs.', example='rds'),
  productType?: string(name='ProductType', description='The type of the service to which the instance belongs.', example='rds'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: subscription
*   PayAsYouGo: pay-as-you-go', example='Subscription'),
}

model ModifyInstanceResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    hostId?: string(name='HostId', description='The ID of the host.', example='testId'),
    orderId?: string(name='OrderId', description='The ID of the order that was created.', example='202653252354351'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model ModifyInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceResponseBody(name='body'),
}

async function modifyInstanceWithOptions(request: ModifyInstanceRequest, runtime: Util.RuntimeOptions): ModifyInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.modifyType)) {
    query['ModifyType'] = request.modifyType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parameter)) {
    query['Parameter'] = request.parameter;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceWithOptions(request, runtime);
}

model QueryAccountBalanceResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  data?: {
    availableAmount?: string(name='AvailableAmount', description='The available balance of the account.', example='10000.00'),
    availableCashAmount?: string(name='AvailableCashAmount', description='The available balance in cash.', example='10000.00'),
    creditAmount?: string(name='CreditAmount', description='The credit balance of the account.', example='0.00'),
    currency?: string(name='Currency', description='The type of the currency. Valid values:

*   CNY: Chinese Yuan
*   USD: US dollar
*   JPY: Japanese Yen', example='CNY'),
    mybankCreditAmount?: string(name='MybankCreditAmount', description='The credit line controlled by MYbank.', example='0.00'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='16176743-6DC7-4CB3-BB25-A13982D8DFAD'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryAccountBalanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAccountBalanceResponseBody(name='body'),
}

async function queryAccountBalanceWithOptions(runtime: Util.RuntimeOptions): QueryAccountBalanceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'QueryAccountBalance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAccountBalance(): QueryAccountBalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountBalanceWithOptions(runtime);
}

model QueryAccountBillRequest {
  billOwnerId?: long(name='BillOwnerId', description='Specifies whether to summarize bills based on service codes. Valid values:

*   true: summarizes bills based on service codes.
*   false: does not summarize bills based on service codes.

Default value: false.', example='122'),
  billingCycle?: string(name='BillingCycle', example='2018-07'),
  billingDate?: string(name='BillingDate', description='The ID of the member. If you specify a value for this parameter, you can query the bills of the specified member. If you leave this parameter empty, the bills of the current account are queried by default.', example='2021-06-01'),
  granularity?: string(name='Granularity', description='The code of the service.', example='Monthly'),
  isGroupByProduct?: boolean(name='IsGroupByProduct', description='The number of the page to return. Default value: 1.', example='false'),
  ownerID?: long(name='OwnerID'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', description='The billing cycle. Format: YYYY-MM.', example='20'),
  productCode?: string(name='ProductCode', description='The number of entries to return on each page. Default value: 20. Maximum value: 300.', example='rds'),
}

model QueryAccountBillResponseBody = {
  code?: string(name='Code', description='The granularity at which bills are queried. Valid values:

*   MONTHLY: queries bills by month. The data queried is consistent with the data that is displayed for the specified billing cycle on the Billing Details tab of the Bill Details page in User Center.
*   DAILY: queries bills by day. The data queried is consistent with the data that is displayed for the specified day on the Billing Details tab of the Bill Details page in User Center.

You must set the BillingDate parameter before you can set the Granularity parameter to DAILY.', example='Success'),
  data?: {
    accountID?: string(name='AccountID', description='The page number of the returned page.', example='1857xxxxx489'),
    accountName?: string(name='AccountName', description='The number of entries returned per page.', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', description='The data returned.', example='2020-03'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', description='The billing date.', example='0'),
        billAccountID?: string(name='BillAccountID', description='The amount deducted by using prepaid cards.', example='1857xxxxx489'),
        billAccountName?: string(name='BillAccountName', description='The name of the member.', example='test@test.aliyunid.com'),
        billingDate?: string(name='BillingDate', description='The code of the service. The service code is consistent with that displayed in User Center.', example='2021-03-01'),
        bizType?: string(name='BizType', description='The billing method. Valid values:

*   Subscription: the subscription billing method
*   PayAsYouGo: the pay-as-you-go billing method

**

****A value is returned only if the IsGroupByProduct parameter is set to true.', example='trusteeship'),
        cashAmount?: float(name='CashAmount', description='Not allocated', example='0'),
        costUnit?: string(name='CostUnit', description='The discount amount.', example='The unsettled amount or the amount settled with credits.'),
        currency?: string(name='Currency', description='The amount deducted by using credit refunds.', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', description='The name of the account to which the bill belongs.', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', description='The ID of the member.', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', description='The business type.', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', description='The ID of the account to which the bill belongs.', example='0'),
        outstandingAmount?: float(name='OutstandingAmount', description='The amount paid in cash. The amount that was deducted by using credit refunds is included.', example='0'),
        ownerID?: string(name='OwnerID', description='The amount deducted by using vouchers.', example='325434254'),
        ownerName?: string(name='OwnerName', description='The name of the service.

**

****A value is returned only if the **IsGroupByProduct **parameter is set to true.', example='aligzncloudtest2'),
        paymentAmount?: float(name='PaymentAmount', description='The amount deducted by using coupons.', example='0'),
        pipCode?: string(name='PipCode', description='The name of the Alibaba Cloud account.', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', description='The details of the bills.', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', description='The cost center.', example='0'),
        productCode?: string(name='ProductCode', description='The pretax gross amount.', example='rds'),
        productName?: string(name='ProductName', description='The pretax amount.', example='rds'),
        subscriptionType?: string(name='SubscriptionType', description='The type of the currency. Valid values:

*   CNY
*   USD
*   JPY', example='PayAsYouGo'),
      }
    ](name='Item')
    }(name='Items', description='The total number of returned entries.'),
    pageNum?: int32(name='PageNum', description='Indicates whether the request is successful.', example='1'),
    pageSize?: int32(name='PageSize', description='The billing cycle. Format: YYYY-MM.', example='20'),
    totalCount?: int32(name='TotalCount', description='The ID of your Alibaba Cloud account.', example='1'),
  }(name='Data', description='The ID of the request.'),
  message?: string(name='Message', description='The billing date. This parameter is required only if the Granularity parameter is set to DAILY. Format: YYYY-MM-DD.', example='Successful!'),
  requestId?: string(name='RequestId', description='The status code returned.', example='3BFC23FE-A182-4D96-A1E4-7521B30B8E43'),
  success?: boolean(name='Success', description='The message returned.', example='true'),
}

model QueryAccountBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAccountBillResponseBody(name='body'),
}

/**
  * ##
  * Before you call this operation, take note of the following items:
  * *   Account bills are summarized based on instance bills. In most cases, the account bills do not include the data generated on the last day of the specified period.
  * *   You can query the data generated in June 2020 or later for Cloud Communications services. However, the query results do not include the data of Alibaba Cloud Domains.
  *
  * @param request QueryAccountBillRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryAccountBillResponse
 */
async function queryAccountBillWithOptions(request: QueryAccountBillRequest, runtime: Util.RuntimeOptions): QueryAccountBillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.billingDate)) {
    query['BillingDate'] = request.billingDate;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.isGroupByProduct)) {
    query['IsGroupByProduct'] = request.isGroupByProduct;
  }
  if (!Util.isUnset(request.ownerID)) {
    query['OwnerID'] = request.ownerID;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAccountBill',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ##
  * Before you call this operation, take note of the following items:
  * *   Account bills are summarized based on instance bills. In most cases, the account bills do not include the data generated on the last day of the specified period.
  * *   You can query the data generated in June 2020 or later for Cloud Communications services. However, the query results do not include the data of Alibaba Cloud Domains.
  *
  * @param request QueryAccountBillRequest
  * @return QueryAccountBillResponse
 */
async function queryAccountBill(request: QueryAccountBillRequest): QueryAccountBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountBillWithOptions(request, runtime);
}

model QueryAccountTransactionDetailsRequest {
  createTimeEnd?: string(name='CreateTimeEnd', description='The end of the creation time range to query.', example='2022-12-20'),
  createTimeStart?: string(name='CreateTimeStart', description='The beginning of the creation time range to query.', example='2022-01-20'),
  maxResults?: int32(name='MaxResults', description='This parameter is invalid.', example='0'),
  nextToken?: string(name='NextToken', description='The token that is used for paging.', example='ABEDSDS124DASA'),
  recordID?: string(name='RecordID', description='The ID of the order or bill.', example='2022120336190912'),
  transactionChannel?: string(name='TransactionChannel', description='The transaction channel.', example='ALIPAY'),
  transactionChannelSN?: string(name='TransactionChannelSN', description='The serial number of the transaction channel.', example='2022112122001470591458665933'),
  transactionNumber?: string(name='TransactionNumber', description='The number of the transaction.', example='410874027490089'),
  transactionType?: string(name='TransactionType', description='The type of the transaction.', example='CHARGE'),
}

model QueryAccountTransactionDetailsResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  data?: {
    accountName?: string(name='AccountName', description='The name of the account.', example='yidi'),
    accountTransactionsList?: {
      accountTransactionsList?: [ 
      {
        amount?: string(name='Amount', description='The amount of the transaction.', example='1.00'),
        balance?: string(name='Balance', description='The balance of the account.', example='0'),
        billingCycle?: string(name='BillingCycle', description='The billing cycle.', example='2022-10'),
        fundType?: string(name='FundType', description='The type of transaction payment. Valid values:

Cash: pay for the transaction in cash. Deposit: pay for the transaction with deposit. RegularBankCreditRefund: pay for the transaction with credit refund controlled by a bank. DirectPay: directly pay for the transaction.', example='Cash'),
        recordID?: string(name='RecordID', description='The ID of the order or bill.', example='2022120336190912'),
        remarks?: string(name='Remarks', description='The remarks.', example='Test'),
        transactionAccount?: string(name='TransactionAccount', description='The transaction account.', example='fortune_test@xxx.com'),
        transactionChannel?: string(name='TransactionChannel', description='The transaction channel.', example='ALIPAY'),
        transactionChannelSN?: string(name='TransactionChannelSN', description='The serial number of the transaction channel.', example='123232434343532'),
        transactionFlow?: string(name='TransactionFlow', description='Indicates whether the transaction is of the income type or the expenditure type. If one of the following types is specified, results for the specific type are returned. If the type that you specified for the parameter does not belong to the following types, no result is returned. If the parameter is left empty, results for transactions of the income and expenditure types are all returned. Valid values:

Income and Expense.', example='Income'),
        transactionNumber?: string(name='TransactionNumber', description='The number of the transaction.', example='43342334'),
        transactionTime?: string(name='TransactionTime', description='The time when the transaction was made.', example='2022-10-01'),
        transactionType?: string(name='TransactionType', description='The type of the transaction. If one of the following transaction types is specified, results for the specified transaction type are returned. If the transaction type that you specified does not belong to the following transaction types, no result is returned. If the parameter is left empty, results for all transaction types are returned. Valid values:

Payment, Withdraw, Refund, Consumption, Transfer, and Adjust.', example='Consumption'),
      }
    ](name='AccountTransactionsList')
    }(name='AccountTransactionsList', description='The details of the transactions within the account.'),
    maxResults?: int32(name='MaxResults', description='This parameter is invalid.', example='0'),
    nextToken?: string(name='NextToken', description='The token that is used for paging.', example='ASHDADS'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='SUCCESS'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='asadadad-edafafafaasd'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryAccountTransactionDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAccountTransactionDetailsResponseBody(name='body'),
}

async function queryAccountTransactionDetailsWithOptions(request: QueryAccountTransactionDetailsRequest, runtime: Util.RuntimeOptions): QueryAccountTransactionDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createTimeEnd)) {
    query['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    query['CreateTimeStart'] = request.createTimeStart;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.recordID)) {
    query['RecordID'] = request.recordID;
  }
  if (!Util.isUnset(request.transactionChannel)) {
    query['TransactionChannel'] = request.transactionChannel;
  }
  if (!Util.isUnset(request.transactionChannelSN)) {
    query['TransactionChannelSN'] = request.transactionChannelSN;
  }
  if (!Util.isUnset(request.transactionNumber)) {
    query['TransactionNumber'] = request.transactionNumber;
  }
  if (!Util.isUnset(request.transactionType)) {
    query['TransactionType'] = request.transactionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAccountTransactionDetails',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAccountTransactionDetails(request: QueryAccountTransactionDetailsRequest): QueryAccountTransactionDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountTransactionDetailsWithOptions(request, runtime);
}

model QueryAccountTransactionsRequest {
  createTimeEnd?: string(name='CreateTimeEnd', description='The end of the creation time range to query. By default, the transactions in the last month are queried. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. Example: 2018-01-01T00:00:00Z.', example='2020-03-06T01:55:00Z'),
  createTimeStart?: string(name='CreateTimeStart', description='The beginning of the creation time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. Example: 2018-01-01T00:00:00Z.', example='2020-03-05T01:46:09Z'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  recordID?: string(name='RecordID', description='The ID of the order or bill.', example='20200302'),
  transactionChannel?: string(name='TransactionChannel', description='The transaction channel. If you specify one of the following transaction channels for this parameter, the results for the specified transaction channel are returned. If the transaction channel that you specify does not belong to the following transaction channels, no result is returned. If you leave this parameter empty, the results for all the following transaction channels are returned by default. Valid values:

*   AccountBalance
*   BankTransfer
*   Alipay
*   AntCreditPay
*   OfflineRemittance
*   RegularBankCreditRefund
*   CreditCard
*   MyBankCredit
*   HuaxiaBankCInstallment
*   ApplePay', example='AccountBalance'),
  transactionChannelSN?: string(name='TransactionChannelSN', description='The serial number of the transaction channel.', example='12342134'),
  transactionFlow?: string(name='TransactionFlow', description='The type of the transaction flow. If you specify one of the following types for this parameter, the results for the specified type are returned. If the type that you specify does not belong to the following types, no result is returned. If you leave this parameter empty, the results for the following two types are returned by default. Valid values:

*   Income
*   Expense', example='Income'),
  transactionNumber?: string(name='TransactionNumber', description='The number of the transaction.', example='133314076'),
  transactionType?: string(name='TransactionType', description='The type of the transaction. If you specify one of the following transaction types for this parameter, the results for the specified transaction type are returned. If the transaction type that you specify does not belong to the following types, no result is returned. If you leave this parameter empty, the results for all the following transaction types are returned by default. Valid values:

*   Payment
*   Withdraw
*   Refund
*   Consumption
*   Transfer
*   Adjust', example='Payment'),
}

model QueryAccountTransactionsResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    accountName?: string(name='AccountName', description='The name of your Alibaba Cloud account.', example='test@test.aliyunid.com'),
    accountTransactionsList?: {
      accountTransactionsList?: [ 
      {
        amount?: string(name='Amount', description='The amount.', example='0'),
        balance?: string(name='Balance', description='The balance of the account.', example='0'),
        billingCycle?: string(name='BillingCycle', description='The billing cycle. Format: YYYY-MM.', example='2020-03'),
        fundType?: string(name='FundType', description='The type of transaction payment. Valid values:

*   Cash: pay for the transaction in cash.
*   Deposit: pay for the transaction with deposit.
*   RegularBankCreditRefund: pay for the transaction with credit refund controlled by a bank.
*   DirectPay: directly pay for the transaction.', example='Cash'),
        recordID?: string(name='RecordID', description='The number of the order or bill.', example='2020030242'),
        remarks?: string(name='Remarks', description='The remarks on the transaction.', example='NAT_GW'),
        transactionAccount?: string(name='TransactionAccount', description='The transaction account. For example, the account is a recharge account in Alipay or a transfer account.', example='213562146'),
        transactionChannel?: string(name='TransactionChannel', description='The transaction channel.

*   AccountBalance
*   BankTransfer
*   Alipay
*   AntCreditPay
*   OfflineRemittance
*   RegularBankCreditRefund
*   CreditCard
*   MyBankCredit
*   HuaxiaBankCInstallment
*   ApplePay', example='AccountBalance'),
        transactionChannelSN?: string(name='TransactionChannelSN', description='The serial number of the transaction channel.', example='1234354325'),
        transactionFlow?: string(name='TransactionFlow', description='The type of the transaction flow.

*   Income
*   Expense', example='Expense'),
        transactionNumber?: string(name='TransactionNumber', description='The number of the transaction.', example='43342334'),
        transactionTime?: string(name='TransactionTime', description='The time when the transaction was made.', example='2020-03-10T02:03:20Z'),
        transactionType?: string(name='TransactionType', description='The type of the transaction.

*   Payment
*   Withdraw
*   Refund
*   Consumption
*   Transfer
*   Adjust', example='Consumption'),
      }
    ](name='AccountTransactionsList')
    }(name='AccountTransactionsList', description='The information about transactions.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='10'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='8634E02D-0942-4B1D-8295-5352FE9A1F39'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryAccountTransactionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAccountTransactionsResponseBody(name='body'),
}

async function queryAccountTransactionsWithOptions(request: QueryAccountTransactionsRequest, runtime: Util.RuntimeOptions): QueryAccountTransactionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createTimeEnd)) {
    query['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    query['CreateTimeStart'] = request.createTimeStart;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.recordID)) {
    query['RecordID'] = request.recordID;
  }
  if (!Util.isUnset(request.transactionChannel)) {
    query['TransactionChannel'] = request.transactionChannel;
  }
  if (!Util.isUnset(request.transactionChannelSN)) {
    query['TransactionChannelSN'] = request.transactionChannelSN;
  }
  if (!Util.isUnset(request.transactionFlow)) {
    query['TransactionFlow'] = request.transactionFlow;
  }
  if (!Util.isUnset(request.transactionNumber)) {
    query['TransactionNumber'] = request.transactionNumber;
  }
  if (!Util.isUnset(request.transactionType)) {
    query['TransactionType'] = request.transactionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAccountTransactions',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAccountTransactions(request: QueryAccountTransactionsRequest): QueryAccountTransactionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountTransactionsWithOptions(request, runtime);
}

model QueryAvailableInstancesRequest {
  createTimeEnd?: string(name='CreateTimeEnd', description='The end time when the specified instance is created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2016-05-23T12:00:00Z'),
  createTimeStart?: string(name='CreateTimeStart', description='The start time when the specified instance is created. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2016-05-23T12:00:00Z'),
  endTimeEnd?: string(name='EndTimeEnd', description='The end of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. Example: 2016-05-23T12:00:00Z.', example='2016-05-23T12:00:00Z'),
  endTimeStart?: string(name='EndTimeStart', description='The beginning of the time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC. Example: 2016-05-23T12:00:00Z.', example='2016-05-23T12:00:00Z'),
  instanceIDs?: string(name='InstanceIDs', description='The ID of the instance. Separate multiple IDs with commas (,). You can specify a maximum of 100 IDs.', example='rm-xxxxxxxxxxxx'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  productCode?: string(name='ProductCode', description='The code of the service. You can query the service code by calling the **QueryProductList** operation or viewing **Codes of Alibaba Cloud services**.

>This parameter cannot be left empty if the region is specified.', example='rds'),
  productType?: string(name='ProductType', description='The type of the service.', example='rds'),
  region?: string(name='Region', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
  renewStatus?: string(name='RenewStatus', description='The renewal status of the specified instance. Valid values:

*   AutoRenewal: The instance is automatically renewed.
*   ManualRenewal: The instance is manually renewed.
*   NotRenewal: The instance is not renewed.', example='AutoRenewal'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: subscription
*   PayAsYouGo: pay-as-you-go', example='Subscription'),
}

model QueryAvailableInstancesResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    instanceList?: [ 
      {
        createTime?: string(name='CreateTime', description='The time when the specified instance was created.', example='2019-09-08T16:00:00Z'),
        endTime?: string(name='EndTime', description='The time when the instance was expired.', example='2019-09-08T16:00:00Z'),
        expectedReleaseTime?: string(name='ExpectedReleaseTime', description='The time when the specified instance was expected to be released.', example='2019-09-08T16:00:00Z'),
        instanceID?: string(name='InstanceID', description='The ID of the instance.', example='1049056'),
        ownerId?: long(name='OwnerId', description='The ID of the instance owner.', example='325352345'),
        productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
        productType?: string(name='ProductType', description='The type of the service.', example='rds'),
        region?: string(name='Region', description='The ID of the region in which the instance resides.', example='cn-hangzhou'),
        releaseTime?: string(name='ReleaseTime', description='The time when the instance was released.', example='2019-09-08T16:00:00Z'),
        renewStatus?: string(name='RenewStatus', description='The renewal status of the specified instance. Valid values:

*   AutoRenewal: The instance is automatically renewed.
*   ManualRenewal: The instance is manually renewed.
*   NotRenewal: The instance is not renewed.', example='ManualRenewal'),
        renewalDuration?: int32(name='RenewalDuration', description='The number of auto-renewal cycles.', example='1'),
        renewalDurationUnit?: string(name='RenewalDurationUnit', description='The unit of the auto-renewal cycle. Valid values:

*   M: month
*   Y: year', example='M'),
        seller?: string(name='Seller', description='The seller.', example='123123123'),
        sellerId?: long(name='SellerId', description='The ID of the seller.', example='123123123'),
        status?: string(name='Status', description='The status of the instance.', example='Creating: The instance is being created. WaitForExpire: The instance is about to expire. Normal: The instance can properly run. Expired: The instance is expired.'),
        stopTime?: string(name='StopTime', description='The time when the specified instance was suspended.', example='2019-09-08T16:00:00Z'),
        subStatus?: string(name='SubStatus', description='The sub-status of the specified instance.', example='Normal: The pay-as-you-go module can properly run. WaitForLimit: The pay-as-you-go module is about to be limited due to overdue payments. BandwidthLimited: The pay-as-you-go module is limited due to overdue payments.'),
        subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: subscription
*   PayAsYouGo: pay-as-you-go', example='Subscription'),
      }
    ](name='InstanceList', description='The instances returned.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='11'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C7C15585-8349-4C62-BEE4-5A391841B9BE'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryAvailableInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAvailableInstancesResponseBody(name='body'),
}

async function queryAvailableInstancesWithOptions(request: QueryAvailableInstancesRequest, runtime: Util.RuntimeOptions): QueryAvailableInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createTimeEnd)) {
    query['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    query['CreateTimeStart'] = request.createTimeStart;
  }
  if (!Util.isUnset(request.endTimeEnd)) {
    query['EndTimeEnd'] = request.endTimeEnd;
  }
  if (!Util.isUnset(request.endTimeStart)) {
    query['EndTimeStart'] = request.endTimeStart;
  }
  if (!Util.isUnset(request.instanceIDs)) {
    query['InstanceIDs'] = request.instanceIDs;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.renewStatus)) {
    query['RenewStatus'] = request.renewStatus;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAvailableInstances',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAvailableInstances(request: QueryAvailableInstancesRequest): QueryAvailableInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAvailableInstancesWithOptions(request, runtime);
}

model QueryBillRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the member.', example='123'),
  billingCycle?: string(name='BillingCycle', description='The billing cycle, in the YYYY-MM format.', example='2018-07'),
  isDisplayLocalCurrency?: boolean(name='IsDisplayLocalCurrency', description='Specifies whether to display local currency information in bills. The parameter will be discontinued.', example='false'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', description='Specifies whether to filter out a bill whose pretax gross amount is 0. By default, a bill whose pretax gross amount is 0 is not filtered out. Valid values:

*   true: filters out a bill whose pretax gross amount is 0.
*   false: does not filter out a bill whose pretax gross amount is 0.', example='true'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. Maximum value: 300.', example='20'),
  productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
  productType?: string(name='ProductType', description='The type of the service.', example='rds'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription
*   PayAsYouGo

**

****This parameter must be used together with the ProductCode parameter.', example='Subscription'),
  type?: string(name='Type', description='The type of the bill. Valid values:

*   SubscriptionOrder
*   PayAsYouGoBill
*   Refund
*   Adjustment', example='SubscriptionOrder'),
}

model QueryBillResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    accountID?: string(name='AccountID', description='The ID of the account.', example='185xxxxx489'),
    accountName?: string(name='AccountName', description='The name of the account.', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', description='The billing cycle, in the YYYY-MM format.', example='2020-02'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', description='The amount deducted by using credit refunds.', example='0'),
        afterTaxAmount?: float(name='AfterTaxAmount', description='The amount paid after tax is deducted.', example='0'),
        cashAmount?: float(name='CashAmount', description='The amount paid in cash. The amount that was deducted by using credit refunds is not included.', example='0'),
        commodityCode?: string(name='CommodityCode', description='The code of the commodity.', example='rds'),
        currency?: string(name='Currency', description='The type of the currency.

*   CNY
*   USD
*   JPY', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', description='The amount deducted by using vouchers.', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', description='The amount deducted by using coupons.', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', description='The amount deducted by using prepaid cards.', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', description='The discount amount.', example='0'),
        item?: string(name='Item', description='The type of the bill.

*   SubscriptionOrder
*   PayAsYouGoBill
*   Refund
*   Adjustment', example='SubscriptionOrder'),
        outstandingAmount?: float(name='OutstandingAmount', description='The unsettled amount of the bill.', example='0'),
        ownerID?: string(name='OwnerID', description='The ID of the member. This parameter is returned in a multi-account payment scenario.', example='3532535235'),
        paymentAmount?: float(name='PaymentAmount', description='The amount paid with cash.', example='0'),
        paymentCurrency?: string(name='PaymentCurrency', description='The currency used for payment.', example='USD'),
        paymentTime?: string(name='PaymentTime', description='The time when the order was paid.', example='2020-03-11 08:00:00'),
        paymentTransactionID?: string(name='PaymentTransactionID', description='The ID of the transaction.', example='2O3AADJFEAF2PDKSFAMFCB11918'),
        pipCode?: string(name='PipCode', description='The code of the service.', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', description='The pretax amount', example='100'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal', description='The pretax amount paid in local currency.', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', description='The pretax gross amount.', example='0'),
        productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
        productDetail?: string(name='ProductDetail', description='The details of the service.', example='ApsaraDB RDS (subscription)'),
        productName?: string(name='ProductName', description='The name of the service.', example='ApsaraDB RDS'),
        productType?: string(name='ProductType', description='The type of the service.', example='rds'),
        recordID?: string(name='RecordID', description='The ID of the order or bill.', example='2020xxxx5912'),
        roundDownDiscount?: string(name='RoundDownDiscount', description='The round down discount.', example='0'),
        status?: string(name='Status', description='The payment status of the bill. Valid values:

*   PayFinish: The bill is paid.
*   PayUnclear: The bill is not cleared.
*   PayUnsettle: The bill is not settled.
*   NoSettle: The bill is free of settlement.', example='PayFinish'),
        subOrderId?: string(name='SubOrderId', description='The ID of the order corresponding to the bill.', example='325345254353'),
        subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription
*   PayAsYouGo', example='PayAsYouGo'),
        tax?: float(name='Tax', description='The tax.', example='0'),
        usageEndTime?: string(name='UsageEndTime', description='The time when the bill ends.', example='2020-03-11 08:00:00'),
        usageStartTime?: string(name='UsageStartTime', description='The time when the bill starts.', example='2020-03-11 07:00:00'),
      }
    ](name='Item')
    }(name='Items', description='The details of the bills.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='1'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='20'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AE3F4057-DFC9-4B81-8858-F620651010C9'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBillResponseBody(name='body'),
}

async function queryBillWithOptions(request: QueryBillRequest, runtime: Util.RuntimeOptions): QueryBillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.isDisplayLocalCurrency)) {
    query['IsDisplayLocalCurrency'] = request.isDisplayLocalCurrency;
  }
  if (!Util.isUnset(request.isHideZeroCharge)) {
    query['IsHideZeroCharge'] = request.isHideZeroCharge;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryBill',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBill(request: QueryBillRequest): QueryBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBillWithOptions(request, runtime);
}

model QueryBillOverviewRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the member. If you specify a value for this parameter, you can query the bills of the specified member. If you leave this parameter empty, the bills of the current account are queried by default.', example='1234'),
  billingCycle?: string(name='BillingCycle', description='The billing cycle, in the YYYY-MM format.', example='2018-07'),
  productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
  productType?: string(name='ProductType', description='The type of the service.', example='rds'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: the subscription billing method
*   PayAsYouGo: the pay-as-you-go billing method', example='Subscription'),
}

model QueryBillOverviewResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    accountID?: string(name='AccountID', description='The ID of the account.', example='185766xxxx'),
    accountName?: string(name='AccountName', description='The name of the account.', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', description='The billing cycle, in the YYYY-MM format.', example='2020-03'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', description='The amount deducted by using credit refunds.', example='0'),
        afterTaxAmount?: float(name='AfterTaxAmount', example='0'),
        billAccountID?: string(name='BillAccountID', description='The ID of the account to which the bill belongs.', example='185766xxxx'),
        billAccountName?: string(name='BillAccountName', description='The name of the account to which the bill belongs.', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', description='The business type.', example='trusteeship'),
        cashAmount?: float(name='CashAmount', description='The amount paid in cash. The amount that was deducted by using credit refunds is not included.', example='0'),
        commodityCode?: string(name='CommodityCode', description='The code of the commodity. The commodity code is the same as that displayed in User Center.', example='rds'),
        currency?: string(name='Currency', description='The type of the currency. Valid values:

*   CNY
*   USD
*   JPY', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', description='The amount deducted by using vouchers.', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', description='The amount deducted by using coupons.', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', description='The amount deducted by using prepaid cards.', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', description='The discount amount.', example='0'),
        item?: string(name='Item', description='The type of the bill. Valid values:

*   SubscriptionOrder
*   PayAsYouGoBill
*   Refund
*   Adjustment', example='PayAsYouGoBill'),
        outstandingAmount?: float(name='OutstandingAmount', description='The unsettled amount or the amount deducted by using credits. This may be an unsettled amount of a regular user or credits consumed by a credit user.', example='0'),
        ownerID?: string(name='OwnerID', description='The ID of the bill owner.', example='1222'),
        paymentAmount?: float(name='PaymentAmount', description='The amount paid in cash. The amount that was deducted by using credit refunds is included.', example='100'),
        paymentCurrency?: string(name='PaymentCurrency', example='USD'),
        pipCode?: string(name='PipCode', description='The code of the service. The service code is the same as that displayed in User Center.', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', description='The pretax amount.', example='100'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', description='The pretax gross amount.', example='100'),
        productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
        productDetail?: string(name='ProductDetail', description='The details of the service.', example='NAT Gateway (Pay-As-You-Go)'),
        productName?: string(name='ProductName', description='The name of the service.', example='NAT Gateway'),
        productType?: string(name='ProductType', description='The type of the service.', example='rds'),
        roundDownDiscount?: string(name='RoundDownDiscount', description='The round down discount.', example='0'),
        subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: the subscription billing method
*   PayAsYouGo: the pay-as-you-go billing method', example='Subscription'),
        tax?: float(name='Tax', example='0'),
      }
    ](name='Item')
    }(name='Items', description='The details of the bills.'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BCB1E1BC-05BF-4217-80EE-BF09A29407BA'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryBillOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBillOverviewResponseBody(name='body'),
}

async function queryBillOverviewWithOptions(request: QueryBillOverviewRequest, runtime: Util.RuntimeOptions): QueryBillOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryBillOverview',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBillOverview(request: QueryBillOverviewRequest): QueryBillOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBillOverviewWithOptions(request, runtime);
}

model QueryBillToOSSSubscriptionResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    accountID?: string(name='AccountID', description='The ID of the account used to perform the query.', example='185xxxxx03489'),
    accountName?: string(name='AccountName', description='The name of the account used to perform the query.', example='test@test.aliyunid.com'),
    items?: {
      item?: [ 
      {
        bucketOwnerId?: long(name='BucketOwnerId', description='The owner ID of the Object Storage Service (OSS) bucket.', example='1369168081849304'),
        bucketPath?: string(name='BucketPath', description='The path in the OSS bucket.', example='Billing/BillingItemDetailMonthly/'),
        rowLimitPerFile?: int32(name='RowLimitPerFile', description='The maximum number of data rows in a single file. If the number of data rows in a bill exceeds the upper limit, the bill is split into multiple files. Then, multiple files are merged and compressed into a package.', example='300000'),
        subscribeBucket?: string(name='SubscribeBucket', description='The ID of the OSS bucket that stores the subscribed bill.', example='billingtestbucket'),
        subscribeLanguage?: string(name='SubscribeLanguage', description='The code of the language.

Valid values:

*   en: English
*   zh: Chinese', example='zh'),
        subscribeTime?: string(name='SubscribeTime', description='The time when the subscribed bill was stored in the OSS bucket. The time is displayed in the YYYY-MM-DD hh:mm:ss format.', example='2019-10-30 15:40:11'),
        subscribeType?: string(name='SubscribeType', description='The type of the subscribed bill. Valid values:

*   BillingItemDetailForBillingPeriod: the bill of a billable item.
*   InstanceDetailForBillingPeriod: the bill of an instance.', example='BillingItemDetailForBillingPeriod'),
      }
    ](name='Item')
    }(name='Items', description='The details of the subscribed bill.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9EEAE43F-1E4D-4734-AE93-5049878AC103'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryBillToOSSSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBillToOSSSubscriptionResponseBody(name='body'),
}

async function queryBillToOSSSubscriptionWithOptions(runtime: Util.RuntimeOptions): QueryBillToOSSSubscriptionResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'QueryBillToOSSSubscription',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBillToOSSSubscription(): QueryBillToOSSSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBillToOSSSubscriptionWithOptions(runtime);
}

model QueryCashCouponsRequest {
  effectiveOrNot?: boolean(name='EffectiveOrNot', description='Specifies whether the voucher takes effect. Valid values:

*   true: The voucher takes effect.
*   false: The voucher does not take effect.', example='true'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd', description='The end time of the validity period of the voucher. Specify the parameter in the yyyy-MM-ddTHH:mm:ssZ format. Example: 2018-08-01T00:00:00Z.', example='2018-08-01T00:00:00Z'),
  expiryTimeStart?: string(name='ExpiryTimeStart', description='The start time of the validity period of the voucher. Specify the parameter in the yyyy-MM-ddTHH:mm:ssZ format. Example: 2018-08-01T00:00:00Z.', example='2018-08-01T00:00:00Z'),
}

model QueryCashCouponsResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    cashCoupon?: [ 
    {
      applicableProducts?: string(name='ApplicableProducts', description='The service to which the voucher is applicable.', example='All Alibaba Cloud services'),
      applicableScenarios?: string(name='ApplicableScenarios', description='The scenario to which the voucher is applicable.', example='Pay for the pay-as-you-go bills of Alibaba Cloud services or purchase an instance of an Alibaba Cloud service'),
      balance?: string(name='Balance', description='The remaining quota of the voucher.', example='100.00'),
      cashCouponId?: long(name='CashCouponId', description='The ID of the voucher.', example='34534253254325'),
      cashCouponNo?: string(name='CashCouponNo', description='The code of the voucher.', example='Q-b1485def8f04a'),
      description?: string(name='Description'),
      effectiveTime?: string(name='EffectiveTime', description='The time when the voucher took effect.', example='2018-08-02T15:15:50Z'),
      expiryTime?: string(name='ExpiryTime', description='The time when the voucher expired.', example='2019-01-29T15:15:50Z'),
      grantedTime?: string(name='GrantedTime', description='The time when the voucher was released.', example='2018-08-02T15:15:50Z'),
      nominalValue?: string(name='NominalValue', description='The denomination of the voucher.', example='100.00'),
      status?: string(name='Status', description='The state of the voucher. Valid values:

*   Available: The voucher is valid.
*   Expired: The voucher has expired.
*   Cancelled: The voucher is canceled.', example='Available'),
    }
  ](name='CashCoupon')
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='147B566E-DB4C-4E43-BDBB-5DB1D9D268DB'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryCashCouponsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCashCouponsResponseBody(name='body'),
}

async function queryCashCouponsWithOptions(request: QueryCashCouponsRequest, runtime: Util.RuntimeOptions): QueryCashCouponsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.effectiveOrNot)) {
    query['EffectiveOrNot'] = request.effectiveOrNot;
  }
  if (!Util.isUnset(request.expiryTimeEnd)) {
    query['ExpiryTimeEnd'] = request.expiryTimeEnd;
  }
  if (!Util.isUnset(request.expiryTimeStart)) {
    query['ExpiryTimeStart'] = request.expiryTimeStart;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCashCoupons',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCashCoupons(request: QueryCashCouponsRequest): QueryCashCouponsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCashCouponsWithOptions(request, runtime);
}

model QueryCommodityListRequest {
  lang?: string(name='Lang'),
  productCode?: string(name='ProductCode', description='The code of the service.', example='ecs'),
}

model QueryCommodityListResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='NotApplicable'),
  data?: {
    commodityList?: [ 
      {
        chargeType?: string(name='ChargeType', description='The payment type. Valid values: POSTPAY (pay-as-you-go) and PREPAY (subscription).', example='POSTPAY'),
        commodityCode?: string(name='CommodityCode', description='The code of the service, which is the same as that on the Billing Management page.', example='ecs'),
        commodityName?: string(name='CommodityName', description='The name of the service.', example='ECS (Pay-As-You-Go)'),
      }
    ](name='CommodityList', description='The information about the service.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The returned message.', example='Successful!'),
  requestId?: string(name='RequestId', description='Id of the request', example='CC706AAC-75A6-55B5-9AB7-7D171C6C7655'),
  success?: boolean(name='Success', description='Indicates whether the information about the service was queried.', example='True'),
}

model QueryCommodityListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCommodityListResponseBody(name='body'),
}

/**
  * You can call this operation to query the information about a service based on the service code.
  *
  * @param request QueryCommodityListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryCommodityListResponse
 */
async function queryCommodityListWithOptions(request: QueryCommodityListRequest, runtime: Util.RuntimeOptions): QueryCommodityListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCommodityList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the information about a service based on the service code.
  *
  * @param request QueryCommodityListRequest
  * @return QueryCommodityListResponse
 */
async function queryCommodityList(request: QueryCommodityListRequest): QueryCommodityListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCommodityListWithOptions(request, runtime);
}

model QueryCostUnitRequest {
  ownerUid?: long(name='OwnerUid', description='The user ID of the cost center owner.', example='28394563429587'),
  pageNum?: int32(name='PageNum', description='The page number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries per page. A maximum of 300 entries can be returned per page.', example='20'),
  parentUnitId?: long(name='ParentUnitId', description='The ID of the parent cost center. A value of -1 indicates the root cost center.', example='-1'),
}

model QueryCostUnitResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    costUnitDtoList?: [ 
      {
        ownerUid?: long(name='OwnerUid', description='The user ID of the cost center owner.', example='2343464'),
        parentUnitId?: long(name='ParentUnitId', description='The ID of the parent cost center. A value of -1 indicates the root cost center.', example='-1'),
        unitId?: long(name='UnitId', description='The ID of the cost center.', example='23534'),
        unitName?: string(name='UnitName', description='The name of the cost center.', example='test'),
      }
    ](name='CostUnitDtoList', description='The cost centers.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model QueryCostUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCostUnitResponseBody(name='body'),
}

async function queryCostUnitWithOptions(request: QueryCostUnitRequest, runtime: Util.RuntimeOptions): QueryCostUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerUid)) {
    query['OwnerUid'] = request.ownerUid;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentUnitId)) {
    query['ParentUnitId'] = request.parentUnitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCostUnit',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCostUnit(request: QueryCostUnitRequest): QueryCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCostUnitWithOptions(request, runtime);
}

model QueryCostUnitResourceRequest {
  ownerUid?: long(name='OwnerUid', description='The user ID of the cost center owner.', example='23453245'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  unitId?: long(name='UnitId', description='The ID of the cost center.', example='235325'),
}

model QueryCostUnitResourceResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    costUnit?: {
      ownerUid?: long(name='OwnerUid', description='The user ID of the cost center owner.', example='321432'),
      parentUnitId?: long(name='ParentUnitId', description='The ID of the parent cost center. A value of -1 indicates the root cost center.', example='23421'),
      unitId?: long(name='UnitId', description='The ID of the cost center.', example='123412'),
      unitName?: string(name='UnitName', description='The name of the cost center.', example='test'),
    }(name='CostUnit', description='The information about the cost center.'),
    costUnitStatisInfo?: {
      resourceCount?: long(name='ResourceCount', description='The number of resource instances in the cost center.', example='1'),
      resourceGroupCount?: long(name='ResourceGroupCount', description='The number of resource groups in the cost center.', example='1'),
      subUnitCount?: long(name='SubUnitCount', description='The number of sub-cost centers in the cost center.', example='2'),
      totalResourceCount?: long(name='TotalResourceCount', description='The total number of resource instances, including resource instances of sub-cost centers, in the cost center.', example='3'),
      totalResourceGroupCount?: long(name='TotalResourceGroupCount', description='The total number of resource groups, including resource groups of sub-cost centers, in the cost center.', example='2'),
      totalUserCount?: long(name='TotalUserCount', description='The total number of the associated accounts, including associated accounts of sub-cost centers, in the cost center.', example='2'),
      userCount?: long(name='UserCount', description='The number of sub-cost centers in the cost center.', example='0'),
    }(name='CostUnitStatisInfo', description='The statistical information about the cost center.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    resourceInstanceDtoList?: [ 
      {
        apportionCode?: string(name='ApportionCode', description='The split code of the resource.', example='test'),
        apportionName?: string(name='ApportionName', description='The split name of the resource.', example='test'),
        commodityCode?: string(name='CommodityCode', description='The product code of the resource.', example='rds'),
        commodityName?: string(name='CommodityName', description='The commodity name of the resource.', example='ApsaraDB'),
        relatedResources?: string(name='RelatedResources', description='The resources related to the resource instance.', example='oss'),
        resourceGroup?: string(name='ResourceGroup', description='The resource group to which the resource belongs.', example='Default Resource Group'),
        resourceId?: string(name='ResourceId', description='The instance ID of the resource.', example='OSSBAG-cn-v0h1s4hma018'),
        resourceNick?: string(name='ResourceNick', description='The custom name of the resource.', example='testResource'),
        resourceStatus?: string(name='ResourceStatus', description='The status of the resource.', example='Available'),
        resourceTag?: string(name='ResourceTag', description='The tags of the resource.', example='testResource'),
        resourceType?: string(name='ResourceType', description='The type of the resource.', example='FPT_ossbag_absolute_Storage_bj'),
        resourceUserId?: long(name='ResourceUserId', description='The user ID of the resource owner.', example='2424242134'),
        resourceUserName?: string(name='ResourceUserName', description='The username of the resource owner.', example='test@test.aliyun.com'),
      }
    ](name='ResourceInstanceDtoList', description='The resource instances.'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='12'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='04332CB7-9A57-4461-97E0-02821D044414'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model QueryCostUnitResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCostUnitResourceResponseBody(name='body'),
}

async function queryCostUnitResourceWithOptions(request: QueryCostUnitResourceRequest, runtime: Util.RuntimeOptions): QueryCostUnitResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerUid)) {
    query['OwnerUid'] = request.ownerUid;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.unitId)) {
    query['UnitId'] = request.unitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCostUnitResource',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCostUnitResource(request: QueryCostUnitResourceRequest): QueryCostUnitResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCostUnitResourceWithOptions(request, runtime);
}

model QueryCustomerAddressListRequest {
  ownerId?: long(name='OwnerId'),
}

model QueryCustomerAddressListResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    customerInvoiceAddressList?: {
      customerInvoiceAddress?: [ 
      {
        addressee?: string(name='Addressee', description='The addressee.', example='test'),
        bizType?: string(name='BizType', description='The business type.', example='test'),
        city?: string(name='City', description='The city to which the invoice is mailed.', example='Hangzhou'),
        county?: string(name='County', description='The name of the district to which the invoice is mailed.', example='Test District'),
        deliveryAddress?: string(name='DeliveryAddress', description='The detailed address to which the invoice is mailed. This parameter is returned after fields are concatenated.', example='Test Address'),
        id?: long(name='Id', description='The ID.', example='311601051'),
        phone?: string(name='Phone', description='The phone number of the addressee.', example='138xxxxxxxx'),
        postalCode?: string(name='PostalCode', description='The postcode.', example='000000'),
        province?: string(name='Province', description='The province to which the invoice is mailed.', example='Zhejiang'),
        street?: string(name='Street', description='The name of the street to which the invoice is mailed.', example='Test Street'),
        userId?: long(name='UserId', description='The ID of the user.', example='4382956342857'),
        userNick?: string(name='UserNick', description='The nickname of the user.', example='testNick'),
      }
    ](name='CustomerInvoiceAddress')
    }(name='CustomerInvoiceAddressList', description='The details of addresses to which invoices are mailed.'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BBEF51A3-E933-4F40-A534-C673CBDB9C80'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model QueryCustomerAddressListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCustomerAddressListResponseBody(name='body'),
}

async function queryCustomerAddressListWithOptions(request: QueryCustomerAddressListRequest, runtime: Util.RuntimeOptions): QueryCustomerAddressListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCustomerAddressList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCustomerAddressList(request: QueryCustomerAddressListRequest): QueryCustomerAddressListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCustomerAddressListWithOptions(request, runtime);
}

model QueryDPUtilizationDetailRequest {
  commodityCode?: string(name='CommodityCode', description='The code of the resource, such as ecsRi and scu_bag. If this parameter is specified, the ProdCode parameter does not take effect for the request.', example='ecsRi'),
  deductedInstanceId?: string(name='DeductedInstanceId', description='The ID of the deducted instance. If this parameter is not specified, the details of all instances are returned.', example='oss-123123'),
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the YYYY-MM-DD HH:mm:ss format.', example='2019-05-23 12:00:00'),
  includeShare?: boolean(name='IncludeShare', description='Specifies whether to query the resource plan usage of linked accounts. Valid values:

*   true: queries the resource plan usage of linked accounts.
*   false: does not query the resource plan usage of linked accounts.', example='true'),
  instanceId?: string(name='InstanceId', description='The ID of the instance to query. If this parameter is not specified, the details of all used instances are returned.', example='oss-123123'),
  instanceSpec?: string(name='InstanceSpec', description='The instance type of the instance.', example='Instancetyp'),
  lastToken?: string(name='LastToken', description='The token that is used to retrieve the next page of results. For the first query, set the value to null. For subsequent queries, set the value to the token that is obtained from the NextToken parameter.', example='CAESF***zNTAw'),
  limit?: int32(name='Limit', description='The number of entries to return on each page. Default value: 20. Maximum value: 300.', example='20'),
  prodCode?: string(name='ProdCode', description='The code of the service. Example: ecs.', example='oss'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the YYYY-MM-DD HH:mm:ss format.', example='2019-05-23 12:00:00'),
}

model QueryDPUtilizationDetailResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='Success'),
  data?: {
    detailList?: {
      detailList?: [ 
      {
        deductDate?: string(name='DeductDate', description='The deduction date.', example='2019/5/23 12:00'),
        deductFactorTotal?: float(name='DeductFactorTotal', description='The total computing capacity or storage capacity of the RI or SCU during the deduction.', example='1'),
        deductHours?: float(name='DeductHours', description='The deduct factor. This parameter is returned only if the CommodityCode parameter is set to ecsRi.', example='24'),
        deductMeasure?: float(name='DeductMeasure', description='The original measured amount.', example='1'),
        deductQuantity?: float(name='DeductQuantity', description='The computing capacity or storage capacity that is deducted in a pay-as-you-go instance.', example='1'),
        deductedCommodityCode?: string(name='DeductedCommodityCode', description='The code of the deducted service.', example='rds'),
        deductedInstanceId?: string(name='DeductedInstanceId', description='The ID of the deducted instance.', example='oss-123123'),
        deductedProductDetail?: string(name='DeductedProductDetail', description='The name of the deducted service.', example='ApsaraDB RDS'),
        instanceId?: string(name='InstanceId', description='The ID of the RI.', example='oss-123123'),
        instanceSpec?: string(name='InstanceSpec', description='The instance type of the deducted instance.', example='rds.mysql.s3.large'),
        region?: string(name='Region', description='The region in which the instance resides. This parameter can be left empty.', example='cn-hangzhou'),
        resCode?: string(name='ResCode', description='The billable item.', example='PutRequest'),
        shareUid?: long(name='ShareUid', description='The UID of the deducted instance.

*   If the deduction is shared, the value of this parameter indicates the UID of the deducted instance.
*   If the deduction is not shared, the value of this parameter is the same as that of the uid parameter.', example='1111111111'),
        uid?: long(name='Uid', description='The UID of the deducted instance.', example='1111111111'),
      }
    ](name='DetailList')
    }(name='DetailList', description='The detailed resource plan usage.'),
    nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results. You can set the LastToken parameter to this value in the next request. If null is returned, all results are queried.', example='CAESF***zNTAw'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The error message.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DF58589C-A06C-4224-8615-7797E6474FA3'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryDPUtilizationDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDPUtilizationDetailResponseBody(name='body'),
}

/**
  * Limits:
  * *   Only the usage records within the past year can be queried.
  *
  * @param request QueryDPUtilizationDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryDPUtilizationDetailResponse
 */
async function queryDPUtilizationDetailWithOptions(request: QueryDPUtilizationDetailRequest, runtime: Util.RuntimeOptions): QueryDPUtilizationDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.deductedInstanceId)) {
    query['DeductedInstanceId'] = request.deductedInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.includeShare)) {
    query['IncludeShare'] = request.includeShare;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.lastToken)) {
    query['LastToken'] = request.lastToken;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDPUtilizationDetail',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Limits:
  * *   Only the usage records within the past year can be queried.
  *
  * @param request QueryDPUtilizationDetailRequest
  * @return QueryDPUtilizationDetailResponse
 */
async function queryDPUtilizationDetail(request: QueryDPUtilizationDetailRequest): QueryDPUtilizationDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDPUtilizationDetailWithOptions(request, runtime);
}

model QueryEvaluateListRequest {
  billCycle?: string(name='BillCycle', description='The billing cycle.', example='202003'),
  bizTypeList?: [ string ](name='BizTypeList', description='The market types in invoices.

>  By default, this parameter is left empty. If this parameter is left empty, all market types are queried.', example='ALIYUN'),
  endAmount?: long(name='EndAmount', description='The maximum amount to be queried.', example='1000'),
  endBizTime?: string(name='EndBizTime', description='The latest time when an order is paid Specify the time in the yyyy-mm-dd hh:mm:ss format.', example='2020-02-02 15:00:00'),
  endSearchTime?: string(name='EndSearchTime', description='The end of the time range to query.', example='2020-03-02 12:00:00'),
  outBizId?: string(name='OutBizId', description='The ID of the external order.', example='2387432832696'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
  sortType?: int32(name='SortType', description='The type of the sort. Valid values:

*   1: Sort invoices by ID in descending order.
*   2: Sort invoices by invoice type in descending order, and then sort invoices of the same type by ID in descending order.
*   3: Sort invoices by invoice type in ascending order, and then sort invoices of the same type by ID in descending order.', example='1'),
  startAmount?: long(name='StartAmount', description='The minimum amount to be queried.', example='100'),
  startBizTime?: string(name='StartBizTime', description='The earliest time when an order is paid. Specify the time in the yyyy-mm-dd hh:mm:ss format.', example='2020-02-02 12:00:00'),
  startSearchTime?: string(name='StartSearchTime', description='The beginning of the time range to query.', example='2020-02-02 12:00:00'),
  type?: int32(name='Type', description='The type of orders to be queried. Valid values:

*   1: the orders in which the invoiceable amount is negative.
*   2: the orders in which the invoiceable amount is positive.
*   3: the orders in which the invoiceable amount is not 0.
*   4: the orders in which the amount that has been invoiced is greater than 0.

>  By default, this parameter is left empty. If this parameter is left empty, all orders are queried.', example='1'),
}

model QueryEvaluateListResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    evaluateList?: {
      evaluate?: [ 
      {
        billCycle?: string(name='BillCycle', description='The billing cycle.', example='202002'),
        billId?: long(name='BillId', description='The ID of the bill.', example='234543254325'),
        bizTime?: string(name='BizTime', description='The time.', example='2018-10-10 18:05:44'),
        bizType?: string(name='BizType', description='The market type in the invoice. Valid values:

*   ALIYUN: Alibaba Cloud
*   MARKETPLACE: Alibaba Cloud Marketplace', example='ALIYUN'),
        canInvoiceAmount?: long(name='CanInvoiceAmount', description='The invoiceable amount.', example='123213'),
        gmtCreate?: string(name='GmtCreate', description='The creation time.', example='2018-10-10 18:05:44'),
        gmtModified?: string(name='GmtModified', description='The modification time.', example='2018-10-10 18:05:44'),
        id?: long(name='Id', description='The ID of the invoice.', example='1325321532'),
        invoicedAmount?: long(name='InvoicedAmount', description='The invoiced amount.', example='10000'),
        itemId?: long(name='ItemId', description='The ID of the item.', example='23453245'),
        name?: string(name='Name', description='The name of the object to be invoiced.', example='Refund of a voucher with denomination marked'),
        offsetAcceptAmount?: long(name='OffsetAcceptAmount', description='If a refund is issued due to an order such as an unsubscription order or a configuration downgrade order, the refund amount is used to offset the amount of the invoice. The value is consistent with the value of the **OffsetCostAmount** parameter.', example='500'),
        offsetCostAmount?: long(name='OffsetCostAmount', description='The refund amount used to offset the amount of the invoice. If a refund is issued due to an order such as an unsubscription order or a configuration downgrade order, the refund amount is used to offset the amount of the invoice. The value is consistent with the value of the **OffsetAcceptAmount** parameter.', example='500'),
        opId?: string(name='OpId', description='The ID of the external object.', example='12341'),
        originalAmount?: long(name='OriginalAmount', description='The original amount.', example='-10000'),
        outBizId?: string(name='OutBizId', description='The ID of the external order.', example='124324213421'),
        presentAmount?: long(name='PresentAmount', description='The balance.', example='-10000'),
        status?: int32(name='Status', description='The status of the invoiceable amount.', example='1'),
        type?: int32(name='Type', description='The type of orders that are queried. Valid values:

*   1: the orders in which the invoiceable amount is negative.
*   2: the orders in which the invoiceable amount is positive.
*   3: the orders in which the invoiceable amount is not 0.
*   4: the orders in which the amount that has been invoiced is greater than 0.

>  By default, this parameter is left empty. If this parameter is left empty, all orders are queried.', example='1'),
        userId?: long(name='UserId', description='The ID of the user.', example='2738543'),
        userNick?: string(name='UserNick', description='The nickname of the user.', example='test'),
      }
    ](name='Evaluate')
    }(name='EvaluateList', description='The data returned.'),
    hostId?: string(name='HostId', description='The ID of the host.', example='cn'),
    pageNum?: int32(name='PageNum', description='The number of the page returned.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='10'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
    totalInvoiceAmount?: long(name='TotalInvoiceAmount', description='The invoiced amount that meets the query conditions. Unit: Cent.', example='12344'),
    totalUnAppliedInvoiceAmount?: long(name='TotalUnAppliedInvoiceAmount', description='The invoiceable amount that meets the query conditions. Unit: Cent.', example='12344'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D35FF10E-1B2E-4ABA-8401-0AE17725F50B'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model QueryEvaluateListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEvaluateListResponseBody(name='body'),
}

async function queryEvaluateListWithOptions(request: QueryEvaluateListRequest, runtime: Util.RuntimeOptions): QueryEvaluateListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billCycle)) {
    query['BillCycle'] = request.billCycle;
  }
  if (!Util.isUnset(request.bizTypeList)) {
    query['BizTypeList'] = request.bizTypeList;
  }
  if (!Util.isUnset(request.endAmount)) {
    query['EndAmount'] = request.endAmount;
  }
  if (!Util.isUnset(request.endBizTime)) {
    query['EndBizTime'] = request.endBizTime;
  }
  if (!Util.isUnset(request.endSearchTime)) {
    query['EndSearchTime'] = request.endSearchTime;
  }
  if (!Util.isUnset(request.outBizId)) {
    query['OutBizId'] = request.outBizId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortType)) {
    query['SortType'] = request.sortType;
  }
  if (!Util.isUnset(request.startAmount)) {
    query['StartAmount'] = request.startAmount;
  }
  if (!Util.isUnset(request.startBizTime)) {
    query['StartBizTime'] = request.startBizTime;
  }
  if (!Util.isUnset(request.startSearchTime)) {
    query['StartSearchTime'] = request.startSearchTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEvaluateList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEvaluateList(request: QueryEvaluateListRequest): QueryEvaluateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEvaluateListWithOptions(request, runtime);
}

model QueryFinancialAccountInfoRequest {
  userId?: long(name='UserId', description='The ID of the Alibaba Cloud account.', example='1990699401005016'),
}

model QueryFinancialAccountInfoResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    accountType?: string(name='AccountType', description='The type of the financial account. A value of MASTER indicates that the account is a management account. A value of MEMBER indicates that the account is a member.', example='MEMBER'),
    isFinancialAccount?: boolean(name='IsFinancialAccount', description='Indicates whether the account is a financial account. A value of true indicates that the account is a financial account. A value of false indicates that the account is not a financial account.', example='true'),
    memberGroupId?: long(name='MemberGroupId', description='The ID of the group to which the member belongs.', example='124'),
    memberGroupName?: string(name='MemberGroupName', description='The name of the group to which the member belongs.', example='Test group'),
    memberNickName?: string(name='MemberNickName', description='The display name of the member.', example='Test'),
    userName?: string(name='UserName', description='The username of the account.', example='killortop3'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='97426BC2-792E-41F5-92B8-73C710DA7779'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model QueryFinancialAccountInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryFinancialAccountInfoResponseBody(name='body'),
}

async function queryFinancialAccountInfoWithOptions(request: QueryFinancialAccountInfoRequest, runtime: Util.RuntimeOptions): QueryFinancialAccountInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryFinancialAccountInfo',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFinancialAccountInfo(request: QueryFinancialAccountInfoRequest): QueryFinancialAccountInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFinancialAccountInfoWithOptions(request, runtime);
}

model QueryInstanceBillRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the member. If you specify a value for this parameter, you can query the bills of the specified member. If you leave this parameter empty, the bills of the current account are queried by default.', example='122'),
  billingCycle?: string(name='BillingCycle', description='The billing cycle. Format: YYYY-MM.', example='2020-03'),
  billingDate?: string(name='BillingDate', description='The billing date. This parameter is required only if the **Granularity** parameter is set to DAILY. Format: YYYY-MM-DD.', example='2020-03-03'),
  granularity?: string(name='Granularity', description='The granularity at which bills are queried. Valid values:

*   MONTHLY: queries bills by month. The data queried is consistent with the data that is displayed for the specified billing cycle on the Billing Details tab of the Bill Details page in User Center.
*   DAILY: queries bills by day. The data queried is consistent with the data that is displayed for the specified day on the Billing Details tab of the Bill Details page in User Center.

You must set the **BillingDate** parameter before you can set the Granularity parameter to DAILY.', example='MONTHLY'),
  isBillingItem?: boolean(name='IsBillingItem', description='Specifies whether to query data by billable item. Valid values:

*   false: does not query data by billable item. The data queried is consistent with the data that is displayed for the specified instance on the Billing Details tab of the Bill Details page in User Center.
*   true: queries data by billable item. The data queried is consistent with the data that is displayed for the specified billable item on the Billing Details tab of the Bill Details page in User Center.

Default value: false.', example='false'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', description='Specifies whether to filter out a bill whose pretax gross amount and pretax amount are 0. Default value: false.******** Valid values:

*   false: does not filter the bill.
*   true: filters the bill.', example='false'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. Maximum value: 300.', example='20'),
  productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
  productType?: string(name='ProductType', description='The type of the service. This parameter is required if the ProductCode parameter is set to the service code of Alibaba Cloud Marketplace.', example='rds'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: the subscription billing method
*   PayAsYouGo: the pay-as-you-go billing method

**

****This parameter must be used together with the **ProductCode** parameter.', example='PayAsYouGo'),
}

model QueryInstanceBillResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    accountID?: string(name='AccountID', description='The ID of the account.', example='185xxxx3489'),
    accountName?: string(name='AccountName', description='The name of the account.', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', description='The billing cycle in the YYYY-MM format.', example='2020-03'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', description='The amount deducted by using credit refunds.', example='0'),
        billingDate?: string(name='BillingDate', description='The billing date. This parameter is returned only if the Granularity parameter is set to DAILY. Format: YYYY-MM-DD.', example='2020-03'),
        billingItem?: string(name='BillingItem', description='The billable item. This parameter is returned only if the IsBillingItem parameter is set to true.', example='Other'),
        billingType?: string(name='BillingType', description='The billing type.', example='Other'),
        cashAmount?: float(name='CashAmount', description='The amount paid in cash. The amount that was deducted by using credit refunds is not included.', example='0'),
        commodityCode?: string(name='CommodityCode', description='The code of the commodity. The commodity code is the same as that displayed in User Center.', example='rds'),
        costUnit?: string(name='CostUnit', description='The cost center.', example='Not allocated'),
        currency?: string(name='Currency', description='The type of the currency. Valid values:

*   CNY
*   USD
*   JPY', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', description='The amount deducted by using vouchers.', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', description='The amount deducted by using coupons.', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', description='The amount deducted by using prepaid cards.', example='0'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage', description='The amount deducted by using resource plans.', example='NULL'),
        instanceConfig?: string(name='InstanceConfig', description='The configurations of the instance.', example='CPU:12'),
        instanceID?: string(name='InstanceID', description='The ID of the instance.', example='i-kjhdskjgshfdlkjfdh'),
        instanceSpec?: string(name='InstanceSpec', description='The instance type of the instance.', example='ecs.sn1ne.3xlarge'),
        internetIP?: string(name='InternetIP', description='The public IP address.', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', description='The private IP address.', example='192.xx.xx.xx'),
        invoiceDiscount?: float(name='InvoiceDiscount', description='The discount amount.', example='0'),
        item?: string(name='Item', description='The type of the bill.

*   SubscriptionOrder: subscription order
*   PayAsYouGoBill: pay-as-you-go bill
*   Refund: refund
*   Adjustment: reconciliation', example='PayAsYouGoBill'),
        listPrice?: string(name='ListPrice', description='The unit price. This parameter is returned only if the isBillingItem parameter is set to true.', example='100'),
        listPriceUnit?: string(name='ListPriceUnit', description='The unit of the unit price. This parameter is returned only if the isBillingItem parameter is set to true.', example='CNY'),
        nickName?: string(name='NickName', description='The name of the instance.', example='test'),
        outstandingAmount?: float(name='OutstandingAmount', description='The unsettled amount.', example='0'),
        ownerID?: string(name='OwnerID', description='The ID of the member account. This parameter is returned in a multi-account payment scenario.', example='169***013'),
        paymentAmount?: float(name='PaymentAmount', description='The amount paid in cash.', example='0'),
        pipCode?: string(name='PipCode', description='The code of the service. The service code is the same as that displayed in User Center.', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', description='The pretax amount.', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', description='The pretax gross amount.', example='0'),
        productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
        productDetail?: string(name='ProductDetail', description='The details of the service.', example='ApsaraDB RDS'),
        productName?: string(name='ProductName', description='The name of the service.', example='ApsaraDB RDS'),
        productType?: string(name='ProductType', description='The type of the service.', example='rds'),
        region?: string(name='Region', description='The region.', example='China (Hangzhou)'),
        resourceGroup?: string(name='ResourceGroup', description='The resource group.', example='Default resource group'),
        servicePeriod?: string(name='ServicePeriod', description='The validity period.', example='10'),
        servicePeriodUnit?: string(name='ServicePeriodUnit', description='The unit of the validity period.', example='Seconds'),
        subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: the subscription billing method
*   PayAsYouGo: the pay-as-you-go billing method

**

****This parameter is returned together with the ProductCode parameter.', example='PayAsYouGo'),
        tag?: string(name='Tag', description='The tag.', example='tag'),
        usage?: string(name='Usage', description='The usage of the billable item. This parameter is returned only if the isBillingItem parameter is set to true.', example='100'),
        usageUnit?: string(name='UsageUnit', description='The unit of usage. This parameter is returned only if the isBillingItem parameter is set to true.', example='GB'),
        zone?: string(name='Zone', description='The ID of the zone.', example='cn-hangzhou-h'),
      }
    ](name='Item')
    }(name='Items', description='The details of the bill.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryInstanceBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInstanceBillResponseBody(name='body'),
}

/**
  * ##
  * *   This API operation has been upgraded to DescribeInstanceBill. We recommend that you call the [DescribeInstanceBill](~~209402~~) operation to query the bills of instances or billable items in a billing cycle. You can call the QueryInstanceBill operation to query a maximum of 50,000 data rows in a bill.
  * *   Instance bills are generated after bills are split. In most cases, the instance bills do not include data generated on the last day of the specified period.
  * *   The instance information changes within a billing cycle. The instance configurations and specifications and the time when the instance was used in the billing cycle are all recorded. For more information, see the corresponding bill details.
  * *   You can query the data generated in June 2020 or later for Cloud Communications services, and the data generated in November 2020 or later for Alibaba Cloud Domains.
  *
  * @param request QueryInstanceBillRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryInstanceBillResponse
 */
async function queryInstanceBillWithOptions(request: QueryInstanceBillRequest, runtime: Util.RuntimeOptions): QueryInstanceBillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.billingDate)) {
    query['BillingDate'] = request.billingDate;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.isBillingItem)) {
    query['IsBillingItem'] = request.isBillingItem;
  }
  if (!Util.isUnset(request.isHideZeroCharge)) {
    query['IsHideZeroCharge'] = request.isHideZeroCharge;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryInstanceBill',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * ##
  * *   This API operation has been upgraded to DescribeInstanceBill. We recommend that you call the [DescribeInstanceBill](~~209402~~) operation to query the bills of instances or billable items in a billing cycle. You can call the QueryInstanceBill operation to query a maximum of 50,000 data rows in a bill.
  * *   Instance bills are generated after bills are split. In most cases, the instance bills do not include data generated on the last day of the specified period.
  * *   The instance information changes within a billing cycle. The instance configurations and specifications and the time when the instance was used in the billing cycle are all recorded. For more information, see the corresponding bill details.
  * *   You can query the data generated in June 2020 or later for Cloud Communications services, and the data generated in November 2020 or later for Alibaba Cloud Domains.
  *
  * @param request QueryInstanceBillRequest
  * @return QueryInstanceBillResponse
 */
async function queryInstanceBill(request: QueryInstanceBillRequest): QueryInstanceBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInstanceBillWithOptions(request, runtime);
}

model QueryInstanceByTagRequest {
  resourceId?: [ string ](name='ResourceId', description='The IDs of resources.'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Specify the savings plan instance as the type of the resource.', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', description='The tag key.', example='ecs'),
      value?: string(name='Value', description='The tag value.', example='001'),
    }
  ](name='Tag', description='The tags.'),
}

model QueryInstanceByTagResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='PARAM_ERROR'),
  message?: string(name='Message', description='The error message returned.', example='param is null'),
  nextToken?: string(name='NextToken', description='The token that determines the start point of the query. The return value is the value of the NextToken response parameter that was returned last time the QueryInstanceByTag operation was called.', example='CAESEgoQCg4KCm'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9EC6C0B7-3397-5FAE-9915-8972CDDB1211'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='spn-xxxxx'),
      resourceType?: string(name='ResourceType', description='The type of the resource. The returned resource type indicates a savings plan instance.', example='instance'),
      tag?: [ 
        {
          key?: string(name='Key', description='The tag key.', example='tag1'),
          value?: string(name='Value', description='The tag value.', example='10'),
        }
      ](name='Tag', description='The tags.'),
    }
  ](name='TagResource', description='The instances returned.'),
}

model QueryInstanceByTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInstanceByTagResponseBody(name='body'),
}

async function queryInstanceByTagWithOptions(request: QueryInstanceByTagRequest, runtime: Util.RuntimeOptions): QueryInstanceByTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryInstanceByTag',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryInstanceByTag(request: QueryInstanceByTagRequest): QueryInstanceByTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInstanceByTagWithOptions(request, runtime);
}

model QueryInstanceGaapCostRequest {
  billingCycle?: string(name='BillingCycle', example='2020-03'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
}

model QueryInstanceGaapCostResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostId?: string(name='HostId', example='1.1.1.1'),
    modules?: {
      module?: [ 
      {
        accountingUnit?: string(name='AccountingUnit'),
        billType?: string(name='BillType', example='SubscriptionOrder'),
        billingCycle?: string(name='BillingCycle', example='2020-03'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: string(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: string(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: string(name='DeductedByPrepaidCard', example='0'),
        gaapDeductedByCashCoupons?: string(name='GaapDeductedByCashCoupons', example='0'),
        gaapDeductedByCoupons?: string(name='GaapDeductedByCoupons', example='0'),
        gaapDeductedByPrepaidCard?: string(name='GaapDeductedByPrepaidCard', example='0'),
        gaapPaymentAmount?: string(name='GaapPaymentAmount', example='0'),
        gaapPretaxAmount?: string(name='GaapPretaxAmount', example='0'),
        gaapPretaxAmountLocal?: string(name='GaapPretaxAmountLocal', example='0'),
        gaapPretaxGrossAmount?: string(name='GaapPretaxGrossAmount', example='0'),
        gaapPricingDiscount?: string(name='GaapPricingDiscount', example='0'),
        instanceID?: string(name='InstanceID', example='OSSBAG-cn-0xl0xxxxxx'),
        monthGaapDeductedByCashCoupons?: string(name='MonthGaapDeductedByCashCoupons', example='0.75'),
        monthGaapDeductedByCoupons?: string(name='MonthGaapDeductedByCoupons', example='0'),
        monthGaapDeductedByPrepaidCard?: string(name='MonthGaapDeductedByPrepaidCard', example='0'),
        monthGaapPaymentAmount?: string(name='MonthGaapPaymentAmount', example='0'),
        monthGaapPretaxAmount?: string(name='MonthGaapPretaxAmount', example='0'),
        monthGaapPretaxAmountLocal?: string(name='MonthGaapPretaxAmountLocal', example='0.99'),
        monthGaapPretaxGrossAmount?: string(name='MonthGaapPretaxGrossAmount', example='0.99'),
        monthGaapPricingDiscount?: string(name='MonthGaapPricingDiscount', example='0,.25'),
        orderId?: string(name='OrderId', example='213123213123'),
        orderType?: string(name='OrderType', example='New'),
        ownerID?: string(name='OwnerID', example='123213123123'),
        payTime?: string(name='PayTime', example='2018-06-15 15:59:57'),
        payerAccount?: string(name='PayerAccount', example='23534534'),
        paymentAmount?: string(name='PaymentAmount', example='0'),
        paymentCurrency?: string(name='PaymentCurrency', example='CNY'),
        pretaxAmount?: string(name='PretaxAmount', example='0'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount', example='123'),
        pricingDiscount?: string(name='PricingDiscount', example='1'),
        productCode?: string(name='ProductCode', example='rds'),
        productType?: string(name='ProductType', example='rds'),
        region?: string(name='Region', example='cn-hangzhou'),
        resourceGroup?: string(name='ResourceGroup'),
        subOrderId?: string(name='SubOrderId', example='12434345'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='tag'),
        unallocatedDeductedByCashCoupons?: string(name='UnallocatedDeductedByCashCoupons', example='0'),
        unallocatedDeductedByCoupons?: string(name='UnallocatedDeductedByCoupons', example='0'),
        unallocatedDeductedByPrepaidCard?: string(name='UnallocatedDeductedByPrepaidCard', example='0'),
        unallocatedPaymentAmount?: string(name='UnallocatedPaymentAmount', example='0'),
        unallocatedPretaxAmount?: string(name='UnallocatedPretaxAmount', example='0'),
        unallocatedPretaxAmountLocal?: string(name='UnallocatedPretaxAmountLocal', example='0'),
        unallocatedPretaxGrossAmount?: string(name='UnallocatedPretaxGrossAmount', example='0'),
        unallocatedPricingDiscount?: string(name='UnallocatedPricingDiscount', example='0'),
        usageEndDate?: string(name='UsageEndDate', example='2019-05-01 00:00:00'),
        usageStartDate?: string(name='UsageStartDate', example='2019-04-01 00:00:00'),
      }
    ](name='Module')
    }(name='Modules'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='CCBB1BB9-22F1-4177-867B-7A75D665B488'),
  success?: boolean(name='Success', example='true'),
}

model QueryInstanceGaapCostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInstanceGaapCostResponseBody(name='body'),
}

async function queryInstanceGaapCostWithOptions(request: QueryInstanceGaapCostRequest, runtime: Util.RuntimeOptions): QueryInstanceGaapCostResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryInstanceGaapCost',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryInstanceGaapCost(request: QueryInstanceGaapCostRequest): QueryInstanceGaapCostResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInstanceGaapCostWithOptions(request, runtime);
}

model QueryInvoicingCustomerListRequest {
  ownerId?: long(name='OwnerId'),
}

model QueryInvoicingCustomerListResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    customerInvoiceList?: {
      customerInvoice?: [ 
      {
        adjustType?: long(name='AdjustType', description='The type of invoice that was changed to.', example='1'),
        bank?: string(name='Bank', description='The bank that issues the invoice.', example='Test Bank'),
        bankNo?: string(name='BankNo', description='The bank account number.', example='389576348573296349853476'),
        customerType?: long(name='CustomerType', description='The authentication type of Alipay. Valid values:

*   1: individual
*   2: company', example='1'),
        defaultRemark?: string(name='DefaultRemark', description='The default note that is attached when the title is specified.', example='PO Code: 12984554'),
        endCycle?: long(name='EndCycle', description='The time when the payment ended.', example='202003'),
        gmtCreate?: string(name='GmtCreate', description='The time when the invoice was created. The time was in the yyyy-mm-dd hh:mm:ss format.', example='2018-09-07 15:26:20'),
        id?: long(name='Id', description='The ID of the invoice.', example='239875502738'),
        invoiceTitle?: string(name='InvoiceTitle', description='The company name in the invoice title.', example='Test Company'),
        issueType?: long(name='IssueType', description='The type of issue.', example='1'),
        operatingLicenseAddress?: string(name='OperatingLicenseAddress', description='The address of the business license.', example='XXX, XXX district, XXX city, XXX province'),
        operatingLicensePhone?: string(name='OperatingLicensePhone', description='The phone number of the business license.', example='138xxxxxxxx'),
        registerNo?: string(name='RegisterNo', description='The tax registration number.', example='21343245342534'),
        startCycle?: long(name='StartCycle', description='The time when the payment started.', example='202002'),
        status?: long(name='Status', description='The status of the invoice title.', example='2'),
        taxationLicense?: string(name='TaxationLicense', description='The path and file name of the scanned copy of the tax registration certificate.', example='taxationLicense.jpg'),
        taxpayerType?: long(name='TaxpayerType', description='The type of the taxpayer. Valid values:

*   1: general taxpayer
*   2: special taxpayer', example='1'),
        titleChangeInstructions?: string(name='TitleChangeInstructions', description='The instruction document of the invoice title change.', example='instruction.doc'),
        type?: long(name='Type', description='The type of the invoice. Valid values:

*   0: plain value-added tax (VAT) invoice
*   1: special VAT invoice', example='1'),
        userId?: long(name='UserId', description='The ID of the user.', example='34565465675'),
        userNick?: string(name='UserNick', description='The nickname of the user.', example='testNick'),
      }
    ](name='CustomerInvoice')
    }(name='CustomerInvoiceList', description='The information about the invoice.'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BBEF51A3-E933-4F40-A534-C673CBDB9C80'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model QueryInvoicingCustomerListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInvoicingCustomerListResponseBody(name='body'),
}

async function queryInvoicingCustomerListWithOptions(request: QueryInvoicingCustomerListRequest, runtime: Util.RuntimeOptions): QueryInvoicingCustomerListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryInvoicingCustomerList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryInvoicingCustomerList(request: QueryInvoicingCustomerListRequest): QueryInvoicingCustomerListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInvoicingCustomerListWithOptions(request, runtime);
}

model QueryOrdersRequest {
  createTimeEnd?: string(name='CreateTimeEnd', description='The end time of the period during which the orders were created. By default, orders within the last hour are queried. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2016-05-23T12:00:00Z'),
  createTimeStart?: string(name='CreateTimeStart', description='The start time of the period during which the orders were created. By default, orders within the last hour are queried. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2016-05-23T13:00:00Z'),
  orderType?: string(name='OrderType', description='The type of the order. Valid values:

*   New: purchases an instance.
*   Renew: renews an instance.
*   Upgrade: upgrades the configurations of an instance.
*   Refund: applies for a refund.', example='New'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', description='The page number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return per page.', example='20'),
  paymentStatus?: string(name='PaymentStatus', description='The status of payment. Valid values for a non-refund order:

*   Unpaid: The order is not paid.
*   Paid: The order is paid.
*   Cancelled: The order is canceled.

> : You can set this parameter to NULL for a refund order.', example='Paid'),
  productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
  productType?: string(name='ProductType', description='The type of the service.', example='rds'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: subscription
*   PayAsYouGo: pay-as-you-go', example='Subscription'),
}

model QueryOrdersResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    hostName?: string(name='HostName', description='The hostname.', example='test'),
    orderList?: {
      order?: [ 
      {
        afterTaxAmount?: string(name='AfterTaxAmount', description='The aftertax amount of the order.', example='66'),
        commodityCode?: string(name='CommodityCode', description='The service code.', example='ecs'),
        createTime?: string(name='CreateTime', description='The time when the order was created.', example='2017-06-08T09:41:30Z'),
        currency?: string(name='Currency', description='The currency.', example='CNY'),
        orderId?: string(name='OrderId', description='The ID of the order.', example='34532532'),
        orderType?: string(name='OrderType', description='The type of the order. Valid values:

*   New: purchases an instance.
*   Renew: renews an instance.
*   Upgrade: upgrades the configurations of an instance.
*   Refund: applies for a refund.', example='New'),
        paymentCurrency?: string(name='PaymentCurrency', description='The currency of payment.', example='CNY'),
        paymentStatus?: string(name='PaymentStatus', description='The status of payment. Valid values for a non-refund order:

*   Unpaid: The order is not paid.
*   Paid: The order is paid.
*   Cancelled: The order is canceled.

> : The value is NULL for a refund order.', example='Paid'),
        paymentTime?: string(name='PaymentTime', description='The time of payment.', example='2017-06-08T09:41:30Z'),
        pretaxAmount?: string(name='PretaxAmount', description='The pretax amount of the order.', example='0'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal', description='The pretax amount of the order in local currency.', example='0'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount', description='The pretax gross amount of the order.', example='0'),
        productCode?: string(name='ProductCode', description='The code of the main service.', example='rds'),
        productType?: string(name='ProductType', description='The type of the main service.', example='rds'),
        relatedOrderId?: string(name='RelatedOrderId', description='The ID of the associated order.', example='234535345345342'),
        subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: subscription
*   PayAsYouGo: pay-as-you-go', example='PayAsYouGo'),
        tax?: string(name='Tax', description='The tax of the order.', example='1'),
      }
    ](name='Order')
    }(name='OrderList', description='The orders returned.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
  }(name='Data', description='The message returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='61293E7A-3406-4447-8620-EC88B0AA66AD'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model QueryOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOrdersResponseBody(name='body'),
}

async function queryOrdersWithOptions(request: QueryOrdersRequest, runtime: Util.RuntimeOptions): QueryOrdersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createTimeEnd)) {
    query['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    query['CreateTimeStart'] = request.createTimeStart;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.paymentStatus)) {
    query['PaymentStatus'] = request.paymentStatus;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrders',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrders(request: QueryOrdersRequest): QueryOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrdersWithOptions(request, runtime);
}

model QueryPermissionListRequest {
  relationId?: long(name='RelationId', description='The ID of the relationship. Set this parameter to the value of the RelationId response parameter returned by calling the QueryRelationList operation.', example='51463'),
}

model QueryPermissionListResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    endTime?: string(name='EndTime', description='The time when the relationship expired. If no value is returned, the relationship is still valid.', example='2021-03-06T15:12Z'),
    masterId?: long(name='MasterId', description='The ID of the management account.', example='1990699401005016'),
    memberId?: long(name='MemberId', description='The ID of the member.', example='1851253838840762'),
    permissionList?: [ 
      {
        endTime?: string(name='EndTime', description='The time when the permission expired. If no value is returned, the permission is still valid. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC. For example, 2016-05-23T12:00:00Z indicates that the permission expired at 20:00:00 on May 23, 2016 (UTC+8).', example='2021-03-05T15:12Z'),
        permissionCode?: string(name='PermissionCode', description='The code of the permission.', example='allow_synchronize_finance_identity'),
        permissionName?: string(name='PermissionName', description='The name of the permission.', example='The management account shares the credit control identity with the member.'),
        startTime?: string(name='StartTime', description='The time when the permission took effect. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC. For example, 2016-05-23T12:00:00Z indicates that the permission took effect at 20:00:00 on May 23, 2016 (UTC+8).', example='2021-03-02T15:12Z'),
      }
    ](name='PermissionList', description='The list of permissions.'),
    relationType?: string(name='RelationType', description='The type of the relationship. Valid values: FinancialManagement and FinancialTrusteeship.', example='FinancialManagement'),
    setupTime?: string(name='SetupTime', description='The time when the relationship was established. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC. For example, 2016-05-23T12:00:00Z indicates that the relationship was established at 20:00:00 on May 23, 2016 (UTC+8).', example='2021-03-02T15:12Z'),
    startTime?: string(name='StartTime', description='The time when the relationship took effect. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC. For example, 2016-05-23T12:00:00Z indicates that the relationship took effect at 20:00:00 on May 23, 2016 (UTC+8).', example='2021-03-02T15:12Z'),
    state?: string(name='State', description='The status of the relationship. For more information about valid values of this parameter, see the enumeration values of the RelationshipStatusEnum type in the following table.', example='RELATED'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F6E29451-A3CD-4705-806D-0112D08F5C49'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryPermissionListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPermissionListResponseBody(name='body'),
}

async function queryPermissionListWithOptions(request: QueryPermissionListRequest, runtime: Util.RuntimeOptions): QueryPermissionListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.relationId)) {
    query['RelationId'] = request.relationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPermissionList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPermissionList(request: QueryPermissionListRequest): QueryPermissionListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPermissionListWithOptions(request, runtime);
}

model QueryPrepaidCardsRequest {
  effectiveOrNot?: boolean(name='EffectiveOrNot', description='Specifies whether the prepaid card takes effect. Valid values:

*   true
*   false', example='true'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd', description='The end of the expiration time of prepaid cards to query. The value must be in the yyyy-MM-ddTHH:mm:ssZ format.', example='2018-08-01T00:00:00Z'),
  expiryTimeStart?: string(name='ExpiryTimeStart', description='The start of the expiration time of prepaid cards to query. The value must be in the yyyy-MM-ddTHH:mm:ssZ format.', example='2018-08-01T00:00:00Z'),
}

model QueryPrepaidCardsResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    prepaidCard?: [ 
    {
      applicableProducts?: string(name='ApplicableProducts', description='The services to which the prepaid card is applicable.', example='All Alibaba Cloud services'),
      applicableScenarios?: string(name='ApplicableScenarios', description='The scenario to which the prepaid card is applicable.', example='test'),
      balance?: string(name='Balance', description='The balance of the prepaid card.', example='100.00'),
      effectiveTime?: string(name='EffectiveTime', description='The time when the prepaid card took effect.', example='2018-08-03T01:39:11Z'),
      expiryTime?: string(name='ExpiryTime', description='The time when the prepaid card expired.', example='2019-08-04T01:39:11Z'),
      grantedTime?: string(name='GrantedTime', description='The time when the prepaid card was issued.', example='2018-08-03T01:39:11Z'),
      nominalValue?: string(name='NominalValue', description='The nominal value of the prepaid card.', example='100.00'),
      prepaidCardId?: long(name='PrepaidCardId', description='The ID of the prepaid card.', example='213432432'),
      prepaidCardNo?: string(name='PrepaidCardNo', description='The number of the prepaid card.', example='Q-7edaab979fc9'),
      status?: string(name='Status', description='The status of the prepaid card. Valid values:

*   Available: The prepaid card is valid.
*   Expired: The prepaid card expired.
*   Cancelled: The prepaid card is invalid.', example='Available'),
    }
  ](name='PrepaidCard')
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7EA6C02D-06D0-4213-9C3B-E67910F7D1EB'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryPrepaidCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPrepaidCardsResponseBody(name='body'),
}

async function queryPrepaidCardsWithOptions(request: QueryPrepaidCardsRequest, runtime: Util.RuntimeOptions): QueryPrepaidCardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.effectiveOrNot)) {
    query['EffectiveOrNot'] = request.effectiveOrNot;
  }
  if (!Util.isUnset(request.expiryTimeEnd)) {
    query['ExpiryTimeEnd'] = request.expiryTimeEnd;
  }
  if (!Util.isUnset(request.expiryTimeStart)) {
    query['ExpiryTimeStart'] = request.expiryTimeStart;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPrepaidCards',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPrepaidCards(request: QueryPrepaidCardsRequest): QueryPrepaidCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPrepaidCardsWithOptions(request, runtime);
}

model QueryPriceEntityListRequest {
  commodityCode?: string(name='CommodityCode', description='The code of the service.', example='ecs'),
  lang?: string(name='Lang'),
}

model QueryPriceEntityListResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='Success'),
  data?: {
    priceEntityInfoList?: [ 
      {
        priceEntityCode?: string(name='PriceEntityCode', description='The code of the billable item.', example='instance_type'),
        priceEntityName?: string(name='PriceEntityName', description='The name of the billable item.', example='Elastic Compute Service (ECS) instance'),
        priceFactorList?: [ 
          {
            priceFactorCode?: string(name='PriceFactorCode', description='The code of the factor.', example='vm_region_no'),
            priceFactorName?: string(name='PriceFactorName', description='The name of the factor.', example='Region'),
            priceFactorValueList?: [ string ](name='PriceFactorValueList', description='The values of the factor.'),
          }
        ](name='PriceFactorList', description='The factors of the billable item.'),
      }
    ](name='PriceEntityInfoList', description='The information about the billable items.'),
  }(name='Data', description='The data that is returned.'),
  message?: string(name='Message', description='The message that is returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryPriceEntityListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPriceEntityListResponseBody(name='body'),
}

/**
  * You can call this operation to query the billable items of a service. A billable item is the minimum unit used to calculate costs.
  *
  * @param request QueryPriceEntityListRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryPriceEntityListResponse
 */
async function queryPriceEntityListWithOptions(request: QueryPriceEntityListRequest, runtime: Util.RuntimeOptions): QueryPriceEntityListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPriceEntityList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the billable items of a service. A billable item is the minimum unit used to calculate costs.
  *
  * @param request QueryPriceEntityListRequest
  * @return QueryPriceEntityListResponse
 */
async function queryPriceEntityList(request: QueryPriceEntityListRequest): QueryPriceEntityListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPriceEntityListWithOptions(request, runtime);
}

model QueryProductListRequest {
  pageNum?: int32(name='PageNum', description='The page number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='10'),
  queryTotalCount?: boolean(name='QueryTotalCount', description='Specifies whether to return the total number of services. Default value: false.', example='true'),
}

model QueryProductListResponseBody = {
  code?: string(name='Code', description='The HTTP status code returned.', example='Success'),
  data?: {
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned on each page.', example='10'),
    productList?: {
      product?: [ 
      {
        productCode?: string(name='ProductCode', description='The code of the service.', example='cdn'),
        productName?: string(name='ProductName', description='The name of the service.', example='CDN (Pay-as-you-go)'),
        productType?: string(name='ProductType', description='The type of the service.', example='CDN'),
        subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: subscription
*   PayAsYouGo: pay-as-you-go', example='PayAsYouGo'),
      }
    ](name='Product')
    }(name='ProductList', description='The service definitions.'),
    totalCount?: int32(name='TotalCount', description='The total number of services.', example='449'),
  }(name='Data', description='The information about all Alibaba Cloud services.'),
  message?: string(name='Message', description='The message returned.', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='94858229-2758-4663-A7D0-99490D541F15'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model QueryProductListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProductListResponseBody(name='body'),
}

async function queryProductListWithOptions(request: QueryProductListRequest, runtime: Util.RuntimeOptions): QueryProductListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryTotalCount)) {
    query['QueryTotalCount'] = request.queryTotalCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryProductList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryProductList(request: QueryProductListRequest): QueryProductListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductListWithOptions(request, runtime);
}

model QueryRIUtilizationDetailRequest {
  deductedInstanceId?: string(name='DeductedInstanceId', description='The ID of the instance whose fees are deducted by using the RI. If this parameter is left empty, the usage details of all instances are queried.', example='jsdgfsdhgsdjh'),
  endTime?: string(name='EndTime', description='The time when the RI expires. Specify the time in the YYYY-MM-DD HH:mm:ss format.', example='2019-05-23 12:00:00'),
  instanceSpec?: string(name='InstanceSpec', description='The instance type of the RI.', example='Instancetyp'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. Maximum value: 300.', example='20'),
  RICommodityCode?: string(name='RICommodityCode', description='The code of the service to which the RI is applied. Default value: ecsRi. Valid values:

*   ecsRi: ECS RI.
*   scu_bag: storage capacity unit (SCU).', example='ecsRi'),
  RIInstanceId?: string(name='RIInstanceId', description='The ID of the RI. If this parameter is left empty, the usage details of all RIs are queried.', example='dsudfgdsjh'),
  startTime?: string(name='StartTime', description='The time when the RI was created. Specify the time in the YYYY-MM-DD HH:mm:ss format.', example='2019-05-23 12:00:00'),
}

model QueryRIUtilizationDetailResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    detailList?: {
      detailList?: [ 
      {
        deductDate?: string(name='DeductDate', description='The time when the fees are deducted by using the RI.', example='2019-05-23 12:00:00'),
        deductFactorTotal?: float(name='DeductFactorTotal', description='The total amount of computing power of the RI or capacity of SCU in the time period.', example='1'),
        deductHours?: string(name='DeductHours', description='The deduct factor. This parameter is returned only if the RICommodityCode parameter is set to ecsRi.', example='24'),
        deductQuantity?: float(name='DeductQuantity', description='The computing power or capacity of the pay-as-you-go instance whose fees are deducted by using the RI.', example='1'),
        deductedCommodityCode?: string(name='DeductedCommodityCode', description='The code of the service whose fees are deducted by using the RI.', example='rds'),
        deductedInstanceId?: string(name='DeductedInstanceId', description='The ID of the instance whose fees are deducted by using the RI.', example='safdffghfgh'),
        deductedProductDetail?: string(name='DeductedProductDetail', description='The name of the service whose fees are deducted by using the RI.', example='ApsaraDB RDS'),
        instanceSpec?: string(name='InstanceSpec', description='The instance type of the instance whose fees are deducted by using the RI.', example='rds.mysql.s3.large'),
        RIInstanceId?: string(name='RIInstanceId', description='The ID of the RI.', example='324253645'),
      }
    ](name='DetailList')
    }(name='DetailList', description='The usage details of the RI.'),
    pageNum?: long(name='PageNum', description='The number of the returned page.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: long(name='TotalCount', description='The total number of returned entries.', example='0'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DF58589C-A06C-4224-8615-7797E6474FA3'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model QueryRIUtilizationDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRIUtilizationDetailResponseBody(name='body'),
}

async function queryRIUtilizationDetailWithOptions(request: QueryRIUtilizationDetailRequest, runtime: Util.RuntimeOptions): QueryRIUtilizationDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deductedInstanceId)) {
    query['DeductedInstanceId'] = request.deductedInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.RICommodityCode)) {
    query['RICommodityCode'] = request.RICommodityCode;
  }
  if (!Util.isUnset(request.RIInstanceId)) {
    query['RIInstanceId'] = request.RIInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRIUtilizationDetail',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRIUtilizationDetail(request: QueryRIUtilizationDetailRequest): QueryRIUtilizationDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRIUtilizationDetailWithOptions(request, runtime);
}

model QueryRedeemRequest {
  effectiveOrNot?: boolean(name='EffectiveOrNot', description='Specifies whether the redemption coupon takes effect. Valid values:

*   true
*   false

Default value: false.', example='true'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd', description='The end time when the redemption coupon expires. The value must be in the yyyy-MM-ddTHH:mm:ssZ format.', example='2018-08-01T00:00:00Z'),
  expiryTimeStart?: string(name='ExpiryTimeStart', description='The start time when the redemption coupon expires. The value must be in the yyyy-MM-ddTHH:mm:ssZ format.', example='2018-08-01T00:00:00Z'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='10'),
}

model QueryRedeemResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    pageNum?: long(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: long(name='PageSize', description='The number of entries returned per page.', example='10'),
    redeem?: {
      redeem?: [ 
      {
        applicableProducts?: string(name='ApplicableProducts', description='The services to which the redemption coupon is applicable.', example='Elastic Compute Service (ECS)'),
        balance?: string(name='Balance', description='The balance of the redemption coupon.', example='0'),
        effectiveTime?: string(name='EffectiveTime', description='The time when the redemption coupon took effect.', example='2018-05-14 20:25:00'),
        expiryTime?: string(name='ExpiryTime', description='The time when the redemption coupon expired.', example='2018-06-13 20:25:00'),
        grantedTime?: string(name='GrantedTime', description='The time when the redemption coupon was issued.', example='2018-05-14 20:25:00'),
        nominalValue?: string(name='NominalValue', description='The nominal value of the redemption coupon.', example='0'),
        redeemId?: string(name='RedeemId', description='The ID of the redemption coupon.', example='1342'),
        redeemNo?: string(name='RedeemNo', description='The number of the redemption coupon.', example='4889*****1610'),
        specification?: string(name='Specification', description='The specifications of the redemption coupon.', example='N/A'),
        status?: string(name='Status', description='The status of the redemption coupon. Valid values:

*   Generated
*   CallBack
*   RefundPending
*   Canceled
*   Order_Canceled
*   ActivePending
*   ActiveSuccess
*   ExchangePending
*   ExchangeSuccess
*   Expired', example='Generated'),
      }
    ](name='Redeem')
    }(name='Redeem', description='The details of the redemption coupon.'),
    totalCount?: long(name='TotalCount', description='The total number of returned entries.', example='1'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='E503DC7B-E4F0-4B3C-BC89-BCECF1338F0B'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryRedeemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRedeemResponseBody(name='body'),
}

async function queryRedeemWithOptions(request: QueryRedeemRequest, runtime: Util.RuntimeOptions): QueryRedeemResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRedeem',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRedeem(request: QueryRedeemRequest): QueryRedeemResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRedeemWithOptions(request, runtime);
}

model QueryRelationListRequest {
  pageNum?: int32(name='PageNum', description='The number of the page to return. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20.', example='20'),
  statusList?: [ string ](name='StatusList', description='The states of the relationships between the management account and its members. The valid values of this parameter are the enumeration members of the RelationshipStatusEnum data type. If you do not specify this parameter, valid relationship states are queried by default.', example='RELATED'),
  userId?: long(name='UserId', description='The ID of the Alibaba Cloud account.', example='1990699401005016'),
}

model QueryRelationListResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    financialRelationInfoList?: [ 
      {
        accountId?: long(name='AccountId', description='The ID of the Alibaba Cloud account.', example='1851253838840762'),
        accountName?: string(name='AccountName', description='The name of the account.', example='caiwuyun_test4'),
        accountNickName?: string(name='AccountNickName', description='The display name of the account.', example='test4'),
        accountType?: string(name='AccountType', description='The type of the account. Valid values: MASTER and MEMBER.', example='MEMBER'),
        endTime?: string(name='EndTime', description='The time when the relationship became invalid. If no value is returned, the relationship is still valid.', example='2021-03-08T15:12Z'),
        relationId?: long(name='RelationId', description='The ID of the relationship.', example='51463'),
        relationType?: string(name='RelationType', description='The type of the relationship. Valid values: FinancialManagement and FinancialTrusteeship.', example='FinancialManagement'),
        setupTime?: string(name='SetupTime', description='The time when the relationship was established. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC. Example: 2016-05-23T12:00:00Z.', example='2021-03-02T15:12Z'),
        startTime?: string(name='StartTime', description='The time when the relationship became valid. The time follows the ISO 8601 standard in the yyyy-MM-ddThh:mm:ssZ format. The time is displayed in UTC. Example: 2016-05-23T12:00:00Z.', example='2021-03-02T15:12Z'),
        state?: string(name='State', description='The state of the relationship. One of the enumeration members of the RelationshipStatusEnum data type is returned.', example='RELATED'),
      }
    ](name='FinancialRelationInfoList', description='The relationships.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='100'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7FC5D662-37FD-40A6-85B1-33442D815184'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model QueryRelationListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRelationListResponseBody(name='body'),
}

async function queryRelationListWithOptions(request: QueryRelationListRequest, runtime: Util.RuntimeOptions): QueryRelationListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.statusList)) {
    query['StatusList'] = request.statusList;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRelationList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRelationList(request: QueryRelationListRequest): QueryRelationListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRelationListWithOptions(request, runtime);
}

model QueryResellerAvailableQuotaRequest {
  itemCodes?: string(name='ItemCodes'),
  ownerId?: long(name='OwnerId'),
}

model QueryResellerAvailableQuotaResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='300'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model QueryResellerAvailableQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryResellerAvailableQuotaResponseBody(name='body'),
}

async function queryResellerAvailableQuotaWithOptions(request: QueryResellerAvailableQuotaRequest, runtime: Util.RuntimeOptions): QueryResellerAvailableQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.itemCodes)) {
    query['ItemCodes'] = request.itemCodes;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryResellerAvailableQuota',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryResellerAvailableQuota(request: QueryResellerAvailableQuotaRequest): QueryResellerAvailableQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryResellerAvailableQuotaWithOptions(request, runtime);
}

model QueryResellerUserAlarmThresholdRequest {
  alarmType?: string(name='AlarmType', example='quota_low_balance'),
  ownerId?: long(name='OwnerId'),
}

model QueryResellerUserAlarmThresholdResponseBody = {
  code?: string(name='Code', example='200'),
  count?: int32(name='Count', example='1'),
  data?: [ 
    {
      denominator?: int32(name='Denominator', example='100'),
      numerator?: int32(name='Numerator', example='10'),
      thresholdAmount?: string(name='ThresholdAmount', example='100'),
      thresholdType?: int32(name='ThresholdType', example='0'),
    }
  ](name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='EAE08A27-386C-579E-966D-8853EC3C5D0E'),
  success?: boolean(name='Success', example='true'),
}

model QueryResellerUserAlarmThresholdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryResellerUserAlarmThresholdResponseBody(name='body'),
}

async function queryResellerUserAlarmThresholdWithOptions(request: QueryResellerUserAlarmThresholdRequest, runtime: Util.RuntimeOptions): QueryResellerUserAlarmThresholdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmType)) {
    query['AlarmType'] = request.alarmType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryResellerUserAlarmThreshold',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryResellerUserAlarmThreshold(request: QueryResellerUserAlarmThresholdRequest): QueryResellerUserAlarmThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryResellerUserAlarmThresholdWithOptions(request, runtime);
}

model QueryResourcePackageInstancesRequest {
  expiryTimeEnd?: string(name='ExpiryTimeEnd', description='The end of the expiration time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-02-02T13:00:00Z'),
  expiryTimeStart?: string(name='ExpiryTimeStart', description='The beginning of the expiration time range to query. Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-02-02T12:00:00Z'),
  includePartner?: boolean(name='IncludePartner', description='Specifies whether partners are involved.', example='true'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. Maximum value: 300.', example='20'),
  productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
}

model QueryResourcePackageInstancesResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    hostId?: string(name='HostId', description='The ID of the host.', example='cn'),
    instances?: {
      instance?: [ 
      {
        applicableProducts?: {
          product?: [ string ](name='Product')
        }(name='ApplicableProducts', description='The services to which the resource plan is applicable.'),
        commodityCode?: string(name='CommodityCode', description='The commodity code.', example='rds'),
        deductType?: string(name='DeductType', description='The deduction type. Example: Absolute.', example='Absolute'),
        effectiveTime?: string(name='EffectiveTime', description='The time when the resource plan took effect.', example='2018-09-12T09:51:56Z'),
        expiryTime?: string(name='ExpiryTime', description='The time when the resource plan expired.', example='2019-03-12T16:00:00Z'),
        instanceId?: string(name='InstanceId', description='The ID of the instance.', example='OSSBAG-cn-v0h1s4hma01'),
        packageType?: string(name='PackageType', description='The type of the resource plan.', example='FPT_ossbag_absolute_Storage_sh'),
        region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
        remainingAmount?: string(name='RemainingAmount', description='The remaining quota.', example='40.000'),
        remainingAmountUnit?: string(name='RemainingAmountUnit', description='The unit of the remaining quota.', example='GB'),
        remark?: string(name='Remark', description='The remarks on the resource plan. The remarks must be made in Chinese.'),
        status?: string(name='Status', description='The status of the resource plan. Valid values:

*   Available
*   Expired', example='Available'),
        totalAmount?: string(name='TotalAmount', description='The total quota of the resource plan.', example='40.000'),
        totalAmountUnit?: string(name='TotalAmountUnit', description='The unit of the total quota.', example='GB'),
      }
    ](name='Instance')
    }(name='Instances', description='The details of the instances.'),
    pageNum?: string(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: string(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: string(name='TotalCount', description='The total number of returned entries.', example='12'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  page?: int32(name='Page', description='The page number of the returned page.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
  total?: int32(name='Total', description='The total number of returned entries.', example='12'),
}

model QueryResourcePackageInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryResourcePackageInstancesResponseBody(name='body'),
}

async function queryResourcePackageInstancesWithOptions(request: QueryResourcePackageInstancesRequest, runtime: Util.RuntimeOptions): QueryResourcePackageInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.expiryTimeEnd)) {
    query['ExpiryTimeEnd'] = request.expiryTimeEnd;
  }
  if (!Util.isUnset(request.expiryTimeStart)) {
    query['ExpiryTimeStart'] = request.expiryTimeStart;
  }
  if (!Util.isUnset(request.includePartner)) {
    query['IncludePartner'] = request.includePartner;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryResourcePackageInstances',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryResourcePackageInstances(request: QueryResourcePackageInstancesRequest): QueryResourcePackageInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryResourcePackageInstancesWithOptions(request, runtime);
}

model QuerySavingsPlansDeductLogRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2022-01-05 00:00:00'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='spn-XXXXXXX'),
  instanceType?: string(name='InstanceType', description='The type of the instance ID based on which the data is queried. Valid values:

*   spn: queries data based on the ID of the savings plan instance.
*   product: queries data based on the ID of the cloud service instance.', example='spn'),
  locale?: string(name='Locale', description='The language of the return data. Valid values:

*   ZH: Chinese
*   EN: English', example='ZH'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2022-01-01 00:00:00'),
}

model QuerySavingsPlansDeductLogResponseBody = {
  code?: string(name='Code', description='The error code.', example='PARAM_ERROR'),
  data?: {
    items?: [ 
      {
        billModule?: string(name='BillModule', description='The billable item for which the fee is deducted.'),
        deductCommodity?: string(name='DeductCommodity', description='The service for which the fee is deducted.'),
        deductFee?: string(name='DeductFee', description='The deducted amount.', example='0.52'),
        deductInstanceId?: string(name='DeductInstanceId', description='The ID of the instance for which the fee is deducted.', example='i-XXXXXXXXX'),
        deductRate?: string(name='DeductRate', description='The deduction rate.', example='1.0'),
        discountRate?: string(name='DiscountRate', description='The discount used for the current deduction.', example='0.069'),
        endTime?: string(name='EndTime', description='The end of the billing cycle for which the fee is deducted.', example='2020-12-01 01:00:00'),
        instanceId?: string(name='InstanceId', description='The ID of the savings plan instance.', example='spn-xxxxxxx'),
        ownerId?: long(name='OwnerId', example='1906589291020438'),
        savingsType?: string(name='SavingsType', description='The type of the savings plan. Valid values:

*   universal: general-purpose
*   ecs: ECS compute', example='ecs'),
        startTime?: string(name='StartTime', description='The beginning of the billing cycle for which the fee is deducted. The time is in the format of yyyy-MM-dd HH:mm:ss.', example='2020-12-01 00:00:00'),
        userId?: long(name='UserId', description='The ID of the user.', example='1906589291020438'),
      }
    ](name='Items', description='The deduction details.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries.', example='20'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='61293E7A-3406-4447-8620-EC88B0AA66AD'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model QuerySavingsPlansDeductLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySavingsPlansDeductLogResponseBody(name='body'),
}

async function querySavingsPlansDeductLogWithOptions(request: QuerySavingsPlansDeductLogRequest, runtime: Util.RuntimeOptions): QuerySavingsPlansDeductLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySavingsPlansDeductLog',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySavingsPlansDeductLog(request: QuerySavingsPlansDeductLogRequest): QuerySavingsPlansDeductLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySavingsPlansDeductLogWithOptions(request, runtime);
}

model QuerySavingsPlansDiscountRequest {
  commodityCode?: string(name='CommodityCode', description='The code of the service.', example='ecs'),
  cycle?: string(name='Cycle', description='The cycle based on which queries are performed.', example='1:Year'),
  locale?: string(name='Locale', description='The identifier of the language.', example='ZH'),
  moduleCode?: string(name='ModuleCode', description='The code of the pricing module.', example='instance_type'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  payMode?: string(name='PayMode', description='The payment mode.', example='total'),
  region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
  spec?: string(name='Spec', description='The type of the resource.', example='ecs.g6'),
  spnType?: string(name='SpnType', description='The type of the savings plan.', example='universal'),
}

model QuerySavingsPlansDiscountResponseBody = {
  code?: string(name='Code', description='The error code returned.', example='PARAM_ERROR'),
  data?: {
    hostId?: string(name='HostId', description='The IP address of the request.', example='100.104.180.109'),
    items?: [ 
      {
        commodityName?: string(name='CommodityName', description='The details of the service.', example='Pay-as-you-go Elastic Compute Service (ECS) instance'),
        contractDiscountRate?: string(name='ContractDiscountRate', description='The contracted discount.', example='0.85'),
        cycle?: string(name='Cycle', description='The cycle based on which queries were performed.', example='1:Year'),
        discountRate?: string(name='DiscountRate', description='The discount provided by the official website.', example='0.85'),
        moduleName?: string(name='ModuleName', description='The name of the pricing module.', example='Instance'),
        payMode?: string(name='PayMode', description='The payment mode. Valid values:

*   total: all upfront
*   half: half upfront
*   zero: no upfront', example='total'),
        region?: string(name='Region', description='The ID of the region.', example='cn-zhangjiakou-na62-a01'),
        regionCode?: string(name='RegionCode'),
        spec?: string(name='Spec', description='The type of the resource.', example='ecs.g6'),
        spnType?: string(name='SpnType', description='The type of the savings plan.', example='universal'),
      }
    ](name='Items', description='The information about the discounts on saving plans.'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QuerySavingsPlansDiscountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySavingsPlansDiscountResponseBody(name='body'),
}

async function querySavingsPlansDiscountWithOptions(request: QuerySavingsPlansDiscountRequest, runtime: Util.RuntimeOptions): QuerySavingsPlansDiscountResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySavingsPlansDiscount',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySavingsPlansDiscount(request: QuerySavingsPlansDiscountRequest): QuerySavingsPlansDiscountResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySavingsPlansDiscountWithOptions(request, runtime);
}

model QuerySavingsPlansInstanceRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
  instanceId?: string(name='InstanceId', description='The ID of the savings plan instance.', example='spn-xxxxxxx'),
  locale?: string(name='Locale', description='The language of the return data. Valid values:

*   ZH: Chinese
*   EN: English', example='ZH'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2020-01-01 00:00:00'),
  status?: string(name='Status', description='The status of the Instance. 

*  NORMAL
* RELEASE', example='NORMAL'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag to query.', example='ecs'),
      value?: string(name='Value', description='The value of the tag to query.', example='001'),
    }
  ](name='Tag', description='The tags.'),
}

model QuerySavingsPlansInstanceResponseBody = {
  code?: string(name='Code', description='The error code.', example='Success'),
  data?: {
    items?: [ 
      {
        allocationStatus?: string(name='AllocationStatus', description='The allocation status. Valid values:

*   unallocated
*   allocated
*   beAllocated', example='unallocated'),
        commodityCode?: string(name='CommodityCode', example='savingplan_common_public_cn'),
        currency?: string(name='Currency', description='The currency. Valid values: CNY and USD.', example='CNY'),
        currentPoolValue?: string(name='CurrentPoolValue', example='100.0'),
        cycle?: string(name='Cycle', example='1:Year'),
        deductCycleType?: string(name='DeductCycleType', example='HOUR'),
        endTime?: string(name='EndTime', description='The time when the instance expires. The time is in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
        endTimestamp?: long(name='EndTimestamp', example='1663135741039'),
        instanceFamily?: string(name='InstanceFamily', description='The instance family information. For an instance of the Elastic Compute Service (ECS) compute type, the value indicates the ECS instance family or the ECS instance family package.', example='ecs.g6'),
        instanceId?: string(name='InstanceId', description='The ID of the savings plan instance.', example='spn-xxxxxxxx'),
        lastBillTotalUsage?: string(name='LastBillTotalUsage', example='100.0'),
        lastBillUtilization?: string(name='LastBillUtilization', example='0.8'),
        payMode?: string(name='PayMode', description='The payment type. Valid values:

*   total: All Upfront
*   half: Partial Upfront
*   zero: No Upfront', example='total'),
        poolValue?: string(name='PoolValue', description='The commitment.', example='1.00'),
        prepayFee?: string(name='PrepayFee', description='The prepaid amount.', example='8760.00'),
        region?: string(name='Region', description='The region.', example='cn-zhangjiakou-na62-a01'),
        restPoolValue?: string(name='RestPoolValue', example='100.0'),
        savingsType?: string(name='SavingsType', description='The type of the savings plan. Valid values:

*   universal: general-purpose
*   ecs: ECS compute', example='ECS'),
        startTime?: string(name='StartTime', description='The time when the instance takes effect. The time is in the format of yyyy-MM-dd HH:mm:ss.', example='2020-01-01 00:00:00'),
        startTimestamp?: long(name='StartTimestamp', example='1663135741039'),
        status?: string(name='Status', description='The status of the instance. Valid values:

*   NORMAL: normal
*   LIMIT: stopped due to overdue payment
*   RELEASE: released', example='NORMAL'),
        tags?: [ 
          {
            key?: string(name='Key', description='The key of the tag.'),
            value?: string(name='Value', description='The value of the tag.'),
          }
        ](name='Tags', description='The details about the tags.'),
        totalSave?: string(name='TotalSave', description='The total amount that is saved.', example='20.00'),
        utilization?: string(name='Utilization', description='The total usage.', example='1.0'),
      }
    ](name='Items', description='The details about the instances.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries.', example='100'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='61293E7A-3406-4447-8620-EC88B0AA66AD'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model QuerySavingsPlansInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySavingsPlansInstanceResponseBody(name='body'),
}

async function querySavingsPlansInstanceWithOptions(request: QuerySavingsPlansInstanceRequest, runtime: Util.RuntimeOptions): QuerySavingsPlansInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySavingsPlansInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySavingsPlansInstance(request: QuerySavingsPlansInstanceRequest): QuerySavingsPlansInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySavingsPlansInstanceWithOptions(request, runtime);
}

model QuerySettleBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='123'),
  billingCycle?: string(name='BillingCycle', example='2018-07'),
  isDisplayLocalCurrency?: boolean(name='IsDisplayLocalCurrency', example='false'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', example='true'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  recordID?: string(name='RecordID', example='12233'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
  type?: string(name='Type', example='SubscriptionOrder'),
}

model QuerySettleBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185xxxxx489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-02'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        afterTaxAmount?: float(name='AfterTaxAmount', example='0'),
        billAccountID?: string(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        item?: string(name='Item', example='SubscriptionOrder'),
        outstandingAmount?: float(name='OutstandingAmount', example='0'),
        ownerID?: string(name='OwnerID', example='3532535235'),
        paymentAmount?: float(name='PaymentAmount', example='0'),
        paymentCurrency?: string(name='PaymentCurrency', example='USD'),
        paymentTime?: string(name='PaymentTime', example='2020-03-11 08:00:00'),
        paymentTransactionID?: string(name='PaymentTransactionID', example='2O3AADJFEAF2PDKSFAMFCB11918'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='100'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        recordID?: string(name='RecordID', example='2020xxxx5912'),
        roundDownDiscount?: string(name='RoundDownDiscount', example='0'),
        status?: string(name='Status', example='PayFinish'),
        subOrderId?: string(name='SubOrderId', example='325345254353'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tax?: float(name='Tax', example='0'),
        usageEndTime?: string(name='UsageEndTime', example='2020-03-11 08:00:00'),
        usageStartTime?: string(name='UsageStartTime', example='2020-03-11 07:00:00'),
      }
    ](name='Item')
    }(name='Items'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUQARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='200'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='AE3F4057-DFC9-4B81-8858-F620651010C9'),
  success?: boolean(name='Success', example='true'),
}

model QuerySettleBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySettleBillResponseBody(name='body'),
}

async function querySettleBillWithOptions(request: QuerySettleBillRequest, runtime: Util.RuntimeOptions): QuerySettleBillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.isDisplayLocalCurrency)) {
    query['IsDisplayLocalCurrency'] = request.isDisplayLocalCurrency;
  }
  if (!Util.isUnset(request.isHideZeroCharge)) {
    query['IsHideZeroCharge'] = request.isHideZeroCharge;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.recordID)) {
    query['RecordID'] = request.recordID;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySettleBill',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySettleBill(request: QuerySettleBillRequest): QuerySettleBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySettleBillWithOptions(request, runtime);
}

model QuerySkuPriceListRequest {
  commodityCode?: string(name='CommodityCode', description='The code of the service.', example='ecs'),
  lang?: string(name='Lang'),
  nextPageToken?: string(name='NextPageToken', description='The token that is used to retrieve the next page. You do not need to set this parameter if you query coverage details for the first time. The response returns a token that you can use to query coverage details of the next page. If a null value is returned for the NextPageToken parameter, no more coverage details can be queried.', example='080112060a0422020800180022490a470342000000315333303332363436363336333433393636333136333338333733373333333133373336363336323634363336363337333836333636333636313336363433363332'),
  pageSize?: int32(name='PageSize', description='The number of entries to be returned on each page. Maximum value: 50.', example='20'),
  priceEntityCode?: string(name='PriceEntityCode', description='The code of the pricing object.', example='instance_type'),
  priceFactorConditionMap?: map[string] [ string ](name='PriceFactorConditionMap', description='The conditions of the pricing factors.'),
}

model QuerySkuPriceListShrinkRequest {
  commodityCode?: string(name='CommodityCode', description='The code of the service.', example='ecs'),
  lang?: string(name='Lang'),
  nextPageToken?: string(name='NextPageToken', description='The token that is used to retrieve the next page. You do not need to set this parameter if you query coverage details for the first time. The response returns a token that you can use to query coverage details of the next page. If a null value is returned for the NextPageToken parameter, no more coverage details can be queried.', example='080112060a0422020800180022490a470342000000315333303332363436363336333433393636333136333338333733373333333133373336363336323634363336363337333836333636333636313336363433363332'),
  pageSize?: int32(name='PageSize', description='The number of entries to be returned on each page. Maximum value: 50.', example='20'),
  priceEntityCode?: string(name='PriceEntityCode', description='The code of the pricing object.', example='instance_type'),
  priceFactorConditionMapShrink?: string(name='PriceFactorConditionMap', description='The conditions of the pricing factors.'),
}

model QuerySkuPriceListResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='Success'),
  data?: {
    skuPricePage?: {
      nextPageToken?: string(name='NextPageToken', description='The token that is used to query the next page.', example='080112060a0422020800180022490a470342000000315333303332363436363336333433393636333136333338333733373333333133373336363336323634363336363337333836333636333636313336363433363332'),
      skuPriceList?: [ 
        {
          cskuPriceList?: [ 
            {
              cskuCode?: string(name='CskuCode', description='The unique code of the SKU price.', example='ac74dd7b52ae6389ddef099283fb8275'),
              currency?: string(name='Currency', description='The currency.', example='CNY'),
              price?: string(name='Price', description='The price.', example='100'),
              priceMode?: string(name='PriceMode', description='The pricing mode.', example='STEP_ARRIVE'),
              priceType?: string(name='PriceType', description='The pricing type.', example='hourPrice'),
              priceUnit?: string(name='PriceUnit', description='The unit of the price.', example='USD (per unit)'),
              rangeList?: [ 
                {
                  factorCode?: string(name='FactorCode', description='The code of the pricing factor.', example='212fbd27866307fc79ecf06934a88b2c'),
                  max?: string(name='Max', description='The maximum value.', example='10'),
                  min?: string(name='Min', description='The minimum value.', example='1'),
                  type?: string(name='Type', description='The closure type of the interval.', example='LORC'),
                }
              ](name='RangeList', description='If the PriceMode parameter is set to STEP_ACCUMULATION or STEP_ARRIVE, the value of this field exists and specifies the range. If the PriceMode parameter is set to NORMAL_PRICE, the value of this field is null.'),
              usageUnit?: string(name='UsageUnit', description='The usage unit.', example='Count'),
            }
          ](name='CskuPriceList', description='The prices of the SKUs.'),
          skuCode?: string(name='SkuCode', description='The code of the SKU.', example='017c15a31507bc6de22aa93777461adc'),
          skuFactorMap?: map[string]string(name='SkuFactorMap', description='The values of the pricing factors.'),
        }
      ](name='SkuPriceList', description='The SKUs.'),
      totalCount?: int32(name='TotalCount', description='The total number of SKUs.', example='18732'),
    }(name='SkuPricePage', description='The SKUs of the pricing object.'),
  }(name='Data', description='The data that is returned.'),
  message?: string(name='Message', description='The message that is returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QuerySkuPriceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySkuPriceListResponseBody(name='body'),
}

async function querySkuPriceListWithOptions(tmpReq: QuerySkuPriceListRequest, runtime: Util.RuntimeOptions): QuerySkuPriceListResponse {
  Util.validateModel(tmpReq);
  var request = new QuerySkuPriceListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.priceFactorConditionMap)) {
    request.priceFactorConditionMapShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.priceFactorConditionMap, 'PriceFactorConditionMap', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySkuPriceList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySkuPriceList(request: QuerySkuPriceListRequest): QuerySkuPriceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySkuPriceListWithOptions(request, runtime);
}

model QuerySplitItemBillRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the member. If you specify a value for this parameter, you can query the split bills of the specified member. If you leave this parameter empty, the split bills of the current account are queried by default.', example='123'),
  billingCycle?: string(name='BillingCycle', description='The billing cycle, in the YYYY-MM format.', example='2020-03'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', description='The number of the page to return. Default value: 1.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Default value: 20. Maximum value: 300.', example='20'),
  productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
  productType?: string(name='ProductType', description='The type of the service.', example='rds'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values: Subscription: subscription PayAsYouGo: pay-as-you-go This parameter must be used together with the ProductCode parameter.', example='PayAsYouGo'),
}

model QuerySplitItemBillResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    accountID?: string(name='AccountID', description='The ID of the account.', example='185xxxx3489'),
    accountName?: string(name='AccountName', description='The name of the account.', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', description='The billing cycle, in the YYYY-MM format.', example='2020-03'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', description='The amount deducted by using credit refunds.', example='0'),
        billingDate?: string(name='BillingDate', description='The billing date, in the YYYY-MM-DD format.', example='2020-01-20'),
        billingItem?: string(name='BillingItem', description='The billable item.', example='Other'),
        billingType?: string(name='BillingType', description='The billing type.', example='Other'),
        cashAmount?: float(name='CashAmount', description='The amount paid in cash. The amount that was deducted by using credit refunds is not included.', example='0'),
        commodityCode?: string(name='CommodityCode', description='The code of the commodity. The commodity code is the same as that displayed in User Center.', example='rds'),
        costUnit?: string(name='CostUnit', description='The cost center.', example='Not allocated'),
        currency?: string(name='Currency', description='The type of the currency. Valid values: CNY, USD, and JPY.', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', description='The amount deducted by using vouchers.', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', description='The amount deducted by using coupons.', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', description='The amount deducted by using prepaid cards.', example='0'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage', description='The amount deducted by using resource plans.', example='NULL'),
        instanceConfig?: string(name='InstanceConfig', description='The configurations of the instance.', example='CPU:12'),
        instanceID?: string(name='InstanceID', description='The ID of the instance.', example='i-kjhdskjgshfdlkjfdh'),
        instanceSpec?: string(name='InstanceSpec', description='The instance type of the instance.', example='ecs.sn1ne.3xlarge'),
        internetIP?: string(name='InternetIP', description='The public IP address.', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', description='The private IP address.', example='192.xx.xx.xx'),
        invoiceDiscount?: float(name='InvoiceDiscount', description='The discount amount.', example='0'),
        item?: string(name='Item', description='The type of the bill. Valid values: SubscriptionOrder: subscription order PayAsYouGoBill: pay-as-you-go bill Refund: refund Adjustment: reconciliation', example='PayAsYouGoBill'),
        listPrice?: string(name='ListPrice', description='The unit price. This parameter is returned only if the isBillingItem parameter is set to true.', example='100'),
        listPriceUnit?: string(name='ListPriceUnit', description='The unit of the unit price. This parameter is returned only if the isBillingItem parameter is set to true.', example='CNY'),
        nickName?: string(name='NickName', description='The name of the instance.', example='test'),
        outstandingAmount?: float(name='OutstandingAmount', description='The unsettled amount of the bill.', example='0'),
        ownerID?: string(name='OwnerID', description='The ID of the member. This parameter is returned in a multi-account payment scenario.', example='169***013'),
        paymentAmount?: float(name='PaymentAmount', description='The amount paid in cash.', example='0'),
        pipCode?: string(name='PipCode', description='The code of the service. The service code is the same as that displayed in User Center.', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', description='The pretax amount.', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', description='The pretax gross amount.', example='0'),
        productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
        productDetail?: string(name='ProductDetail', description='The details of the service.', example='ApsaraDB RDS'),
        productName?: string(name='ProductName', description='The name of the service.', example='ApsaraDB RDS'),
        productType?: string(name='ProductType', description='The type of the service.', example='rds'),
        region?: string(name='Region', description='The ID of the region.', example='cn-hangzhou'),
        resourceGroup?: string(name='ResourceGroup', description='The resource group.', example='Default resource group'),
        servicePeriod?: string(name='ServicePeriod', description='The validity period.', example='10'),
        servicePeriodUnit?: string(name='ServicePeriodUnit', description='The unit of the validity period.', example='Seconds'),
        splitAccountID?: string(name='SplitAccountID', description='The ID of the account to which the split bill belongs.', example='122'),
        splitAccountName?: string(name='SplitAccountName', description='The name of the account to which the split item belongs.', example='12@test.com'),
        splitBillingCycle?: string(name='SplitBillingCycle', description='The month in which the split item is used.', example='2020-06'),
        splitCommodityCode?: string(name='SplitCommodityCode', description='The commodity code of the split item.', example='rds'),
        splitItemID?: string(name='SplitItemID', description='The ID of the split item.', example='i-28bycvyb4'),
        splitItemName?: string(name='SplitItemName', description='The name of the split item.', example='iZ28bycvyb4Z'),
        splitProductDetail?: string(name='SplitProductDetail', description='The name of the service to which the split item belongs.', example='rds'),
        subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values: Subscription: subscription PayAsYouGo: pay-as-you-go This parameter is returned together with the ProductCode parameter.', example='PayAsYouGo'),
        tag?: string(name='Tag', description='The tag.', example='tag'),
        usage?: string(name='Usage', description='The usage of the split item. This parameter is returned only if the isBillingItem parameter is set to true.', example='100'),
        usageUnit?: string(name='UsageUnit', description='The unit of usage. This parameter is returned only if the isBillingItem parameter is set to true.', example='GB'),
        zone?: string(name='Zone', description='The ID of the zone.', example='cn-hangzhou-h'),
      }
    ](name='Item')
    }(name='Items', description='The details of the bills.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page. Default value: 1.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned on each page. Default value: 20. Maximum value: 300.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='2'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QuerySplitItemBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySplitItemBillResponseBody(name='body'),
}

/**
  * *   This API operation has been upgraded to DescribeSplitItemBill. We recommend that you call the [DescribeSplitItemBill](~~208169~~) operation to query split bills. You can call the QuerySplitItemBill operation to query a maximum of 50,000 data rows in a bill.
  * *   The data queried by calling the QuerySplitItemBill operation is consistent with the data that is displayed for the specified billing cycle on the Split Bill page in User Center.
  * *   You can call this operation to query split bills generated within the last 12 months.
  * *   This operation returns split bills only after you activate the [Split Bill](https://usercenter2.aliyun.com/finance/split-bill) service in User Center.
  *
  * @param request QuerySplitItemBillRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QuerySplitItemBillResponse
 */
async function querySplitItemBillWithOptions(request: QuerySplitItemBillRequest, runtime: Util.RuntimeOptions): QuerySplitItemBillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySplitItemBill',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * *   This API operation has been upgraded to DescribeSplitItemBill. We recommend that you call the [DescribeSplitItemBill](~~208169~~) operation to query split bills. You can call the QuerySplitItemBill operation to query a maximum of 50,000 data rows in a bill.
  * *   The data queried by calling the QuerySplitItemBill operation is consistent with the data that is displayed for the specified billing cycle on the Split Bill page in User Center.
  * *   You can call this operation to query split bills generated within the last 12 months.
  * *   This operation returns split bills only after you activate the [Split Bill](https://usercenter2.aliyun.com/finance/split-bill) service in User Center.
  *
  * @param request QuerySplitItemBillRequest
  * @return QuerySplitItemBillResponse
 */
async function querySplitItemBill(request: QuerySplitItemBillRequest): QuerySplitItemBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySplitItemBillWithOptions(request, runtime);
}

model QueryUserOmsDataRequest {
  dataType?: string(name='DataType', description='The time type of the usage data. Set the parameter based on the description in the documentation of the specified service. Valid values:

*   Raw
*   Hour
*   Day
*   Month', example='Hour'),
  endTime?: string(name='EndTime', description='The end of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-02-21T12:00:00Z'),
  marker?: string(name='Marker', description='The name of the record from which the usage data starts to return. The usage data records whose names are alphabetically after the value of the Marker parameter are returned. By default, the usage data starts to return from the earliest record.', example='NextToken'),
  ownerId?: long(name='OwnerId'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page. Valid values: 1 to 200. Default value: 100.', example='1'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-02-20T12:00:00Z'),
  table?: string(name='Table', description='The service whose usage data you want to query and the details of the usage data. The parameter value is usually set to the code of a service. Various usage models are provided for different services.', example='rds'),
}

model QueryUserOmsDataResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    hostId?: string(name='HostId', description='The ID of the host.', example='cn'),
    marker?: string(name='Marker', description='Indicates that the returned usage data starts from the next page. If no value is returned for this parameter or this parameter is not returned, no data can be queried.', example='NextToken'),
    omsData?: [  map[string]any ](name='OmsData'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model QueryUserOmsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUserOmsDataResponseBody(name='body'),
}

/**
  * You can call this operation to query the usage data of an Alibaba Cloud service. Take note of the following items:
  * *   The service code that you specify for querying the usage data of a specific Alibaba Cloud service must be valid. You can query the usage data by hour or by day.
  * *   The time that you specify must follow the ISO8601 standard in the yyyy-MM-ddTHH:mm:ssZ format.
  *     *   Latency exists in data pushes. Therefore, if you set the DataType parameter to Hour, the integrity of usage data recorded in the last 24 hours can be ensured. If you set the DataType parameter to Day, the integrity of usage data recorded in the last two days can be ensured.
  *     *   You can query the usage data that is recorded in the last quarter.
  *
  * @param request QueryUserOmsDataRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return QueryUserOmsDataResponse
 */
async function queryUserOmsDataWithOptions(request: QueryUserOmsDataRequest, runtime: Util.RuntimeOptions): QueryUserOmsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.marker)) {
    query['Marker'] = request.marker;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.table)) {
    query['Table'] = request.table;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryUserOmsData',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * You can call this operation to query the usage data of an Alibaba Cloud service. Take note of the following items:
  * *   The service code that you specify for querying the usage data of a specific Alibaba Cloud service must be valid. You can query the usage data by hour or by day.
  * *   The time that you specify must follow the ISO8601 standard in the yyyy-MM-ddTHH:mm:ssZ format.
  *     *   Latency exists in data pushes. Therefore, if you set the DataType parameter to Hour, the integrity of usage data recorded in the last 24 hours can be ensured. If you set the DataType parameter to Day, the integrity of usage data recorded in the last two days can be ensured.
  *     *   You can query the usage data that is recorded in the last quarter.
  *
  * @param request QueryUserOmsDataRequest
  * @return QueryUserOmsDataResponse
 */
async function queryUserOmsData(request: QueryUserOmsDataRequest): QueryUserOmsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUserOmsDataWithOptions(request, runtime);
}

model RefundInstanceRequest {
  clientToken?: string(name='ClientToken', description='This parameter is required for scenarios that need idempotence. The UUID that is used to ensure the idempotence of the request.', example='793F021C-B589-1225-82A9-99232AEBE494'),
  immediatelyRelease?: string(name='ImmediatelyRelease', description='This parameter is required for unsubscription scenarios. Valid values: 1 and 0. A value of 1 specifies that the instance is immediately released. A value of 0 specifies that the instance is shut down based on the shutdown policy. This parameter is supported only for specified services. Default value: 1.', example='1'),
  instanceId?: string(name='InstanceId', description='The ID of the instance. This parameter is required for unsubscription scenarios. Do not specify a custom name for this parameter.', example='i-bp1etb69sqxgl4*******'),
  productCode?: string(name='ProductCode', description='The code of the service. This parameter is required for unsubscription scenarios.', example='ecs'),
  productType?: string(name='ProductType', description='The type of the service. This parameter is required for unsubscription scenarios. Unless otherwise specified, set this parameter to an empty string.', example='”“'),
}

model RefundInstanceResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='ResourceNotExists'),
  data?: {
    hostId?: string(name='HostId', description='The site of the execution host.', example='cn'),
    orderId?: long(name='OrderId', description='The ID of the refund order that is returned only if the instance is unsubscribed from.', example='2100000000***'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The description of the execution result.', example='success'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='UUID'),
  success?: boolean(name='Success', description='Indicates whether the request was successful. Valid values: true and false.', example='false'),
}

model RefundInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefundInstanceResponseBody(name='body'),
}

/**
  * 1.  Refunds are applicable only for the actual paid amount. Vouchers used for the purchase are non-refundable.
  * 2.  Check the information about unsubscription and confirm the unsubscription terms and refundable amount. The resource that is unsubscribed cannot be restored.
  * 3.  For more information, see [Rules for unsubscribing from resources](https://help.aliyun.com/knowledge_detail/116043.html?spm=a2c81.e1d666e.app.2.62ae11271Kd6iM).
  *
  * @param request RefundInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return RefundInstanceResponse
 */
async function refundInstanceWithOptions(request: RefundInstanceRequest, runtime: Util.RuntimeOptions): RefundInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.immediatelyRelease)) {
    query['ImmediatelyRelease'] = request.immediatelyRelease;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefundInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 1.  Refunds are applicable only for the actual paid amount. Vouchers used for the purchase are non-refundable.
  * 2.  Check the information about unsubscription and confirm the unsubscription terms and refundable amount. The resource that is unsubscribed cannot be restored.
  * 3.  For more information, see [Rules for unsubscribing from resources](https://help.aliyun.com/knowledge_detail/116043.html?spm=a2c81.e1d666e.app.2.62ae11271Kd6iM).
  *
  * @param request RefundInstanceRequest
  * @return RefundInstanceResponse
 */
async function refundInstance(request: RefundInstanceRequest): RefundInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return refundInstanceWithOptions(request, runtime);
}

model ReleaseInstanceRequest {
  instanceIds?: string(name='InstanceIds', example='rm-xxxxxxxxxxxx'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', example='ecs'),
  productType?: string(name='ProductType', example='ecs'),
  region?: string(name='Region', example='cn-hangzhou'),
  renewStatus?: string(name='RenewStatus', example='AutoRenewal'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
}

model ReleaseInstanceResponseBody = {
  code?: string(name='Code', example='Invalid_Product_Code'),
  data?: {
    hostId?: string(name='HostId', example='cn'),
    releaseResult?: boolean(name='ReleaseResult', example='true'),
  }(name='Data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='UUID'),
  success?: boolean(name='Success', example='true'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstanceResponseBody(name='body'),
}

/**
  * A value of true indicates that the execution is complete.
  * A value of false indicates that an error occurs during the execution.
  *
  * @param request ReleaseInstanceRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return ReleaseInstanceResponse
 */
async function releaseInstanceWithOptions(request: ReleaseInstanceRequest, runtime: Util.RuntimeOptions): ReleaseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.renewStatus)) {
    query['RenewStatus'] = request.renewStatus;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * A value of true indicates that the execution is complete.
  * A value of false indicates that an error occurs during the execution.
  *
  * @param request ReleaseInstanceRequest
  * @return ReleaseInstanceResponse
 */
async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceWithOptions(request, runtime);
}

model RelieveAccountRelationRequest {
  childUserId?: long(name='ChildUserId', description='The ID of the Alibaba Cloud account that is used as the member. You must set the RelationId parameter or all of the ParentUserId, ChildUserId, and RelationType parameters.', example='1512996702208737'),
  parentUserId?: long(name='ParentUserId', description='The ID of the Alibaba Cloud account that is used as the management account. You must set the RelationId parameter or all of the ParentUserId, ChildUserId, and RelationType parameters.', example='1738376485192612'),
  relationId?: long(name='RelationId', description='The ID of the financial relationship between the management account and the member. You must set the RelationId parameter or all of the ParentUserId, ChildUserId, and RelationType parameters.', example='RelationId'),
  relationType?: string(name='RelationType', description='The type of the financial relationship. Set the value to enterprise_group.', example='enterprise_group'),
  requestId?: string(name='RequestId', description='The unique ID of the request. The ID is used to mark a request and troubleshoot a problem.', example='request_id'),
}

model RelieveAccountRelationResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='200'),
  data?: {
    hostId?: string(name='HostId', description='hostid', example='HostId'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Message returned'),
  requestId?: string(name='RequestId', description='The unique ID of the request.', example='request_id'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model RelieveAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RelieveAccountRelationResponseBody(name='body'),
}

async function relieveAccountRelationWithOptions(request: RelieveAccountRelationRequest, runtime: Util.RuntimeOptions): RelieveAccountRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.childUserId)) {
    query['ChildUserId'] = request.childUserId;
  }
  if (!Util.isUnset(request.parentUserId)) {
    query['ParentUserId'] = request.parentUserId;
  }
  if (!Util.isUnset(request.relationId)) {
    query['RelationId'] = request.relationId;
  }
  if (!Util.isUnset(request.relationType)) {
    query['RelationType'] = request.relationType;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RelieveAccountRelation',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function relieveAccountRelation(request: RelieveAccountRelationRequest): RelieveAccountRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return relieveAccountRelationWithOptions(request, runtime);
}

model RenewChangeInstanceRequest {
  clientToken?: string(name='ClientToken', example='JASIOFKVNVIXXXXXX'),
  instanceId?: string(name='InstanceId', example='rm-skjdhaskjdh'),
  ownerId?: long(name='OwnerId'),
  parameter?: [ 
    {
      code?: string(name='Code', example='Bandwidth'),
      value?: string(name='Value', example='disk'),
    }
  ](name='Parameter'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  renewPeriod?: long(name='RenewPeriod', example='2'),
}

model RenewChangeInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostId?: string(name='HostId', example='100.100.64.1:8150'),
    orderId?: string(name='OrderId', example='202407022550621'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', description='Id of the request', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model RenewChangeInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewChangeInstanceResponseBody(name='body'),
}

async function renewChangeInstanceWithOptions(request: RenewChangeInstanceRequest, runtime: Util.RuntimeOptions): RenewChangeInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parameter)) {
    query['Parameter'] = request.parameter;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.renewPeriod)) {
    query['RenewPeriod'] = request.renewPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewChangeInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewChangeInstance(request: RenewChangeInstanceRequest): RenewChangeInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewChangeInstanceWithOptions(request, runtime);
}

model RenewInstanceRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='ASKJHKLASJHAFSLKJH'),
  instanceId?: string(name='InstanceId', description='The ID of the instance', example='rm-skjdhaskjdh'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', description='The code of the service to which the instance belongs.', example='rds'),
  productType?: string(name='ProductType', description='The type of the service.', example='rds'),
  renewPeriod?: int32(name='RenewPeriod', description='The duration of the subscription renewal. Unit: months. Valid values:

*   1 to 9
*   12
*   24
*   36', example='6'),
}

model RenewInstanceResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    orderId?: string(name='OrderId', description='The ID of the order.', example='202657601410661'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The error message returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.renewPeriod)) {
    query['RenewPeriod'] = request.renewPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model RenewResourcePackageRequest {
  duration?: int32(name='Duration', description='The renewal period of the resource plan.', example='1'),
  effectiveDate?: string(name='EffectiveDate', description='The time when the resource plan takes effect. If you leave this parameter empty, the resource plan immediately takes effect by default.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-02-02T12:00:00Z'),
  instanceId?: string(name='InstanceId', description='The ID of the resource plan.', example='lskd****sljhsdj'),
  ownerId?: long(name='OwnerId'),
  pricingCycle?: string(name='PricingCycle', description='The unit of the validity period for the resource plan. Valid values:

*   Month
*   Year

Default value: Month.', example='Month'),
}

model RenewResourcePackageResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    instanceId?: string(name='InstanceId', description='The ID of the resource plan.', example='OSSBAG-cn-0xl0n****003'),
    orderId?: long(name='OrderId', description='The ID of the order.', example='204322560333'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='204322301110333'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model RenewResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewResourcePackageResponseBody(name='body'),
}

async function renewResourcePackageWithOptions(request: RenewResourcePackageRequest, runtime: Util.RuntimeOptions): RenewResourcePackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.effectiveDate)) {
    query['EffectiveDate'] = request.effectiveDate;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewResourcePackage',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewResourcePackage(request: RenewResourcePackageRequest): RenewResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewResourcePackageWithOptions(request, runtime);
}

model SaveUserCreditRequest {
  avoidExpiration?: boolean(name='AvoidExpiration', description='Specifies whether to enable service suspension protection for pay-as-you-go services.', example='true'),
  avoidNotification?: boolean(name='AvoidNotification', description='Specifies whether to allow the use of pay-as-you-go services without the need to send notifications.', example='true'),
  avoidPrepaidExpiration?: boolean(name='AvoidPrepaidExpiration', description='Specifies whether to enable service suspension protection for subscription services.', example='true'),
  avoidPrepaidNotification?: boolean(name='AvoidPrepaidNotification', description='Specifies whether to allow the use of subscription services without the need to send notifications.', example='true'),
  creditType?: string(name='CreditType', description='The type of the credit.', example='N/A'),
  creditValue?: string(name='CreditValue', description='The value of the credit.', example='N/A'),
  description?: string(name='Description', description='Description', example='description'),
  operator?: string(name='Operator', description='The operator who performs the action.', example='65683'),
}

model SaveUserCreditResponseBody = {
  code?: string(name='Code', description='The error code returned if the call failed. For more information, see the "Error codes" section of the topic.', example='200'),
  message?: string(name='Message', description='The message returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9EEAE43F-1E4D-4734-AE93-5049878AC103'),
  success?: boolean(name='Success', description='Indicates whether the call is successful. A value of true indicates that the call is successful. A value of false indicates that call failed.', example='true'),
}

model SaveUserCreditResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveUserCreditResponseBody(name='body'),
}

async function saveUserCreditWithOptions(request: SaveUserCreditRequest, runtime: Util.RuntimeOptions): SaveUserCreditResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.avoidExpiration)) {
    query['AvoidExpiration'] = request.avoidExpiration;
  }
  if (!Util.isUnset(request.avoidNotification)) {
    query['AvoidNotification'] = request.avoidNotification;
  }
  if (!Util.isUnset(request.avoidPrepaidExpiration)) {
    query['AvoidPrepaidExpiration'] = request.avoidPrepaidExpiration;
  }
  if (!Util.isUnset(request.avoidPrepaidNotification)) {
    query['AvoidPrepaidNotification'] = request.avoidPrepaidNotification;
  }
  if (!Util.isUnset(request.creditType)) {
    query['CreditType'] = request.creditType;
  }
  if (!Util.isUnset(request.creditValue)) {
    query['CreditValue'] = request.creditValue;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.operator)) {
    query['Operator'] = request.operator;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveUserCredit',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveUserCredit(request: SaveUserCreditRequest): SaveUserCreditResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveUserCreditWithOptions(request, runtime);
}

model SetAllExpirationDayRequest {
  ownerId?: long(name='OwnerId'),
  unifyExpireDay?: string(name='UnifyExpireDay', description='The expiration date. You can set an expiration date only for ECS instances that have not expired. The expiration date that you specify do not take effect on expired ECS instances. After the expiration date is set, the expiration date is used when you renew ECS instances.

You can set the expiration date to a day from the 1st to the 28th of each month.', example='10'),
}

model SetAllExpirationDayResponseBody = {
  code?: string(name='Code', description='The HTTP status code.', example='200'),
  message?: string(name='Message', description='The message that is returned.', example='The message that is returned'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='The ID of the request'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model SetAllExpirationDayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetAllExpirationDayResponseBody(name='body'),
}

async function setAllExpirationDayWithOptions(request: SetAllExpirationDayRequest, runtime: Util.RuntimeOptions): SetAllExpirationDayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.unifyExpireDay)) {
    query['UnifyExpireDay'] = request.unifyExpireDay;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetAllExpirationDay',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setAllExpirationDay(request: SetAllExpirationDayRequest): SetAllExpirationDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAllExpirationDayWithOptions(request, runtime);
}

model SetCreditLabelActionRequest {
  actionType?: string(name='ActionType', description='The type of the action. Valid values: SET: adds the pay-as-you-go tag. CANCEL: removes the pay-as-you-go tag.', example='SET'),
  clearCycle?: string(name='ClearCycle', description='The cycle in which the account is notified of payment. **You do not need to specify this parameter.', example='N/A'),
  creditAmount?: string(name='CreditAmount', description='The credit line of the account.', example='1000'),
  currencyCode?: string(name='CurrencyCode', description='The code of currency that is used. Valid values: USD and CNY.', example='CNY'),
  dailyCycle?: string(name='DailyCycle', description='The cycle in which payment can be deferred. **You do not need to specify this parameter.', example='N/A'),
  description?: string(name='Description', description='The description of the action.', example='Cancel the credit authorization'),
  isNeedAddSettleLabel?: string(name='IsNeedAddSettleLabel', description='Specifies whether to add the post-settlement tag. **You do not need to specify this parameter.', example='N/A'),
  isNeedAdjustCreditAccount?: string(name='IsNeedAdjustCreditAccount', description='Specifies whether to synchronize the monthly settlement tag. **You do not need to specify this parameter.', example='N/A'),
  isNeedSaveNotifyRule?: string(name='IsNeedSaveNotifyRule', description='Specifies whether to save the notification rule. **You do not need to specify this parameter.', example='N/A'),
  isNeedSetCreditAmount?: string(name='IsNeedSetCreditAmount', description='Specifies whether to set a credit line. **You do not need to specify this parameter.', example='N/A'),
  needNotice?: boolean(name='NeedNotice', description='Specifies whether to notify the account of an identity change. **You do not need to specify this parameter.', example='N/A'),
  newCreateMode?: boolean(name='NewCreateMode', description='Specifies whether to call another operation to create a credit ledger. **You do not need to specify this parameter.', example='N/A'),
  operator?: string(name='Operator', description='The operator who performs the action.', example='78394'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  siteCode?: string(name='SiteCode', description='The code of the site. **You do not need to specify this parameter.', example='N/A'),
  source?: string(name='Source', description='The source of the action.', example='dellidc'),
  uid?: string(name='Uid', description='The ID of the Alibaba Cloud account.', example='1911503093565030'),
}

model SetCreditLabelActionResponseBody = {
  code?: string(name='Code', description='The error code returned if the call failed. For more information, see the "Error codes" section of this topic.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the action is successful. Valid values: true: The action was successful. false: The action failed.', example='true'),
  message?: string(name='Message', description='The message returned.', example='Successful！'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the call is successful. A value of true indicates that the call is successful. A value of false indicates that the call failed.', example='true'),
}

model SetCreditLabelActionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetCreditLabelActionResponseBody(name='body'),
}

async function setCreditLabelActionWithOptions(request: SetCreditLabelActionRequest, runtime: Util.RuntimeOptions): SetCreditLabelActionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionType)) {
    query['ActionType'] = request.actionType;
  }
  if (!Util.isUnset(request.clearCycle)) {
    query['ClearCycle'] = request.clearCycle;
  }
  if (!Util.isUnset(request.creditAmount)) {
    query['CreditAmount'] = request.creditAmount;
  }
  if (!Util.isUnset(request.currencyCode)) {
    query['CurrencyCode'] = request.currencyCode;
  }
  if (!Util.isUnset(request.dailyCycle)) {
    query['DailyCycle'] = request.dailyCycle;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.isNeedAddSettleLabel)) {
    query['IsNeedAddSettleLabel'] = request.isNeedAddSettleLabel;
  }
  if (!Util.isUnset(request.isNeedAdjustCreditAccount)) {
    query['IsNeedAdjustCreditAccount'] = request.isNeedAdjustCreditAccount;
  }
  if (!Util.isUnset(request.isNeedSaveNotifyRule)) {
    query['IsNeedSaveNotifyRule'] = request.isNeedSaveNotifyRule;
  }
  if (!Util.isUnset(request.isNeedSetCreditAmount)) {
    query['IsNeedSetCreditAmount'] = request.isNeedSetCreditAmount;
  }
  if (!Util.isUnset(request.needNotice)) {
    query['NeedNotice'] = request.needNotice;
  }
  if (!Util.isUnset(request.newCreateMode)) {
    query['NewCreateMode'] = request.newCreateMode;
  }
  if (!Util.isUnset(request.operator)) {
    query['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.siteCode)) {
    query['SiteCode'] = request.siteCode;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetCreditLabelAction',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setCreditLabelAction(request: SetCreditLabelActionRequest): SetCreditLabelActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCreditLabelActionWithOptions(request, runtime);
}

model SetRenewalRequest {
  instanceIDs?: string(name='InstanceIDs', description='The ID of the instance. You can enable auto-renewal for up to 100 subscription instances at a time. Separate multiple instance IDs with commas (,).', example='rm-askjdhaskfjh'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', description='The code of the service.', example='rds'),
  productType?: string(name='ProductType', description='The type of the service.', example='rds'),
  renewalPeriod?: int32(name='RenewalPeriod', description='The auto-renewal period. Valid values:

*   1
*   2
*   3
*   6
*   12

>  This parameter is required if the RenewalStatus parameter is set to AutoRenewal.', example='1'),
  renewalPeriodUnit?: string(name='RenewalPeriodUnit', description='The unit of the auto-renewal period. Valid values:

*   M: months
*   Y: years

>  This parameter is required if the RenewalStatus parameter is set to AutoRenewal.', example='M'),
  renewalStatus?: string(name='RenewalStatus', description='The status of renewal. Valid values:

*   AutoRenewal: The instance is automatically renewed.
*   ManualRenewal: The instance is manually renewed.
*   NotRenewal: The instance is not renewed.', example='AutoRenewal'),
  subscriptionType?: string(name='SubscriptionType', description='The billing method. Valid values:

*   Subscription: subscription
*   PayAsYouGo: pay-as-you-go', example='PayAsYouGo'),
}

model SetRenewalResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  message?: string(name='Message', description='The error message returned.', example='Successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', description='Indicates whether the request was successful.', example='true'),
}

model SetRenewalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetRenewalResponseBody(name='body'),
}

async function setRenewalWithOptions(request: SetRenewalRequest, runtime: Util.RuntimeOptions): SetRenewalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIDs)) {
    query['InstanceIDs'] = request.instanceIDs;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.renewalPeriod)) {
    query['RenewalPeriod'] = request.renewalPeriod;
  }
  if (!Util.isUnset(request.renewalPeriodUnit)) {
    query['RenewalPeriodUnit'] = request.renewalPeriodUnit;
  }
  if (!Util.isUnset(request.renewalStatus)) {
    query['RenewalStatus'] = request.renewalStatus;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetRenewal',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setRenewal(request: SetRenewalRequest): SetRenewalResponse {
  var runtime = new Util.RuntimeOptions{};
  return setRenewalWithOptions(request, runtime);
}

model SetResellerUserAlarmThresholdRequest {
  alarmThresholds?: string(name='AlarmThresholds', example='[{\\"denominator\\":100,\\"numerator\\":30,\\"thresholdType\\":1}]'),
  alarmType?: string(name='AlarmType', example='quota_low_balance'),
  ownerId?: long(name='OwnerId'),
}

model SetResellerUserAlarmThresholdResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model SetResellerUserAlarmThresholdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetResellerUserAlarmThresholdResponseBody(name='body'),
}

async function setResellerUserAlarmThresholdWithOptions(request: SetResellerUserAlarmThresholdRequest, runtime: Util.RuntimeOptions): SetResellerUserAlarmThresholdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmThresholds)) {
    query['AlarmThresholds'] = request.alarmThresholds;
  }
  if (!Util.isUnset(request.alarmType)) {
    query['AlarmType'] = request.alarmType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetResellerUserAlarmThreshold',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setResellerUserAlarmThreshold(request: SetResellerUserAlarmThresholdRequest): SetResellerUserAlarmThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return setResellerUserAlarmThresholdWithOptions(request, runtime);
}

model SetResellerUserQuotaRequest {
  amount?: string(name='Amount', description='The quota of a quota ledger. Unit: CNY.', example='750'),
  currency?: string(name='Currency', description='You do not need to set the parameter.', example='N/A'),
  outBizId?: string(name='OutBizId', description='The ID of the business.', example='OD2022040818295234777795624764689'),
  ownerId?: long(name='OwnerId'),
}

model SetResellerUserQuotaResponseBody = {
  code?: string(name='Code', description='The error code returned if the call failed. For more information, see the "Error codes" section of this topic.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the request is successful.', example='true'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', description='Indicates whether the call is successful. A value of true indicates that the call is successful. A value of false indicates that the call failed.', example='true'),
}

model SetResellerUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetResellerUserQuotaResponseBody(name='body'),
}

async function setResellerUserQuotaWithOptions(request: SetResellerUserQuotaRequest, runtime: Util.RuntimeOptions): SetResellerUserQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.currency)) {
    query['Currency'] = request.currency;
  }
  if (!Util.isUnset(request.outBizId)) {
    query['OutBizId'] = request.outBizId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetResellerUserQuota',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setResellerUserQuota(request: SetResellerUserQuotaRequest): SetResellerUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return setResellerUserQuotaWithOptions(request, runtime);
}

model SetResellerUserStatusRequest {
  businessType?: string(name='BusinessType', description='The type of the business. Valid values: FREEZE: the frozen business of the account. TRUSTEESHIP: the hosted business of the account.', example='FREEZE'),
  ownerId?: string(name='OwnerId'),
  status?: string(name='Status', description='The account status that you want to set. Valid values: Freeze: The account is frozen. Thaw: The account is unfrozen. Trusteeship: The account is hosted. TrusteeshipCancel: The account is not hosted.', example='Freeze'),
  stopMode?: string(name='StopMode', description='停机模式
取值：
    0：普通停机
    1：立即停机', example='0'),
}

model SetResellerUserStatusResponseBody = {
  code?: string(name='Code', description='The error code returned if the call failed. For more information, see the "Error codes" section of this topic.', example='200'),
  data?: boolean(name='Data', description='Indicates whether the request is successful.', example='true'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', description='Indicates whether the call is successful. A value of true indicates that the call is successful. A value of false indicates that the call failed.', example='true'),
}

model SetResellerUserStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetResellerUserStatusResponseBody(name='body'),
}

async function setResellerUserStatusWithOptions(request: SetResellerUserStatusRequest, runtime: Util.RuntimeOptions): SetResellerUserStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.stopMode)) {
    query['StopMode'] = request.stopMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetResellerUserStatus',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setResellerUserStatus(request: SetResellerUserStatusRequest): SetResellerUserStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setResellerUserStatusWithOptions(request, runtime);
}

model SubscribeBillToOSSRequest {
  beginBillingCycle?: string(name='BeginBillingCycle', description='The initial billing cycle from which bills start to be pushed. After you subscribe to the bills, the system automatically pushes the data that is generated from the initial billing cycle to the current time. If the SubscribeType parameter is set to MonthBill, this parameter is invalid. Historical data is not pushed again. The data generated within the last year can be pushed.', example='2021-03'),
  bucketOwnerId?: long(name='BucketOwnerId', description='The owner ID of the OSS bucket that stores the bills. This parameter is required if you are a bidder or reseller and want to push data to an OSS bucket of a member account. In this case, you must specify this account as the account used to call this operation and grant the AliyunConsumeDump2OSSRole permission to this account. If you are a regular user, you do not need to set this parameter. By default, your account is used to call this operation.', example='12341324'),
  bucketPath?: string(name='BucketPath', description='The path of the OSS bucket.', example='testpath'),
  multAccountRelSubscribe?: string(name='MultAccountRelSubscribe', description='The type of the account whose bills are to be pushed if multi-tier accounts are involved. Valid values:

*   MA: the master account and a non-managed member account in Finance Cloud
*   ACP1: a member account of a virtual network operator (VNO)

Default value: MA.', example='MA'),
  rowLimitPerFile?: int32(name='RowLimitPerFile', example='300000'),
  subscribeBucket?: string(name='SubscribeBucket', description='The OSS bucket that stores the bills to which you want to subscribe.', example='xxxxxx-bucket'),
  subscribeType?: string(name='SubscribeType', description='The type of the bill to which you want to subscribe. Valid values:

*   BillingItemDetailForBillingPeriod: detailed bills of billable items
*   InstanceDetailForBillingPeriod: detailed bills of instances
*   BillingItemDetailMonthly: billable item-based bills summarized by billing cycle
*   InstanceDetailMonthly: instance-based bills summarized by billing cycle
*   SplitItemDetailDaily: split bills summarized by day
*   MonthBill: monthly bills in the PDF format. You can subscribe to the monthly PDF bills only of the master account.', example='BillingItemDetailForBillingPeriod'),
}

model SubscribeBillToOSSResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F61FCE4B-9B56-4FD9-A17E-******'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model SubscribeBillToOSSResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubscribeBillToOSSResponseBody(name='body'),
}

/**
  * Before you call this operation, take note of the following items:
  * *   You can subscribe to only one type of bill at a time.
  * *   The bills generated on the previous day are pushed on a daily basis the next day after you subscribe to the bills. The full-data bills for the previous month are pushed on the fourth day of each month. The monthly bills in the PDF format for the previous month are pushed on the fourth day of each month.
  * *   The daily bills may be delayed. The delayed bills are pushed the next day after they are generated. The delayed bills may include the bills that should have been pushed on the previous day. We recommend that you query the full-data bills for the previous month at the beginning of each month.
  * *   The bill subscriber must have the [AliyunConsumeDump2OSSRole](https://ram.console.aliyun.com/#/role/authorize?request=%7B%22Requests%22:%20%7B%22request1%22:%20%7B%22RoleName%22:%20%22AliyunConsumeDump2OSSRole%22,%20%22TemplateId%22:%20%22Dump2OSSRole%22%7D%7D,%20%22ReturnUrl%22:%20%22https:%2F%2Fusercenter2.aliyun.com%22,%20%22Service%22:%20%22Consume%22%7D) permission.
  * *   The SubscribeBillToOSS operation has the same functionality as the Save Expense Details to OSS Bucket feature in User Center.
  * *   To subscribe to the bills stored in an OSS bucket, make sure that the directory name specified for the OSS bucket conforms to the following naming rules:
  * 1.  1.  The directory name can contain only UTF-8 characters and cannot contain emoticons.
  * 2.  2.  Forward slashes (/) are used to separate paths and can be used to create subdirectories with ease. The directory name cannot start with a forward slash (/), a backslash (\\\\), or consecutive forward slashes (/).
  * 3.  3.  The name of a subdirectory cannot be set to two consecutive periods (..).
  * 4.  4.  The directory name must be 1 to 254 characters in length.
  * *   File names:
  *     *   **BillingItemDetailForBillingPeriod** (Detailed bills of billable items)
  *         *   File name format for a daily push: `UID_BillingItemDetail_YYYYMMDD`. Example: `169**_BillingItemDetail_20190310`.
  *         *   File name format for a full-data push at the beginning of the next month: `UID_BillingItemDetail_YYYYMM`. Example: `169**_BillingItemDetail_201903`.
  *     *   **InstanceDetailForBillingPeriod** (Detailed bills of instances)
  *         *   File name format for a daily push: `UID_InstanceDetail_YYYYMMDD`. Example: `169**_InstanceDetail_20190310`.
  *         *   File name format for a full-data push at the beginning of the next month: `UID_InstanceDetail_YYYYMM`. Example: `169**_InstanceDetail_201903`.
  *     *   **InstanceDetailMonthly** (Instance-based bills summarized by billing cycle)
  *         *   File name format for a daily push: `UID_InstanceDetailMonthly_YYYYMM`. Example: `169**_InstanceDetailMonthly_201903`. A bill of this type contains the full data generated from the beginning of the month to the current day, and is updated every day until the fourth day of the next month.
  *     *   **BillingItemDetailMonthly** (Billable item-based bills summarized by billing cycle)
  *         *   File name format for a daily push: `UID_BillingItemDetailMonthly_YYYYMM`. Example: `169**_BillingItemDetailMonthly_201903`. A bill of this type contains the full data generated from the beginning of the month to the current day, and is updated every day until the fourth day of the next month.
  *     *   **SplitItemDetailDaily** (Split bills summarized by day)
  *         *   File name format for a daily push: `UID_SplitItemDetailDaily_YYYYMM`. Example: `169**_SplitItemDetailDaily_201903`. A bill of this type contains the full data generated from the beginning of the month to the current day, and is updated every day until the fourth day of the next month.
  *     *   **MonthBill** (Monthly bill in the PDF format)
  *         *   File name format for a monthly push: `UID_MonthBill_YYYYMM`. Example: `169**_MonthBill_201903`. The bill for the previous month is pushed on the fourth day of each month.
  * *   The bills of the MonthBill type are PDF files, whereas the bills of other types are CSV files. If the number of data rows in a bill exceeds a threshold, the bill is automatically split into multiple CSV files. Then, the multiple CSV files are automatically merged and compressed into a ZIP file that has the same name format as the original file.
  *
  * @param request SubscribeBillToOSSRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return SubscribeBillToOSSResponse
 */
async function subscribeBillToOSSWithOptions(request: SubscribeBillToOSSRequest, runtime: Util.RuntimeOptions): SubscribeBillToOSSResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginBillingCycle)) {
    query['BeginBillingCycle'] = request.beginBillingCycle;
  }
  if (!Util.isUnset(request.bucketOwnerId)) {
    query['BucketOwnerId'] = request.bucketOwnerId;
  }
  if (!Util.isUnset(request.bucketPath)) {
    query['BucketPath'] = request.bucketPath;
  }
  if (!Util.isUnset(request.multAccountRelSubscribe)) {
    query['MultAccountRelSubscribe'] = request.multAccountRelSubscribe;
  }
  if (!Util.isUnset(request.rowLimitPerFile)) {
    query['RowLimitPerFile'] = request.rowLimitPerFile;
  }
  if (!Util.isUnset(request.subscribeBucket)) {
    query['SubscribeBucket'] = request.subscribeBucket;
  }
  if (!Util.isUnset(request.subscribeType)) {
    query['SubscribeType'] = request.subscribeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubscribeBillToOSS',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * Before you call this operation, take note of the following items:
  * *   You can subscribe to only one type of bill at a time.
  * *   The bills generated on the previous day are pushed on a daily basis the next day after you subscribe to the bills. The full-data bills for the previous month are pushed on the fourth day of each month. The monthly bills in the PDF format for the previous month are pushed on the fourth day of each month.
  * *   The daily bills may be delayed. The delayed bills are pushed the next day after they are generated. The delayed bills may include the bills that should have been pushed on the previous day. We recommend that you query the full-data bills for the previous month at the beginning of each month.
  * *   The bill subscriber must have the [AliyunConsumeDump2OSSRole](https://ram.console.aliyun.com/#/role/authorize?request=%7B%22Requests%22:%20%7B%22request1%22:%20%7B%22RoleName%22:%20%22AliyunConsumeDump2OSSRole%22,%20%22TemplateId%22:%20%22Dump2OSSRole%22%7D%7D,%20%22ReturnUrl%22:%20%22https:%2F%2Fusercenter2.aliyun.com%22,%20%22Service%22:%20%22Consume%22%7D) permission.
  * *   The SubscribeBillToOSS operation has the same functionality as the Save Expense Details to OSS Bucket feature in User Center.
  * *   To subscribe to the bills stored in an OSS bucket, make sure that the directory name specified for the OSS bucket conforms to the following naming rules:
  * 1.  1.  The directory name can contain only UTF-8 characters and cannot contain emoticons.
  * 2.  2.  Forward slashes (/) are used to separate paths and can be used to create subdirectories with ease. The directory name cannot start with a forward slash (/), a backslash (\\\\), or consecutive forward slashes (/).
  * 3.  3.  The name of a subdirectory cannot be set to two consecutive periods (..).
  * 4.  4.  The directory name must be 1 to 254 characters in length.
  * *   File names:
  *     *   **BillingItemDetailForBillingPeriod** (Detailed bills of billable items)
  *         *   File name format for a daily push: `UID_BillingItemDetail_YYYYMMDD`. Example: `169**_BillingItemDetail_20190310`.
  *         *   File name format for a full-data push at the beginning of the next month: `UID_BillingItemDetail_YYYYMM`. Example: `169**_BillingItemDetail_201903`.
  *     *   **InstanceDetailForBillingPeriod** (Detailed bills of instances)
  *         *   File name format for a daily push: `UID_InstanceDetail_YYYYMMDD`. Example: `169**_InstanceDetail_20190310`.
  *         *   File name format for a full-data push at the beginning of the next month: `UID_InstanceDetail_YYYYMM`. Example: `169**_InstanceDetail_201903`.
  *     *   **InstanceDetailMonthly** (Instance-based bills summarized by billing cycle)
  *         *   File name format for a daily push: `UID_InstanceDetailMonthly_YYYYMM`. Example: `169**_InstanceDetailMonthly_201903`. A bill of this type contains the full data generated from the beginning of the month to the current day, and is updated every day until the fourth day of the next month.
  *     *   **BillingItemDetailMonthly** (Billable item-based bills summarized by billing cycle)
  *         *   File name format for a daily push: `UID_BillingItemDetailMonthly_YYYYMM`. Example: `169**_BillingItemDetailMonthly_201903`. A bill of this type contains the full data generated from the beginning of the month to the current day, and is updated every day until the fourth day of the next month.
  *     *   **SplitItemDetailDaily** (Split bills summarized by day)
  *         *   File name format for a daily push: `UID_SplitItemDetailDaily_YYYYMM`. Example: `169**_SplitItemDetailDaily_201903`. A bill of this type contains the full data generated from the beginning of the month to the current day, and is updated every day until the fourth day of the next month.
  *     *   **MonthBill** (Monthly bill in the PDF format)
  *         *   File name format for a monthly push: `UID_MonthBill_YYYYMM`. Example: `169**_MonthBill_201903`. The bill for the previous month is pushed on the fourth day of each month.
  * *   The bills of the MonthBill type are PDF files, whereas the bills of other types are CSV files. If the number of data rows in a bill exceeds a threshold, the bill is automatically split into multiple CSV files. Then, the multiple CSV files are automatically merged and compressed into a ZIP file that has the same name format as the original file.
  *
  * @param request SubscribeBillToOSSRequest
  * @return SubscribeBillToOSSResponse
 */
async function subscribeBillToOSS(request: SubscribeBillToOSSRequest): SubscribeBillToOSSResponse {
  var runtime = new Util.RuntimeOptions{};
  return subscribeBillToOSSWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='ResourceId', description='The IDs of resources.'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Specify savings plan instance as the type of the resource.', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag. You can create N tag keys at a time. Valid values of N: 1 to 20. The value of this parameter can be an empty string.', example='tag1'),
      value?: string(name='Value', description='The value of the tag N. Valid values of N: 1 to 20.', example='001'),
    }
  ](name='Tag', description='The tags.'),
}

model TagResourcesResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='InternalError'),
  data?: boolean(name='Data', description='The data returned.', example='true'),
  message?: string(name='Message', description='The error message returned.', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1537A007-72D7-4165-8A26-8694A38E219A'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnsubscribeBillToOSSRequest {
  multAccountRelSubscribe?: string(name='MultAccountRelSubscribe', description='The type of accounts whose bills are to be pushed if multi-tier accounts are involved. Valid values:

*   MA: management account.
*   ACP1: member account of a virtual network operator (VNO).

Default value: MA.', example='MA'),
  subscribeType?: string(name='SubscribeType', description='The type of the bill to which you want to subscribe. Valid values:

*   BillingItemDetailForBillingPeriod: bills of billable items
*   InstanceDetailForBillingPeriod: bills of instances
*   BillingItemDetailMonthly: billable item-based bills summarized by billing cycle
*   InstanceDetailMonthly: instance-based bills summarized by billing cycle
*   SplitItemDetailDaily: split bills summarized by day
*   MonthBill: monthly bills in the PDF format You can subscribe to the monthly PDF bills only of the master account.', example='BillingItemDetailForBillingPeriod'),
}

model UnsubscribeBillToOSSResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D23FE74C-742F-4624-A82B-******'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UnsubscribeBillToOSSResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnsubscribeBillToOSSResponseBody(name='body'),
}

async function unsubscribeBillToOSSWithOptions(request: UnsubscribeBillToOSSRequest, runtime: Util.RuntimeOptions): UnsubscribeBillToOSSResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.multAccountRelSubscribe)) {
    query['MultAccountRelSubscribe'] = request.multAccountRelSubscribe;
  }
  if (!Util.isUnset(request.subscribeType)) {
    query['SubscribeType'] = request.subscribeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnsubscribeBillToOSS',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unsubscribeBillToOSS(request: UnsubscribeBillToOSSRequest): UnsubscribeBillToOSSResponse {
  var runtime = new Util.RuntimeOptions{};
  return unsubscribeBillToOSSWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags. This parameter is valid only if the TagKey.n parameter is not set. Valid values: true and false.', example='true'),
  resourceId?: [ string ](name='ResourceId', description='The IDs of resources.'),
  resourceType?: string(name='ResourceType', description='The type of the resource. Specify the savings plan instance as the type of the resource.', example='instance'),
  tagKey?: [ string ](name='TagKey', description='The tag keys.'),
}

model UntagResourcesResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='PARAM_ERROR'),
  data?: boolean(name='Data', description='The data returned.', example='true'),
  message?: string(name='Message', description='The error message returned.', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='C7C15585-8349-4C62-BEE4-5A391841B9BE'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpgradeResourcePackageRequest {
  effectiveDate?: string(name='EffectiveDate', description='The time when the resource plan takes effect. If you leave this parameter empty, the resource plan immediately takes effect by default.

Specify the time in the ISO 8601 standard in the yyyy-MM-ddTHH:mm:ssZ format. The time must be in UTC.', example='2020-02-02T12:00:00Z'),
  instanceId?: string(name='InstanceId', description='The ID of the resource plan.', example='OSSBAG-cn-0xl*****x002'),
  ownerId?: long(name='OwnerId'),
  specification?: string(name='Specification', description='The specifications to which you want to upgrade the resource plan.', example='51200'),
}

model UpgradeResourcePackageResponseBody = {
  code?: string(name='Code', description='The status code returned.', example='Success'),
  data?: {
    instanceId?: string(name='InstanceId', description='The ID of the resource plan.', example='OSSBAG-cn-0xl*****002'),
    orderId?: long(name='OrderId', description='The ID of the order.', example='73387246238746'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  orderId?: long(name='OrderId', description='The ID of the order.', example='73387246238746'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', description='Indicates whether the request is successful.', example='true'),
}

model UpgradeResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeResourcePackageResponseBody(name='body'),
}

async function upgradeResourcePackageWithOptions(request: UpgradeResourcePackageRequest, runtime: Util.RuntimeOptions): UpgradeResourcePackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.effectiveDate)) {
    query['EffectiveDate'] = request.effectiveDate;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeResourcePackage',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeResourcePackage(request: UpgradeResourcePackageRequest): UpgradeResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeResourcePackageWithOptions(request, runtime);
}

