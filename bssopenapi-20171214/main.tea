/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  
  @endpointMap = {
    ap-northeast-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-northeast-2-pop = 'business.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'business.ap-southeast-1.aliyuncs.com',
    cn-beijing = 'business.aliyuncs.com',
    cn-beijing-finance-1 = 'business.aliyuncs.com',
    cn-beijing-finance-pop = 'business.aliyuncs.com',
    cn-beijing-gov-1 = 'business.aliyuncs.com',
    cn-beijing-nu16-b01 = 'business.aliyuncs.com',
    cn-chengdu = 'business.aliyuncs.com',
    cn-edge-1 = 'business.aliyuncs.com',
    cn-fujian = 'business.aliyuncs.com',
    cn-haidian-cm12-c01 = 'business.aliyuncs.com',
    cn-hangzhou = 'business.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'business.aliyuncs.com',
    cn-hangzhou-finance = 'business.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'business.aliyuncs.com',
    cn-hangzhou-test-306 = 'business.aliyuncs.com',
    cn-hongkong = 'business.aliyuncs.com',
    cn-hongkong-finance-pop = 'business.aliyuncs.com',
    cn-huhehaote = 'business.aliyuncs.com',
    cn-north-2-gov-1 = 'business.aliyuncs.com',
    cn-qingdao = 'business.aliyuncs.com',
    cn-qingdao-nebula = 'business.aliyuncs.com',
    cn-shanghai = 'business.aliyuncs.com',
    cn-shanghai-et15-b01 = 'business.aliyuncs.com',
    cn-shanghai-et2-b01 = 'business.aliyuncs.com',
    cn-shanghai-finance-1 = 'business.aliyuncs.com',
    cn-shanghai-inner = 'business.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'business.aliyuncs.com',
    cn-shenzhen = 'business.aliyuncs.com',
    cn-shenzhen-finance-1 = 'business.aliyuncs.com',
    cn-shenzhen-inner = 'business.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'business.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'business.aliyuncs.com',
    cn-wuhan = 'business.aliyuncs.com',
    cn-yushanfang = 'business.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'business.aliyuncs.com',
    cn-zhangjiakou = 'business.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'business.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'business.aliyuncs.com',
    eu-central-1 = 'business.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'business.ap-southeast-1.aliyuncs.com',
    eu-west-1-oxs = 'business.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'business.ap-southeast-1.aliyuncs.com',
    rus-west-1-pop = 'business.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'business.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'business.ap-southeast-1.aliyuncs.com',
  };
  checkConfig(config);
  @endpoint = getEndpoint('bssopenapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddAccountRelationRequest {
  relationType?: string(name='RelationType'),
  parentUserId?: long(name='ParentUserId'),
  childNick?: string(name='ChildNick'),
  childUserId?: long(name='ChildUserId'),
  requestId?: string(name='RequestId'),
  permissionCodes?: [ string ](name='PermissionCodes'),
  roleCodes?: [ string ](name='RoleCodes'),
}

model AddAccountRelationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    hostId?: string(name='HostId'),
  }(name='Data'),
}

model AddAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  body: AddAccountRelationResponseBody(name='body'),
}

async function addAccountRelationWithOptions(request: AddAccountRelationRequest, runtime: Util.RuntimeOptions): AddAccountRelationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddAccountRelation', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addAccountRelation(request: AddAccountRelationRequest): AddAccountRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAccountRelationWithOptions(request, runtime);
}

model AllocateCostUnitResourceRequest {
  fromUnitUserId?: long(name='FromUnitUserId'),
  fromUnitId?: long(name='FromUnitId'),
  toUnitUserId?: long(name='ToUnitUserId'),
  toUnitId?: long(name='ToUnitId'),
  resourceInstanceList?: [ 
    {
      apportionCode?: string(name='ApportionCode'),
      commodityCode?: string(name='CommodityCode'),
      resourceUserId?: long(name='ResourceUserId'),
      resourceId?: string(name='ResourceId'),
    }
  ](name='ResourceInstanceList'),
}

model AllocateCostUnitResourceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    toUnitUserId?: long(name='ToUnitUserId'),
    isSuccess?: boolean(name='IsSuccess'),
    toUnitId?: long(name='ToUnitId'),
  }(name='Data'),
}

model AllocateCostUnitResourceResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateCostUnitResourceResponseBody(name='body'),
}

async function allocateCostUnitResourceWithOptions(request: AllocateCostUnitResourceRequest, runtime: Util.RuntimeOptions): AllocateCostUnitResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocateCostUnitResource', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocateCostUnitResource(request: AllocateCostUnitResourceRequest): AllocateCostUnitResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateCostUnitResourceWithOptions(request, runtime);
}

model ApplyInvoiceRequest {
  invoiceAmount?: long(name='InvoiceAmount'),
  ownerId?: long(name='OwnerId'),
  customerId?: long(name='CustomerId'),
  addressId?: long(name='AddressId'),
  invoicingType?: int32(name='InvoicingType'),
  processWay?: int32(name='ProcessWay'),
  applyUserNick?: string(name='ApplyUserNick'),
  invoiceByAmount?: boolean(name='InvoiceByAmount'),
  userRemark?: string(name='UserRemark'),
  selectedIds?: [ integer ](name='SelectedIds'),
}

model ApplyInvoiceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    invoiceApplyId?: long(name='InvoiceApplyId'),
  }(name='Data'),
}

model ApplyInvoiceResponse = {
  headers: map[string]string(name='headers'),
  body: ApplyInvoiceResponseBody(name='body'),
}

async function applyInvoiceWithOptions(request: ApplyInvoiceRequest, runtime: Util.RuntimeOptions): ApplyInvoiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ApplyInvoice', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function applyInvoice(request: ApplyInvoiceRequest): ApplyInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyInvoiceWithOptions(request, runtime);
}

model CancelOrderRequest {
  orderId?: string(name='OrderId'),
  ownerId?: long(name='OwnerId'),
}

model CancelOrderResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    hostId?: string(name='HostId'),
  }(name='Data'),
}

model CancelOrderResponse = {
  headers: map[string]string(name='headers'),
  body: CancelOrderResponseBody(name='body'),
}

async function cancelOrderWithOptions(request: CancelOrderRequest, runtime: Util.RuntimeOptions): CancelOrderResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CancelOrder', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function cancelOrder(request: CancelOrderRequest): CancelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOrderWithOptions(request, runtime);
}

model ChangeResellerConsumeAmountRequest {
  ownerId?: long(name='OwnerId'),
  adjustType?: string(name='AdjustType'),
  amount?: string(name='Amount'),
  currency?: string(name='Currency'),
  businessType?: string(name='BusinessType'),
  source?: string(name='Source'),
  outBizId?: string(name='OutBizId'),
  extendMap?: string(name='ExtendMap'),
}

model ChangeResellerConsumeAmountResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model ChangeResellerConsumeAmountResponse = {
  headers: map[string]string(name='headers'),
  body: ChangeResellerConsumeAmountResponseBody(name='body'),
}

async function changeResellerConsumeAmountWithOptions(request: ChangeResellerConsumeAmountRequest, runtime: Util.RuntimeOptions): ChangeResellerConsumeAmountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ChangeResellerConsumeAmount', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function changeResellerConsumeAmount(request: ChangeResellerConsumeAmountRequest): ChangeResellerConsumeAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResellerConsumeAmountWithOptions(request, runtime);
}

model ConfirmRelationRequest {
  relationType?: string(name='RelationType'),
  parentUserId?: long(name='ParentUserId'),
  confirmCode?: string(name='ConfirmCode'),
  childUserId?: long(name='ChildUserId'),
  requestId?: string(name='RequestId'),
  permissionCodes?: [ string ](name='PermissionCodes'),
}

model ConfirmRelationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    hostId?: string(name='HostId'),
  }(name='Data'),
}

model ConfirmRelationResponse = {
  headers: map[string]string(name='headers'),
  body: ConfirmRelationResponseBody(name='body'),
}

async function confirmRelationWithOptions(request: ConfirmRelationRequest, runtime: Util.RuntimeOptions): ConfirmRelationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConfirmRelation', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function confirmRelation(request: ConfirmRelationRequest): ConfirmRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmRelationWithOptions(request, runtime);
}

model ConvertChargeTypeRequest {
  ownerId?: long(name='OwnerId'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  period?: int32(name='Period'),
  productCode?: string(name='ProductCode'),
  instanceId?: string(name='InstanceId'),
}

model ConvertChargeTypeResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    orderId?: string(name='OrderId'),
  }(name='Data'),
}

model ConvertChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: ConvertChargeTypeResponseBody(name='body'),
}

async function convertChargeTypeWithOptions(request: ConvertChargeTypeRequest, runtime: Util.RuntimeOptions): ConvertChargeTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ConvertChargeType', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function convertChargeType(request: ConvertChargeTypeRequest): ConvertChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return convertChargeTypeWithOptions(request, runtime);
}

model CreateAgAccountRequest {
  loginEmail?: string(name='LoginEmail'),
  accountAttr?: string(name='AccountAttr'),
  enterpriseName?: string(name='EnterpriseName'),
  firstName?: string(name='FirstName'),
  lastName?: string(name='LastName'),
  nationCode?: string(name='NationCode'),
  provinceName?: string(name='ProvinceName'),
  cityName?: string(name='CityName'),
  postcode?: string(name='Postcode'),
}

model CreateAgAccountResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  agRelationDto?: {
    type?: string(name='Type'),
    pk?: string(name='Pk'),
    ramAdminRoleName?: string(name='RamAdminRoleName'),
    mpk?: string(name='Mpk'),
  }(name='AgRelationDto'),
}

model CreateAgAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateAgAccountResponseBody(name='body'),
}

async function createAgAccountWithOptions(request: CreateAgAccountRequest, runtime: Util.RuntimeOptions): CreateAgAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateAgAccount', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createAgAccount(request: CreateAgAccountRequest): CreateAgAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAgAccountWithOptions(request, runtime);
}

model CreateCostUnitRequest {
  unitEntityList?: [ 
    {
      parentUnitId?: long(name='ParentUnitId'),
      ownerUid?: long(name='OwnerUid'),
      unitName?: string(name='UnitName'),
    }
  ](name='UnitEntityList'),
}

model CreateCostUnitResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    costUnitDtoList?: [ 
      {
        parentUnitId?: long(name='ParentUnitId'),
        unitName?: string(name='UnitName'),
        unitId?: long(name='UnitId'),
        ownerUid?: long(name='OwnerUid'),
      }
    ](name='CostUnitDtoList'),
  }(name='Data'),
}

model CreateCostUnitResponse = {
  headers: map[string]string(name='headers'),
  body: CreateCostUnitResponseBody(name='body'),
}

async function createCostUnitWithOptions(request: CreateCostUnitRequest, runtime: Util.RuntimeOptions): CreateCostUnitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateCostUnit', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createCostUnit(request: CreateCostUnitRequest): CreateCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCostUnitWithOptions(request, runtime);
}

model CreateInstanceRequest {
  productCode?: string(name='ProductCode'),
  ownerId?: long(name='OwnerId'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  period?: int32(name='Period'),
  renewalStatus?: string(name='RenewalStatus'),
  renewPeriod?: int32(name='RenewPeriod'),
  clientToken?: string(name='ClientToken'),
  logistics?: string(name='Logistics'),
  parameter?: [ 
    {
      value?: string(name='Value'),
      code?: string(name='Code'),
    }
  ](name='Parameter'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    orderId?: string(name='OrderId'),
    instanceId?: string(name='InstanceId'),
  }(name='Data'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateInstance', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateResellerUserQuotaRequest {
  ownerId?: long(name='OwnerId'),
  amount?: string(name='Amount'),
  currency?: string(name='Currency'),
  outBizId?: string(name='OutBizId'),
}

model CreateResellerUserQuotaResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model CreateResellerUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResellerUserQuotaResponseBody(name='body'),
}

async function createResellerUserQuotaWithOptions(request: CreateResellerUserQuotaRequest, runtime: Util.RuntimeOptions): CreateResellerUserQuotaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateResellerUserQuota', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createResellerUserQuota(request: CreateResellerUserQuotaRequest): CreateResellerUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResellerUserQuotaWithOptions(request, runtime);
}

model CreateResourcePackageRequest {
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode'),
  packageType?: string(name='PackageType'),
  effectiveDate?: string(name='EffectiveDate'),
  specification?: string(name='Specification'),
  duration?: int32(name='Duration'),
  pricingCycle?: string(name='PricingCycle'),
}

model CreateResourcePackageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  orderId?: long(name='OrderId'),
  data?: {
    orderId?: long(name='OrderId'),
    instanceId?: string(name='InstanceId'),
  }(name='Data'),
}

model CreateResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateResourcePackageResponseBody(name='body'),
}

async function createResourcePackageWithOptions(request: CreateResourcePackageRequest, runtime: Util.RuntimeOptions): CreateResourcePackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateResourcePackage', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createResourcePackage(request: CreateResourcePackageRequest): CreateResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourcePackageWithOptions(request, runtime);
}

model DeleteCostUnitRequest {
  ownerUid?: long(name='OwnerUid'),
  unitId?: long(name='UnitId'),
}

model DeleteCostUnitResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    isSuccess?: boolean(name='IsSuccess'),
    unitId?: long(name='UnitId'),
    ownerUid?: long(name='OwnerUid'),
  }(name='Data'),
}

model DeleteCostUnitResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteCostUnitResponseBody(name='body'),
}

async function deleteCostUnitWithOptions(request: DeleteCostUnitRequest, runtime: Util.RuntimeOptions): DeleteCostUnitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteCostUnit', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteCostUnit(request: DeleteCostUnitRequest): DeleteCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCostUnitWithOptions(request, runtime);
}

model DescribeInstanceBillRequest {
  billingCycle?: string(name='BillingCycle'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  ownerId?: long(name='OwnerId'),
  isBillingItem?: boolean(name='IsBillingItem'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge'),
  billingDate?: string(name='BillingDate'),
  granularity?: string(name='Granularity'),
  billOwnerId?: long(name='BillOwnerId'),
  instanceID?: string(name='InstanceID'),
}

model DescribeInstanceBillResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    nextToken?: string(name='NextToken'),
    billingCycle?: string(name='BillingCycle'),
    maxResults?: int32(name='MaxResults'),
    accountID?: string(name='AccountID'),
    totalCount?: int32(name='TotalCount'),
    accountName?: string(name='AccountName'),
    items?: [ 
      {
        billingDate?: string(name='BillingDate'),
        instanceConfig?: string(name='InstanceConfig'),
        internetIP?: string(name='InternetIP'),
        item?: string(name='Item'),
        tag?: string(name='Tag'),
        instanceID?: string(name='InstanceID'),
        currency?: string(name='Currency'),
        billAccountName?: string(name='BillAccountName'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        subscriptionType?: string(name='SubscriptionType'),
        bizType?: string(name='BizType'),
        instanceSpec?: string(name='InstanceSpec'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        billingItem?: string(name='BillingItem'),
        region?: string(name='Region'),
        outstandingAmount?: float(name='OutstandingAmount'),
        costUnit?: string(name='CostUnit'),
        listPriceUnit?: string(name='ListPriceUnit'),
        resourceGroup?: string(name='ResourceGroup'),
        pipCode?: string(name='PipCode'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        pretaxAmount?: float(name='PretaxAmount'),
        commodityCode?: string(name='CommodityCode'),
        productName?: string(name='ProductName'),
        nickName?: string(name='NickName'),
        productDetail?: string(name='ProductDetail'),
        usage?: string(name='Usage'),
        intranetIP?: string(name='IntranetIP'),
        ownerID?: string(name='OwnerID'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        usageUnit?: string(name='UsageUnit'),
        billAccountID?: string(name='BillAccountID'),
        paymentAmount?: float(name='PaymentAmount'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage'),
        productType?: string(name='ProductType'),
        servicePeriod?: string(name='ServicePeriod'),
        zone?: string(name='Zone'),
        listPrice?: string(name='ListPrice'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
        billingType?: string(name='BillingType'),
      }
    ](name='Items'),
  }(name='Data'),
}

model DescribeInstanceBillResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceBillResponseBody(name='body'),
}

async function describeInstanceBillWithOptions(request: DescribeInstanceBillRequest, runtime: Util.RuntimeOptions): DescribeInstanceBillResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceBill', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceBill(request: DescribeInstanceBillRequest): DescribeInstanceBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceBillWithOptions(request, runtime);
}

model DescribePricingModuleRequest {
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
}

model DescribePricingModuleResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    moduleList?: {
      module?: [ 
      {
        moduleName?: string(name='ModuleName'),
        priceType?: string(name='PriceType'),
        currency?: string(name='Currency'),
        moduleCode?: string(name='ModuleCode'),
        configList?: {
          configList?: [ string ](name='ConfigList')
        }(name='ConfigList'),
      }
    ](name='Module')
    }(name='ModuleList'),
    attributeList?: {
      attribute?: [ 
      {
        code?: string(name='Code'),
        name?: string(name='Name'),
        unit?: string(name='Unit'),
        values?: {
          attributeValue?: [ 
          {
            type?: string(name='Type'),
            value?: string(name='Value'),
            remark?: string(name='Remark'),
            name?: string(name='Name'),
          }
        ](name='AttributeValue')
        }(name='Values'),
      }
    ](name='Attribute')
    }(name='AttributeList'),
  }(name='Data'),
}

model DescribePricingModuleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePricingModuleResponseBody(name='body'),
}

async function describePricingModuleWithOptions(request: DescribePricingModuleRequest, runtime: Util.RuntimeOptions): DescribePricingModuleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePricingModule', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePricingModule(request: DescribePricingModuleRequest): DescribePricingModuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePricingModuleWithOptions(request, runtime);
}

model DescribeResourceCoverageDetailRequest {
  startPeriod?: string(name='StartPeriod'),
  endPeriod?: string(name='EndPeriod'),
  periodType?: string(name='PeriodType'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  billOwnerId?: long(name='BillOwnerId'),
  resourceType?: string(name='ResourceType'),
}

model DescribeResourceCoverageDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    nextToken?: string(name='NextToken'),
    totalCount?: int32(name='TotalCount'),
    maxResults?: int32(name='MaxResults'),
    items?: [ 
      {
        commodityCode?: string(name='CommodityCode'),
        productName?: string(name='ProductName'),
        totalQuantity?: float(name='TotalQuantity'),
        regionNo?: string(name='RegionNo'),
        userId?: string(name='UserId'),
        commodityName?: string(name='CommodityName'),
        capacityUnit?: string(name='CapacityUnit'),
        instanceId?: string(name='InstanceId'),
        currency?: string(name='Currency'),
        zoneName?: string(name='ZoneName'),
        instanceSpec?: string(name='InstanceSpec'),
        endTime?: string(name='EndTime'),
        startTime?: string(name='StartTime'),
        paymentAmount?: float(name='PaymentAmount'),
        coveragePercentage?: float(name='CoveragePercentage'),
        region?: string(name='Region'),
        deductQuantity?: float(name='DeductQuantity'),
        zone?: string(name='Zone'),
        userName?: string(name='UserName'),
        productCode?: string(name='ProductCode'),
      }
    ](name='Items'),
  }(name='Data'),
}

model DescribeResourceCoverageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceCoverageDetailResponseBody(name='body'),
}

async function describeResourceCoverageDetailWithOptions(request: DescribeResourceCoverageDetailRequest, runtime: Util.RuntimeOptions): DescribeResourceCoverageDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeResourceCoverageDetail', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeResourceCoverageDetail(request: DescribeResourceCoverageDetailRequest): DescribeResourceCoverageDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceCoverageDetailWithOptions(request, runtime);
}

model DescribeResourceCoverageTotalRequest {
  startPeriod?: string(name='StartPeriod'),
  endPeriod?: string(name='EndPeriod'),
  periodType?: string(name='PeriodType'),
  billOwnerId?: long(name='BillOwnerId'),
  resourceType?: string(name='ResourceType'),
}

model DescribeResourceCoverageTotalResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    periodCoverage?: [ 
      {
        coveragePercentage?: float(name='CoveragePercentage'),
        period?: string(name='Period'),
      }
    ](name='PeriodCoverage'),
    totalCoverage?: {
      capacityUnit?: string(name='CapacityUnit'),
      deductQuantity?: float(name='DeductQuantity'),
      coveragePercentage?: float(name='CoveragePercentage'),
      totalQuantity?: float(name='TotalQuantity'),
    }(name='TotalCoverage'),
  }(name='Data'),
}

model DescribeResourceCoverageTotalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceCoverageTotalResponseBody(name='body'),
}

async function describeResourceCoverageTotalWithOptions(request: DescribeResourceCoverageTotalRequest, runtime: Util.RuntimeOptions): DescribeResourceCoverageTotalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeResourceCoverageTotal', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeResourceCoverageTotal(request: DescribeResourceCoverageTotalRequest): DescribeResourceCoverageTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceCoverageTotalWithOptions(request, runtime);
}

model DescribeResourcePackageProductRequest {
  productCode?: string(name='ProductCode'),
}

model DescribeResourcePackageProductResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  orderId?: long(name='OrderId'),
  data?: {
    resourcePackages?: {
      resourcePackage?: [ 
      {
        productType?: string(name='ProductType'),
        name?: string(name='Name'),
        productCode?: string(name='ProductCode'),
        packageTypes?: {
          packageType?: [ 
          {
            code?: string(name='Code'),
            name?: string(name='Name'),
            properties?: {
              property?: [ 
              {
                name?: string(name='Name'),
                value?: string(name='Value'),
              }
            ](name='Property')
            }(name='Properties'),
            specifications?: {
              specification?: [ 
              {
                name?: string(name='Name'),
                value?: string(name='Value'),
                availableDurations?: {
                  availableDuration?: [ 
                  {
                    value?: int32(name='Value'),
                    name?: string(name='Name'),
                    unit?: string(name='Unit'),
                  }
                ](name='AvailableDuration')
                }(name='AvailableDurations'),
              }
            ](name='Specification')
            }(name='Specifications'),
          }
        ](name='PackageType')
        }(name='PackageTypes'),
      }
    ](name='ResourcePackage')
    }(name='ResourcePackages'),
  }(name='Data'),
}

model DescribeResourcePackageProductResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourcePackageProductResponseBody(name='body'),
}

async function describeResourcePackageProductWithOptions(request: DescribeResourcePackageProductRequest, runtime: Util.RuntimeOptions): DescribeResourcePackageProductResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeResourcePackageProduct', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeResourcePackageProduct(request: DescribeResourcePackageProductRequest): DescribeResourcePackageProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePackageProductWithOptions(request, runtime);
}

model DescribeResourceUsageDetailRequest {
  startPeriod?: string(name='StartPeriod'),
  endPeriod?: string(name='EndPeriod'),
  periodType?: string(name='PeriodType'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  billOwnerId?: long(name='BillOwnerId'),
  resourceType?: string(name='ResourceType'),
}

model DescribeResourceUsageDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    nextToken?: string(name='NextToken'),
    totalCount?: int32(name='TotalCount'),
    maxResults?: int32(name='MaxResults'),
    items?: [ 
      {
        status?: string(name='Status'),
        usagePercentage?: float(name='UsagePercentage'),
        resourceInstanceId?: string(name='ResourceInstanceId'),
        totalQuantity?: float(name='TotalQuantity'),
        reservationCost?: string(name='ReservationCost'),
        regionNo?: string(name='RegionNo'),
        userId?: string(name='UserId'),
        statusName?: string(name='StatusName'),
        capacityUnit?: string(name='CapacityUnit'),
        potentialSavedCost?: string(name='PotentialSavedCost'),
        currency?: string(name='Currency'),
        zoneName?: string(name='ZoneName'),
        instanceSpec?: string(name='InstanceSpec'),
        endTime?: string(name='EndTime'),
        postpaidCost?: string(name='PostpaidCost'),
        imageType?: string(name='ImageType'),
        startTime?: string(name='StartTime'),
        region?: string(name='Region'),
        deductQuantity?: float(name='DeductQuantity'),
        savedCost?: string(name='SavedCost'),
        zone?: string(name='Zone'),
        userName?: string(name='UserName'),
        quantity?: long(name='Quantity'),
      }
    ](name='Items'),
  }(name='Data'),
}

model DescribeResourceUsageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceUsageDetailResponseBody(name='body'),
}

async function describeResourceUsageDetailWithOptions(request: DescribeResourceUsageDetailRequest, runtime: Util.RuntimeOptions): DescribeResourceUsageDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeResourceUsageDetail', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeResourceUsageDetail(request: DescribeResourceUsageDetailRequest): DescribeResourceUsageDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceUsageDetailWithOptions(request, runtime);
}

model DescribeResourceUsageTotalRequest {
  startPeriod?: string(name='StartPeriod'),
  endPeriod?: string(name='EndPeriod'),
  periodType?: string(name='PeriodType'),
  billOwnerId?: long(name='BillOwnerId'),
  resourceType?: string(name='ResourceType'),
}

model DescribeResourceUsageTotalResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    periodCoverage?: [ 
      {
        usagePercentage?: float(name='UsagePercentage'),
        period?: string(name='Period'),
      }
    ](name='PeriodCoverage'),
    totalUsage?: {
      postpaidCost?: float(name='PostpaidCost'),
      savedCost?: float(name='SavedCost'),
      usagePercentage?: float(name='UsagePercentage'),
      potentialSavedCost?: float(name='PotentialSavedCost'),
      reservationCost?: float(name='ReservationCost'),
    }(name='TotalUsage'),
  }(name='Data'),
}

model DescribeResourceUsageTotalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeResourceUsageTotalResponseBody(name='body'),
}

async function describeResourceUsageTotalWithOptions(request: DescribeResourceUsageTotalRequest, runtime: Util.RuntimeOptions): DescribeResourceUsageTotalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeResourceUsageTotal', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeResourceUsageTotal(request: DescribeResourceUsageTotalRequest): DescribeResourceUsageTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceUsageTotalWithOptions(request, runtime);
}

model DescribeSavingsPlansCoverageDetailRequest {
  startPeriod?: string(name='StartPeriod'),
  endPeriod?: string(name='EndPeriod'),
  periodType?: string(name='PeriodType'),
  token?: string(name='Token'),
  maxResults?: int32(name='MaxResults'),
  billOwnerId?: long(name='BillOwnerId'),
}

model DescribeSavingsPlansCoverageDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    totalCount?: int32(name='TotalCount'),
    nextToken?: string(name='NextToken'),
    items?: [ 
      {
        userId?: long(name='UserId'),
        instanceId?: string(name='InstanceId'),
        currency?: string(name='Currency'),
        instanceSpec?: string(name='InstanceSpec'),
        postpaidCost?: float(name='PostpaidCost'),
        coveragePercentage?: float(name='CoveragePercentage'),
        region?: string(name='Region'),
        deductAmount?: float(name='DeductAmount'),
        startPeriod?: string(name='StartPeriod'),
        totalAmount?: float(name='TotalAmount'),
        userName?: string(name='UserName'),
        endPeriod?: string(name='EndPeriod'),
      }
    ](name='Items'),
  }(name='Data'),
}

model DescribeSavingsPlansCoverageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSavingsPlansCoverageDetailResponseBody(name='body'),
}

async function describeSavingsPlansCoverageDetailWithOptions(request: DescribeSavingsPlansCoverageDetailRequest, runtime: Util.RuntimeOptions): DescribeSavingsPlansCoverageDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSavingsPlansCoverageDetail', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSavingsPlansCoverageDetail(request: DescribeSavingsPlansCoverageDetailRequest): DescribeSavingsPlansCoverageDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSavingsPlansCoverageDetailWithOptions(request, runtime);
}

model DescribeSavingsPlansCoverageTotalRequest {
  startPeriod?: string(name='StartPeriod'),
  endPeriod?: string(name='EndPeriod'),
  periodType?: string(name='PeriodType'),
  billOwnerId?: long(name='BillOwnerId'),
}

model DescribeSavingsPlansCoverageTotalResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    periodCoverage?: [ 
      {
        percentage?: float(name='Percentage'),
        period?: string(name='Period'),
      }
    ](name='PeriodCoverage'),
    totalCoverage?: {
      coveragePercentage?: float(name='CoveragePercentage'),
      deductAmount?: float(name='DeductAmount'),
    }(name='TotalCoverage'),
  }(name='Data'),
}

model DescribeSavingsPlansCoverageTotalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSavingsPlansCoverageTotalResponseBody(name='body'),
}

async function describeSavingsPlansCoverageTotalWithOptions(request: DescribeSavingsPlansCoverageTotalRequest, runtime: Util.RuntimeOptions): DescribeSavingsPlansCoverageTotalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSavingsPlansCoverageTotal', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSavingsPlansCoverageTotal(request: DescribeSavingsPlansCoverageTotalRequest): DescribeSavingsPlansCoverageTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSavingsPlansCoverageTotalWithOptions(request, runtime);
}

model DescribeSavingsPlansUsageDetailRequest {
  startPeriod?: string(name='StartPeriod'),
  endPeriod?: string(name='EndPeriod'),
  periodType?: string(name='PeriodType'),
  token?: string(name='Token'),
  maxResults?: int32(name='MaxResults'),
  billOwnerId?: long(name='BillOwnerId'),
}

model DescribeSavingsPlansUsageDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    totalCount?: int32(name='TotalCount'),
    nextToken?: string(name='NextToken'),
    items?: [ 
      {
        status?: string(name='Status'),
        type?: string(name='Type'),
        usagePercentage?: float(name='UsagePercentage'),
        userId?: long(name='UserId'),
        instanceId?: string(name='InstanceId'),
        currency?: string(name='Currency'),
        postpaidCost?: float(name='PostpaidCost'),
        deductValue?: float(name='DeductValue'),
        startPeriod?: string(name='StartPeriod'),
        savedCost?: float(name='SavedCost'),
        poolValue?: float(name='PoolValue'),
        userName?: string(name='UserName'),
        endPeriod?: string(name='EndPeriod'),
      }
    ](name='Items'),
  }(name='Data'),
}

model DescribeSavingsPlansUsageDetailResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSavingsPlansUsageDetailResponseBody(name='body'),
}

async function describeSavingsPlansUsageDetailWithOptions(request: DescribeSavingsPlansUsageDetailRequest, runtime: Util.RuntimeOptions): DescribeSavingsPlansUsageDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSavingsPlansUsageDetail', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSavingsPlansUsageDetail(request: DescribeSavingsPlansUsageDetailRequest): DescribeSavingsPlansUsageDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSavingsPlansUsageDetailWithOptions(request, runtime);
}

model DescribeSavingsPlansUsageTotalRequest {
  startPeriod?: string(name='StartPeriod'),
  endPeriod?: string(name='EndPeriod'),
  periodType?: string(name='PeriodType'),
  billOwnerId?: long(name='BillOwnerId'),
}

model DescribeSavingsPlansUsageTotalResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    periodCoverage?: [ 
      {
        percentage?: float(name='Percentage'),
        period?: string(name='Period'),
      }
    ](name='PeriodCoverage'),
    totalUsage?: {
      postpaidCost?: float(name='PostpaidCost'),
      savedCost?: float(name='SavedCost'),
      usagePercentage?: float(name='UsagePercentage'),
      poolValue?: float(name='PoolValue'),
    }(name='TotalUsage'),
  }(name='Data'),
}

model DescribeSavingsPlansUsageTotalResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSavingsPlansUsageTotalResponseBody(name='body'),
}

async function describeSavingsPlansUsageTotalWithOptions(request: DescribeSavingsPlansUsageTotalRequest, runtime: Util.RuntimeOptions): DescribeSavingsPlansUsageTotalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSavingsPlansUsageTotal', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSavingsPlansUsageTotal(request: DescribeSavingsPlansUsageTotalRequest): DescribeSavingsPlansUsageTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSavingsPlansUsageTotalWithOptions(request, runtime);
}

model DescribeSplitItemBillRequest {
  billingCycle?: string(name='BillingCycle'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  ownerId?: long(name='OwnerId'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  billOwnerId?: long(name='BillOwnerId'),
  instanceID?: string(name='InstanceID'),
  splitItemID?: string(name='SplitItemID'),
  granularity?: string(name='Granularity'),
  billingDate?: string(name='BillingDate'),
  tagFilter?: [ 
    {
      tagValues?: [ string ](name='TagValues'),
      tagKey?: string(name='TagKey'),
    }
  ](name='TagFilter'),
}

model DescribeSplitItemBillResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    nextToken?: string(name='NextToken'),
    billingCycle?: string(name='BillingCycle'),
    maxResults?: int32(name='MaxResults'),
    accountID?: string(name='AccountID'),
    totalCount?: int32(name='TotalCount'),
    accountName?: string(name='AccountName'),
    items?: [ 
      {
        splitAccountID?: string(name='SplitAccountID'),
        billAccountName?: string(name='BillAccountName'),
        subscriptionType?: string(name='SubscriptionType'),
        instanceSpec?: string(name='InstanceSpec'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        region?: string(name='Region'),
        outstandingAmount?: float(name='OutstandingAmount'),
        pipCode?: string(name='PipCode'),
        commodityCode?: string(name='CommodityCode'),
        nickName?: string(name='NickName'),
        productDetail?: string(name='ProductDetail'),
        usage?: string(name='Usage'),
        intranetIP?: string(name='IntranetIP'),
        usageUnit?: string(name='UsageUnit'),
        splitCommodityCode?: string(name='SplitCommodityCode'),
        billAccountID?: string(name='BillAccountID'),
        productType?: string(name='ProductType'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage'),
        paymentAmount?: float(name='PaymentAmount'),
        splitBillingCycle?: string(name='SplitBillingCycle'),
        servicePeriod?: string(name='ServicePeriod'),
        splitItemName?: string(name='SplitItemName'),
        listPrice?: string(name='ListPrice'),
        zone?: string(name='Zone'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        instanceConfig?: string(name='InstanceConfig'),
        billingDate?: string(name='BillingDate'),
        internetIP?: string(name='InternetIP'),
        item?: string(name='Item'),
        splitItemID?: string(name='SplitItemID'),
        instanceID?: string(name='InstanceID'),
        tag?: string(name='Tag'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        bizType?: string(name='BizType'),
        billingItem?: string(name='BillingItem'),
        costUnit?: string(name='CostUnit'),
        listPriceUnit?: string(name='ListPriceUnit'),
        resourceGroup?: string(name='ResourceGroup'),
        pretaxAmount?: float(name='PretaxAmount'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        splitBillingDate?: string(name='SplitBillingDate'),
        productName?: string(name='ProductName'),
        splitProductDetail?: string(name='SplitProductDetail'),
        ownerID?: string(name='OwnerID'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        splitAccountName?: string(name='SplitAccountName'),
        billingType?: string(name='BillingType'),
        productCode?: string(name='ProductCode'),
      }
    ](name='Items'),
  }(name='Data'),
}

model DescribeSplitItemBillResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSplitItemBillResponseBody(name='body'),
}

async function describeSplitItemBillWithOptions(request: DescribeSplitItemBillRequest, runtime: Util.RuntimeOptions): DescribeSplitItemBillResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSplitItemBill', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSplitItemBill(request: DescribeSplitItemBillRequest): DescribeSplitItemBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSplitItemBillWithOptions(request, runtime);
}

model EnableBillGenerationRequest {
  productCode?: string(name='ProductCode'),
  ownerId?: long(name='OwnerId'),
}

model EnableBillGenerationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    boolean?: boolean(name='Boolean'),
  }(name='Data'),
}

model EnableBillGenerationResponse = {
  headers: map[string]string(name='headers'),
  body: EnableBillGenerationResponseBody(name='body'),
}

async function enableBillGenerationWithOptions(request: EnableBillGenerationRequest, runtime: Util.RuntimeOptions): EnableBillGenerationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('EnableBillGeneration', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function enableBillGeneration(request: EnableBillGenerationRequest): EnableBillGenerationResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableBillGenerationWithOptions(request, runtime);
}

model GetCustomerAccountInfoRequest {
  ownerId?: long(name='OwnerId'),
}

model GetCustomerAccountInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    mpk?: long(name='Mpk'),
    loginEmail?: string(name='LoginEmail'),
    hostingStatus?: string(name='HostingStatus'),
    accountType?: string(name='AccountType'),
    creditLimitStatus?: string(name='CreditLimitStatus'),
    isCertified?: boolean(name='IsCertified'),
  }(name='Data'),
}

model GetCustomerAccountInfoResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomerAccountInfoResponseBody(name='body'),
}

async function getCustomerAccountInfoWithOptions(request: GetCustomerAccountInfoRequest, runtime: Util.RuntimeOptions): GetCustomerAccountInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetCustomerAccountInfo', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCustomerAccountInfo(request: GetCustomerAccountInfoRequest): GetCustomerAccountInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomerAccountInfoWithOptions(request, runtime);
}

model GetCustomerListResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    uidList?: [ string ](name='UidList'),
  }(name='Data'),
}

model GetCustomerListResponse = {
  headers: map[string]string(name='headers'),
  body: GetCustomerListResponseBody(name='body'),
}

async function getCustomerListWithOptions(runtime: Util.RuntimeOptions): GetCustomerListResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('GetCustomerList', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getCustomerList(): GetCustomerListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomerListWithOptions(runtime);
}

model GetOrderDetailRequest {
  orderId?: string(name='OrderId'),
  ownerId?: long(name='OwnerId'),
}

model GetOrderDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    hostName?: string(name='HostName'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    orderList?: {
      order?: [ 
      {
        orderSubType?: string(name='OrderSubType'),
        createTime?: string(name='CreateTime'),
        currency?: string(name='Currency'),
        config?: string(name='Config'),
        subscriptionType?: string(name='SubscriptionType'),
        usageStartTime?: string(name='UsageStartTime'),
        usageEndTime?: string(name='UsageEndTime'),
        subOrderId?: string(name='SubOrderId'),
        region?: string(name='Region'),
        afterTaxAmount?: string(name='AfterTaxAmount'),
        paymentTime?: string(name='PaymentTime'),
        operator?: string(name='Operator'),
        orderType?: string(name='OrderType'),
        paymentStatus?: string(name='PaymentStatus'),
        quantity?: string(name='Quantity'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal'),
        tax?: string(name='Tax'),
        originalConfig?: string(name='OriginalConfig'),
        pretaxAmount?: string(name='PretaxAmount'),
        commodityCode?: string(name='CommodityCode'),
        relatedOrderId?: string(name='RelatedOrderId'),
        paymentCurrency?: string(name='PaymentCurrency'),
        productType?: string(name='ProductType'),
        instanceIDs?: string(name='InstanceIDs'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount'),
        orderId?: string(name='OrderId'),
        productCode?: string(name='ProductCode'),
      }
    ](name='Order')
    }(name='OrderList'),
  }(name='Data'),
}

model GetOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  body: GetOrderDetailResponseBody(name='body'),
}

async function getOrderDetailWithOptions(request: GetOrderDetailRequest, runtime: Util.RuntimeOptions): GetOrderDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetOrderDetail', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getOrderDetail(request: GetOrderDetailRequest): GetOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOrderDetailWithOptions(request, runtime);
}

model GetPayAsYouGoPriceRequest {
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  region?: string(name='Region'),
  moduleList?: [ 
    {
      moduleCode?: string(name='ModuleCode'),
      priceType?: string(name='PriceType'),
      config?: string(name='Config'),
    }
  ](name='ModuleList'),
}

model GetPayAsYouGoPriceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    currency?: string(name='Currency'),
    moduleDetails?: {
      moduleDetail?: [ 
      {
        costAfterDiscount?: float(name='CostAfterDiscount'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        unitPrice?: float(name='UnitPrice'),
        originalCost?: float(name='OriginalCost'),
        moduleCode?: string(name='ModuleCode'),
      }
    ](name='ModuleDetail')
    }(name='ModuleDetails'),
    promotionDetails?: {
      promotionDetail?: [ 
      {
        promotionDesc?: string(name='PromotionDesc'),
        promotionId?: long(name='PromotionId'),
        promotionName?: string(name='PromotionName'),
      }
    ](name='PromotionDetail')
    }(name='PromotionDetails'),
  }(name='Data'),
}

model GetPayAsYouGoPriceResponse = {
  headers: map[string]string(name='headers'),
  body: GetPayAsYouGoPriceResponseBody(name='body'),
}

async function getPayAsYouGoPriceWithOptions(request: GetPayAsYouGoPriceRequest, runtime: Util.RuntimeOptions): GetPayAsYouGoPriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetPayAsYouGoPrice', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getPayAsYouGoPrice(request: GetPayAsYouGoPriceRequest): GetPayAsYouGoPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPayAsYouGoPriceWithOptions(request, runtime);
}

model GetResourcePackagePriceRequest {
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode'),
  packageType?: string(name='PackageType'),
  effectiveDate?: string(name='EffectiveDate'),
  specification?: string(name='Specification'),
  duration?: int32(name='Duration'),
  pricingCycle?: string(name='PricingCycle'),
  orderType?: string(name='OrderType'),
  instanceId?: string(name='InstanceId'),
}

model GetResourcePackagePriceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    originalPrice?: float(name='OriginalPrice'),
    discountPrice?: float(name='DiscountPrice'),
    currency?: string(name='Currency'),
    tradePrice?: float(name='TradePrice'),
    promotions?: {
      promotion?: [ 
      {
        name?: string(name='Name'),
        id?: long(name='Id'),
      }
    ](name='Promotion')
    }(name='Promotions'),
  }(name='Data'),
}

model GetResourcePackagePriceResponse = {
  headers: map[string]string(name='headers'),
  body: GetResourcePackagePriceResponseBody(name='body'),
}

async function getResourcePackagePriceWithOptions(request: GetResourcePackagePriceRequest, runtime: Util.RuntimeOptions): GetResourcePackagePriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetResourcePackagePrice', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getResourcePackagePrice(request: GetResourcePackagePriceRequest): GetResourcePackagePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourcePackagePriceWithOptions(request, runtime);
}

model GetSubscriptionPriceRequest {
  servicePeriodUnit?: string(name='ServicePeriodUnit'),
  subscriptionType?: string(name='SubscriptionType'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode'),
  orderType?: string(name='OrderType'),
  servicePeriodQuantity?: int32(name='ServicePeriodQuantity'),
  productType?: string(name='ProductType'),
  region?: string(name='Region'),
  instanceId?: string(name='InstanceId'),
  quantity?: int32(name='Quantity'),
  moduleList?: [ 
    {
      moduleStatus?: int32(name='ModuleStatus'),
      moduleCode?: string(name='ModuleCode'),
      tag?: string(name='Tag'),
      config?: string(name='Config'),
    }
  ](name='ModuleList'),
}

model GetSubscriptionPriceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    originalPrice?: float(name='OriginalPrice'),
    discountPrice?: float(name='DiscountPrice'),
    currency?: string(name='Currency'),
    quantity?: int32(name='Quantity'),
    tradePrice?: float(name='TradePrice'),
    moduleDetails?: {
      moduleDetail?: [ 
      {
        costAfterDiscount?: float(name='CostAfterDiscount'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        unitPrice?: float(name='UnitPrice'),
        originalCost?: float(name='OriginalCost'),
        moduleCode?: string(name='ModuleCode'),
      }
    ](name='ModuleDetail')
    }(name='ModuleDetails'),
    promotionDetails?: {
      promotionDetail?: [ 
      {
        promotionDesc?: string(name='PromotionDesc'),
        promotionId?: long(name='PromotionId'),
        promotionName?: string(name='PromotionName'),
      }
    ](name='PromotionDetail')
    }(name='PromotionDetails'),
  }(name='Data'),
}

model GetSubscriptionPriceResponse = {
  headers: map[string]string(name='headers'),
  body: GetSubscriptionPriceResponseBody(name='body'),
}

async function getSubscriptionPriceWithOptions(request: GetSubscriptionPriceRequest, runtime: Util.RuntimeOptions): GetSubscriptionPriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('GetSubscriptionPrice', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function getSubscriptionPrice(request: GetSubscriptionPriceRequest): GetSubscriptionPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSubscriptionPriceWithOptions(request, runtime);
}

model ModifyAccountRelationRequest {
  relationType?: string(name='RelationType'),
  relationOperation?: string(name='RelationOperation'),
  parentUserId?: long(name='ParentUserId'),
  childNick?: string(name='ChildNick'),
  childUserId?: long(name='ChildUserId'),
  requestId?: string(name='RequestId'),
  roleCodes?: [ string ](name='RoleCodes'),
  permissionCodes?: [ string ](name='PermissionCodes'),
}

model ModifyAccountRelationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    hostId?: string(name='HostId'),
  }(name='Data'),
}

model ModifyAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyAccountRelationResponseBody(name='body'),
}

async function modifyAccountRelationWithOptions(request: ModifyAccountRelationRequest, runtime: Util.RuntimeOptions): ModifyAccountRelationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyAccountRelation', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyAccountRelation(request: ModifyAccountRelationRequest): ModifyAccountRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountRelationWithOptions(request, runtime);
}

model ModifyCostUnitRequest {
  unitEntityList?: [ 
    {
      unitId?: long(name='UnitId'),
      newUnitName?: string(name='NewUnitName'),
      ownerUid?: long(name='OwnerUid'),
    }
  ](name='UnitEntityList'),
}

model ModifyCostUnitResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: [ 
    {
      isSuccess?: boolean(name='IsSuccess'),
      unitId?: long(name='UnitId'),
      ownerUid?: long(name='OwnerUid'),
    }
  ](name='Data'),
}

model ModifyCostUnitResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyCostUnitResponseBody(name='body'),
}

async function modifyCostUnitWithOptions(request: ModifyCostUnitRequest, runtime: Util.RuntimeOptions): ModifyCostUnitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyCostUnit', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyCostUnit(request: ModifyCostUnitRequest): ModifyCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCostUnitWithOptions(request, runtime);
}

model ModifyInstanceRequest {
  productCode?: string(name='ProductCode'),
  ownerId?: long(name='OwnerId'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  modifyType?: string(name='ModifyType'),
  instanceId?: string(name='InstanceId'),
  clientToken?: string(name='ClientToken'),
  parameter?: [ 
    {
      value?: string(name='Value'),
      code?: string(name='Code'),
    }
  ](name='Parameter'),
}

model ModifyInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    orderId?: string(name='OrderId'),
    hostId?: string(name='HostId'),
  }(name='Data'),
}

model ModifyInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceResponseBody(name='body'),
}

async function modifyInstanceWithOptions(request: ModifyInstanceRequest, runtime: Util.RuntimeOptions): ModifyInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstance', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceWithOptions(request, runtime);
}

model QueryAccountBalanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    availableAmount?: string(name='AvailableAmount'),
    creditAmount?: string(name='CreditAmount'),
    mybankCreditAmount?: string(name='MybankCreditAmount'),
    currency?: string(name='Currency'),
    availableCashAmount?: string(name='AvailableCashAmount'),
  }(name='Data'),
}

model QueryAccountBalanceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAccountBalanceResponseBody(name='body'),
}

async function queryAccountBalanceWithOptions(runtime: Util.RuntimeOptions): QueryAccountBalanceResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('QueryAccountBalance', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAccountBalance(): QueryAccountBalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountBalanceWithOptions(runtime);
}

model QueryAccountBillRequest {
  billingCycle?: string(name='BillingCycle'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  ownerID?: long(name='OwnerID'),
  isGroupByProduct?: boolean(name='IsGroupByProduct'),
  productCode?: string(name='ProductCode'),
  billOwnerId?: long(name='BillOwnerId'),
  granularity?: string(name='Granularity'),
  billingDate?: string(name='BillingDate'),
}

model QueryAccountBillResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    billingCycle?: string(name='BillingCycle'),
    accountID?: string(name='AccountID'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    accountName?: string(name='AccountName'),
    items?: {
      item?: [ 
      {
        pipCode?: string(name='PipCode'),
        pretaxAmount?: float(name='PretaxAmount'),
        billingDate?: string(name='BillingDate'),
        productName?: string(name='ProductName'),
        ownerName?: string(name='OwnerName'),
        currency?: string(name='Currency'),
        billAccountName?: string(name='BillAccountName'),
        subscriptionType?: string(name='SubscriptionType'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        bizType?: string(name='BizType'),
        ownerID?: string(name='OwnerID'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        billAccountID?: string(name='BillAccountID'),
        paymentAmount?: float(name='PaymentAmount'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        outstandingAmount?: float(name='OutstandingAmount'),
        costUnit?: string(name='CostUnit'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
}

model QueryAccountBillResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAccountBillResponseBody(name='body'),
}

async function queryAccountBillWithOptions(request: QueryAccountBillRequest, runtime: Util.RuntimeOptions): QueryAccountBillResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryAccountBill', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAccountBill(request: QueryAccountBillRequest): QueryAccountBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountBillWithOptions(request, runtime);
}

model QueryAccountTransactionDetailsRequest {
  transactionNumber?: string(name='TransactionNumber'),
  recordID?: string(name='RecordID'),
  transactionChannelSN?: string(name='TransactionChannelSN'),
  createTimeStart?: string(name='CreateTimeStart'),
  createTimeEnd?: string(name='CreateTimeEnd'),
  transactionType?: string(name='TransactionType'),
  transactionChannel?: string(name='TransactionChannel'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
}

model QueryAccountTransactionDetailsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    nextToken?: string(name='NextToken'),
    totalCount?: int32(name='TotalCount'),
    maxResults?: int32(name='MaxResults'),
    accountName?: string(name='AccountName'),
    accountTransactionsList?: {
      accountTransactionsList?: [ 
      {
        billingCycle?: string(name='BillingCycle'),
        transactionChannel?: string(name='TransactionChannel'),
        recordID?: string(name='RecordID'),
        remarks?: string(name='Remarks'),
        amount?: string(name='Amount'),
        transactionAccount?: string(name='TransactionAccount'),
        transactionTime?: string(name='TransactionTime'),
        transactionType?: string(name='TransactionType'),
        transactionFlow?: string(name='TransactionFlow'),
        fundType?: string(name='FundType'),
        transactionChannelSN?: string(name='TransactionChannelSN'),
        transactionNumber?: string(name='TransactionNumber'),
        balance?: string(name='Balance'),
      }
    ](name='AccountTransactionsList')
    }(name='AccountTransactionsList'),
  }(name='Data'),
}

model QueryAccountTransactionDetailsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAccountTransactionDetailsResponseBody(name='body'),
}

async function queryAccountTransactionDetailsWithOptions(request: QueryAccountTransactionDetailsRequest, runtime: Util.RuntimeOptions): QueryAccountTransactionDetailsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryAccountTransactionDetails', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAccountTransactionDetails(request: QueryAccountTransactionDetailsRequest): QueryAccountTransactionDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountTransactionDetailsWithOptions(request, runtime);
}

model QueryAccountTransactionsRequest {
  transactionNumber?: string(name='TransactionNumber'),
  recordID?: string(name='RecordID'),
  transactionChannelSN?: string(name='TransactionChannelSN'),
  createTimeStart?: string(name='CreateTimeStart'),
  createTimeEnd?: string(name='CreateTimeEnd'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model QueryAccountTransactionsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    accountName?: string(name='AccountName'),
    accountTransactionsList?: {
      accountTransactionsList?: [ 
      {
        billingCycle?: string(name='BillingCycle'),
        transactionChannel?: string(name='TransactionChannel'),
        recordID?: string(name='RecordID'),
        remarks?: string(name='Remarks'),
        amount?: string(name='Amount'),
        transactionAccount?: string(name='TransactionAccount'),
        transactionTime?: string(name='TransactionTime'),
        transactionType?: string(name='TransactionType'),
        transactionFlow?: string(name='TransactionFlow'),
        fundType?: string(name='FundType'),
        transactionChannelSN?: string(name='TransactionChannelSN'),
        transactionNumber?: string(name='TransactionNumber'),
        balance?: string(name='Balance'),
      }
    ](name='AccountTransactionsList')
    }(name='AccountTransactionsList'),
  }(name='Data'),
}

model QueryAccountTransactionsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAccountTransactionsResponseBody(name='body'),
}

async function queryAccountTransactionsWithOptions(request: QueryAccountTransactionsRequest, runtime: Util.RuntimeOptions): QueryAccountTransactionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryAccountTransactions', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAccountTransactions(request: QueryAccountTransactionsRequest): QueryAccountTransactionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountTransactionsWithOptions(request, runtime);
}

model QueryAvailableInstancesRequest {
  region?: string(name='Region'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  instanceIDs?: string(name='InstanceIDs'),
  endTimeStart?: string(name='EndTimeStart'),
  endTimeEnd?: string(name='EndTimeEnd'),
  createTimeStart?: string(name='CreateTimeStart'),
  createTimeEnd?: string(name='CreateTimeEnd'),
  renewStatus?: string(name='RenewStatus'),
}

model QueryAvailableInstancesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    instanceList?: [ 
      {
        subStatus?: string(name='SubStatus'),
        status?: string(name='Status'),
        expectedReleaseTime?: string(name='ExpectedReleaseTime'),
        renewStatus?: string(name='RenewStatus'),
        createTime?: string(name='CreateTime'),
        sellerId?: long(name='SellerId'),
        instanceID?: string(name='InstanceID'),
        seller?: string(name='Seller'),
        stopTime?: string(name='StopTime'),
        renewalDurationUnit?: string(name='RenewalDurationUnit'),
        subscriptionType?: string(name='SubscriptionType'),
        ownerId?: long(name='OwnerId'),
        endTime?: string(name='EndTime'),
        productType?: string(name='ProductType'),
        region?: string(name='Region'),
        releaseTime?: string(name='ReleaseTime'),
        renewalDuration?: int32(name='RenewalDuration'),
        productCode?: string(name='ProductCode'),
      }
    ](name='InstanceList'),
  }(name='Data'),
}

model QueryAvailableInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryAvailableInstancesResponseBody(name='body'),
}

async function queryAvailableInstancesWithOptions(request: QueryAvailableInstancesRequest, runtime: Util.RuntimeOptions): QueryAvailableInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryAvailableInstances', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryAvailableInstances(request: QueryAvailableInstancesRequest): QueryAvailableInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAvailableInstancesWithOptions(request, runtime);
}

model QueryBillRequest {
  billingCycle?: string(name='BillingCycle'),
  type?: string(name='Type'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge'),
  isDisplayLocalCurrency?: boolean(name='IsDisplayLocalCurrency'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  billOwnerId?: long(name='BillOwnerId'),
}

model QueryBillResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    billingCycle?: string(name='BillingCycle'),
    accountID?: string(name='AccountID'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    accountName?: string(name='AccountName'),
    items?: {
      item?: [ 
      {
        status?: string(name='Status'),
        roundDownDiscount?: string(name='RoundDownDiscount'),
        item?: string(name='Item'),
        currency?: string(name='Currency'),
        usageStartTime?: string(name='UsageStartTime'),
        subscriptionType?: string(name='SubscriptionType'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        usageEndTime?: string(name='UsageEndTime'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        subOrderId?: string(name='SubOrderId'),
        outstandingAmount?: float(name='OutstandingAmount'),
        afterTaxAmount?: float(name='AfterTaxAmount'),
        paymentTime?: string(name='PaymentTime'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal'),
        tax?: float(name='Tax'),
        pipCode?: string(name='PipCode'),
        paymentTransactionID?: string(name='PaymentTransactionID'),
        pretaxAmount?: float(name='PretaxAmount'),
        commodityCode?: string(name='CommodityCode'),
        productName?: string(name='ProductName'),
        recordID?: string(name='RecordID'),
        productDetail?: string(name='ProductDetail'),
        paymentCurrency?: string(name='PaymentCurrency'),
        ownerID?: string(name='OwnerID'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        productType?: string(name='ProductType'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        paymentAmount?: float(name='PaymentAmount'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
}

model QueryBillResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBillResponseBody(name='body'),
}

async function queryBillWithOptions(request: QueryBillRequest, runtime: Util.RuntimeOptions): QueryBillResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryBill', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryBill(request: QueryBillRequest): QueryBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBillWithOptions(request, runtime);
}

model QueryBillOverviewRequest {
  billingCycle?: string(name='BillingCycle'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  billOwnerId?: long(name='BillOwnerId'),
}

model QueryBillOverviewResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    billingCycle?: string(name='BillingCycle'),
    accountID?: string(name='AccountID'),
    accountName?: string(name='AccountName'),
    items?: {
      item?: [ 
      {
        roundDownDiscount?: string(name='RoundDownDiscount'),
        item?: string(name='Item'),
        currency?: string(name='Currency'),
        subscriptionType?: string(name='SubscriptionType'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        billAccountName?: string(name='BillAccountName'),
        bizType?: string(name='BizType'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        outstandingAmount?: float(name='OutstandingAmount'),
        afterTaxAmount?: float(name='AfterTaxAmount'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal'),
        tax?: float(name='Tax'),
        pipCode?: string(name='PipCode'),
        pretaxAmount?: float(name='PretaxAmount'),
        productName?: string(name='ProductName'),
        commodityCode?: string(name='CommodityCode'),
        productDetail?: string(name='ProductDetail'),
        paymentCurrency?: string(name='PaymentCurrency'),
        ownerID?: string(name='OwnerID'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        productType?: string(name='ProductType'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        paymentAmount?: float(name='PaymentAmount'),
        billAccountID?: string(name='BillAccountID'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
}

model QueryBillOverviewResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBillOverviewResponseBody(name='body'),
}

async function queryBillOverviewWithOptions(request: QueryBillOverviewRequest, runtime: Util.RuntimeOptions): QueryBillOverviewResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryBillOverview', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryBillOverview(request: QueryBillOverviewRequest): QueryBillOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBillOverviewWithOptions(request, runtime);
}

model QueryBillToOSSSubscriptionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    accountName?: string(name='AccountName'),
    accountID?: string(name='AccountID'),
    items?: {
      item?: [ 
      {
        bucketOwnerId?: long(name='BucketOwnerId'),
        subscribeType?: string(name='SubscribeType'),
        subscribeBucket?: string(name='SubscribeBucket'),
        subscribeTime?: string(name='SubscribeTime'),
        subscribeLanguage?: string(name='SubscribeLanguage'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
}

model QueryBillToOSSSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryBillToOSSSubscriptionResponseBody(name='body'),
}

async function queryBillToOSSSubscriptionWithOptions(runtime: Util.RuntimeOptions): QueryBillToOSSSubscriptionResponse {
  var req = new OpenApi.OpenApiRequest{};
  return doRPCRequest('QueryBillToOSSSubscription', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryBillToOSSSubscription(): QueryBillToOSSSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBillToOSSSubscriptionWithOptions(runtime);
}

model QueryCashCouponsRequest {
  expiryTimeEnd?: string(name='ExpiryTimeEnd'),
  expiryTimeStart?: string(name='ExpiryTimeStart'),
  effectiveOrNot?: boolean(name='EffectiveOrNot'),
}

model QueryCashCouponsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    cashCoupon?: [ 
    {
      status?: string(name='Status'),
      expiryTime?: string(name='ExpiryTime'),
      grantedTime?: string(name='GrantedTime'),
      nominalValue?: string(name='NominalValue'),
      effectiveTime?: string(name='EffectiveTime'),
      applicableScenarios?: string(name='ApplicableScenarios'),
      cashCouponId?: long(name='CashCouponId'),
      applicableProducts?: string(name='ApplicableProducts'),
      cashCouponNo?: string(name='CashCouponNo'),
      balance?: string(name='Balance'),
    }
  ](name='CashCoupon')
  }(name='Data'),
}

model QueryCashCouponsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCashCouponsResponseBody(name='body'),
}

async function queryCashCouponsWithOptions(request: QueryCashCouponsRequest, runtime: Util.RuntimeOptions): QueryCashCouponsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryCashCoupons', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryCashCoupons(request: QueryCashCouponsRequest): QueryCashCouponsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCashCouponsWithOptions(request, runtime);
}

model QueryCostUnitRequest {
  ownerUid?: long(name='OwnerUid'),
  parentUnitId?: long(name='ParentUnitId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model QueryCostUnitResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    costUnitDtoList?: [ 
      {
        parentUnitId?: long(name='ParentUnitId'),
        unitName?: string(name='UnitName'),
        unitId?: long(name='UnitId'),
        ownerUid?: long(name='OwnerUid'),
      }
    ](name='CostUnitDtoList'),
  }(name='Data'),
}

model QueryCostUnitResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCostUnitResponseBody(name='body'),
}

async function queryCostUnitWithOptions(request: QueryCostUnitRequest, runtime: Util.RuntimeOptions): QueryCostUnitResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryCostUnit', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryCostUnit(request: QueryCostUnitRequest): QueryCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCostUnitWithOptions(request, runtime);
}

model QueryCostUnitResourceRequest {
  ownerUid?: long(name='OwnerUid'),
  unitId?: long(name='UnitId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model QueryCostUnitResourceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    resourceInstanceDtoList?: [ 
      {
        commodityCode?: string(name='CommodityCode'),
        resourceUserName?: string(name='ResourceUserName'),
        commodityName?: string(name='CommodityName'),
        resourceUserId?: long(name='ResourceUserId'),
        apportionName?: string(name='ApportionName'),
        apportionCode?: string(name='ApportionCode'),
        resourceType?: string(name='ResourceType'),
        resourceNick?: string(name='ResourceNick'),
        resourceTag?: string(name='ResourceTag'),
        resourceId?: string(name='ResourceId'),
        resourceGroup?: string(name='ResourceGroup'),
        relatedResources?: string(name='RelatedResources'),
        resourceStatus?: string(name='ResourceStatus'),
      }
    ](name='ResourceInstanceDtoList'),
    costUnit?: {
      parentUnitId?: long(name='ParentUnitId'),
      unitName?: string(name='UnitName'),
      unitId?: long(name='UnitId'),
      ownerUid?: long(name='OwnerUid'),
    }(name='CostUnit'),
    costUnitStatisInfo?: {
      totalResourceCount?: long(name='TotalResourceCount'),
      resourceCount?: long(name='ResourceCount'),
      totalUserCount?: long(name='TotalUserCount'),
      subUnitCount?: long(name='SubUnitCount'),
      resourceGroupCount?: long(name='ResourceGroupCount'),
      totalResourceGroupCount?: long(name='TotalResourceGroupCount'),
      userCount?: long(name='UserCount'),
    }(name='CostUnitStatisInfo'),
  }(name='Data'),
}

model QueryCostUnitResourceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCostUnitResourceResponseBody(name='body'),
}

async function queryCostUnitResourceWithOptions(request: QueryCostUnitResourceRequest, runtime: Util.RuntimeOptions): QueryCostUnitResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryCostUnitResource', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryCostUnitResource(request: QueryCostUnitResourceRequest): QueryCostUnitResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCostUnitResourceWithOptions(request, runtime);
}

model QueryCustomerAddressListRequest {
  ownerId?: long(name='OwnerId'),
}

model QueryCustomerAddressListResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    customerInvoiceAddressList?: {
      customerInvoiceAddress?: [ 
      {
        addressee?: string(name='Addressee'),
        postalCode?: string(name='PostalCode'),
        userId?: long(name='UserId'),
        city?: string(name='City'),
        userNick?: string(name='UserNick'),
        street?: string(name='Street'),
        phone?: string(name='Phone'),
        county?: string(name='County'),
        bizType?: string(name='BizType'),
        deliveryAddress?: string(name='DeliveryAddress'),
        id?: long(name='Id'),
        province?: string(name='Province'),
      }
    ](name='CustomerInvoiceAddress')
    }(name='CustomerInvoiceAddressList'),
  }(name='Data'),
}

model QueryCustomerAddressListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryCustomerAddressListResponseBody(name='body'),
}

async function queryCustomerAddressListWithOptions(request: QueryCustomerAddressListRequest, runtime: Util.RuntimeOptions): QueryCustomerAddressListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryCustomerAddressList', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryCustomerAddressList(request: QueryCustomerAddressListRequest): QueryCustomerAddressListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCustomerAddressListWithOptions(request, runtime);
}

model QueryDPUtilizationDetailRequest {
  instanceId?: string(name='InstanceId'),
  instanceSpec?: string(name='InstanceSpec'),
  commodityCode?: string(name='CommodityCode'),
  deductedInstanceId?: string(name='DeductedInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  lastToken?: string(name='LastToken'),
  limit?: int32(name='Limit'),
  includeShare?: boolean(name='IncludeShare'),
  prodCode?: string(name='ProdCode'),
}

model QueryDPUtilizationDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    nextToken?: string(name='NextToken'),
    detailList?: {
      detailList?: [ 
      {
        deductedInstanceId?: string(name='DeductedInstanceId'),
        instanceId?: string(name='InstanceId'),
        deductHours?: float(name='DeductHours'),
        shareUid?: long(name='ShareUid'),
        deductDate?: string(name='DeductDate'),
        instanceSpec?: string(name='InstanceSpec'),
        deductedCommodityCode?: string(name='DeductedCommodityCode'),
        deductedProductDetail?: string(name='DeductedProductDetail'),
        deductMeasure?: float(name='DeductMeasure'),
        region?: string(name='Region'),
        deductQuantity?: float(name='DeductQuantity'),
        deductFactorTotal?: float(name='DeductFactorTotal'),
        resCode?: string(name='ResCode'),
        uid?: long(name='Uid'),
      }
    ](name='DetailList')
    }(name='DetailList'),
  }(name='Data'),
}

model QueryDPUtilizationDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryDPUtilizationDetailResponseBody(name='body'),
}

async function queryDPUtilizationDetailWithOptions(request: QueryDPUtilizationDetailRequest, runtime: Util.RuntimeOptions): QueryDPUtilizationDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryDPUtilizationDetail', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryDPUtilizationDetail(request: QueryDPUtilizationDetailRequest): QueryDPUtilizationDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDPUtilizationDetailWithOptions(request, runtime);
}

model QueryEvaluateListRequest {
  type?: int32(name='Type'),
  outBizId?: string(name='OutBizId'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  startAmount?: long(name='StartAmount'),
  endAmount?: long(name='EndAmount'),
  startBizTime?: string(name='StartBizTime'),
  endBizTime?: string(name='EndBizTime'),
  sortType?: int32(name='SortType'),
  startSearchTime?: string(name='StartSearchTime'),
  endSearchTime?: string(name='EndSearchTime'),
  billCycle?: string(name='BillCycle'),
  bizTypeList?: [ string ](name='BizTypeList'),
}

model QueryEvaluateListResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    totalUnAppliedInvoiceAmount?: long(name='TotalUnAppliedInvoiceAmount'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    totalInvoiceAmount?: long(name='TotalInvoiceAmount'),
    hostId?: string(name='HostId'),
    evaluateList?: {
      evaluate?: [ 
      {
        type?: int32(name='Type'),
        status?: int32(name='Status'),
        billId?: long(name='BillId'),
        userId?: long(name='UserId'),
        billCycle?: string(name='BillCycle'),
        canInvoiceAmount?: long(name='CanInvoiceAmount'),
        offsetAcceptAmount?: long(name='OffsetAcceptAmount'),
        itemId?: long(name='ItemId'),
        outBizId?: string(name='OutBizId'),
        userNick?: string(name='UserNick'),
        gmtModified?: string(name='GmtModified'),
        opId?: string(name='OpId'),
        bizType?: string(name='BizType'),
        originalAmount?: long(name='OriginalAmount'),
        invoicedAmount?: long(name='InvoicedAmount'),
        gmtCreate?: string(name='GmtCreate'),
        presentAmount?: long(name='PresentAmount'),
        bizTime?: string(name='BizTime'),
        name?: string(name='Name'),
        offsetCostAmount?: long(name='OffsetCostAmount'),
        id?: long(name='Id'),
      }
    ](name='Evaluate')
    }(name='EvaluateList'),
  }(name='Data'),
}

model QueryEvaluateListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryEvaluateListResponseBody(name='body'),
}

async function queryEvaluateListWithOptions(request: QueryEvaluateListRequest, runtime: Util.RuntimeOptions): QueryEvaluateListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryEvaluateList', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryEvaluateList(request: QueryEvaluateListRequest): QueryEvaluateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEvaluateListWithOptions(request, runtime);
}

model QueryFinancialAccountInfoRequest {
  userId?: long(name='UserId'),
}

model QueryFinancialAccountInfoResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    memberNickName?: string(name='MemberNickName'),
    isFinancialAccount?: boolean(name='IsFinancialAccount'),
    memberGroupName?: string(name='MemberGroupName'),
    userName?: string(name='UserName'),
    accountType?: string(name='AccountType'),
    memberGroupId?: long(name='MemberGroupId'),
  }(name='Data'),
}

model QueryFinancialAccountInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryFinancialAccountInfoResponseBody(name='body'),
}

async function queryFinancialAccountInfoWithOptions(request: QueryFinancialAccountInfoRequest, runtime: Util.RuntimeOptions): QueryFinancialAccountInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryFinancialAccountInfo', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryFinancialAccountInfo(request: QueryFinancialAccountInfoRequest): QueryFinancialAccountInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFinancialAccountInfoWithOptions(request, runtime);
}

model QueryInstanceBillRequest {
  billingCycle?: string(name='BillingCycle'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  ownerId?: long(name='OwnerId'),
  isBillingItem?: boolean(name='IsBillingItem'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge'),
  billingDate?: string(name='BillingDate'),
  granularity?: string(name='Granularity'),
  billOwnerId?: long(name='BillOwnerId'),
}

model QueryInstanceBillResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    billingCycle?: string(name='BillingCycle'),
    accountID?: string(name='AccountID'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    accountName?: string(name='AccountName'),
    items?: {
      item?: [ 
      {
        billingDate?: string(name='BillingDate'),
        instanceConfig?: string(name='InstanceConfig'),
        internetIP?: string(name='InternetIP'),
        item?: string(name='Item'),
        tag?: string(name='Tag'),
        instanceID?: string(name='InstanceID'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        subscriptionType?: string(name='SubscriptionType'),
        instanceSpec?: string(name='InstanceSpec'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        billingItem?: string(name='BillingItem'),
        region?: string(name='Region'),
        outstandingAmount?: float(name='OutstandingAmount'),
        costUnit?: string(name='CostUnit'),
        listPriceUnit?: string(name='ListPriceUnit'),
        resourceGroup?: string(name='ResourceGroup'),
        pipCode?: string(name='PipCode'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        pretaxAmount?: float(name='PretaxAmount'),
        commodityCode?: string(name='CommodityCode'),
        productName?: string(name='ProductName'),
        nickName?: string(name='NickName'),
        productDetail?: string(name='ProductDetail'),
        usage?: string(name='Usage'),
        intranetIP?: string(name='IntranetIP'),
        ownerID?: string(name='OwnerID'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        usageUnit?: string(name='UsageUnit'),
        paymentAmount?: float(name='PaymentAmount'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage'),
        productType?: string(name='ProductType'),
        servicePeriod?: string(name='ServicePeriod'),
        zone?: string(name='Zone'),
        listPrice?: string(name='ListPrice'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
        billingType?: string(name='BillingType'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
}

model QueryInstanceBillResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInstanceBillResponseBody(name='body'),
}

async function queryInstanceBillWithOptions(request: QueryInstanceBillRequest, runtime: Util.RuntimeOptions): QueryInstanceBillResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryInstanceBill', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryInstanceBill(request: QueryInstanceBillRequest): QueryInstanceBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInstanceBillWithOptions(request, runtime);
}

model QueryInstanceByTagRequest {
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model QueryInstanceByTagResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  nextToken?: string(name='NextToken'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  tagResource?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tag?: [ 
        {
          key?: string(name='Key'),
          value?: string(name='Value'),
        }
      ](name='Tag'),
    }
  ](name='TagResource'),
}

model QueryInstanceByTagResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInstanceByTagResponseBody(name='body'),
}

async function queryInstanceByTagWithOptions(request: QueryInstanceByTagRequest, runtime: Util.RuntimeOptions): QueryInstanceByTagResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryInstanceByTag', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryInstanceByTag(request: QueryInstanceByTagRequest): QueryInstanceByTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInstanceByTagWithOptions(request, runtime);
}

model QueryInstanceGaapCostRequest {
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  billingCycle?: string(name='BillingCycle'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
}

model QueryInstanceGaapCostResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    hostId?: string(name='HostId'),
    modules?: {
      module?: [ 
      {
        gaapDeductedByCashCoupons?: string(name='GaapDeductedByCashCoupons'),
        subscriptionType?: string(name='SubscriptionType'),
        monthGaapPretaxAmount?: string(name='MonthGaapPretaxAmount'),
        deductedByCoupons?: string(name='DeductedByCoupons'),
        subOrderId?: string(name='SubOrderId'),
        region?: string(name='Region'),
        orderType?: string(name='OrderType'),
        monthGaapDeductedByPrepaidCard?: string(name='MonthGaapDeductedByPrepaidCard'),
        unallocatedDeductedByCashCoupons?: string(name='UnallocatedDeductedByCashCoupons'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal'),
        billingCycle?: string(name='BillingCycle'),
        payerAccount?: string(name='PayerAccount'),
        monthGaapPretaxAmountLocal?: string(name='MonthGaapPretaxAmountLocal'),
        accountingUnit?: string(name='AccountingUnit'),
        gaapPretaxAmountLocal?: string(name='GaapPretaxAmountLocal'),
        unallocatedDeductedByPrepaidCard?: string(name='UnallocatedDeductedByPrepaidCard'),
        productType?: string(name='ProductType'),
        paymentAmount?: string(name='PaymentAmount'),
        monthGaapPretaxGrossAmount?: string(name='MonthGaapPretaxGrossAmount'),
        billType?: string(name='BillType'),
        payTime?: string(name='PayTime'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount'),
        orderId?: string(name='OrderId'),
        unallocatedPricingDiscount?: string(name='UnallocatedPricingDiscount'),
        monthGaapDeductedByCashCoupons?: string(name='MonthGaapDeductedByCashCoupons'),
        unallocatedPretaxGrossAmount?: string(name='UnallocatedPretaxGrossAmount'),
        instanceID?: string(name='InstanceID'),
        tag?: string(name='Tag'),
        currency?: string(name='Currency'),
        gaapDeductedByCoupons?: string(name='GaapDeductedByCoupons'),
        deductedByCashCoupons?: string(name='DeductedByCashCoupons'),
        gaapDeductedByPrepaidCard?: string(name='GaapDeductedByPrepaidCard'),
        gaapPaymentAmount?: string(name='GaapPaymentAmount'),
        unallocatedPretaxAmountLocal?: string(name='UnallocatedPretaxAmountLocal'),
        monthGaapPricingDiscount?: string(name='MonthGaapPricingDiscount'),
        pricingDiscount?: string(name='PricingDiscount'),
        gaapPricingDiscount?: string(name='GaapPricingDiscount'),
        resourceGroup?: string(name='ResourceGroup'),
        unallocatedDeductedByCoupons?: string(name='UnallocatedDeductedByCoupons'),
        pretaxAmount?: string(name='PretaxAmount'),
        unallocatedPretaxAmount?: string(name='UnallocatedPretaxAmount'),
        gaapPretaxGrossAmount?: string(name='GaapPretaxGrossAmount'),
        unallocatedPaymentAmount?: string(name='UnallocatedPaymentAmount'),
        paymentCurrency?: string(name='PaymentCurrency'),
        ownerID?: string(name='OwnerID'),
        deductedByPrepaidCard?: string(name='DeductedByPrepaidCard'),
        gaapPretaxAmount?: string(name='GaapPretaxAmount'),
        monthGaapDeductedByCoupons?: string(name='MonthGaapDeductedByCoupons'),
        monthGaapPaymentAmount?: string(name='MonthGaapPaymentAmount'),
        usageEndDate?: string(name='UsageEndDate'),
        usageStartDate?: string(name='UsageStartDate'),
        productCode?: string(name='ProductCode'),
      }
    ](name='Module')
    }(name='Modules'),
  }(name='Data'),
}

model QueryInstanceGaapCostResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInstanceGaapCostResponseBody(name='body'),
}

async function queryInstanceGaapCostWithOptions(request: QueryInstanceGaapCostRequest, runtime: Util.RuntimeOptions): QueryInstanceGaapCostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryInstanceGaapCost', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryInstanceGaapCost(request: QueryInstanceGaapCostRequest): QueryInstanceGaapCostResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInstanceGaapCostWithOptions(request, runtime);
}

model QueryInvoicingCustomerListRequest {
  ownerId?: long(name='OwnerId'),
}

model QueryInvoicingCustomerListResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    customerInvoiceList?: {
      customerInvoice?: [ 
      {
        type?: long(name='Type'),
        status?: long(name='Status'),
        adjustType?: long(name='AdjustType'),
        bank?: string(name='Bank'),
        startCycle?: long(name='StartCycle'),
        titleChangeInstructions?: string(name='TitleChangeInstructions'),
        userId?: long(name='UserId'),
        operatingLicenseAddress?: string(name='OperatingLicenseAddress'),
        invoiceTitle?: string(name='InvoiceTitle'),
        userNick?: string(name='UserNick'),
        operatingLicensePhone?: string(name='OperatingLicensePhone'),
        endCycle?: long(name='EndCycle'),
        defaultRemark?: string(name='DefaultRemark'),
        taxationLicense?: string(name='TaxationLicense'),
        registerNo?: string(name='RegisterNo'),
        gmtCreate?: string(name='GmtCreate'),
        taxpayerType?: long(name='TaxpayerType'),
        customerType?: long(name='CustomerType'),
        issueType?: long(name='IssueType'),
        id?: long(name='Id'),
        bankNo?: string(name='BankNo'),
      }
    ](name='CustomerInvoice')
    }(name='CustomerInvoiceList'),
  }(name='Data'),
}

model QueryInvoicingCustomerListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryInvoicingCustomerListResponseBody(name='body'),
}

async function queryInvoicingCustomerListWithOptions(request: QueryInvoicingCustomerListRequest, runtime: Util.RuntimeOptions): QueryInvoicingCustomerListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryInvoicingCustomerList', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryInvoicingCustomerList(request: QueryInvoicingCustomerListRequest): QueryInvoicingCustomerListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInvoicingCustomerListWithOptions(request, runtime);
}

model QueryMonthlyBillRequest {
  billingCycle?: string(name='BillingCycle'),
}

model QueryMonthlyBillResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    outstandingAmount?: float(name='OutstandingAmount'),
    billingCycle?: string(name='BillingCycle'),
    totalOutstandingAmount?: float(name='TotalOutstandingAmount'),
    newInvoiceAmount?: float(name='NewInvoiceAmount'),
    items?: {
      item?: [ 
      {
        pretaxAmount?: float(name='PretaxAmount'),
        solutionCode?: string(name='SolutionCode'),
        item?: string(name='Item'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        subscriptionType?: string(name='SubscriptionType'),
        paymentCurrency?: string(name='PaymentCurrency'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        paymentAmount?: float(name='PaymentAmount'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        productType?: string(name='ProductType'),
        outstandingAmount?: float(name='OutstandingAmount'),
        afterTaxAmount?: float(name='AfterTaxAmount'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        solutionName?: string(name='SolutionName'),
        tax?: float(name='Tax'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal'),
        productCode?: string(name='ProductCode'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
}

model QueryMonthlyBillResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMonthlyBillResponseBody(name='body'),
}

async function queryMonthlyBillWithOptions(request: QueryMonthlyBillRequest, runtime: Util.RuntimeOptions): QueryMonthlyBillResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryMonthlyBill', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryMonthlyBill(request: QueryMonthlyBillRequest): QueryMonthlyBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMonthlyBillWithOptions(request, runtime);
}

model QueryMonthlyInstanceConsumptionRequest {
  productCode?: string(name='ProductCode'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  billingCycle?: string(name='BillingCycle'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
}

model QueryMonthlyInstanceConsumptionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    billingCycle?: string(name='BillingCycle'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    items?: {
      item?: [ 
      {
        pretaxAmount?: float(name='PretaxAmount'),
        discountAmount?: float(name='DiscountAmount'),
        payerAccount?: string(name='PayerAccount'),
        tag?: string(name='Tag'),
        instanceID?: string(name='InstanceID'),
        currency?: string(name='Currency'),
        subscriptionType?: string(name='SubscriptionType'),
        paymentCurrency?: string(name='PaymentCurrency'),
        ownerID?: string(name='OwnerID'),
        productType?: string(name='ProductType'),
        region?: string(name='Region'),
        afterTaxAmount?: float(name='AfterTaxAmount'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        resourceGroup?: string(name='ResourceGroup'),
        tax?: float(name='Tax'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal'),
        productCode?: string(name='ProductCode'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
}

model QueryMonthlyInstanceConsumptionResponse = {
  headers: map[string]string(name='headers'),
  body: QueryMonthlyInstanceConsumptionResponseBody(name='body'),
}

async function queryMonthlyInstanceConsumptionWithOptions(request: QueryMonthlyInstanceConsumptionRequest, runtime: Util.RuntimeOptions): QueryMonthlyInstanceConsumptionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryMonthlyInstanceConsumption', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryMonthlyInstanceConsumption(request: QueryMonthlyInstanceConsumptionRequest): QueryMonthlyInstanceConsumptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryMonthlyInstanceConsumptionWithOptions(request, runtime);
}

model QueryOrdersRequest {
  createTimeEnd?: string(name='CreateTimeEnd'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  orderType?: string(name='OrderType'),
  paymentStatus?: string(name='PaymentStatus'),
  createTimeStart?: string(name='CreateTimeStart'),
  ownerId?: long(name='OwnerId'),
}

model QueryOrdersResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    hostName?: string(name='HostName'),
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    orderList?: {
      order?: [ 
      {
        pretaxAmount?: string(name='PretaxAmount'),
        commodityCode?: string(name='CommodityCode'),
        relatedOrderId?: string(name='RelatedOrderId'),
        createTime?: string(name='CreateTime'),
        currency?: string(name='Currency'),
        subscriptionType?: string(name='SubscriptionType'),
        paymentCurrency?: string(name='PaymentCurrency'),
        productType?: string(name='ProductType'),
        afterTaxAmount?: string(name='AfterTaxAmount'),
        paymentTime?: string(name='PaymentTime'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount'),
        orderType?: string(name='OrderType'),
        paymentStatus?: string(name='PaymentStatus'),
        orderId?: string(name='OrderId'),
        tax?: string(name='Tax'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal'),
        productCode?: string(name='ProductCode'),
      }
    ](name='Order')
    }(name='OrderList'),
  }(name='Data'),
}

model QueryOrdersResponse = {
  headers: map[string]string(name='headers'),
  body: QueryOrdersResponseBody(name='body'),
}

async function queryOrdersWithOptions(request: QueryOrdersRequest, runtime: Util.RuntimeOptions): QueryOrdersResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryOrders', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryOrders(request: QueryOrdersRequest): QueryOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrdersWithOptions(request, runtime);
}

model QueryPermissionListRequest {
  relationId?: long(name='RelationId'),
}

model QueryPermissionListResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    endTime?: string(name='EndTime'),
    relationType?: string(name='RelationType'),
    startTime?: string(name='StartTime'),
    state?: string(name='State'),
    masterId?: long(name='MasterId'),
    memberId?: long(name='MemberId'),
    setupTime?: string(name='SetupTime'),
    permissionList?: [ 
      {
        endTime?: string(name='EndTime'),
        startTime?: string(name='StartTime'),
        permissionCode?: string(name='PermissionCode'),
        permissionName?: string(name='PermissionName'),
      }
    ](name='PermissionList'),
  }(name='Data'),
}

model QueryPermissionListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPermissionListResponseBody(name='body'),
}

async function queryPermissionListWithOptions(request: QueryPermissionListRequest, runtime: Util.RuntimeOptions): QueryPermissionListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryPermissionList', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryPermissionList(request: QueryPermissionListRequest): QueryPermissionListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPermissionListWithOptions(request, runtime);
}

model QueryPrepaidCardsRequest {
  expiryTimeEnd?: string(name='ExpiryTimeEnd'),
  expiryTimeStart?: string(name='ExpiryTimeStart'),
  effectiveOrNot?: boolean(name='EffectiveOrNot'),
}

model QueryPrepaidCardsResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    prepaidCard?: [ 
    {
      status?: string(name='Status'),
      expiryTime?: string(name='ExpiryTime'),
      grantedTime?: string(name='GrantedTime'),
      nominalValue?: string(name='NominalValue'),
      effectiveTime?: string(name='EffectiveTime'),
      prepaidCardNo?: string(name='PrepaidCardNo'),
      applicableScenarios?: string(name='ApplicableScenarios'),
      prepaidCardId?: long(name='PrepaidCardId'),
      applicableProducts?: string(name='ApplicableProducts'),
      balance?: string(name='Balance'),
    }
  ](name='PrepaidCard')
  }(name='Data'),
}

model QueryPrepaidCardsResponse = {
  headers: map[string]string(name='headers'),
  body: QueryPrepaidCardsResponseBody(name='body'),
}

async function queryPrepaidCardsWithOptions(request: QueryPrepaidCardsRequest, runtime: Util.RuntimeOptions): QueryPrepaidCardsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryPrepaidCards', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryPrepaidCards(request: QueryPrepaidCardsRequest): QueryPrepaidCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPrepaidCardsWithOptions(request, runtime);
}

model QueryProductListRequest {
  queryTotalCount?: boolean(name='QueryTotalCount'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model QueryProductListResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    productList?: {
      product?: [ 
      {
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType'),
        subscriptionType?: string(name='SubscriptionType'),
        productCode?: string(name='ProductCode'),
      }
    ](name='Product')
    }(name='ProductList'),
  }(name='Data'),
}

model QueryProductListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryProductListResponseBody(name='body'),
}

async function queryProductListWithOptions(request: QueryProductListRequest, runtime: Util.RuntimeOptions): QueryProductListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryProductList', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryProductList(request: QueryProductListRequest): QueryProductListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductListWithOptions(request, runtime);
}

model QueryRedeemRequest {
  expiryTimeStart?: string(name='ExpiryTimeStart'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd'),
  effectiveOrNot?: boolean(name='EffectiveOrNot'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model QueryRedeemResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
    redeem?: {
      redeem?: [ 
      {
        expiryTime?: string(name='ExpiryTime'),
        grantedTime?: string(name='GrantedTime'),
        status?: string(name='Status'),
        specification?: string(name='Specification'),
        nominalValue?: string(name='NominalValue'),
        effectiveTime?: string(name='EffectiveTime'),
        redeemId?: string(name='RedeemId'),
        redeemNo?: string(name='RedeemNo'),
        applicableProducts?: string(name='ApplicableProducts'),
        balance?: string(name='Balance'),
      }
    ](name='Redeem')
    }(name='Redeem'),
  }(name='Data'),
}

model QueryRedeemResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRedeemResponseBody(name='body'),
}

async function queryRedeemWithOptions(request: QueryRedeemRequest, runtime: Util.RuntimeOptions): QueryRedeemResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('QueryRedeem', '2017-12-14', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function queryRedeem(request: QueryRedeemRequest): QueryRedeemResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRedeemWithOptions(request, runtime);
}

model QueryRelationListRequest {
  userId?: long(name='UserId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  statusList?: [ string ](name='StatusList'),
}

model QueryRelationListResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    financialRelationInfoList?: [ 
      {
        endTime?: string(name='EndTime'),
        relationType?: string(name='RelationType'),
        accountNickName?: string(name='AccountNickName'),
        startTime?: string(name='StartTime'),
        state?: string(name='State'),
        accountId?: long(name='AccountId'),
        setupTime?: string(name='SetupTime'),
        accountType?: string(name='AccountType'),
        accountName?: string(name='AccountName'),
        relationId?: long(name='RelationId'),
      }
    ](name='FinancialRelationInfoList'),
  }(name='Data'),
}

model QueryRelationListResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRelationListResponseBody(name='body'),
}

async function queryRelationListWithOptions(request: QueryRelationListRequest, runtime: Util.RuntimeOptions): QueryRelationListResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryRelationList', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryRelationList(request: QueryRelationListRequest): QueryRelationListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRelationListWithOptions(request, runtime);
}

model QueryResellerAvailableQuotaRequest {
  ownerId?: long(name='OwnerId'),
  itemCodes?: string(name='ItemCodes'),
}

model QueryResellerAvailableQuotaResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model QueryResellerAvailableQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: QueryResellerAvailableQuotaResponseBody(name='body'),
}

async function queryResellerAvailableQuotaWithOptions(request: QueryResellerAvailableQuotaRequest, runtime: Util.RuntimeOptions): QueryResellerAvailableQuotaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryResellerAvailableQuota', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryResellerAvailableQuota(request: QueryResellerAvailableQuotaRequest): QueryResellerAvailableQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryResellerAvailableQuotaWithOptions(request, runtime);
}

model QueryResourcePackageInstancesRequest {
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode'),
  expiryTimeStart?: string(name='ExpiryTimeStart'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model QueryResourcePackageInstancesResponseBody = {
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  code?: string(name='Code'),
  message?: string(name='Message'),
  pageSize?: int32(name='PageSize'),
  total?: int32(name='Total'),
  page?: int32(name='Page'),
  data?: {
    pageNum?: string(name='PageNum'),
    pageSize?: string(name='PageSize'),
    totalCount?: string(name='TotalCount'),
    hostId?: string(name='HostId'),
    instances?: {
      instance?: [ 
      {
        expiryTime?: string(name='ExpiryTime'),
        status?: string(name='Status'),
        remark?: string(name='Remark'),
        remainingAmountUnit?: string(name='RemainingAmountUnit'),
        instanceId?: string(name='InstanceId'),
        packageType?: string(name='PackageType'),
        effectiveTime?: string(name='EffectiveTime'),
        region?: string(name='Region'),
        totalAmount?: string(name='TotalAmount'),
        deductType?: string(name='DeductType'),
        totalAmountUnit?: string(name='TotalAmountUnit'),
        remainingAmount?: string(name='RemainingAmount'),
        applicableProducts?: {
          product?: [ string ](name='Product')
        }(name='ApplicableProducts'),
      }
    ](name='Instance')
    }(name='Instances'),
  }(name='Data'),
}

model QueryResourcePackageInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: QueryResourcePackageInstancesResponseBody(name='body'),
}

async function queryResourcePackageInstancesWithOptions(request: QueryResourcePackageInstancesRequest, runtime: Util.RuntimeOptions): QueryResourcePackageInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryResourcePackageInstances', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryResourcePackageInstances(request: QueryResourcePackageInstancesRequest): QueryResourcePackageInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryResourcePackageInstancesWithOptions(request, runtime);
}

model QueryRIUtilizationDetailRequest {
  RIInstanceId?: string(name='RIInstanceId'),
  instanceSpec?: string(name='InstanceSpec'),
  RICommodityCode?: string(name='RICommodityCode'),
  deductedInstanceId?: string(name='DeductedInstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
}

model QueryRIUtilizationDetailResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: long(name='PageNum'),
    pageSize?: long(name='PageSize'),
    totalCount?: long(name='TotalCount'),
    detailList?: {
      detailList?: [ 
      {
        deductedCommodityCode?: string(name='DeductedCommodityCode'),
        deductedProductDetail?: string(name='DeductedProductDetail'),
        deductedInstanceId?: string(name='DeductedInstanceId'),
        deductFactorTotal?: float(name='DeductFactorTotal'),
        deductQuantity?: float(name='DeductQuantity'),
        deductHours?: string(name='DeductHours'),
        deductDate?: string(name='DeductDate'),
        RIInstanceId?: string(name='RIInstanceId'),
        instanceSpec?: string(name='InstanceSpec'),
      }
    ](name='DetailList')
    }(name='DetailList'),
  }(name='Data'),
}

model QueryRIUtilizationDetailResponse = {
  headers: map[string]string(name='headers'),
  body: QueryRIUtilizationDetailResponseBody(name='body'),
}

async function queryRIUtilizationDetailWithOptions(request: QueryRIUtilizationDetailRequest, runtime: Util.RuntimeOptions): QueryRIUtilizationDetailResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryRIUtilizationDetail', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryRIUtilizationDetail(request: QueryRIUtilizationDetailRequest): QueryRIUtilizationDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRIUtilizationDetailWithOptions(request, runtime);
}

model QuerySavingsPlansDeductLogRequest {
  instanceType?: string(name='InstanceType'),
  pageSize?: int32(name='PageSize'),
  locale?: string(name='Locale'),
  pageNum?: int32(name='PageNum'),
  instanceId?: string(name='InstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model QuerySavingsPlansDeductLogResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    items?: [ 
      {
        endTime?: string(name='EndTime'),
        startTime?: string(name='StartTime'),
        savingsType?: string(name='SavingsType'),
        userId?: long(name='UserId'),
        discountRate?: string(name='DiscountRate'),
        billModule?: string(name='BillModule'),
        instanceId?: string(name='InstanceId'),
        deductInstanceId?: string(name='DeductInstanceId'),
        deductCommodity?: string(name='DeductCommodity'),
        deductRate?: string(name='DeductRate'),
        deductFee?: string(name='DeductFee'),
      }
    ](name='Items'),
  }(name='Data'),
}

model QuerySavingsPlansDeductLogResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySavingsPlansDeductLogResponseBody(name='body'),
}

async function querySavingsPlansDeductLogWithOptions(request: QuerySavingsPlansDeductLogRequest, runtime: Util.RuntimeOptions): QuerySavingsPlansDeductLogResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySavingsPlansDeductLog', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySavingsPlansDeductLog(request: QuerySavingsPlansDeductLogRequest): QuerySavingsPlansDeductLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySavingsPlansDeductLogWithOptions(request, runtime);
}

model QuerySavingsPlansInstanceRequest {
  pageSize?: int32(name='PageSize'),
  locale?: string(name='Locale'),
  pageNum?: int32(name='PageNum'),
  instanceId?: string(name='InstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model QuerySavingsPlansInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    items?: [ 
      {
        status?: string(name='Status'),
        savingsType?: string(name='SavingsType'),
        utilization?: string(name='Utilization'),
        prepayFee?: string(name='PrepayFee'),
        instanceId?: string(name='InstanceId'),
        currency?: string(name='Currency'),
        endTime?: string(name='EndTime'),
        startTime?: string(name='StartTime'),
        allocationStatus?: string(name='AllocationStatus'),
        instanceFamily?: string(name='InstanceFamily'),
        region?: string(name='Region'),
        totalSave?: string(name='TotalSave'),
        poolValue?: string(name='PoolValue'),
        payMode?: string(name='PayMode'),
        tags?: [ 
          {
            key?: string(name='Key'),
            value?: string(name='Value'),
          }
        ](name='Tags'),
      }
    ](name='Items'),
  }(name='Data'),
}

model QuerySavingsPlansInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySavingsPlansInstanceResponseBody(name='body'),
}

async function querySavingsPlansInstanceWithOptions(request: QuerySavingsPlansInstanceRequest, runtime: Util.RuntimeOptions): QuerySavingsPlansInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySavingsPlansInstance', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySavingsPlansInstance(request: QuerySavingsPlansInstanceRequest): QuerySavingsPlansInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySavingsPlansInstanceWithOptions(request, runtime);
}

model QuerySettleBillRequest {
  billingCycle?: string(name='BillingCycle'),
  type?: string(name='Type'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge'),
  isDisplayLocalCurrency?: boolean(name='IsDisplayLocalCurrency'),
  ownerId?: long(name='OwnerId'),
  nextToken?: string(name='NextToken'),
  maxResults?: int32(name='MaxResults'),
  billOwnerId?: long(name='BillOwnerId'),
  recordID?: string(name='RecordID'),
}

model QuerySettleBillResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    nextToken?: string(name='NextToken'),
    billingCycle?: string(name='BillingCycle'),
    maxResults?: int32(name='MaxResults'),
    accountID?: string(name='AccountID'),
    totalCount?: int32(name='TotalCount'),
    accountName?: string(name='AccountName'),
    items?: {
      item?: [ 
      {
        status?: string(name='Status'),
        roundDownDiscount?: string(name='RoundDownDiscount'),
        item?: string(name='Item'),
        currency?: string(name='Currency'),
        billAccountName?: string(name='BillAccountName'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        subscriptionType?: string(name='SubscriptionType'),
        usageStartTime?: string(name='UsageStartTime'),
        bizType?: string(name='BizType'),
        usageEndTime?: string(name='UsageEndTime'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        subOrderId?: string(name='SubOrderId'),
        afterTaxAmount?: float(name='AfterTaxAmount'),
        outstandingAmount?: float(name='OutstandingAmount'),
        paymentTime?: string(name='PaymentTime'),
        tax?: float(name='Tax'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal'),
        pipCode?: string(name='PipCode'),
        paymentTransactionID?: string(name='PaymentTransactionID'),
        pretaxAmount?: float(name='PretaxAmount'),
        commodityCode?: string(name='CommodityCode'),
        productName?: string(name='ProductName'),
        recordID?: string(name='RecordID'),
        productDetail?: string(name='ProductDetail'),
        paymentCurrency?: string(name='PaymentCurrency'),
        ownerID?: string(name='OwnerID'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        billAccountID?: string(name='BillAccountID'),
        paymentAmount?: float(name='PaymentAmount'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        productType?: string(name='ProductType'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        productCode?: string(name='ProductCode'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
}

model QuerySettleBillResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySettleBillResponseBody(name='body'),
}

async function querySettleBillWithOptions(request: QuerySettleBillRequest, runtime: Util.RuntimeOptions): QuerySettleBillResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySettleBill', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySettleBill(request: QuerySettleBillRequest): QuerySettleBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySettleBillWithOptions(request, runtime);
}

model QuerySettlementBillRequest {
  pageSize?: int32(name='PageSize'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  billingCycle?: string(name='BillingCycle'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  type?: string(name='Type'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge'),
}

model QuerySettlementBillResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    billingCycle?: string(name='BillingCycle'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    items?: {
      item?: [ 
      {
        status?: string(name='Status'),
        invoiceNo?: string(name='InvoiceNo'),
        billID?: string(name='BillID'),
        createTime?: string(name='CreateTime'),
        item?: string(name='Item'),
        seller?: string(name='Seller'),
        currency?: string(name='Currency'),
        chargeDiscount?: float(name='ChargeDiscount'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        config?: string(name='Config'),
        subscriptionType?: string(name='SubscriptionType'),
        usageStartTime?: string(name='UsageStartTime'),
        usageEndTime?: string(name='UsageEndTime'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        region?: string(name='Region'),
        outstandingAmount?: float(name='OutstandingAmount'),
        afterTaxAmount?: float(name='AfterTaxAmount'),
        paymentTime?: string(name='PaymentTime'),
        solutionID?: string(name='SolutionID'),
        orderType?: string(name='OrderType'),
        clearedTime?: string(name='ClearedTime'),
        quantity?: string(name='Quantity'),
        tax?: float(name='Tax'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal'),
        pretaxAmount?: float(name='PretaxAmount'),
        linkedCustomerOrderID?: string(name='LinkedCustomerOrderID'),
        accountDiscount?: float(name='AccountDiscount'),
        recordID?: string(name='RecordID'),
        payerAccount?: string(name='PayerAccount'),
        promotion?: string(name='Promotion'),
        originalOrderID?: string(name='OriginalOrderID'),
        previousBillingCycleBalance?: float(name='PreviousBillingCycleBalance'),
        mybankPaymentAmount?: float(name='MybankPaymentAmount'),
        paymentCurrency?: string(name='PaymentCurrency'),
        orderID?: string(name='OrderID'),
        ownerID?: string(name='OwnerID'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        paymentAmount?: float(name='PaymentAmount'),
        productType?: string(name='ProductType'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        suborderID?: string(name='SuborderID'),
        solutionName?: string(name='SolutionName'),
        productCode?: string(name='ProductCode'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
}

model QuerySettlementBillResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySettlementBillResponseBody(name='body'),
}

async function querySettlementBillWithOptions(request: QuerySettlementBillRequest, runtime: Util.RuntimeOptions): QuerySettlementBillResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySettlementBill', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySettlementBill(request: QuerySettlementBillRequest): QuerySettlementBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySettlementBillWithOptions(request, runtime);
}

model QuerySplitItemBillRequest {
  billingCycle?: string(name='BillingCycle'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum'),
  pageSize?: int32(name='PageSize'),
  billOwnerId?: long(name='BillOwnerId'),
}

model QuerySplitItemBillResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    pageNum?: int32(name='PageNum'),
    billingCycle?: string(name='BillingCycle'),
    accountID?: string(name='AccountID'),
    pageSize?: int32(name='PageSize'),
    totalCount?: int32(name='TotalCount'),
    accountName?: string(name='AccountName'),
    items?: {
      item?: [ 
      {
        billingDate?: string(name='BillingDate'),
        instanceConfig?: string(name='InstanceConfig'),
        internetIP?: string(name='InternetIP'),
        splitItemID?: string(name='SplitItemID'),
        item?: string(name='Item'),
        splitAccountID?: string(name='SplitAccountID'),
        tag?: string(name='Tag'),
        instanceID?: string(name='InstanceID'),
        currency?: string(name='Currency'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons'),
        subscriptionType?: string(name='SubscriptionType'),
        instanceSpec?: string(name='InstanceSpec'),
        deductedByCoupons?: float(name='DeductedByCoupons'),
        billingItem?: string(name='BillingItem'),
        region?: string(name='Region'),
        outstandingAmount?: float(name='OutstandingAmount'),
        costUnit?: string(name='CostUnit'),
        listPriceUnit?: string(name='ListPriceUnit'),
        resourceGroup?: string(name='ResourceGroup'),
        pipCode?: string(name='PipCode'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        pretaxAmount?: float(name='PretaxAmount'),
        commodityCode?: string(name='CommodityCode'),
        productName?: string(name='ProductName'),
        splitProductDetail?: string(name='SplitProductDetail'),
        nickName?: string(name='NickName'),
        productDetail?: string(name='ProductDetail'),
        usage?: string(name='Usage'),
        intranetIP?: string(name='IntranetIP'),
        ownerID?: string(name='OwnerID'),
        splitCommodityCode?: string(name='SplitCommodityCode'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard'),
        usageUnit?: string(name='UsageUnit'),
        paymentAmount?: float(name='PaymentAmount'),
        invoiceDiscount?: float(name='InvoiceDiscount'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage'),
        productType?: string(name='ProductType'),
        splitBillingCycle?: string(name='SplitBillingCycle'),
        servicePeriod?: string(name='ServicePeriod'),
        splitItemName?: string(name='SplitItemName'),
        zone?: string(name='Zone'),
        listPrice?: string(name='ListPrice'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount'),
        splitAccountName?: string(name='SplitAccountName'),
        productCode?: string(name='ProductCode'),
        billingType?: string(name='BillingType'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
}

model QuerySplitItemBillResponse = {
  headers: map[string]string(name='headers'),
  body: QuerySplitItemBillResponseBody(name='body'),
}

async function querySplitItemBillWithOptions(request: QuerySplitItemBillRequest, runtime: Util.RuntimeOptions): QuerySplitItemBillResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QuerySplitItemBill', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function querySplitItemBill(request: QuerySplitItemBillRequest): QuerySplitItemBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySplitItemBillWithOptions(request, runtime);
}

model QueryUserOmsDataRequest {
  ownerId?: long(name='OwnerId'),
  table?: string(name='Table'),
  dataType?: string(name='DataType'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  marker?: string(name='Marker'),
  pageSize?: int32(name='PageSize'),
}

model QueryUserOmsDataResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    marker?: string(name='Marker'),
    hostId?: string(name='HostId'),
    omsData?: [  map[string]any ](name='OmsData'),
  }(name='Data'),
}

model QueryUserOmsDataResponse = {
  headers: map[string]string(name='headers'),
  body: QueryUserOmsDataResponseBody(name='body'),
}

async function queryUserOmsDataWithOptions(request: QueryUserOmsDataRequest, runtime: Util.RuntimeOptions): QueryUserOmsDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryUserOmsData', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryUserOmsData(request: QueryUserOmsDataRequest): QueryUserOmsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUserOmsDataWithOptions(request, runtime);
}

model RelieveAccountRelationRequest {
  relationType?: string(name='RelationType'),
  parentUserId?: long(name='ParentUserId'),
  childUserId?: long(name='ChildUserId'),
  requestId?: string(name='RequestId'),
}

model RelieveAccountRelationResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    hostId?: string(name='HostId'),
  }(name='Data'),
}

model RelieveAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  body: RelieveAccountRelationResponseBody(name='body'),
}

async function relieveAccountRelationWithOptions(request: RelieveAccountRelationRequest, runtime: Util.RuntimeOptions): RelieveAccountRelationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RelieveAccountRelation', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function relieveAccountRelation(request: RelieveAccountRelationRequest): RelieveAccountRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return relieveAccountRelationWithOptions(request, runtime);
}

model RenewInstanceRequest {
  productCode?: string(name='ProductCode'),
  instanceId?: string(name='InstanceId'),
  renewPeriod?: int32(name='RenewPeriod'),
  clientToken?: string(name='ClientToken'),
  productType?: string(name='ProductType'),
  ownerId?: long(name='OwnerId'),
}

model RenewInstanceResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  data?: {
    orderId?: string(name='OrderId'),
  }(name='Data'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewInstance', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model RenewResourcePackageRequest {
  ownerId?: long(name='OwnerId'),
  instanceId?: string(name='InstanceId'),
  effectiveDate?: string(name='EffectiveDate'),
  duration?: int32(name='Duration'),
  pricingCycle?: string(name='PricingCycle'),
}

model RenewResourcePackageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  orderId?: long(name='OrderId'),
  data?: {
    orderId?: long(name='OrderId'),
    instanceId?: string(name='InstanceId'),
  }(name='Data'),
}

model RenewResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: RenewResourcePackageResponseBody(name='body'),
}

async function renewResourcePackageWithOptions(request: RenewResourcePackageRequest, runtime: Util.RuntimeOptions): RenewResourcePackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RenewResourcePackage', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function renewResourcePackage(request: RenewResourcePackageRequest): RenewResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewResourcePackageWithOptions(request, runtime);
}

model SaveUserCreditRequest {
  avoidExpiration?: boolean(name='AvoidExpiration'),
  avoidPrepaidNotification?: boolean(name='AvoidPrepaidNotification'),
  description?: string(name='Description'),
  avoidNotification?: boolean(name='AvoidNotification'),
  creditValue?: string(name='CreditValue'),
  avoidPrepaidExpiration?: boolean(name='AvoidPrepaidExpiration'),
  operator?: string(name='Operator'),
  creditType?: string(name='CreditType'),
}

model SaveUserCreditResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SaveUserCreditResponse = {
  headers: map[string]string(name='headers'),
  body: SaveUserCreditResponseBody(name='body'),
}

async function saveUserCreditWithOptions(request: SaveUserCreditRequest, runtime: Util.RuntimeOptions): SaveUserCreditResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SaveUserCredit', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function saveUserCredit(request: SaveUserCreditRequest): SaveUserCreditResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveUserCreditWithOptions(request, runtime);
}

model SetAllExpirationDayRequest {
  ownerId?: long(name='OwnerId'),
  unifyExpireDay?: string(name='UnifyExpireDay'),
}

model SetAllExpirationDayResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetAllExpirationDayResponse = {
  headers: map[string]string(name='headers'),
  body: SetAllExpirationDayResponseBody(name='body'),
}

async function setAllExpirationDayWithOptions(request: SetAllExpirationDayRequest, runtime: Util.RuntimeOptions): SetAllExpirationDayResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetAllExpirationDay', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setAllExpirationDay(request: SetAllExpirationDayRequest): SetAllExpirationDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAllExpirationDayWithOptions(request, runtime);
}

model SetCreditLabelActionRequest {
  actionType?: string(name='ActionType'),
  uid?: string(name='Uid'),
  clearCycle?: string(name='ClearCycle'),
  creditAmount?: string(name='CreditAmount'),
  currencyCode?: string(name='CurrencyCode'),
  dailyCycle?: string(name='DailyCycle'),
  description?: string(name='Description'),
  isNeedAddSettleLabel?: string(name='IsNeedAddSettleLabel'),
  isNeedAdjustCreditAccount?: string(name='IsNeedAdjustCreditAccount'),
  isNeedSaveNotifyRule?: string(name='IsNeedSaveNotifyRule'),
  isNeedSetCreditAmount?: string(name='IsNeedSetCreditAmount'),
  needNotice?: boolean(name='NeedNotice'),
  newCreateMode?: boolean(name='NewCreateMode'),
  operator?: string(name='Operator'),
  requestId?: string(name='RequestId'),
  siteCode?: string(name='SiteCode'),
  source?: string(name='Source'),
}

model SetCreditLabelActionResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetCreditLabelActionResponse = {
  headers: map[string]string(name='headers'),
  body: SetCreditLabelActionResponseBody(name='body'),
}

async function setCreditLabelActionWithOptions(request: SetCreditLabelActionRequest, runtime: Util.RuntimeOptions): SetCreditLabelActionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetCreditLabelAction', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setCreditLabelAction(request: SetCreditLabelActionRequest): SetCreditLabelActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCreditLabelActionWithOptions(request, runtime);
}

model SetRenewalRequest {
  renewalPeriod?: int32(name='RenewalPeriod'),
  instanceIDs?: string(name='InstanceIDs'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode'),
  productType?: string(name='ProductType'),
  subscriptionType?: string(name='SubscriptionType'),
  renewalPeriodUnit?: string(name='RenewalPeriodUnit'),
  renewalStatus?: string(name='RenewalStatus'),
}

model SetRenewalResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetRenewalResponse = {
  headers: map[string]string(name='headers'),
  body: SetRenewalResponseBody(name='body'),
}

async function setRenewalWithOptions(request: SetRenewalRequest, runtime: Util.RuntimeOptions): SetRenewalResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetRenewal', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setRenewal(request: SetRenewalRequest): SetRenewalResponse {
  var runtime = new Util.RuntimeOptions{};
  return setRenewalWithOptions(request, runtime);
}

model SetResellerUserAlarmThresholdRequest {
  ownerId?: long(name='OwnerId'),
  alarmType?: string(name='AlarmType'),
  alarmThresholds?: string(name='AlarmThresholds'),
}

model SetResellerUserAlarmThresholdResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetResellerUserAlarmThresholdResponse = {
  headers: map[string]string(name='headers'),
  body: SetResellerUserAlarmThresholdResponseBody(name='body'),
}

async function setResellerUserAlarmThresholdWithOptions(request: SetResellerUserAlarmThresholdRequest, runtime: Util.RuntimeOptions): SetResellerUserAlarmThresholdResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetResellerUserAlarmThreshold', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setResellerUserAlarmThreshold(request: SetResellerUserAlarmThresholdRequest): SetResellerUserAlarmThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return setResellerUserAlarmThresholdWithOptions(request, runtime);
}

model SetResellerUserQuotaRequest {
  ownerId?: long(name='OwnerId'),
  amount?: string(name='Amount'),
  currency?: string(name='Currency'),
  outBizId?: string(name='OutBizId'),
}

model SetResellerUserQuotaResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetResellerUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: SetResellerUserQuotaResponseBody(name='body'),
}

async function setResellerUserQuotaWithOptions(request: SetResellerUserQuotaRequest, runtime: Util.RuntimeOptions): SetResellerUserQuotaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetResellerUserQuota', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setResellerUserQuota(request: SetResellerUserQuotaRequest): SetResellerUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return setResellerUserQuotaWithOptions(request, runtime);
}

model SetResellerUserStatusRequest {
  ownerId?: string(name='OwnerId'),
  status?: string(name='Status'),
  businessType?: string(name='BusinessType'),
}

model SetResellerUserStatusResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SetResellerUserStatusResponse = {
  headers: map[string]string(name='headers'),
  body: SetResellerUserStatusResponseBody(name='body'),
}

async function setResellerUserStatusWithOptions(request: SetResellerUserStatusRequest, runtime: Util.RuntimeOptions): SetResellerUserStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SetResellerUserStatus', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function setResellerUserStatus(request: SetResellerUserStatusRequest): SetResellerUserStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setResellerUserStatusWithOptions(request, runtime);
}

model SubscribeBillToOSSRequest {
  subscribeBucket?: string(name='SubscribeBucket'),
  subscribeType?: string(name='SubscribeType'),
  multAccountRelSubscribe?: string(name='MultAccountRelSubscribe'),
  bucketOwnerId?: long(name='BucketOwnerId'),
  beginBillingCycle?: string(name='BeginBillingCycle'),
}

model SubscribeBillToOSSResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model SubscribeBillToOSSResponse = {
  headers: map[string]string(name='headers'),
  body: SubscribeBillToOSSResponseBody(name='body'),
}

async function subscribeBillToOSSWithOptions(request: SubscribeBillToOSSRequest, runtime: Util.RuntimeOptions): SubscribeBillToOSSResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SubscribeBillToOSS', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function subscribeBillToOSS(request: SubscribeBillToOSSRequest): SubscribeBillToOSSResponse {
  var runtime = new Util.RuntimeOptions{};
  return subscribeBillToOSSWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceType?: string(name='ResourceType'),
  resourceId?: [ string ](name='ResourceId'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('TagResources', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnsubscribeBillToOSSRequest {
  subscribeType?: string(name='SubscribeType'),
  multAccountRelSubscribe?: string(name='MultAccountRelSubscribe'),
}

model UnsubscribeBillToOSSResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UnsubscribeBillToOSSResponse = {
  headers: map[string]string(name='headers'),
  body: UnsubscribeBillToOSSResponseBody(name='body'),
}

async function unsubscribeBillToOSSWithOptions(request: UnsubscribeBillToOSSRequest, runtime: Util.RuntimeOptions): UnsubscribeBillToOSSResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnsubscribeBillToOSS', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unsubscribeBillToOSS(request: UnsubscribeBillToOSSRequest): UnsubscribeBillToOSSResponse {
  var runtime = new Util.RuntimeOptions{};
  return unsubscribeBillToOSSWithOptions(request, runtime);
}

model UntagResourcesRequest {
  resourceType?: string(name='ResourceType'),
  all?: boolean(name='All'),
  resourceId?: [ string ](name='ResourceId'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  data?: boolean(name='Data'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UntagResources', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpgradeResourcePackageRequest {
  ownerId?: long(name='OwnerId'),
  instanceId?: string(name='InstanceId'),
  effectiveDate?: string(name='EffectiveDate'),
  specification?: string(name='Specification'),
}

model UpgradeResourcePackageResponseBody = {
  code?: string(name='Code'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success'),
  orderId?: long(name='OrderId'),
  data?: {
    orderId?: long(name='OrderId'),
    instanceId?: string(name='InstanceId'),
  }(name='Data'),
}

model UpgradeResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeResourcePackageResponseBody(name='body'),
}

async function upgradeResourcePackageWithOptions(request: UpgradeResourcePackageRequest, runtime: Util.RuntimeOptions): UpgradeResourcePackageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeResourcePackage', '2017-12-14', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeResourcePackage(request: UpgradeResourcePackageRequest): UpgradeResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeResourcePackageWithOptions(request, runtime);
}

