/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = 'regional';
  @endpointMap = {
    cn-hangzhou = 'business.aliyuncs.com',
    cn-shanghai = 'business.aliyuncs.com',
    ap-southeast-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-northeast-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-northeast-2 = 'business.ap-southeast-1.aliyuncs.com',
    ap-northeast-2-pop = 'business.ap-southeast-1.aliyuncs.com',
    ap-south-1 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-2 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-3 = 'business.ap-southeast-1.aliyuncs.com',
    ap-southeast-5 = 'business.ap-southeast-1.aliyuncs.com',
    cn-beijing = 'business.aliyuncs.com',
    cn-beijing-finance-1 = 'business.aliyuncs.com',
    cn-beijing-finance-pop = 'business.aliyuncs.com',
    cn-beijing-gov-1 = 'business.aliyuncs.com',
    cn-beijing-nu16-b01 = 'business.aliyuncs.com',
    cn-chengdu = 'business.aliyuncs.com',
    cn-edge-1 = 'business.aliyuncs.com',
    cn-fujian = 'business.aliyuncs.com',
    cn-haidian-cm12-c01 = 'business.aliyuncs.com',
    cn-hangzhou-bj-b01 = 'business.aliyuncs.com',
    cn-hangzhou-finance = 'business.aliyuncs.com',
    cn-hangzhou-internal-prod-1 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-1 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-2 = 'business.aliyuncs.com',
    cn-hangzhou-internal-test-3 = 'business.aliyuncs.com',
    cn-hangzhou-test-306 = 'business.aliyuncs.com',
    cn-hongkong = 'business.aliyuncs.com',
    cn-hongkong-finance-pop = 'business.aliyuncs.com',
    cn-huhehaote = 'business.aliyuncs.com',
    cn-huhehaote-nebula-1 = 'business.aliyuncs.com',
    cn-north-2-gov-1 = 'business.aliyuncs.com',
    cn-qingdao = 'business.aliyuncs.com',
    cn-qingdao-nebula = 'business.aliyuncs.com',
    cn-shanghai-et15-b01 = 'business.aliyuncs.com',
    cn-shanghai-et2-b01 = 'business.aliyuncs.com',
    cn-shanghai-finance-1 = 'business.aliyuncs.com',
    cn-shanghai-inner = 'business.aliyuncs.com',
    cn-shanghai-internal-test-1 = 'business.aliyuncs.com',
    cn-shenzhen = 'business.aliyuncs.com',
    cn-shenzhen-finance-1 = 'business.aliyuncs.com',
    cn-shenzhen-inner = 'business.aliyuncs.com',
    cn-shenzhen-st4-d01 = 'business.aliyuncs.com',
    cn-shenzhen-su18-b01 = 'business.aliyuncs.com',
    cn-wuhan = 'business.aliyuncs.com',
    cn-wulanchabu = 'business.aliyuncs.com',
    cn-yushanfang = 'business.aliyuncs.com',
    cn-zhangbei = 'business.aliyuncs.com',
    cn-zhangbei-na61-b01 = 'business.aliyuncs.com',
    cn-zhangjiakou = 'business.aliyuncs.com',
    cn-zhangjiakou-na62-a01 = 'business.aliyuncs.com',
    cn-zhengzhou-nebula-1 = 'business.aliyuncs.com',
    eu-central-1 = 'business.ap-southeast-1.aliyuncs.com',
    eu-west-1 = 'business.ap-southeast-1.aliyuncs.com',
    eu-west-1-oxs = 'business.ap-southeast-1.aliyuncs.com',
    me-east-1 = 'business.ap-southeast-1.aliyuncs.com',
    rus-west-1-pop = 'business.ap-southeast-1.aliyuncs.com',
    us-east-1 = 'business.ap-southeast-1.aliyuncs.com',
    us-west-1 = 'business.ap-southeast-1.aliyuncs.com',
  };

  checkConfig(config);
  @endpoint = getEndpoint('bssopenapi', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model AddAccountRelationRequest {
  childNick?: string(name='ChildNick'),
  childUserId?: long(name='ChildUserId', example='1512996702208737'),
  parentUserId?: long(name='ParentUserId', example='1738376485192612'),
  permissionCodes?: [ string ](name='PermissionCodes', example='CHECK_TARGET_CONSUMPTION'),
  relationType?: string(name='RelationType', example='enterprise_group'),
  requestId?: string(name='RequestId', example='32324242444'),
  roleCodes?: [ string ](name='RoleCodes', example='trusteeship'),
}

model AddAccountRelationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    hostId?: string(name='HostId', description='HostId', example='HostId'),
    relationId?: long(name='RelationId', example='RelationId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model AddAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AddAccountRelationResponseBody(name='body'),
}

async function addAccountRelationWithOptions(request: AddAccountRelationRequest, runtime: Util.RuntimeOptions): AddAccountRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.childNick)) {
    query['ChildNick'] = request.childNick;
  }
  if (!Util.isUnset(request.childUserId)) {
    query['ChildUserId'] = request.childUserId;
  }
  if (!Util.isUnset(request.parentUserId)) {
    query['ParentUserId'] = request.parentUserId;
  }
  if (!Util.isUnset(request.permissionCodes)) {
    query['PermissionCodes'] = request.permissionCodes;
  }
  if (!Util.isUnset(request.relationType)) {
    query['RelationType'] = request.relationType;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.roleCodes)) {
    query['RoleCodes'] = request.roleCodes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AddAccountRelation',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function addAccountRelation(request: AddAccountRelationRequest): AddAccountRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return addAccountRelationWithOptions(request, runtime);
}

model AllocateCostUnitResourceRequest {
  fromUnitId?: long(name='FromUnitId', example='0'),
  fromUnitUserId?: long(name='FromUnitUserId', example='273394581313325532'),
  resourceInstanceList?: [ 
    {
      apportionCode?: string(name='ApportionCode', example='qwer1-cn-beijing'),
      commodityCode?: string(name='CommodityCode', example='oss'),
      resourceId?: string(name='ResourceId', example='cn-hangzhou;standard'),
      resourceUserId?: long(name='ResourceUserId', example='273394581313325532'),
    }
  ](name='ResourceInstanceList'),
  toUnitId?: long(name='ToUnitId', example='186419'),
  toUnitUserId?: long(name='ToUnitUserId', example='241021678450941490'),
}

model AllocateCostUnitResourceResponseBody = {
  code?: string(name='Code', example='success'),
  data?: {
    isSuccess?: boolean(name='IsSuccess', example='true'),
    toUnitId?: long(name='ToUnitId', example='32857346527'),
    toUnitUserId?: long(name='ToUnitUserId', example='34857693874'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='845C629F-47A7-4F46-A470-ED5047C4C250'),
  success?: boolean(name='Success', example='false'),
}

model AllocateCostUnitResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: AllocateCostUnitResourceResponseBody(name='body'),
}

async function allocateCostUnitResourceWithOptions(request: AllocateCostUnitResourceRequest, runtime: Util.RuntimeOptions): AllocateCostUnitResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.fromUnitId)) {
    query['FromUnitId'] = request.fromUnitId;
  }
  if (!Util.isUnset(request.fromUnitUserId)) {
    query['FromUnitUserId'] = request.fromUnitUserId;
  }
  if (!Util.isUnset(request.resourceInstanceList)) {
    query['ResourceInstanceList'] = request.resourceInstanceList;
  }
  if (!Util.isUnset(request.toUnitId)) {
    query['ToUnitId'] = request.toUnitId;
  }
  if (!Util.isUnset(request.toUnitUserId)) {
    query['ToUnitUserId'] = request.toUnitUserId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'AllocateCostUnitResource',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function allocateCostUnitResource(request: AllocateCostUnitResourceRequest): AllocateCostUnitResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateCostUnitResourceWithOptions(request, runtime);
}

model ApplyInvoiceRequest {
  addressId?: long(name='AddressId', example='237958367'),
  applyUserNick?: string(name='ApplyUserNick', example='test'),
  customerId?: long(name='CustomerId', example='124132423'),
  invoiceAmount?: long(name='InvoiceAmount', example='124132'),
  invoiceByAmount?: boolean(name='InvoiceByAmount', example='true'),
  invoicingType?: int32(name='InvoicingType', example='1'),
  ownerId?: long(name='OwnerId'),
  processWay?: int32(name='ProcessWay', example='1'),
  selectedIds?: [ long ](name='SelectedIds', example='384752367'),
  userRemark?: string(name='UserRemark', example='test'),
}

model ApplyInvoiceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    invoiceApplyId?: long(name='InvoiceApplyId', example='1323125534'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model ApplyInvoiceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ApplyInvoiceResponseBody(name='body'),
}

async function applyInvoiceWithOptions(request: ApplyInvoiceRequest, runtime: Util.RuntimeOptions): ApplyInvoiceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.addressId)) {
    query['AddressId'] = request.addressId;
  }
  if (!Util.isUnset(request.applyUserNick)) {
    query['ApplyUserNick'] = request.applyUserNick;
  }
  if (!Util.isUnset(request.customerId)) {
    query['CustomerId'] = request.customerId;
  }
  if (!Util.isUnset(request.invoiceAmount)) {
    query['InvoiceAmount'] = request.invoiceAmount;
  }
  if (!Util.isUnset(request.invoiceByAmount)) {
    query['InvoiceByAmount'] = request.invoiceByAmount;
  }
  if (!Util.isUnset(request.invoicingType)) {
    query['InvoicingType'] = request.invoicingType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.processWay)) {
    query['ProcessWay'] = request.processWay;
  }
  if (!Util.isUnset(request.selectedIds)) {
    query['SelectedIds'] = request.selectedIds;
  }
  if (!Util.isUnset(request.userRemark)) {
    query['UserRemark'] = request.userRemark;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ApplyInvoice',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function applyInvoice(request: ApplyInvoiceRequest): ApplyInvoiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return applyInvoiceWithOptions(request, runtime);
}

model CancelOrderRequest {
  orderId?: string(name='OrderId', example='73465432785'),
  ownerId?: long(name='OwnerId'),
}

model CancelOrderResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostId?: string(name='HostId', example='cn'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='30D2285E-A848-4ECB-AA74-4954C60858A1'),
  success?: boolean(name='Success', example='true'),
}

model CancelOrderResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CancelOrderResponseBody(name='body'),
}

async function cancelOrderWithOptions(request: CancelOrderRequest, runtime: Util.RuntimeOptions): CancelOrderResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CancelOrder',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function cancelOrder(request: CancelOrderRequest): CancelOrderResponse {
  var runtime = new Util.RuntimeOptions{};
  return cancelOrderWithOptions(request, runtime);
}

model ChangeResellerConsumeAmountRequest {
  adjustType?: string(name='AdjustType', example='increase/decrease'),
  amount?: string(name='Amount', example='10.00'),
  businessType?: string(name='BusinessType', example='quota_amount_adjust'),
  currency?: string(name='Currency', example='CNY'),
  extendMap?: string(name='ExtendMap', example='{}'),
  outBizId?: string(name='OutBizId', example='1647396865'),
  ownerId?: long(name='OwnerId'),
  source?: string(name='Source', example='system'),
}

model ChangeResellerConsumeAmountResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='300.00'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
  success?: boolean(name='Success', example='true'),
}

model ChangeResellerConsumeAmountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ChangeResellerConsumeAmountResponseBody(name='body'),
}

async function changeResellerConsumeAmountWithOptions(request: ChangeResellerConsumeAmountRequest, runtime: Util.RuntimeOptions): ChangeResellerConsumeAmountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.adjustType)) {
    query['AdjustType'] = request.adjustType;
  }
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.currency)) {
    query['Currency'] = request.currency;
  }
  if (!Util.isUnset(request.extendMap)) {
    query['ExtendMap'] = request.extendMap;
  }
  if (!Util.isUnset(request.outBizId)) {
    query['OutBizId'] = request.outBizId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ChangeResellerConsumeAmount',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function changeResellerConsumeAmount(request: ChangeResellerConsumeAmountRequest): ChangeResellerConsumeAmountResponse {
  var runtime = new Util.RuntimeOptions{};
  return changeResellerConsumeAmountWithOptions(request, runtime);
}

model ConfirmRelationRequest {
  childUserId?: long(name='ChildUserId', example='1512996702208737'),
  confirmCode?: string(name='ConfirmCode', example='child_agree'),
  parentUserId?: long(name='ParentUserId', example='1738376485192612'),
  permissionCodes?: [ string ](name='PermissionCodes', example='SYNCHRONIZE_FINANCE_IDENTITY'),
  relationId?: long(name='RelationId', example='51463'),
  relationType?: string(name='RelationType'),
  requestId?: string(name='RequestId', example='request_id'),
}

model ConfirmRelationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    hostId?: string(name='HostId', description='HostId', example='HostId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='request_id'),
  success?: boolean(name='Success', example='true'),
}

model ConfirmRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConfirmRelationResponseBody(name='body'),
}

async function confirmRelationWithOptions(request: ConfirmRelationRequest, runtime: Util.RuntimeOptions): ConfirmRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.childUserId)) {
    query['ChildUserId'] = request.childUserId;
  }
  if (!Util.isUnset(request.confirmCode)) {
    query['ConfirmCode'] = request.confirmCode;
  }
  if (!Util.isUnset(request.parentUserId)) {
    query['ParentUserId'] = request.parentUserId;
  }
  if (!Util.isUnset(request.permissionCodes)) {
    query['PermissionCodes'] = request.permissionCodes;
  }
  if (!Util.isUnset(request.relationId)) {
    query['RelationId'] = request.relationId;
  }
  if (!Util.isUnset(request.relationType)) {
    query['RelationType'] = request.relationType;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConfirmRelation',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function confirmRelation(request: ConfirmRelationRequest): ConfirmRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return confirmRelationWithOptions(request, runtime);
}

model ConvertChargeTypeRequest {
  instanceId?: string(name='InstanceId', example='rm-kasjgfjshgf'),
  ownerId?: long(name='OwnerId'),
  period?: int32(name='Period', example='6'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model ConvertChargeTypeResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    orderId?: string(name='OrderId', example='202657601410661'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model ConvertChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ConvertChargeTypeResponseBody(name='body'),
}

async function convertChargeTypeWithOptions(request: ConvertChargeTypeRequest, runtime: Util.RuntimeOptions): ConvertChargeTypeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ConvertChargeType',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function convertChargeType(request: ConvertChargeTypeRequest): ConvertChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return convertChargeTypeWithOptions(request, runtime);
}

model CreateAgAccountRequest {
  accountAttr?: string(name='AccountAttr', example='1'),
  cityName?: string(name='CityName'),
  enterpriseName?: string(name='EnterpriseName'),
  firstName?: string(name='FirstName'),
  lastName?: string(name='LastName'),
  loginEmail?: string(name='LoginEmail', example='email'),
  nationCode?: string(name='NationCode', example='CN'),
  postcode?: string(name='Postcode', example='350000'),
  provinceName?: string(name='ProvinceName'),
}

model CreateAgAccountResponseBody = {
  agRelationDto?: {
    mpk?: string(name='Mpk', description='MPKÔºàUIDÔºâ', example='1785287436011964'),
    pk?: string(name='Pk', example='1728240534507590'),
    ramAdminRoleName?: string(name='RamAdminRoleName', example='admin-role'),
    type?: string(name='Type', example='FINACE_CLOUD'),
  }(name='AgRelationDto'),
  code?: string(name='Code', example='LOGIN_EMAIL_HAS_BEEN_USED'),
  message?: string(name='Message', example='loginEmail=685741089H@chinaunicom.cn,has used'),
  requestId?: string(name='RequestId', example='EAE08A27-386C-579E-966D-8853EC3C5D0E'),
  success?: boolean(name='Success', example='true'),
}

model CreateAgAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateAgAccountResponseBody(name='body'),
}

async function createAgAccountWithOptions(request: CreateAgAccountRequest, runtime: Util.RuntimeOptions): CreateAgAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountAttr)) {
    query['AccountAttr'] = request.accountAttr;
  }
  if (!Util.isUnset(request.cityName)) {
    query['CityName'] = request.cityName;
  }
  if (!Util.isUnset(request.enterpriseName)) {
    query['EnterpriseName'] = request.enterpriseName;
  }
  if (!Util.isUnset(request.firstName)) {
    query['FirstName'] = request.firstName;
  }
  if (!Util.isUnset(request.lastName)) {
    query['LastName'] = request.lastName;
  }
  if (!Util.isUnset(request.loginEmail)) {
    query['LoginEmail'] = request.loginEmail;
  }
  if (!Util.isUnset(request.nationCode)) {
    query['NationCode'] = request.nationCode;
  }
  if (!Util.isUnset(request.postcode)) {
    query['Postcode'] = request.postcode;
  }
  if (!Util.isUnset(request.provinceName)) {
    query['ProvinceName'] = request.provinceName;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateAgAccount',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createAgAccount(request: CreateAgAccountRequest): CreateAgAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createAgAccountWithOptions(request, runtime);
}

model CreateCostUnitRequest {
  unitEntityList?: [ 
    {
      ownerUid?: long(name='OwnerUid', example='982375623'),
      parentUnitId?: long(name='ParentUnitId', example='-1'),
      unitName?: string(name='UnitName', example='test'),
    }
  ](name='UnitEntityList'),
}

model CreateCostUnitResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    costUnitDtoList?: [ 
      {
        ownerUid?: long(name='OwnerUid', example='26387563'),
        parentUnitId?: long(name='ParentUnitId', example='-1'),
        unitId?: long(name='UnitId', example='84327659328'),
        unitName?: string(name='UnitName', example='test'),
      }
    ](name='CostUnitDtoList'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', example='true'),
}

model CreateCostUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateCostUnitResponseBody(name='body'),
}

async function createCostUnitWithOptions(request: CreateCostUnitRequest, runtime: Util.RuntimeOptions): CreateCostUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.unitEntityList)) {
    query['UnitEntityList'] = request.unitEntityList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateCostUnit',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createCostUnit(request: CreateCostUnitRequest): CreateCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return createCostUnitWithOptions(request, runtime);
}

model CreateInstanceRequest {
  clientToken?: string(name='ClientToken', example='JASIOFKVNVIXXXXXX'),
  logistics?: string(name='Logistics'),
  ownerId?: long(name='OwnerId'),
  parameter?: [ 
    {
      code?: string(name='Code', example='InstanceType'),
      value?: string(name='Value', example='disk'),
    }
  ](name='Parameter'),
  period?: int32(name='Period', example='12'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  renewPeriod?: int32(name='RenewPeriod', example='12'),
  renewalStatus?: string(name='RenewalStatus', example='ManualRenewal'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model CreateInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    instanceId?: string(name='InstanceId', example='OSSBAG-cn-v1hxxxxx23'),
    orderId?: string(name='OrderId', example='20240xxxx21'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='C880B065-A781-4F19-B6DD-3E0E3B715C64'),
  success?: boolean(name='Success', example='true'),
}

model CreateInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateInstanceResponseBody(name='body'),
}

async function createInstanceWithOptions(request: CreateInstanceRequest, runtime: Util.RuntimeOptions): CreateInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.logistics)) {
    query['Logistics'] = request.logistics;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parameter)) {
    query['Parameter'] = request.parameter;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.renewPeriod)) {
    query['RenewPeriod'] = request.renewPeriod;
  }
  if (!Util.isUnset(request.renewalStatus)) {
    query['RenewalStatus'] = request.renewalStatus;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createInstance(request: CreateInstanceRequest): CreateInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createInstanceWithOptions(request, runtime);
}

model CreateResellerUserQuotaRequest {
  amount?: string(name='Amount', example='100'),
  currency?: string(name='Currency', example='CNY'),
  outBizId?: string(name='OutBizId', example='7ed0bedc-056e-4a71-9249-4581615c028f'),
  ownerId?: long(name='OwnerId'),
}

model CreateResellerUserQuotaResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model CreateResellerUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResellerUserQuotaResponseBody(name='body'),
}

async function createResellerUserQuotaWithOptions(request: CreateResellerUserQuotaRequest, runtime: Util.RuntimeOptions): CreateResellerUserQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.currency)) {
    query['Currency'] = request.currency;
  }
  if (!Util.isUnset(request.outBizId)) {
    query['OutBizId'] = request.outBizId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateResellerUserQuota',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createResellerUserQuota(request: CreateResellerUserQuotaRequest): CreateResellerUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResellerUserQuotaWithOptions(request, runtime);
}

model CreateResourcePackageRequest {
  duration?: int32(name='Duration', example='6'),
  effectiveDate?: string(name='EffectiveDate', example='2020-03-03T12:00:00Z'),
  ownerId?: long(name='OwnerId'),
  packageType?: string(name='PackageType', example='FPT_ossbag_absolute_Storage_sh'),
  pricingCycle?: string(name='PricingCycle', example='Month'),
  productCode?: string(name='ProductCode', example='ossbag'),
  specification?: string(name='Specification', example='40'),
}

model CreateResourcePackageResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    instanceId?: string(name='InstanceId', example='OSSBAG-cn-****s'),
    orderId?: long(name='OrderId', example='202407022550621'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  orderId?: long(name='OrderId', example='202407022550621'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model CreateResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateResourcePackageResponseBody(name='body'),
}

async function createResourcePackageWithOptions(request: CreateResourcePackageRequest, runtime: Util.RuntimeOptions): CreateResourcePackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.effectiveDate)) {
    query['EffectiveDate'] = request.effectiveDate;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.packageType)) {
    query['PackageType'] = request.packageType;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateResourcePackage',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createResourcePackage(request: CreateResourcePackageRequest): CreateResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createResourcePackageWithOptions(request, runtime);
}

model CreateSavingsPlansInstanceRequest {
  commodityCode?: string(name='CommodityCode', example='savingplan_common_public_cn'),
  duration?: string(name='Duration', example='1'),
  effectiveDate?: string(name='EffectiveDate', example='2021-12-31T00:00:00Z'),
  payMode?: string(name='PayMode', example='total'),
  poolValue?: string(name='PoolValue', example='0.1'),
  pricingCycle?: string(name='PricingCycle', example='Year'),
  region?: string(name='Region', example='cn-hangzhou'),
  specType?: string(name='SpecType', example='family'),
  specification?: string(name='Specification', example='ecs.g6'),
  type?: string(name='Type', example='univeral'),
}

model CreateSavingsPlansInstanceResponseBody = {
  code?: string(name='Code', example='PARAM_ERROR'),
  data?: {
    orderId?: long(name='OrderId', example='202110260001'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='26dabb0c-8ca0-4aa0-8143-30499f3fe304'),
  success?: boolean(name='Success', example='true'),
}

model CreateSavingsPlansInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateSavingsPlansInstanceResponseBody(name='body'),
}

async function createSavingsPlansInstanceWithOptions(request: CreateSavingsPlansInstanceRequest, runtime: Util.RuntimeOptions): CreateSavingsPlansInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.effectiveDate)) {
    query['EffectiveDate'] = request.effectiveDate;
  }
  if (!Util.isUnset(request.payMode)) {
    query['PayMode'] = request.payMode;
  }
  if (!Util.isUnset(request.poolValue)) {
    query['PoolValue'] = request.poolValue;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.specType)) {
    query['SpecType'] = request.specType;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateSavingsPlansInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createSavingsPlansInstance(request: CreateSavingsPlansInstanceRequest): CreateSavingsPlansInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSavingsPlansInstanceWithOptions(request, runtime);
}

model DeleteCostUnitRequest {
  ownerUid?: long(name='OwnerUid', example='2135342'),
  unitId?: long(name='UnitId', example='376348'),
}

model DeleteCostUnitResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    isSuccess?: boolean(name='IsSuccess', example='true'),
    ownerUid?: long(name='OwnerUid', example='12431'),
    unitId?: long(name='UnitId', example='123412343'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', example='true'),
}

model DeleteCostUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteCostUnitResponseBody(name='body'),
}

async function deleteCostUnitWithOptions(request: DeleteCostUnitRequest, runtime: Util.RuntimeOptions): DeleteCostUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerUid)) {
    query['OwnerUid'] = request.ownerUid;
  }
  if (!Util.isUnset(request.unitId)) {
    query['UnitId'] = request.unitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteCostUnit',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteCostUnit(request: DeleteCostUnitRequest): DeleteCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteCostUnitWithOptions(request, runtime);
}

model DescribeCostBudgetsSummaryRequest {
  budgetName?: string(name='BudgetName'),
  budgetStatus?: string(name='BudgetStatus', example='notOverdue'),
  budgetType?: string(name='BudgetType', example='cost'),
  maxResults?: int32(name='MaxResults', example='5'),
  nextToken?: string(name='NextToken', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6NH0='),
}

model DescribeCostBudgetsSummaryResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostId?: string(name='HostId', example='cn'),
    items?: [ 
      {
        budget?: map[string]any(name='Budget', example='{           "budgetCycleType": "monthly",           "budgetMemo": "",           "totalBudgetAmount": 220         }'),
        budgetName?: string(name='BudgetName'),
        budgetStatus?: string(name='BudgetStatus', example='overdue'),
        budgetType?: string(name='BudgetType', example='cost'),
        calculatedValues?: map[string]any(name='CalculatedValues', example='{           "actualConsumeSum": 88.6,           "actualAddForecastedAmount": 89.6,           "actualAndBudgetComparison": "20.73%"         }'),
        consumePeriod?: map[string]any(name='ConsumePeriod', example='{           "consumePeriodBegin": "2022-10",           "consumePeriodEnd": "2022-11"         }'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='5'),
    nextToken?: string(name='NextToken', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6NH0='),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='3BFC23FE-A182-4D96-A1E4-7521B30B8E43'),
  success?: boolean(name='Success', example='true'),
}

model DescribeCostBudgetsSummaryResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeCostBudgetsSummaryResponseBody(name='body'),
}

async function describeCostBudgetsSummaryWithOptions(request: DescribeCostBudgetsSummaryRequest, runtime: Util.RuntimeOptions): DescribeCostBudgetsSummaryResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.budgetName)) {
    query['BudgetName'] = request.budgetName;
  }
  if (!Util.isUnset(request.budgetStatus)) {
    query['BudgetStatus'] = request.budgetStatus;
  }
  if (!Util.isUnset(request.budgetType)) {
    query['BudgetType'] = request.budgetType;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeCostBudgetsSummary',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeCostBudgetsSummary(request: DescribeCostBudgetsSummaryRequest): DescribeCostBudgetsSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCostBudgetsSummaryWithOptions(request, runtime);
}

model DescribeInstanceAmortizedCostByAmortizationPeriodRequest {
  billOwnerIdList?: [ string ](name='BillOwnerIdList'),
  billUserIdList?: [ string ](name='BillUserIdList'),
  billingCycle?: string(name='BillingCycle', example='2022-10'),
  consumePeriodFilter?: [ string ](name='ConsumePeriodFilter'),
  costUnitCode?: string(name='CostUnitCode', example='123#'),
  instanceIdList?: [ string ](name='InstanceIdList'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
  productCode?: string(name='ProductCode', example='rds'),
  productDetail?: string(name='ProductDetail', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountID?: string(name='AccountID', example='185766xxxx'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    items?: [ 
      {
        amortizationPeriod?: string(name='AmortizationPeriod', example='202210'),
        amortizationStatus?: string(name='AmortizationStatus', example='amortized'),
        billAccountID?: long(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billOwnerID?: long(name='BillOwnerID', example='185xxxxx489'),
        billOwnerName?: string(name='BillOwnerName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        consumePeriod?: string(name='ConsumePeriod', example='202210'),
        costUnit?: string(name='CostUnit'),
        costUnitCode?: string(name='CostUnitCode', example='1234'),
        currentAmortizationDeductedByCashCoupons?: double(name='CurrentAmortizationDeductedByCashCoupons', example='0'),
        currentAmortizationDeductedByCoupons?: double(name='CurrentAmortizationDeductedByCoupons', example='0'),
        currentAmortizationDeductedByPrepaidCard?: double(name='CurrentAmortizationDeductedByPrepaidCard', example='0'),
        currentAmortizationExpenditureAmount?: double(name='CurrentAmortizationExpenditureAmount', example='0'),
        currentAmortizationInvoiceDiscount?: double(name='CurrentAmortizationInvoiceDiscount', example='0'),
        currentAmortizationPretaxAmount?: double(name='CurrentAmortizationPretaxAmount', example='0'),
        currentAmortizationPretaxGrossAmount?: double(name='CurrentAmortizationPretaxGrossAmount', example='0'),
        currentAmortizationRoundDownDiscount?: double(name='CurrentAmortizationRoundDownDiscount', example='0'),
        deductedByCashCoupons?: double(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: double(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: double(name='DeductedByPrepaidCard', example='0'),
        expenditureAmount?: double(name='ExpenditureAmount', example='0'),
        instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: double(name='InvoiceDiscount', example='0'),
        pretaxAmount?: double(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: double(name='PretaxGrossAmount', example='0'),
        previouslyAmortizedDeductedByCashCoupons?: double(name='PreviouslyAmortizedDeductedByCashCoupons', example='0'),
        previouslyAmortizedDeductedByCoupons?: double(name='PreviouslyAmortizedDeductedByCoupons', example='0'),
        previouslyAmortizedDeductedByPrepaidCard?: double(name='PreviouslyAmortizedDeductedByPrepaidCard', example='0'),
        previouslyAmortizedExpenditureAmount?: double(name='PreviouslyAmortizedExpenditureAmount', example='0'),
        previouslyAmortizedInvoiceDiscount?: double(name='PreviouslyAmortizedInvoiceDiscount', example='0'),
        previouslyAmortizedPretaxAmount?: double(name='PreviouslyAmortizedPretaxAmount', example='0'),
        previouslyAmortizedPretaxGrossAmount?: double(name='PreviouslyAmortizedPretaxGrossAmount', example='0'),
        previouslyAmortizedRoundDownDiscount?: double(name='PreviouslyAmortizedRoundDownDiscount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productDetailCode?: string(name='ProductDetailCode', example='rds'),
        productName?: string(name='ProductName'),
        region?: string(name='Region'),
        remainingAmortizationDeductedByCashCoupons?: double(name='RemainingAmortizationDeductedByCashCoupons', example='0'),
        remainingAmortizationDeductedByCoupons?: double(name='RemainingAmortizationDeductedByCoupons', example='0'),
        remainingAmortizationDeductedByPrepaidCard?: double(name='RemainingAmortizationDeductedByPrepaidCard', example='0'),
        remainingAmortizationExpenditureAmount?: double(name='RemainingAmortizationExpenditureAmount', example='0'),
        remainingAmortizationInvoiceDiscount?: double(name='RemainingAmortizationInvoiceDiscount', example='0'),
        remainingAmortizationPretaxAmount?: double(name='RemainingAmortizationPretaxAmount', example='0'),
        remainingAmortizationPretaxGrossAmount?: double(name='RemainingAmortizationPretaxGrossAmount', example='0'),
        remainingAmortizationRoundDownDiscount?: double(name='RemainingAmortizationRoundDownDiscount', example='0'),
        resourceGroup?: string(name='ResourceGroup'),
        roundDownDiscount?: double(name='RoundDownDiscount', example='0'),
        splitAccountName?: string(name='SplitAccountName', example='test**1122'),
        splitItemID?: string(name='SplitItemID', example='i-28bycvyb4'),
        splitItemName?: string(name='SplitItemName', example='iZ28bycvyb4Z'),
        splitProductDetail?: string(name='SplitProductDetail', example='rds'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='tag'),
        zone?: string(name='Zone'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='100'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeInstanceAmortizedCostByAmortizationPeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceAmortizedCostByAmortizationPeriodResponseBody(name='body'),
}

async function describeInstanceAmortizedCostByAmortizationPeriodWithOptions(request: DescribeInstanceAmortizedCostByAmortizationPeriodRequest, runtime: Util.RuntimeOptions): DescribeInstanceAmortizedCostByAmortizationPeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.billOwnerIdList)) {
    body['BillOwnerIdList'] = request.billOwnerIdList;
  }
  if (!Util.isUnset(request.billUserIdList)) {
    body['BillUserIdList'] = request.billUserIdList;
  }
  if (!Util.isUnset(request.billingCycle)) {
    body['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.consumePeriodFilter)) {
    body['ConsumePeriodFilter'] = request.consumePeriodFilter;
  }
  if (!Util.isUnset(request.costUnitCode)) {
    body['CostUnitCode'] = request.costUnitCode;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    body['InstanceIdList'] = request.instanceIdList;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productDetail)) {
    body['ProductDetail'] = request.productDetail;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    body['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAmortizedCostByAmortizationPeriod',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceAmortizedCostByAmortizationPeriod(request: DescribeInstanceAmortizedCostByAmortizationPeriodRequest): DescribeInstanceAmortizedCostByAmortizationPeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAmortizedCostByAmortizationPeriodWithOptions(request, runtime);
}

model DescribeInstanceAmortizedCostByConsumePeriodRequest {
  amortizationPeriodFilter?: [ string ](name='AmortizationPeriodFilter'),
  billOwnerIdList?: [ string ](name='BillOwnerIdList'),
  billUserIdList?: [ string ](name='BillUserIdList'),
  billingCycle?: string(name='BillingCycle', example='2022-10'),
  costUnitCode?: string(name='CostUnitCode', example='123#'),
  instanceIdList?: [ string ](name='InstanceIdList'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
  productCode?: string(name='ProductCode', example='rds'),
  productDetail?: string(name='ProductDetail', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model DescribeInstanceAmortizedCostByConsumePeriodResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountID?: string(name='AccountID', example='185766xxxx'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    items?: [ 
      {
        amortizationPeriod?: string(name='AmortizationPeriod', example='202210'),
        amortizationStatus?: string(name='AmortizationStatus', example='amortized'),
        billAccountID?: long(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billOwnerID?: long(name='BillOwnerID', example='185xxxxx489'),
        billOwnerName?: string(name='BillOwnerName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        consumePeriod?: string(name='ConsumePeriod', example='202210'),
        costUnit?: string(name='CostUnit'),
        costUnitCode?: string(name='CostUnitCode', example='1234'),
        currentAmortizationDeductedByCashCoupons?: double(name='CurrentAmortizationDeductedByCashCoupons', example='0'),
        currentAmortizationDeductedByCoupons?: double(name='CurrentAmortizationDeductedByCoupons', example='0'),
        currentAmortizationDeductedByPrepaidCard?: double(name='CurrentAmortizationDeductedByPrepaidCard', example='0'),
        currentAmortizationExpenditureAmount?: double(name='CurrentAmortizationExpenditureAmount', example='0'),
        currentAmortizationInvoiceDiscount?: double(name='CurrentAmortizationInvoiceDiscount', example='0'),
        currentAmortizationPretaxAmount?: double(name='CurrentAmortizationPretaxAmount', example='0'),
        currentAmortizationPretaxGrossAmount?: double(name='CurrentAmortizationPretaxGrossAmount', example='0'),
        currentAmortizationRoundDownDiscount?: double(name='CurrentAmortizationRoundDownDiscount', example='0'),
        deductedByCashCoupons?: double(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: double(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: double(name='DeductedByPrepaidCard', example='0'),
        expenditureAmount?: double(name='ExpenditureAmount', example='0'),
        instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: double(name='InvoiceDiscount', example='0'),
        pretaxAmount?: double(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: double(name='PretaxGrossAmount', example='0'),
        previouslyAmortizedDeductedByCashCoupons?: double(name='PreviouslyAmortizedDeductedByCashCoupons', example='0'),
        previouslyAmortizedDeductedByCoupons?: double(name='PreviouslyAmortizedDeductedByCoupons', example='0'),
        previouslyAmortizedDeductedByPrepaidCard?: double(name='PreviouslyAmortizedDeductedByPrepaidCard', example='0'),
        previouslyAmortizedExpenditureAmount?: double(name='PreviouslyAmortizedExpenditureAmount', example='0'),
        previouslyAmortizedInvoiceDiscount?: double(name='PreviouslyAmortizedInvoiceDiscount', example='0'),
        previouslyAmortizedPretaxAmount?: double(name='PreviouslyAmortizedPretaxAmount', example='0'),
        previouslyAmortizedPretaxGrossAmount?: double(name='PreviouslyAmortizedPretaxGrossAmount', example='0'),
        previouslyAmortizedRoundDownDiscount?: double(name='PreviouslyAmortizedRoundDownDiscount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productDetailCode?: string(name='ProductDetailCode', example='rds'),
        productName?: string(name='ProductName'),
        region?: string(name='Region'),
        remainingAmortizationDeductedByCashCoupons?: double(name='RemainingAmortizationDeductedByCashCoupons', example='0'),
        remainingAmortizationDeductedByCoupons?: double(name='RemainingAmortizationDeductedByCoupons', example='0'),
        remainingAmortizationDeductedByPrepaidCard?: double(name='RemainingAmortizationDeductedByPrepaidCard', example='0'),
        remainingAmortizationExpenditureAmount?: double(name='RemainingAmortizationExpenditureAmount', example='0'),
        remainingAmortizationInvoiceDiscount?: double(name='RemainingAmortizationInvoiceDiscount', example='0'),
        remainingAmortizationPretaxAmount?: double(name='RemainingAmortizationPretaxAmount', example='0'),
        remainingAmortizationPretaxGrossAmount?: double(name='RemainingAmortizationPretaxGrossAmount', example='0'),
        remainingAmortizationRoundDownDiscount?: double(name='RemainingAmortizationRoundDownDiscount', example='0'),
        resourceGroup?: string(name='ResourceGroup'),
        roundDownDiscount?: double(name='RoundDownDiscount', example='0'),
        splitAccountName?: string(name='SplitAccountName', example='test**1122'),
        splitItemID?: string(name='SplitItemID', example='i-28bycvyb4'),
        splitItemName?: string(name='SplitItemName', example='iZ28bycvyb4Z'),
        splitProductDetail?: string(name='SplitProductDetail', example='rds'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='tag'),
        zone?: string(name='Zone'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='100'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeInstanceAmortizedCostByConsumePeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceAmortizedCostByConsumePeriodResponseBody(name='body'),
}

async function describeInstanceAmortizedCostByConsumePeriodWithOptions(request: DescribeInstanceAmortizedCostByConsumePeriodRequest, runtime: Util.RuntimeOptions): DescribeInstanceAmortizedCostByConsumePeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.amortizationPeriodFilter)) {
    body['AmortizationPeriodFilter'] = request.amortizationPeriodFilter;
  }
  if (!Util.isUnset(request.billOwnerIdList)) {
    body['BillOwnerIdList'] = request.billOwnerIdList;
  }
  if (!Util.isUnset(request.billUserIdList)) {
    body['BillUserIdList'] = request.billUserIdList;
  }
  if (!Util.isUnset(request.billingCycle)) {
    body['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.costUnitCode)) {
    body['CostUnitCode'] = request.costUnitCode;
  }
  if (!Util.isUnset(request.instanceIdList)) {
    body['InstanceIdList'] = request.instanceIdList;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productDetail)) {
    body['ProductDetail'] = request.productDetail;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    body['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceAmortizedCostByConsumePeriod',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceAmortizedCostByConsumePeriod(request: DescribeInstanceAmortizedCostByConsumePeriodRequest): DescribeInstanceAmortizedCostByConsumePeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAmortizedCostByConsumePeriodWithOptions(request, runtime);
}

model DescribeInstanceBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='122'),
  billingCycle?: string(name='BillingCycle', example='2020-03'),
  billingDate?: string(name='BillingDate', example='2020-03-02'),
  granularity?: string(name='Granularity', example='MONTHLY'),
  instanceID?: string(name='InstanceID', example='abc'),
  isBillingItem?: boolean(name='IsBillingItem', example='false'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', example='false'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCm'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
}

model DescribeInstanceBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='122'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-03'),
    items?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        billAccountID?: string(name='BillAccountID', example='122'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billingDate?: string(name='BillingDate', example='2020-03-20'),
        billingItem?: string(name='BillingItem'),
        billingItemCode?: string(name='BillingItemCode', example='disk'),
        billingType?: string(name='BillingType'),
        bizType?: string(name='BizType', example='trusteeship'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0.1'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0.1'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0.1'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage', example='0.1'),
        instanceConfig?: string(name='InstanceConfig', example='CPUÔºö12'),
        instanceID?: string(name='InstanceID', example='i-dadada'),
        instanceSpec?: string(name='InstanceSpec', example='ecs.sn1ne.3xlarge'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0.1'),
        item?: string(name='Item', example='PayAsYouGoBill'),
        itemName?: string(name='ItemName', example='iZ28bycvyb4Z'),
        listPrice?: string(name='ListPrice', example='100'),
        listPriceUnit?: string(name='ListPriceUnit'),
        nickName?: string(name='NickName', example='test'),
        outstandingAmount?: float(name='OutstandingAmount', example='0.1'),
        ownerID?: string(name='OwnerID', example='123'),
        paymentAmount?: float(name='PaymentAmount', example='0.1'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='0.1'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0.1'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        region?: string(name='Region'),
        resourceGroup?: string(name='ResourceGroup'),
        servicePeriod?: string(name='ServicePeriod', example='3600'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='key:testKey value:testValue; key:testKey1 value:testValues1'),
        usage?: string(name='Usage', example='100'),
        usageUnit?: string(name='UsageUnit', example='GB'),
        zone?: string(name='Zone'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCm'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeInstanceBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeInstanceBillResponseBody(name='body'),
}

async function describeInstanceBillWithOptions(request: DescribeInstanceBillRequest, runtime: Util.RuntimeOptions): DescribeInstanceBillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.billingDate)) {
    query['BillingDate'] = request.billingDate;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.instanceID)) {
    query['InstanceID'] = request.instanceID;
  }
  if (!Util.isUnset(request.isBillingItem)) {
    query['IsBillingItem'] = request.isBillingItem;
  }
  if (!Util.isUnset(request.isHideZeroCharge)) {
    query['IsHideZeroCharge'] = request.isHideZeroCharge;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeInstanceBill',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeInstanceBill(request: DescribeInstanceBillRequest): DescribeInstanceBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceBillWithOptions(request, runtime);
}

model DescribePricingModuleRequest {
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model DescribePricingModuleResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    attributeList?: {
      attribute?: [ 
      {
        code?: string(name='Code', example='DBInstanceStorage'),
        name?: string(name='Name'),
        unit?: string(name='Unit', example='GB'),
        values?: {
          attributeValue?: [ 
          {
            name?: string(name='Name'),
            remark?: string(name='Remark'),
            type?: string(name='Type', example='single_string'),
            value?: string(name='Value', example='mysql.n2.medium.1'),
          }
        ](name='AttributeValue')
        }(name='Values'),
      }
    ](name='Attribute')
    }(name='AttributeList'),
    moduleList?: {
      module?: [ 
      {
        configList?: {
          configList?: [ string ](name='ConfigList')
        }(name='ConfigList'),
        currency?: string(name='Currency', example='CNY'),
        moduleCode?: string(name='ModuleCode', example='InstanceType'),
        moduleName?: string(name='ModuleName'),
        priceType?: string(name='PriceType', example='Month'),
      }
    ](name='Module')
    }(name='ModuleList'),
  }(name='Data'),
  message?: string(name='Message', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', example='C40A8EE0-8084-49FE-B66E-5E1C3B6AE025'),
  success?: boolean(name='Success', example='true'),
}

model DescribePricingModuleResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribePricingModuleResponseBody(name='body'),
}

async function describePricingModuleWithOptions(request: DescribePricingModuleRequest, runtime: Util.RuntimeOptions): DescribePricingModuleResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribePricingModule',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describePricingModule(request: DescribePricingModuleRequest): DescribePricingModuleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePricingModuleWithOptions(request, runtime);
}

model DescribeProductAmortizedCostByAmortizationPeriodRequest {
  billOwnerIdList?: [ string ](name='BillOwnerIdList'),
  billUserIdList?: [ string ](name='BillUserIdList'),
  billingCycle?: string(name='BillingCycle', example='2022-10'),
  consumePeriodFilter?: [ string ](name='ConsumePeriodFilter'),
  costUnitCode?: string(name='CostUnitCode', example='123#'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
  productCode?: string(name='ProductCode', example='rds'),
  productDetail?: string(name='ProductDetail', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model DescribeProductAmortizedCostByAmortizationPeriodResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountID?: string(name='AccountID', example='185766xxxx'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    items?: [ 
      {
        amortizationPeriod?: string(name='AmortizationPeriod', example='202210'),
        amortizationStatus?: string(name='AmortizationStatus', example='amortized'),
        billAccountID?: long(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billOwnerID?: long(name='BillOwnerID', example='185xxxxx489'),
        billOwnerName?: string(name='BillOwnerName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        consumePeriod?: string(name='ConsumePeriod', example='202210'),
        currentAmortizationDeductedByCashCoupons?: double(name='CurrentAmortizationDeductedByCashCoupons', example='0'),
        currentAmortizationDeductedByCoupons?: double(name='CurrentAmortizationDeductedByCoupons', example='0'),
        currentAmortizationDeductedByPrepaidCard?: double(name='CurrentAmortizationDeductedByPrepaidCard', example='0'),
        currentAmortizationExpenditureAmount?: double(name='CurrentAmortizationExpenditureAmount', example='0'),
        currentAmortizationInvoiceDiscount?: double(name='CurrentAmortizationInvoiceDiscount', example='0'),
        currentAmortizationPretaxAmount?: double(name='CurrentAmortizationPretaxAmount', example='0'),
        currentAmortizationPretaxGrossAmount?: double(name='CurrentAmortizationPretaxGrossAmount', example='0'),
        currentAmortizationRoundDownDiscount?: double(name='CurrentAmortizationRoundDownDiscount', example='0'),
        deductedByCashCoupons?: double(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: double(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: double(name='DeductedByPrepaidCard', example='0'),
        expenditureAmount?: double(name='ExpenditureAmount', example='0'),
        invoiceDiscount?: double(name='InvoiceDiscount', example='0'),
        pretaxAmount?: double(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: double(name='PretaxGrossAmount', example='0'),
        previouslyAmortizedDeductedByCashCoupons?: double(name='PreviouslyAmortizedDeductedByCashCoupons', example='0'),
        previouslyAmortizedDeductedByCoupons?: double(name='PreviouslyAmortizedDeductedByCoupons', example='0'),
        previouslyAmortizedDeductedByPrepaidCard?: double(name='PreviouslyAmortizedDeductedByPrepaidCard', example='0'),
        previouslyAmortizedExpenditureAmount?: double(name='PreviouslyAmortizedExpenditureAmount', example='0'),
        previouslyAmortizedInvoiceDiscount?: double(name='PreviouslyAmortizedInvoiceDiscount', example='0'),
        previouslyAmortizedPretaxAmount?: double(name='PreviouslyAmortizedPretaxAmount', example='0'),
        previouslyAmortizedPretaxGrossAmount?: double(name='PreviouslyAmortizedPretaxGrossAmount', example='0'),
        previouslyAmortizedRoundDownDiscount?: double(name='PreviouslyAmortizedRoundDownDiscount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productDetailCode?: string(name='ProductDetailCode', example='rds'),
        productName?: string(name='ProductName'),
        remainingAmortizationDeductedByCashCoupons?: double(name='RemainingAmortizationDeductedByCashCoupons', example='0'),
        remainingAmortizationDeductedByCoupons?: double(name='RemainingAmortizationDeductedByCoupons', example='0'),
        remainingAmortizationDeductedByPrepaidCard?: double(name='RemainingAmortizationDeductedByPrepaidCard', example='0'),
        remainingAmortizationExpenditureAmount?: double(name='RemainingAmortizationExpenditureAmount', example='0'),
        remainingAmortizationInvoiceDiscount?: double(name='RemainingAmortizationInvoiceDiscount', example='0'),
        remainingAmortizationPretaxAmount?: double(name='RemainingAmortizationPretaxAmount', example='0'),
        remainingAmortizationPretaxGrossAmount?: double(name='RemainingAmortizationPretaxGrossAmount', example='0'),
        remainingAmortizationRoundDownDiscount?: double(name='RemainingAmortizationRoundDownDiscount', example='0'),
        roundDownDiscount?: double(name='RoundDownDiscount', example='0'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='100'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeProductAmortizedCostByAmortizationPeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProductAmortizedCostByAmortizationPeriodResponseBody(name='body'),
}

async function describeProductAmortizedCostByAmortizationPeriodWithOptions(request: DescribeProductAmortizedCostByAmortizationPeriodRequest, runtime: Util.RuntimeOptions): DescribeProductAmortizedCostByAmortizationPeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.billOwnerIdList)) {
    body['BillOwnerIdList'] = request.billOwnerIdList;
  }
  if (!Util.isUnset(request.billUserIdList)) {
    body['BillUserIdList'] = request.billUserIdList;
  }
  if (!Util.isUnset(request.billingCycle)) {
    body['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.consumePeriodFilter)) {
    body['ConsumePeriodFilter'] = request.consumePeriodFilter;
  }
  if (!Util.isUnset(request.costUnitCode)) {
    body['CostUnitCode'] = request.costUnitCode;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productDetail)) {
    body['ProductDetail'] = request.productDetail;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    body['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProductAmortizedCostByAmortizationPeriod',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProductAmortizedCostByAmortizationPeriod(request: DescribeProductAmortizedCostByAmortizationPeriodRequest): DescribeProductAmortizedCostByAmortizationPeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProductAmortizedCostByAmortizationPeriodWithOptions(request, runtime);
}

model DescribeProductAmortizedCostByConsumePeriodRequest {
  amortizationPeriodFilter?: [ string ](name='AmortizationPeriodFilter'),
  billOwnerIdList?: [ string ](name='BillOwnerIdList'),
  billUserIdList?: [ string ](name='BillUserIdList'),
  billingCycle?: string(name='BillingCycle', example='2022-10'),
  costUnitCode?: string(name='CostUnitCode', example='123#'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
  productCode?: string(name='ProductCode', example='rds'),
  productDetail?: string(name='ProductDetail', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model DescribeProductAmortizedCostByConsumePeriodResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountID?: string(name='AccountID', example='185766xxxx'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    items?: [ 
      {
        amortizationPeriod?: string(name='AmortizationPeriod', example='202210'),
        amortizationStatus?: string(name='AmortizationStatus', example='amortized'),
        billAccountID?: long(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billOwnerID?: long(name='BillOwnerID', example='185xxxxx489'),
        billOwnerName?: string(name='BillOwnerName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        consumePeriod?: string(name='ConsumePeriod', example='202210'),
        currentAmortizationDeductedByCashCoupons?: double(name='CurrentAmortizationDeductedByCashCoupons', example='0'),
        currentAmortizationDeductedByCoupons?: double(name='CurrentAmortizationDeductedByCoupons', example='0'),
        currentAmortizationDeductedByPrepaidCard?: double(name='CurrentAmortizationDeductedByPrepaidCard', example='0'),
        currentAmortizationExpenditureAmount?: double(name='CurrentAmortizationExpenditureAmount', example='0'),
        currentAmortizationInvoiceDiscount?: double(name='CurrentAmortizationInvoiceDiscount', example='0'),
        currentAmortizationPretaxAmount?: double(name='CurrentAmortizationPretaxAmount', example='0'),
        currentAmortizationPretaxGrossAmount?: double(name='CurrentAmortizationPretaxGrossAmount', example='0'),
        currentAmortizationRoundDownDiscount?: double(name='CurrentAmortizationRoundDownDiscount', example='0'),
        deductedByCashCoupons?: double(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: double(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: double(name='DeductedByPrepaidCard', example='0'),
        expenditureAmount?: double(name='ExpenditureAmount', example='0'),
        invoiceDiscount?: double(name='InvoiceDiscount', example='0'),
        pretaxAmount?: double(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: double(name='PretaxGrossAmount', example='0'),
        previouslyAmortizedDeductedByCashCoupons?: double(name='PreviouslyAmortizedDeductedByCashCoupons', example='0'),
        previouslyAmortizedDeductedByCoupons?: double(name='PreviouslyAmortizedDeductedByCoupons', example='0'),
        previouslyAmortizedDeductedByPrepaidCard?: double(name='PreviouslyAmortizedDeductedByPrepaidCard', example='0'),
        previouslyAmortizedExpenditureAmount?: double(name='PreviouslyAmortizedExpenditureAmount', example='0'),
        previouslyAmortizedInvoiceDiscount?: double(name='PreviouslyAmortizedInvoiceDiscount', example='0'),
        previouslyAmortizedPretaxAmount?: double(name='PreviouslyAmortizedPretaxAmount', example='0'),
        previouslyAmortizedPretaxGrossAmount?: double(name='PreviouslyAmortizedPretaxGrossAmount', example='0'),
        previouslyAmortizedRoundDownDiscount?: double(name='PreviouslyAmortizedRoundDownDiscount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productDetailCode?: string(name='ProductDetailCode', example='rds'),
        productName?: string(name='ProductName'),
        remainingAmortizationDeductedByCashCoupons?: double(name='RemainingAmortizationDeductedByCashCoupons', example='0'),
        remainingAmortizationDeductedByCoupons?: double(name='RemainingAmortizationDeductedByCoupons', example='0'),
        remainingAmortizationDeductedByPrepaidCard?: double(name='RemainingAmortizationDeductedByPrepaidCard', example='0'),
        remainingAmortizationExpenditureAmount?: double(name='RemainingAmortizationExpenditureAmount', example='0'),
        remainingAmortizationInvoiceDiscount?: double(name='RemainingAmortizationInvoiceDiscount', example='0'),
        remainingAmortizationPretaxAmount?: double(name='RemainingAmortizationPretaxAmount', example='0'),
        remainingAmortizationPretaxGrossAmount?: double(name='RemainingAmortizationPretaxGrossAmount', example='0'),
        remainingAmortizationRoundDownDiscount?: double(name='RemainingAmortizationRoundDownDiscount', example='0'),
        roundDownDiscount?: double(name='RoundDownDiscount', example='0'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='100'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeProductAmortizedCostByConsumePeriodResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeProductAmortizedCostByConsumePeriodResponseBody(name='body'),
}

async function describeProductAmortizedCostByConsumePeriodWithOptions(request: DescribeProductAmortizedCostByConsumePeriodRequest, runtime: Util.RuntimeOptions): DescribeProductAmortizedCostByConsumePeriodResponse {
  Util.validateModel(request);
  var body : map[string]any = {};
  if (!Util.isUnset(request.amortizationPeriodFilter)) {
    body['AmortizationPeriodFilter'] = request.amortizationPeriodFilter;
  }
  if (!Util.isUnset(request.billOwnerIdList)) {
    body['BillOwnerIdList'] = request.billOwnerIdList;
  }
  if (!Util.isUnset(request.billUserIdList)) {
    body['BillUserIdList'] = request.billUserIdList;
  }
  if (!Util.isUnset(request.billingCycle)) {
    body['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.costUnitCode)) {
    body['CostUnitCode'] = request.costUnitCode;
  }
  if (!Util.isUnset(request.maxResults)) {
    body['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    body['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.productCode)) {
    body['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productDetail)) {
    body['ProductDetail'] = request.productDetail;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    body['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    body = OpenApiUtil.parseToMap(body),
  };
  var params = new OpenApi.Params{
    action = 'DescribeProductAmortizedCostByConsumePeriod',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeProductAmortizedCostByConsumePeriod(request: DescribeProductAmortizedCostByConsumePeriodRequest): DescribeProductAmortizedCostByConsumePeriodResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeProductAmortizedCostByConsumePeriodWithOptions(request, runtime);
}

model DescribeResourceCoverageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query coverage details. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='200'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results. You do not need to set this parameter if you query coverage details within a specific time range for the first time. The response returns a token that you can use to query coverage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more coverage details can be queried.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
  periodType?: string(name='PeriodType', description='The time granularity at which coverage details are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR'),
  resourceType?: string(name='ResourceType', description='The type of deduction plans whose coverage details are queried. Valid values: RI and SCU.', example='RI'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query.

The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
}

model DescribeResourceCoverageDetailResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    items?: [ 
      {
        capacityUnit?: string(name='CapacityUnit', description='The unit that is used to measure the resources deducted from deduction plans.'),
        commodityCode?: string(name='CommodityCode', description='The code of the service.', example='ecs'),
        commodityName?: string(name='CommodityName', description='The name and billing method of the service.'),
        coveragePercentage?: float(name='CoveragePercentage', description='The coverage rate of a deduction plan.', example='1'),
        currency?: string(name='Currency', description='The currency in which deduction plans were priced.', example='CNY'),
        deductQuantity?: float(name='DeductQuantity', description='The amount of the resources deducted from a deduction plan.', example='1'),
        endTime?: string(name='EndTime', description='The end of the time range in which the coverage details were queried.', example='2021-04-01 01:00:00'),
        instanceId?: string(name='InstanceId', description='The ID of a pay-as-you-go instance.', example='i-bp1d9x623987rlj0dx4xx'),
        instanceSpec?: string(name='InstanceSpec', description='The specifications of a deduction plan.', example='ecs.t5-lc2m1.nano'),
        paymentAmount?: float(name='PaymentAmount', description='The amount of the bill.', example='0'),
        productCode?: string(name='ProductCode', description='The code of the service.', example='ecs'),
        productName?: string(name='ProductName', description='The name of the service.'),
        region?: string(name='Region', description='The region.'),
        regionNo?: string(name='RegionNo', description='The code of the region.', example='cn-hangzhou-dg-a01'),
        startTime?: string(name='StartTime', description='The beginning of the time range in which the coverage details were queried.', example='2021-04-01 00:00:00'),
        totalQuantity?: float(name='TotalQuantity', description='The total amount of resources consumed.', example='1'),
        userId?: string(name='UserId', description='The ID of the account.', example='123745698925000'),
        userName?: string(name='UserName', description='The username of the account.', example='test13@test.aliyun.com'),
        zone?: string(name='Zone', description='The code of the zone.', example='cn-hangzhou-i'),
        zoneName?: string(name='ZoneName', description='The zone.'),
      }
    ](name='Items', description='The data entries.'),
    maxResults?: int32(name='MaxResults', description='The number of entries returned on the current page.', example='200'),
    nextToken?: string(name='NextToken', description='The token of the next page.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10000'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeResourceCoverageDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceCoverageDetailResponseBody(name='body'),
}

/**
  * 1\\. The queried coverage details are the same as those displayed in the table on the Coverage tab of the Manage Reserved Instances page in the Billing Management console.
  * 2\\. You can call this operation to query the coverage details of RIs or SCUs.
  * 3\\. You can call this operation to query coverage details at an hourly, daily, or monthly granularity.
  *
  * @param request DescribeResourceCoverageDetailRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeResourceCoverageDetailResponse
 */
async function describeResourceCoverageDetailWithOptions(request: DescribeResourceCoverageDetailRequest, runtime: Util.RuntimeOptions): DescribeResourceCoverageDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceCoverageDetail',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * 1\\. The queried coverage details are the same as those displayed in the table on the Coverage tab of the Manage Reserved Instances page in the Billing Management console.
  * 2\\. You can call this operation to query the coverage details of RIs or SCUs.
  * 3\\. You can call this operation to query coverage details at an hourly, daily, or monthly granularity.
  *
  * @param request DescribeResourceCoverageDetailRequest
  * @return DescribeResourceCoverageDetailResponse
 */
async function describeResourceCoverageDetail(request: DescribeResourceCoverageDetailRequest): DescribeResourceCoverageDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceCoverageDetailWithOptions(request, runtime);
}

model DescribeResourceCoverageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query total coverage data. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00'),
  periodType?: string(name='PeriodType', description='The time granularity at which total coverage data is queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR'),
  resourceType?: string(name='ResourceType', description='The type of deduction plans whose total coverage data is queried. Valid values: RI and SCU.', example='RI'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
}

model DescribeResourceCoverageTotalResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    periodCoverage?: [ 
      {
        coveragePercentage?: float(name='CoveragePercentage', description='The coverage rate of deduction plans within the specified period.', example='0.1'),
        period?: string(name='Period', description='The period.

The value is in the format of yyyyMMddHH.', example='2020110100'),
      }
    ](name='PeriodCoverage', description='The information about the coverage rate of deduction plans within a period.'),
    totalCoverage?: {
      capacityUnit?: string(name='CapacityUnit', description='The unit that is used to measure the resources deducted from deduction plans.'),
      coveragePercentage?: float(name='CoveragePercentage', description='The total coverage rate of deduction plans.', example='1'),
      deductQuantity?: float(name='DeductQuantity', description='The total amount of the resources deducted from deduction plans.', example='1'),
      totalQuantity?: float(name='TotalQuantity', description='The total amount of resources consumed.', example='1'),
    }(name='TotalCoverage', description='The information about the total coverage data of deduction plans.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeResourceCoverageTotalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceCoverageTotalResponseBody(name='body'),
}

/**
  * The queried total coverage data is the same as the aggregated data displayed on the Coverage tab of the Manage Reserved Instances page in the Billing Management console.
  * You can call this operation to query the total coverage data of RIs or SCUs.
  *
  * @param request DescribeResourceCoverageTotalRequest
  * @param runtime runtime options for this request RuntimeOptions
  * @return DescribeResourceCoverageTotalResponse
 */
async function describeResourceCoverageTotalWithOptions(request: DescribeResourceCoverageTotalRequest, runtime: Util.RuntimeOptions): DescribeResourceCoverageTotalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceCoverageTotal',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

/**
  * The queried total coverage data is the same as the aggregated data displayed on the Coverage tab of the Manage Reserved Instances page in the Billing Management console.
  * You can call this operation to query the total coverage data of RIs or SCUs.
  *
  * @param request DescribeResourceCoverageTotalRequest
  * @return DescribeResourceCoverageTotalResponse
 */
async function describeResourceCoverageTotal(request: DescribeResourceCoverageTotalRequest): DescribeResourceCoverageTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceCoverageTotalWithOptions(request, runtime);
}

model DescribeResourcePackageProductRequest {
  productCode?: string(name='ProductCode', example='ossbag'),
}

model DescribeResourcePackageProductResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    resourcePackages?: {
      resourcePackage?: [ 
      {
        name?: string(name='Name'),
        packageTypes?: {
          packageType?: [ 
          {
            code?: string(name='Code', example='FPT_ossbag_deadlineAcc_CdnOut_common_sz'),
            name?: string(name='Name'),
            properties?: {
              property?: [ 
              {
                name?: string(name='Name', example='region'),
                value?: string(name='Value', example='cn-shenzhen'),
              }
            ](name='Property')
            }(name='Properties'),
            specifications?: {
              specification?: [ 
              {
                availableDurations?: {
                  availableDuration?: [ 
                  {
                    name?: string(name='Name', example='6 Month'),
                    unit?: string(name='Unit', example='Month'),
                    value?: int32(name='Value', example='6'),
                  }
                ](name='AvailableDuration')
                }(name='AvailableDurations'),
                name?: string(name='Name', example='1TB'),
                value?: string(name='Value', example='1024'),
              }
            ](name='Specification')
            }(name='Specifications'),
          }
        ](name='PackageType')
        }(name='PackageTypes'),
        productCode?: string(name='ProductCode', example='ossbag'),
        productType?: string(name='ProductType', example='ossbag'),
      }
    ](name='ResourcePackage')
    }(name='ResourcePackages'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  orderId?: long(name='OrderId', example='72353765387'),
  requestId?: string(name='RequestId', example='BBEF51A3-E933-4F40-A534-C673CBDB9C80'),
  success?: boolean(name='Success', example='true'),
}

model DescribeResourcePackageProductResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourcePackageProductResponseBody(name='body'),
}

async function describeResourcePackageProductWithOptions(request: DescribeResourcePackageProductRequest, runtime: Util.RuntimeOptions): DescribeResourcePackageProductResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourcePackageProduct',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourcePackageProduct(request: DescribeResourcePackageProductRequest): DescribeResourcePackageProductResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourcePackageProductWithOptions(request, runtime);
}

model DescribeResourceUsageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='200'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results. You do not need to set this parameter if you query usage details within a specific time range for the first time. The response returns a token that you can use to query usage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more usage details can be queried.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
  periodType?: string(name='PeriodType', description='The time granularity at which usage details are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR'),
  resourceType?: string(name='ResourceType', description='The type of deduction plans whose usage details are queried. Valid values: RI and SCU.', example='RI'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
}

model DescribeResourceUsageDetailResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    items?: [ 
      {
        capacityUnit?: string(name='CapacityUnit', description='The unit that is used to measure the resources deducted from deduction plans.'),
        currency?: string(name='Currency', description='The currency in which deduction plans were priced.', example='CNY'),
        deductQuantity?: float(name='DeductQuantity', description='The amount of the resources deducted from deduction plans.', example='1'),
        endTime?: string(name='EndTime', description='The end of the time range in which the usage details were queried.', example='2021-04-01 01:00:00'),
        imageType?: string(name='ImageType', description='The operating system.', example='linux'),
        instanceSpec?: string(name='InstanceSpec', description='The specifications of a deduction plan.', example='ecs.t5-lc2m1.nano'),
        postpaidCost?: string(name='PostpaidCost', description='The equivalent of pay-as-you-go costs.', example='0.06'),
        potentialSavedCost?: string(name='PotentialSavedCost', description='The potential net savings.', example='0.13'),
        quantity?: long(name='Quantity', description='The number of deduction plans.', example='2'),
        region?: string(name='Region', description='The region.'),
        regionNo?: string(name='RegionNo', description='The code of the region.', example='cn-hangzhou-dg-a01'),
        reservationCost?: string(name='ReservationCost', description='The fee of purchased deduction plans.', example='0'),
        resourceInstanceId?: string(name='ResourceInstanceId', description='The ID of a deduction plan.', example='ecsri-bp147nnfz21225k9mpix00'),
        savedCost?: string(name='SavedCost', description='The net savings.', example='0.06'),
        startTime?: string(name='StartTime', description='The beginning of the time range in which the usage details were queried.', example='2021-04-01 00:00:00'),
        status?: string(name='Status', description='The status of the deduction plan.', example='Valid'),
        statusName?: string(name='StatusName', description='The name of the state.'),
        totalQuantity?: float(name='TotalQuantity', description='The total capacity of deduction plans.', example='2'),
        usagePercentage?: float(name='UsagePercentage', description='The usage of deduction plans.', example='0.5'),
        userId?: string(name='UserId', description='The ID of the account.', example='123745698925000'),
        userName?: string(name='UserName', description='The username of the account.', example='test@aliyun.com'),
        zone?: string(name='Zone', description='The code of the zone.', example='cn-hangzhou-i'),
        zoneName?: string(name='ZoneName', description='The zone.'),
      }
    ](name='Items', description='The data entries.'),
    maxResults?: int32(name='MaxResults', description='The number of entries returned on the current page.', example='200'),
    nextToken?: string(name='NextToken', description='The token of the next page.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
    totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='10000'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeResourceUsageDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceUsageDetailResponseBody(name='body'),
}

async function describeResourceUsageDetailWithOptions(request: DescribeResourceUsageDetailRequest, runtime: Util.RuntimeOptions): DescribeResourceUsageDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceUsageDetail',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceUsageDetail(request: DescribeResourceUsageDetailRequest): DescribeResourceUsageDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceUsageDetailWithOptions(request, runtime);
}

model DescribeResourceUsageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', example='2021-01-02 00:00:00'),
  periodType?: string(name='PeriodType', example='HOUR'),
  resourceType?: string(name='ResourceType', example='RI'),
  startPeriod?: string(name='StartPeriod', example='2021-01-01 00:00:00'),
}

model DescribeResourceUsageTotalResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    periodCoverage?: [ 
      {
        period?: string(name='Period', description='The period.', example='2021071500'),
        usagePercentage?: float(name='UsagePercentage', description='The usage of deduction plans within the specified period.', example='0.1'),
      }
    ](name='PeriodCoverage', description='The information about the usage of deduction plans within a period.'),
    totalUsage?: {
      postpaidCost?: float(name='PostpaidCost', description='The total costs of pay-as-you-go instances.', example='200'),
      potentialSavedCost?: float(name='PotentialSavedCost', description='The total potential savings.', example='100'),
      reservationCost?: float(name='ReservationCost', description='The fee of purchased deduction plans.', example='10'),
      savedCost?: float(name='SavedCost', description='The total savings.', example='100'),
      usagePercentage?: float(name='UsagePercentage', description='The total usage of deduction plans.', example='1'),
    }(name='TotalUsage', description='The information about the total usage data of deduction plans.'),
  }(name='Data', description='The returned data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='364C7C81-5E5E-51A0-B738-1969D2671B05'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='True'),
}

model DescribeResourceUsageTotalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeResourceUsageTotalResponseBody(name='body'),
}

async function describeResourceUsageTotalWithOptions(request: DescribeResourceUsageTotalRequest, runtime: Util.RuntimeOptions): DescribeResourceUsageTotalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeResourceUsageTotal',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeResourceUsageTotal(request: DescribeResourceUsageTotalRequest): DescribeResourceUsageTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeResourceUsageTotalWithOptions(request, runtime);
}

model DescribeSavingsPlansCoverageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query coverage details. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-08-09 00:00:00'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='300'),
  periodType?: string(name='PeriodType', description='The time granularity at which coverage details are queried. Valid values: MONTH, DAY, and HOUR.', example='DAY'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-07-15 13:40:45'),
  token?: string(name='Token', description='The token that is used to retrieve the next page of results. You do not need to set this parameter if you query coverage details within a specific time range for the first time. The response returns a token that you can use to query coverage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more coverage details can be queried.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
}

model DescribeSavingsPlansCoverageDetailResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    items?: [ 
      {
        coveragePercentage?: float(name='CoveragePercentage', description='The coverage.', example='0.9'),
        currency?: string(name='Currency', description='The currency.', example='CNY'),
        deductAmount?: float(name='DeductAmount', description='The deducted amount.', example='100'),
        endPeriod?: string(name='EndPeriod', description='The end time.', example='2021-05-05 15:00:00'),
        instanceId?: string(name='InstanceId', description='The ID of the instance.', example='spn-a1fhs54c243hP22'),
        instanceSpec?: string(name='InstanceSpec', description='The specifications.', example='7th_generation_X86_group'),
        postpaidCost?: float(name='PostpaidCost', description='The pay-as-you-go cost.', example='200'),
        region?: string(name='Region', description='The region.'),
        startPeriod?: string(name='StartPeriod', description='The start time.', example='2021-05-05 14:00:00'),
        totalAmount?: float(name='TotalAmount', description='The total expenditure.', example='100'),
        userId?: long(name='UserId', description='The ID of the account.', example='2831685687844416'),
        userName?: string(name='UserName', description='The username of the account.', example='tester1@test.aliyun.com'),
      }
    ](name='Items', description='The data entries.'),
    nextToken?: string(name='NextToken', description='The token of the next page.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
    totalCount?: int32(name='TotalCount', description='The total number of entries.', example='400'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeSavingsPlansCoverageDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSavingsPlansCoverageDetailResponseBody(name='body'),
}

async function describeSavingsPlansCoverageDetailWithOptions(request: DescribeSavingsPlansCoverageDetailRequest, runtime: Util.RuntimeOptions): DescribeSavingsPlansCoverageDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSavingsPlansCoverageDetail',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSavingsPlansCoverageDetail(request: DescribeSavingsPlansCoverageDetailRequest): DescribeSavingsPlansCoverageDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSavingsPlansCoverageDetailWithOptions(request, runtime);
}

model DescribeSavingsPlansCoverageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query coverage summary. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-07-20 00:00:00'),
  periodType?: string(name='PeriodType', description='The time granularity at which coverage summary are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-07-15 00:00:00'),
}

model DescribeSavingsPlansCoverageTotalResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    periodCoverage?: [ 
      {
        percentage?: float(name='Percentage', description='The coverage.', example='1'),
        period?: string(name='Period', description='The period.

The value is in the format of yyyyMMddHH.', example='2021071500'),
      }
    ](name='PeriodCoverage', description='The coverage in different periods.'),
    totalCoverage?: {
      coveragePercentage?: float(name='CoveragePercentage', description='The total coverage.', example='1'),
      deductAmount?: float(name='DeductAmount', description='The total deducted amount.', example='100'),
    }(name='TotalCoverage', description='The coverage summary.'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeSavingsPlansCoverageTotalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSavingsPlansCoverageTotalResponseBody(name='body'),
}

async function describeSavingsPlansCoverageTotalWithOptions(request: DescribeSavingsPlansCoverageTotalRequest, runtime: Util.RuntimeOptions): DescribeSavingsPlansCoverageTotalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSavingsPlansCoverageTotal',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSavingsPlansCoverageTotal(request: DescribeSavingsPlansCoverageTotalRequest): DescribeSavingsPlansCoverageTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSavingsPlansCoverageTotalWithOptions(request, runtime);
}

model DescribeSavingsPlansUsageDetailRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query usage details. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return. Default value: 20. Maximum value: 300.', example='300'),
  periodType?: string(name='PeriodType', description='The time granularity at which usage details are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
  token?: string(name='Token', description='The token that is used to retrieve the next page of results. You do not need to set this parameter if you query usage details within a specific time range for the first time. The response returns a token that you can use to query usage details that are displayed on the next page. If a null value is returned for the NextToken parameter, no more coverage details can be queried.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2l6ZSI6MTB9'),
}

model DescribeSavingsPlansUsageDetailResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    items?: [ 
      {
        currency?: string(name='Currency', description='The currency.', example='CNY'),
        deductValue?: float(name='DeductValue', description='The used amount of the savings plan.', example='3.94'),
        endPeriod?: string(name='EndPeriod', description='The end time.', example='2021-08-09 00:00:00'),
        instanceId?: string(name='InstanceId', description='The ID of the instance.', example='spn-a1fhs54c243hP22'),
        poolValue?: float(name='PoolValue', description='The total amount of the savings plan.', example='29.84'),
        postpaidCost?: float(name='PostpaidCost', description='The pay-as-you-go cost.', example='4.2'),
        savedCost?: float(name='SavedCost', description='The amount that is saved.', example='0.08'),
        startPeriod?: string(name='StartPeriod', description='The start time.', example='2021-08-01 00:00:00'),
        status?: string(name='Status', description='The status of the instance.

A value of -1 indicates that the payment is overdue. A value of 1 indicates that the instance is active.', example='-1'),
        type?: string(name='Type', description='The type of the savings plan. Valid values: universal and ECS compute.'),
        usagePercentage?: float(name='UsagePercentage', description='The usage.', example='0.9'),
        userId?: long(name='UserId', description='The ID of the account.', example='123745698925000'),
        userName?: string(name='UserName', description='The username of the account.', example='test13@test.aliyun.com'),
      }
    ](name='Items', description='The data entries.'),
    nextToken?: string(name='NextToken', description='The token of the next page.', example='eyJwYWdlTnVtIjoyLCJwYWdlU2ldhsSI6MTB9'),
    totalCount?: int32(name='TotalCount', description='The total number of entries.', example='1000'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeSavingsPlansUsageDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSavingsPlansUsageDetailResponseBody(name='body'),
}

async function describeSavingsPlansUsageDetailWithOptions(request: DescribeSavingsPlansUsageDetailRequest, runtime: Util.RuntimeOptions): DescribeSavingsPlansUsageDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  if (!Util.isUnset(request.token)) {
    query['Token'] = request.token;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSavingsPlansUsageDetail',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSavingsPlansUsageDetail(request: DescribeSavingsPlansUsageDetailRequest): DescribeSavingsPlansUsageDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSavingsPlansUsageDetailWithOptions(request, runtime);
}

model DescribeSavingsPlansUsageTotalRequest {
  billOwnerId?: long(name='BillOwnerId', description='The ID of the account for which you want to query usage summary. If you do not set this parameter, the data of the current Alibaba Cloud account and its RAM users is queried. To query the data of a RAM user, specify the ID of the RAM user.', example='123745698925000'),
  endPeriod?: string(name='EndPeriod', description='The end of the time range to query. The end is excluded from the time range. If you do not set this parameter, the end time is the current time. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-02 00:00:00'),
  periodType?: string(name='PeriodType', description='The time granularity at which usage summary are queried. Valid values: MONTH, DAY, and HOUR.', example='HOUR'),
  startPeriod?: string(name='StartPeriod', description='The beginning of the time range to query. The beginning is included in the time range. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
}

model DescribeSavingsPlansUsageTotalResponseBody = {
  code?: string(name='Code', description='The status code.', example='Success'),
  data?: {
    periodCoverage?: [ 
      {
        percentage?: float(name='Percentage', description='The usage.', example='1'),
        period?: string(name='Period', description='The period.

The value is in the format of yyyyMMddHH.', example='2021041500'),
      }
    ](name='PeriodCoverage', description='The usage in different periods.'),
    totalUsage?: {
      poolValue?: float(name='PoolValue', description='The total amount of the savings plan.', example='100'),
      postpaidCost?: float(name='PostpaidCost', description='The pay-as-you-go cost.', example='200'),
      savedCost?: float(name='SavedCost', description='The amount that is saved.', example='100'),
      usagePercentage?: float(name='UsagePercentage', description='The total usage.', example='1'),
    }(name='TotalUsage', description='The usage summary.'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model DescribeSavingsPlansUsageTotalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSavingsPlansUsageTotalResponseBody(name='body'),
}

async function describeSavingsPlansUsageTotalWithOptions(request: DescribeSavingsPlansUsageTotalRequest, runtime: Util.RuntimeOptions): DescribeSavingsPlansUsageTotalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.endPeriod)) {
    query['EndPeriod'] = request.endPeriod;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.startPeriod)) {
    query['StartPeriod'] = request.startPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSavingsPlansUsageTotal',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSavingsPlansUsageTotal(request: DescribeSavingsPlansUsageTotalRequest): DescribeSavingsPlansUsageTotalResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSavingsPlansUsageTotalWithOptions(request, runtime);
}

model DescribeSplitItemBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='123'),
  billingCycle?: string(name='BillingCycle', example='2020-03'),
  billingDate?: string(name='BillingDate', example='2020-03-02'),
  granularity?: string(name='Granularity', example='Monthly'),
  instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  splitItemID?: string(name='SplitItemID', example='i-kjhdskjgshfdlkjfdh'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
  tagFilter?: [ 
    {
      tagKey?: string(name='TagKey', example='TestKey'),
      tagValues?: [ string ](name='TagValues', example='TestValue'),
    }
  ](name='TagFilter'),
}

model DescribeSplitItemBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185xxxx3489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-03'),
    items?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        billAccountID?: string(name='BillAccountID', example='185xxxx3489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billingDate?: string(name='BillingDate', example='2020-01-20'),
        billingItem?: string(name='BillingItem'),
        billingItemCode?: string(name='BillingItemCode', example='disk'),
        billingType?: string(name='BillingType'),
        bizType?: string(name='BizType', example='trusteeship'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage', example='0'),
        instanceConfig?: string(name='InstanceConfig', example='CPU:12'),
        instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh'),
        instanceSpec?: string(name='InstanceSpec', example='ecs.sn1ne.3xlarge'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        item?: string(name='Item', example='PayAsYouGoBill'),
        itemName?: string(name='ItemName', example='iZ28bycvyb4Z'),
        listPrice?: string(name='ListPrice', example='0.12'),
        listPriceUnit?: string(name='ListPriceUnit'),
        nickName?: string(name='NickName', example='nick'),
        outstandingAmount?: float(name='OutstandingAmount', example='0.1'),
        ownerID?: string(name='OwnerID', example='169***013'),
        paymentAmount?: float(name='PaymentAmount', example='0'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        region?: string(name='Region'),
        resourceGroup?: string(name='ResourceGroup'),
        servicePeriod?: string(name='ServicePeriod', example='20'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        splitAccountID?: string(name='SplitAccountID', example='12**122'),
        splitAccountName?: string(name='SplitAccountName', example='test**1122'),
        splitBillingCycle?: string(name='SplitBillingCycle', example='2021-06'),
        splitBillingDate?: string(name='SplitBillingDate', example='2021-06-01'),
        splitCommodityCode?: string(name='SplitCommodityCode', example='rds'),
        splitItemID?: string(name='SplitItemID', example='i-28bycvyb4'),
        splitItemName?: string(name='SplitItemName', example='iZ28bycvyb4Z'),
        splitProductDetail?: string(name='SplitProductDetail'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='key:testKey value:testValue; key:testKey1 value:testValues1'),
        usage?: string(name='Usage', example='100'),
        usageUnit?: string(name='UsageUnit', example='GB'),
        zone?: string(name='Zone'),
      }
    ](name='Items'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUQARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model DescribeSplitItemBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeSplitItemBillResponseBody(name='body'),
}

async function describeSplitItemBillWithOptions(request: DescribeSplitItemBillRequest, runtime: Util.RuntimeOptions): DescribeSplitItemBillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.billingDate)) {
    query['BillingDate'] = request.billingDate;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.instanceID)) {
    query['InstanceID'] = request.instanceID;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.splitItemID)) {
    query['SplitItemID'] = request.splitItemID;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  if (!Util.isUnset(request.tagFilter)) {
    query['TagFilter'] = request.tagFilter;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeSplitItemBill',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeSplitItemBill(request: DescribeSplitItemBillRequest): DescribeSplitItemBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSplitItemBillWithOptions(request, runtime);
}

model EnableBillGenerationRequest {
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', description='The code of the product.', example='ess'),
}

model EnableBillGenerationResponseBody = {
  code?: string(name='Code', description='The status code.', example='200'),
  data?: {
    boolean?: boolean(name='Boolean', description='Indicates whether the feature is enabled.', example='true'),
  }(name='Data', description='The data returned.'),
  message?: string(name='Message', description='The message returned.', example='Successful!'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='5F2648ED-170B-5882-BFF4-98BE522A60F2'),
  success?: boolean(name='Success', description='Indicates whether the call was successful.', example='true'),
}

model EnableBillGenerationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: EnableBillGenerationResponseBody(name='body'),
}

async function enableBillGenerationWithOptions(request: EnableBillGenerationRequest, runtime: Util.RuntimeOptions): EnableBillGenerationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'EnableBillGeneration',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function enableBillGeneration(request: EnableBillGenerationRequest): EnableBillGenerationResponse {
  var runtime = new Util.RuntimeOptions{};
  return enableBillGenerationWithOptions(request, runtime);
}

model GetAccountRelationRequest {
  relationId?: long(name='RelationId'),
  requestId?: string(name='RequestId', example='requestId'),
}

model GetAccountRelationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    childUserId?: long(name='ChildUserId'),
    endTime?: long(name='EndTime', example='2021-12-01'),
    gmtModified?: long(name='GmtModified', example='2021-12-01'),
    id?: long(name='Id'),
    parentUserId?: long(name='ParentUserId'),
    startTime?: long(name='StartTime', example='2021-11-01'),
    status?: string(name='Status', example='RELATED'),
    type?: string(name='Type', example='enterprise_group'),
  }(name='Data', description='data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model GetAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetAccountRelationResponseBody(name='body'),
}

async function getAccountRelationWithOptions(request: GetAccountRelationRequest, runtime: Util.RuntimeOptions): GetAccountRelationResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetAccountRelation',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getAccountRelation(request: GetAccountRelationRequest): GetAccountRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return getAccountRelationWithOptions(request, runtime);
}

model GetCustomerAccountInfoRequest {
  ownerId?: long(name='OwnerId'),
}

model GetCustomerAccountInfoResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountType?: string(name='AccountType', example='1'),
    creditLimitStatus?: string(name='CreditLimitStatus', example='Freeze'),
    hostingStatus?: string(name='HostingStatus', example='FREEZE'),
    isCertified?: boolean(name='IsCertified', example='true'),
    loginEmail?: string(name='LoginEmail', example='xxxx@aliyun.com'),
    mpk?: long(name='Mpk', example='1051360339779133'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='94017C56-1725-5DD9-AB41-B3BAE791D600'),
  success?: boolean(name='Success', example='true'),
}

model GetCustomerAccountInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCustomerAccountInfoResponseBody(name='body'),
}

async function getCustomerAccountInfoWithOptions(request: GetCustomerAccountInfoRequest, runtime: Util.RuntimeOptions): GetCustomerAccountInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetCustomerAccountInfo',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCustomerAccountInfo(request: GetCustomerAccountInfoRequest): GetCustomerAccountInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomerAccountInfoWithOptions(request, runtime);
}

model GetCustomerListResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    uidList?: [ string ](name='UidList'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model GetCustomerListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetCustomerListResponseBody(name='body'),
}

async function getCustomerListWithOptions(runtime: Util.RuntimeOptions): GetCustomerListResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'GetCustomerList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getCustomerList(): GetCustomerListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getCustomerListWithOptions(runtime);
}

model GetOrderDetailRequest {
  orderId?: string(name='OrderId', example='32453453'),
  ownerId?: long(name='OwnerId'),
}

model GetOrderDetailResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostName?: string(name='HostName', example='test'),
    orderList?: {
      order?: [ 
      {
        afterTaxAmount?: string(name='AfterTaxAmount', example='0'),
        commodityCode?: string(name='CommodityCode'),
        config?: string(name='Config', example='DBInstanceClass:[DBInstanceClass:rds.mysql.s1.small;EngineVersion:8.0;Region:cn-qingdao;]DBFlowType:[Region:cn-qingdao;]'),
        createTime?: string(name='CreateTime', example='2017-06-08T09:41:30Z'),
        currency?: string(name='Currency', example='CNY'),
        instanceIDs?: string(name='InstanceIDs', example='["rm-bp1a2vsr018313t6o"]'),
        operator?: string(name='Operator', example='23424243432'),
        orderId?: string(name='OrderId', example='3453425324'),
        orderSubType?: string(name='OrderSubType'),
        orderType?: string(name='OrderType', example='New'),
        originalConfig?: string(name='OriginalConfig', example='DBInstanceClass:[DBInstanceClass:rds.mysql.s1.small;EngineVersion:8.0;Region:cn-qingdao;]DBFlowType:[Region:cn-qingdao;]'),
        paymentCurrency?: string(name='PaymentCurrency', example='CNY'),
        paymentStatus?: string(name='PaymentStatus', example='Paid'),
        paymentTime?: string(name='PaymentTime', example='2017-06-08T09:41:30Z'),
        pretaxAmount?: string(name='PretaxAmount', example='0'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productType?: string(name='ProductType', example='rds'),
        quantity?: string(name='Quantity', example='1'),
        region?: string(name='Region', example='cn-hangzhou'),
        relatedOrderId?: string(name='RelatedOrderId', example='4353453534543'),
        subOrderId?: string(name='SubOrderId', example='234343'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tax?: string(name='Tax', example='1'),
        usageEndTime?: string(name='UsageEndTime', example='2117-06-08T16:00:00Z'),
        usageStartTime?: string(name='UsageStartTime', example='2017-06-08T16:00:00Z'),
      }
    ](name='Order')
    }(name='OrderList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
  success?: boolean(name='Success', example='true'),
}

model GetOrderDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetOrderDetailResponseBody(name='body'),
}

async function getOrderDetailWithOptions(request: GetOrderDetailRequest, runtime: Util.RuntimeOptions): GetOrderDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetOrderDetail',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getOrderDetail(request: GetOrderDetailRequest): GetOrderDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return getOrderDetailWithOptions(request, runtime);
}

model GetPayAsYouGoPriceRequest {
  moduleList?: [ 
    {
      config?: string(name='Config', example='InstanceType:ecs.g5.xlarge,IoOptimized:IoOptimized,ImageOs:linux'),
      moduleCode?: string(name='ModuleCode', example='InstanceType'),
      priceType?: string(name='PriceType', example='Hour'),
    }
  ](name='ModuleList'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', example='ecs'),
  productType?: string(name='ProductType', example='ecs'),
  region?: string(name='Region', example='cn-hangzhou'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
}

model GetPayAsYouGoPriceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currency?: string(name='Currency', example='CNY'),
    moduleDetails?: {
      moduleDetail?: [ 
      {
        costAfterDiscount?: float(name='CostAfterDiscount', example='100'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='20'),
        moduleCode?: string(name='ModuleCode', example='InstanceType'),
        originalCost?: float(name='OriginalCost', example='1.77'),
        unitPrice?: float(name='UnitPrice', example='0'),
      }
    ](name='ModuleDetail')
    }(name='ModuleDetails'),
    promotionDetails?: {
      promotionDetail?: [ 
      {
        promotionDesc?: string(name='PromotionDesc'),
        promotionId?: long(name='PromotionId', example='10200210'),
        promotionName?: string(name='PromotionName'),
      }
    ](name='PromotionDetail')
    }(name='PromotionDetails'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='1537A007-72D7-4165-8A26-8694A38E219A'),
  success?: boolean(name='Success', example='true'),
}

model GetPayAsYouGoPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetPayAsYouGoPriceResponseBody(name='body'),
}

async function getPayAsYouGoPriceWithOptions(request: GetPayAsYouGoPriceRequest, runtime: Util.RuntimeOptions): GetPayAsYouGoPriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.moduleList)) {
    query['ModuleList'] = request.moduleList;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetPayAsYouGoPrice',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getPayAsYouGoPrice(request: GetPayAsYouGoPriceRequest): GetPayAsYouGoPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getPayAsYouGoPriceWithOptions(request, runtime);
}

model GetResourcePackagePriceRequest {
  duration?: int32(name='Duration', example='6'),
  effectiveDate?: string(name='EffectiveDate', example='2020-02-10T12:00:00Z'),
  instanceId?: string(name='InstanceId', example='OSSBAG-cn-0xl0002'),
  orderType?: string(name='OrderType', example='BUY'),
  ownerId?: long(name='OwnerId'),
  packageType?: string(name='PackageType', example='FPT_ossbag_periodMonthlyAcc_NetworkOut_finance_common'),
  pricingCycle?: string(name='PricingCycle', example='Month'),
  productCode?: string(name='ProductCode', example='ossbag'),
  specification?: string(name='Specification', example='500'),
}

model GetResourcePackagePriceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    currency?: string(name='Currency', example='CNY'),
    discountPrice?: float(name='DiscountPrice', example='215040'),
    originalPrice?: float(name='OriginalPrice', example='1290240'),
    promotions?: {
      promotion?: [ 
      {
        id?: long(name='Id', example='1000680914'),
        name?: string(name='Name'),
      }
    ](name='Promotion')
    }(name='Promotions'),
    tradePrice?: float(name='TradePrice', example='1075200'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='BBEF51A3-E933-4F40-A534-C673CBDB9C80'),
  success?: boolean(name='Success', example='true'),
}

model GetResourcePackagePriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetResourcePackagePriceResponseBody(name='body'),
}

async function getResourcePackagePriceWithOptions(request: GetResourcePackagePriceRequest, runtime: Util.RuntimeOptions): GetResourcePackagePriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.effectiveDate)) {
    query['EffectiveDate'] = request.effectiveDate;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.packageType)) {
    query['PackageType'] = request.packageType;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetResourcePackagePrice',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getResourcePackagePrice(request: GetResourcePackagePriceRequest): GetResourcePackagePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getResourcePackagePriceWithOptions(request, runtime);
}

model GetSubscriptionPriceRequest {
  instanceId?: string(name='InstanceId', example='i-khkjhxxxxxxxxx'),
  moduleList?: [ 
    {
      config?: string(name='Config', example='PackageCode:version_1'),
      moduleCode?: string(name='ModuleCode', example='PackageCode'),
      moduleStatus?: int32(name='ModuleStatus', example='1'),
      tag?: string(name='Tag', example='213213123'),
    }
  ](name='ModuleList'),
  orderType?: string(name='OrderType', example='NewOrder'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', example='ecs'),
  productType?: string(name='ProductType', example='ecs'),
  quantity?: int32(name='Quantity', example='1'),
  region?: string(name='Region', example='cn-hangzhou'),
  servicePeriodQuantity?: int32(name='ServicePeriodQuantity', example='1'),
  servicePeriodUnit?: string(name='ServicePeriodUnit', example='Year'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model GetSubscriptionPriceResponseBody = {
  code?: string(name='Code', example='InvalidConfigCod'),
  data?: {
    currency?: string(name='Currency', example='CNY'),
    discountPrice?: float(name='DiscountPrice', example='100'),
    moduleDetails?: {
      moduleDetail?: [ 
      {
        costAfterDiscount?: float(name='CostAfterDiscount', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='100'),
        moduleCode?: string(name='ModuleCode', example='PackageCode'),
        originalCost?: float(name='OriginalCost', example='200'),
        unitPrice?: float(name='UnitPrice', example='0'),
      }
    ](name='ModuleDetail')
    }(name='ModuleDetails'),
    originalPrice?: float(name='OriginalPrice', example='900'),
    promotionDetails?: {
      promotionDetail?: [ 
      {
        promotionDesc?: string(name='PromotionDesc', example='test'),
        promotionId?: long(name='PromotionId', example='1021199213'),
        promotionName?: string(name='PromotionName', example='test'),
      }
    ](name='PromotionDetail')
    }(name='PromotionDetails'),
    quantity?: int32(name='Quantity', example='1'),
    tradePrice?: float(name='TradePrice', example='0'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='30E7066E-AE6F-4E59-AFE6-11386CE3AFA7'),
  success?: boolean(name='Success', example='true'),
}

model GetSubscriptionPriceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: GetSubscriptionPriceResponseBody(name='body'),
}

async function getSubscriptionPriceWithOptions(request: GetSubscriptionPriceRequest, runtime: Util.RuntimeOptions): GetSubscriptionPriceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.moduleList)) {
    query['ModuleList'] = request.moduleList;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.quantity)) {
    query['Quantity'] = request.quantity;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.servicePeriodQuantity)) {
    query['ServicePeriodQuantity'] = request.servicePeriodQuantity;
  }
  if (!Util.isUnset(request.servicePeriodUnit)) {
    query['ServicePeriodUnit'] = request.servicePeriodUnit;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'GetSubscriptionPrice',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function getSubscriptionPrice(request: GetSubscriptionPriceRequest): GetSubscriptionPriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return getSubscriptionPriceWithOptions(request, runtime);
}

model InquiryPriceRefundInstanceRequest {
  clientToken?: string(name='ClientToken', example='793F021C-B589-1225-82A9-99232AEBE494'),
  instanceId?: string(name='InstanceId', example='i-bp1etb69sqxgl4*******'),
  productCode?: string(name='ProductCode', example='ecs'),
  productType?: string(name='ProductType', example='‚Äù‚Äú'),
}

model InquiryPriceRefundInstanceResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    currency?: string(name='Currency', example='CNY'),
    hostId?: string(name='HostId', example='cn'),
    instanceId?: string(name='InstanceId', example='i-bp1etb69sqxgl4*******'),
    refundAmount?: double(name='RefundAmount', example='12.34'),
  }(name='Data', description='data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='UUID'),
  success?: boolean(name='Success', example='true'),
}

model InquiryPriceRefundInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: InquiryPriceRefundInstanceResponseBody(name='body'),
}

async function inquiryPriceRefundInstanceWithOptions(request: InquiryPriceRefundInstanceRequest, runtime: Util.RuntimeOptions): InquiryPriceRefundInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'InquiryPriceRefundInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function inquiryPriceRefundInstance(request: InquiryPriceRefundInstanceRequest): InquiryPriceRefundInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return inquiryPriceRefundInstanceWithOptions(request, runtime);
}

model ModifyAccountRelationRequest {
  childNick?: string(name='ChildNick'),
  childUserId?: long(name='ChildUserId', example='1512996702208737'),
  parentUserId?: long(name='ParentUserId', example='1738376485192612'),
  permissionCodes?: [ string ](name='PermissionCodes', example='SYNCHRONIZE_FINANCE_IDENTITY'),
  relationId?: long(name='RelationId', example='51463'),
  relationOperation?: string(name='RelationOperation', example='ADD'),
  relationType?: string(name='RelationType', example='enterprise_group'),
  requestId?: string(name='RequestId', example='request_id'),
  roleCodes?: [ string ](name='RoleCodes', example='trusteeship'),
}

model ModifyAccountRelationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    hostId?: string(name='HostId', description='HostId', example='HostId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='request_id'),
  success?: boolean(name='Success', example='true'),
}

model ModifyAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyAccountRelationResponseBody(name='body'),
}

async function modifyAccountRelationWithOptions(request: ModifyAccountRelationRequest, runtime: Util.RuntimeOptions): ModifyAccountRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.childNick)) {
    query['ChildNick'] = request.childNick;
  }
  if (!Util.isUnset(request.childUserId)) {
    query['ChildUserId'] = request.childUserId;
  }
  if (!Util.isUnset(request.parentUserId)) {
    query['ParentUserId'] = request.parentUserId;
  }
  if (!Util.isUnset(request.permissionCodes)) {
    query['PermissionCodes'] = request.permissionCodes;
  }
  if (!Util.isUnset(request.relationId)) {
    query['RelationId'] = request.relationId;
  }
  if (!Util.isUnset(request.relationOperation)) {
    query['RelationOperation'] = request.relationOperation;
  }
  if (!Util.isUnset(request.relationType)) {
    query['RelationType'] = request.relationType;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.roleCodes)) {
    query['RoleCodes'] = request.roleCodes;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyAccountRelation',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyAccountRelation(request: ModifyAccountRelationRequest): ModifyAccountRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyAccountRelationWithOptions(request, runtime);
}

model ModifyCostUnitRequest {
  unitEntityList?: [ 
    {
      newUnitName?: string(name='NewUnitName', example='newTest'),
      ownerUid?: long(name='OwnerUid', example='1321312312'),
      unitId?: long(name='UnitId', example='2524352'),
    }
  ](name='UnitEntityList'),
}

model ModifyCostUnitResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: [ 
    {
      isSuccess?: boolean(name='IsSuccess', example='true'),
      ownerUid?: long(name='OwnerUid', example='823756287'),
      unitId?: long(name='UnitId', example='356349875'),
    }
  ](name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', example='true'),
}

model ModifyCostUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyCostUnitResponseBody(name='body'),
}

async function modifyCostUnitWithOptions(request: ModifyCostUnitRequest, runtime: Util.RuntimeOptions): ModifyCostUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.unitEntityList)) {
    query['UnitEntityList'] = request.unitEntityList;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyCostUnit',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyCostUnit(request: ModifyCostUnitRequest): ModifyCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyCostUnitWithOptions(request, runtime);
}

model ModifyInstanceRequest {
  clientToken?: string(name='ClientToken', example='JAKSJFHFAKJSF'),
  instanceId?: string(name='InstanceId', example='rm-akjhkdsjhfskjfhd'),
  modifyType?: string(name='ModifyType', example='Upgrade'),
  ownerId?: long(name='OwnerId'),
  parameter?: [ 
    {
      code?: string(name='Code', example='test'),
      value?: string(name='Value', example='test'),
    }
  ](name='Parameter'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model ModifyInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostId?: string(name='HostId', example='testId'),
    orderId?: string(name='OrderId', example='202653252354351'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model ModifyInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyInstanceResponseBody(name='body'),
}

async function modifyInstanceWithOptions(request: ModifyInstanceRequest, runtime: Util.RuntimeOptions): ModifyInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.modifyType)) {
    query['ModifyType'] = request.modifyType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.parameter)) {
    query['Parameter'] = request.parameter;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyInstance(request: ModifyInstanceRequest): ModifyInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceWithOptions(request, runtime);
}

model QueryAccountBalanceResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    availableAmount?: string(name='AvailableAmount', example='10000.00'),
    availableCashAmount?: string(name='AvailableCashAmount', example='10000.00'),
    creditAmount?: string(name='CreditAmount', example='0.00'),
    currency?: string(name='Currency', example='CNY'),
    mybankCreditAmount?: string(name='MybankCreditAmount', example='0.00'),
  }(name='Data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='16176743-6DC7-4CB3-BB25-A13982D8DFAD'),
  success?: boolean(name='Success', example='true'),
}

model QueryAccountBalanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAccountBalanceResponseBody(name='body'),
}

async function queryAccountBalanceWithOptions(runtime: Util.RuntimeOptions): QueryAccountBalanceResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'QueryAccountBalance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAccountBalance(): QueryAccountBalanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountBalanceWithOptions(runtime);
}

model QueryAccountBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='122'),
  billingCycle?: string(name='BillingCycle', example='2018-07'),
  billingDate?: string(name='BillingDate', example='2021-06-01'),
  granularity?: string(name='Granularity', example='Monthly'),
  isGroupByProduct?: boolean(name='IsGroupByProduct', example='false'),
  ownerID?: long(name='OwnerID', example='2353425334'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  productCode?: string(name='ProductCode', example='rds'),
}

model QueryAccountBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='1857xxxxx489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-03'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        billAccountID?: string(name='BillAccountID', example='1857xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        billingDate?: string(name='BillingDate', example='2021-03-01'),
        bizType?: string(name='BizType', example='trusteeship'),
        cashAmount?: float(name='CashAmount', example='0'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        outstandingAmount?: float(name='OutstandingAmount', example='0'),
        ownerID?: string(name='OwnerID', example='325434254'),
        ownerName?: string(name='OwnerName', example='aligzncloudtest2'),
        paymentAmount?: float(name='PaymentAmount', example='0'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productName?: string(name='ProductName', example='rds'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
      }
    ](name='Item')
    }(name='Items'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='3BFC23FE-A182-4D96-A1E4-7521B30B8E43'),
  success?: boolean(name='Success', example='true'),
}

model QueryAccountBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAccountBillResponseBody(name='body'),
}

async function queryAccountBillWithOptions(request: QueryAccountBillRequest, runtime: Util.RuntimeOptions): QueryAccountBillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.billingDate)) {
    query['BillingDate'] = request.billingDate;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.isGroupByProduct)) {
    query['IsGroupByProduct'] = request.isGroupByProduct;
  }
  if (!Util.isUnset(request.ownerID)) {
    query['OwnerID'] = request.ownerID;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAccountBill',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAccountBill(request: QueryAccountBillRequest): QueryAccountBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountBillWithOptions(request, runtime);
}

model QueryAccountTransactionDetailsRequest {
  createTimeEnd?: string(name='CreateTimeEnd', example='2022-12-20'),
  createTimeStart?: string(name='CreateTimeStart', example='2022-01-20'),
  maxResults?: int32(name='MaxResults', example='0'),
  nextToken?: string(name='NextToken', example='ABEDSDS124DASA'),
  recordID?: string(name='RecordID', example='2022120336190912'),
  transactionChannel?: string(name='TransactionChannel', example='ALIPAY'),
  transactionChannelSN?: string(name='TransactionChannelSN', example='2022112122001470591458665933'),
  transactionNumber?: string(name='TransactionNumber', example='410874027490089'),
  transactionType?: string(name='TransactionType', example='CHARGE'),
}

model QueryAccountTransactionDetailsResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    accountName?: string(name='AccountName', example='yidi'),
    accountTransactionsList?: {
      accountTransactionsList?: [ 
      {
        amount?: string(name='Amount', example='1.00'),
        balance?: string(name='Balance', example='0'),
        billingCycle?: string(name='BillingCycle', example='2022-10'),
        fundType?: string(name='FundType', example='Cash'),
        recordID?: string(name='RecordID', example='2022120336190912'),
        remarks?: string(name='Remarks'),
        transactionAccount?: string(name='TransactionAccount', example='fortune_test@xxx.com'),
        transactionChannel?: string(name='TransactionChannel', example='ALIPAY'),
        transactionChannelSN?: string(name='TransactionChannelSN', example='123232434343532'),
        transactionFlow?: string(name='TransactionFlow', example='Income'),
        transactionNumber?: string(name='TransactionNumber', example='43342334'),
        transactionTime?: string(name='TransactionTime', example='2022-10-01'),
        transactionType?: string(name='TransactionType', example='Consumption'),
      }
    ](name='AccountTransactionsList')
    }(name='AccountTransactionsList'),
    maxResults?: int32(name='MaxResults', example='0'),
    nextToken?: string(name='NextToken', example='ASHDADS'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='SUCCESS'),
  requestId?: string(name='RequestId', example='asadadad-edafafafaasd'),
  success?: boolean(name='Success', example='true'),
}

model QueryAccountTransactionDetailsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAccountTransactionDetailsResponseBody(name='body'),
}

async function queryAccountTransactionDetailsWithOptions(request: QueryAccountTransactionDetailsRequest, runtime: Util.RuntimeOptions): QueryAccountTransactionDetailsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createTimeEnd)) {
    query['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    query['CreateTimeStart'] = request.createTimeStart;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.recordID)) {
    query['RecordID'] = request.recordID;
  }
  if (!Util.isUnset(request.transactionChannel)) {
    query['TransactionChannel'] = request.transactionChannel;
  }
  if (!Util.isUnset(request.transactionChannelSN)) {
    query['TransactionChannelSN'] = request.transactionChannelSN;
  }
  if (!Util.isUnset(request.transactionNumber)) {
    query['TransactionNumber'] = request.transactionNumber;
  }
  if (!Util.isUnset(request.transactionType)) {
    query['TransactionType'] = request.transactionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAccountTransactionDetails',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAccountTransactionDetails(request: QueryAccountTransactionDetailsRequest): QueryAccountTransactionDetailsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountTransactionDetailsWithOptions(request, runtime);
}

model QueryAccountTransactionsRequest {
  createTimeEnd?: string(name='CreateTimeEnd', example='2020-03-06T01:55:00Z'),
  createTimeStart?: string(name='CreateTimeStart', example='2020-03-05T01:46:09Z'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  recordID?: string(name='RecordID', example='20200302'),
  transactionChannel?: string(name='TransactionChannel', example='AccountBalance'),
  transactionChannelSN?: string(name='TransactionChannelSN', example='12342134'),
  transactionFlow?: string(name='TransactionFlow', example='Income'),
  transactionNumber?: string(name='TransactionNumber', example='133314076'),
  transactionType?: string(name='TransactionType', example='Payment'),
}

model QueryAccountTransactionsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    accountTransactionsList?: {
      accountTransactionsList?: [ 
      {
        amount?: string(name='Amount', example='0'),
        balance?: string(name='Balance', example='0'),
        billingCycle?: string(name='BillingCycle', example='2020-03'),
        fundType?: string(name='FundType', example='Cash'),
        recordID?: string(name='RecordID', example='2020030242'),
        remarks?: string(name='Remarks', example='NAT_GW'),
        transactionAccount?: string(name='TransactionAccount', example='213562146'),
        transactionChannel?: string(name='TransactionChannel', example='AccountBalance'),
        transactionChannelSN?: string(name='TransactionChannelSN', example='1234354325'),
        transactionFlow?: string(name='TransactionFlow', example='Expense'),
        transactionNumber?: string(name='TransactionNumber', example='43342334'),
        transactionTime?: string(name='TransactionTime', example='2020-03-10T02:03:20Z'),
        transactionType?: string(name='TransactionType', example='Consumption'),
      }
    ](name='AccountTransactionsList')
    }(name='AccountTransactionsList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='10'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='8634E02D-0942-4B1D-8295-5352FE9A1F39'),
  success?: boolean(name='Success', example='true'),
}

model QueryAccountTransactionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAccountTransactionsResponseBody(name='body'),
}

async function queryAccountTransactionsWithOptions(request: QueryAccountTransactionsRequest, runtime: Util.RuntimeOptions): QueryAccountTransactionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createTimeEnd)) {
    query['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    query['CreateTimeStart'] = request.createTimeStart;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.recordID)) {
    query['RecordID'] = request.recordID;
  }
  if (!Util.isUnset(request.transactionChannel)) {
    query['TransactionChannel'] = request.transactionChannel;
  }
  if (!Util.isUnset(request.transactionChannelSN)) {
    query['TransactionChannelSN'] = request.transactionChannelSN;
  }
  if (!Util.isUnset(request.transactionFlow)) {
    query['TransactionFlow'] = request.transactionFlow;
  }
  if (!Util.isUnset(request.transactionNumber)) {
    query['TransactionNumber'] = request.transactionNumber;
  }
  if (!Util.isUnset(request.transactionType)) {
    query['TransactionType'] = request.transactionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAccountTransactions',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAccountTransactions(request: QueryAccountTransactionsRequest): QueryAccountTransactionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAccountTransactionsWithOptions(request, runtime);
}

model QueryAvailableInstancesRequest {
  createTimeEnd?: string(name='CreateTimeEnd', example='2016-05-23T12:00:00Z'),
  createTimeStart?: string(name='CreateTimeStart', example='2016-05-23T12:00:00Z'),
  endTimeEnd?: string(name='EndTimeEnd', example='2016-05-23T12:00:00Z'),
  endTimeStart?: string(name='EndTimeStart', example='2016-05-23T12:00:00Z'),
  instanceIDs?: string(name='InstanceIDs', example='rm-xxxxxxxxxxxx'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  region?: string(name='Region', example='cn-hangzhou'),
  renewStatus?: string(name='RenewStatus', example='AutoRenewal'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model QueryAvailableInstancesResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    instanceList?: [ 
      {
        createTime?: string(name='CreateTime', example='2019-09-08T16:00:00Z'),
        endTime?: string(name='EndTime', example='2019-09-08T16:00:00Z'),
        expectedReleaseTime?: string(name='ExpectedReleaseTime', example='2019-09-08T16:00:00Z'),
        instanceID?: string(name='InstanceID', example='1049056'),
        ownerId?: long(name='OwnerId', example='325352345'),
        productCode?: string(name='ProductCode', example='rds'),
        productType?: string(name='ProductType', example='rds'),
        region?: string(name='Region', example='cn-hangzhou'),
        releaseTime?: string(name='ReleaseTime', example='2019-09-08T16:00:00Z'),
        renewStatus?: string(name='RenewStatus', example='ManualRenewal'),
        renewalDuration?: int32(name='RenewalDuration', example='1'),
        renewalDurationUnit?: string(name='RenewalDurationUnit', example='M'),
        seller?: string(name='Seller', example='123123123'),
        sellerId?: long(name='SellerId', example='123123123'),
        status?: string(name='Status'),
        stopTime?: string(name='StopTime', example='2019-09-08T16:00:00Z'),
        subStatus?: string(name='SubStatus'),
        subscriptionType?: string(name='SubscriptionType', example='Subscription'),
      }
    ](name='InstanceList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='11'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='C7C15585-8349-4C62-BEE4-5A391841B9BE'),
  success?: boolean(name='Success', example='true'),
}

model QueryAvailableInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryAvailableInstancesResponseBody(name='body'),
}

async function queryAvailableInstancesWithOptions(request: QueryAvailableInstancesRequest, runtime: Util.RuntimeOptions): QueryAvailableInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createTimeEnd)) {
    query['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    query['CreateTimeStart'] = request.createTimeStart;
  }
  if (!Util.isUnset(request.endTimeEnd)) {
    query['EndTimeEnd'] = request.endTimeEnd;
  }
  if (!Util.isUnset(request.endTimeStart)) {
    query['EndTimeStart'] = request.endTimeStart;
  }
  if (!Util.isUnset(request.instanceIDs)) {
    query['InstanceIDs'] = request.instanceIDs;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.renewStatus)) {
    query['RenewStatus'] = request.renewStatus;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryAvailableInstances',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryAvailableInstances(request: QueryAvailableInstancesRequest): QueryAvailableInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryAvailableInstancesWithOptions(request, runtime);
}

model QueryBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='123'),
  billingCycle?: string(name='BillingCycle', example='2018-07'),
  isDisplayLocalCurrency?: boolean(name='IsDisplayLocalCurrency', example='false'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', example='true'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
  type?: string(name='Type', example='SubscriptionOrder'),
}

model QueryBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185xxxxx489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-02'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        afterTaxAmount?: float(name='AfterTaxAmount', example='0'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        item?: string(name='Item', example='SubscriptionOrder'),
        outstandingAmount?: float(name='OutstandingAmount', example='0'),
        ownerID?: string(name='OwnerID', example='3532535235'),
        paymentAmount?: float(name='PaymentAmount', example='0'),
        paymentCurrency?: string(name='PaymentCurrency', example='USD'),
        paymentTime?: string(name='PaymentTime', example='2020-03-11 08:00:00'),
        paymentTransactionID?: string(name='PaymentTransactionID', example='2O3AADJFEAF2PDKSFAMFCB11918'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='100'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        recordID?: string(name='RecordID', example='2020xxxx5912'),
        roundDownDiscount?: string(name='RoundDownDiscount', example='0'),
        status?: string(name='Status', example='PayFinish'),
        subOrderId?: string(name='SubOrderId', example='325345254353'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tax?: float(name='Tax', example='0'),
        usageEndTime?: string(name='UsageEndTime', example='2020-03-11 08:00:00'),
        usageStartTime?: string(name='UsageStartTime', example='2020-03-11 07:00:00'),
      }
    ](name='Item')
    }(name='Items'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='1'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='AE3F4057-DFC9-4B81-8858-F620651010C9'),
  success?: boolean(name='Success', example='true'),
}

model QueryBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBillResponseBody(name='body'),
}

async function queryBillWithOptions(request: QueryBillRequest, runtime: Util.RuntimeOptions): QueryBillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.isDisplayLocalCurrency)) {
    query['IsDisplayLocalCurrency'] = request.isDisplayLocalCurrency;
  }
  if (!Util.isUnset(request.isHideZeroCharge)) {
    query['IsHideZeroCharge'] = request.isHideZeroCharge;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryBill',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBill(request: QueryBillRequest): QueryBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBillWithOptions(request, runtime);
}

model QueryBillOverviewRequest {
  billOwnerId?: long(name='BillOwnerId', example='1234'),
  billingCycle?: string(name='BillingCycle', example='2018-07'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model QueryBillOverviewResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185766xxxx'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-03'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        afterTaxAmount?: float(name='AfterTaxAmount', example='0'),
        billAccountID?: string(name='BillAccountID', example='185766xxxx'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        item?: string(name='Item', example='PayAsYouGoBill'),
        outstandingAmount?: float(name='OutstandingAmount', example='0'),
        ownerID?: string(name='OwnerID', example='1222'),
        paymentAmount?: float(name='PaymentAmount', example='100'),
        paymentCurrency?: string(name='PaymentCurrency', example='USD'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='100'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='100'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail', example='NAT Gateway (Pay-As-You-Go)'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        roundDownDiscount?: string(name='RoundDownDiscount', example='0'),
        subscriptionType?: string(name='SubscriptionType', example='Subscription'),
        tax?: float(name='Tax', example='0'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='BCB1E1BC-05BF-4217-80EE-BF09A29407BA'),
  success?: boolean(name='Success', example='true'),
}

model QueryBillOverviewResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBillOverviewResponseBody(name='body'),
}

async function queryBillOverviewWithOptions(request: QueryBillOverviewRequest, runtime: Util.RuntimeOptions): QueryBillOverviewResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryBillOverview',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBillOverview(request: QueryBillOverviewRequest): QueryBillOverviewResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBillOverviewWithOptions(request, runtime);
}

model QueryBillToOSSSubscriptionResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185xxxxx03489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    items?: {
      item?: [ 
      {
        bucketOwnerId?: long(name='BucketOwnerId', example='1369168081849304'),
        bucketPath?: string(name='BucketPath', example='Billing/BillingItemDetailMonthly/'),
        rowLimitPerFile?: int32(name='RowLimitPerFile'),
        subscribeBucket?: string(name='SubscribeBucket', example='billingtestbucket'),
        subscribeLanguage?: string(name='SubscribeLanguage', example='zh'),
        subscribeTime?: string(name='SubscribeTime', example='2019-10-30 15:40:11'),
        subscribeType?: string(name='SubscribeType', example='BillingItemDetailForBillingPeriod'),
      }
    ](name='Item')
    }(name='Items'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='9EEAE43F-1E4D-4734-AE93-5049878AC103'),
  success?: boolean(name='Success', example='true'),
}

model QueryBillToOSSSubscriptionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryBillToOSSSubscriptionResponseBody(name='body'),
}

async function queryBillToOSSSubscriptionWithOptions(runtime: Util.RuntimeOptions): QueryBillToOSSSubscriptionResponse {
  var req = new OpenApi.OpenApiRequest{};
  var params = new OpenApi.Params{
    action = 'QueryBillToOSSSubscription',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryBillToOSSSubscription(): QueryBillToOSSSubscriptionResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryBillToOSSSubscriptionWithOptions(runtime);
}

model QueryCashCouponsRequest {
  effectiveOrNot?: boolean(name='EffectiveOrNot', example='true'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd', example='2018-08-01T00:00:00Z'),
  expiryTimeStart?: string(name='ExpiryTimeStart', example='2018-08-01T00:00:00Z'),
}

model QueryCashCouponsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    cashCoupon?: [ 
    {
      applicableProducts?: string(name='ApplicableProducts'),
      applicableScenarios?: string(name='ApplicableScenarios'),
      balance?: string(name='Balance', example='100.00'),
      cashCouponId?: long(name='CashCouponId', example='34534253254325'),
      cashCouponNo?: string(name='CashCouponNo', example='Q-b1485def8f04a'),
      effectiveTime?: string(name='EffectiveTime', example='2018-08-02T15:15:50Z'),
      expiryTime?: string(name='ExpiryTime', example='2019-01-29T15:15:50Z'),
      grantedTime?: string(name='GrantedTime', example='2018-08-02T15:15:50Z'),
      nominalValue?: string(name='NominalValue', example='100.00'),
      status?: string(name='Status', example='Available'),
    }
  ](name='CashCoupon')
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='147B566E-DB4C-4E43-BDBB-5DB1D9D268DB'),
  success?: boolean(name='Success', example='true'),
}

model QueryCashCouponsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCashCouponsResponseBody(name='body'),
}

async function queryCashCouponsWithOptions(request: QueryCashCouponsRequest, runtime: Util.RuntimeOptions): QueryCashCouponsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.effectiveOrNot)) {
    query['EffectiveOrNot'] = request.effectiveOrNot;
  }
  if (!Util.isUnset(request.expiryTimeEnd)) {
    query['ExpiryTimeEnd'] = request.expiryTimeEnd;
  }
  if (!Util.isUnset(request.expiryTimeStart)) {
    query['ExpiryTimeStart'] = request.expiryTimeStart;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCashCoupons',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCashCoupons(request: QueryCashCouponsRequest): QueryCashCouponsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCashCouponsWithOptions(request, runtime);
}

model QueryCommodityListRequest {
  productCode?: string(name='ProductCode', example='ecs'),
}

model QueryCommodityListResponseBody = {
  code?: string(name='Code', example='NotApplicable'),
  data?: {
    commodityList?: [ 
      {
        chargeType?: string(name='ChargeType', example='POSTPAY'),
        commodityCode?: string(name='CommodityCode', example='ecs'),
        commodityName?: string(name='CommodityName'),
      }
    ](name='CommodityList'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', description='Id of the request', example='CC706AAC-75A6-55B5-9AB7-7D171C6C7655'),
  success?: boolean(name='Success', example='True'),
}

model QueryCommodityListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCommodityListResponseBody(name='body'),
}

async function queryCommodityListWithOptions(request: QueryCommodityListRequest, runtime: Util.RuntimeOptions): QueryCommodityListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCommodityList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCommodityList(request: QueryCommodityListRequest): QueryCommodityListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCommodityListWithOptions(request, runtime);
}

model QueryCostUnitRequest {
  ownerUid?: long(name='OwnerUid', example='28394563429587'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  parentUnitId?: long(name='ParentUnitId', example='-1'),
}

model QueryCostUnitResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    costUnitDtoList?: [ 
      {
        ownerUid?: long(name='OwnerUid', example='2343464'),
        parentUnitId?: long(name='ParentUnitId', example='-1'),
        unitId?: long(name='UnitId', example='23534'),
        unitName?: string(name='UnitName', example='test'),
      }
    ](name='CostUnitDtoList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model QueryCostUnitResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCostUnitResponseBody(name='body'),
}

async function queryCostUnitWithOptions(request: QueryCostUnitRequest, runtime: Util.RuntimeOptions): QueryCostUnitResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerUid)) {
    query['OwnerUid'] = request.ownerUid;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.parentUnitId)) {
    query['ParentUnitId'] = request.parentUnitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCostUnit',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCostUnit(request: QueryCostUnitRequest): QueryCostUnitResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCostUnitWithOptions(request, runtime);
}

model QueryCostUnitResourceRequest {
  ownerUid?: long(name='OwnerUid', example='23453245'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  unitId?: long(name='UnitId', example='235325'),
}

model QueryCostUnitResourceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    costUnit?: {
      ownerUid?: long(name='OwnerUid', example='321432'),
      parentUnitId?: long(name='ParentUnitId', example='23421'),
      unitId?: long(name='UnitId', example='123412'),
      unitName?: string(name='UnitName', example='test'),
    }(name='CostUnit'),
    costUnitStatisInfo?: {
      resourceCount?: long(name='ResourceCount', example='1'),
      resourceGroupCount?: long(name='ResourceGroupCount', example='1'),
      subUnitCount?: long(name='SubUnitCount', example='2'),
      totalResourceCount?: long(name='TotalResourceCount', example='3'),
      totalResourceGroupCount?: long(name='TotalResourceGroupCount', example='2'),
      totalUserCount?: long(name='TotalUserCount', example='2'),
      userCount?: long(name='UserCount', example='0'),
    }(name='CostUnitStatisInfo'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    resourceInstanceDtoList?: [ 
      {
        apportionCode?: string(name='ApportionCode', example='test'),
        apportionName?: string(name='ApportionName', example='test'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        commodityName?: string(name='CommodityName'),
        relatedResources?: string(name='RelatedResources', example='oss'),
        resourceGroup?: string(name='ResourceGroup'),
        resourceId?: string(name='ResourceId', example='OSSBAG-cn-v0h1s4hma018'),
        resourceNick?: string(name='ResourceNick', example='testResource'),
        resourceStatus?: string(name='ResourceStatus', example='Available'),
        resourceTag?: string(name='ResourceTag', example='testResource'),
        resourceType?: string(name='ResourceType', example='FPT_ossbag_absolute_Storage_bj'),
        resourceUserId?: long(name='ResourceUserId', example='2424242134'),
        resourceUserName?: string(name='ResourceUserName', example='test@test.aliyun.com'),
      }
    ](name='ResourceInstanceDtoList'),
    totalCount?: int32(name='TotalCount', example='12'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='04332CB7-9A57-4461-97E0-02821D044414'),
  success?: boolean(name='Success', example='true'),
}

model QueryCostUnitResourceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCostUnitResourceResponseBody(name='body'),
}

async function queryCostUnitResourceWithOptions(request: QueryCostUnitResourceRequest, runtime: Util.RuntimeOptions): QueryCostUnitResourceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerUid)) {
    query['OwnerUid'] = request.ownerUid;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.unitId)) {
    query['UnitId'] = request.unitId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCostUnitResource',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCostUnitResource(request: QueryCostUnitResourceRequest): QueryCostUnitResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCostUnitResourceWithOptions(request, runtime);
}

model QueryCustomerAddressListRequest {
  ownerId?: long(name='OwnerId'),
}

model QueryCustomerAddressListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    customerInvoiceAddressList?: {
      customerInvoiceAddress?: [ 
      {
        addressee?: string(name='Addressee', example='test'),
        bizType?: string(name='BizType', example='test'),
        city?: string(name='City'),
        county?: string(name='County'),
        deliveryAddress?: string(name='DeliveryAddress'),
        id?: long(name='Id', description='ID„ÄÇ', example='311601051'),
        phone?: string(name='Phone', example='138xxxxxxxx'),
        postalCode?: string(name='PostalCode', example='000000'),
        province?: string(name='Province'),
        street?: string(name='Street'),
        userId?: long(name='UserId', example='4382956342857'),
        userNick?: string(name='UserNick', example='testNick'),
      }
    ](name='CustomerInvoiceAddress')
    }(name='CustomerInvoiceAddressList'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='BBEF51A3-E933-4F40-A534-C673CBDB9C80'),
  success?: boolean(name='Success', example='true'),
}

model QueryCustomerAddressListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryCustomerAddressListResponseBody(name='body'),
}

async function queryCustomerAddressListWithOptions(request: QueryCustomerAddressListRequest, runtime: Util.RuntimeOptions): QueryCustomerAddressListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryCustomerAddressList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryCustomerAddressList(request: QueryCustomerAddressListRequest): QueryCustomerAddressListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryCustomerAddressListWithOptions(request, runtime);
}

model QueryDPUtilizationDetailRequest {
  commodityCode?: string(name='CommodityCode', example='ecsRi'),
  deductedInstanceId?: string(name='DeductedInstanceId', example='oss-123123'),
  endTime?: string(name='EndTime', example='2019-05-23 12:00:00'),
  includeShare?: boolean(name='IncludeShare', example='true'),
  instanceId?: string(name='InstanceId', example='oss-123123'),
  instanceSpec?: string(name='InstanceSpec', example='Instancetyp'),
  lastToken?: string(name='LastToken', example='CAESF***zNTAw'),
  limit?: int32(name='Limit', example='20'),
  prodCode?: string(name='ProdCode', example='oss'),
  startTime?: string(name='StartTime', example='2019-05-23 12:00:00'),
}

model QueryDPUtilizationDetailResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    detailList?: {
      detailList?: [ 
      {
        deductDate?: string(name='DeductDate', example='2019/5/23 12:00'),
        deductFactorTotal?: float(name='DeductFactorTotal', example='1'),
        deductHours?: float(name='DeductHours', example='24'),
        deductMeasure?: float(name='DeductMeasure', example='1'),
        deductQuantity?: float(name='DeductQuantity', example='1'),
        deductedCommodityCode?: string(name='DeductedCommodityCode', example='rds'),
        deductedInstanceId?: string(name='DeductedInstanceId', example='oss-123123'),
        deductedProductDetail?: string(name='DeductedProductDetail'),
        instanceId?: string(name='InstanceId', example='oss-123123'),
        instanceSpec?: string(name='InstanceSpec', example='rds.mysql.s3.large'),
        region?: string(name='Region', example='cn-hangzhou'),
        resCode?: string(name='ResCode', example='PutRequest'),
        shareUid?: long(name='ShareUid', example='1111111111'),
        uid?: long(name='Uid', example='1111111111'),
      }
    ](name='DetailList')
    }(name='DetailList'),
    nextToken?: string(name='NextToken', example='CAESF***zNTAw'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='DF58589C-A06C-4224-8615-7797E6474FA3'),
  success?: boolean(name='Success', example='true'),
}

model QueryDPUtilizationDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryDPUtilizationDetailResponseBody(name='body'),
}

async function queryDPUtilizationDetailWithOptions(request: QueryDPUtilizationDetailRequest, runtime: Util.RuntimeOptions): QueryDPUtilizationDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.commodityCode)) {
    query['CommodityCode'] = request.commodityCode;
  }
  if (!Util.isUnset(request.deductedInstanceId)) {
    query['DeductedInstanceId'] = request.deductedInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.includeShare)) {
    query['IncludeShare'] = request.includeShare;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.lastToken)) {
    query['LastToken'] = request.lastToken;
  }
  if (!Util.isUnset(request.limit)) {
    query['Limit'] = request.limit;
  }
  if (!Util.isUnset(request.prodCode)) {
    query['ProdCode'] = request.prodCode;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryDPUtilizationDetail',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryDPUtilizationDetail(request: QueryDPUtilizationDetailRequest): QueryDPUtilizationDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryDPUtilizationDetailWithOptions(request, runtime);
}

model QueryEvaluateListRequest {
  billCycle?: string(name='BillCycle', example='2020-03'),
  bizTypeList?: [ string ](name='BizTypeList', example='ALIYUN'),
  endAmount?: long(name='EndAmount', example='1000'),
  endBizTime?: string(name='EndBizTime', example='2020-02-02 15:00:00'),
  endSearchTime?: string(name='EndSearchTime', example='2020-03-02 12:00:00'),
  outBizId?: string(name='OutBizId', example='2387432832696'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  sortType?: int32(name='SortType', example='1'),
  startAmount?: long(name='StartAmount', example='100'),
  startBizTime?: string(name='StartBizTime', example='2020-02-02 12:00:00'),
  startSearchTime?: string(name='StartSearchTime', example='2020-02-02 12:00:00'),
  type?: int32(name='Type', example='1'),
}

model QueryEvaluateListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    evaluateList?: {
      evaluate?: [ 
      {
        billCycle?: string(name='BillCycle', example='202002'),
        billId?: long(name='BillId', example='234543254325'),
        bizTime?: string(name='BizTime', example='2018-10-10 18:05:44'),
        bizType?: string(name='BizType', example='ALIYUN'),
        canInvoiceAmount?: long(name='CanInvoiceAmount', example='123213'),
        gmtCreate?: string(name='GmtCreate', example='2018-10-10 18:05:44'),
        gmtModified?: string(name='GmtModified', example='2018-10-10 18:05:44'),
        id?: long(name='Id', example='1325321532'),
        invoicedAmount?: long(name='InvoicedAmount', example='10000'),
        itemId?: long(name='ItemId', example='23453245'),
        name?: string(name='Name'),
        offsetAcceptAmount?: long(name='OffsetAcceptAmount', example='500'),
        offsetCostAmount?: long(name='OffsetCostAmount', example='500'),
        opId?: string(name='OpId', example='12341'),
        originalAmount?: long(name='OriginalAmount', example='-10000'),
        outBizId?: string(name='OutBizId', example='124324213421'),
        presentAmount?: long(name='PresentAmount', example='-10000'),
        status?: int32(name='Status', example='1'),
        type?: int32(name='Type', example='1'),
        userId?: long(name='UserId', example='2738543'),
        userNick?: string(name='UserNick', example='test'),
      }
    ](name='Evaluate')
    }(name='EvaluateList'),
    hostId?: string(name='HostId', example='cn'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    totalCount?: int32(name='TotalCount', example='2'),
    totalInvoiceAmount?: long(name='TotalInvoiceAmount', example='12344'),
    totalUnAppliedInvoiceAmount?: long(name='TotalUnAppliedInvoiceAmount', example='12344'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='D35FF10E-1B2E-4ABA-8401-0AE17725F50B'),
  success?: boolean(name='Success', example='true'),
}

model QueryEvaluateListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryEvaluateListResponseBody(name='body'),
}

async function queryEvaluateListWithOptions(request: QueryEvaluateListRequest, runtime: Util.RuntimeOptions): QueryEvaluateListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billCycle)) {
    query['BillCycle'] = request.billCycle;
  }
  if (!Util.isUnset(request.bizTypeList)) {
    query['BizTypeList'] = request.bizTypeList;
  }
  if (!Util.isUnset(request.endAmount)) {
    query['EndAmount'] = request.endAmount;
  }
  if (!Util.isUnset(request.endBizTime)) {
    query['EndBizTime'] = request.endBizTime;
  }
  if (!Util.isUnset(request.endSearchTime)) {
    query['EndSearchTime'] = request.endSearchTime;
  }
  if (!Util.isUnset(request.outBizId)) {
    query['OutBizId'] = request.outBizId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.sortType)) {
    query['SortType'] = request.sortType;
  }
  if (!Util.isUnset(request.startAmount)) {
    query['StartAmount'] = request.startAmount;
  }
  if (!Util.isUnset(request.startBizTime)) {
    query['StartBizTime'] = request.startBizTime;
  }
  if (!Util.isUnset(request.startSearchTime)) {
    query['StartSearchTime'] = request.startSearchTime;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryEvaluateList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryEvaluateList(request: QueryEvaluateListRequest): QueryEvaluateListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryEvaluateListWithOptions(request, runtime);
}

model QueryFinancialAccountInfoRequest {
  userId?: long(name='UserId', example='1990699401005016'),
}

model QueryFinancialAccountInfoResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountType?: string(name='AccountType', example='MEMBER'),
    isFinancialAccount?: boolean(name='IsFinancialAccount', example='true'),
    memberGroupId?: long(name='MemberGroupId', example='124'),
    memberGroupName?: string(name='MemberGroupName'),
    memberNickName?: string(name='MemberNickName'),
    userName?: string(name='UserName', example='killortop3'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='97426BC2-792E-41F5-92B8-73C710DA7779'),
  success?: boolean(name='Success', example='true'),
}

model QueryFinancialAccountInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryFinancialAccountInfoResponseBody(name='body'),
}

async function queryFinancialAccountInfoWithOptions(request: QueryFinancialAccountInfoRequest, runtime: Util.RuntimeOptions): QueryFinancialAccountInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryFinancialAccountInfo',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryFinancialAccountInfo(request: QueryFinancialAccountInfoRequest): QueryFinancialAccountInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryFinancialAccountInfoWithOptions(request, runtime);
}

model QueryInstanceBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='122'),
  billingCycle?: string(name='BillingCycle', example='2020-03'),
  billingDate?: string(name='BillingDate', example='2020-03-03'),
  granularity?: string(name='Granularity', example='MONTHLY'),
  isBillingItem?: boolean(name='IsBillingItem', example='false'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', example='false'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
}

model QueryInstanceBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185xxxx3489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-03'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        billingDate?: string(name='BillingDate', example='2020-03'),
        billingItem?: string(name='BillingItem'),
        billingType?: string(name='BillingType'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage', example='NULL'),
        instanceConfig?: string(name='InstanceConfig', example='CPU:12'),
        instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh'),
        instanceSpec?: string(name='InstanceSpec', example='ecs.sn1ne.3xlarge'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        item?: string(name='Item', example='PayAsYouGoBill'),
        listPrice?: string(name='ListPrice', example='100'),
        listPriceUnit?: string(name='ListPriceUnit'),
        nickName?: string(name='NickName', example='test'),
        outstandingAmount?: float(name='OutstandingAmount', example='0'),
        ownerID?: string(name='OwnerID', example='169***013'),
        paymentAmount?: float(name='PaymentAmount', example='0'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        region?: string(name='Region'),
        resourceGroup?: string(name='ResourceGroup'),
        servicePeriod?: string(name='ServicePeriod', example='10'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='tag'),
        usage?: string(name='Usage', example='100'),
        usageUnit?: string(name='UsageUnit', example='GB'),
        zone?: string(name='Zone', example='cn-hangzhou-h'),
      }
    ](name='Item')
    }(name='Items'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='2'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model QueryInstanceBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInstanceBillResponseBody(name='body'),
}

async function queryInstanceBillWithOptions(request: QueryInstanceBillRequest, runtime: Util.RuntimeOptions): QueryInstanceBillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.billingDate)) {
    query['BillingDate'] = request.billingDate;
  }
  if (!Util.isUnset(request.granularity)) {
    query['Granularity'] = request.granularity;
  }
  if (!Util.isUnset(request.isBillingItem)) {
    query['IsBillingItem'] = request.isBillingItem;
  }
  if (!Util.isUnset(request.isHideZeroCharge)) {
    query['IsHideZeroCharge'] = request.isHideZeroCharge;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryInstanceBill',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryInstanceBill(request: QueryInstanceBillRequest): QueryInstanceBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInstanceBillWithOptions(request, runtime);
}

model QueryInstanceByTagRequest {
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', example='ecs'),
      value?: string(name='Value', example='001'),
    }
  ](name='Tag'),
}

model QueryInstanceByTagResponseBody = {
  code?: string(name='Code', example='PARAM_ERROR'),
  message?: string(name='Message', example='param is null'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCm'),
  requestId?: string(name='RequestId', example='9EC6C0B7-3397-5FAE-9915-8972CDDB1211'),
  success?: boolean(name='Success', example='true'),
  tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', example='spn-xxxxx'),
      resourceType?: string(name='ResourceType', example='instance'),
      tag?: [ 
        {
          key?: string(name='Key', example='tag1'),
          value?: string(name='Value', example='10'),
        }
      ](name='Tag'),
    }
  ](name='TagResource'),
}

model QueryInstanceByTagResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInstanceByTagResponseBody(name='body'),
}

async function queryInstanceByTagWithOptions(request: QueryInstanceByTagRequest, runtime: Util.RuntimeOptions): QueryInstanceByTagResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryInstanceByTag',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryInstanceByTag(request: QueryInstanceByTagRequest): QueryInstanceByTagResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInstanceByTagWithOptions(request, runtime);
}

model QueryInstanceGaapCostRequest {
  billingCycle?: string(name='BillingCycle', example='2020-03'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
}

model QueryInstanceGaapCostResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostId?: string(name='HostId', example='1.1.1.1'),
    modules?: {
      module?: [ 
      {
        accountingUnit?: string(name='AccountingUnit'),
        billType?: string(name='BillType', example='SubscriptionOrder'),
        billingCycle?: string(name='BillingCycle', example='2020-03'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: string(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: string(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: string(name='DeductedByPrepaidCard', example='0'),
        gaapDeductedByCashCoupons?: string(name='GaapDeductedByCashCoupons', example='0'),
        gaapDeductedByCoupons?: string(name='GaapDeductedByCoupons', example='0'),
        gaapDeductedByPrepaidCard?: string(name='GaapDeductedByPrepaidCard', example='0'),
        gaapPaymentAmount?: string(name='GaapPaymentAmount', example='0'),
        gaapPretaxAmount?: string(name='GaapPretaxAmount', example='0'),
        gaapPretaxAmountLocal?: string(name='GaapPretaxAmountLocal', example='0'),
        gaapPretaxGrossAmount?: string(name='GaapPretaxGrossAmount', example='0'),
        gaapPricingDiscount?: string(name='GaapPricingDiscount', example='0'),
        instanceID?: string(name='InstanceID', example='OSSBAG-cn-0xl0xxxxxx'),
        monthGaapDeductedByCashCoupons?: string(name='MonthGaapDeductedByCashCoupons', example='0.75'),
        monthGaapDeductedByCoupons?: string(name='MonthGaapDeductedByCoupons', example='0'),
        monthGaapDeductedByPrepaidCard?: string(name='MonthGaapDeductedByPrepaidCard', example='0'),
        monthGaapPaymentAmount?: string(name='MonthGaapPaymentAmount', example='0'),
        monthGaapPretaxAmount?: string(name='MonthGaapPretaxAmount', example='0'),
        monthGaapPretaxAmountLocal?: string(name='MonthGaapPretaxAmountLocal', example='0.99'),
        monthGaapPretaxGrossAmount?: string(name='MonthGaapPretaxGrossAmount', example='0.99'),
        monthGaapPricingDiscount?: string(name='MonthGaapPricingDiscount', example='0,.25'),
        orderId?: string(name='OrderId', example='213123213123'),
        orderType?: string(name='OrderType', example='New'),
        ownerID?: string(name='OwnerID', example='123213123123'),
        payTime?: string(name='PayTime', example='2018-06-15 15:59:57'),
        payerAccount?: string(name='PayerAccount', example='23534534'),
        paymentAmount?: string(name='PaymentAmount', example='0'),
        paymentCurrency?: string(name='PaymentCurrency', example='CNY'),
        pretaxAmount?: string(name='PretaxAmount', example='0'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount', example='123'),
        pricingDiscount?: string(name='PricingDiscount', example='1'),
        productCode?: string(name='ProductCode', example='rds'),
        productType?: string(name='ProductType', example='rds'),
        region?: string(name='Region', example='cn-hangzhou'),
        resourceGroup?: string(name='ResourceGroup'),
        subOrderId?: string(name='SubOrderId', example='12434345'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='tag'),
        unallocatedDeductedByCashCoupons?: string(name='UnallocatedDeductedByCashCoupons', example='0'),
        unallocatedDeductedByCoupons?: string(name='UnallocatedDeductedByCoupons', example='0'),
        unallocatedDeductedByPrepaidCard?: string(name='UnallocatedDeductedByPrepaidCard', example='0'),
        unallocatedPaymentAmount?: string(name='UnallocatedPaymentAmount', example='0'),
        unallocatedPretaxAmount?: string(name='UnallocatedPretaxAmount', example='0'),
        unallocatedPretaxAmountLocal?: string(name='UnallocatedPretaxAmountLocal', example='0'),
        unallocatedPretaxGrossAmount?: string(name='UnallocatedPretaxGrossAmount', example='0'),
        unallocatedPricingDiscount?: string(name='UnallocatedPricingDiscount', example='0'),
        usageEndDate?: string(name='UsageEndDate', example='2019-05-01 00:00:00'),
        usageStartDate?: string(name='UsageStartDate', example='2019-04-01 00:00:00'),
      }
    ](name='Module')
    }(name='Modules'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='20'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='CCBB1BB9-22F1-4177-867B-7A75D665B488'),
  success?: boolean(name='Success', example='true'),
}

model QueryInstanceGaapCostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInstanceGaapCostResponseBody(name='body'),
}

async function queryInstanceGaapCostWithOptions(request: QueryInstanceGaapCostRequest, runtime: Util.RuntimeOptions): QueryInstanceGaapCostResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryInstanceGaapCost',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryInstanceGaapCost(request: QueryInstanceGaapCostRequest): QueryInstanceGaapCostResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInstanceGaapCostWithOptions(request, runtime);
}

model QueryInvoicingCustomerListRequest {
  ownerId?: long(name='OwnerId'),
}

model QueryInvoicingCustomerListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    customerInvoiceList?: {
      customerInvoice?: [ 
      {
        adjustType?: long(name='AdjustType', example='1'),
        bank?: string(name='Bank'),
        bankNo?: string(name='BankNo', example='389576348573296349853476'),
        customerType?: long(name='CustomerType', example='1'),
        defaultRemark?: string(name='DefaultRemark'),
        endCycle?: long(name='EndCycle', example='202003'),
        gmtCreate?: string(name='GmtCreate', example='2018-09-07 15:26:20'),
        id?: long(name='Id', example='239875502738'),
        invoiceTitle?: string(name='InvoiceTitle'),
        issueType?: long(name='IssueType', example='1'),
        operatingLicenseAddress?: string(name='OperatingLicenseAddress'),
        operatingLicensePhone?: string(name='OperatingLicensePhone', example='138xxxxxxxx'),
        registerNo?: string(name='RegisterNo', example='21343245342534'),
        startCycle?: long(name='StartCycle', example='202002'),
        status?: long(name='Status', example='2'),
        taxationLicense?: string(name='TaxationLicense', example='taxationLicense.jpg'),
        taxpayerType?: long(name='TaxpayerType', example='1'),
        titleChangeInstructions?: string(name='TitleChangeInstructions', example='instruction.doc'),
        type?: long(name='Type', example='1'),
        userId?: long(name='UserId', example='34565465675'),
        userNick?: string(name='UserNick', example='testNick'),
      }
    ](name='CustomerInvoice')
    }(name='CustomerInvoiceList'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='BBEF51A3-E933-4F40-A534-C673CBDB9C80'),
  success?: boolean(name='Success', example='true'),
}

model QueryInvoicingCustomerListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryInvoicingCustomerListResponseBody(name='body'),
}

async function queryInvoicingCustomerListWithOptions(request: QueryInvoicingCustomerListRequest, runtime: Util.RuntimeOptions): QueryInvoicingCustomerListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryInvoicingCustomerList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryInvoicingCustomerList(request: QueryInvoicingCustomerListRequest): QueryInvoicingCustomerListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryInvoicingCustomerListWithOptions(request, runtime);
}

model QueryOrdersRequest {
  createTimeEnd?: string(name='CreateTimeEnd', example='2016-05-23T12:00:00Z'),
  createTimeStart?: string(name='CreateTimeStart', example='2016-05-23T13:00:00Z'),
  orderType?: string(name='OrderType', example='New'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  paymentStatus?: string(name='PaymentStatus', example='Paid'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
}

model QueryOrdersResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostName?: string(name='HostName', example='test'),
    orderList?: {
      order?: [ 
      {
        afterTaxAmount?: string(name='AfterTaxAmount', example='66'),
        commodityCode?: string(name='CommodityCode', example='ecs'),
        createTime?: string(name='CreateTime', example='2017-06-08T09:41:30Z'),
        currency?: string(name='Currency', example='CNY'),
        orderId?: string(name='OrderId', example='34532532'),
        orderType?: string(name='OrderType', example='New'),
        paymentCurrency?: string(name='PaymentCurrency', example='CNY'),
        paymentStatus?: string(name='PaymentStatus', example='Paid'),
        paymentTime?: string(name='PaymentTime', example='2017-06-08T09:41:30Z'),
        pretaxAmount?: string(name='PretaxAmount', example='0'),
        pretaxAmountLocal?: string(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: string(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productType?: string(name='ProductType', example='rds'),
        relatedOrderId?: string(name='RelatedOrderId', example='234535345345342'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tax?: string(name='Tax', example='1'),
      }
    ](name='Order')
    }(name='OrderList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='61293E7A-3406-4447-8620-EC88B0AA66AD'),
  success?: boolean(name='Success', example='true'),
}

model QueryOrdersResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryOrdersResponseBody(name='body'),
}

async function queryOrdersWithOptions(request: QueryOrdersRequest, runtime: Util.RuntimeOptions): QueryOrdersResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.createTimeEnd)) {
    query['CreateTimeEnd'] = request.createTimeEnd;
  }
  if (!Util.isUnset(request.createTimeStart)) {
    query['CreateTimeStart'] = request.createTimeStart;
  }
  if (!Util.isUnset(request.orderType)) {
    query['OrderType'] = request.orderType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.paymentStatus)) {
    query['PaymentStatus'] = request.paymentStatus;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryOrders',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryOrders(request: QueryOrdersRequest): QueryOrdersResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryOrdersWithOptions(request, runtime);
}

model QueryPermissionListRequest {
  relationId?: long(name='RelationId', example='51463'),
}

model QueryPermissionListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    endTime?: string(name='EndTime', example='2021-03-06T15:12Z'),
    masterId?: long(name='MasterId', example='1990699401005016'),
    memberId?: long(name='MemberId', example='1851253838840762'),
    permissionList?: [ 
      {
        endTime?: string(name='EndTime', example='2021-03-05T15:12Z'),
        permissionCode?: string(name='PermissionCode', example='allow_synchronize_finance_identity'),
        permissionName?: string(name='PermissionName'),
        startTime?: string(name='StartTime', example='2021-03-02T15:12Z'),
      }
    ](name='PermissionList'),
    relationType?: string(name='RelationType', example='FinancialManagement'),
    setupTime?: string(name='SetupTime', example='2021-03-02T15:12Z'),
    startTime?: string(name='StartTime', example='2021-03-02T15:12Z'),
    state?: string(name='State', example='RELATED'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='F6E29451-A3CD-4705-806D-0112D08F5C49'),
  success?: boolean(name='Success', example='true'),
}

model QueryPermissionListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPermissionListResponseBody(name='body'),
}

async function queryPermissionListWithOptions(request: QueryPermissionListRequest, runtime: Util.RuntimeOptions): QueryPermissionListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.relationId)) {
    query['RelationId'] = request.relationId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPermissionList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPermissionList(request: QueryPermissionListRequest): QueryPermissionListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPermissionListWithOptions(request, runtime);
}

model QueryPrepaidCardsRequest {
  effectiveOrNot?: boolean(name='EffectiveOrNot', example='true'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd', example='2018-08-01T00:00:00Z'),
  expiryTimeStart?: string(name='ExpiryTimeStart', example='2018-08-01T00:00:00Z'),
}

model QueryPrepaidCardsResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    prepaidCard?: [ 
    {
      applicableProducts?: string(name='ApplicableProducts'),
      applicableScenarios?: string(name='ApplicableScenarios', example='test'),
      balance?: string(name='Balance', example='100.00'),
      effectiveTime?: string(name='EffectiveTime', example='2018-08-03T01:39:11Z'),
      expiryTime?: string(name='ExpiryTime', example='2019-08-04T01:39:11Z'),
      grantedTime?: string(name='GrantedTime', example='2018-08-03T01:39:11Z'),
      nominalValue?: string(name='NominalValue', example='100.00'),
      prepaidCardId?: long(name='PrepaidCardId', example='213432432'),
      prepaidCardNo?: string(name='PrepaidCardNo', example='Q-7edaab979fc9'),
      status?: string(name='Status', example='Available'),
    }
  ](name='PrepaidCard')
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='7EA6C02D-06D0-4213-9C3B-E67910F7D1EB'),
  success?: boolean(name='Success', example='true'),
}

model QueryPrepaidCardsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPrepaidCardsResponseBody(name='body'),
}

async function queryPrepaidCardsWithOptions(request: QueryPrepaidCardsRequest, runtime: Util.RuntimeOptions): QueryPrepaidCardsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.effectiveOrNot)) {
    query['EffectiveOrNot'] = request.effectiveOrNot;
  }
  if (!Util.isUnset(request.expiryTimeEnd)) {
    query['ExpiryTimeEnd'] = request.expiryTimeEnd;
  }
  if (!Util.isUnset(request.expiryTimeStart)) {
    query['ExpiryTimeStart'] = request.expiryTimeStart;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPrepaidCards',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPrepaidCards(request: QueryPrepaidCardsRequest): QueryPrepaidCardsResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPrepaidCardsWithOptions(request, runtime);
}

model QueryPriceEntityListRequest {
  commodityCode?: string(name='CommodityCode', example='ecs'),
}

model QueryPriceEntityListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    priceEntityInfoList?: [ 
      {
        priceEntityCode?: string(name='PriceEntityCode', example='instance_type'),
        priceEntityName?: string(name='PriceEntityName'),
        priceFactorList?: [ 
          {
            priceFactorCode?: string(name='PriceFactorCode', example='vm_region_no'),
            priceFactorName?: string(name='PriceFactorName'),
            priceFactorValueList?: [ string ](name='PriceFactorValueList'),
          }
        ](name='PriceFactorList'),
      }
    ](name='PriceEntityInfoList'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', description='Id of the request', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model QueryPriceEntityListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryPriceEntityListResponseBody(name='body'),
}

async function queryPriceEntityListWithOptions(request: QueryPriceEntityListRequest, runtime: Util.RuntimeOptions): QueryPriceEntityListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryPriceEntityList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryPriceEntityList(request: QueryPriceEntityListRequest): QueryPriceEntityListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryPriceEntityListWithOptions(request, runtime);
}

model QueryProductListRequest {
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
  queryTotalCount?: boolean(name='QueryTotalCount', example='true'),
}

model QueryProductListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='10'),
    productList?: {
      product?: [ 
      {
        productCode?: string(name='ProductCode', example='cdn'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='CDN'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
      }
    ](name='Product')
    }(name='ProductList'),
    totalCount?: int32(name='TotalCount', example='449'),
  }(name='Data'),
  message?: string(name='Message', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', example='94858229-2758-4663-A7D0-99490D541F15'),
  success?: boolean(name='Success', example='true'),
}

model QueryProductListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryProductListResponseBody(name='body'),
}

async function queryProductListWithOptions(request: QueryProductListRequest, runtime: Util.RuntimeOptions): QueryProductListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.queryTotalCount)) {
    query['QueryTotalCount'] = request.queryTotalCount;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryProductList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryProductList(request: QueryProductListRequest): QueryProductListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryProductListWithOptions(request, runtime);
}

model QueryRIUtilizationDetailRequest {
  deductedInstanceId?: string(name='DeductedInstanceId', example='jsdgfsdhgsdjh'),
  endTime?: string(name='EndTime', example='2019-05-23 12:00:00'),
  instanceSpec?: string(name='InstanceSpec', example='Instancetyp'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  RICommodityCode?: string(name='RICommodityCode', example='ecsRi'),
  RIInstanceId?: string(name='RIInstanceId', example='dsudfgdsjh'),
  startTime?: string(name='StartTime', example='2019-05-23 12:00:00'),
}

model QueryRIUtilizationDetailResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    detailList?: {
      detailList?: [ 
      {
        deductDate?: string(name='DeductDate', example='2019-05-23 12:00:00'),
        deductFactorTotal?: float(name='DeductFactorTotal', example='1'),
        deductHours?: string(name='DeductHours', example='24'),
        deductQuantity?: float(name='DeductQuantity', example='1'),
        deductedCommodityCode?: string(name='DeductedCommodityCode', example='rds'),
        deductedInstanceId?: string(name='DeductedInstanceId', example='safdffghfgh'),
        deductedProductDetail?: string(name='DeductedProductDetail'),
        instanceSpec?: string(name='InstanceSpec', example='rds.mysql.s3.large'),
        RIInstanceId?: string(name='RIInstanceId', example='324253645'),
      }
    ](name='DetailList')
    }(name='DetailList'),
    pageNum?: long(name='PageNum', example='1'),
    pageSize?: long(name='PageSize', example='20'),
    totalCount?: long(name='TotalCount', example='0'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='DF58589C-A06C-4224-8615-7797E6474FA3'),
  success?: boolean(name='Success', example='true'),
}

model QueryRIUtilizationDetailResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRIUtilizationDetailResponseBody(name='body'),
}

async function queryRIUtilizationDetailWithOptions(request: QueryRIUtilizationDetailRequest, runtime: Util.RuntimeOptions): QueryRIUtilizationDetailResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.deductedInstanceId)) {
    query['DeductedInstanceId'] = request.deductedInstanceId;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceSpec)) {
    query['InstanceSpec'] = request.instanceSpec;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.RICommodityCode)) {
    query['RICommodityCode'] = request.RICommodityCode;
  }
  if (!Util.isUnset(request.RIInstanceId)) {
    query['RIInstanceId'] = request.RIInstanceId;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRIUtilizationDetail',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRIUtilizationDetail(request: QueryRIUtilizationDetailRequest): QueryRIUtilizationDetailResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRIUtilizationDetailWithOptions(request, runtime);
}

model QueryRedeemRequest {
  effectiveOrNot?: boolean(name='EffectiveOrNot', example='true'),
  expiryTimeEnd?: string(name='ExpiryTimeEnd', example='2018-08-01T00:00:00Z'),
  expiryTimeStart?: string(name='ExpiryTimeStart', example='2018-08-01T00:00:00Z'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='10'),
}

model QueryRedeemResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    pageNum?: long(name='PageNum', example='1'),
    pageSize?: long(name='PageSize', example='10'),
    redeem?: {
      redeem?: [ 
      {
        applicableProducts?: string(name='ApplicableProducts'),
        balance?: string(name='Balance', example='0'),
        effectiveTime?: string(name='EffectiveTime', example='2018-05-14 20:25:00'),
        expiryTime?: string(name='ExpiryTime', example='2018-06-13 20:25:00'),
        grantedTime?: string(name='GrantedTime', example='2018-05-14 20:25:00'),
        nominalValue?: string(name='NominalValue', example='0'),
        redeemId?: string(name='RedeemId', example='1342'),
        redeemNo?: string(name='RedeemNo', example='4889*****1610'),
        specification?: string(name='Specification'),
        status?: string(name='Status', example='Generated'),
      }
    ](name='Redeem')
    }(name='Redeem'),
    totalCount?: long(name='TotalCount', example='1'),
  }(name='Data'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='E503DC7B-E4F0-4B3C-BC89-BCECF1338F0B'),
  success?: boolean(name='Success', example='true'),
}

model QueryRedeemResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRedeemResponseBody(name='body'),
}

async function queryRedeemWithOptions(request: QueryRedeemRequest, runtime: Util.RuntimeOptions): QueryRedeemResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRedeem',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRedeem(request: QueryRedeemRequest): QueryRedeemResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRedeemWithOptions(request, runtime);
}

model QueryRelationListRequest {
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  statusList?: [ string ](name='StatusList', example='RELATED'),
  userId?: long(name='UserId', example='1990699401005016'),
}

model QueryRelationListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    financialRelationInfoList?: [ 
      {
        accountId?: long(name='AccountId', example='1851253838840762'),
        accountName?: string(name='AccountName', example='caiwuyun_test4'),
        accountNickName?: string(name='AccountNickName', example='test4'),
        accountType?: string(name='AccountType', example='MEMBER'),
        endTime?: string(name='EndTime', example='2021-03-08T15:12Z'),
        relationId?: long(name='RelationId', example='51463'),
        relationType?: string(name='RelationType', example='FinancialManagement'),
        setupTime?: string(name='SetupTime', example='2021-03-02T15:12Z'),
        startTime?: string(name='StartTime', example='2021-03-02T15:12Z'),
        state?: string(name='State', example='RELATED'),
      }
    ](name='FinancialRelationInfoList'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='100'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='7FC5D662-37FD-40A6-85B1-33442D815184'),
  success?: boolean(name='Success', example='true'),
}

model QueryRelationListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryRelationListResponseBody(name='body'),
}

async function queryRelationListWithOptions(request: QueryRelationListRequest, runtime: Util.RuntimeOptions): QueryRelationListResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.statusList)) {
    query['StatusList'] = request.statusList;
  }
  if (!Util.isUnset(request.userId)) {
    query['UserId'] = request.userId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryRelationList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryRelationList(request: QueryRelationListRequest): QueryRelationListResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryRelationListWithOptions(request, runtime);
}

model QueryResellerAvailableQuotaRequest {
  itemCodes?: string(name='ItemCodes'),
  ownerId?: long(name='OwnerId'),
}

model QueryResellerAvailableQuotaResponseBody = {
  code?: string(name='Code', example='200'),
  data?: string(name='Data', example='300'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model QueryResellerAvailableQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryResellerAvailableQuotaResponseBody(name='body'),
}

async function queryResellerAvailableQuotaWithOptions(request: QueryResellerAvailableQuotaRequest, runtime: Util.RuntimeOptions): QueryResellerAvailableQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.itemCodes)) {
    query['ItemCodes'] = request.itemCodes;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryResellerAvailableQuota',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryResellerAvailableQuota(request: QueryResellerAvailableQuotaRequest): QueryResellerAvailableQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryResellerAvailableQuotaWithOptions(request, runtime);
}

model QueryResourcePackageInstancesRequest {
  expiryTimeEnd?: string(name='ExpiryTimeEnd', example='2020-02-02T13:00:00Z'),
  expiryTimeStart?: string(name='ExpiryTimeStart', example='2020-02-02T12:00:00Z'),
  includePartner?: boolean(name='IncludePartner', example='true'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  productCode?: string(name='ProductCode', example='rds'),
}

model QueryResourcePackageInstancesResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostId?: string(name='HostId', example='cn'),
    instances?: {
      instance?: [ 
      {
        applicableProducts?: {
          product?: [ string ](name='Product')
        }(name='ApplicableProducts'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        deductType?: string(name='DeductType', example='Absolute'),
        effectiveTime?: string(name='EffectiveTime', example='2018-09-12T09:51:56Z'),
        expiryTime?: string(name='ExpiryTime', example='2019-03-12T16:00:00Z'),
        instanceId?: string(name='InstanceId', example='OSSBAG-cn-v0h1s4hma01'),
        packageType?: string(name='PackageType', example='FPT_ossbag_absolute_Storage_sh'),
        region?: string(name='Region', example='cn-hangzhou'),
        remainingAmount?: string(name='RemainingAmount', example='40.000'),
        remainingAmountUnit?: string(name='RemainingAmountUnit', example='GB'),
        remark?: string(name='Remark'),
        status?: string(name='Status', example='Available'),
        totalAmount?: string(name='TotalAmount', example='40.000'),
        totalAmountUnit?: string(name='TotalAmountUnit', example='GB'),
      }
    ](name='Instance')
    }(name='Instances'),
    pageNum?: string(name='PageNum', example='1'),
    pageSize?: string(name='PageSize', example='20'),
    totalCount?: string(name='TotalCount', example='12'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  page?: int32(name='Page', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
  total?: int32(name='Total', example='12'),
}

model QueryResourcePackageInstancesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryResourcePackageInstancesResponseBody(name='body'),
}

async function queryResourcePackageInstancesWithOptions(request: QueryResourcePackageInstancesRequest, runtime: Util.RuntimeOptions): QueryResourcePackageInstancesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.expiryTimeEnd)) {
    query['ExpiryTimeEnd'] = request.expiryTimeEnd;
  }
  if (!Util.isUnset(request.expiryTimeStart)) {
    query['ExpiryTimeStart'] = request.expiryTimeStart;
  }
  if (!Util.isUnset(request.includePartner)) {
    query['IncludePartner'] = request.includePartner;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryResourcePackageInstances',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryResourcePackageInstances(request: QueryResourcePackageInstancesRequest): QueryResourcePackageInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryResourcePackageInstancesWithOptions(request, runtime);
}

model QuerySavingsPlansDeductLogRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2022-01-05 00:00:00'),
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='spn-XXXXXXX'),
  instanceType?: string(name='InstanceType', description='The type of the instance ID based on which the data is queried. Valid values:

*   spn: queries data based on the ID of the savings plan instance.
*   product: queries data based on the ID of the cloud service instance.', example='spn'),
  locale?: string(name='Locale', description='The language of the return data. Valid values:

*   ZH: Chinese
*   EN: English', example='ZH'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2022-01-01 00:00:00'),
}

model QuerySavingsPlansDeductLogResponseBody = {
  code?: string(name='Code', description='The error code.', example='PARAM_ERROR'),
  data?: {
    items?: [ 
      {
        billModule?: string(name='BillModule', description='The billable item for which the fee is deducted.'),
        deductCommodity?: string(name='DeductCommodity', description='The service for which the fee is deducted.'),
        deductFee?: string(name='DeductFee', description='The deducted amount.', example='0.52'),
        deductInstanceId?: string(name='DeductInstanceId', description='The ID of the instance for which the fee is deducted.', example='i-XXXXXXXXX'),
        deductRate?: string(name='DeductRate', description='The deduction rate.', example='1.0'),
        discountRate?: string(name='DiscountRate', description='The discount used for the current deduction.', example='0.069'),
        endTime?: string(name='EndTime', description='The end of the billing cycle for which the fee is deducted.', example='2020-12-01 01:00:00'),
        instanceId?: string(name='InstanceId', description='The ID of the savings plan instance.', example='spn-xxxxxxx'),
        ownerId?: long(name='OwnerId', example='1906589291020438'),
        savingsType?: string(name='SavingsType', description='The type of the savings plan. Valid values:

*   universal: general-purpose
*   ecs: ECS compute', example='ecs'),
        startTime?: string(name='StartTime', description='The beginning of the billing cycle for which the fee is deducted. The time is in the format of yyyy-MM-dd HH:mm:ss.', example='2020-12-01 00:00:00'),
        userId?: long(name='UserId', description='The ID of the user.', example='1906589291020438'),
      }
    ](name='Items', description='The deduction details.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries.', example='20'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='61293E7A-3406-4447-8620-EC88B0AA66AD'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model QuerySavingsPlansDeductLogResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySavingsPlansDeductLogResponseBody(name='body'),
}

async function querySavingsPlansDeductLogWithOptions(request: QuerySavingsPlansDeductLogRequest, runtime: Util.RuntimeOptions): QuerySavingsPlansDeductLogResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.instanceType)) {
    query['InstanceType'] = request.instanceType;
  }
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySavingsPlansDeductLog',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySavingsPlansDeductLog(request: QuerySavingsPlansDeductLogRequest): QuerySavingsPlansDeductLogResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySavingsPlansDeductLogWithOptions(request, runtime);
}

model QuerySavingsPlansDiscountRequest {
  commodityCode?: string(name='CommodityCode', example='ecs'),
  cycle?: string(name='Cycle', example='1:Year'),
  locale?: string(name='Locale', example='ZH'),
  moduleCode?: string(name='ModuleCode', example='instance_type'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  payMode?: string(name='PayMode', example='total'),
  region?: string(name='Region', example='cn-hangzhou'),
  spec?: string(name='Spec', example='ecs.g6'),
  spnType?: string(name='SpnType', example='universal'),
}

model QuerySavingsPlansDiscountResponseBody = {
  code?: string(name='Code', example='PARAM_ERROR'),
  data?: {
    hostId?: string(name='HostId', example='100.104.180.109'),
    items?: [ 
      {
        commodityName?: string(name='CommodityName'),
        contractDiscountRate?: string(name='ContractDiscountRate', example='0.85'),
        cycle?: string(name='Cycle', example='1:Year'),
        discountRate?: string(name='DiscountRate', example='0.85'),
        moduleName?: string(name='ModuleName'),
        payMode?: string(name='PayMode', example='total'),
        region?: string(name='Region', example='cn-zhangjiakou-na62-a01'),
        spec?: string(name='Spec', example='ecs.g6'),
        spnType?: string(name='SpnType', example='universal'),
      }
    ](name='Items'),
  }(name='Data', description='data'),
  message?: string(name='Message', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model QuerySavingsPlansDiscountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySavingsPlansDiscountResponseBody(name='body'),
}

async function querySavingsPlansDiscountWithOptions(request: QuerySavingsPlansDiscountRequest, runtime: Util.RuntimeOptions): QuerySavingsPlansDiscountResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySavingsPlansDiscount',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySavingsPlansDiscount(request: QuerySavingsPlansDiscountRequest): QuerySavingsPlansDiscountResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySavingsPlansDiscountWithOptions(request, runtime);
}

model QuerySavingsPlansInstanceRequest {
  endTime?: string(name='EndTime', description='The end of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
  instanceId?: string(name='InstanceId', description='The ID of the savings plan instance.', example='spn-xxxxxxx'),
  locale?: string(name='Locale', description='The language of the return data. Valid values:

*   ZH: Chinese
*   EN: English', example='ZH'),
  pageNum?: int32(name='PageNum', description='The number of the page to return.', example='1'),
  pageSize?: int32(name='PageSize', description='The number of entries to return on each page.', example='20'),
  startTime?: string(name='StartTime', description='The beginning of the time range to query. Specify the time in the format of yyyy-MM-dd HH:mm:ss.', example='2020-01-01 00:00:00'),
  tag?: [ 
    {
      key?: string(name='Key', description='The key of the tag to query.'),
      value?: string(name='Value', description='The value of the tag to query.'),
    }
  ](name='Tag'),
}

model QuerySavingsPlansInstanceResponseBody = {
  code?: string(name='Code', description='The error code.', example='Success'),
  data?: {
    items?: [ 
      {
        allocationStatus?: string(name='AllocationStatus', description='The allocation status. Valid values:

*   unallocated
*   allocated
*   beAllocated', example='unallocated'),
        currency?: string(name='Currency', description='The currency. Valid values: CNY and USD.', example='CNY'),
        cycle?: string(name='Cycle', example='1:Year'),
        deductCycleType?: string(name='DeductCycleType', example='HOUR'),
        endTime?: string(name='EndTime', description='The time when the instance expires. The time is in the format of yyyy-MM-dd HH:mm:ss.', example='2021-01-01 00:00:00'),
        endTimestamp?: long(name='EndTimestamp', example='1663135741039'),
        instanceFamily?: string(name='InstanceFamily', description='The instance family information. For an instance of the Elastic Compute Service (ECS) compute type, the value indicates the ECS instance family or the ECS instance family package.', example='ecs.g6'),
        instanceId?: string(name='InstanceId', description='The ID of the savings plan instance.', example='spn-xxxxxxxx'),
        lastBillTotalUsage?: string(name='LastBillTotalUsage', example='100.0'),
        lastBillUtilization?: string(name='LastBillUtilization', example='0.8'),
        payMode?: string(name='PayMode', description='The payment type. Valid values:

*   total: All Upfront
*   half: Partial Upfront
*   zero: No Upfront', example='total'),
        poolValue?: string(name='PoolValue', description='The commitment.', example='1.00'),
        prepayFee?: string(name='PrepayFee', description='The prepaid amount.', example='8760.00'),
        region?: string(name='Region', description='The region.', example='cn-zhangjiakou-na62-a01'),
        savingsType?: string(name='SavingsType', description='The type of the savings plan. Valid values:

*   universal: general-purpose
*   ecs: ECS compute', example='ECS'),
        startTime?: string(name='StartTime', description='The time when the instance takes effect. The time is in the format of yyyy-MM-dd HH:mm:ss.', example='2020-01-01 00:00:00'),
        startTimestamp?: long(name='StartTimestamp', example='1663135741039'),
        status?: string(name='Status', description='The status of the instance. Valid values:

*   NORMAL: normal
*   LIMIT: stopped due to overdue payment
*   RELEASE: released', example='NORMAL'),
        tags?: [ 
          {
            key?: string(name='Key', description='The key of the tag.'),
            value?: string(name='Value', description='The value of the tag.'),
          }
        ](name='Tags', description='The details about the tags.'),
        totalSave?: string(name='TotalSave', description='The total amount that is saved.', example='20.00'),
        utilization?: string(name='Utilization', description='The total usage.', example='1.0'),
      }
    ](name='Items', description='The details about the instances.'),
    pageNum?: int32(name='PageNum', description='The page number of the returned page.', example='1'),
    pageSize?: int32(name='PageSize', description='The number of entries returned per page.', example='20'),
    totalCount?: int32(name='TotalCount', description='The total number of entries.', example='100'),
  }(name='Data', description='The return data.'),
  message?: string(name='Message', description='The message returned.', example='Successful'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='61293E7A-3406-4447-8620-EC88B0AA66AD'),
  success?: boolean(name='Success', description='Indicates whether the operation was successful.', example='true'),
}

model QuerySavingsPlansInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySavingsPlansInstanceResponseBody(name='body'),
}

async function querySavingsPlansInstanceWithOptions(request: QuerySavingsPlansInstanceRequest, runtime: Util.RuntimeOptions): QuerySavingsPlansInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.locale)) {
    query['Locale'] = request.locale;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySavingsPlansInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySavingsPlansInstance(request: QuerySavingsPlansInstanceRequest): QuerySavingsPlansInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySavingsPlansInstanceWithOptions(request, runtime);
}

model QuerySettleBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='123'),
  billingCycle?: string(name='BillingCycle', example='2018-07'),
  isDisplayLocalCurrency?: boolean(name='IsDisplayLocalCurrency', example='false'),
  isHideZeroCharge?: boolean(name='IsHideZeroCharge', example='true'),
  maxResults?: int32(name='MaxResults', example='20'),
  nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUEARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  recordID?: string(name='RecordID', example='12233'),
  subscriptionType?: string(name='SubscriptionType', example='Subscription'),
  type?: string(name='Type', example='SubscriptionOrder'),
}

model QuerySettleBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185xxxxx489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-02'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        afterTaxAmount?: float(name='AfterTaxAmount', example='0'),
        billAccountID?: string(name='BillAccountID', example='185xxxxx489'),
        billAccountName?: string(name='BillAccountName', example='test@test.aliyunid.com'),
        bizType?: string(name='BizType', example='trusteeship'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        item?: string(name='Item', example='SubscriptionOrder'),
        outstandingAmount?: float(name='OutstandingAmount', example='0'),
        ownerID?: string(name='OwnerID', example='3532535235'),
        paymentAmount?: float(name='PaymentAmount', example='0'),
        paymentCurrency?: string(name='PaymentCurrency', example='USD'),
        paymentTime?: string(name='PaymentTime', example='2020-03-11 08:00:00'),
        paymentTransactionID?: string(name='PaymentTransactionID', example='2O3AADJFEAF2PDKSFAMFCB11918'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='100'),
        pretaxAmountLocal?: float(name='PretaxAmountLocal', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        recordID?: string(name='RecordID', example='2020xxxx5912'),
        roundDownDiscount?: string(name='RoundDownDiscount', example='0'),
        status?: string(name='Status', example='PayFinish'),
        subOrderId?: string(name='SubOrderId', example='325345254353'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tax?: float(name='Tax', example='0'),
        usageEndTime?: string(name='UsageEndTime', example='2020-03-11 08:00:00'),
        usageStartTime?: string(name='UsageStartTime', example='2020-03-11 07:00:00'),
      }
    ](name='Item')
    }(name='Items'),
    maxResults?: int32(name='MaxResults', example='20'),
    nextToken?: string(name='NextToken', example='CAESEgoQCg4KCmdtdF9jcmVhdGUQARgBIkgKCQBwhGmPcAEAAAo7AzYAAAAxTDgwMDcxMjg3ZDJhNmM3ZDguTDgwMDAwMDAwMDAwMzE1MTIuTDgwMDcyZDMyZTJkYzg3N2U'),
    totalCount?: int32(name='TotalCount', example='200'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='AE3F4057-DFC9-4B81-8858-F620651010C9'),
  success?: boolean(name='Success', example='true'),
}

model QuerySettleBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySettleBillResponseBody(name='body'),
}

async function querySettleBillWithOptions(request: QuerySettleBillRequest, runtime: Util.RuntimeOptions): QuerySettleBillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.isDisplayLocalCurrency)) {
    query['IsDisplayLocalCurrency'] = request.isDisplayLocalCurrency;
  }
  if (!Util.isUnset(request.isHideZeroCharge)) {
    query['IsHideZeroCharge'] = request.isHideZeroCharge;
  }
  if (!Util.isUnset(request.maxResults)) {
    query['MaxResults'] = request.maxResults;
  }
  if (!Util.isUnset(request.nextToken)) {
    query['NextToken'] = request.nextToken;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.recordID)) {
    query['RecordID'] = request.recordID;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  if (!Util.isUnset(request.type)) {
    query['Type'] = request.type;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySettleBill',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySettleBill(request: QuerySettleBillRequest): QuerySettleBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySettleBillWithOptions(request, runtime);
}

model QuerySkuPriceListRequest {
  commodityCode?: string(name='CommodityCode', example='ecs'),
  nextPageToken?: string(name='NextPageToken', example='080112060a0422020800180022490a470342000000315333303332363436363336333433393636333136333338333733373333333133373336363336323634363336363337333836333636333636313336363433363332'),
  pageSize?: int32(name='PageSize', example='20'),
  priceEntityCode?: string(name='PriceEntityCode'),
  priceFactorConditionMap?: map[string] [ string ](name='PriceFactorConditionMap'),
}

model QuerySkuPriceListShrinkRequest {
  commodityCode?: string(name='CommodityCode', example='ecs'),
  nextPageToken?: string(name='NextPageToken', example='080112060a0422020800180022490a470342000000315333303332363436363336333433393636333136333338333733373333333133373336363336323634363336363337333836333636333636313336363433363332'),
  pageSize?: int32(name='PageSize', example='20'),
  priceEntityCode?: string(name='PriceEntityCode'),
  priceFactorConditionMapShrink?: string(name='PriceFactorConditionMap'),
}

model QuerySkuPriceListResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    skuPricePage?: {
      nextPageToken?: string(name='NextPageToken', example='080112060a0422020800180022490a470342000000315333303332363436363336333433393636333136333338333733373333333133373336363336323634363336363337333836333636333636313336363433363332'),
      skuPriceList?: [ 
        {
          cskuPriceList?: [ 
            {
              cskuCode?: string(name='CskuCode', example='ac74dd7b52ae6389ddef099283fb8275'),
              currency?: string(name='Currency', example='CNY'),
              price?: string(name='Price', example='100'),
              priceMode?: string(name='PriceMode', example='STEP_ARRIVE'),
              priceType?: string(name='PriceType', example='hourPrice'),
              priceUnit?: string(name='PriceUnit'),
              rangeList?: [ 
                {
                  factorCode?: string(name='FactorCode'),
                  max?: string(name='Max', example='10'),
                  min?: string(name='Min', example='1'),
                  type?: string(name='Type', example='LORC'),
                }
              ](name='RangeList'),
              usageUnit?: string(name='UsageUnit'),
            }
          ](name='CskuPriceList'),
          skuCode?: string(name='SkuCode', description='sku code', example='017c15a31507bc6de22aa93777461adc'),
          skuFactorMap?: map[string]string(name='SkuFactorMap'),
        }
      ](name='SkuPriceList'),
      totalCount?: int32(name='TotalCount', example='18732'),
    }(name='SkuPricePage'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', description='Id of the request', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', example='true'),
}

model QuerySkuPriceListResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySkuPriceListResponseBody(name='body'),
}

async function querySkuPriceListWithOptions(tmpReq: QuerySkuPriceListRequest, runtime: Util.RuntimeOptions): QuerySkuPriceListResponse {
  Util.validateModel(tmpReq);
  var request = new QuerySkuPriceListShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.priceFactorConditionMap)) {
    request.priceFactorConditionMapShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.priceFactorConditionMap, 'PriceFactorConditionMap', 'json');
  }
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySkuPriceList',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'GET',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySkuPriceList(request: QuerySkuPriceListRequest): QuerySkuPriceListResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySkuPriceListWithOptions(request, runtime);
}

model QuerySplitItemBillRequest {
  billOwnerId?: long(name='BillOwnerId', example='123'),
  billingCycle?: string(name='BillingCycle', example='2020-03'),
  ownerId?: long(name='OwnerId'),
  pageNum?: int32(name='PageNum', example='1'),
  pageSize?: int32(name='PageSize', example='20'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
}

model QuerySplitItemBillResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    accountID?: string(name='AccountID', example='185xxxx3489'),
    accountName?: string(name='AccountName', example='test@test.aliyunid.com'),
    billingCycle?: string(name='BillingCycle', example='2020-03'),
    items?: {
      item?: [ 
      {
        adjustAmount?: float(name='AdjustAmount', example='0'),
        billingDate?: string(name='BillingDate', example='2020-01-20'),
        billingItem?: string(name='BillingItem'),
        billingType?: string(name='BillingType'),
        cashAmount?: float(name='CashAmount', example='0'),
        commodityCode?: string(name='CommodityCode', example='rds'),
        costUnit?: string(name='CostUnit'),
        currency?: string(name='Currency', example='CNY'),
        deductedByCashCoupons?: float(name='DeductedByCashCoupons', example='0'),
        deductedByCoupons?: float(name='DeductedByCoupons', example='0'),
        deductedByPrepaidCard?: float(name='DeductedByPrepaidCard', example='0'),
        deductedByResourcePackage?: string(name='DeductedByResourcePackage', example='NULL'),
        instanceConfig?: string(name='InstanceConfig', example='CPU:12'),
        instanceID?: string(name='InstanceID', example='i-kjhdskjgshfdlkjfdh'),
        instanceSpec?: string(name='InstanceSpec', example='ecs.sn1ne.3xlarge'),
        internetIP?: string(name='InternetIP', example='34.xx.x.x'),
        intranetIP?: string(name='IntranetIP', example='192.xx.xx.xx'),
        invoiceDiscount?: float(name='InvoiceDiscount', example='0'),
        item?: string(name='Item', example='PayAsYouGoBill'),
        listPrice?: string(name='ListPrice', example='100'),
        listPriceUnit?: string(name='ListPriceUnit'),
        nickName?: string(name='NickName', example='test'),
        outstandingAmount?: float(name='OutstandingAmount', example='0'),
        ownerID?: string(name='OwnerID', example='169***013'),
        paymentAmount?: float(name='PaymentAmount', example='0'),
        pipCode?: string(name='PipCode', example='rds'),
        pretaxAmount?: float(name='PretaxAmount', example='0'),
        pretaxGrossAmount?: float(name='PretaxGrossAmount', example='0'),
        productCode?: string(name='ProductCode', example='rds'),
        productDetail?: string(name='ProductDetail'),
        productName?: string(name='ProductName'),
        productType?: string(name='ProductType', example='rds'),
        region?: string(name='Region', example='cn-hangzhou'),
        resourceGroup?: string(name='ResourceGroup'),
        servicePeriod?: string(name='ServicePeriod', example='10'),
        servicePeriodUnit?: string(name='ServicePeriodUnit'),
        splitAccountID?: string(name='SplitAccountID', example='122'),
        splitAccountName?: string(name='SplitAccountName', example='12@test.com'),
        splitBillingCycle?: string(name='SplitBillingCycle', example='2020-06'),
        splitCommodityCode?: string(name='SplitCommodityCode', example='rds'),
        splitItemID?: string(name='SplitItemID', example='i-28bycvyb4'),
        splitItemName?: string(name='SplitItemName', example='iZ28bycvyb4Z'),
        splitProductDetail?: string(name='SplitProductDetail', example='rds'),
        subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
        tag?: string(name='Tag', example='tag'),
        usage?: string(name='Usage', example='100'),
        usageUnit?: string(name='UsageUnit', example='GB'),
        zone?: string(name='Zone', example='cn-hangzhou-h'),
      }
    ](name='Item')
    }(name='Items'),
    pageNum?: int32(name='PageNum', example='1'),
    pageSize?: int32(name='PageSize', example='20'),
    totalCount?: int32(name='TotalCount', example='2'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model QuerySplitItemBillResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QuerySplitItemBillResponseBody(name='body'),
}

async function querySplitItemBillWithOptions(request: QuerySplitItemBillRequest, runtime: Util.RuntimeOptions): QuerySplitItemBillResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.billOwnerId)) {
    query['BillOwnerId'] = request.billOwnerId;
  }
  if (!Util.isUnset(request.billingCycle)) {
    query['BillingCycle'] = request.billingCycle;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNum)) {
    query['PageNum'] = request.pageNum;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QuerySplitItemBill',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function querySplitItemBill(request: QuerySplitItemBillRequest): QuerySplitItemBillResponse {
  var runtime = new Util.RuntimeOptions{};
  return querySplitItemBillWithOptions(request, runtime);
}

model QueryUserOmsDataRequest {
  dataType?: string(name='DataType', example='Hour'),
  endTime?: string(name='EndTime', example='2020-02-21T12:00:00Z'),
  marker?: string(name='Marker', example='NextToken'),
  ownerId?: long(name='OwnerId'),
  pageSize?: int32(name='PageSize', example='1'),
  startTime?: string(name='StartTime', example='2020-02-20T12:00:00Z'),
  table?: string(name='Table', example='rds'),
}

model QueryUserOmsDataResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    hostId?: string(name='HostId', example='cn'),
    marker?: string(name='Marker', example='NextToken'),
    omsData?: [  map[string]any ](name='OmsData'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model QueryUserOmsDataResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryUserOmsDataResponseBody(name='body'),
}

async function queryUserOmsDataWithOptions(request: QueryUserOmsDataRequest, runtime: Util.RuntimeOptions): QueryUserOmsDataResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dataType)) {
    query['DataType'] = request.dataType;
  }
  if (!Util.isUnset(request.endTime)) {
    query['EndTime'] = request.endTime;
  }
  if (!Util.isUnset(request.marker)) {
    query['Marker'] = request.marker;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.startTime)) {
    query['StartTime'] = request.startTime;
  }
  if (!Util.isUnset(request.table)) {
    query['Table'] = request.table;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryUserOmsData',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryUserOmsData(request: QueryUserOmsDataRequest): QueryUserOmsDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryUserOmsDataWithOptions(request, runtime);
}

model RefundInstanceRequest {
  clientToken?: string(name='ClientToken', example='793F021C-B589-1225-82A9-99232AEBE494'),
  immediatelyRelease?: string(name='ImmediatelyRelease', example='1'),
  instanceId?: string(name='InstanceId', example='i-bp1etb69sqxgl4*******'),
  productCode?: string(name='ProductCode', example='ecs'),
  productType?: string(name='ProductType', example='‚Äù‚Äú'),
}

model RefundInstanceResponseBody = {
  code?: string(name='Code', example='ResourceNotExists'),
  data?: {
    hostId?: string(name='HostId', example='cn'),
    orderId?: long(name='OrderId', example='2100000000***'),
  }(name='Data', description='data'),
  message?: string(name='Message', example='success'),
  requestId?: string(name='RequestId', example='UUID'),
  success?: boolean(name='Success', example='false'),
}

model RefundInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RefundInstanceResponseBody(name='body'),
}

async function refundInstanceWithOptions(request: RefundInstanceRequest, runtime: Util.RuntimeOptions): RefundInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.immediatelyRelease)) {
    query['ImmediatelyRelease'] = request.immediatelyRelease;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RefundInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function refundInstance(request: RefundInstanceRequest): RefundInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return refundInstanceWithOptions(request, runtime);
}

model ReleaseInstanceRequest {
  instanceIds?: string(name='InstanceIds', example='rm-xxxxxxxxxxxx'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', example='ecs'),
  productType?: string(name='ProductType', example='ecs'),
  region?: string(name='Region', example='cn-hangzhou'),
  renewStatus?: string(name='RenewStatus', example='AutoRenewal'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
}

model ReleaseInstanceResponseBody = {
  code?: string(name='Code', example='Invalid_Product_Code'),
  data?: {
    hostId?: string(name='HostId', example='cn'),
    releaseResult?: boolean(name='ReleaseResult', example='true'),
  }(name='Data', description='data'),
  message?: string(name='Message', example='successful'),
  requestId?: string(name='RequestId', example='UUID'),
  success?: boolean(name='Success', example='true'),
}

model ReleaseInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReleaseInstanceResponseBody(name='body'),
}

async function releaseInstanceWithOptions(request: ReleaseInstanceRequest, runtime: Util.RuntimeOptions): ReleaseInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIds)) {
    query['InstanceIds'] = request.instanceIds;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.region)) {
    query['Region'] = request.region;
  }
  if (!Util.isUnset(request.renewStatus)) {
    query['RenewStatus'] = request.renewStatus;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReleaseInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function releaseInstance(request: ReleaseInstanceRequest): ReleaseInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseInstanceWithOptions(request, runtime);
}

model RelieveAccountRelationRequest {
  childUserId?: long(name='ChildUserId', example='1512996702208737'),
  parentUserId?: long(name='ParentUserId', example='1738376485192612'),
  relationId?: long(name='RelationId', example='RelationId'),
  relationType?: string(name='RelationType', example='enterprise_group'),
  requestId?: string(name='RequestId', example='request_id'),
}

model RelieveAccountRelationResponseBody = {
  code?: string(name='Code', example='200'),
  data?: {
    hostId?: string(name='HostId', description='hostid', example='HostId'),
  }(name='Data'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId', example='request_id'),
  success?: boolean(name='Success', example='true'),
}

model RelieveAccountRelationResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RelieveAccountRelationResponseBody(name='body'),
}

async function relieveAccountRelationWithOptions(request: RelieveAccountRelationRequest, runtime: Util.RuntimeOptions): RelieveAccountRelationResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.childUserId)) {
    query['ChildUserId'] = request.childUserId;
  }
  if (!Util.isUnset(request.parentUserId)) {
    query['ParentUserId'] = request.parentUserId;
  }
  if (!Util.isUnset(request.relationId)) {
    query['RelationId'] = request.relationId;
  }
  if (!Util.isUnset(request.relationType)) {
    query['RelationType'] = request.relationType;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RelieveAccountRelation',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function relieveAccountRelation(request: RelieveAccountRelationRequest): RelieveAccountRelationResponse {
  var runtime = new Util.RuntimeOptions{};
  return relieveAccountRelationWithOptions(request, runtime);
}

model RenewInstanceRequest {
  clientToken?: string(name='ClientToken', example='ASKJHKLASJHAFSLKJH'),
  instanceId?: string(name='InstanceId', example='rm-skjdhaskjdh'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  renewPeriod?: int32(name='RenewPeriod', example='6'),
}

model RenewInstanceResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    orderId?: string(name='OrderId', example='202657601410661'),
  }(name='Data'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model RenewInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewInstanceResponseBody(name='body'),
}

async function renewInstanceWithOptions(request: RenewInstanceRequest, runtime: Util.RuntimeOptions): RenewInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.renewPeriod)) {
    query['RenewPeriod'] = request.renewPeriod;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewInstance',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewInstance(request: RenewInstanceRequest): RenewInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewInstanceWithOptions(request, runtime);
}

model RenewResourcePackageRequest {
  duration?: int32(name='Duration', example='1'),
  effectiveDate?: string(name='EffectiveDate', example='2020-02-02T12:00:00Z'),
  instanceId?: string(name='InstanceId', example='lskd****sljhsdj'),
  ownerId?: long(name='OwnerId'),
  pricingCycle?: string(name='PricingCycle', example='Month'),
}

model RenewResourcePackageResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    instanceId?: string(name='InstanceId', example='OSSBAG-cn-0xl0n****003'),
    orderId?: long(name='OrderId', example='204322560333'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  orderId?: long(name='OrderId', example='204322301110333'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model RenewResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RenewResourcePackageResponseBody(name='body'),
}

async function renewResourcePackageWithOptions(request: RenewResourcePackageRequest, runtime: Util.RuntimeOptions): RenewResourcePackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.duration)) {
    query['Duration'] = request.duration;
  }
  if (!Util.isUnset(request.effectiveDate)) {
    query['EffectiveDate'] = request.effectiveDate;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pricingCycle)) {
    query['PricingCycle'] = request.pricingCycle;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RenewResourcePackage',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function renewResourcePackage(request: RenewResourcePackageRequest): RenewResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return renewResourcePackageWithOptions(request, runtime);
}

model SaveUserCreditRequest {
  avoidExpiration?: boolean(name='AvoidExpiration', example='true'),
  avoidNotification?: boolean(name='AvoidNotification', example='true'),
  avoidPrepaidExpiration?: boolean(name='AvoidPrepaidExpiration', example='true'),
  avoidPrepaidNotification?: boolean(name='AvoidPrepaidNotification', example='true'),
  creditType?: string(name='CreditType'),
  creditValue?: string(name='CreditValue'),
  description?: string(name='Description', example='description'),
  operator?: string(name='Operator', example='65683'),
}

model SaveUserCreditResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='9EEAE43F-1E4D-4734-AE93-5049878AC103'),
  success?: boolean(name='Success', example='true'),
}

model SaveUserCreditResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SaveUserCreditResponseBody(name='body'),
}

async function saveUserCreditWithOptions(request: SaveUserCreditRequest, runtime: Util.RuntimeOptions): SaveUserCreditResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.avoidExpiration)) {
    query['AvoidExpiration'] = request.avoidExpiration;
  }
  if (!Util.isUnset(request.avoidNotification)) {
    query['AvoidNotification'] = request.avoidNotification;
  }
  if (!Util.isUnset(request.avoidPrepaidExpiration)) {
    query['AvoidPrepaidExpiration'] = request.avoidPrepaidExpiration;
  }
  if (!Util.isUnset(request.avoidPrepaidNotification)) {
    query['AvoidPrepaidNotification'] = request.avoidPrepaidNotification;
  }
  if (!Util.isUnset(request.creditType)) {
    query['CreditType'] = request.creditType;
  }
  if (!Util.isUnset(request.creditValue)) {
    query['CreditValue'] = request.creditValue;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.operator)) {
    query['Operator'] = request.operator;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SaveUserCredit',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function saveUserCredit(request: SaveUserCreditRequest): SaveUserCreditResponse {
  var runtime = new Util.RuntimeOptions{};
  return saveUserCreditWithOptions(request, runtime);
}

model SetAllExpirationDayRequest {
  ownerId?: long(name='OwnerId'),
  unifyExpireDay?: string(name='UnifyExpireDay', example='10'),
}

model SetAllExpirationDayResponseBody = {
  code?: string(name='Code', example='200'),
  message?: string(name='Message'),
  requestId?: string(name='RequestId'),
  success?: boolean(name='Success', example='true'),
}

model SetAllExpirationDayResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetAllExpirationDayResponseBody(name='body'),
}

async function setAllExpirationDayWithOptions(request: SetAllExpirationDayRequest, runtime: Util.RuntimeOptions): SetAllExpirationDayResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.unifyExpireDay)) {
    query['UnifyExpireDay'] = request.unifyExpireDay;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetAllExpirationDay',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setAllExpirationDay(request: SetAllExpirationDayRequest): SetAllExpirationDayResponse {
  var runtime = new Util.RuntimeOptions{};
  return setAllExpirationDayWithOptions(request, runtime);
}

model SetCreditLabelActionRequest {
  actionType?: string(name='ActionType', example='SET'),
  clearCycle?: string(name='ClearCycle'),
  creditAmount?: string(name='CreditAmount', example='1000'),
  currencyCode?: string(name='CurrencyCode', example='CNY'),
  dailyCycle?: string(name='DailyCycle'),
  description?: string(name='Description'),
  isNeedAddSettleLabel?: string(name='IsNeedAddSettleLabel'),
  isNeedAdjustCreditAccount?: string(name='IsNeedAdjustCreditAccount'),
  isNeedSaveNotifyRule?: string(name='IsNeedSaveNotifyRule'),
  isNeedSetCreditAmount?: string(name='IsNeedSetCreditAmount'),
  needNotice?: boolean(name='NeedNotice'),
  newCreateMode?: boolean(name='NewCreateMode'),
  operator?: string(name='Operator', example='78394'),
  requestId?: string(name='RequestId', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  siteCode?: string(name='SiteCode'),
  source?: string(name='Source', example='dellidc'),
  uid?: string(name='Uid', example='1911503093565030'),
}

model SetCreditLabelActionResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='SuccessfulÔºÅ'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model SetCreditLabelActionResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetCreditLabelActionResponseBody(name='body'),
}

async function setCreditLabelActionWithOptions(request: SetCreditLabelActionRequest, runtime: Util.RuntimeOptions): SetCreditLabelActionResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.actionType)) {
    query['ActionType'] = request.actionType;
  }
  if (!Util.isUnset(request.clearCycle)) {
    query['ClearCycle'] = request.clearCycle;
  }
  if (!Util.isUnset(request.creditAmount)) {
    query['CreditAmount'] = request.creditAmount;
  }
  if (!Util.isUnset(request.currencyCode)) {
    query['CurrencyCode'] = request.currencyCode;
  }
  if (!Util.isUnset(request.dailyCycle)) {
    query['DailyCycle'] = request.dailyCycle;
  }
  if (!Util.isUnset(request.description)) {
    query['Description'] = request.description;
  }
  if (!Util.isUnset(request.isNeedAddSettleLabel)) {
    query['IsNeedAddSettleLabel'] = request.isNeedAddSettleLabel;
  }
  if (!Util.isUnset(request.isNeedAdjustCreditAccount)) {
    query['IsNeedAdjustCreditAccount'] = request.isNeedAdjustCreditAccount;
  }
  if (!Util.isUnset(request.isNeedSaveNotifyRule)) {
    query['IsNeedSaveNotifyRule'] = request.isNeedSaveNotifyRule;
  }
  if (!Util.isUnset(request.isNeedSetCreditAmount)) {
    query['IsNeedSetCreditAmount'] = request.isNeedSetCreditAmount;
  }
  if (!Util.isUnset(request.needNotice)) {
    query['NeedNotice'] = request.needNotice;
  }
  if (!Util.isUnset(request.newCreateMode)) {
    query['NewCreateMode'] = request.newCreateMode;
  }
  if (!Util.isUnset(request.operator)) {
    query['Operator'] = request.operator;
  }
  if (!Util.isUnset(request.requestId)) {
    query['RequestId'] = request.requestId;
  }
  if (!Util.isUnset(request.siteCode)) {
    query['SiteCode'] = request.siteCode;
  }
  if (!Util.isUnset(request.source)) {
    query['Source'] = request.source;
  }
  if (!Util.isUnset(request.uid)) {
    query['Uid'] = request.uid;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetCreditLabelAction',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setCreditLabelAction(request: SetCreditLabelActionRequest): SetCreditLabelActionResponse {
  var runtime = new Util.RuntimeOptions{};
  return setCreditLabelActionWithOptions(request, runtime);
}

model SetRenewalRequest {
  instanceIDs?: string(name='InstanceIDs', example='rm-askjdhaskfjh'),
  ownerId?: long(name='OwnerId'),
  productCode?: string(name='ProductCode', example='rds'),
  productType?: string(name='ProductType', example='rds'),
  renewalPeriod?: int32(name='RenewalPeriod', example='1'),
  renewalPeriodUnit?: string(name='RenewalPeriodUnit', example='M'),
  renewalStatus?: string(name='RenewalStatus', example='AutoRenewal'),
  subscriptionType?: string(name='SubscriptionType', example='PayAsYouGo'),
}

model SetRenewalResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='Successful'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model SetRenewalResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetRenewalResponseBody(name='body'),
}

async function setRenewalWithOptions(request: SetRenewalRequest, runtime: Util.RuntimeOptions): SetRenewalResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.instanceIDs)) {
    query['InstanceIDs'] = request.instanceIDs;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.productCode)) {
    query['ProductCode'] = request.productCode;
  }
  if (!Util.isUnset(request.productType)) {
    query['ProductType'] = request.productType;
  }
  if (!Util.isUnset(request.renewalPeriod)) {
    query['RenewalPeriod'] = request.renewalPeriod;
  }
  if (!Util.isUnset(request.renewalPeriodUnit)) {
    query['RenewalPeriodUnit'] = request.renewalPeriodUnit;
  }
  if (!Util.isUnset(request.renewalStatus)) {
    query['RenewalStatus'] = request.renewalStatus;
  }
  if (!Util.isUnset(request.subscriptionType)) {
    query['SubscriptionType'] = request.subscriptionType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetRenewal',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setRenewal(request: SetRenewalRequest): SetRenewalResponse {
  var runtime = new Util.RuntimeOptions{};
  return setRenewalWithOptions(request, runtime);
}

model SetResellerUserAlarmThresholdRequest {
  alarmThresholds?: string(name='AlarmThresholds', example='[{\\"denominator\\":100,\\"numerator\\":30,\\"thresholdType\\":1}]'),
  alarmType?: string(name='AlarmType', example='quota_low_balance'),
  ownerId?: long(name='OwnerId'),
}

model SetResellerUserAlarmThresholdResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='79EE7556-0CFD-44EB-9CD6-B3B526E3A85F'),
  success?: boolean(name='Success', example='true'),
}

model SetResellerUserAlarmThresholdResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetResellerUserAlarmThresholdResponseBody(name='body'),
}

async function setResellerUserAlarmThresholdWithOptions(request: SetResellerUserAlarmThresholdRequest, runtime: Util.RuntimeOptions): SetResellerUserAlarmThresholdResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.alarmThresholds)) {
    query['AlarmThresholds'] = request.alarmThresholds;
  }
  if (!Util.isUnset(request.alarmType)) {
    query['AlarmType'] = request.alarmType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetResellerUserAlarmThreshold',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setResellerUserAlarmThreshold(request: SetResellerUserAlarmThresholdRequest): SetResellerUserAlarmThresholdResponse {
  var runtime = new Util.RuntimeOptions{};
  return setResellerUserAlarmThresholdWithOptions(request, runtime);
}

model SetResellerUserQuotaRequest {
  amount?: string(name='Amount', example='750'),
  currency?: string(name='Currency'),
  outBizId?: string(name='OutBizId', example='OD2022040818295234777795624764689'),
  ownerId?: long(name='OwnerId'),
}

model SetResellerUserQuotaResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', example='true'),
}

model SetResellerUserQuotaResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetResellerUserQuotaResponseBody(name='body'),
}

async function setResellerUserQuotaWithOptions(request: SetResellerUserQuotaRequest, runtime: Util.RuntimeOptions): SetResellerUserQuotaResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.amount)) {
    query['Amount'] = request.amount;
  }
  if (!Util.isUnset(request.currency)) {
    query['Currency'] = request.currency;
  }
  if (!Util.isUnset(request.outBizId)) {
    query['OutBizId'] = request.outBizId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetResellerUserQuota',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setResellerUserQuota(request: SetResellerUserQuotaRequest): SetResellerUserQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return setResellerUserQuotaWithOptions(request, runtime);
}

model SetResellerUserStatusRequest {
  businessType?: string(name='BusinessType', example='FREEZE'),
  ownerId?: string(name='OwnerId'),
  status?: string(name='Status', example='Freeze'),
  stopMode?: string(name='StopMode'),
}

model SetResellerUserStatusResponseBody = {
  code?: string(name='Code', example='200'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='F5B803CF-94D8-43AF-ADB3-D819AAD30E27'),
  success?: boolean(name='Success', example='true'),
}

model SetResellerUserStatusResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SetResellerUserStatusResponseBody(name='body'),
}

async function setResellerUserStatusWithOptions(request: SetResellerUserStatusRequest, runtime: Util.RuntimeOptions): SetResellerUserStatusResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.businessType)) {
    query['BusinessType'] = request.businessType;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.status)) {
    query['Status'] = request.status;
  }
  if (!Util.isUnset(request.stopMode)) {
    query['StopMode'] = request.stopMode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SetResellerUserStatus',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function setResellerUserStatus(request: SetResellerUserStatusRequest): SetResellerUserStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return setResellerUserStatusWithOptions(request, runtime);
}

model SubscribeBillToOSSRequest {
  beginBillingCycle?: string(name='BeginBillingCycle', example='2021-03'),
  bucketOwnerId?: long(name='BucketOwnerId', example='12341324'),
  bucketPath?: string(name='BucketPath', example='testpath'),
  multAccountRelSubscribe?: string(name='MultAccountRelSubscribe', example='MA'),
  rowLimitPerFile?: int32(name='RowLimitPerFile'),
  subscribeBucket?: string(name='SubscribeBucket', example='xxxxxx-bucket'),
  subscribeType?: string(name='SubscribeType', example='BillingItemDetailForBillingPeriod'),
}

model SubscribeBillToOSSResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='F61FCE4B-9B56-4FD9-A17E-******'),
  success?: boolean(name='Success', example='true'),
}

model SubscribeBillToOSSResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: SubscribeBillToOSSResponseBody(name='body'),
}

async function subscribeBillToOSSWithOptions(request: SubscribeBillToOSSRequest, runtime: Util.RuntimeOptions): SubscribeBillToOSSResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.beginBillingCycle)) {
    query['BeginBillingCycle'] = request.beginBillingCycle;
  }
  if (!Util.isUnset(request.bucketOwnerId)) {
    query['BucketOwnerId'] = request.bucketOwnerId;
  }
  if (!Util.isUnset(request.bucketPath)) {
    query['BucketPath'] = request.bucketPath;
  }
  if (!Util.isUnset(request.multAccountRelSubscribe)) {
    query['MultAccountRelSubscribe'] = request.multAccountRelSubscribe;
  }
  if (!Util.isUnset(request.rowLimitPerFile)) {
    query['RowLimitPerFile'] = request.rowLimitPerFile;
  }
  if (!Util.isUnset(request.subscribeBucket)) {
    query['SubscribeBucket'] = request.subscribeBucket;
  }
  if (!Util.isUnset(request.subscribeType)) {
    query['SubscribeType'] = request.subscribeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'SubscribeBillToOSS',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function subscribeBillToOSS(request: SubscribeBillToOSSRequest): SubscribeBillToOSSResponse {
  var runtime = new Util.RuntimeOptions{};
  return subscribeBillToOSSWithOptions(request, runtime);
}

model TagResourcesRequest {
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='instance'),
  tag?: [ 
    {
      key?: string(name='Key', example='tag1'),
      value?: string(name='Value', example='001'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  code?: string(name='Code', example='InternalError'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', example='1537A007-72D7-4165-8A26-8694A38E219A'),
  success?: boolean(name='Success', example='true'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UnsubscribeBillToOSSRequest {
  multAccountRelSubscribe?: string(name='MultAccountRelSubscribe', example='MA'),
  subscribeType?: string(name='SubscribeType', example='BillingItemDetailForBillingPeriod'),
}

model UnsubscribeBillToOSSResponseBody = {
  code?: string(name='Code', example='Success'),
  message?: string(name='Message', example='Successful!'),
  requestId?: string(name='RequestId', example='D23FE74C-742F-4624-A82B-******'),
  success?: boolean(name='Success', example='true'),
}

model UnsubscribeBillToOSSResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UnsubscribeBillToOSSResponseBody(name='body'),
}

async function unsubscribeBillToOSSWithOptions(request: UnsubscribeBillToOSSRequest, runtime: Util.RuntimeOptions): UnsubscribeBillToOSSResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.multAccountRelSubscribe)) {
    query['MultAccountRelSubscribe'] = request.multAccountRelSubscribe;
  }
  if (!Util.isUnset(request.subscribeType)) {
    query['SubscribeType'] = request.subscribeType;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UnsubscribeBillToOSS',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function unsubscribeBillToOSS(request: UnsubscribeBillToOSSRequest): UnsubscribeBillToOSSResponse {
  var runtime = new Util.RuntimeOptions{};
  return unsubscribeBillToOSSWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='true'),
  resourceId?: [ string ](name='ResourceId'),
  resourceType?: string(name='ResourceType', example='instance'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  code?: string(name='Code', example='PARAM_ERROR'),
  data?: boolean(name='Data', example='true'),
  message?: string(name='Message', example='This API is not applicable for caller.'),
  requestId?: string(name='RequestId', example='C7C15585-8349-4C62-BEE4-5A391841B9BE'),
  success?: boolean(name='Success', example='true'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

model UpgradeResourcePackageRequest {
  effectiveDate?: string(name='EffectiveDate', example='2020-02-02T12:00:00Z'),
  instanceId?: string(name='InstanceId', example='OSSBAG-cn-0xl*****x002'),
  ownerId?: long(name='OwnerId'),
  specification?: string(name='Specification', example='51200'),
}

model UpgradeResourcePackageResponseBody = {
  code?: string(name='Code', example='Success'),
  data?: {
    instanceId?: string(name='InstanceId', example='OSSBAG-cn-0xl*****002'),
    orderId?: long(name='OrderId', example='73387246238746'),
  }(name='Data'),
  message?: string(name='Message', example='Successful!'),
  orderId?: long(name='OrderId', example='73387246238746'),
  requestId?: string(name='RequestId', example='6000EE23-274B-4E07-A697-FF2E999520A4'),
  success?: boolean(name='Success', example='true'),
}

model UpgradeResourcePackageResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UpgradeResourcePackageResponseBody(name='body'),
}

async function upgradeResourcePackageWithOptions(request: UpgradeResourcePackageRequest, runtime: Util.RuntimeOptions): UpgradeResourcePackageResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.effectiveDate)) {
    query['EffectiveDate'] = request.effectiveDate;
  }
  if (!Util.isUnset(request.instanceId)) {
    query['InstanceId'] = request.instanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.specification)) {
    query['Specification'] = request.specification;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UpgradeResourcePackage',
    version = '2017-12-14',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function upgradeResourcePackage(request: UpgradeResourcePackageRequest): UpgradeResourcePackageResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeResourcePackageWithOptions(request, runtime);
}

