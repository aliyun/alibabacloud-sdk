/**
 *
 */
import Util;
import OpenApi;

import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cddc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model ModifyDBInstanceSwitchWeightRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  DBInstanceName?: string(name='DBInstanceName'),
  switchWeight?: string(name='SwitchWeight'),
}

model ModifyDBInstanceSwitchWeightResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDBInstanceSwitchWeightResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDBInstanceSwitchWeightResponseBody(name='body'),
}

async function modifyDBInstanceSwitchWeightWithOptions(request: ModifyDBInstanceSwitchWeightRequest, runtime: Util.RuntimeOptions): ModifyDBInstanceSwitchWeightResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDBInstanceSwitchWeight', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDBInstanceSwitchWeight(request: ModifyDBInstanceSwitchWeightRequest): ModifyDBInstanceSwitchWeightResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDBInstanceSwitchWeightWithOptions(request, runtime);
}

model DescribeAvailableDedicatedHostZonesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dbType?: string(name='DbType'),
}

model DescribeAvailableDedicatedHostZonesResponseBody = {
  requestId?: string(name='RequestId'),
  zones?: {
    dedicatedHostZones?: [ 
    {
      zoneId?: string(name='ZoneId'),
      description?: string(name='Description'),
    }
  ](name='DedicatedHostZones')
  }(name='Zones'),
}

model DescribeAvailableDedicatedHostZonesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableDedicatedHostZonesResponseBody(name='body'),
}

async function describeAvailableDedicatedHostZonesWithOptions(request: DescribeAvailableDedicatedHostZonesRequest, runtime: Util.RuntimeOptions): DescribeAvailableDedicatedHostZonesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableDedicatedHostZones', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableDedicatedHostZones(request: DescribeAvailableDedicatedHostZonesRequest): DescribeAvailableDedicatedHostZonesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableDedicatedHostZonesWithOptions(request, runtime);
}

model DescribeDedicatedHostGroupsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  imageCategory?: string(name='ImageCategory'),
  engine?: string(name='Engine'),
}

model DescribeDedicatedHostGroupsResponseBody = {
  requestId?: string(name='RequestId'),
  dedicatedHostGroups?: {
    dedicatedHostGroups?: [ 
    {
      diskAllocateRation?: float(name='DiskAllocateRation'),
      deployType?: string(name='DeployType'),
      createTime?: string(name='CreateTime'),
      dedicatedHostCountGroupByHostType?: map[string]any(name='DedicatedHostCountGroupByHostType'),
      text?: string(name='Text'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
      diskUtility?: float(name='DiskUtility'),
      memUsedAmount?: float(name='MemUsedAmount'),
      memAllocatedAmount?: float(name='MemAllocatedAmount'),
      cpuAllocationRatio?: int32(name='CpuAllocationRatio'),
      memAllocationRatio?: int32(name='MemAllocationRatio'),
      memAllocateRation?: float(name='MemAllocateRation'),
      memUtility?: float(name='MemUtility'),
      cpuAllocatedAmount?: float(name='CpuAllocatedAmount'),
      dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc'),
      cpuAllocateRation?: float(name='CpuAllocateRation'),
      instanceNumber?: int32(name='InstanceNumber'),
      openPermission?: string(name='OpenPermission'),
      VPCId?: string(name='VPCId'),
      diskAllocatedAmount?: float(name='DiskAllocatedAmount'),
      hostNumber?: int32(name='HostNumber'),
      diskUsedAmount?: float(name='DiskUsedAmount'),
      allocationPolicy?: string(name='AllocationPolicy'),
      engine?: string(name='Engine'),
      diskAllocationRatio?: int32(name='DiskAllocationRatio'),
      bastionInstanceId?: string(name='BastionInstanceId'),
      hostReplacePolicy?: string(name='HostReplacePolicy'),
      zoneIDList?: {
        zoneIDList?: [ string ](name='ZoneIDList')
      }(name='ZoneIDList'),
    }
  ](name='DedicatedHostGroups')
  }(name='DedicatedHostGroups'),
}

model DescribeDedicatedHostGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostGroupsResponseBody(name='body'),
}

async function describeDedicatedHostGroupsWithOptions(request: DescribeDedicatedHostGroupsRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHostGroups', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHostGroups(request: DescribeDedicatedHostGroupsRequest): DescribeDedicatedHostGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostGroupsWithOptions(request, runtime);
}

model DescribeMyBaseHostOverViewRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  region?: string(name='Region'),
}

model DescribeMyBaseHostOverViewResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    regionModel?: [ 
    {
      engineCount?: string(name='EngineCount'),
      totalCount?: int32(name='TotalCount'),
      hostGroupCount?: int32(name='HostGroupCount'),
      region?: string(name='Region'),
      typeModels?: {
        typeModel?: [ 
        {
          hostEngineCount?: string(name='HostEngineCount'),
          hostDateType?: string(name='HostDateType'),
          count?: int32(name='Count'),
        }
      ](name='TypeModel')
      }(name='TypeModels'),
    }
  ](name='RegionModel')
  }(name='Regions'),
}

model DescribeMyBaseHostOverViewResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMyBaseHostOverViewResponseBody(name='body'),
}

async function describeMyBaseHostOverViewWithOptions(request: DescribeMyBaseHostOverViewRequest, runtime: Util.RuntimeOptions): DescribeMyBaseHostOverViewResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMyBaseHostOverView', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMyBaseHostOverView(request: DescribeMyBaseHostOverViewRequest): DescribeMyBaseHostOverViewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMyBaseHostOverViewWithOptions(request, runtime);
}

model DescribeBriefDedicatedHostsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  zoneId?: string(name='ZoneId'),
  pageNumbers?: int32(name='PageNumbers'),
  pageSize?: int32(name='PageSize'),
}

model DescribeBriefDedicatedHostsResponseBody = {
  totalRecords?: int32(name='TotalRecords'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumbers?: int32(name='PageNumbers'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  dedicatedHosts?: [ 
    {
      allocationStatus?: string(name='AllocationStatus'),
      region?: string(name='Region'),
      hostStatus?: string(name='HostStatus'),
      zoneId?: string(name='ZoneId'),
      hostCPU?: int32(name='HostCPU'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      engine?: string(name='Engine'),
      hostMem?: int32(name='HostMem'),
      createdTime?: string(name='CreatedTime'),
    }
  ](name='DedicatedHosts'),
}

model DescribeBriefDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBriefDedicatedHostsResponseBody(name='body'),
}

async function describeBriefDedicatedHostsWithOptions(request: DescribeBriefDedicatedHostsRequest, runtime: Util.RuntimeOptions): DescribeBriefDedicatedHostsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBriefDedicatedHosts', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBriefDedicatedHosts(request: DescribeBriefDedicatedHostsRequest): DescribeBriefDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBriefDedicatedHostsWithOptions(request, runtime);
}

model DescribeDedicatedResourceAdvisorRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeDedicatedResourceAdvisorResponseBody = {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  requestId?: string(name='RequestId'),
  resourceAdvisors?: {
    resourceAdvisors?: [ 
    {
      cpuUsageAfterAction?: float(name='CpuUsageAfterAction'),
      action?: string(name='Action'),
      destinationDedicatedHostId?: string(name='DestinationDedicatedHostId'),
      sourceDedicatedInstanceId?: string(name='SourceDedicatedInstanceId'),
      actionDescription?: string(name='ActionDescription'),
      sourceDedicatedInstanceRole?: string(name='SourceDedicatedInstanceRole'),
      sourceDedicatedHostId?: string(name='SourceDedicatedHostId'),
      cpuUsageBeforeAction?: float(name='CpuUsageBeforeAction'),
    }
  ](name='ResourceAdvisors')
  }(name='ResourceAdvisors'),
}

model DescribeDedicatedResourceAdvisorResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedResourceAdvisorResponseBody(name='body'),
}

async function describeDedicatedResourceAdvisorWithOptions(request: DescribeDedicatedResourceAdvisorRequest, runtime: Util.RuntimeOptions): DescribeDedicatedResourceAdvisorResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedResourceAdvisor', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedResourceAdvisor(request: DescribeDedicatedResourceAdvisorRequest): DescribeDedicatedResourceAdvisorResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedResourceAdvisorWithOptions(request, runtime);
}

model DescribeListUserBackupFileRecordRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  status?: string(name='Status'),
  engine?: string(name='Engine'),
  opsServiceVersion?: string(name='OpsServiceVersion'),
  regionId?: string(name='RegionId'),
}

model DescribeListUserBackupFileRecordResponseBody = {
  requestId?: string(name='RequestId'),
  records?: [ 
    {
      status?: string(name='Status'),
      ossFilePath?: string(name='OssFilePath'),
      ossBucket?: string(name='OssBucket'),
      gmtModified?: string(name='GmtModified'),
      bid?: string(name='Bid'),
      engineVersion?: string(name='EngineVersion'),
      ossFileName?: string(name='OssFileName'),
      ossFileSize?: long(name='OssFileSize'),
      gmtCreated?: string(name='GmtCreated'),
      backupSetId?: string(name='BackupSetId'),
      instanceName?: string(name='InstanceName'),
      dbInstanceName?: string(name='DbInstanceName'),
      engine?: string(name='Engine'),
      binlogInfo?: string(name='BinlogInfo'),
      custinsId?: string(name='CustinsId'),
      ossFileMetaData?: string(name='OssFileMetaData'),
      ossUrl?: string(name='OssUrl'),
      taskId?: string(name='TaskId'),
      id?: long(name='Id'),
      reason?: string(name='Reason'),
      uid?: string(name='Uid'),
    }
  ](name='Records'),
}

model DescribeListUserBackupFileRecordResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeListUserBackupFileRecordResponseBody(name='body'),
}

async function describeListUserBackupFileRecordWithOptions(request: DescribeListUserBackupFileRecordRequest, runtime: Util.RuntimeOptions): DescribeListUserBackupFileRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeListUserBackupFileRecord', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeListUserBackupFileRecord(request: DescribeListUserBackupFileRecordRequest): DescribeListUserBackupFileRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeListUserBackupFileRecordWithOptions(request, runtime);
}

model CreateDedicatedHostAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  regionId?: string(name='RegionId'),
  bastionInstanceId?: string(name='BastionInstanceId'),
  accountType?: string(name='AccountType'),
  clientToken?: string(name='ClientToken'),
}

model CreateDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostAccountResponseBody(name='body'),
}

async function createDedicatedHostAccountWithOptions(request: CreateDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDedicatedHostAccount', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDedicatedHostAccount(request: CreateDedicatedHostAccountRequest): CreateDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostAccountWithOptions(request, runtime);
}

model DeleteDedicatedHostAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  accountName?: string(name='AccountName'),
  regionId?: string(name='RegionId'),
}

model DeleteDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDedicatedHostAccountResponseBody(name='body'),
}

async function deleteDedicatedHostAccountWithOptions(request: DeleteDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): DeleteDedicatedHostAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDedicatedHostAccount', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDedicatedHostAccount(request: DeleteDedicatedHostAccountRequest): DeleteDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedHostAccountWithOptions(request, runtime);
}

model DeleteDedicatedHostGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  regionId?: string(name='RegionId'),
}

model DeleteDedicatedHostGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDedicatedHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDedicatedHostGroupResponseBody(name='body'),
}

async function deleteDedicatedHostGroupWithOptions(request: DeleteDedicatedHostGroupRequest, runtime: Util.RuntimeOptions): DeleteDedicatedHostGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteDedicatedHostGroup', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteDedicatedHostGroup(request: DeleteDedicatedHostGroupRequest): DeleteDedicatedHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedHostGroupWithOptions(request, runtime);
}

model CheckUserIfAuthoriseMyBaseSystemRoleRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  region?: string(name='Region'),
  zoneId?: string(name='ZoneId'),
  ramRoleName?: string(name='RamRoleName'),
}

model CheckUserIfAuthoriseMyBaseSystemRoleResponseBody = {
  aliUid?: string(name='AliUid'),
  requestId?: string(name='RequestId'),
  roleName?: string(name='RoleName'),
}

model CheckUserIfAuthoriseMyBaseSystemRoleResponse = {
  headers: map[string]string(name='headers'),
  body: CheckUserIfAuthoriseMyBaseSystemRoleResponseBody(name='body'),
}

async function checkUserIfAuthoriseMyBaseSystemRoleWithOptions(request: CheckUserIfAuthoriseMyBaseSystemRoleRequest, runtime: Util.RuntimeOptions): CheckUserIfAuthoriseMyBaseSystemRoleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckUserIfAuthoriseMyBaseSystemRole', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkUserIfAuthoriseMyBaseSystemRole(request: CheckUserIfAuthoriseMyBaseSystemRoleRequest): CheckUserIfAuthoriseMyBaseSystemRoleResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkUserIfAuthoriseMyBaseSystemRoleWithOptions(request, runtime);
}

model DescribeScheduleInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  scheduleId?: string(name='ScheduleId'),
}

model DescribeScheduleInstanceResponseBody = {
  scheduleId?: string(name='ScheduleId'),
  requestId?: string(name='RequestId'),
  instanceScheduleStatusList?: [ 
    {
      scheduleStatus?: string(name='ScheduleStatus'),
      instanceNodeTargetHostId?: string(name='InstanceNodeTargetHostId'),
      instanceNodeRole?: string(name='InstanceNodeRole'),
      engine?: string(name='Engine'),
      instanceId?: string(name='InstanceId'),
      instanceNodeSourceHostId?: string(name='InstanceNodeSourceHostId'),
    }
  ](name='InstanceScheduleStatusList'),
}

model DescribeScheduleInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScheduleInstanceResponseBody(name='body'),
}

async function describeScheduleInstanceWithOptions(request: DescribeScheduleInstanceRequest, runtime: Util.RuntimeOptions): DescribeScheduleInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScheduleInstance', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScheduleInstance(request: DescribeScheduleInstanceRequest): DescribeScheduleInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScheduleInstanceWithOptions(request, runtime);
}

model ExcuteScheduleRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  actionType?: string(name='ActionType'),
}

model ExcuteScheduleResponseBody = {
  scheduleId?: string(name='ScheduleId'),
  requestId?: string(name='RequestId'),
}

model ExcuteScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: ExcuteScheduleResponseBody(name='body'),
}

async function excuteScheduleWithOptions(request: ExcuteScheduleRequest, runtime: Util.RuntimeOptions): ExcuteScheduleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExcuteSchedule', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function excuteSchedule(request: ExcuteScheduleRequest): ExcuteScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return excuteScheduleWithOptions(request, runtime);
}

model ReplaceDedicatedHostRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  failoverMode?: string(name='FailoverMode'),
}

model ReplaceDedicatedHostResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
}

model ReplaceDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceDedicatedHostResponseBody(name='body'),
}

async function replaceDedicatedHostWithOptions(request: ReplaceDedicatedHostRequest, runtime: Util.RuntimeOptions): ReplaceDedicatedHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReplaceDedicatedHost', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function replaceDedicatedHost(request: ReplaceDedicatedHostRequest): ReplaceDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceDedicatedHostWithOptions(request, runtime);
}

model ModifyDedicatedHostAccountRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  regionId?: string(name='RegionId'),
}

model ModifyDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAccountResponseBody(name='body'),
}

async function modifyDedicatedHostAccountWithOptions(request: ModifyDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAccountResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDedicatedHostAccount', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDedicatedHostAccount(request: ModifyDedicatedHostAccountRequest): ModifyDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAccountWithOptions(request, runtime);
}

model DescribeHostEcsLevelInfoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dbType?: string(name='DbType'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  storageType?: string(name='StorageType'),
}

model DescribeHostEcsLevelInfoResponseBody = {
  requestId?: string(name='RequestId'),
  hostEcsLevelInfos?: [ 
    {
      cddcHostType?: string(name='CddcHostType'),
      items?: [ 
        {
          netBandWidth?: float(name='NetBandWidth'),
          ecsClass?: string(name='EcsClass'),
          rdsClassCode?: string(name='RdsClassCode'),
          cpu?: int32(name='Cpu'),
          cpuFrequency?: string(name='CpuFrequency'),
          storageIops?: int32(name='StorageIops'),
          cloudStorageBandwidth?: float(name='CloudStorageBandwidth'),
          ecsClassCode?: string(name='EcsClassCode'),
          isCloudDisk?: int32(name='IsCloudDisk'),
          memory?: int32(name='Memory'),
          netPackage?: int32(name='NetPackage'),
          cpuVersion?: string(name='CpuVersion'),
          localStorage?: string(name='LocalStorage'),
          description?: string(name='Description'),
        }
      ](name='Items'),
    }
  ](name='HostEcsLevelInfos'),
}

model DescribeHostEcsLevelInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHostEcsLevelInfoResponseBody(name='body'),
}

async function describeHostEcsLevelInfoWithOptions(request: DescribeHostEcsLevelInfoRequest, runtime: Util.RuntimeOptions): DescribeHostEcsLevelInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHostEcsLevelInfo', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHostEcsLevelInfo(request: DescribeHostEcsLevelInfoRequest): DescribeHostEcsLevelInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHostEcsLevelInfoWithOptions(request, runtime);
}

model AllocateHostInstanceCrossVpcVipRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  connectionString?: string(name='ConnectionString'),
  port?: string(name='Port'),
  DBInstanceId?: string(name='DBInstanceId'),
  bindVpcId?: string(name='BindVpcId'),
  bindVSwitchId?: string(name='BindVSwitchId'),
  regionId?: string(name='RegionId'),
}

model AllocateHostInstanceCrossVpcVipResponseBody = {
  taskId?: string(name='TaskId'),
  requestId?: string(name='RequestId'),
}

model AllocateHostInstanceCrossVpcVipResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateHostInstanceCrossVpcVipResponseBody(name='body'),
}

async function allocateHostInstanceCrossVpcVipWithOptions(request: AllocateHostInstanceCrossVpcVipRequest, runtime: Util.RuntimeOptions): AllocateHostInstanceCrossVpcVipResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocateHostInstanceCrossVpcVip', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocateHostInstanceCrossVpcVip(request: AllocateHostInstanceCrossVpcVipRequest): AllocateHostInstanceCrossVpcVipResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateHostInstanceCrossVpcVipWithOptions(request, runtime);
}

model DescribeDedicatedHostsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  orderId?: long(name='OrderId'),
  hostType?: string(name='HostType'),
  hostStatus?: string(name='HostStatus'),
  allocationStatus?: string(name='AllocationStatus'),
  zoneId?: string(name='ZoneId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  pageNumbers?: int32(name='PageNumbers'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDedicatedHostsResponseBody = {
  totalRecords?: int32(name='TotalRecords'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  pageNumbers?: int32(name='PageNumbers'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  dedicatedHosts?: {
    dedicatedHosts?: [ 
    {
      deployType?: string(name='DeployType'),
      hostType?: string(name='HostType'),
      hostStorage?: string(name='HostStorage'),
      memoryUsed?: string(name='MemoryUsed'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
      allocationStatus?: string(name='AllocationStatus'),
      storageUsed?: string(name='StorageUsed'),
      ecsClassCode?: string(name='EcsClassCode'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      memAllocationRatio?: string(name='MemAllocationRatio'),
      createdTime?: string(name='CreatedTime'),
      IPAddress?: string(name='IPAddress'),
      hostStatus?: string(name='HostStatus'),
      hostName?: string(name='HostName'),
      hostCPU?: string(name='HostCPU'),
      cpuUsed?: string(name='CpuUsed'),
      instanceNumber?: string(name='InstanceNumber'),
      openPermission?: string(name='OpenPermission'),
      distributionSymbol?: string(name='DistributionSymbol'),
      VPCId?: string(name='VPCId'),
      hostClass?: string(name='HostClass'),
      endTime?: string(name='EndTime'),
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
      CPUAllocationRatio?: string(name='CPUAllocationRatio'),
      imageCategory?: string(name='ImageCategory'),
      engine?: string(name='Engine'),
      diskAllocationRatio?: string(name='DiskAllocationRatio'),
      hostMem?: string(name='HostMem'),
      bastionInstanceId?: string(name='BastionInstanceId'),
      accountName?: string(name='AccountName'),
    }
  ](name='DedicatedHosts')
  }(name='DedicatedHosts'),
}

model DescribeDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostsResponseBody(name='body'),
}

async function describeDedicatedHostsWithOptions(request: DescribeDedicatedHostsRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHosts', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHosts(request: DescribeDedicatedHostsRequest): DescribeDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostsWithOptions(request, runtime);
}

model DescribeDedicatedHostDisksRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  regionId?: string(name='RegionId'),
}

model DescribeDedicatedHostDisksResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  requestId?: string(name='RequestId'),
  disks?: [ 
    {
      type?: string(name='Type'),
      status?: string(name='Status'),
      performanceLevel?: string(name='PerformanceLevel'),
      diskId?: string(name='DiskId'),
      maxThroughput?: int32(name='MaxThroughput'),
      maxIOPS?: int32(name='MaxIOPS'),
      hasDBInstance?: boolean(name='HasDBInstance'),
      device?: string(name='Device'),
      size?: int32(name='Size'),
      zoneId?: string(name='ZoneId'),
      category?: string(name='Category'),
      DBInstanceId?: string(name='DBInstanceId'),
    }
  ](name='Disks'),
}

model DescribeDedicatedHostDisksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostDisksResponseBody(name='body'),
}

async function describeDedicatedHostDisksWithOptions(request: DescribeDedicatedHostDisksRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostDisksResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHostDisks', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHostDisks(request: DescribeDedicatedHostDisksRequest): DescribeDedicatedHostDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostDisksWithOptions(request, runtime);
}

model DescribeMyBaseInstanceOverViewRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  region?: string(name='Region'),
}

model DescribeMyBaseInstanceOverViewResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    regionModel?: [ 
    {
      engineCount?: string(name='EngineCount'),
      totalCount?: int32(name='TotalCount'),
      region?: string(name='Region'),
      typeModels?: {
        typeModel?: [ 
        {
          count?: int32(name='Count'),
          instanceDateType?: string(name='InstanceDateType'),
          instanceEngineCount?: string(name='InstanceEngineCount'),
          instanceModels?: {
            instanceModel?: [ 
            {
              expireTime?: string(name='ExpireTime'),
              payType?: string(name='PayType'),
              zoneId?: string(name='ZoneId'),
              DBInstanceId?: string(name='DBInstanceId'),
              DBInstanceStatus?: string(name='DBInstanceStatus'),
              createdTime?: string(name='CreatedTime'),
            }
          ](name='InstanceModel')
          }(name='InstanceModels'),
        }
      ](name='TypeModel')
      }(name='TypeModels'),
    }
  ](name='RegionModel')
  }(name='Regions'),
}

model DescribeMyBaseInstanceOverViewResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMyBaseInstanceOverViewResponseBody(name='body'),
}

async function describeMyBaseInstanceOverViewWithOptions(request: DescribeMyBaseInstanceOverViewRequest, runtime: Util.RuntimeOptions): DescribeMyBaseInstanceOverViewResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMyBaseInstanceOverView', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMyBaseInstanceOverView(request: DescribeMyBaseInstanceOverViewRequest): DescribeMyBaseInstanceOverViewResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMyBaseInstanceOverViewWithOptions(request, runtime);
}

model ModifyScheduleMethodRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  engine?: string(name='Engine'),
  instanceDistribution?: string(name='InstanceDistribution'),
  zoneDistribution?: string(name='ZoneDistribution'),
  cpuUtilityThreshold?: string(name='CpuUtilityThreshold'),
  memoryUtilityThreshold?: string(name='MemoryUtilityThreshold'),
  localDiskUtilityThreshold?: string(name='LocalDiskUtilityThreshold'),
  zonesOrder?: string(name='ZonesOrder'),
  regionId?: string(name='RegionId'),
}

model ModifyScheduleMethodResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyScheduleMethodResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyScheduleMethodResponseBody(name='body'),
}

async function modifyScheduleMethodWithOptions(request: ModifyScheduleMethodRequest, runtime: Util.RuntimeOptions): ModifyScheduleMethodResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyScheduleMethod', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyScheduleMethod(request: ModifyScheduleMethodRequest): ModifyScheduleMethodResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyScheduleMethodWithOptions(request, runtime);
}

model DescribeAvailableDedicatedHostClassesRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
  storageType?: string(name='StorageType'),
  dbType?: string(name='DbType'),
}

model DescribeAvailableDedicatedHostClassesResponseBody = {
  requestId?: string(name='RequestId'),
  hostClasses?: {
    hostClasses?: [ 
    {
      description?: string(name='Description'),
      hostClassName?: string(name='HostClassName'),
    }
  ](name='HostClasses')
  }(name='HostClasses'),
}

model DescribeAvailableDedicatedHostClassesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableDedicatedHostClassesResponseBody(name='body'),
}

async function describeAvailableDedicatedHostClassesWithOptions(request: DescribeAvailableDedicatedHostClassesRequest, runtime: Util.RuntimeOptions): DescribeAvailableDedicatedHostClassesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableDedicatedHostClasses', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableDedicatedHostClasses(request: DescribeAvailableDedicatedHostClassesRequest): DescribeAvailableDedicatedHostClassesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableDedicatedHostClassesWithOptions(request, runtime);
}

model DescribeCheckUserBackupFileRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  engineVersion?: string(name='EngineVersion'),
  bucketRegion?: string(name='BucketRegion'),
  backupFile?: string(name='BackupFile'),
}

model DescribeCheckUserBackupFileResponseBody = {
  status?: boolean(name='Status'),
  DBInstanceName?: string(name='DBInstanceName'),
  requestId?: string(name='RequestId'),
  taskId?: long(name='TaskId'),
}

model DescribeCheckUserBackupFileResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCheckUserBackupFileResponseBody(name='body'),
}

async function describeCheckUserBackupFileWithOptions(request: DescribeCheckUserBackupFileRequest, runtime: Util.RuntimeOptions): DescribeCheckUserBackupFileResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCheckUserBackupFile', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCheckUserBackupFile(request: DescribeCheckUserBackupFileRequest): DescribeCheckUserBackupFileResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCheckUserBackupFileWithOptions(request, runtime);
}

model ModifyDedicatedHostPasswordRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  newPassword?: string(name='NewPassword'),
  dedicatedHostId?: string(name='DedicatedHostId'),
}

model ModifyDedicatedHostPasswordResponseBody = {
  dedicatedHostName?: string(name='DedicatedHostName'),
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostPasswordResponseBody(name='body'),
}

async function modifyDedicatedHostPasswordWithOptions(request: ModifyDedicatedHostPasswordRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostPasswordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDedicatedHostPassword', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDedicatedHostPassword(request: ModifyDedicatedHostPasswordRequest): ModifyDedicatedHostPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostPasswordWithOptions(request, runtime);
}

model DescribeScheduleMethodsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
}

model DescribeScheduleMethodsResponseBody = {
  requestId?: string(name='RequestId'),
  scheduleMethodList?: [ 
    {
      zonesOrder?: string(name='ZonesOrder'),
      zoneDistribution?: string(name='ZoneDistribution'),
      CPUUtilityThreshold?: int32(name='CPUUtilityThreshold'),
      dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc'),
      memoryUtilityThreshold?: int32(name='MemoryUtilityThreshold'),
      engine?: string(name='Engine'),
      instanceDistribution?: string(name='InstanceDistribution'),
      localDiskUtilityThreshold?: int32(name='LocalDiskUtilityThreshold'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
    }
  ](name='ScheduleMethodList'),
}

model DescribeScheduleMethodsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScheduleMethodsResponseBody(name='body'),
}

async function describeScheduleMethodsWithOptions(request: DescribeScheduleMethodsRequest, runtime: Util.RuntimeOptions): DescribeScheduleMethodsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScheduleMethods', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScheduleMethods(request: DescribeScheduleMethodsRequest): DescribeScheduleMethodsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScheduleMethodsWithOptions(request, runtime);
}

model ClearDedicatedHostRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  failoverMode?: string(name='FailoverMode'),
}

model ClearDedicatedHostResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model ClearDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: ClearDedicatedHostResponseBody(name='body'),
}

async function clearDedicatedHostWithOptions(request: ClearDedicatedHostRequest, runtime: Util.RuntimeOptions): ClearDedicatedHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ClearDedicatedHost', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function clearDedicatedHost(request: ClearDedicatedHostRequest): ClearDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return clearDedicatedHostWithOptions(request, runtime);
}

model DeleteUserBackupFileRecordRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  engine?: string(name='Engine'),
  opsServiceVersion?: string(name='OpsServiceVersion'),
  instanceName?: string(name='InstanceName'),
  regionId?: string(name='RegionId'),
}

model DeleteUserBackupFileRecordResponseBody = {
  requestId?: string(name='RequestId'),
  success?: string(name='Success'),
  id?: string(name='Id'),
  instanceName?: string(name='InstanceName'),
}

model DeleteUserBackupFileRecordResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteUserBackupFileRecordResponseBody(name='body'),
}

async function deleteUserBackupFileRecordWithOptions(request: DeleteUserBackupFileRecordRequest, runtime: Util.RuntimeOptions): DeleteUserBackupFileRecordResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteUserBackupFileRecord', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteUserBackupFileRecord(request: DeleteUserBackupFileRecordRequest): DeleteUserBackupFileRecordResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteUserBackupFileRecordWithOptions(request, runtime);
}

model DescribeEvaluateDedicatedHostsRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  classCode?: string(name='ClassCode'),
  engine?: string(name='Engine'),
  engineVersion?: string(name='EngineVersion'),
  zoneId?: string(name='ZoneId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  storageType?: string(name='StorageType'),
  storageSize?: int32(name='StorageSize'),
  nodeType?: string(name='NodeType'),
}

model DescribeEvaluateDedicatedHostsResponseBody = {
  requestId?: string(name='RequestId'),
  instanceRequiredCPU?: int32(name='InstanceRequiredCPU'),
  cpuOverAllocationRatio?: int32(name='CpuOverAllocationRatio'),
  memoryOverAllocationRatio?: int32(name='MemoryOverAllocationRatio'),
  instanceRequiredMemory?: int32(name='InstanceRequiredMemory'),
  instanceClassCode?: string(name='InstanceClassCode'),
  instanceRequiredStorage?: int32(name='InstanceRequiredStorage'),
  diskOverAllocationRatio?: int32(name='DiskOverAllocationRatio'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  dedicatedHosts?: [ 
    {
      hostAllocationStatus?: boolean(name='HostAllocationStatus'),
      comment?: string(name='Comment'),
      hostFreeMem?: int32(name='HostFreeMem'),
      hostStatus?: string(name='HostStatus'),
      hostFreeCPU?: int32(name='HostFreeCPU'),
      hostStorage?: int32(name='HostStorage'),
      hostCPU?: int32(name='HostCPU'),
      regionId?: string(name='RegionId'),
      hostFreeStorage?: int32(name='HostFreeStorage'),
      vSwitchId?: string(name='VSwitchId'),
      dedicatedHostName?: string(name='DedicatedHostName'),
      zoneId?: string(name='ZoneId'),
      imageCategory?: string(name='ImageCategory'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      engine?: string(name='Engine'),
      isCouldSSD?: boolean(name='IsCouldSSD'),
      isAvailableForInstance?: boolean(name='IsAvailableForInstance'),
      hostMem?: int32(name='HostMem'),
      createdTime?: long(name='CreatedTime'),
      IPAddress?: string(name='IPAddress'),
    }
  ](name='DedicatedHosts'),
}

model DescribeEvaluateDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEvaluateDedicatedHostsResponseBody(name='body'),
}

async function describeEvaluateDedicatedHostsWithOptions(request: DescribeEvaluateDedicatedHostsRequest, runtime: Util.RuntimeOptions): DescribeEvaluateDedicatedHostsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEvaluateDedicatedHosts', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEvaluateDedicatedHosts(request: DescribeEvaluateDedicatedHostsRequest): DescribeEvaluateDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEvaluateDedicatedHostsWithOptions(request, runtime);
}

model DescribeHostInstanceMonitorInfoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  regionId?: string(name='RegionId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
}

model DescribeHostInstanceMonitorInfoResponseBody = {
  requestId?: string(name='RequestId'),
  items?: [ 
    {
      status?: string(name='Status'),
      memSize?: int32(name='MemSize'),
      diskSize?: int32(name='DiskSize'),
      ip?: string(name='Ip'),
      DBInstanceId?: string(name='DBInstanceId'),
      levelName?: string(name='LevelName'),
      engine?: string(name='Engine'),
      role?: string(name='Role'),
      port?: string(name='Port'),
      cpuCores?: int32(name='CpuCores'),
      engineVersion?: string(name='EngineVersion'),
      auroraSwitchInstanceLog?: {
        switchFrom?: float(name='SwitchFrom'),
        switchType?: float(name='SwitchType'),
        switchTime?: long(name='SwitchTime'),
      }(name='AuroraSwitchInstanceLog'),
    }
  ](name='Items'),
}

model DescribeHostInstanceMonitorInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHostInstanceMonitorInfoResponseBody(name='body'),
}

async function describeHostInstanceMonitorInfoWithOptions(request: DescribeHostInstanceMonitorInfoRequest, runtime: Util.RuntimeOptions): DescribeHostInstanceMonitorInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHostInstanceMonitorInfo', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHostInstanceMonitorInfo(request: DescribeHostInstanceMonitorInfoRequest): DescribeHostInstanceMonitorInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHostInstanceMonitorInfoWithOptions(request, runtime);
}

model DescribeDedicatedHostMetricRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeDedicatedHostMetricResponseBody = {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  requestId?: string(name='RequestId'),
  metrics?: {
    metrics?: [ 
    {
      avgMemUsage?: float(name='AvgMemUsage'),
      endDate?: string(name='EndDate'),
      avgIops?: int32(name='AvgIops'),
      maxMemUsage?: float(name='MaxMemUsage'),
      startDate?: string(name='StartDate'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      maxIops?: int32(name='MaxIops'),
      avgCpuUsage?: float(name='AvgCpuUsage'),
      diskUsage?: float(name='DiskUsage'),
      maxCpuUsage?: float(name='MaxCpuUsage'),
      risks?: {
        risks?: [ string ](name='Risks')
      }(name='Risks'),
    }
  ](name='Metrics')
  }(name='Metrics'),
}

model DescribeDedicatedHostMetricResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostMetricResponseBody(name='body'),
}

async function describeDedicatedHostMetricWithOptions(request: DescribeDedicatedHostMetricRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostMetricResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHostMetric', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHostMetric(request: DescribeDedicatedHostMetricRequest): DescribeDedicatedHostMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostMetricWithOptions(request, runtime);
}

model CreateDedicatedHostRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  hostName?: string(name='HostName'),
  zoneId?: string(name='ZoneId'),
  vSwitchId?: string(name='VSwitchId'),
  hostClass?: string(name='HostClass'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  usedTime?: string(name='UsedTime'),
  clientToken?: string(name='ClientToken'),
  autoRenew?: string(name='AutoRenew'),
  imageCategory?: string(name='ImageCategory'),
}

model CreateDedicatedHostResponseBody = {
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
  dedicateHostList?: {
    dedicateHostList?: [ 
    {
      dedicatedHostId?: string(name='DedicatedHostId'),
    }
  ](name='DedicateHostList')
  }(name='DedicateHostList'),
}

model CreateDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostResponseBody(name='body'),
}

async function createDedicatedHostWithOptions(request: CreateDedicatedHostRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDedicatedHost', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDedicatedHost(request: CreateDedicatedHostRequest): CreateDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostWithOptions(request, runtime);
}

model DescribeDedicatedInstanceMetricRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  regionId?: string(name='RegionId'),
}

model DescribeDedicatedInstanceMetricResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  requestId?: string(name='RequestId'),
  metrics?: {
    metrics?: [ 
    {
      endDate?: string(name='EndDate'),
      maxMemUsage?: float(name='MaxMemUsage'),
      dedicatedInstanceId?: string(name='DedicatedInstanceId'),
      startDate?: string(name='StartDate'),
      diskUsage?: float(name='DiskUsage'),
      avgMemUsage?: float(name='AvgMemUsage'),
      maxIOPS?: int32(name='MaxIOPS'),
      memory?: float(name='Memory'),
      avgCpuUsage?: float(name='AvgCpuUsage'),
      avgIOPS?: int32(name='AvgIOPS'),
      role?: string(name='Role'),
      maxCpuUsage?: float(name='MaxCpuUsage'),
      risks?: {
        risks?: [ string ](name='Risks')
      }(name='Risks'),
    }
  ](name='Metrics')
  }(name='Metrics'),
}

model DescribeDedicatedInstanceMetricResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedInstanceMetricResponseBody(name='body'),
}

async function describeDedicatedInstanceMetricWithOptions(request: DescribeDedicatedInstanceMetricRequest, runtime: Util.RuntimeOptions): DescribeDedicatedInstanceMetricResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedInstanceMetric', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedInstanceMetric(request: DescribeDedicatedInstanceMetricRequest): DescribeDedicatedInstanceMetricResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedInstanceMetricWithOptions(request, runtime);
}

model DescribeCrossVpcInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model DescribeCrossVpcInstanceResponseBody = {
  hasDelInProcessTask?: boolean(name='HasDelInProcessTask'),
  requestId?: string(name='RequestId'),
  hasCreateInProcessTask?: boolean(name='HasCreateInProcessTask'),
  items?: [ 
    {
      connectionString?: string(name='ConnectionString'),
    }
  ](name='Items'),
}

model DescribeCrossVpcInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCrossVpcInstanceResponseBody(name='body'),
}

async function describeCrossVpcInstanceWithOptions(request: DescribeCrossVpcInstanceRequest, runtime: Util.RuntimeOptions): DescribeCrossVpcInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCrossVpcInstance', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCrossVpcInstance(request: DescribeCrossVpcInstanceRequest): DescribeCrossVpcInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCrossVpcInstanceWithOptions(request, runtime);
}

model ModifyDedicatedHostClassRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  targetClassCode?: string(name='TargetClassCode'),
  switchTime?: string(name='SwitchTime'),
  switchTimeMode?: string(name='SwitchTimeMode'),
}

model ModifyDedicatedHostClassResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model ModifyDedicatedHostClassResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostClassResponseBody(name='body'),
}

async function modifyDedicatedHostClassWithOptions(request: ModifyDedicatedHostClassRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostClassResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDedicatedHostClass', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDedicatedHostClass(request: ModifyDedicatedHostClassRequest): ModifyDedicatedHostClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostClassWithOptions(request, runtime);
}

model DescribeDedicatedHostsCheckInBastionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  bastionInstanceId?: string(name='BastionInstanceId'),
}

model DescribeDedicatedHostsCheckInBastionResponseBody = {
  requestId?: string(name='RequestId'),
  bastionInstanceId?: string(name='BastionInstanceId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  hosts?: [ 
    {
      status?: string(name='Status'),
      dedicatedHostName?: string(name='DedicatedHostName'),
      allocationStatus?: boolean(name='AllocationStatus'),
      inBastion?: boolean(name='InBastion'),
      hostName?: string(name='HostName'),
      ip?: string(name='Ip'),
    }
  ](name='Hosts'),
}

model DescribeDedicatedHostsCheckInBastionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostsCheckInBastionResponseBody(name='body'),
}

async function describeDedicatedHostsCheckInBastionWithOptions(request: DescribeDedicatedHostsCheckInBastionRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostsCheckInBastionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHostsCheckInBastion', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHostsCheckInBastion(request: DescribeDedicatedHostsCheckInBastionRequest): DescribeDedicatedHostsCheckInBastionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostsCheckInBastionWithOptions(request, runtime);
}

model DropDedicatedHostUserRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostName?: string(name='DedicatedHostName'),
  userName?: string(name='UserName'),
  regionId?: string(name='RegionId'),
}

model DropDedicatedHostUserResponseBody = {
  requestId?: string(name='RequestId'),
}

model DropDedicatedHostUserResponse = {
  headers: map[string]string(name='headers'),
  body: DropDedicatedHostUserResponseBody(name='body'),
}

async function dropDedicatedHostUserWithOptions(request: DropDedicatedHostUserRequest, runtime: Util.RuntimeOptions): DropDedicatedHostUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DropDedicatedHostUser', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function dropDedicatedHostUser(request: DropDedicatedHostUserRequest): DropDedicatedHostUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return dropDedicatedHostUserWithOptions(request, runtime);
}

model DescribeDedicatedHostsInBastionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  bastionInstanceId?: string(name='BastionInstanceId'),
}

model DescribeDedicatedHostsInBastionResponseBody = {
  requestId?: string(name='RequestId'),
  bastionInstanceId?: string(name='BastionInstanceId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  hosts?: [ 
    {
      hostDescription?: string(name='HostDescription'),
      comment?: string(name='Comment'),
      bastionHostId?: string(name='BastionHostId'),
      osName?: string(name='OsName'),
      hostAccountCount?: string(name='HostAccountCount'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      hostPrivateIp?: string(name='HostPrivateIp'),
      accountCreating?: boolean(name='AccountCreating'),
      accountName?: string(name='AccountName'),
    }
  ](name='Hosts'),
}

model DescribeDedicatedHostsInBastionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostsInBastionResponseBody(name='body'),
}

async function describeDedicatedHostsInBastionWithOptions(request: DescribeDedicatedHostsInBastionRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostsInBastionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHostsInBastion', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHostsInBastion(request: DescribeDedicatedHostsInBastionRequest): DescribeDedicatedHostsInBastionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostsInBastionWithOptions(request, runtime);
}

model ModifyDedicatedHostGroupAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc'),
  cpuAllocationRatio?: int32(name='CpuAllocationRatio'),
  memAllocationRatio?: int32(name='MemAllocationRatio'),
  diskAllocationRatio?: int32(name='DiskAllocationRatio'),
  allocationPolicy?: string(name='AllocationPolicy'),
  hostReplacePolicy?: string(name='HostReplacePolicy'),
  openPermission?: string(name='OpenPermission'),
}

model ModifyDedicatedHostGroupAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostGroupAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostGroupAttributeWithOptions(request: ModifyDedicatedHostGroupAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostGroupAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDedicatedHostGroupAttribute', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDedicatedHostGroupAttribute(request: ModifyDedicatedHostGroupAttributeRequest): ModifyDedicatedHostGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostGroupAttributeWithOptions(request, runtime);
}

model QueryHostInstanceConsoleInfoRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
}

model QueryHostInstanceConsoleInfoResponseBody = {
  requestId?: string(name='RequestId'),
  hostInstanceConsoleInfos?: [ 
    {
      status?: string(name='Status'),
      maxConnIncreaseRatioValue?: int32(name='MaxConnIncreaseRatioValue'),
      memSize?: int32(name='MemSize'),
      diskSize?: int32(name='DiskSize'),
      ip?: string(name='Ip'),
      port?: string(name='Port'),
      engineVersion?: string(name='EngineVersion'),
      memoryIncreaseRatioValue?: int32(name='MemoryIncreaseRatioValue'),
      cpuIncreaseRatioValue?: int32(name='CpuIncreaseRatioValue'),
      DBInstanceId?: string(name='DBInstanceId'),
      engine?: string(name='Engine'),
      levelName?: string(name='LevelName'),
      role?: string(name='Role'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      cpuCores?: int32(name='CpuCores'),
      perfInfo?: {
        perfIdbPio?: float(name='PerfIdbPio'),
        diskCurr?: float(name='DiskCurr'),
        memRatio?: float(name='MemRatio'),
        cpuRatio?: float(name='CpuRatio'),
      }(name='PerfInfo'),
    }
  ](name='HostInstanceConsoleInfos'),
}

model QueryHostInstanceConsoleInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryHostInstanceConsoleInfoResponseBody(name='body'),
}

async function queryHostInstanceConsoleInfoWithOptions(request: QueryHostInstanceConsoleInfoRequest, runtime: Util.RuntimeOptions): QueryHostInstanceConsoleInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryHostInstanceConsoleInfo', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryHostInstanceConsoleInfo(request: QueryHostInstanceConsoleInfoRequest): QueryHostInstanceConsoleInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryHostInstanceConsoleInfoWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeRegionsResponseBody = {
  requestId?: string(name='RequestId'),
  regions?: {
    RDSRegion?: [ 
    {
      zoneId?: string(name='ZoneId'),
      regionId?: string(name='RegionId'),
    }
  ](name='RDSRegion')
  }(name='Regions'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeRegions', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model QueryHostBaseInfoByInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  DBInstanceId?: string(name='DBInstanceId'),
}

model QueryHostBaseInfoByInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  hostInstanceConsoleInfos?: [ 
    {
      vpcId?: string(name='VpcId'),
      status?: string(name='Status'),
      expiredTime?: string(name='ExpiredTime'),
      clusterName?: string(name='ClusterName'),
      ip?: string(name='Ip'),
      hostName?: string(name='HostName'),
      engine?: string(name='Engine'),
      role?: string(name='Role'),
      port?: string(name='Port'),
      engineVersion?: string(name='EngineVersion'),
    }
  ](name='HostInstanceConsoleInfos'),
}

model QueryHostBaseInfoByInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryHostBaseInfoByInstanceResponseBody(name='body'),
}

async function queryHostBaseInfoByInstanceWithOptions(request: QueryHostBaseInfoByInstanceRequest, runtime: Util.RuntimeOptions): QueryHostBaseInfoByInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('QueryHostBaseInfoByInstance', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function queryHostBaseInfoByInstance(request: QueryHostBaseInfoByInstanceRequest): QueryHostBaseInfoByInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryHostBaseInfoByInstanceWithOptions(request, runtime);
}

model DescribeDedicatedInstanceDistributionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  regionId?: string(name='RegionId'),
}

model DescribeDedicatedInstanceDistributionResponseBody = {
  DBClass?: map[string]any(name='DBClass'),
  DBVersion?: map[string]any(name='DBVersion'),
  requestId?: string(name='RequestId'),
  instanceCount?: int32(name='InstanceCount'),
  DBType?: map[string]any(name='DBType'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
}

model DescribeDedicatedInstanceDistributionResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedInstanceDistributionResponseBody(name='body'),
}

async function describeDedicatedInstanceDistributionWithOptions(request: DescribeDedicatedInstanceDistributionRequest, runtime: Util.RuntimeOptions): DescribeDedicatedInstanceDistributionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedInstanceDistribution', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedInstanceDistribution(request: DescribeDedicatedInstanceDistributionRequest): DescribeDedicatedInstanceDistributionResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedInstanceDistributionWithOptions(request, runtime);
}

model DescribeScheduleHostRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  scheduleId?: string(name='ScheduleId'),
}

model DescribeScheduleHostResponseBody = {
  scheduleId?: string(name='ScheduleId'),
  requestId?: string(name='RequestId'),
  hostScheduleStatusList?: [ 
    {
      scheduleStatus?: string(name='ScheduleStatus'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      instanceOutId?: string(name='InstanceOutId'),
      instanceInId?: string(name='InstanceInId'),
    }
  ](name='HostScheduleStatusList'),
}

model DescribeScheduleHostResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeScheduleHostResponseBody(name='body'),
}

async function describeScheduleHostWithOptions(request: DescribeScheduleHostRequest, runtime: Util.RuntimeOptions): DescribeScheduleHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeScheduleHost', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeScheduleHost(request: DescribeScheduleHostRequest): DescribeScheduleHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeScheduleHostWithOptions(request, runtime);
}

model ModifyDedicatedHostAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  hostName?: string(name='HostName'),
  allocationStatus?: string(name='AllocationStatus'),
}

model ModifyDedicatedHostAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostAttributeWithOptions(request: ModifyDedicatedHostAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyDedicatedHostAttribute', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyDedicatedHostAttribute(request: ModifyDedicatedHostAttributeRequest): ModifyDedicatedHostAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAttributeWithOptions(request, runtime);
}

model CreateDedicatedHostGroupRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  engine?: string(name='Engine'),
  cpuAllocationRatio?: int32(name='CpuAllocationRatio'),
  memAllocationRatio?: int32(name='MemAllocationRatio'),
  diskAllocationRatio?: int32(name='DiskAllocationRatio'),
  allocationPolicy?: string(name='AllocationPolicy'),
  VPCId?: string(name='VPCId'),
  hostReplacePolicy?: string(name='HostReplacePolicy'),
  clientToken?: string(name='ClientToken'),
  openPermission?: int32(name='OpenPermission'),
  dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc'),
}

model CreateDedicatedHostGroupResponseBody = {
  requestId?: string(name='RequestId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
}

model CreateDedicatedHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostGroupResponseBody(name='body'),
}

async function createDedicatedHostGroupWithOptions(request: CreateDedicatedHostGroupRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateDedicatedHostGroup', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createDedicatedHostGroup(request: CreateDedicatedHostGroupRequest): CreateDedicatedHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostGroupWithOptions(request, runtime);
}

model AddHostsToBastionRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  bastionInstanceId?: string(name='BastionInstanceId'),
  hosts?: string(name='Hosts'),
}

model AddHostsToBastionResponseBody = {
  requestId?: string(name='RequestId'),
  bastionInstanceId?: string(name='BastionInstanceId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  hosts?: [ 
    {
      code?: string(name='Code'),
      hostName?: string(name='HostName'),
      message?: string(name='Message'),
      hostPrivateIp?: string(name='HostPrivateIp'),
    }
  ](name='Hosts'),
}

model AddHostsToBastionResponse = {
  headers: map[string]string(name='headers'),
  body: AddHostsToBastionResponseBody(name='body'),
}

async function addHostsToBastionWithOptions(request: AddHostsToBastionRequest, runtime: Util.RuntimeOptions): AddHostsToBastionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddHostsToBastion', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addHostsToBastion(request: AddHostsToBastionRequest): AddHostsToBastionResponse {
  var runtime = new Util.RuntimeOptions{};
  return addHostsToBastionWithOptions(request, runtime);
}

model AttachHostsToBastionUserRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  bastionUser?: string(name='BastionUser'),
  bastionInstanceId?: string(name='BastionInstanceId'),
  hosts?: string(name='Hosts'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
}

model AttachHostsToBastionUserResponseBody = {
  requestId?: string(name='RequestId'),
  bastionInstanceId?: string(name='BastionInstanceId'),
  bastionUser?: string(name='BastionUser'),
  hosts?: [ 
    {
      code?: string(name='Code'),
      hostName?: string(name='HostName'),
      message?: string(name='Message'),
    }
  ](name='Hosts'),
}

model AttachHostsToBastionUserResponse = {
  headers: map[string]string(name='headers'),
  body: AttachHostsToBastionUserResponseBody(name='body'),
}

async function attachHostsToBastionUserWithOptions(request: AttachHostsToBastionUserRequest, runtime: Util.RuntimeOptions): AttachHostsToBastionUserResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachHostsToBastionUser', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachHostsToBastionUser(request: AttachHostsToBastionUserRequest): AttachHostsToBastionUserResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachHostsToBastionUserWithOptions(request, runtime);
}

model DescribeEvaluateDedicatedHostsForInstanceRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  DBInstanceId?: string(name='DBInstanceId'),
  excludeType?: string(name='ExcludeType'),
  zoneId?: string(name='ZoneId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
}

model DescribeEvaluateDedicatedHostsForInstanceResponseBody = {
  requestId?: string(name='RequestId'),
  instanceRequiredCPU?: int32(name='InstanceRequiredCPU'),
  cpuOverAllocationRatio?: int32(name='CpuOverAllocationRatio'),
  memoryOverAllocationRatio?: int32(name='MemoryOverAllocationRatio'),
  instanceRequiredMemory?: int32(name='InstanceRequiredMemory'),
  instanceClassCode?: string(name='InstanceClassCode'),
  availableHostNum?: int32(name='AvailableHostNum'),
  instanceRequiredStorage?: int32(name='InstanceRequiredStorage'),
  diskOverAllocationRatio?: int32(name='DiskOverAllocationRatio'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  dedicatedHosts?: [ 
    {
      isContainReadOnlyInstance?: boolean(name='IsContainReadOnlyInstance'),
      hostAllocationStatus?: boolean(name='HostAllocationStatus'),
      comment?: string(name='Comment'),
      hostFreeMem?: int32(name='HostFreeMem'),
      hostStatus?: string(name='HostStatus'),
      hostFreeCPU?: int32(name='HostFreeCPU'),
      hostStorage?: int32(name='HostStorage'),
      hostCPU?: int32(name='HostCPU'),
      regionId?: string(name='RegionId'),
      hostFreeStorage?: int32(name='HostFreeStorage'),
      vSwitchId?: string(name='VSwitchId'),
      dedicatedHostName?: string(name='DedicatedHostName'),
      zoneId?: string(name='ZoneId'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      engine?: string(name='Engine'),
      isCouldSSD?: boolean(name='IsCouldSSD'),
      isAvailableForInstance?: boolean(name='IsAvailableForInstance'),
      hostMem?: int32(name='HostMem'),
      createdTime?: long(name='CreatedTime'),
      IPAddress?: string(name='IPAddress'),
    }
  ](name='DedicatedHosts'),
}

model DescribeEvaluateDedicatedHostsForInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEvaluateDedicatedHostsForInstanceResponseBody(name='body'),
}

async function describeEvaluateDedicatedHostsForInstanceWithOptions(request: DescribeEvaluateDedicatedHostsForInstanceRequest, runtime: Util.RuntimeOptions): DescribeEvaluateDedicatedHostsForInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEvaluateDedicatedHostsForInstance', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEvaluateDedicatedHostsForInstance(request: DescribeEvaluateDedicatedHostsForInstanceRequest): DescribeEvaluateDedicatedHostsForInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEvaluateDedicatedHostsForInstanceWithOptions(request, runtime);
}

model RestartDedicatedHostRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  failoverMode?: string(name='FailoverMode'),
  forceStop?: boolean(name='ForceStop'),
}

model RestartDedicatedHostResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
}

model RestartDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDedicatedHostResponseBody(name='body'),
}

async function restartDedicatedHostWithOptions(request: RestartDedicatedHostRequest, runtime: Util.RuntimeOptions): RestartDedicatedHostResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RestartDedicatedHost', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function restartDedicatedHost(request: RestartDedicatedHostRequest): RestartDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDedicatedHostWithOptions(request, runtime);
}

model DescribeDedicatedHostHealthRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  regionId?: string(name='RegionId'),
}

model DescribeDedicatedHostHealthResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  resourceEvent?: map[string]any(name='ResourceEvent'),
  requestId?: string(name='RequestId'),
  healthStatus?: map[string]any(name='HealthStatus'),
  hostEvents?: {
    hostEvents?: [ 
    {
      eventName?: string(name='EventName'),
      eventTime?: string(name='EventTime'),
      eventType?: string(name='EventType'),
      eventDescription?: string(name='EventDescription'),
    }
  ](name='HostEvents')
  }(name='HostEvents'),
}

model DescribeDedicatedHostHealthResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostHealthResponseBody(name='body'),
}

async function describeDedicatedHostHealthWithOptions(request: DescribeDedicatedHostHealthRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostHealthResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHostHealth', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHostHealth(request: DescribeDedicatedHostHealthRequest): DescribeDedicatedHostHealthResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostHealthWithOptions(request, runtime);
}

model DescribeHostWebShellRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  regionId?: string(name='RegionId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeHostWebShellResponseBody = {
  loginUrl?: string(name='LoginUrl'),
  requestId?: string(name='RequestId'),
}

model DescribeHostWebShellResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHostWebShellResponseBody(name='body'),
}

async function describeHostWebShellWithOptions(request: DescribeHostWebShellRequest, runtime: Util.RuntimeOptions): DescribeHostWebShellResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeHostWebShell', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeHostWebShell(request: DescribeHostWebShellRequest): DescribeHostWebShellResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHostWebShellWithOptions(request, runtime);
}

model DescribeDedicatedHostAttributeRequest {
  ownerId?: long(name='OwnerId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  regionId?: string(name='RegionId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
}

model DescribeDedicatedHostAttributeResponseBody = {
  hostType?: string(name='HostType'),
  hostStorage?: int32(name='HostStorage'),
  instanceNumberROSlave?: int32(name='InstanceNumberROSlave'),
  accountType?: string(name='AccountType'),
  memoryUsed?: string(name='MemoryUsed'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  requestId?: string(name='RequestId'),
  instanceNumberROMaster?: int32(name='InstanceNumberROMaster'),
  allocationStatus?: string(name='AllocationStatus'),
  storageUsed?: string(name='StorageUsed'),
  ecsClassCode?: string(name='EcsClassCode'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  memAllocationRatio?: string(name='MemAllocationRatio'),
  createdTime?: string(name='CreatedTime'),
  IPAddress?: string(name='IPAddress'),
  autoRenew?: string(name='AutoRenew'),
  hostStatus?: string(name='HostStatus'),
  hostName?: string(name='HostName'),
  hostCPU?: int32(name='HostCPU'),
  openPermission?: string(name='OpenPermission'),
  instanceNumber?: int32(name='InstanceNumber'),
  cpuUsed?: string(name='CpuUsed'),
  VPCId?: string(name='VPCId'),
  hostClass?: string(name='HostClass'),
  regionId?: string(name='RegionId'),
  instanceNumberMaster?: int32(name='InstanceNumberMaster'),
  vSwitchId?: string(name='VSwitchId'),
  instanceNumberSlave?: int32(name='InstanceNumberSlave'),
  expiredTime?: string(name='ExpiredTime'),
  zoneId?: string(name='ZoneId'),
  CPUAllocationRatio?: string(name='CPUAllocationRatio'),
  imageCategory?: string(name='ImageCategory'),
  diskAllocationRatio?: string(name='DiskAllocationRatio'),
  hostMem?: int32(name='HostMem'),
  accountName?: string(name='AccountName'),
}

model DescribeDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostAttributeResponseBody(name='body'),
}

async function describeDedicatedHostAttributeWithOptions(request: DescribeDedicatedHostAttributeRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDedicatedHostAttribute', '2020-03-20', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDedicatedHostAttribute(request: DescribeDedicatedHostAttributeRequest): DescribeDedicatedHostAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostAttributeWithOptions(request, runtime);
}

