/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cddc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateDedicatedHostRequest {
  autoRenew?: string(name='AutoRenew', example='false'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCzSBZH8****'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-6w7q18iwt5jo****'),
  hostClass?: string(name='HostClass', example='rds.g6.4xlarge'),
  hostStorage?: string(name='HostStorage', example='512'),
  hostStorageType?: string(name='HostStorageType', example='cloud_essd0'),
  imageCategory?: string(name='ImageCategory', example='AliLinux'),
  osPassword?: string(name='OsPassword', example='Test123456'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType', example='prepaid'),
  period?: string(name='Period', example='Month'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  usedTime?: string(name='UsedTime', example='1'),
  vSwitchId?: string(name='VSwitchId', example='vsw-bp133c8ifzxd3iv6q****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-i'),
}

model CreateDedicatedHostResponseBody = {
  dedicateHostList?: {
    dedicateHostList?: [ 
    {
      dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp108dki3wdl6****'),
    }
  ](name='DedicateHostList')
  }(name='DedicateHostList'),
  orderId?: long(name='OrderId', example='102565235'),
  requestId?: string(name='RequestId', example='C860658E-68A6-46C1-AF6E-3AE7C4D32375'),
}

model CreateDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDedicatedHostResponseBody(name='body'),
}

async function createDedicatedHostWithOptions(request: CreateDedicatedHostRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dedicatedHostGroupId)) {
    query['DedicatedHostGroupId'] = request.dedicatedHostGroupId;
  }
  if (!Util.isUnset(request.hostClass)) {
    query['HostClass'] = request.hostClass;
  }
  if (!Util.isUnset(request.hostStorage)) {
    query['HostStorage'] = request.hostStorage;
  }
  if (!Util.isUnset(request.hostStorageType)) {
    query['HostStorageType'] = request.hostStorageType;
  }
  if (!Util.isUnset(request.imageCategory)) {
    query['ImageCategory'] = request.imageCategory;
  }
  if (!Util.isUnset(request.osPassword)) {
    query['OsPassword'] = request.osPassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.usedTime)) {
    query['UsedTime'] = request.usedTime;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDedicatedHost',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDedicatedHost(request: CreateDedicatedHostRequest): CreateDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostWithOptions(request, runtime);
}

model CreateDedicatedHostAccountRequest {
  accountName?: string(name='AccountName', example='test'),
  accountPassword?: string(name='AccountPassword', example='testxxxxxx'),
  accountType?: string(name='AccountType', example='Admin'),
  bastionInstanceId?: string(name='BastionInstanceId', example='bastionhost-cn-xxxxxxxxxxx'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz*******'),
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22E12AS'),
}

model CreateDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDedicatedHostAccountResponseBody(name='body'),
}

async function createDedicatedHostAccountWithOptions(request: CreateDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.accountType)) {
    query['AccountType'] = request.accountType;
  }
  if (!Util.isUnset(request.bastionInstanceId)) {
    query['BastionInstanceId'] = request.bastionInstanceId;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDedicatedHostAccount',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDedicatedHostAccount(request: CreateDedicatedHostAccountRequest): CreateDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostAccountWithOptions(request, runtime);
}

model CreateDedicatedHostGroupRequest {
  allocationPolicy?: string(name='AllocationPolicy', example='Evenly'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz*******'),
  cpuAllocationRatio?: int32(name='CpuAllocationRatio', example='200'),
  dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc', example='mysqlcluster'),
  diskAllocationRatio?: int32(name='DiskAllocationRatio', example='200'),
  engine?: string(name='Engine', example='MySQL'),
  hostReplacePolicy?: string(name='HostReplacePolicy', example='Auto'),
  memAllocationRatio?: int32(name='MemAllocationRatio', example='100'),
  openPermission?: int32(name='OpenPermission', example='1'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  VPCId?: string(name='VPCId', example='vpc-t4n7v5m6icc0a4314****'),
}

model CreateDedicatedHostGroupResponseBody = {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-7a9********'),
  requestId?: string(name='RequestId', example='C6592723-09E1-4248-A78E-12AB00D7A79D'),
}

model CreateDedicatedHostGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateDedicatedHostGroupResponseBody(name='body'),
}

async function createDedicatedHostGroupWithOptions(request: CreateDedicatedHostGroupRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationPolicy)) {
    query['AllocationPolicy'] = request.allocationPolicy;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.cpuAllocationRatio)) {
    query['CpuAllocationRatio'] = request.cpuAllocationRatio;
  }
  if (!Util.isUnset(request.dedicatedHostGroupDesc)) {
    query['DedicatedHostGroupDesc'] = request.dedicatedHostGroupDesc;
  }
  if (!Util.isUnset(request.diskAllocationRatio)) {
    query['DiskAllocationRatio'] = request.diskAllocationRatio;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.hostReplacePolicy)) {
    query['HostReplacePolicy'] = request.hostReplacePolicy;
  }
  if (!Util.isUnset(request.memAllocationRatio)) {
    query['MemAllocationRatio'] = request.memAllocationRatio;
  }
  if (!Util.isUnset(request.openPermission)) {
    query['OpenPermission'] = request.openPermission;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.VPCId)) {
    query['VPCId'] = request.VPCId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDedicatedHostGroup',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDedicatedHostGroup(request: CreateDedicatedHostGroupRequest): CreateDedicatedHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostGroupWithOptions(request, runtime);
}

model CreateMyBaseRequest {
  autoRenew?: string(name='AutoRenew', example='false'),
  clientToken?: string(name='ClientToken', example='4ed77dd1-ff52-407e-ac58-dc251822****'),
  dedicatedHostGroupDescription?: string(name='DedicatedHostGroupDescription', example='testDedicatedGroupName'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-6dx5n9gjs96u****'),
  ECSClassList?: [ 
    {
      dataDiskPerformanceLevel?: string(name='dataDiskPerformanceLevel'),
      diskCapacity?: int32(name='diskCapacity'),
      diskCount?: int32(name='diskCount'),
      diskType?: string(name='diskType'),
      instanceType?: string(name='instanceType'),
      nodeCount?: int32(name='nodeCount'),
      sysDiskCapacity?: int32(name='sysDiskCapacity'),
      sysDiskType?: string(name='sysDiskType'),
      systemDiskPerformanceLevel?: string(name='systemDiskPerformanceLevel'),
    }
  ](name='ECSClassList', example='[{"sysDiskCapacity":40,"instanceType":"ecs.d2s.10xlarge","nodeCount":1,"sysDiskType":"cloud_essd"}]'),
  ecsDeploymentSetId?: string(name='EcsDeploymentSetId'),
  ecsHostName?: string(name='EcsHostName'),
  ecsInstanceName?: string(name='EcsInstanceName'),
  ecsUniqueSuffix?: string(name='EcsUniqueSuffix'),
  engine?: string(name='Engine', example='alisql'),
  imageId?: string(name='ImageId'),
  keyPairName?: string(name='KeyPairName'),
  osPassword?: string(name='OsPassword', example='Test123456'),
  ownerId?: long(name='OwnerId'),
  passwordInherit?: string(name='PasswordInherit'),
  payType?: string(name='PayType', example='PrePaid'),
  period?: string(name='Period', example='1'),
  periodType?: string(name='PeriodType', example='Monthly'),
  regionId?: string(name='RegionId', example='ap-southeast-1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-t4neld965n89ocvt****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-t4ni3mzqqw98vt317****'),
  vpcId?: string(name='VpcId', example='vpc-t4nbtmekgxotv0d3y****'),
  zoneId?: string(name='ZoneId', example='ap-southeast-1a'),
}

model CreateMyBaseShrinkRequest {
  autoRenew?: string(name='AutoRenew', example='false'),
  clientToken?: string(name='ClientToken', example='4ed77dd1-ff52-407e-ac58-dc251822****'),
  dedicatedHostGroupDescription?: string(name='DedicatedHostGroupDescription', example='testDedicatedGroupName'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-6dx5n9gjs96u****'),
  ECSClassListShrink?: string(name='ECSClassList', example='[{"sysDiskCapacity":40,"instanceType":"ecs.d2s.10xlarge","nodeCount":1,"sysDiskType":"cloud_essd"}]'),
  ecsDeploymentSetId?: string(name='EcsDeploymentSetId'),
  ecsHostName?: string(name='EcsHostName'),
  ecsInstanceName?: string(name='EcsInstanceName'),
  ecsUniqueSuffix?: string(name='EcsUniqueSuffix'),
  engine?: string(name='Engine', example='alisql'),
  imageId?: string(name='ImageId'),
  keyPairName?: string(name='KeyPairName'),
  osPassword?: string(name='OsPassword', example='Test123456'),
  ownerId?: long(name='OwnerId'),
  passwordInherit?: string(name='PasswordInherit'),
  payType?: string(name='PayType', example='PrePaid'),
  period?: string(name='Period', example='1'),
  periodType?: string(name='PeriodType', example='Monthly'),
  regionId?: string(name='RegionId', example='ap-southeast-1'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  securityGroupId?: string(name='SecurityGroupId', example='sg-t4neld965n89ocvt****'),
  vSwitchId?: string(name='VSwitchId', example='vsw-t4ni3mzqqw98vt317****'),
  vpcId?: string(name='VpcId', example='vpc-t4nbtmekgxotv0d3y****'),
  zoneId?: string(name='ZoneId', example='ap-southeast-1a'),
}

model CreateMyBaseResponseBody = {
  orderList?: {
    orderList?: [ 
    {
      createTimestamp?: long(name='CreateTimestamp', example='1661498032347'),
      dedicatedHostGroupName?: string(name='DedicatedHostGroupName'),
      ECSInstanceIds?: string(name='ECSInstanceIds', example='["i-t4n1tandot8j3axvwhe5"]'),
      orderId?: string(name='OrderId', example='21767077790****'),
    }
  ](name='OrderList')
  }(name='OrderList'),
  requestId?: string(name='RequestId', example='937F6B32-A796-53A0-99C8-F7A9660E****'),
}

model CreateMyBaseResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: CreateMyBaseResponseBody(name='body'),
}

async function createMyBaseWithOptions(tmpReq: CreateMyBaseRequest, runtime: Util.RuntimeOptions): CreateMyBaseResponse {
  Util.validateModel(tmpReq);
  var request = new CreateMyBaseShrinkRequest{};
  OpenApiUtil.convert(tmpReq, request);
  if (!Util.isUnset(tmpReq.ECSClassList)) {
    request.ECSClassListShrink = OpenApiUtil.arrayToStringWithSpecifiedStyle(tmpReq.ECSClassList, 'ECSClassList', 'json');
  }
  var query = {};
  if (!Util.isUnset(request.autoRenew)) {
    query['AutoRenew'] = request.autoRenew;
  }
  if (!Util.isUnset(request.clientToken)) {
    query['ClientToken'] = request.clientToken;
  }
  if (!Util.isUnset(request.dedicatedHostGroupDescription)) {
    query['DedicatedHostGroupDescription'] = request.dedicatedHostGroupDescription;
  }
  if (!Util.isUnset(request.dedicatedHostGroupId)) {
    query['DedicatedHostGroupId'] = request.dedicatedHostGroupId;
  }
  if (!Util.isUnset(request.ECSClassListShrink)) {
    query['ECSClassList'] = request.ECSClassListShrink;
  }
  if (!Util.isUnset(request.ecsDeploymentSetId)) {
    query['EcsDeploymentSetId'] = request.ecsDeploymentSetId;
  }
  if (!Util.isUnset(request.ecsHostName)) {
    query['EcsHostName'] = request.ecsHostName;
  }
  if (!Util.isUnset(request.ecsInstanceName)) {
    query['EcsInstanceName'] = request.ecsInstanceName;
  }
  if (!Util.isUnset(request.ecsUniqueSuffix)) {
    query['EcsUniqueSuffix'] = request.ecsUniqueSuffix;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.imageId)) {
    query['ImageId'] = request.imageId;
  }
  if (!Util.isUnset(request.keyPairName)) {
    query['KeyPairName'] = request.keyPairName;
  }
  if (!Util.isUnset(request.osPassword)) {
    query['OsPassword'] = request.osPassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.passwordInherit)) {
    query['PasswordInherit'] = request.passwordInherit;
  }
  if (!Util.isUnset(request.payType)) {
    query['PayType'] = request.payType;
  }
  if (!Util.isUnset(request.period)) {
    query['Period'] = request.period;
  }
  if (!Util.isUnset(request.periodType)) {
    query['PeriodType'] = request.periodType;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.securityGroupId)) {
    query['SecurityGroupId'] = request.securityGroupId;
  }
  if (!Util.isUnset(request.vSwitchId)) {
    query['VSwitchId'] = request.vSwitchId;
  }
  if (!Util.isUnset(request.vpcId)) {
    query['VpcId'] = request.vpcId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateMyBase',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createMyBase(request: CreateMyBaseRequest): CreateMyBaseResponse {
  var runtime = new Util.RuntimeOptions{};
  return createMyBaseWithOptions(request, runtime);
}

model DeleteDedicatedHostAccountRequest {
  accountName?: string(name='AccountName', example='test'),
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22E12AS'),
}

model DeleteDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDedicatedHostAccountResponseBody(name='body'),
}

async function deleteDedicatedHostAccountWithOptions(request: DeleteDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): DeleteDedicatedHostAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDedicatedHostAccount',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDedicatedHostAccount(request: DeleteDedicatedHostAccountRequest): DeleteDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedHostAccountWithOptions(request, runtime);
}

model DeleteDedicatedHostGroupRequest {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-h5i4p331f509****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteDedicatedHostGroupResponseBody = {
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22E1765'),
}

model DeleteDedicatedHostGroupResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DeleteDedicatedHostGroupResponseBody(name='body'),
}

async function deleteDedicatedHostGroupWithOptions(request: DeleteDedicatedHostGroupRequest, runtime: Util.RuntimeOptions): DeleteDedicatedHostGroupResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostGroupId)) {
    query['DedicatedHostGroupId'] = request.dedicatedHostGroupId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDedicatedHostGroup',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDedicatedHostGroup(request: DeleteDedicatedHostGroupRequest): DeleteDedicatedHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedHostGroupWithOptions(request, runtime);
}

model DescribeDedicatedHostAttributeRequest {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-34639v1jt4y4****'),
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeDedicatedHostAttributeResponseBody = {
  accountName?: string(name='AccountName', example='cdp_system'),
  accountType?: string(name='AccountType', example='Admin'),
  allocationStatus?: string(name='AllocationStatus', example='Suspended'),
  autoRenew?: string(name='AutoRenew', example='false'),
  CPUAllocationRatio?: string(name='CPUAllocationRatio', example='200'),
  cpuUsed?: string(name='CpuUsed', example='36'),
  createdTime?: string(name='CreatedTime', example='2021-11-13T07:14:22Z'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-34639v1jt4y4****'),
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  diskAllocationRatio?: string(name='DiskAllocationRatio', example='200'),
  distributionTag?: string(name='DistributionTag', example='tag'),
  ecsClassCode?: string(name='EcsClassCode', example='ecs.r5.16xlarge'),
  expiredTime?: string(name='ExpiredTime', example='2022-03-16T16:00:00Z'),
  hostCPU?: int32(name='HostCPU', example='16'),
  hostClass?: string(name='HostClass', example='mssql.host.c2xlarge'),
  hostMem?: int32(name='HostMem', example='2048'),
  hostName?: string(name='HostName', example='ch-8vbj9x74z874o****'),
  hostStatus?: string(name='HostStatus', example='1'),
  hostStorage?: int32(name='HostStorage', example='100'),
  hostType?: string(name='HostType', example='dhg_cloud_ssd'),
  IPAddress?: string(name='IPAddress', example='192.168.XX.XX'),
  imageCategory?: string(name='ImageCategory', example='WindowsWithMssqlStdLicense'),
  instanceNumber?: int32(name='InstanceNumber', example='3'),
  instanceNumberMaster?: int32(name='InstanceNumberMaster', example='4'),
  instanceNumberROMaster?: int32(name='InstanceNumberROMaster', example='1'),
  instanceNumberROSlave?: int32(name='InstanceNumberROSlave', example='1'),
  instanceNumberSlave?: int32(name='InstanceNumberSlave', example='1'),
  memAllocationRatio?: string(name='MemAllocationRatio', example='90'),
  memoryUsed?: string(name='MemoryUsed', example='24576'),
  openPermission?: string(name='OpenPermission', example='1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='00A001D6-2630-5CBD-A23C-80BC1BAFDC31'),
  storageUsed?: string(name='StorageUsed', example='588800'),
  VPCId?: string(name='VPCId', example='vpc-wz9vu1jb32wn3sdd6****'),
  vSwitchId?: string(name='VSwitchId', description='VSwitch ID。', example='vsw-bp1kaugqyrzb58oc1****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
}

model DescribeDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedHostAttributeResponseBody(name='body'),
}

async function describeDedicatedHostAttributeWithOptions(request: DescribeDedicatedHostAttributeRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostGroupId)) {
    query['DedicatedHostGroupId'] = request.dedicatedHostGroupId;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHostAttribute',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedHostAttribute(request: DescribeDedicatedHostAttributeRequest): DescribeDedicatedHostAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostAttributeWithOptions(request, runtime);
}

model DescribeDedicatedHostDisksRequest {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp183v72jr033****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeDedicatedHostDisksResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp183v72jr033****'),
  disks?: [ 
    {
      category?: string(name='Category', example='cloud_essd'),
      DBInstanceId?: string(name='DBInstanceId', example='rm-bp121zcqr5h8m****'),
      device?: string(name='Device', example='/dev/xvdb'),
      diskId?: string(name='DiskId', example='d-bp1dffpog8r2eowd****'),
      hasDBInstance?: boolean(name='HasDBInstance', example='true'),
      maxIOPS?: int32(name='MaxIOPS', example='18250'),
      maxThroughput?: int32(name='MaxThroughput', example='284'),
      performanceLevel?: string(name='PerformanceLevel', example='PL1'),
      size?: int32(name='Size', example='329'),
      status?: string(name='Status', example='In_use'),
      type?: string(name='Type', example='data'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='Disks'),
  requestId?: string(name='RequestId', example='C6C6CF41-F284-4F63-AB4D-44FACE3BASQW'),
}

model DescribeDedicatedHostDisksResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedHostDisksResponseBody(name='body'),
}

async function describeDedicatedHostDisksWithOptions(request: DescribeDedicatedHostDisksRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostDisksResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHostDisks',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedHostDisks(request: DescribeDedicatedHostDisksRequest): DescribeDedicatedHostDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostDisksWithOptions(request, runtime);
}

model DescribeDedicatedHostGroupsRequest {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-872yt76ann7e****'),
  engine?: string(name='Engine', example='MySQL'),
  imageCategory?: string(name='ImageCategory', example='AliLinux'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeDedicatedHostGroupsResponseBody = {
  dedicatedHostGroups?: {
    dedicatedHostGroups?: [ 
    {
      allocationPolicy?: string(name='AllocationPolicy', example='Evenly'),
      bastionInstanceId?: string(name='BastionInstanceId', example='rm-bp15rszyxs4t3****'),
      category?: string(name='Category'),
      cpuAllocateRation?: float(name='CpuAllocateRation', example='9.38'),
      cpuAllocatedAmount?: float(name='CpuAllocatedAmount', example='3'),
      cpuAllocationRatio?: int32(name='CpuAllocationRatio', example='200'),
      createTime?: string(name='CreateTime', example='2021-05-07T02:00Z'),
      dedicatedHostCountGroupByHostType?: map[string]any(name='DedicatedHostCountGroupByHostType', example='2'),
      dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc', example='dhg-34639v1jt4y4****'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-34639v1jt4y4****'),
      deployType?: string(name='DeployType', example='origin'),
      diskAllocateRation?: float(name='DiskAllocateRation', example='100'),
      diskAllocatedAmount?: float(name='DiskAllocatedAmount', example='1024'),
      diskAllocationRatio?: int32(name='DiskAllocationRatio', example='200'),
      diskUsedAmount?: float(name='DiskUsedAmount', example='1024'),
      diskUtility?: float(name='DiskUtility', example='0'),
      engine?: string(name='Engine', example='MySQL'),
      hostNumber?: int32(name='HostNumber', example='2'),
      hostReplacePolicy?: string(name='HostReplacePolicy', example='Auto'),
      instanceNumber?: int32(name='InstanceNumber', example='2'),
      memAllocateRation?: float(name='MemAllocateRation', example='9.38'),
      memAllocatedAmount?: float(name='MemAllocatedAmount', example='0'),
      memAllocationRatio?: int32(name='MemAllocationRatio', example='100'),
      memUsedAmount?: float(name='MemUsedAmount', example='0'),
      memUtility?: float(name='MemUtility', example='0'),
      openPermission?: string(name='OpenPermission', example='1'),
      text?: string(name='Text', example='mysql-host'),
      VPCId?: string(name='VPCId', example='vpc-bp1ov7as4yvz4kxei****'),
      zoneIDList?: {
        zoneIDList?: [ string ](name='ZoneIDList')
      }(name='ZoneIDList'),
    }
  ](name='DedicatedHostGroups')
  }(name='DedicatedHostGroups'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22E12SD'),
}

model DescribeDedicatedHostGroupsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedHostGroupsResponseBody(name='body'),
}

async function describeDedicatedHostGroupsWithOptions(request: DescribeDedicatedHostGroupsRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostGroupsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostGroupId)) {
    query['DedicatedHostGroupId'] = request.dedicatedHostGroupId;
  }
  if (!Util.isUnset(request.engine)) {
    query['Engine'] = request.engine;
  }
  if (!Util.isUnset(request.imageCategory)) {
    query['ImageCategory'] = request.imageCategory;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHostGroups',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedHostGroups(request: DescribeDedicatedHostGroupsRequest): DescribeDedicatedHostGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostGroupsWithOptions(request, runtime);
}

model DescribeDedicatedHostsRequest {
  allocationStatus?: string(name='AllocationStatus', example='Allocatable'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-h5i4p331f509****'),
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  hostStatus?: string(name='HostStatus', example='1'),
  hostType?: string(name='HostType', example='dhg_cloud_ssd'),
  orderId?: long(name='OrderId', example='123456789'),
  ownerId?: long(name='OwnerId'),
  pageNumbers?: int32(name='PageNumbers', example='50'),
  pageSize?: int32(name='PageSize', example='20'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tags?: string(name='Tags', example='{"key1":"value1"}'),
  zoneId?: string(name='ZoneId', example='ap-southeast-1a'),
}

model DescribeDedicatedHostsResponseBody = {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-6w7q18iwt5jo****'),
  dedicatedHosts?: {
    dedicatedHosts?: [ 
    {
      accountName?: string(name='AccountName', example='test'),
      accountType?: string(name='AccountType', example='Normal'),
      allocationStatus?: string(name='AllocationStatus', example='Suspended'),
      bastionInstanceId?: string(name='BastionInstanceId', example='bastionhost-cn-i7m2fgw****'),
      CPUAllocationRatio?: string(name='CPUAllocationRatio', example='10'),
      category?: string(name='Category', example='Standard'),
      chargeType?: string(name='ChargeType', example='PREPAY'),
      cpuUsed?: string(name='CpuUsed', example='10'),
      createdTime?: string(name='CreatedTime', example='2020-10-16 16:30:19'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-6w7q18iwt5jo****'),
      dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
      diskAllocationRatio?: string(name='DiskAllocationRatio', example='10'),
      diskInfo?: string(name='DiskInfo', example='{\\"SystemDiskSize\\":20,\\"DataDiskCount\\":0,\\"DataDiskSize\\":0,\\"DataDiskCategory\\":[\\"\\"],\\"SystemDiskCategory\\":\\"cloud_essd\\"}'),
      distributionSymbol?: string(name='DistributionSymbol', example='0'),
      distributionTag?: string(name='DistributionTag', example='t4n9uz07h3r1tmcejtxf:1'),
      ecsClassCode?: string(name='EcsClassCode', example='ecs.r5.16xlarge'),
      ecsId?: string(name='EcsId', example='i-2zec7l031p0jtru3pn7a'),
      endTime?: string(name='EndTime', example='2021-10-16 16:30:19'),
      engine?: string(name='Engine', example='mysql'),
      hostCPU?: string(name='HostCPU', example='16'),
      hostClass?: string(name='HostClass', example='rds.g6.4xlarge'),
      hostMem?: string(name='HostMem', example='65536'),
      hostName?: string(name='HostName', example='ch-bp15xfnp706tl****'),
      hostStatus?: string(name='HostStatus', example='1'),
      hostStorage?: string(name='HostStorage', example='1234'),
      hostType?: string(name='HostType', example='dhg_cloud_ssd'),
      IPAddress?: string(name='IPAddress', example='192.168.XX.XX'),
      imageCategory?: string(name='ImageCategory', example='ALinux'),
      instanceNumber?: string(name='InstanceNumber', example='1'),
      memAllocationRatio?: string(name='MemAllocationRatio', example='90'),
      memoryUsed?: string(name='MemoryUsed', example='24576'),
      mssqlSupportVersion?: string(name='MssqlSupportVersion', example='2012_std_ha,2012_std,2016_std_ha,2016_std,2017_std_ha,2017_std,2019_std_ha,2019_std'),
      openPermission?: string(name='OpenPermission', example='3'),
      storageUsed?: string(name='StorageUsed', example='588800'),
      VPCId?: string(name='VPCId', example='vpc-bp1roz55mrbj3ka1s****'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp133c8ifzxd3iv6q****'),
      zoneId?: string(name='ZoneId', example='ap-southeast-1a'),
    }
  ](name='DedicatedHosts')
  }(name='DedicatedHosts'),
  maxAutoScaleHostStorage?: long(name='MaxAutoScaleHostStorage', example='3661824'),
  pageNumbers?: int32(name='PageNumbers', example='2'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22EASER'),
  totalRecords?: int32(name='TotalRecords', example='40'),
}

model DescribeDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeDedicatedHostsResponseBody(name='body'),
}

async function describeDedicatedHostsWithOptions(request: DescribeDedicatedHostsRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationStatus)) {
    query['AllocationStatus'] = request.allocationStatus;
  }
  if (!Util.isUnset(request.dedicatedHostGroupId)) {
    query['DedicatedHostGroupId'] = request.dedicatedHostGroupId;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.hostStatus)) {
    query['HostStatus'] = request.hostStatus;
  }
  if (!Util.isUnset(request.hostType)) {
    query['HostType'] = request.hostType;
  }
  if (!Util.isUnset(request.orderId)) {
    query['OrderId'] = request.orderId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.pageNumbers)) {
    query['PageNumbers'] = request.pageNumbers;
  }
  if (!Util.isUnset(request.pageSize)) {
    query['PageSize'] = request.pageSize;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.tags)) {
    query['Tags'] = request.tags;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHosts',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedHosts(request: DescribeDedicatedHostsRequest): DescribeDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostsWithOptions(request, runtime);
}

model DescribeHostEcsLevelInfoRequest {
  dbType?: string(name='DbType', example='mysql'),
  imageCategory?: string(name='ImageCategory', example='AliLinux'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  storageType?: string(name='StorageType', example='local_ssd'),
  zoneId?: string(name='ZoneId', example='ap-southeast-1a'),
}

model DescribeHostEcsLevelInfoResponseBody = {
  hostEcsLevelInfos?: [ 
    {
      cddcHostType?: string(name='CddcHostType', example='ram'),
      items?: [ 
        {
          cloudStorageBandwidth?: float(name='CloudStorageBandwidth', example='4'),
          cpu?: int32(name='Cpu', example='24'),
          cpuFrequency?: string(name='CpuFrequency', example='2.5 GHz/3.2 GHz'),
          cpuVersion?: string(name='CpuVersion', example='Intel Xeon(Cascade Lake) Platinum 8269CY'),
          description?: string(name='Description', example='testxxx'),
          ecsClass?: string(name='EcsClass'),
          ecsClassCode?: string(name='EcsClassCode', example='ecs.g6.2xlarge'),
          isCloudDisk?: int32(name='IsCloudDisk', example='1'),
          localStorage?: string(name='LocalStorage', example='7'),
          memory?: int32(name='Memory', example='192'),
          netBandWidth?: float(name='NetBandWidth', example='10'),
          netPackage?: int32(name='NetPackage', example='150'),
          rdsClassCode?: string(name='RdsClassCode', example='mssql.cluster.host.g2xlarge'),
          storageIops?: int32(name='StorageIops', example='5'),
        }
      ](name='Items'),
    }
  ](name='HostEcsLevelInfos'),
  requestId?: string(name='RequestId', example='395858E2-2A82-4ED7-BB93-2DB60119EF4C'),
}

model DescribeHostEcsLevelInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHostEcsLevelInfoResponseBody(name='body'),
}

async function describeHostEcsLevelInfoWithOptions(request: DescribeHostEcsLevelInfoRequest, runtime: Util.RuntimeOptions): DescribeHostEcsLevelInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dbType)) {
    query['DbType'] = request.dbType;
  }
  if (!Util.isUnset(request.imageCategory)) {
    query['ImageCategory'] = request.imageCategory;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.storageType)) {
    query['StorageType'] = request.storageType;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHostEcsLevelInfo',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHostEcsLevelInfo(request: DescribeHostEcsLevelInfoRequest): DescribeHostEcsLevelInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHostEcsLevelInfoWithOptions(request, runtime);
}

model DescribeHostWebShellRequest {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-b'),
}

model DescribeHostWebShellResponseBody = {
  loginUrl?: string(name='LoginUrl', example='https://ecs-workbench-disposable.aliyun.com/account/disposable/login/sst/mybase.c7dfa64e9f/m44kih****'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ESTG2'),
}

model DescribeHostWebShellResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeHostWebShellResponseBody(name='body'),
}

async function describeHostWebShellWithOptions(request: DescribeHostWebShellRequest, runtime: Util.RuntimeOptions): DescribeHostWebShellResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.zoneId)) {
    query['ZoneId'] = request.zoneId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHostWebShell',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHostWebShell(request: DescribeHostWebShellRequest): DescribeHostWebShellResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHostWebShellWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    RDSRegion?: [ 
    {
      regionId?: string(name='RegionId', example='ap-southeast-1'),
      zoneId?: string(name='ZoneId', example='ap-southeast-1a'),
    }
  ](name='RDSRegion')
  }(name='Regions'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ap-southeast-1'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='DEDICATEDHOST'),
  tag?: [ 
    {
      key?: string(name='Key', example='demokey'),
      value?: string(name='Value', example='demovalue'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='2853CAA0-D7A2-5CAB-B3A8-BDE2994F320C'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='ch-t4n4dcdvu6840****'),
      resourceType?: string(name='ResourceType', example='ALIYUN::CDDC::DEDICATEDHOST'),
      tagKey?: string(name='TagKey', example='demokey'),
      tagValue?: string(name='TagValue', example='demovalue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyDedicatedHostAccountRequest {
  accountName?: string(name='AccountName', example='test'),
  accountPassword?: string(name='AccountPassword', example='test*****'),
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
}

model ModifyDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedHostAccountResponseBody(name='body'),
}

async function modifyDedicatedHostAccountWithOptions(request: ModifyDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAccountResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.accountName)) {
    query['AccountName'] = request.accountName;
  }
  if (!Util.isUnset(request.accountPassword)) {
    query['AccountPassword'] = request.accountPassword;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostAccount',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostAccount(request: ModifyDedicatedHostAccountRequest): ModifyDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAccountWithOptions(request, runtime);
}

model ModifyDedicatedHostAttributeRequest {
  allocationStatus?: string(name='AllocationStatus', example='1'),
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  hostName?: string(name='HostName', example='mysql-host'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostAttributeResponseBody = {
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ESFS'),
}

model ModifyDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedHostAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostAttributeWithOptions(request: ModifyDedicatedHostAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationStatus)) {
    query['AllocationStatus'] = request.allocationStatus;
  }
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.hostName)) {
    query['HostName'] = request.hostName;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostAttribute',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostAttribute(request: ModifyDedicatedHostAttributeRequest): ModifyDedicatedHostAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostClassRequest {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp1fgj3kt7fsb****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  switchTime?: string(name='SwitchTime', example='2021-07-13T07:14:22Z'),
  switchTimeMode?: string(name='SwitchTimeMode', example='2'),
  targetClassCode?: string(name='TargetClassCode', example='rds.c6.x4large'),
}

model ModifyDedicatedHostClassResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp1fgj3kt7fsb****'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ESD12'),
  taskId?: string(name='TaskId', example='10254125'),
}

model ModifyDedicatedHostClassResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedHostClassResponseBody(name='body'),
}

async function modifyDedicatedHostClassWithOptions(request: ModifyDedicatedHostClassRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostClassResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.switchTime)) {
    query['SwitchTime'] = request.switchTime;
  }
  if (!Util.isUnset(request.switchTimeMode)) {
    query['SwitchTimeMode'] = request.switchTimeMode;
  }
  if (!Util.isUnset(request.targetClassCode)) {
    query['TargetClassCode'] = request.targetClassCode;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostClass',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostClass(request: ModifyDedicatedHostClassRequest): ModifyDedicatedHostClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostClassWithOptions(request, runtime);
}

model ModifyDedicatedHostGroupAttributeRequest {
  allocationPolicy?: string(name='AllocationPolicy', example='Intensively'),
  cpuAllocationRatio?: int32(name='CpuAllocationRatio', example='300'),
  dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc', example='mysql-cluster'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-h5i4p331f509****'),
  diskAllocationRatio?: int32(name='DiskAllocationRatio', example='200'),
  hostReplacePolicy?: string(name='HostReplacePolicy', example='Auto'),
  memAllocationRatio?: int32(name='MemAllocationRatio', example='100'),
  openPermission?: string(name='OpenPermission', example='0'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostGroupAttributeResponseBody = {
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22EEDAS'),
}

model ModifyDedicatedHostGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedHostGroupAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostGroupAttributeWithOptions(request: ModifyDedicatedHostGroupAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostGroupAttributeResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.allocationPolicy)) {
    query['AllocationPolicy'] = request.allocationPolicy;
  }
  if (!Util.isUnset(request.cpuAllocationRatio)) {
    query['CpuAllocationRatio'] = request.cpuAllocationRatio;
  }
  if (!Util.isUnset(request.dedicatedHostGroupDesc)) {
    query['DedicatedHostGroupDesc'] = request.dedicatedHostGroupDesc;
  }
  if (!Util.isUnset(request.dedicatedHostGroupId)) {
    query['DedicatedHostGroupId'] = request.dedicatedHostGroupId;
  }
  if (!Util.isUnset(request.diskAllocationRatio)) {
    query['DiskAllocationRatio'] = request.diskAllocationRatio;
  }
  if (!Util.isUnset(request.hostReplacePolicy)) {
    query['HostReplacePolicy'] = request.hostReplacePolicy;
  }
  if (!Util.isUnset(request.memAllocationRatio)) {
    query['MemAllocationRatio'] = request.memAllocationRatio;
  }
  if (!Util.isUnset(request.openPermission)) {
    query['OpenPermission'] = request.openPermission;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostGroupAttribute',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostGroupAttribute(request: ModifyDedicatedHostGroupAttributeRequest): ModifyDedicatedHostGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostGroupAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostPasswordRequest {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  newPassword?: string(name='NewPassword', example='test*****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostPasswordResponseBody = {
  dedicatedHostName?: string(name='DedicatedHostName', example='test123****'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22E12AS'),
}

model ModifyDedicatedHostPasswordResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ModifyDedicatedHostPasswordResponseBody(name='body'),
}

async function modifyDedicatedHostPasswordWithOptions(request: ModifyDedicatedHostPasswordRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostPasswordResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.newPassword)) {
    query['NewPassword'] = request.newPassword;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostPassword',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostPassword(request: ModifyDedicatedHostPasswordRequest): ModifyDedicatedHostPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostPasswordWithOptions(request, runtime);
}

model QueryHostBaseInfoByInstanceRequest {
  DBInstanceId?: string(name='DBInstanceId', example='rm-bp15rszyxs4t3****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryHostBaseInfoByInstanceResponseBody = {
  hostInstanceConsoleInfos?: [ 
    {
      clusterName?: string(name='ClusterName', example='rds.ebmr6.26xlarge'),
      engine?: string(name='Engine', example='mysql'),
      engineVersion?: string(name='EngineVersion', example='5.7'),
      expiredTime?: string(name='ExpiredTime', example='2021.07.20'),
      hostName?: string(name='HostName', example='ch-bp1fgj3kt7fsb****'),
      ip?: string(name='Ip', example='172.22.0.***'),
      port?: string(name='Port', example='3443'),
      role?: string(name='Role', example='master'),
      status?: string(name='Status', example='RUNNING'),
      vpcId?: string(name='VpcId', example='vpc-bp1ov7as4yvz4kxei****'),
    }
  ](name='HostInstanceConsoleInfos'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22E12CV'),
}

model QueryHostBaseInfoByInstanceResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryHostBaseInfoByInstanceResponseBody(name='body'),
}

async function queryHostBaseInfoByInstanceWithOptions(request: QueryHostBaseInfoByInstanceRequest, runtime: Util.RuntimeOptions): QueryHostBaseInfoByInstanceResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.DBInstanceId)) {
    query['DBInstanceId'] = request.DBInstanceId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryHostBaseInfoByInstance',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryHostBaseInfoByInstance(request: QueryHostBaseInfoByInstanceRequest): QueryHostBaseInfoByInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryHostBaseInfoByInstanceWithOptions(request, runtime);
}

model QueryHostInstanceConsoleInfoRequest {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp1fgj3kt7fsb****'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-qingdao'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryHostInstanceConsoleInfoResponseBody = {
  hostInstanceConsoleInfos?: [ 
    {
      cpuCores?: int32(name='CpuCores', example='8'),
      cpuIncreaseRatioValue?: int32(name='CpuIncreaseRatioValue', example='16'),
      DBInstanceDescription?: string(name='DBInstanceDescription', example='rm-bp1m5z8002gyj****'),
      DBInstanceId?: string(name='DBInstanceId', example='rm-bp1m5z8002gyj****'),
      diskSize?: int32(name='DiskSize', example='500'),
      engine?: string(name='Engine', example='mysql'),
      engineVersion?: string(name='EngineVersion', example='5.8'),
      ip?: string(name='Ip', example='172.22.XX.XX'),
      levelName?: string(name='LevelName', example='mysql.z2.medium.2'),
      maxConnIncreaseRatioValue?: int32(name='MaxConnIncreaseRatioValue', example='1300'),
      memSize?: int32(name='MemSize', example='16'),
      memoryIncreaseRatioValue?: int32(name='MemoryIncreaseRatioValue', example='64'),
      perfInfo?: {
        cpuRatio?: float(name='CpuRatio', example='16'),
        diskCurr?: float(name='DiskCurr', example='1000'),
        memRatio?: float(name='MemRatio', example='64'),
        perfIdbPio?: float(name='PerfIdbPio', example='30'),
      }(name='PerfInfo'),
      port?: string(name='Port', example='3443'),
      role?: string(name='Role', example='master'),
      status?: string(name='Status', example='RUNNING'),
    }
  ](name='HostInstanceConsoleInfos'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
}

model QueryHostInstanceConsoleInfoResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: QueryHostInstanceConsoleInfoResponseBody(name='body'),
}

async function queryHostInstanceConsoleInfoWithOptions(request: QueryHostInstanceConsoleInfoRequest, runtime: Util.RuntimeOptions): QueryHostInstanceConsoleInfoResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryHostInstanceConsoleInfo',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryHostInstanceConsoleInfo(request: QueryHostInstanceConsoleInfoRequest): QueryHostInstanceConsoleInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryHostInstanceConsoleInfoWithOptions(request, runtime);
}

model ReplaceDedicatedHostRequest {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  failoverMode?: string(name='FailoverMode', example='MaintainTime'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReplaceDedicatedHostResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22EDSD8'),
  taskId?: int32(name='TaskId', example='10254125'),
}

model ReplaceDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: ReplaceDedicatedHostResponseBody(name='body'),
}

async function replaceDedicatedHostWithOptions(request: ReplaceDedicatedHostRequest, runtime: Util.RuntimeOptions): ReplaceDedicatedHostResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.failoverMode)) {
    query['FailoverMode'] = request.failoverMode;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReplaceDedicatedHost',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function replaceDedicatedHost(request: ReplaceDedicatedHostRequest): ReplaceDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceDedicatedHostWithOptions(request, runtime);
}

model RestartDedicatedHostRequest {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  failoverMode?: string(name='FailoverMode', example='MaintainTime'),
  forceStop?: boolean(name='ForceStop', example='false'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RestartDedicatedHostResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22EDSH'),
  taskId?: int32(name='TaskId', example='10254125'),
}

model RestartDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: RestartDedicatedHostResponseBody(name='body'),
}

async function restartDedicatedHostWithOptions(request: RestartDedicatedHostRequest, runtime: Util.RuntimeOptions): RestartDedicatedHostResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.dedicatedHostId)) {
    query['DedicatedHostId'] = request.dedicatedHostId;
  }
  if (!Util.isUnset(request.failoverMode)) {
    query['FailoverMode'] = request.failoverMode;
  }
  if (!Util.isUnset(request.forceStop)) {
    query['ForceStop'] = request.forceStop;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartDedicatedHost',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartDedicatedHost(request: RestartDedicatedHostRequest): RestartDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDedicatedHostWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ap-southeast-1'),
  resourceId?: [ string ](name='ResourceId', example='ch-t4n4dcdvu6840****'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='DEDICATEDHOST'),
  tag?: [ 
    {
      key?: string(name='Key', example='demokey'),
      value?: string(name='Value', example='demovalue'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='4B938011-874B-5F54-8B9E-7E2A08B3AA13'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tag)) {
    query['Tag'] = request.tag;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='false'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId', example='ap-southeast-1'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType', example='DEDICATEDHOST'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='B74AD197-214C-50F2-BF7D-B13632EE4D75'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  statusCode: int32(name='statusCode'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  if (!Util.isUnset(request.all)) {
    query['All'] = request.all;
  }
  if (!Util.isUnset(request.ownerId)) {
    query['OwnerId'] = request.ownerId;
  }
  if (!Util.isUnset(request.regionId)) {
    query['RegionId'] = request.regionId;
  }
  if (!Util.isUnset(request.resourceId)) {
    query['ResourceId'] = request.resourceId;
  }
  if (!Util.isUnset(request.resourceOwnerAccount)) {
    query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  }
  if (!Util.isUnset(request.resourceOwnerId)) {
    query['ResourceOwnerId'] = request.resourceOwnerId;
  }
  if (!Util.isUnset(request.resourceType)) {
    query['ResourceType'] = request.resourceType;
  }
  if (!Util.isUnset(request.tagKey)) {
    query['TagKey'] = request.tagKey;
  }
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

