/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;


init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('cddc', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }
  
  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}

model CreateDedicatedHostRequest {
  autoRenew?: string(name='AutoRenew'),
  clientToken?: string(name='ClientToken'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  hostClass?: string(name='HostClass'),
  hostName?: string(name='HostName'),
  imageCategory?: string(name='ImageCategory'),
  osPassword?: string(name='OsPassword'),
  ownerId?: long(name='OwnerId'),
  payType?: string(name='PayType'),
  period?: string(name='Period'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  usedTime?: string(name='UsedTime'),
  vSwitchId?: string(name='VSwitchId'),
  zoneId?: string(name='ZoneId'),
}

model CreateDedicatedHostResponseBody = {
  dedicateHostList?: {
    dedicateHostList?: [ 
    {
      dedicatedHostId?: string(name='DedicatedHostId'),
    }
  ](name='DedicateHostList')
  }(name='DedicateHostList'),
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostResponseBody(name='body'),
}

async function createDedicatedHostWithOptions(request: CreateDedicatedHostRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostResponse {
  Util.validateModel(request);
  var query = {};
  query['AutoRenew'] = request.autoRenew;
  query['ClientToken'] = request.clientToken;
  query['DedicatedHostGroupId'] = request.dedicatedHostGroupId;
  query['HostClass'] = request.hostClass;
  query['HostName'] = request.hostName;
  query['ImageCategory'] = request.imageCategory;
  query['OsPassword'] = request.osPassword;
  query['OwnerId'] = request.ownerId;
  query['PayType'] = request.payType;
  query['Period'] = request.period;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['UsedTime'] = request.usedTime;
  query['VSwitchId'] = request.vSwitchId;
  query['ZoneId'] = request.zoneId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDedicatedHost',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDedicatedHost(request: CreateDedicatedHostRequest): CreateDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostWithOptions(request, runtime);
}

model CreateDedicatedHostAccountRequest {
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  accountType?: string(name='AccountType'),
  bastionInstanceId?: string(name='BastionInstanceId'),
  clientToken?: string(name='ClientToken'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model CreateDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostAccountResponseBody(name='body'),
}

async function createDedicatedHostAccountWithOptions(request: CreateDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostAccountResponse {
  Util.validateModel(request);
  var query = {};
  query['AccountName'] = request.accountName;
  query['AccountPassword'] = request.accountPassword;
  query['AccountType'] = request.accountType;
  query['BastionInstanceId'] = request.bastionInstanceId;
  query['ClientToken'] = request.clientToken;
  query['DedicatedHostId'] = request.dedicatedHostId;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDedicatedHostAccount',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDedicatedHostAccount(request: CreateDedicatedHostAccountRequest): CreateDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostAccountWithOptions(request, runtime);
}

model CreateDedicatedHostGroupRequest {
  allocationPolicy?: string(name='AllocationPolicy'),
  clientToken?: string(name='ClientToken'),
  cpuAllocationRatio?: int32(name='CpuAllocationRatio'),
  dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc'),
  diskAllocationRatio?: int32(name='DiskAllocationRatio'),
  engine?: string(name='Engine'),
  hostReplacePolicy?: string(name='HostReplacePolicy'),
  memAllocationRatio?: int32(name='MemAllocationRatio'),
  openPermission?: int32(name='OpenPermission'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  VPCId?: string(name='VPCId'),
}

model CreateDedicatedHostGroupResponseBody = {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateDedicatedHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostGroupResponseBody(name='body'),
}

async function createDedicatedHostGroupWithOptions(request: CreateDedicatedHostGroupRequest, runtime: Util.RuntimeOptions): CreateDedicatedHostGroupResponse {
  Util.validateModel(request);
  var query = {};
  query['AllocationPolicy'] = request.allocationPolicy;
  query['ClientToken'] = request.clientToken;
  query['CpuAllocationRatio'] = request.cpuAllocationRatio;
  query['DedicatedHostGroupDesc'] = request.dedicatedHostGroupDesc;
  query['DiskAllocationRatio'] = request.diskAllocationRatio;
  query['Engine'] = request.engine;
  query['HostReplacePolicy'] = request.hostReplacePolicy;
  query['MemAllocationRatio'] = request.memAllocationRatio;
  query['OpenPermission'] = request.openPermission;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['VPCId'] = request.VPCId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'CreateDedicatedHostGroup',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function createDedicatedHostGroup(request: CreateDedicatedHostGroupRequest): CreateDedicatedHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createDedicatedHostGroupWithOptions(request, runtime);
}

model DeleteDedicatedHostAccountRequest {
  accountName?: string(name='AccountName'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDedicatedHostAccountResponseBody(name='body'),
}

async function deleteDedicatedHostAccountWithOptions(request: DeleteDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): DeleteDedicatedHostAccountResponse {
  Util.validateModel(request);
  var query = {};
  query['AccountName'] = request.accountName;
  query['DedicatedHostId'] = request.dedicatedHostId;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDedicatedHostAccount',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDedicatedHostAccount(request: DeleteDedicatedHostAccountRequest): DeleteDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedHostAccountWithOptions(request, runtime);
}

model DeleteDedicatedHostGroupRequest {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DeleteDedicatedHostGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDedicatedHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDedicatedHostGroupResponseBody(name='body'),
}

async function deleteDedicatedHostGroupWithOptions(request: DeleteDedicatedHostGroupRequest, runtime: Util.RuntimeOptions): DeleteDedicatedHostGroupResponse {
  Util.validateModel(request);
  var query = {};
  query['DedicatedHostGroupId'] = request.dedicatedHostGroupId;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DeleteDedicatedHostGroup',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function deleteDedicatedHostGroup(request: DeleteDedicatedHostGroupRequest): DeleteDedicatedHostGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteDedicatedHostGroupWithOptions(request, runtime);
}

model DescribeDedicatedHostAttributeRequest {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeDedicatedHostAttributeResponseBody = {
  accountName?: string(name='AccountName'),
  accountType?: string(name='AccountType'),
  allocationStatus?: string(name='AllocationStatus'),
  autoRenew?: string(name='AutoRenew'),
  CPUAllocationRatio?: string(name='CPUAllocationRatio'),
  cpuUsed?: string(name='CpuUsed'),
  createdTime?: string(name='CreatedTime'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  diskAllocationRatio?: string(name='DiskAllocationRatio'),
  ecsClassCode?: string(name='EcsClassCode'),
  expiredTime?: string(name='ExpiredTime'),
  hostCPU?: int32(name='HostCPU'),
  hostClass?: string(name='HostClass'),
  hostMem?: int32(name='HostMem'),
  hostName?: string(name='HostName'),
  hostStatus?: string(name='HostStatus'),
  hostStorage?: int32(name='HostStorage'),
  hostType?: string(name='HostType'),
  IPAddress?: string(name='IPAddress'),
  imageCategory?: string(name='ImageCategory'),
  instanceNumber?: int32(name='InstanceNumber'),
  instanceNumberMaster?: int32(name='InstanceNumberMaster'),
  instanceNumberROMaster?: int32(name='InstanceNumberROMaster'),
  instanceNumberROSlave?: int32(name='InstanceNumberROSlave'),
  instanceNumberSlave?: int32(name='InstanceNumberSlave'),
  memAllocationRatio?: string(name='MemAllocationRatio'),
  memoryUsed?: string(name='MemoryUsed'),
  openPermission?: string(name='OpenPermission'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  storageUsed?: string(name='StorageUsed'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostAttributeResponseBody(name='body'),
}

async function describeDedicatedHostAttributeWithOptions(request: DescribeDedicatedHostAttributeRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['DedicatedHostGroupId'] = request.dedicatedHostGroupId;
  query['DedicatedHostId'] = request.dedicatedHostId;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHostAttribute',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedHostAttribute(request: DescribeDedicatedHostAttributeRequest): DescribeDedicatedHostAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostAttributeWithOptions(request, runtime);
}

model DescribeDedicatedHostDisksRequest {
  dedicatedHostId?: string(name='DedicatedHostId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeDedicatedHostDisksResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  disks?: [ 
    {
      category?: string(name='Category'),
      DBInstanceId?: string(name='DBInstanceId'),
      device?: string(name='Device'),
      diskId?: string(name='DiskId'),
      hasDBInstance?: boolean(name='HasDBInstance'),
      maxIOPS?: int32(name='MaxIOPS'),
      maxThroughput?: int32(name='MaxThroughput'),
      performanceLevel?: string(name='PerformanceLevel'),
      size?: int32(name='Size'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Disks'),
  requestId?: string(name='RequestId'),
}

model DescribeDedicatedHostDisksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostDisksResponseBody(name='body'),
}

async function describeDedicatedHostDisksWithOptions(request: DescribeDedicatedHostDisksRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostDisksResponse {
  Util.validateModel(request);
  var query = {};
  query['DedicatedHostId'] = request.dedicatedHostId;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHostDisks',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedHostDisks(request: DescribeDedicatedHostDisksRequest): DescribeDedicatedHostDisksResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostDisksWithOptions(request, runtime);
}

model DescribeDedicatedHostGroupsRequest {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  engine?: string(name='Engine'),
  imageCategory?: string(name='ImageCategory'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeDedicatedHostGroupsResponseBody = {
  dedicatedHostGroups?: {
    dedicatedHostGroups?: [ 
    {
      allocationPolicy?: string(name='AllocationPolicy'),
      bastionInstanceId?: string(name='BastionInstanceId'),
      cpuAllocateRation?: float(name='CpuAllocateRation'),
      cpuAllocatedAmount?: float(name='CpuAllocatedAmount'),
      cpuAllocationRatio?: int32(name='CpuAllocationRatio'),
      createTime?: string(name='CreateTime'),
      dedicatedHostCountGroupByHostType?: map[string]any(name='DedicatedHostCountGroupByHostType'),
      dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
      deployType?: string(name='DeployType'),
      diskAllocateRation?: float(name='DiskAllocateRation'),
      diskAllocatedAmount?: float(name='DiskAllocatedAmount'),
      diskAllocationRatio?: int32(name='DiskAllocationRatio'),
      diskUsedAmount?: float(name='DiskUsedAmount'),
      diskUtility?: float(name='DiskUtility'),
      engine?: string(name='Engine'),
      hostNumber?: int32(name='HostNumber'),
      hostReplacePolicy?: string(name='HostReplacePolicy'),
      instanceNumber?: int32(name='InstanceNumber'),
      memAllocateRation?: float(name='MemAllocateRation'),
      memAllocatedAmount?: float(name='MemAllocatedAmount'),
      memAllocationRatio?: int32(name='MemAllocationRatio'),
      memUsedAmount?: float(name='MemUsedAmount'),
      memUtility?: float(name='MemUtility'),
      openPermission?: string(name='OpenPermission'),
      text?: string(name='Text'),
      VPCId?: string(name='VPCId'),
      zoneIDList?: {
        zoneIDList?: [ string ](name='ZoneIDList')
      }(name='ZoneIDList'),
    }
  ](name='DedicatedHostGroups')
  }(name='DedicatedHostGroups'),
  requestId?: string(name='RequestId'),
}

model DescribeDedicatedHostGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostGroupsResponseBody(name='body'),
}

async function describeDedicatedHostGroupsWithOptions(request: DescribeDedicatedHostGroupsRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostGroupsResponse {
  Util.validateModel(request);
  var query = {};
  query['DedicatedHostGroupId'] = request.dedicatedHostGroupId;
  query['Engine'] = request.engine;
  query['ImageCategory'] = request.imageCategory;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHostGroups',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedHostGroups(request: DescribeDedicatedHostGroupsRequest): DescribeDedicatedHostGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostGroupsWithOptions(request, runtime);
}

model DescribeDedicatedHostsRequest {
  allocationStatus?: string(name='AllocationStatus'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  hostStatus?: string(name='HostStatus'),
  hostType?: string(name='HostType'),
  orderId?: long(name='OrderId'),
  ownerId?: long(name='OwnerId'),
  pageNumbers?: int32(name='PageNumbers'),
  pageSize?: int32(name='PageSize'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  tags?: string(name='Tags'),
  zoneId?: string(name='ZoneId'),
}

model DescribeDedicatedHostsResponseBody = {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  dedicatedHosts?: {
    dedicatedHosts?: [ 
    {
      accountName?: string(name='AccountName'),
      allocationStatus?: string(name='AllocationStatus'),
      bastionInstanceId?: string(name='BastionInstanceId'),
      CPUAllocationRatio?: string(name='CPUAllocationRatio'),
      cpuUsed?: string(name='CpuUsed'),
      createdTime?: string(name='CreatedTime'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      deployType?: string(name='DeployType'),
      diskAllocationRatio?: string(name='DiskAllocationRatio'),
      distributionSymbol?: string(name='DistributionSymbol'),
      ecsClassCode?: string(name='EcsClassCode'),
      endTime?: string(name='EndTime'),
      engine?: string(name='Engine'),
      hostCPU?: string(name='HostCPU'),
      hostClass?: string(name='HostClass'),
      hostMem?: string(name='HostMem'),
      hostName?: string(name='HostName'),
      hostStatus?: string(name='HostStatus'),
      hostStorage?: string(name='HostStorage'),
      hostType?: string(name='HostType'),
      IPAddress?: string(name='IPAddress'),
      imageCategory?: string(name='ImageCategory'),
      instanceNumber?: string(name='InstanceNumber'),
      memAllocationRatio?: string(name='MemAllocationRatio'),
      memoryUsed?: string(name='MemoryUsed'),
      openPermission?: string(name='OpenPermission'),
      storageUsed?: string(name='StorageUsed'),
      VPCId?: string(name='VPCId'),
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DedicatedHosts')
  }(name='DedicatedHosts'),
  maxAutoScaleHostStorage?: long(name='MaxAutoScaleHostStorage'),
  pageNumbers?: int32(name='PageNumbers'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalRecords?: int32(name='TotalRecords'),
}

model DescribeDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostsResponseBody(name='body'),
}

async function describeDedicatedHostsWithOptions(request: DescribeDedicatedHostsRequest, runtime: Util.RuntimeOptions): DescribeDedicatedHostsResponse {
  Util.validateModel(request);
  var query = {};
  query['AllocationStatus'] = request.allocationStatus;
  query['DedicatedHostGroupId'] = request.dedicatedHostGroupId;
  query['DedicatedHostId'] = request.dedicatedHostId;
  query['HostStatus'] = request.hostStatus;
  query['HostType'] = request.hostType;
  query['OrderId'] = request.orderId;
  query['OwnerId'] = request.ownerId;
  query['PageNumbers'] = request.pageNumbers;
  query['PageSize'] = request.pageSize;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['Tags'] = request.tags;
  query['ZoneId'] = request.zoneId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeDedicatedHosts',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeDedicatedHosts(request: DescribeDedicatedHostsRequest): DescribeDedicatedHostsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDedicatedHostsWithOptions(request, runtime);
}

model DescribeHostEcsLevelInfoRequest {
  dbType?: string(name='DbType'),
  imageCategory?: string(name='ImageCategory'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  storageType?: string(name='StorageType'),
  zoneId?: string(name='ZoneId'),
}

model DescribeHostEcsLevelInfoResponseBody = {
  hostEcsLevelInfos?: [ 
    {
      cddcHostType?: string(name='CddcHostType'),
      items?: [ 
        {
          cloudStorageBandwidth?: float(name='CloudStorageBandwidth'),
          cpu?: int32(name='Cpu'),
          cpuFrequency?: string(name='CpuFrequency'),
          cpuVersion?: string(name='CpuVersion'),
          description?: string(name='Description'),
          ecsClass?: string(name='EcsClass'),
          ecsClassCode?: string(name='EcsClassCode'),
          isCloudDisk?: int32(name='IsCloudDisk'),
          localStorage?: string(name='LocalStorage'),
          memory?: int32(name='Memory'),
          netBandWidth?: float(name='NetBandWidth'),
          netPackage?: int32(name='NetPackage'),
          rdsClassCode?: string(name='RdsClassCode'),
          storageIops?: int32(name='StorageIops'),
        }
      ](name='Items'),
    }
  ](name='HostEcsLevelInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeHostEcsLevelInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHostEcsLevelInfoResponseBody(name='body'),
}

async function describeHostEcsLevelInfoWithOptions(request: DescribeHostEcsLevelInfoRequest, runtime: Util.RuntimeOptions): DescribeHostEcsLevelInfoResponse {
  Util.validateModel(request);
  var query = {};
  query['DbType'] = request.dbType;
  query['ImageCategory'] = request.imageCategory;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['StorageType'] = request.storageType;
  query['ZoneId'] = request.zoneId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHostEcsLevelInfo',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHostEcsLevelInfo(request: DescribeHostEcsLevelInfoRequest): DescribeHostEcsLevelInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHostEcsLevelInfoWithOptions(request, runtime);
}

model DescribeHostWebShellRequest {
  dedicatedHostId?: string(name='DedicatedHostId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeHostWebShellResponseBody = {
  loginUrl?: string(name='LoginUrl'),
  requestId?: string(name='RequestId'),
}

model DescribeHostWebShellResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHostWebShellResponseBody(name='body'),
}

async function describeHostWebShellWithOptions(request: DescribeHostWebShellRequest, runtime: Util.RuntimeOptions): DescribeHostWebShellResponse {
  Util.validateModel(request);
  var query = {};
  query['DedicatedHostId'] = request.dedicatedHostId;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['ZoneId'] = request.zoneId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeHostWebShell',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeHostWebShell(request: DescribeHostWebShellRequest): DescribeHostWebShellResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeHostWebShellWithOptions(request, runtime);
}

model DescribeRegionsRequest {
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    RDSRegion?: [ 
    {
      regionId?: string(name='RegionId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='RDSRegion')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegionsWithOptions(request: DescribeRegionsRequest, runtime: Util.RuntimeOptions): DescribeRegionsResponse {
  Util.validateModel(request);
  var query = {};
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'DescribeRegions',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeRegionsWithOptions(request, runtime);
}

model ListTagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model ListTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResourcesWithOptions(request: ListTagResourcesRequest, runtime: Util.RuntimeOptions): ListTagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceId'] = request.resourceId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['ResourceType'] = request.resourceType;
  query['Tag'] = request.tag;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ListTagResources',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return listTagResourcesWithOptions(request, runtime);
}

model ModifyDedicatedHostAccountRequest {
  accountName?: string(name='AccountName'),
  accountPassword?: string(name='AccountPassword'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAccountResponseBody(name='body'),
}

async function modifyDedicatedHostAccountWithOptions(request: ModifyDedicatedHostAccountRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAccountResponse {
  Util.validateModel(request);
  var query = {};
  query['AccountName'] = request.accountName;
  query['AccountPassword'] = request.accountPassword;
  query['DedicatedHostId'] = request.dedicatedHostId;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostAccount',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostAccount(request: ModifyDedicatedHostAccountRequest): ModifyDedicatedHostAccountResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAccountWithOptions(request, runtime);
}

model ModifyDedicatedHostAttributeRequest {
  allocationStatus?: string(name='AllocationStatus'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  hostName?: string(name='HostName'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostAttributeWithOptions(request: ModifyDedicatedHostAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['AllocationStatus'] = request.allocationStatus;
  query['DedicatedHostId'] = request.dedicatedHostId;
  query['HostName'] = request.hostName;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostAttribute',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostAttribute(request: ModifyDedicatedHostAttributeRequest): ModifyDedicatedHostAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostClassRequest {
  dedicatedHostId?: string(name='DedicatedHostId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  switchTime?: string(name='SwitchTime'),
  switchTimeMode?: string(name='SwitchTimeMode'),
  targetClassCode?: string(name='TargetClassCode'),
}

model ModifyDedicatedHostClassResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model ModifyDedicatedHostClassResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostClassResponseBody(name='body'),
}

async function modifyDedicatedHostClassWithOptions(request: ModifyDedicatedHostClassRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostClassResponse {
  Util.validateModel(request);
  var query = {};
  query['DedicatedHostId'] = request.dedicatedHostId;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['SwitchTime'] = request.switchTime;
  query['SwitchTimeMode'] = request.switchTimeMode;
  query['TargetClassCode'] = request.targetClassCode;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostClass',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostClass(request: ModifyDedicatedHostClassRequest): ModifyDedicatedHostClassResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostClassWithOptions(request, runtime);
}

model ModifyDedicatedHostGroupAttributeRequest {
  allocationPolicy?: string(name='AllocationPolicy'),
  cpuAllocationRatio?: int32(name='CpuAllocationRatio'),
  dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  diskAllocationRatio?: int32(name='DiskAllocationRatio'),
  hostReplacePolicy?: string(name='HostReplacePolicy'),
  memAllocationRatio?: int32(name='MemAllocationRatio'),
  openPermission?: string(name='OpenPermission'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostGroupAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostGroupAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostGroupAttributeWithOptions(request: ModifyDedicatedHostGroupAttributeRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostGroupAttributeResponse {
  Util.validateModel(request);
  var query = {};
  query['AllocationPolicy'] = request.allocationPolicy;
  query['CpuAllocationRatio'] = request.cpuAllocationRatio;
  query['DedicatedHostGroupDesc'] = request.dedicatedHostGroupDesc;
  query['DedicatedHostGroupId'] = request.dedicatedHostGroupId;
  query['DiskAllocationRatio'] = request.diskAllocationRatio;
  query['HostReplacePolicy'] = request.hostReplacePolicy;
  query['MemAllocationRatio'] = request.memAllocationRatio;
  query['OpenPermission'] = request.openPermission;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostGroupAttribute',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostGroupAttribute(request: ModifyDedicatedHostGroupAttributeRequest): ModifyDedicatedHostGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostGroupAttributeWithOptions(request, runtime);
}

model ModifyDedicatedHostPasswordRequest {
  dedicatedHostId?: string(name='DedicatedHostId'),
  newPassword?: string(name='NewPassword'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ModifyDedicatedHostPasswordResponseBody = {
  dedicatedHostName?: string(name='DedicatedHostName'),
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostPasswordResponseBody(name='body'),
}

async function modifyDedicatedHostPasswordWithOptions(request: ModifyDedicatedHostPasswordRequest, runtime: Util.RuntimeOptions): ModifyDedicatedHostPasswordResponse {
  Util.validateModel(request);
  var query = {};
  query['DedicatedHostId'] = request.dedicatedHostId;
  query['NewPassword'] = request.newPassword;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ModifyDedicatedHostPassword',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function modifyDedicatedHostPassword(request: ModifyDedicatedHostPasswordRequest): ModifyDedicatedHostPasswordResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyDedicatedHostPasswordWithOptions(request, runtime);
}

model QueryHostBaseInfoByInstanceRequest {
  DBInstanceId?: string(name='DBInstanceId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryHostBaseInfoByInstanceResponseBody = {
  hostInstanceConsoleInfos?: [ 
    {
      clusterName?: string(name='ClusterName'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      expiredTime?: string(name='ExpiredTime'),
      hostName?: string(name='HostName'),
      ip?: string(name='Ip'),
      port?: string(name='Port'),
      role?: string(name='Role'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
    }
  ](name='HostInstanceConsoleInfos'),
  requestId?: string(name='RequestId'),
}

model QueryHostBaseInfoByInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryHostBaseInfoByInstanceResponseBody(name='body'),
}

async function queryHostBaseInfoByInstanceWithOptions(request: QueryHostBaseInfoByInstanceRequest, runtime: Util.RuntimeOptions): QueryHostBaseInfoByInstanceResponse {
  Util.validateModel(request);
  var query = {};
  query['DBInstanceId'] = request.DBInstanceId;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryHostBaseInfoByInstance',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryHostBaseInfoByInstance(request: QueryHostBaseInfoByInstanceRequest): QueryHostBaseInfoByInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryHostBaseInfoByInstanceWithOptions(request, runtime);
}

model QueryHostInstanceConsoleInfoRequest {
  dedicatedHostId?: string(name='DedicatedHostId'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model QueryHostInstanceConsoleInfoResponseBody = {
  hostInstanceConsoleInfos?: [ 
    {
      cpuCores?: int32(name='CpuCores'),
      cpuIncreaseRatioValue?: int32(name='CpuIncreaseRatioValue'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      DBInstanceId?: string(name='DBInstanceId'),
      diskSize?: int32(name='DiskSize'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      ip?: string(name='Ip'),
      levelName?: string(name='LevelName'),
      maxConnIncreaseRatioValue?: int32(name='MaxConnIncreaseRatioValue'),
      memSize?: int32(name='MemSize'),
      memoryIncreaseRatioValue?: int32(name='MemoryIncreaseRatioValue'),
      perfInfo?: {
        cpuRatio?: float(name='CpuRatio'),
        diskCurr?: float(name='DiskCurr'),
        memRatio?: float(name='MemRatio'),
        perfIdbPio?: float(name='PerfIdbPio'),
      }(name='PerfInfo'),
      port?: string(name='Port'),
      role?: string(name='Role'),
      status?: string(name='Status'),
    }
  ](name='HostInstanceConsoleInfos'),
  requestId?: string(name='RequestId'),
}

model QueryHostInstanceConsoleInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryHostInstanceConsoleInfoResponseBody(name='body'),
}

async function queryHostInstanceConsoleInfoWithOptions(request: QueryHostInstanceConsoleInfoRequest, runtime: Util.RuntimeOptions): QueryHostInstanceConsoleInfoResponse {
  Util.validateModel(request);
  var query = {};
  query['DedicatedHostId'] = request.dedicatedHostId;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'QueryHostInstanceConsoleInfo',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function queryHostInstanceConsoleInfo(request: QueryHostInstanceConsoleInfoRequest): QueryHostInstanceConsoleInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return queryHostInstanceConsoleInfoWithOptions(request, runtime);
}

model ReplaceDedicatedHostRequest {
  dedicatedHostId?: string(name='DedicatedHostId'),
  failoverMode?: string(name='FailoverMode'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model ReplaceDedicatedHostResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
}

model ReplaceDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceDedicatedHostResponseBody(name='body'),
}

async function replaceDedicatedHostWithOptions(request: ReplaceDedicatedHostRequest, runtime: Util.RuntimeOptions): ReplaceDedicatedHostResponse {
  Util.validateModel(request);
  var query = {};
  query['DedicatedHostId'] = request.dedicatedHostId;
  query['FailoverMode'] = request.failoverMode;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'ReplaceDedicatedHost',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function replaceDedicatedHost(request: ReplaceDedicatedHostRequest): ReplaceDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return replaceDedicatedHostWithOptions(request, runtime);
}

model RestartDedicatedHostRequest {
  dedicatedHostId?: string(name='DedicatedHostId'),
  failoverMode?: string(name='FailoverMode'),
  forceStop?: boolean(name='ForceStop'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
}

model RestartDedicatedHostResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
}

model RestartDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDedicatedHostResponseBody(name='body'),
}

async function restartDedicatedHostWithOptions(request: RestartDedicatedHostRequest, runtime: Util.RuntimeOptions): RestartDedicatedHostResponse {
  Util.validateModel(request);
  var query = {};
  query['DedicatedHostId'] = request.dedicatedHostId;
  query['FailoverMode'] = request.failoverMode;
  query['ForceStop'] = request.forceStop;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'RestartDedicatedHost',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function restartDedicatedHost(request: RestartDedicatedHostRequest): RestartDedicatedHostResponse {
  var runtime = new Util.RuntimeOptions{};
  return restartDedicatedHostWithOptions(request, runtime);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResourcesWithOptions(request: TagResourcesRequest, runtime: Util.RuntimeOptions): TagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceId'] = request.resourceId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['ResourceType'] = request.resourceType;
  query['Tag'] = request.tag;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'TagResources',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return tagResourcesWithOptions(request, runtime);
}

model UntagResourcesRequest {
  all?: boolean(name='All'),
  ownerId?: long(name='OwnerId'),
  regionId?: string(name='RegionId'),
  resourceId?: [ string ](name='ResourceId'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount'),
  resourceOwnerId?: long(name='ResourceOwnerId'),
  resourceType?: string(name='ResourceType'),
  tagKey?: [ string ](name='TagKey'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResourcesWithOptions(request: UntagResourcesRequest, runtime: Util.RuntimeOptions): UntagResourcesResponse {
  Util.validateModel(request);
  var query = {};
  query['All'] = request.all;
  query['OwnerId'] = request.ownerId;
  query['RegionId'] = request.regionId;
  query['ResourceId'] = request.resourceId;
  query['ResourceOwnerAccount'] = request.resourceOwnerAccount;
  query['ResourceOwnerId'] = request.resourceOwnerId;
  query['ResourceType'] = request.resourceType;
  query['TagKey'] = request.tagKey;
  var req = new OpenApi.OpenApiRequest{ 
    query = OpenApiUtil.query(query),
  };
  var params = new OpenApi.Params{
    action = 'UntagResources',
    version = '2020-03-20',
    protocol = 'HTTPS',
    pathname = '/',
    method = 'POST',
    authType = 'AK',
    style = 'RPC',
    reqBodyType = 'formData',
    bodyType = 'json',
  };
  return callApi(params, req, runtime);
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  var runtime = new Util.RuntimeOptions{};
  return untagResourcesWithOptions(request, runtime);
}

