/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cddc';
  @version = '2020-03-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateDedicatedHostRequest {
  autoRenew?: string(name='AutoRenew', example='false', position='Query'),
  clientToken: string(name='ClientToken', example='ETnLKlblzczshOTUbOCzSBZH8****', position='Query'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', example='dhg-6w7q18iwt5jo****', position='Query'),
  hostClass: string(name='HostClass', example='rds.g6.4xlarge', position='Query'),
  hostStorage?: string(name='HostStorage', example='512', position='Query'),
  hostStorageType?: string(name='HostStorageType', example='cloud_essd0', position='Query'),
  imageCategory?: string(name='ImageCategory', example='AliLinux', position='Query'),
  osPassword?: string(name='OsPassword', example='Test123456', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType: string(name='PayType', example='prepaid', position='Query'),
  period?: string(name='Period', example='Month', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  usedTime?: string(name='UsedTime', example='1', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-bp133c8ifzxd3iv6q****', position='Query'),
  zoneId: string(name='ZoneId', example='cn-hangzhou-i', position='Query'),
}

model CreateDedicatedHostResponseBody = {
  dedicateHostList?: {
    dedicateHostList?: [ 
    {
      dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp108dki3wdl6****'),
    }
  ](name='DedicateHostList')
  }(name='DedicateHostList'),
  orderId?: long(name='OrderId', example='102565235'),
  requestId?: string(name='RequestId', example='C860658E-68A6-46C1-AF6E-3AE7C4D32375'),
}

model CreateDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostResponseBody(name='body'),
}

async function createDedicatedHost(request: CreateDedicatedHostRequest): CreateDedicatedHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDedicatedHost', 'POST', '/', 'json', false, 'json', request);
}

model CreateDedicatedHostAccountRequest {
  accountName: string(name='AccountName', example='test', position='Query'),
  accountPassword: string(name='AccountPassword', example='testxxxxxx', position='Query'),
  accountType?: string(name='AccountType', example='Admin', position='Query'),
  bastionInstanceId?: string(name='BastionInstanceId', example='bastionhost-cn-xxxxxxxxxxx', position='Query'),
  clientToken?: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz*******', position='Query'),
  dedicatedHostId: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22E12AS'),
}

model CreateDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostAccountResponseBody(name='body'),
}

async function createDedicatedHostAccount(request: CreateDedicatedHostAccountRequest): CreateDedicatedHostAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDedicatedHostAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateDedicatedHostGroupRequest {
  allocationPolicy?: string(name='AllocationPolicy', example='Evenly', position='Query'),
  clientToken: string(name='ClientToken', example='ETnLKlblzczshOTUbOCz*******', position='Query'),
  cpuAllocationRatio?: int32(name='CpuAllocationRatio', example='200', position='Query'),
  dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc', example='mysqlcluster', position='Query'),
  diskAllocationRatio?: int32(name='DiskAllocationRatio', example='200', position='Query'),
  engine: string(name='Engine', example='MySQL', position='Query'),
  hostReplacePolicy?: string(name='HostReplacePolicy', example='Auto', position='Query'),
  memAllocationRatio?: int32(name='MemAllocationRatio', example='100', position='Query'),
  openPermission?: int32(name='OpenPermission', example='1', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  VPCId: string(name='VPCId', example='vpc-t4n7v5m6icc0a4314****', position='Query'),
}

model CreateDedicatedHostGroupResponseBody = {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-7a9********'),
  requestId?: string(name='RequestId', example='C6592723-09E1-4248-A78E-12AB00D7A79D'),
}

model CreateDedicatedHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostGroupResponseBody(name='body'),
}

async function createDedicatedHostGroup(request: CreateDedicatedHostGroupRequest): CreateDedicatedHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDedicatedHostGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateMyBaseRequest {
  autoRenew?: string(name='AutoRenew', example='false', position='Query'),
  clientToken: string(name='ClientToken', example='4ed77dd1-ff52-407e-ac58-dc251822****', position='Query'),
  dedicatedHostGroupDescription?: string(name='DedicatedHostGroupDescription', example='testDedicatedGroupName', position='Query'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-6dx5n9gjs96u****', position='Query'),
  ECSClassList: [ 
    {
      dataDiskPerformanceLevel?: string(name='dataDiskPerformanceLevel'),
      diskCapacity?: int32(name='diskCapacity'),
      diskCount?: int32(name='diskCount'),
      diskType?: string(name='diskType'),
      instanceType: string(name='instanceType'),
      nodeCount: int32(name='nodeCount'),
      sysDiskCapacity: int32(name='sysDiskCapacity', minimum=40),
      sysDiskType: string(name='sysDiskType'),
      systemDiskPerformanceLevel?: string(name='systemDiskPerformanceLevel'),
    }
  ](name='ECSClassList', example='[{"sysDiskCapacity":40,"instanceType":"ecs.d2s.10xlarge","nodeCount":1,"sysDiskType":"cloud_essd"}]', shrink='json', position='Query'),
  ecsDeploymentSetId?: string(name='EcsDeploymentSetId', position='Query'),
  ecsHostName?: string(name='EcsHostName', position='Query'),
  ecsInstanceName?: string(name='EcsInstanceName', position='Query'),
  ecsUniqueSuffix?: string(name='EcsUniqueSuffix', position='Query'),
  engine: string(name='Engine', example='alisql', position='Query'),
  imageId?: string(name='ImageId', position='Query'),
  keyPairName?: string(name='KeyPairName', position='Query'),
  osPassword?: string(name='OsPassword', example='Test123456', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  passwordInherit?: string(name='PasswordInherit', position='Query'),
  payType: string(name='PayType', example='PrePaid', position='Query'),
  period: string(name='Period', example='1', position='Query'),
  periodType?: string(name='PeriodType', example='Monthly', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-1', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  securityGroupId: string(name='SecurityGroupId', example='sg-t4neld965n89ocvt****', position='Query'),
  vSwitchId: string(name='VSwitchId', example='vsw-t4ni3mzqqw98vt317****', position='Query'),
  vpcId: string(name='VpcId', example='vpc-t4nbtmekgxotv0d3y****', position='Query'),
  zoneId: string(name='ZoneId', example='ap-southeast-1a', position='Query'),
}

model CreateMyBaseResponseBody = {
  orderList?: {
    orderList?: [ 
    {
      createTimestamp?: long(name='CreateTimestamp', example='1661498032347'),
      dedicatedHostGroupName?: string(name='DedicatedHostGroupName'),
      ECSInstanceIds?: string(name='ECSInstanceIds', example='["i-t4n1tandot8j3axvwhe5"]'),
      orderId?: string(name='OrderId', example='21767077790****'),
    }
  ](name='OrderList')
  }(name='OrderList'),
  requestId?: string(name='RequestId', example='937F6B32-A796-53A0-99C8-F7A9660E****'),
}

model CreateMyBaseResponse = {
  headers: map[string]string(name='headers'),
  body: CreateMyBaseResponseBody(name='body'),
}

async function createMyBase(request: CreateMyBaseRequest): CreateMyBaseResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateMyBase', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDedicatedHostAccountRequest {
  accountName: string(name='AccountName', example='test', position='Query'),
  dedicatedHostId: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22E12AS'),
}

model DeleteDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDedicatedHostAccountResponseBody(name='body'),
}

async function deleteDedicatedHostAccount(request: DeleteDedicatedHostAccountRequest): DeleteDedicatedHostAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDedicatedHostAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDedicatedHostGroupRequest {
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', example='dhg-h5i4p331f509****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDedicatedHostGroupResponseBody = {
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22E1765'),
}

model DeleteDedicatedHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDedicatedHostGroupResponseBody(name='body'),
}

async function deleteDedicatedHostGroup(request: DeleteDedicatedHostGroupRequest): DeleteDedicatedHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDedicatedHostGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedHostAttributeRequest {
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', example='dhg-34639v1jt4y4****', position='Query'),
  dedicatedHostId: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDedicatedHostAttributeResponseBody = {
  accountName?: string(name='AccountName', example='cdp_system'),
  accountType?: string(name='AccountType', example='Admin'),
  allocationStatus?: string(name='AllocationStatus', example='Suspended'),
  autoRenew?: string(name='AutoRenew', example='false'),
  CPUAllocationRatio?: string(name='CPUAllocationRatio', example='200'),
  cpuUsed?: string(name='CpuUsed', example='36'),
  createdTime?: string(name='CreatedTime', example='2021-11-13T07:14:22Z'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-34639v1jt4y4****'),
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  diskAllocationRatio?: string(name='DiskAllocationRatio', example='200'),
  distributionTag?: string(name='DistributionTag', example='tag'),
  ecsClassCode?: string(name='EcsClassCode', example='ecs.r5.16xlarge'),
  expiredTime?: string(name='ExpiredTime', example='2022-03-16T16:00:00Z'),
  hostCPU?: int32(name='HostCPU', example='16'),
  hostClass?: string(name='HostClass', example='mssql.host.c2xlarge'),
  hostMem?: int32(name='HostMem', example='2048'),
  hostName?: string(name='HostName', example='ch-8vbj9x74z874o****'),
  hostStatus?: string(name='HostStatus', example='1'),
  hostStorage?: int32(name='HostStorage', example='100'),
  hostType?: string(name='HostType', example='dhg_cloud_ssd'),
  IPAddress?: string(name='IPAddress', example='192.168.XX.XX'),
  imageCategory?: string(name='ImageCategory', example='WindowsWithMssqlStdLicense'),
  instanceNumber?: int32(name='InstanceNumber', example='3'),
  instanceNumberMaster?: int32(name='InstanceNumberMaster', example='4'),
  instanceNumberROMaster?: int32(name='InstanceNumberROMaster', example='1'),
  instanceNumberROSlave?: int32(name='InstanceNumberROSlave', example='1'),
  instanceNumberSlave?: int32(name='InstanceNumberSlave', example='1'),
  memAllocationRatio?: string(name='MemAllocationRatio', example='90'),
  memoryUsed?: string(name='MemoryUsed', example='24576'),
  openPermission?: string(name='OpenPermission', example='1'),
  regionId?: string(name='RegionId', example='cn-hangzhou'),
  requestId?: string(name='RequestId', example='00A001D6-2630-5CBD-A23C-80BC1BAFDC31'),
  storageUsed?: string(name='StorageUsed', example='588800'),
  VPCId?: string(name='VPCId', example='vpc-wz9vu1jb32wn3sdd6****'),
  vSwitchId?: string(name='VSwitchId', description='VSwitch ID。', example='vsw-bp1kaugqyrzb58oc1****'),
  zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
}

model DescribeDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostAttributeResponseBody(name='body'),
}

async function describeDedicatedHostAttribute(request: DescribeDedicatedHostAttributeRequest): DescribeDedicatedHostAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedHostAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedHostDisksRequest {
  dedicatedHostId: string(name='DedicatedHostId', example='ch-bp183v72jr033****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDedicatedHostDisksResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp183v72jr033****'),
  disks?: [ 
    {
      category?: string(name='Category', example='cloud_essd'),
      DBInstanceId?: string(name='DBInstanceId', example='rm-bp121zcqr5h8m****'),
      device?: string(name='Device', example='/dev/xvdb'),
      diskId?: string(name='DiskId', example='d-bp1dffpog8r2eowd****'),
      hasDBInstance?: boolean(name='HasDBInstance', example='true'),
      maxIOPS?: int32(name='MaxIOPS', example='18250'),
      maxThroughput?: int32(name='MaxThroughput', example='284'),
      performanceLevel?: string(name='PerformanceLevel', example='PL1'),
      size?: int32(name='Size', example='329'),
      status?: string(name='Status', example='In_use'),
      type?: string(name='Type', example='data'),
      zoneId?: string(name='ZoneId', example='cn-hangzhou-h'),
    }
  ](name='Disks'),
  requestId?: string(name='RequestId', example='C6C6CF41-F284-4F63-AB4D-44FACE3BASQW'),
}

model DescribeDedicatedHostDisksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostDisksResponseBody(name='body'),
}

async function describeDedicatedHostDisks(request: DescribeDedicatedHostDisksRequest): DescribeDedicatedHostDisksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedHostDisks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedHostGroupsRequest {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-872yt76ann7e****', position='Query'),
  engine?: string(name='Engine', example='MySQL', position='Query'),
  imageCategory?: string(name='ImageCategory', example='AliLinux', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDedicatedHostGroupsResponseBody = {
  dedicatedHostGroups?: {
    dedicatedHostGroups?: [ 
    {
      allocationPolicy?: string(name='AllocationPolicy', example='Evenly'),
      bastionInstanceId?: string(name='BastionInstanceId', example='rm-bp15rszyxs4t3****'),
      category?: string(name='Category'),
      cpuAllocateRation?: float(name='CpuAllocateRation', example='9.38'),
      cpuAllocatedAmount?: float(name='CpuAllocatedAmount', example='3'),
      cpuAllocationRatio?: int32(name='CpuAllocationRatio', example='200'),
      createTime?: string(name='CreateTime', example='2021-05-07T02:00Z'),
      dedicatedHostCountGroupByHostType?: map[string]any(name='DedicatedHostCountGroupByHostType', example='2'),
      dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc', example='dhg-34639v1jt4y4****'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-34639v1jt4y4****'),
      deployType?: string(name='DeployType', example='origin'),
      diskAllocateRation?: float(name='DiskAllocateRation', example='100'),
      diskAllocatedAmount?: float(name='DiskAllocatedAmount', example='1024'),
      diskAllocationRatio?: int32(name='DiskAllocationRatio', example='200'),
      diskUsedAmount?: float(name='DiskUsedAmount', example='1024'),
      diskUtility?: float(name='DiskUtility', example='0'),
      engine?: string(name='Engine', example='MySQL'),
      hostNumber?: int32(name='HostNumber', example='2'),
      hostReplacePolicy?: string(name='HostReplacePolicy', example='Auto'),
      instanceNumber?: int32(name='InstanceNumber', example='2'),
      memAllocateRation?: float(name='MemAllocateRation', example='9.38'),
      memAllocatedAmount?: float(name='MemAllocatedAmount', example='0'),
      memAllocationRatio?: int32(name='MemAllocationRatio', example='100'),
      memUsedAmount?: float(name='MemUsedAmount', example='0'),
      memUtility?: float(name='MemUtility', example='0'),
      openPermission?: string(name='OpenPermission', example='1'),
      text?: string(name='Text', example='mysql-host'),
      VPCId?: string(name='VPCId', example='vpc-bp1ov7as4yvz4kxei****'),
      zoneIDList?: {
        zoneIDList?: [ string ](name='ZoneIDList')
      }(name='ZoneIDList'),
    }
  ](name='DedicatedHostGroups')
  }(name='DedicatedHostGroups'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22E12SD'),
}

model DescribeDedicatedHostGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostGroupsResponseBody(name='body'),
}

async function describeDedicatedHostGroups(request: DescribeDedicatedHostGroupsRequest): DescribeDedicatedHostGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedHostGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedHostsRequest {
  allocationStatus?: string(name='AllocationStatus', example='Allocatable', position='Query'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-h5i4p331f509****', position='Query'),
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****', position='Query'),
  hostStatus?: string(name='HostStatus', example='1', position='Query'),
  hostType?: string(name='HostType', example='dhg_cloud_ssd', position='Query'),
  orderId?: long(name='OrderId', example='123456789', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumbers?: int32(name='PageNumbers', example='50', position='Query'),
  pageSize?: int32(name='PageSize', example='20', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: string(name='Tags', example='{"key1":"value1"}', position='Query'),
  zoneId?: string(name='ZoneId', example='ap-southeast-1a', position='Query'),
}

model DescribeDedicatedHostsResponseBody = {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-6w7q18iwt5jo****'),
  dedicatedHosts?: {
    dedicatedHosts?: [ 
    {
      accountName?: string(name='AccountName', example='test'),
      accountType?: string(name='AccountType', example='Normal'),
      allocationStatus?: string(name='AllocationStatus', example='Suspended'),
      bastionInstanceId?: string(name='BastionInstanceId', example='bastionhost-cn-i7m2fgw****'),
      CPUAllocationRatio?: string(name='CPUAllocationRatio', example='10'),
      category?: string(name='Category', example='Standard'),
      chargeType?: string(name='ChargeType', example='PREPAY'),
      cpuUsed?: string(name='CpuUsed', example='10'),
      createdTime?: string(name='CreatedTime', example='2020-10-16 16:30:19'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId', example='dhg-6w7q18iwt5jo****'),
      dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
      diskAllocationRatio?: string(name='DiskAllocationRatio', example='10'),
      diskInfo?: string(name='DiskInfo', example='{\\"SystemDiskSize\\":20,\\"DataDiskCount\\":0,\\"DataDiskSize\\":0,\\"DataDiskCategory\\":[\\"\\"],\\"SystemDiskCategory\\":\\"cloud_essd\\"}'),
      distributionSymbol?: string(name='DistributionSymbol', example='0'),
      distributionTag?: string(name='DistributionTag', example='t4n9uz07h3r1tmcejtxf:1'),
      ecsClassCode?: string(name='EcsClassCode', example='ecs.r5.16xlarge'),
      ecsId?: string(name='EcsId', example='i-2zec7l031p0jtru3pn7a'),
      endTime?: string(name='EndTime', example='2021-10-16 16:30:19'),
      engine?: string(name='Engine', example='mysql'),
      hostCPU?: string(name='HostCPU', example='16'),
      hostClass?: string(name='HostClass', example='rds.g6.4xlarge'),
      hostMem?: string(name='HostMem', example='65536'),
      hostName?: string(name='HostName', example='ch-bp15xfnp706tl****'),
      hostStatus?: string(name='HostStatus', example='1'),
      hostStorage?: string(name='HostStorage', example='1234'),
      hostType?: string(name='HostType', example='dhg_cloud_ssd'),
      IPAddress?: string(name='IPAddress', example='192.168.XX.XX'),
      imageCategory?: string(name='ImageCategory', example='ALinux'),
      instanceNumber?: string(name='InstanceNumber', example='1'),
      memAllocationRatio?: string(name='MemAllocationRatio', example='90'),
      memoryUsed?: string(name='MemoryUsed', example='24576'),
      mssqlSupportVersion?: string(name='MssqlSupportVersion', example='2012_std_ha,2012_std,2016_std_ha,2016_std,2017_std_ha,2017_std,2019_std_ha,2019_std'),
      openPermission?: string(name='OpenPermission', example='3'),
      storageUsed?: string(name='StorageUsed', example='588800'),
      VPCId?: string(name='VPCId', example='vpc-bp1roz55mrbj3ka1s****'),
      vSwitchId?: string(name='VSwitchId', example='vsw-bp133c8ifzxd3iv6q****'),
      zoneId?: string(name='ZoneId', example='ap-southeast-1a'),
    }
  ](name='DedicatedHosts')
  }(name='DedicatedHosts'),
  maxAutoScaleHostStorage?: long(name='MaxAutoScaleHostStorage', example='3661824'),
  pageNumbers?: int32(name='PageNumbers', example='2'),
  pageSize?: int32(name='PageSize', example='20'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22EASER'),
  totalRecords?: int32(name='TotalRecords', example='40'),
}

model DescribeDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostsResponseBody(name='body'),
}

async function describeDedicatedHosts(request: DescribeDedicatedHostsRequest): DescribeDedicatedHostsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedHosts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHostEcsLevelInfoRequest {
  dbType: string(name='DbType', example='mysql', position='Query'),
  imageCategory?: string(name='ImageCategory', example='AliLinux', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  storageType: string(name='StorageType', example='local_ssd', position='Query'),
  zoneId: string(name='ZoneId', example='ap-southeast-1a', position='Query'),
}

model DescribeHostEcsLevelInfoResponseBody = {
  hostEcsLevelInfos?: [ 
    {
      cddcHostType?: string(name='CddcHostType', example='ram'),
      items?: [ 
        {
          cloudStorageBandwidth?: float(name='CloudStorageBandwidth', example='4'),
          cpu?: int32(name='Cpu', example='24'),
          cpuFrequency?: string(name='CpuFrequency', example='2.5 GHz/3.2 GHz'),
          cpuVersion?: string(name='CpuVersion', example='Intel Xeon(Cascade Lake) Platinum 8269CY'),
          description?: string(name='Description', example='testxxx'),
          ecsClass?: string(name='EcsClass'),
          ecsClassCode?: string(name='EcsClassCode', example='ecs.g6.2xlarge'),
          isCloudDisk?: int32(name='IsCloudDisk', example='1'),
          localStorage?: string(name='LocalStorage', example='7'),
          memory?: int32(name='Memory', example='192'),
          netBandWidth?: float(name='NetBandWidth', example='10'),
          netPackage?: int32(name='NetPackage', example='150'),
          rdsClassCode?: string(name='RdsClassCode', example='mssql.cluster.host.g2xlarge'),
          storageIops?: int32(name='StorageIops', example='5'),
        }
      ](name='Items'),
    }
  ](name='HostEcsLevelInfos'),
  requestId?: string(name='RequestId', example='395858E2-2A82-4ED7-BB93-2DB60119EF4C'),
}

model DescribeHostEcsLevelInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHostEcsLevelInfoResponseBody(name='body'),
}

async function describeHostEcsLevelInfo(request: DescribeHostEcsLevelInfoRequest): DescribeHostEcsLevelInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHostEcsLevelInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHostWebShellRequest {
  dedicatedHostId: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId: string(name='ZoneId', example='cn-hangzhou-b', position='Query'),
}

model DescribeHostWebShellResponseBody = {
  loginUrl?: string(name='LoginUrl', example='https://ecs-workbench-disposable.aliyun.com/account/disposable/login/sst/mybase.c7dfa64e9f/m44kih****'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ESTG2'),
}

model DescribeHostWebShellResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHostWebShellResponseBody(name='body'),
}

async function describeHostWebShell(request: DescribeHostWebShellRequest): DescribeHostWebShellResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHostWebShell', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    RDSRegion?: [ 
    {
      regionId?: string(name='RegionId', example='ap-southeast-1'),
      zoneId?: string(name='ZoneId', example='ap-southeast-1a'),
    }
  ](name='RDSRegion')
  }(name='Regions'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-1', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='DEDICATEDHOST', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key', example='demokey'),
      value?: string(name='Value', example='demovalue'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='2853CAA0-D7A2-5CAB-B3A8-BDE2994F320C'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId', example='ch-t4n4dcdvu6840****'),
      resourceType?: string(name='ResourceType', example='ALIYUN::CDDC::DEDICATEDHOST'),
      tagKey?: string(name='TagKey', example='demokey'),
      tagValue?: string(name='TagValue', example='demovalue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostAccountRequest {
  accountName: string(name='AccountName', example='test', position='Query'),
  accountPassword: string(name='AccountPassword', example='test*****', position='Query'),
  dedicatedHostId: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
}

model ModifyDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAccountResponseBody(name='body'),
}

async function modifyDedicatedHostAccount(request: ModifyDedicatedHostAccountRequest): ModifyDedicatedHostAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostAccount', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostAttributeRequest {
  allocationStatus?: string(name='AllocationStatus', example='1', position='Query'),
  dedicatedHostId: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****', position='Query'),
  hostName?: string(name='HostName', example='mysql-host', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDedicatedHostAttributeResponseBody = {
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ESFS'),
}

model ModifyDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostAttribute(request: ModifyDedicatedHostAttributeRequest): ModifyDedicatedHostAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostClassRequest {
  dedicatedHostId: string(name='DedicatedHostId', example='ch-bp1fgj3kt7fsb****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  switchTime?: string(name='SwitchTime', example='2021-07-13T07:14:22Z', position='Query'),
  switchTimeMode?: string(name='SwitchTimeMode', example='2', position='Query'),
  targetClassCode: string(name='TargetClassCode', example='rds.c6.x4large', position='Query'),
}

model ModifyDedicatedHostClassResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp1fgj3kt7fsb****'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ESD12'),
  taskId?: string(name='TaskId', example='10254125'),
}

model ModifyDedicatedHostClassResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostClassResponseBody(name='body'),
}

async function modifyDedicatedHostClass(request: ModifyDedicatedHostClassRequest): ModifyDedicatedHostClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostClass', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostGroupAttributeRequest {
  allocationPolicy?: string(name='AllocationPolicy', example='Intensively', position='Query'),
  cpuAllocationRatio?: int32(name='CpuAllocationRatio', example='300', position='Query'),
  dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc', example='mysql-cluster', position='Query'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', example='dhg-h5i4p331f509****', position='Query'),
  diskAllocationRatio?: int32(name='DiskAllocationRatio', example='200', position='Query'),
  hostReplacePolicy?: string(name='HostReplacePolicy', example='Auto', position='Query'),
  memAllocationRatio?: int32(name='MemAllocationRatio', example='100', position='Query'),
  openPermission?: string(name='OpenPermission', example='0', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDedicatedHostGroupAttributeResponseBody = {
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22EEDAS'),
}

model ModifyDedicatedHostGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostGroupAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostGroupAttribute(request: ModifyDedicatedHostGroupAttributeRequest): ModifyDedicatedHostGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostPasswordRequest {
  dedicatedHostId: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****', position='Query'),
  newPassword: string(name='NewPassword', example='test*****', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDedicatedHostPasswordResponseBody = {
  dedicatedHostName?: string(name='DedicatedHostName', example='test123****'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22E12AS'),
}

model ModifyDedicatedHostPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostPasswordResponseBody(name='body'),
}

async function modifyDedicatedHostPassword(request: ModifyDedicatedHostPasswordRequest): ModifyDedicatedHostPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostPassword', 'POST', '/', 'json', false, 'json', request);
}

model QueryHostBaseInfoByInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', example='rm-bp15rszyxs4t3****', position='Query'),
  ownerId?: long(name='OwnerId', minimum=0, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=0, maximum=9223372036854775807, position='Query'),
}

model QueryHostBaseInfoByInstanceResponseBody = {
  hostInstanceConsoleInfos?: [ 
    {
      clusterName?: string(name='ClusterName', example='rds.ebmr6.26xlarge'),
      engine?: string(name='Engine', example='mysql'),
      engineVersion?: string(name='EngineVersion', example='5.7'),
      expiredTime?: string(name='ExpiredTime', example='2021.07.20'),
      hostName?: string(name='HostName', example='ch-bp1fgj3kt7fsb****'),
      ip?: string(name='Ip', example='172.22.0.***'),
      port?: string(name='Port', example='3443'),
      role?: string(name='Role', example='master'),
      status?: string(name='Status', example='RUNNING'),
      vpcId?: string(name='VpcId', example='vpc-bp1ov7as4yvz4kxei****'),
    }
  ](name='HostInstanceConsoleInfos'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22E12CV'),
}

model QueryHostBaseInfoByInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryHostBaseInfoByInstanceResponseBody(name='body'),
}

async function queryHostBaseInfoByInstance(request: QueryHostBaseInfoByInstanceRequest): QueryHostBaseInfoByInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryHostBaseInfoByInstance', 'POST', '/', 'json', false, 'json', request);
}

model QueryHostInstanceConsoleInfoRequest {
  dedicatedHostId: string(name='DedicatedHostId', example='ch-bp1fgj3kt7fsb****', position='Query'),
  ownerId?: long(name='OwnerId', minimum=0, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', example='cn-qingdao', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=0, maximum=9223372036854775807, position='Query'),
}

model QueryHostInstanceConsoleInfoResponseBody = {
  hostInstanceConsoleInfos?: [ 
    {
      cpuCores?: int32(name='CpuCores', example='8'),
      cpuIncreaseRatioValue?: int32(name='CpuIncreaseRatioValue', example='16'),
      DBInstanceDescription?: string(name='DBInstanceDescription', example='rm-bp1m5z8002gyj****'),
      DBInstanceId?: string(name='DBInstanceId', example='rm-bp1m5z8002gyj****'),
      diskSize?: int32(name='DiskSize', example='500'),
      engine?: string(name='Engine', example='mysql'),
      engineVersion?: string(name='EngineVersion', example='5.8'),
      ip?: string(name='Ip', example='172.22.XX.XX'),
      levelName?: string(name='LevelName', example='mysql.z2.medium.2'),
      maxConnIncreaseRatioValue?: int32(name='MaxConnIncreaseRatioValue', example='1300'),
      memSize?: int32(name='MemSize', example='16'),
      memoryIncreaseRatioValue?: int32(name='MemoryIncreaseRatioValue', example='64'),
      perfInfo?: {
        cpuRatio?: float(name='CpuRatio', example='16'),
        diskCurr?: float(name='DiskCurr', example='1000'),
        memRatio?: float(name='MemRatio', example='64'),
        perfIdbPio?: float(name='PerfIdbPio', example='30'),
      }(name='PerfInfo'),
      port?: string(name='Port', example='3443'),
      role?: string(name='Role', example='master'),
      status?: string(name='Status', example='RUNNING'),
    }
  ](name='HostInstanceConsoleInfos'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22ECB1F'),
}

model QueryHostInstanceConsoleInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryHostInstanceConsoleInfoResponseBody(name='body'),
}

async function queryHostInstanceConsoleInfo(request: QueryHostInstanceConsoleInfoRequest): QueryHostInstanceConsoleInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryHostInstanceConsoleInfo', 'POST', '/', 'json', false, 'json', request);
}

model ReplaceDedicatedHostRequest {
  dedicatedHostId: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****', position='Query'),
  failoverMode: string(name='FailoverMode', example='MaintainTime', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReplaceDedicatedHostResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22EDSD8'),
  taskId?: int32(name='TaskId', example='10254125'),
}

model ReplaceDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceDedicatedHostResponseBody(name='body'),
}

async function replaceDedicatedHost(request: ReplaceDedicatedHostRequest): ReplaceDedicatedHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplaceDedicatedHost', 'POST', '/', 'json', false, 'json', request);
}

model RestartDedicatedHostRequest {
  dedicatedHostId: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****', position='Query'),
  failoverMode: string(name='FailoverMode', example='MaintainTime', position='Query'),
  forceStop?: boolean(name='ForceStop', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', example='cn-hangzhou', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RestartDedicatedHostResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId', example='ch-bp10a5id3boqi****'),
  requestId?: string(name='RequestId', example='D6E068C3-25BC-455A-85FE-45F0B22EDSH'),
  taskId?: int32(name='TaskId', example='10254125'),
}

model RestartDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDedicatedHostResponseBody(name='body'),
}

async function restartDedicatedHost(request: RestartDedicatedHostRequest): RestartDedicatedHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDedicatedHost', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-1', position='Query'),
  resourceId: [ string ](name='ResourceId', example='ch-t4n4dcdvu6840****', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='DEDICATEDHOST', position='Query'),
  tag: [ 
    {
      key: string(name='Key', example='demokey'),
      value: string(name='Value', example='demovalue'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='4B938011-874B-5F54-8B9E-7E2A08B3AA13'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', example='false', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', example='ap-southeast-1', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', example='DEDICATEDHOST', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', example='B74AD197-214C-50F2-BF7D-B13632EE4D75'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

