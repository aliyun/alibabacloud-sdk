/**
 *
 */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'cddc';
  @version = '2020-03-20';
  @endpointRule = '';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model CreateDedicatedHostRequest {
  autoRenew?: string(name='AutoRenew', position='Query'),
  clientToken: string(name='ClientToken', position='Query'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', position='Query'),
  hostClass: string(name='HostClass', position='Query'),
  hostName?: string(name='HostName', position='Query'),
  hostStorage?: string(name='HostStorage', position='Query'),
  hostStorageType?: string(name='HostStorageType', position='Query'),
  imageCategory?: string(name='ImageCategory', position='Query'),
  osPassword?: string(name='OsPassword', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  payType: string(name='PayType', position='Query'),
  period?: string(name='Period', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  usedTime?: string(name='UsedTime', position='Query'),
  vSwitchId: string(name='VSwitchId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model CreateDedicatedHostResponseBody = {
  dedicateHostList?: {
    dedicateHostList?: [ 
    {
      dedicatedHostId?: string(name='DedicatedHostId'),
    }
  ](name='DedicateHostList')
  }(name='DedicateHostList'),
  orderId?: long(name='OrderId'),
  requestId?: string(name='RequestId'),
}

model CreateDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostResponseBody(name='body'),
}

async function createDedicatedHost(request: CreateDedicatedHostRequest): CreateDedicatedHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDedicatedHost', 'POST', '/', 'json', false, 'json', request);
}

model CreateDedicatedHostAccountRequest {
  accountName: string(name='AccountName', position='Query'),
  accountPassword: string(name='AccountPassword', position='Query'),
  accountType?: string(name='AccountType', position='Query'),
  bastionInstanceId?: string(name='BastionInstanceId', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model CreateDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model CreateDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostAccountResponseBody(name='body'),
}

async function createDedicatedHostAccount(request: CreateDedicatedHostAccountRequest): CreateDedicatedHostAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDedicatedHostAccount', 'POST', '/', 'json', false, 'json', request);
}

model CreateDedicatedHostGroupRequest {
  allocationPolicy?: string(name='AllocationPolicy', position='Query'),
  clientToken: string(name='ClientToken', position='Query'),
  cpuAllocationRatio?: int32(name='CpuAllocationRatio', position='Query'),
  dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc', position='Query'),
  diskAllocationRatio?: int32(name='DiskAllocationRatio', position='Query'),
  engine: string(name='Engine', position='Query'),
  hostReplacePolicy?: string(name='HostReplacePolicy', position='Query'),
  memAllocationRatio?: int32(name='MemAllocationRatio', position='Query'),
  openPermission?: int32(name='OpenPermission', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  VPCId: string(name='VPCId', position='Query'),
}

model CreateDedicatedHostGroupResponseBody = {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  requestId?: string(name='RequestId'),
}

model CreateDedicatedHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateDedicatedHostGroupResponseBody(name='body'),
}

async function createDedicatedHostGroup(request: CreateDedicatedHostGroupRequest): CreateDedicatedHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateDedicatedHostGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDHGInstanceVpcNetRequest {
  connectionString: string(name='ConnectionString', position='Query'),
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDHGInstanceVpcNetResponseBody = {
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model DeleteDHGInstanceVpcNetResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDHGInstanceVpcNetResponseBody(name='body'),
}

async function deleteDHGInstanceVpcNet(request: DeleteDHGInstanceVpcNetRequest): DeleteDHGInstanceVpcNetResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDHGInstanceVpcNet', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDedicatedHostAccountRequest {
  accountName: string(name='AccountName', position='Query'),
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDedicatedHostAccountResponseBody(name='body'),
}

async function deleteDedicatedHostAccount(request: DeleteDedicatedHostAccountRequest): DeleteDedicatedHostAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDedicatedHostAccount', 'POST', '/', 'json', false, 'json', request);
}

model DeleteDedicatedHostGroupRequest {
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DeleteDedicatedHostGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteDedicatedHostGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteDedicatedHostGroupResponseBody(name='body'),
}

async function deleteDedicatedHostGroup(request: DeleteDedicatedHostGroupRequest): DeleteDedicatedHostGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteDedicatedHostGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedHostAttributeRequest {
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', position='Query'),
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDedicatedHostAttributeResponseBody = {
  accountName?: string(name='AccountName'),
  accountType?: string(name='AccountType'),
  allocationStatus?: string(name='AllocationStatus'),
  autoRenew?: string(name='AutoRenew'),
  CPUAllocationRatio?: string(name='CPUAllocationRatio'),
  cpuUsed?: string(name='CpuUsed'),
  createdTime?: string(name='CreatedTime'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  dedicatedHostId?: string(name='DedicatedHostId'),
  diskAllocationRatio?: string(name='DiskAllocationRatio'),
  distributionTag?: string(name='DistributionTag'),
  ecsClassCode?: string(name='EcsClassCode'),
  expiredTime?: string(name='ExpiredTime'),
  hostCPU?: int32(name='HostCPU'),
  hostClass?: string(name='HostClass'),
  hostMem?: int32(name='HostMem'),
  hostName?: string(name='HostName'),
  hostStatus?: string(name='HostStatus'),
  hostStorage?: int32(name='HostStorage'),
  hostType?: string(name='HostType'),
  IPAddress?: string(name='IPAddress'),
  imageCategory?: string(name='ImageCategory'),
  instanceNumber?: int32(name='InstanceNumber'),
  instanceNumberMaster?: int32(name='InstanceNumberMaster'),
  instanceNumberROMaster?: int32(name='InstanceNumberROMaster'),
  instanceNumberROSlave?: int32(name='InstanceNumberROSlave'),
  instanceNumberSlave?: int32(name='InstanceNumberSlave'),
  memAllocationRatio?: string(name='MemAllocationRatio'),
  memoryUsed?: string(name='MemoryUsed'),
  openPermission?: string(name='OpenPermission'),
  regionId?: string(name='RegionId'),
  requestId?: string(name='RequestId'),
  storageUsed?: string(name='StorageUsed'),
  VPCId?: string(name='VPCId'),
  vSwitchId?: string(name='VSwitchId'),
  zoneId?: string(name='ZoneId'),
}

model DescribeDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostAttributeResponseBody(name='body'),
}

async function describeDedicatedHostAttribute(request: DescribeDedicatedHostAttributeRequest): DescribeDedicatedHostAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedHostAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedHostDisksRequest {
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDedicatedHostDisksResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  disks?: [ 
    {
      category?: string(name='Category'),
      DBInstanceId?: string(name='DBInstanceId'),
      device?: string(name='Device'),
      diskId?: string(name='DiskId'),
      hasDBInstance?: boolean(name='HasDBInstance'),
      maxIOPS?: int32(name='MaxIOPS'),
      maxThroughput?: int32(name='MaxThroughput'),
      performanceLevel?: string(name='PerformanceLevel'),
      size?: int32(name='Size'),
      status?: string(name='Status'),
      type?: string(name='Type'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='Disks'),
  requestId?: string(name='RequestId'),
}

model DescribeDedicatedHostDisksResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostDisksResponseBody(name='body'),
}

async function describeDedicatedHostDisks(request: DescribeDedicatedHostDisksRequest): DescribeDedicatedHostDisksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedHostDisks', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedHostGroupsRequest {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', position='Query'),
  engine?: string(name='Engine', position='Query'),
  imageCategory?: string(name='ImageCategory', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeDedicatedHostGroupsResponseBody = {
  dedicatedHostGroups?: {
    dedicatedHostGroups?: [ 
    {
      allocationPolicy?: string(name='AllocationPolicy'),
      bastionInstanceId?: string(name='BastionInstanceId'),
      cpuAllocateRation?: float(name='CpuAllocateRation'),
      cpuAllocatedAmount?: float(name='CpuAllocatedAmount'),
      cpuAllocationRatio?: int32(name='CpuAllocationRatio'),
      createTime?: string(name='CreateTime'),
      dedicatedHostCountGroupByHostType?: map[string]any(name='DedicatedHostCountGroupByHostType'),
      dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
      deployType?: string(name='DeployType'),
      diskAllocateRation?: float(name='DiskAllocateRation'),
      diskAllocatedAmount?: float(name='DiskAllocatedAmount'),
      diskAllocationRatio?: int32(name='DiskAllocationRatio'),
      diskUsedAmount?: float(name='DiskUsedAmount'),
      diskUtility?: float(name='DiskUtility'),
      engine?: string(name='Engine'),
      hostNumber?: int32(name='HostNumber'),
      hostReplacePolicy?: string(name='HostReplacePolicy'),
      instanceNumber?: int32(name='InstanceNumber'),
      memAllocateRation?: float(name='MemAllocateRation'),
      memAllocatedAmount?: float(name='MemAllocatedAmount'),
      memAllocationRatio?: int32(name='MemAllocationRatio'),
      memUsedAmount?: float(name='MemUsedAmount'),
      memUtility?: float(name='MemUtility'),
      openPermission?: string(name='OpenPermission'),
      text?: string(name='Text'),
      VPCId?: string(name='VPCId'),
      zoneIDList?: {
        zoneIDList?: [ string ](name='ZoneIDList')
      }(name='ZoneIDList'),
    }
  ](name='DedicatedHostGroups')
  }(name='DedicatedHostGroups'),
  requestId?: string(name='RequestId'),
}

model DescribeDedicatedHostGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostGroupsResponseBody(name='body'),
}

async function describeDedicatedHostGroups(request: DescribeDedicatedHostGroupsRequest): DescribeDedicatedHostGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedHostGroups', 'POST', '/', 'json', false, 'json', request);
}

model DescribeDedicatedHostsRequest {
  allocationStatus?: string(name='AllocationStatus', position='Query'),
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId', position='Query'),
  dedicatedHostId?: string(name='DedicatedHostId', position='Query'),
  hostStatus?: string(name='HostStatus', position='Query'),
  hostType?: string(name='HostType', position='Query'),
  orderId?: long(name='OrderId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  pageNumbers?: int32(name='PageNumbers', position='Query'),
  pageSize?: int32(name='PageSize', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  tags?: string(name='Tags', position='Query'),
  zoneId?: string(name='ZoneId', position='Query'),
}

model DescribeDedicatedHostsResponseBody = {
  dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
  dedicatedHosts?: {
    dedicatedHosts?: [ 
    {
      accountName?: string(name='AccountName'),
      accountType?: string(name='AccountType'),
      allocationStatus?: string(name='AllocationStatus'),
      bastionInstanceId?: string(name='BastionInstanceId'),
      CPUAllocationRatio?: string(name='CPUAllocationRatio'),
      cpuUsed?: string(name='CpuUsed'),
      createdTime?: string(name='CreatedTime'),
      dedicatedHostGroupId?: string(name='DedicatedHostGroupId'),
      dedicatedHostId?: string(name='DedicatedHostId'),
      deployType?: string(name='DeployType'),
      diskAllocationRatio?: string(name='DiskAllocationRatio'),
      distributionSymbol?: string(name='DistributionSymbol'),
      distributionTag?: string(name='DistributionTag'),
      ecsClassCode?: string(name='EcsClassCode'),
      endTime?: string(name='EndTime'),
      engine?: string(name='Engine'),
      hostCPU?: string(name='HostCPU'),
      hostClass?: string(name='HostClass'),
      hostMem?: string(name='HostMem'),
      hostName?: string(name='HostName'),
      hostStatus?: string(name='HostStatus'),
      hostStorage?: string(name='HostStorage'),
      hostType?: string(name='HostType'),
      IPAddress?: string(name='IPAddress'),
      imageCategory?: string(name='ImageCategory'),
      instanceNumber?: string(name='InstanceNumber'),
      memAllocationRatio?: string(name='MemAllocationRatio'),
      memoryUsed?: string(name='MemoryUsed'),
      openPermission?: string(name='OpenPermission'),
      storageUsed?: string(name='StorageUsed'),
      VPCId?: string(name='VPCId'),
      vSwitchId?: string(name='VSwitchId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='DedicatedHosts')
  }(name='DedicatedHosts'),
  maxAutoScaleHostStorage?: long(name='MaxAutoScaleHostStorage'),
  pageNumbers?: int32(name='PageNumbers'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalRecords?: int32(name='TotalRecords'),
}

model DescribeDedicatedHostsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDedicatedHostsResponseBody(name='body'),
}

async function describeDedicatedHosts(request: DescribeDedicatedHostsRequest): DescribeDedicatedHostsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeDedicatedHosts', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHostEcsLevelInfoRequest {
  dbType: string(name='DbType', position='Query'),
  imageCategory?: string(name='ImageCategory', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  storageType: string(name='StorageType', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model DescribeHostEcsLevelInfoResponseBody = {
  hostEcsLevelInfos?: [ 
    {
      cddcHostType?: string(name='CddcHostType'),
      items?: [ 
        {
          cloudStorageBandwidth?: float(name='CloudStorageBandwidth'),
          cpu?: int32(name='Cpu'),
          cpuFrequency?: string(name='CpuFrequency'),
          cpuVersion?: string(name='CpuVersion'),
          description?: string(name='Description'),
          ecsClass?: string(name='EcsClass'),
          ecsClassCode?: string(name='EcsClassCode'),
          isCloudDisk?: int32(name='IsCloudDisk'),
          localStorage?: string(name='LocalStorage'),
          memory?: int32(name='Memory'),
          netBandWidth?: float(name='NetBandWidth'),
          netPackage?: int32(name='NetPackage'),
          rdsClassCode?: string(name='RdsClassCode'),
          storageIops?: int32(name='StorageIops'),
        }
      ](name='Items'),
    }
  ](name='HostEcsLevelInfos'),
  requestId?: string(name='RequestId'),
}

model DescribeHostEcsLevelInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHostEcsLevelInfoResponseBody(name='body'),
}

async function describeHostEcsLevelInfo(request: DescribeHostEcsLevelInfoRequest): DescribeHostEcsLevelInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHostEcsLevelInfo', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHostSecurityGroupAttributeRequest {
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeHostSecurityGroupAttributeResponseBody = {
  requestId?: string(name='RequestId'),
  secGroupPermission?: {
    secGroupPermission?: [ 
    {
      createTime?: string(name='CreateTime'),
      description?: string(name='Description'),
      direction?: string(name='Direction'),
      ipProtocol?: string(name='IpProtocol'),
      nicType?: string(name='NicType'),
      policy?: string(name='Policy'),
      portRange?: string(name='PortRange'),
      sourceCidrIp?: string(name='SourceCidrIp'),
    }
  ](name='SecGroupPermission')
  }(name='SecGroupPermission'),
  success?: int32(name='Success'),
}

model DescribeHostSecurityGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHostSecurityGroupAttributeResponseBody(name='body'),
}

async function describeHostSecurityGroupAttribute(request: DescribeHostSecurityGroupAttributeRequest): DescribeHostSecurityGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHostSecurityGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model DescribeHostWebShellRequest {
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  zoneId: string(name='ZoneId', position='Query'),
}

model DescribeHostWebShellResponseBody = {
  loginUrl?: string(name='LoginUrl'),
  requestId?: string(name='RequestId'),
}

model DescribeHostWebShellResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeHostWebShellResponseBody(name='body'),
}

async function describeHostWebShell(request: DescribeHostWebShellRequest): DescribeHostWebShellResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeHostWebShell', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: {
    RDSRegion?: [ 
    {
      regionId?: string(name='RegionId'),
      zoneId?: string(name='ZoneId'),
    }
  ](name='RDSRegion')
  }(name='Regions'),
  requestId?: string(name='RequestId'),
}

model DescribeRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeRegionsResponseBody(name='body'),
}

async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId?: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag?: [ 
    {
      key?: string(name='Key'),
      value?: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model ListTagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
  tagResources?: [ 
    {
      resourceId?: string(name='ResourceId'),
      resourceType?: string(name='ResourceType'),
      tagKey?: string(name='TagKey'),
      tagValue?: string(name='TagValue'),
    }
  ](name='TagResources'),
}

model ListTagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: ListTagResourcesResponseBody(name='body'),
}

async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostAccountRequest {
  accountName: string(name='AccountName', position='Query'),
  accountPassword: string(name='AccountPassword', position='Query'),
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDedicatedHostAccountResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAccountResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAccountResponseBody(name='body'),
}

async function modifyDedicatedHostAccount(request: ModifyDedicatedHostAccountRequest): ModifyDedicatedHostAccountResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostAccount', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostAttributeRequest {
  allocationStatus?: string(name='AllocationStatus', position='Query'),
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  hostName?: string(name='HostName', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDedicatedHostAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostAttribute(request: ModifyDedicatedHostAttributeRequest): ModifyDedicatedHostAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostClassRequest {
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  switchTime?: string(name='SwitchTime', position='Query'),
  switchTimeMode?: string(name='SwitchTimeMode', position='Query'),
  targetClassCode: string(name='TargetClassCode', position='Query'),
}

model ModifyDedicatedHostClassResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  requestId?: string(name='RequestId'),
  taskId?: string(name='TaskId'),
}

model ModifyDedicatedHostClassResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostClassResponseBody(name='body'),
}

async function modifyDedicatedHostClass(request: ModifyDedicatedHostClassRequest): ModifyDedicatedHostClassResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostClass', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostGroupAttributeRequest {
  allocationPolicy?: string(name='AllocationPolicy', position='Query'),
  cpuAllocationRatio?: int32(name='CpuAllocationRatio', position='Query'),
  dedicatedHostGroupDesc?: string(name='DedicatedHostGroupDesc', position='Query'),
  dedicatedHostGroupId: string(name='DedicatedHostGroupId', position='Query'),
  diskAllocationRatio?: int32(name='DiskAllocationRatio', position='Query'),
  hostReplacePolicy?: string(name='HostReplacePolicy', position='Query'),
  memAllocationRatio?: int32(name='MemAllocationRatio', position='Query'),
  openPermission?: string(name='OpenPermission', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDedicatedHostGroupAttributeResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostGroupAttributeResponseBody(name='body'),
}

async function modifyDedicatedHostGroupAttribute(request: ModifyDedicatedHostGroupAttributeRequest): ModifyDedicatedHostGroupAttributeResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostGroupAttribute', 'POST', '/', 'json', false, 'json', request);
}

model ModifyDedicatedHostPasswordRequest {
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  newPassword: string(name='NewPassword', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ModifyDedicatedHostPasswordResponseBody = {
  dedicatedHostName?: string(name='DedicatedHostName'),
  requestId?: string(name='RequestId'),
}

model ModifyDedicatedHostPasswordResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyDedicatedHostPasswordResponseBody(name='body'),
}

async function modifyDedicatedHostPassword(request: ModifyDedicatedHostPasswordRequest): ModifyDedicatedHostPasswordResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ModifyDedicatedHostPassword', 'POST', '/', 'json', false, 'json', request);
}

model QueryHostBaseInfoByInstanceRequest {
  DBInstanceId: string(name='DBInstanceId', position='Query'),
  ownerId?: long(name='OwnerId', minimum=0, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=0, maximum=9223372036854775807, position='Query'),
}

model QueryHostBaseInfoByInstanceResponseBody = {
  hostInstanceConsoleInfos?: [ 
    {
      clusterName?: string(name='ClusterName'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      expiredTime?: string(name='ExpiredTime'),
      hostName?: string(name='HostName'),
      ip?: string(name='Ip'),
      port?: string(name='Port'),
      role?: string(name='Role'),
      status?: string(name='Status'),
      vpcId?: string(name='VpcId'),
    }
  ](name='HostInstanceConsoleInfos'),
  requestId?: string(name='RequestId'),
}

model QueryHostBaseInfoByInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: QueryHostBaseInfoByInstanceResponseBody(name='body'),
}

async function queryHostBaseInfoByInstance(request: QueryHostBaseInfoByInstanceRequest): QueryHostBaseInfoByInstanceResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryHostBaseInfoByInstance', 'POST', '/', 'json', false, 'json', request);
}

model QueryHostInstanceConsoleInfoRequest {
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  ownerId?: long(name='OwnerId', minimum=0, maximum=9223372036854775807, position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', minimum=0, maximum=9223372036854775807, position='Query'),
}

model QueryHostInstanceConsoleInfoResponseBody = {
  hostInstanceConsoleInfos?: [ 
    {
      cpuCores?: int32(name='CpuCores'),
      cpuIncreaseRatioValue?: int32(name='CpuIncreaseRatioValue'),
      DBInstanceDescription?: string(name='DBInstanceDescription'),
      DBInstanceId?: string(name='DBInstanceId'),
      diskSize?: int32(name='DiskSize'),
      engine?: string(name='Engine'),
      engineVersion?: string(name='EngineVersion'),
      ip?: string(name='Ip'),
      levelName?: string(name='LevelName'),
      maxConnIncreaseRatioValue?: int32(name='MaxConnIncreaseRatioValue'),
      memSize?: int32(name='MemSize'),
      memoryIncreaseRatioValue?: int32(name='MemoryIncreaseRatioValue'),
      perfInfo?: {
        cpuRatio?: float(name='CpuRatio'),
        diskCurr?: float(name='DiskCurr'),
        memRatio?: float(name='MemRatio'),
        perfIdbPio?: float(name='PerfIdbPio'),
      }(name='PerfInfo'),
      port?: string(name='Port'),
      role?: string(name='Role'),
      status?: string(name='Status'),
    }
  ](name='HostInstanceConsoleInfos'),
  requestId?: string(name='RequestId'),
}

model QueryHostInstanceConsoleInfoResponse = {
  headers: map[string]string(name='headers'),
  body: QueryHostInstanceConsoleInfoResponseBody(name='body'),
}

async function queryHostInstanceConsoleInfo(request: QueryHostInstanceConsoleInfoRequest): QueryHostInstanceConsoleInfoResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'QueryHostInstanceConsoleInfo', 'POST', '/', 'json', false, 'json', request);
}

model ReplaceDedicatedHostRequest {
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  failoverMode: string(name='FailoverMode', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model ReplaceDedicatedHostResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
}

model ReplaceDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: ReplaceDedicatedHostResponseBody(name='body'),
}

async function replaceDedicatedHost(request: ReplaceDedicatedHostRequest): ReplaceDedicatedHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ReplaceDedicatedHost', 'POST', '/', 'json', false, 'json', request);
}

model RestartDedicatedHostRequest {
  dedicatedHostId: string(name='DedicatedHostId', position='Query'),
  failoverMode: string(name='FailoverMode', position='Query'),
  forceStop?: boolean(name='ForceStop', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
}

model RestartDedicatedHostResponseBody = {
  dedicatedHostId?: string(name='DedicatedHostId'),
  requestId?: string(name='RequestId'),
  taskId?: int32(name='TaskId'),
}

model RestartDedicatedHostResponse = {
  headers: map[string]string(name='headers'),
  body: RestartDedicatedHostResponseBody(name='body'),
}

async function restartDedicatedHost(request: RestartDedicatedHostRequest): RestartDedicatedHostResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RestartDedicatedHost', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tag: [ 
    {
      key: string(name='Key'),
      value: string(name='Value'),
    }
  ](name='Tag', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model TagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: TagResourcesResponseBody(name='body'),
}

async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', position='Query'),
  ownerId?: long(name='OwnerId', position='Query'),
  regionId: string(name='RegionId', position='Query'),
  resourceId: [ string ](name='ResourceId', position='Query'),
  resourceOwnerAccount?: string(name='ResourceOwnerAccount', position='Query'),
  resourceOwnerId?: long(name='ResourceOwnerId', position='Query'),
  resourceType: string(name='ResourceType', position='Query'),
  tagKey?: [ string ](name='TagKey', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId'),
}

model UntagResourcesResponse = {
  headers: map[string]string(name='headers'),
  body: UntagResourcesResponseBody(name='body'),
}

async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

