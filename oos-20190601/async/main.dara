/**
  *
  */
import BaseClientBuilder;
import TeaAsyncHandler;
import TeaRequest;
import AsyncRequestBody;
import RequestBody;
import AsyncResponseHandler;
import ClientConfiguration;
import ClientExecutionParams;
extends BaseClientBuilder;
type @product = string
type @version = string
type @endpointRule = string
type @endpointMap = map[string]string
type @REQUEST = TeaRequest
type @handler = TeaAsyncHandler

init(configuration: ClientConfiguration){
  @handler = new TeaAsyncHandler(configuration);
  @product = 'oos';
  @version = '2019-06-01';
  @endpointRule = 'regional';
  @endpointMap = {
  };
}

function close(): void {
  @handler.close();
}

model AnalyzeGitRepositoryRequest {
  branch?: string(name='Branch', position='Query'),
  clientToken?: string(name='ClientToken', position='Query'),
  orgId?: string(name='OrgId', position='Query'),
  owner: string(name='Owner', description='This parameter is required.', position='Query'),
  platform: string(name='Platform', description='This parameter is required.', position='Query'),
  regionId?: string(name='RegionId', position='Query'),
  repoFullName?: string(name='RepoFullName', position='Query'),
  repoId?: string(name='RepoId', position='Query'),
}

model AnalyzeGitRepositoryResponseBody = {
  analysisResults?: [ 
    {
      buildFiles?: [ 
        {
          fileType?: string(name='FileType'),
          paths?: [ string ](name='Paths'),
        }
      ](name='BuildFiles'),
      buildType?: string(name='BuildType'),
      runtimeType?: string(name='RuntimeType'),
    }
  ](name='AnalysisResults'),
  count?: int32(name='Count'),
  requestId?: string(name='RequestId'),
}

model AnalyzeGitRepositoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: AnalyzeGitRepositoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of AnalyzeGitRepository  AnalyzeGitRepositoryRequest
  * @return AnalyzeGitRepositoryResponse
 */
async function analyzeGitRepository(request: AnalyzeGitRepositoryRequest): AnalyzeGitRepositoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'AnalyzeGitRepository', 'POST', '/', 'json', false, 'json', request);
}

model CancelExecutionRequest {
  executionId: string(name='ExecutionId', description='The ID of the execution.

This parameter is required.', example='exec-xxx', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model CancelExecutionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
}

model CancelExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CancelExecutionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CancelExecution  CancelExecutionRequest
  * @return CancelExecutionResponse
 */
async function cancelExecution(request: CancelExecutionRequest): CancelExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CancelExecution', 'POST', '/', 'json', false, 'json', request);
}

model ChangeResourceGroupRequest {
  newResourceGroupId: string(name='NewResourceGroupId', description='The ID of the resource group to which the cloud resource is to be moved. You can use resource groups to manage resources owned by your Alibaba Cloud account. Resource groups simplify the resource and permission management of your Alibaba Cloud account. For more information, see [What is Resource Management?](https://help.aliyun.com/document_detail/94475.html)

This parameter is required.', example='rg-acfm3peow3k****', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceId: string(name='ResourceId', description='The ID of the cloud resource that you want to move to another resource group.

*   If the ResourceType parameter is set to template, set the ResourceId parameter to the name of the template.
*   If the ResourceType parameter is set to parameter, set the ResourceId parameter to the name of the parameter.
*   If the ResourceType parameter is set to secretparameter, set the ResourceId parameter to the name of the encryption parameter.
*   If the ResourceType parameter is set to stateconfiguration, set the ResourceId parameter to the ID of the desired-state configuration.
*   If the ResourceType parameter is set to application, set the ResourceId parameter to the name of the application.

This parameter is required.', example='TemplateName', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the cloud resource. Valid values:

*   template: template
*   parameter: parameter
*   secretparameter: encryption parameter
*   stateconfiguration: desired-state configuration
*   application: application

This parameter is required.', example='template', position='Query'),
}

model ChangeResourceGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='0620E49F-B884-5F98-A834-69D72922E5CF'),
}

model ChangeResourceGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ChangeResourceGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ChangeResourceGroup  ChangeResourceGroupRequest
  * @return ChangeResourceGroupResponse
 */
async function changeResourceGroup(request: ChangeResourceGroupRequest): ChangeResourceGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ChangeResourceGroup', 'POST', '/', 'json', false, 'json', request);
}

model ContinueDeployApplicationGroupRequest {
  applicationName: string(name='ApplicationName', description='The name of the application.

This parameter is required.', example='MyApplication', position='Query'),
  deployParameters: string(name='DeployParameters', description='The deployment information about the application group.

This parameter is required.', example='{       "TemplateURL": "https://ros-template.oss-cn-zhangjiakou.aliyuncs.com/App_Management_Existing_Vpc_Ecs_Instance.json",       "Parameters": {         "ZoneId": "cn-hangzhou-k",         "ProjectName": "test",         "SystemDiskSize": 40,         "InstanceChargeType": "PostPaid",         "SecurityGroupId": "sg-bp1a4374akk63jl8tddy",         "VSwitchId": "vsw-bp1fcvc3zn0jrag86rrlm",         "SystemDiskCategory": "cloud_essd",         "InstancePassword": "******",         "InternetChargeType": "PayByTraffic",         "InstanceCount": 1,         "InternetMaxBandwidthOut": 0,         "VpcId": "vpc-bp1i99boyas8i8m9t3skp",         "EcsImageId": "centos_8_5_x64_20G_alibase_20211228.vhd",         "DataDiskSize": 100,         "EcsInstanceType": "ecs.s6-c1m4.small",         "DataDiskCategory": "cloud_efficiency",         "EnvironmentCommandId": "c-hz028fc3g031gcg"       }', position='Query'),
  name: string(name='Name', description='The name of the application group.

This parameter is required.', example='MyApplicationGroup', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model ContinueDeployApplicationGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8AF4800A-A316-589A-90C4-313B1FEEB084'),
}

model ContinueDeployApplicationGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ContinueDeployApplicationGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ContinueDeployApplicationGroup  ContinueDeployApplicationGroupRequest
  * @return ContinueDeployApplicationGroupResponse
 */
async function continueDeployApplicationGroup(request: ContinueDeployApplicationGroupRequest): ContinueDeployApplicationGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ContinueDeployApplicationGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicationRequest {
  alarmConfig?: {
    contactGroups?: [ string ](name='ContactGroups', description='The alert contact groups.'),
    healthCheckUrl?: string(name='HealthCheckUrl', description='The health check URL of the application.', example='/healthcheck/tcp50122'),
    templateIds?: [ string ](name='TemplateIds', description='The alert templates.'),
  }(name='AlarmConfig', description='The configurations of application alerts.', shrink='json', position='Query'),
  applicationSource?: string(name='ApplicationSource', description='The source of application.', example='{"Platform":"github","Owner":"githubUser","RepoName":"githubUser/repoName"}', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='TF-CreateApplication-1647587475-84104b89-eba5-47a8-b2fd-807b8b7d', position='Query'),
  description?: string(name='Description', description='The description of the application.', example='application', position='Query'),
  name: string(name='Name', description='The application name.

This parameter is required.', example='MyApplication', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m******', position='Query'),
  serviceId?: string(name='ServiceId', description='The ID of the Compute Nest service that corresponds to the application template.', example='service-79538e30e44541b699d8', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags.', example='{"k1":"v1","k2":"v2"}', shrink='json', position='Query'),
}

model CreateApplicationResponseBody = {
  application?: {
    createDate?: string(name='CreateDate', description='The time when the application was created.', example='2021-09-07T09:17:46Z'),
    description?: string(name='Description', description='The description of the application.', example='application'),
    name?: string(name='Name', description='The application name.', example='Myapplication'),
    tags?: map[string]string(name='Tags', description='The tags.', example='{"k1":"v1","k2":"v2"}'),
    updateDate?: string(name='UpdateDate', description='The time when the application was updated.', example='2021-09-07T09:17:46Z'),
  }(name='Application', description='The information about the application.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='274917E8-8E74-5928-A82F-4940F52F7ACB'),
}

model CreateApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateApplication  CreateApplicationRequest
  * @return CreateApplicationResponse
 */
async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplication', 'POST', '/', 'json', false, 'json', request);
}

model CreateApplicationGroupRequest {
  applicationName: string(name='ApplicationName', description='The application name.

This parameter is required.', example='MyApplication', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='-', position='Query'),
  cmsGroupId?: string(name='CmsGroupId', description='The ID of the application group in CloudMonitor.', example='218026174', position='Query'),
  deployRegionId: string(name='DeployRegionId', description='The ID of the region in which the related sources reside.

This parameter is required.', example='cn-hangzhou', position='Query'),
  description?: string(name='Description', description='The description of the application group.', example='ApplicationGroup', position='Query'),
  importTagKey?: string(name='ImportTagKey', description='The key of the tag. You must set both the ImportTagKey and the ImportTagValue parameters, or leave both of them empty. If you do not set the ImportTagKey and ImportTagValue parameters, the application name is used for this parameter by default.', example='k1', position='Query'),
  importTagValue?: string(name='ImportTagValue', description='The value of the tag. You must set both the ImportTagKey and the ImportTagValue parameters, or leave both of them empty. If you do not set the ImportTagKey and ImportTagValue parameters, the application group name is used for this parameter by default.', example='v1', position='Query'),
  name: string(name='Name', description='The name of the application group.

This parameter is required.', example='MyApplicationGroup', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model CreateApplicationGroupResponseBody = {
  applicationGroup?: {
    applicationName?: string(name='ApplicationName', description='The application name.', example='MyApplication'),
    cmsGroupId?: string(name='CmsGroupId', description='The ID of the application group in CloudMonitor.', example='1245768'),
    createDate?: string(name='CreateDate', description='The time when the application group was created.', example='2021-09-07T10:28:25Z'),
    deployRegionId?: string(name='DeployRegionId', description='The ID of the region in which the related sources reside.', example='cn-hangzhou'),
    description?: string(name='Description', description='The description of the application group.', example='ApplicationGroup'),
    importTagKey?: string(name='ImportTagKey', description='The key of the tag.', example='k1'),
    importTagValue?: string(name='ImportTagValue', description='The value of the tag.', example='v1'),
    name?: string(name='Name', description='The name of the application group.', example='MyApplicationGroup'),
    updateDate?: string(name='UpdateDate', description='The time when the application group was updated.', example='2021-09-07T10:28:25Z'),
  }(name='ApplicationGroup', description='The information about the application group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0E6BEBD3-7F9E-5878-834B-097633AB5F33'),
}

model CreateApplicationGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateApplicationGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateApplicationGroup  CreateApplicationGroupRequest
  * @return CreateApplicationGroupResponse
 */
async function createApplicationGroup(request: CreateApplicationGroupRequest): CreateApplicationGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateApplicationGroup', 'POST', '/', 'json', false, 'json', request);
}

model CreateOpsItemRequest {
  category: string(name='Category', description='The category.

Valid values:

*   Availability

    <!-- -->

    <!-- -->

    <!-- -->

*   Performance

    <!-- -->

    <!-- -->

    <!-- -->

*   Security

    <!-- -->

    <!-- -->

    <!-- -->

*   Cost

    <!-- -->

    <!-- -->

    <!-- -->

*   Recovery

    <!-- -->

    <!-- -->

    <!-- -->

This parameter is required.', example='Security', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='123e56767-e89b-12d3-a456-426655440000', position='Query'),
  dedupString?: string(name='DedupString', description='The string to be deduplicated.', example='ecs_instance_Sys', position='Query'),
  description?: string(name='Description', description='The description of the operation.', example='OpsItem', position='Query'),
  priority?: int32(name='Priority', description='The priority. Valid values: 1 to 5. 1 indicates the highest priority.', example='4', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******', position='Query'),
  resources?: string(name='Resources', description='The Alibaba Cloud Resource Names (ARNs) of the associated resources.', example='[\\"acs:oos:cn-hangzhou:1563457855438522:application/test-33333/applicationgroup/default-cn-hangzhou-1\\"]', position='Query'),
  severity: string(name='Severity', description='The severity level.

Valid values:

*   High

    <!-- -->

    <!-- -->

    <!-- -->

*   Low

    <!-- -->

    <!-- -->

    <!-- -->

*   Medium

    <!-- -->

    <!-- -->

    <!-- -->

*   Critical

    <!-- -->

    <!-- -->

    <!-- -->

This parameter is required.', example='Medium', position='Query'),
  solutions?: string(name='Solutions', description='The solutions.', example='[{\\n \\\\"priority\\\\":3,\\n \\\\"type\\\\":\\\\"SingleAZEcs\\\\",\\n \\\\"url\\\\":\\\\"http://ecs.consle.aliyuncs.com\\\\",\\n \\\\"description\\\\":\\\\"Create Elastic Compute Service (ECS) instances in different zones and import them to an application group.\\\\"\\n}]', position='Query'),
  source: string(name='Source', description='The source business.

This parameter is required.', example='/aliyun/ecs', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags.', example='{
      "k1": "v1",
      "k2": "v2"
}', shrink='json', position='Query'),
  title: string(name='Title', description='The title of the O\\&M item.

This parameter is required.', example='ECS reboot is scheduled', position='Query'),
}

model CreateOpsItemResponseBody = {
  opsItem?: {
    attributes?: string(name='Attributes', description='The attributes of the O\\&M item.', example='{\\"regionId\\":\\"cn-zhangjiakou\\",\\"appId\\":\\"992BKO1X75GRQ4E8\\",\\"instanceId\\":\\"i-8vbcymxagqsyyyjppbr4\\",\\"instance_name\\":\\"cdae\\"}'),
    category?: string(name='Category', description='The category of the O\\&M item.', example='Security'),
    createDate?: string(name='CreateDate', description='The time when the O\\&M item was created.', example='2023-03-24T03:55Z'),
    createdBy?: string(name='CreatedBy', description='The user who created the O\\&M item.', example='root(130900000)'),
    description?: string(name='Description', description='The description of the O\\&M item.', example='OpsItem'),
    lastModifiedBy?: string(name='LastModifiedBy', description='The user who last modified the O\\&M item.', example='root(130900000)'),
    opsItemId?: string(name='OpsItemId', description='The ID of the O\\&M item.', example='oi-dba9c6eec9254a4d87c1'),
    priority?: int32(name='Priority', description='The priority of the O\\&M item.', example='2'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
    resources?: string(name='Resources', description='The ARNs of the associated resources.', example='[\\"acs:oos:cn-hangzhou:1563457855438522:application/dingTest/applicationgroup/fltest\\"]'),
    severity?: string(name='Severity', description='The severity level of the O\\&M item.', example='Medium'),
    solutions?: string(name='Solutions', description='The solutions.', example='[{\\n \\\\"priority\\\\":3,\\n \\\\"type\\\\":\\\\"url\\\\",\\n \\\\"url\\\\":\\\\"https://example..com\\\\",\\n \\\\"description\\\\":\\\\"Specify a cross-zone high availability cluster. \\\\"\\n}]'),
    source?: string(name='Source', description='The source business of the O\\&M item.', example='/aliyun/ecs'),
    status?: string(name='Status', description='The state of the O\\&M item.', example='Running'),
    tags?: map[string]any(name='Tags', description='The tags of the O\\&M item.', example='{"k1": "v1"}'),
    title?: string(name='Title', description='The title of the O\\&M item.', example='ECS reboot is scheduled'),
    updateDate?: string(name='UpdateDate', description='The time when the O\\&M item was updated.', example='2023-03-24T03:55Z'),
  }(name='OpsItem', description='The information about the O\\&M item.'),
  requestId?: string(name='RequestId', description='The request ID.', example='DA4F08D4-DA54-5407-84B9-108C71D75B17'),
}

model CreateOpsItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateOpsItemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateOpsItem  CreateOpsItemRequest
  * @return CreateOpsItemResponse
 */
async function createOpsItem(request: CreateOpsItemRequest): CreateOpsItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateOpsItem', 'POST', '/', 'json', false, 'json', request);
}

model CreateParameterRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can be up to 64 characters in length, and can contain letters, digits, hyphens (-), and underscores (_). For more information, see "How to ensure idempotence".', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  constraints?: string(name='Constraints', description='The constraints of the common parameter. By default, this parameter is null. Valid values:

*   AllowedValues: The value that is allowed for the common parameter. It must be an array string.
*   AllowedPattern: The pattern that is allowed for the common parameter. It must be a regular expression.
*   MinLength: The minimum length of the common parameter.
*   MaxLength: The maximum length of the common parameter.', example='{
    "AllowedValues": [
        "parameter"
    ],
    "AllowedPattern": "parameter",
    "MinLength": 0,
    "MaxLength": 20
}', position='Query'),
  description?: string(name='Description', description='The description of the common parameter. The description must be 1 to 200 characters in length.', example='parameter', position='Query'),
  name: string(name='Name', description='The name of the parameter. The name must be 1 to 200 characters in length, and can contain letters, digits, hyphens (-), and underscores (_). It cannot start with ALIYUN, ACS, ALIBABA, ALICLOUD, or OOS.

This parameter is required.', example='MyParameter', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags.', example='{"k1": "v1", "k2": "v2"}', shrink='json', position='Query'),
  type: string(name='Type', description='The data type of the parameter. Valid values: String and StringList.

This parameter is required.', example='String', position='Query'),
  value: string(name='Value', description='The value of the common parameter. The value must be 1 to 4096 characters in length.

This parameter is required.', example='parameter', position='Query'),
}

model CreateParameterResponseBody = {
  parameter?: {
    constraints?: string(name='Constraints', description='The constraints of the common parameter.', example='"{\\"AllowedValues\\":[\\"parameter\\"],\\"AllowedPattern\\":\\"parameter\\",\\"MinLength\\":0,\\"MaxLength\\":20}"'),
    createdBy?: string(name='CreatedBy', description='The user who created the common parameter.', example='root(130900000)'),
    createdDate?: string(name='CreatedDate', description='The time when the common parameter was created.', example='2020-09-01T08:01:43Z'),
    description?: string(name='Description', description='The description of the common parameter.', example='parameter'),
    id?: string(name='Id', description='The ID of the common parameter.', example='p-4c4b401cab6747xxxxxx'),
    name?: string(name='Name', description='The name of the common parameter.', example='MyParameter'),
    parameterVersion?: int32(name='ParameterVersion', description='The version number of the common parameter.', example='1'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
    shareType?: string(name='ShareType', description='The share type of the common parameter.', example='Private'),
    tags?: map[string]any(name='Tags', description='The tags.', example='{"k1": "v1", "k2": "v2"}'),
    type?: string(name='Type', description='The type of the common parameter.', example='String'),
    updatedBy?: string(name='UpdatedBy', description='The user who updated the common parameter.', example='root(130900000)'),
    updatedDate?: string(name='UpdatedDate', description='The time when the common parameter was updated.', example='2020-09-01T08:01:43Z'),
  }(name='Parameter', description='The information about the common parameter.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0B419FF3-ABC6-4DF0-95E5-636DC8CBB8AF'),
}

model CreateParameterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateParameterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateParameter  CreateParameterRequest
  * @return CreateParameterResponse
 */
async function createParameter(request: CreateParameterRequest): CreateParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateParameter', 'POST', '/', 'json', false, 'json', request);
}

model CreatePatchBaselineRequest {
  approvalRules: string(name='ApprovalRules', description='The rules of scanning and installing patches for the specified operating system.

This parameter is required.', example='{"PatchRules":[{"PatchFilterGroup":[{"Key":"PatchSet","Values":["OS"]},{"Key":"ProductFamily","Values":["Windows"]},{"Key":"Product","Values":["Windows 10","Windows 7"]},{"Key":"Classification","Values":["Security Updates","Updates","Update Rollups","Critical Updates"]},{"Key":"Severity","Values":["Critical","Important","Moderate"]}],"ApproveAfterDays":7,"ApproveUntilDate":"","EnableNonSecurity":true,"ComplianceLevel":"Medium"}]}', position='Query'),
  approvedPatches?: [ string ](name='ApprovedPatches', description='The approved patches.', shrink='json', position='Query'),
  approvedPatchesEnableNonSecurity?: boolean(name='ApprovedPatchesEnableNonSecurity', description='Specifies whether the approved patch involves updates other than security-related updates.', example='true', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='-', position='Query'),
  description?: string(name='Description', description='The description of the patch baseline.', example='PatchBaseline', position='Query'),
  name: string(name='Name', description='The name of the patch baseline.

This parameter is required.', example='MyPatchBaseline', position='Query'),
  operationSystem: string(name='OperationSystem', description='The type of the operating system. Valid values:

*   Windows
*   Ubuntu
*   CentOS
*   Debian
*   AliyunLinux
*   RedhatEnterpriseLinux
*   Anolis
*   AlmaLinux

This parameter is required.', example='Windows', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which you want to create a patch baseline.', example='cn-hangzhou', position='Query'),
  rejectedPatches?: [ string ](name='RejectedPatches', description='The rejected patches.', shrink='json', position='Query'),
  rejectedPatchesAction?: string(name='RejectedPatchesAction', description='The action of the rejected patch.', example='ALLOW_AS_DEPENDENCY', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******', position='Query'),
  sources?: [ string ](name='Sources', description='The patch source configurations.', shrink='json', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='key'),
      value?: string(name='Value', description='The value of the tag.', example='value'),
    }
  ](name='Tags', description='The tags.', shrink='json', position='Query'),
}

model CreatePatchBaselineResponseBody = {
  patchBaseline?: {
    approvalRules?: string(name='ApprovalRules', description='The rules of scanning and installing patches for the specified operating system.', example='{"PatchRules":[{"PatchFilterGroup":[{"Key":"PatchSet","Values":["OS"]},{"Key":"ProductFamily","Values":["Windows"]},{"Key":"Product","Values":["Windows 10","Windows 7"]},{"Key":"Classification","Values":["Security Updates","Updates","Update Rollups","Critical Updates"]},{"Key":"Severity","Values":["Critical","Important","Moderate"]}],"ApproveAfterDays":7,"ApproveUntilDate":"","EnableNonSecurity":true,"ComplianceLevel":"Medium"}]}'),
    approvedPatches?: [ string ](name='ApprovedPatches', description='The approved patches.'),
    approvedPatchesEnableNonSecurity?: boolean(name='ApprovedPatchesEnableNonSecurity', description='Indicates whether the approved patch involves updates other than security-related updates.', example='true'),
    createdBy?: string(name='CreatedBy', description='The creator of the patch baseline.', example='root(130900000)'),
    createdDate?: string(name='CreatedDate', description='The time when the patch baseline was created.', example='2021-09-08T06:25:41Z'),
    description?: string(name='Description', description='The description of the patch baseline.', example='PatchBaseline'),
    id?: string(name='Id', description='The ID of the patch baseline.', example='pb-0a0aeda72ed147eb97ea'),
    name?: string(name='Name', description='The name of the patch baseline.', example='MyPatchBaseline'),
    operationSystem?: string(name='OperationSystem', description='The type of the operating system.', example='Windows'),
    rejectedPatches?: [ string ](name='RejectedPatches', description='The rejected patches.'),
    rejectedPatchesAction?: string(name='RejectedPatchesAction', description='The action of the rejected patch.', example='"ALLOW_AS_DEPENDENCY"'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfm3comlufxpva'),
    shareType?: string(name='ShareType', description='The share type of the patch baseline.', example='Private'),
    sources?: [ string ](name='Sources', description='The patch source configurations.'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey', description='The key of the tag.', example='key'),
        tagValue?: string(name='TagValue', description='The value of the tag.', example='value'),
      }
    ](name='Tags', description='The tags.'),
    updatedBy?: string(name='UpdatedBy', description='The Alibaba Cloud account that last modified the information about the patch baseline.', example='root(130900000)'),
    updatedDate?: string(name='UpdatedDate', description='The time when the information about the patch baseline was last modified.', example='2021-09-08T06:25:41Z'),
  }(name='PatchBaseline', description='The details of the patch baseline.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5173FF6-D10D-5E8C-8F71-943C2A3E25C0'),
}

model CreatePatchBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreatePatchBaselineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreatePatchBaseline  CreatePatchBaselineRequest
  * @return CreatePatchBaselineResponse
 */
async function createPatchBaseline(request: CreatePatchBaselineRequest): CreatePatchBaselineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreatePatchBaseline', 'POST', '/', 'json', false, 'json', request);
}

model CreateSecretParameterRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request. You can use the client to generate the token, but you must make sure that the token is unique among different requests. The token can be up to 64 characters in length, and can contain letters, digits, hyphens (-), and underscores (_). For more information, see "How to ensure idempotence".', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  constraints?: string(name='Constraints', description='The constraints of the encryption parameter. By default, this parameter is null. Valid values:

*   AllowedValues: The value that is allowed for the encryption parameter. It must be an array string.
*   AllowedPattern: The pattern that is allowed for the encryption parameter. It must be a regular expression.
*   MinLength: The minimum length of the encryption parameter.
*   MaxLength: The maximum length of the encryption parameter.', example='\\"{\\"\\"AllowedValues":["secretparameter"],"AllowedPattern":"secretparameter","MinLength":0,"MaxLength":20}\\"', position='Query'),
  DKMSInstanceId?: string(name='DKMSInstanceId', description='The instance ID of the KMS instance.', example='kst-hzz****', position='Query'),
  description?: string(name='Description', description='The description of the encryption parameter. The description must be 1 to 200 characters in length.', example='SecretParameter', position='Query'),
  keyId?: string(name='KeyId', description='The key ID of Key Management Service (KMS) that is used to encrypt the parameter.', example='80e9409f-78fa-42ab-84bd-83f40c******', position='Query'),
  name: string(name='Name', description='The name of the parameter. The name must be 1 to 180 characters in length, and can contain letters, digits, hyphens (-), and underscores (_). It cannot start with ALIYUN, ACS, ALIBABA, ALICLOUD, or OOS.

This parameter is required.', example='MySecretParameter', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags.', example='{"k1": "v1", "k2": "v2"}', shrink='json', position='Query'),
  type?: string(name='Type', description='The type of the parameter. Set the value to Secret.', example='Secret', position='Query'),
  value: string(name='Value', description='The value of the encryption parameter. The value must be 1 to 4096 characters in length.

This parameter is required.', example='SecretParameter', position='Query'),
}

model CreateSecretParameterResponseBody = {
  parameter?: {
    constraints?: string(name='Constraints', description='The constraints of the encryption parameter.', example='\\"{ 	"AllowedValues": ["secretparameter"], 	"AllowedPattern": "secretparameter", 	"MinLength": 0, 	"MaxLength": 20 }\\"'),
    createdBy?: string(name='CreatedBy', description='The user who created the encryption parameter.', example='root(130900000)'),
    createdDate?: string(name='CreatedDate', description='The time when the encryption parameter was created.', example='2020-09-01T09:30:36Z'),
    DKMSInstanceId?: string(name='DKMSInstanceId', description='The instance ID of the KMS instance.', example='kst-hzz****'),
    description?: string(name='Description', description='The description of the encryption parameter.', example='SecretParameter'),
    id?: string(name='Id', description='The ID of the encryption parameter.', example='p-0b0fff9919c946xxxxxx'),
    keyId?: string(name='KeyId', description='The key ID of KMS that is used to encrypt the parameter.', example='80e9409f-78fa-42ab-84bd-83f40c******'),
    name?: string(name='Name', description='The name of the encryption parameter.', example='MyParameter'),
    parameterVersion?: int32(name='ParameterVersion', description='The version number of the encryption parameter.', example='1'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
    shareType?: string(name='ShareType', description='The share type of the encryption parameter.', example='Private'),
    tags?: map[string]any(name='Tags', description='The tags.', example='{"k1": "v1", "k2": "v2"}'),
    type?: string(name='Type', description='The type of the parameter.', example='Secret'),
    updatedBy?: string(name='UpdatedBy', description='The user who updated the encryption parameter.', example='root(130900000)'),
    updatedDate?: string(name='UpdatedDate', description='The time when the encryption parameter was updated.', example='2020-09-01T09:30:36Z'),
  }(name='Parameter', description='The information about the encryption parameter.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0B419FF3-ABC6-4DF0-95E5-636DC8CBB8AF'),
}

model CreateSecretParameterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateSecretParameterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateSecretParameter  CreateSecretParameterRequest
  * @return CreateSecretParameterResponse
 */
async function createSecretParameter(request: CreateSecretParameterRequest): CreateSecretParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateSecretParameter', 'POST', '/', 'json', false, 'json', request);
}

model CreateStateConfigurationRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='DASKJJLKADS-AHKLJHJSAKL-AJK', position='Query'),
  configureMode?: string(name='ConfigureMode', description='The configuration mode. Valid values: ApplyOnce: The configuration is applied only once. After a configuration is updated, the new configuration is applied. ApplyAndMonitor: The configuration is applied only once. After the configuration is applied, the system only checks whether the configuration is migrated in the future. ApplyAndAutoCorrect: The configuration is always applied.', example='ApplyOnce', position='Query'),
  description?: string(name='Description', description='The description of the desired-state configuration.', example='The region ID.', position='Query'),
  parameters?: string(name='Parameters', description='The parameters.', example='{     "policy": {       "ACS:Application": {         "Collection": "Enabled"       },       "ACS:Network": {         "Collection": "Enabled"       }     }   }', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxsn4m4******', position='Query'),
  scheduleExpression: string(name='ScheduleExpression', description='The schedule expression. The interval between two schedules must be a minimum of 30 minutes.

This parameter is required.', example='The ID of the resource group.', position='Query'),
  scheduleType: string(name='ScheduleType', description='The schedule type. Set the value to rate.

This parameter is required.', example='rate', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags to be added to the configuration.', example='{"Key": "oos", "Value": "inventory"}', shrink='json', position='Query'),
  targets: string(name='Targets', description='The resources to be queried.

This parameter is required.', example='{     "ResourceType": "ALIYUN::ECS::Instance",     "Filters": [       {         "Type": "All",         "RegionId": "cn-hangzhou",         "Parameters": {           "RegionId": "cn-hangzhou",           "Status": "Running"         }       }     ]   }', position='Query'),
  templateName: string(name='TemplateName', description='The name of the template. The name must be 1 to 200 characters in length and can contain letters, digits, hyphens (-), and underscores (_).

This parameter is required.', example='ACS-ECS-InventoryDataCollection', position='Query'),
  templateVersion?: string(name='TemplateVersion', description='The version number of the template. If you do not specify this parameter, the latest version of the template is used.', example='v1', position='Query'),
}

model CreateStateConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1306108F-610C-40FD-AAD5-DA13E8B00BE9'),
  stateConfiguration?: {
    configureMode?: string(name='ConfigureMode', description='The configuration mode. Valid values:', example='ApplyAndAutoCorrect'),
    createTime?: string(name='CreateTime', description='The time when the desired-state configuration was created.', example='2021-03-22T03:13:32Z'),
    description?: string(name='Description', description='The description.', example='collect inventory data'),
    parameters?: map[string]any(name='Parameters', description='The parameters.', example='{"policy": {"ACS:Network": {"Collection": "Enabled"}, "ACS:Application": {"Collection": "Enabled"}}}'),
    resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxsn4m4******'),
    scheduleExpression?: string(name='ScheduleExpression', description='The schedule expression.', example='1 hour'),
    scheduleType?: string(name='ScheduleType', description='The schedule type.', example='rate'),
    stateConfigurationId?: string(name='StateConfigurationId', description='The ID of the desired-state configuration.', example='sc-a538febe18fabcdef'),
    tags?: map[string]any(name='Tags', description='The tags added to the configuration.', example='{"Key": "oos", "Value": "inventory"}'),
    targets?: string(name='Targets', description='The queried resources.', example='{     "ResourceType": "ALIYUN::ECS::Instance",     "Filters": [       {         "Type": "All",         "RegionId": "cn-hangzhou",         "Parameters": {           "RegionId": "cn-hangzhou",           "Status": "Running"         }       }     ]   }'),
    templateId?: string(name='TemplateId', description='The template ID.', example='t-1234asadf'),
    templateName?: string(name='TemplateName', description='The name of the template.', example='ACS-ECS-InventoryDataCollection'),
    templateVersion?: string(name='TemplateVersion', description='The name of the template version.', example='v1'),
  }(name='StateConfiguration', description='The information about the desired-state configuration.'),
}

model CreateStateConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateStateConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateStateConfiguration  CreateStateConfigurationRequest
  * @return CreateStateConfigurationResponse
 */
async function createStateConfiguration(request: CreateStateConfigurationRequest): CreateStateConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateStateConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model CreateTemplateRequest {
  content: string(name='Content', description='The content of the template. The content must be in the JSON or YAML format, and its maximum size is 64 KB.

This parameter is required.', example='{"FormatVersion": "OOS-2019-06-01", "Description": "Describe instances of given status", "Parameters": {"Status": {"Type": "String", "Description": "(Required) The status of the Ecs instance."}}, "Tasks": [{"Properties": {"Parameters": {"Status": "{{ Status }}"}, "API": "DescribeInstances", "Service": "Ecs"}, "Name": "foo", "Action": "ACS::ExecuteApi"}]}', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******', position='Query'),
  tags?: map[string]any(name='Tags', description='The tag keys and tag values. The number of key-value pairs ranges from 1 to 20.', example='{"k1":"v1","k2":"v2"}', shrink='json', position='Query'),
  templateName: string(name='TemplateName', description='The name of the template. The name can be 1 to 200 characters in length and can contain letters, digits, hyphens (-), and underscores (_). The name cannot start with ALIYUN, ACS, ALIBABA, or ALICLOUD.

This parameter is required.', example='MyTemplate', position='Query'),
  versionName?: string(name='VersionName', description='The name of the version of the template.', example='v2', position='Query'),
}

model CreateTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='20758A-585D-4A41-A9B2-28DA8F4F534F'),
  template?: {
    createdBy?: string(name='CreatedBy', description='The creator of the template.', example='root(13090000)'),
    createdDate?: string(name='CreatedDate', description='The time when the template was created.', example='2019-05-16T10:26:14Z'),
    description?: string(name='Description', description='The description of the template.', example='Describe instances of given status'),
    hasTrigger?: boolean(name='HasTrigger', description='Indicates whether the template was configured with a trigger.', example='true'),
    hash?: string(name='Hash', description='The SHA-256 value of the template content.', example='4bc7d7a21b3e003434b9c223f6e6d2578b5ebfeb5be28c1fcf8a8a1b11907bb4'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
    shareType?: string(name='ShareType', description='The share type of the template. The share type of the template that you create is Private.', example='Private'),
    tags?: map[string]any(name='Tags', description='The tags of the resources.', example='{     "k1":"v1",     "k2":"v2" }'),
    templateFormat?: string(name='TemplateFormat', description='The format of the template. The system automatically determines whether the format is JSON or YAML.', example='JSON'),
    templateId?: string(name='TemplateId', description='The ID of the template.', example='t-94753d38'),
    templateName?: string(name='TemplateName', description='The name of the template.', example='MyTemplate'),
    templateVersion?: string(name='TemplateVersion', description='The version of the template. The name of the version consists of the letter v and a number. The number starts from 1.', example='v1'),
    updatedBy?: string(name='UpdatedBy', description='The Alibaba Cloud account that last modified the information about the template.', example='root(130900000)'),
    updatedDate?: string(name='UpdatedDate', description='The time when the template was last updated.', example='2019-05-16T10:26:14Z'),
  }(name='Template', description='The metadata of the template.'),
  templateType?: string(name='TemplateType', description='The type of the template.', example='Private'),
}

model CreateTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: CreateTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of CreateTemplate  CreateTemplateRequest
  * @return CreateTemplateResponse
 */
async function createTemplate(request: CreateTemplateRequest): CreateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'CreateTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApplicationRequest {
  force?: boolean(name='Force', description='Specifies whether to forcibly delete the application. Valid values:

*   true
*   false', example='False', position='Query'),
  name: string(name='Name', description='The application name.

This parameter is required.', example='MyApplication', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
  retainResource?: boolean(name='RetainResource', description='Specifies whether to retain resources created by application manager when deleting the application. Valid values:
- true
- false', example='false', position='Query'),
}

model DeleteApplicationResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='37A9F0FD-51D0-58D5-B91F-DF570281556B'),
}

model DeleteApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteApplication  DeleteApplicationRequest
  * @return DeleteApplicationResponse
 */
async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplication', 'POST', '/', 'json', false, 'json', request);
}

model DeleteApplicationGroupRequest {
  applicationName: string(name='ApplicationName', description='The name of the application.

This parameter is required.', example='MyApplication', position='Query'),
  name: string(name='Name', description='The name of the application group.

This parameter is required.', example='MyApplicationGroup', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
  retainResource?: boolean(name='RetainResource', description='Specifies whether to retain resources created by application manager when deleting the application. Valid values:
- true
- false', example='false', position='Query'),
}

model DeleteApplicationGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9E011F98-4EE5-5E3A-8FA3-D38F2C531C1F'),
}

model DeleteApplicationGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteApplicationGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteApplicationGroup  DeleteApplicationGroupRequest
  * @return DeleteApplicationGroupResponse
 */
async function deleteApplicationGroup(request: DeleteApplicationGroupRequest): DeleteApplicationGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteApplicationGroup', 'POST', '/', 'json', false, 'json', request);
}

model DeleteExecutionsRequest {
  executionIds: string(name='ExecutionIds', description='The execution IDs.

You can specify multiple execution IDs in a JSON array in the format of `["xxxxxxxxx", "yyyyyyyyy", ... "zzzzzzzzz"]`. You can specify up to 100 execution IDs at a time. Separate multiple IDs with commas (,).

This parameter is required.', example='["exec-xxx"]', position='Query'),
  force?: boolean(name='Force', description='Whether to force delete the running task, the default value is false.', example='false', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeleteExecutionsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='491DF8C2-34C9-4679-9DB3-4C0F49B129AC'),
}

model DeleteExecutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteExecutionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteExecutions  DeleteExecutionsRequest
  * @return DeleteExecutionsResponse
 */
async function deleteExecutions(request: DeleteExecutionsRequest): DeleteExecutionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteExecutions', 'POST', '/', 'json', false, 'json', request);
}

model DeleteOpsItemsRequest {
  opsItemIds?: [ string ](name='OpsItemIds', description='The IDs of O\\&M items.', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeleteOpsItemsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='DBA6E6C8-F75D-41DE-AFF5-1FA03F551CA3'),
}

model DeleteOpsItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteOpsItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteOpsItems  DeleteOpsItemsRequest
  * @return DeleteOpsItemsResponse
 */
async function deleteOpsItems(request: DeleteOpsItemsRequest): DeleteOpsItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteOpsItems', 'POST', '/', 'json', false, 'json', request);
}

model DeleteParameterRequest {
  name: string(name='Name', description='The name of the common parameter. The name can be up to 180 characters in length and can contain only letters, digits, hyphens (-), and underscores (_). It cannot start with aliyun, acs, alibaba, alicloud, or oos.

This parameter is required.', example='MyParameter', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeleteParameterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C0D02BDF-77F6-49F2-95C9-8E87121D2979'),
}

model DeleteParameterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteParameterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteParameter  DeleteParameterRequest
  * @return DeleteParameterResponse
 */
async function deleteParameter(request: DeleteParameterRequest): DeleteParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteParameter', 'POST', '/', 'json', false, 'json', request);
}

model DeletePatchBaselineRequest {
  name: string(name='Name', description='The name of the patch baseline.

This parameter is required.', example='MyPatchBaseline', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeletePatchBaselineResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='85197066-0209-5775-BBED-99DF9DA44E48'),
}

model DeletePatchBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeletePatchBaselineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeletePatchBaseline  DeletePatchBaselineRequest
  * @return DeletePatchBaselineResponse
 */
async function deletePatchBaseline(request: DeletePatchBaselineRequest): DeletePatchBaselineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeletePatchBaseline', 'POST', '/', 'json', false, 'json', request);
}

model DeleteSecretParameterRequest {
  name: string(name='Name', description='The name of the encryption parameter. The name must be 1 to 180 characters in length and can contain letters, digits, hyphens (-), and underscores (_). It cannot start with ALIYUN, ACS, ALIBABA, ALICLOUD, or OOS.

This parameter is required.', example='MySecretParameter', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DeleteSecretParameterResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='C0D02BDF-77F6-49F2-95C9-8E87121D1944'),
}

model DeleteSecretParameterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteSecretParameterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteSecretParameter  DeleteSecretParameterRequest
  * @return DeleteSecretParameterResponse
 */
async function deleteSecretParameter(request: DeleteSecretParameterRequest): DeleteSecretParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteSecretParameter', 'POST', '/', 'json', false, 'json', request);
}

model DeleteStateConfigurationsRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='abcde3OARpx77No54nv6', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  stateConfigurationIds: string(name='StateConfigurationIds', description='The IDs of desired-state configurations.

This parameter is required.', example='["sc-asfgdhj12345"]', position='Query'),
}

model DeleteStateConfigurationsResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='12345B731-0FCE-48BA-8D42-605abcde'),
}

model DeleteStateConfigurationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteStateConfigurationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteStateConfigurations  DeleteStateConfigurationsRequest
  * @return DeleteStateConfigurationsResponse
 */
async function deleteStateConfigurations(request: DeleteStateConfigurationsRequest): DeleteStateConfigurationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteStateConfigurations', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTemplateRequest {
  autoDeleteExecutions?: boolean(name='AutoDeleteExecutions', description='Specifies whether to delete the related executions when a template is deleted.', example='false', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  templateName: string(name='TemplateName', description='The name of the template. The name can be 1 to 200 characters in length and can contain letters, digits, hyphens (-), and underscores (_). It cannot start with ALIYUN, ACS, ALIBABA, or ALICLOUD.

This parameter is required.', example='MyTemplate', position='Query'),
}

model DeleteTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2075899A-585D-4A41-A9B2-28DA8534F'),
}

model DeleteTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTemplate  DeleteTemplateRequest
  * @return DeleteTemplateResponse
 */
async function deleteTemplate(request: DeleteTemplateRequest): DeleteTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTemplate', 'POST', '/', 'json', false, 'json', request);
}

model DeleteTemplatesRequest {
  autoDeleteExecutions?: boolean(name='AutoDeleteExecutions', description='Specifies whether to delete the related executions when a template is deleted.', example='false', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  templateNames: string(name='TemplateNames', description='The names of the templates to be deleted.

This parameter is required.', example='["t1","t2"]', position='Query'),
}

model DeleteTemplatesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2075899A-585D-4A41-A9B2-28DA8534'),
}

model DeleteTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeleteTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeleteTemplates  DeleteTemplatesRequest
  * @return DeleteTemplatesResponse
 */
async function deleteTemplates(request: DeleteTemplatesRequest): DeleteTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeleteTemplates', 'POST', '/', 'json', false, 'json', request);
}

model DeployApplicationGroupRequest {
  applicationName: string(name='ApplicationName', description='The name of the application.

This parameter is required.', example='MyApplication', position='Query'),
  deployParameters: string(name='DeployParameters', description='The deployment information about the application group.

This parameter is required.', example='{       "TemplateURL": "https://ros-template.oss-cn-zhangjiakou.aliyuncs.com/App_Management_Existing_Vpc_Ecs_Instance.json",       "Parameters": {         "ZoneId": "cn-hangzhou-k",         "ProjectName": "test",         "SystemDiskSize": 40,         "InstanceChargeType": "PostPaid",         "SecurityGroupId": "sg-bp1a4374akk63jl8tddy",         "VSwitchId": "vsw-bp1fcvc3zn0jrag86rrlm",         "SystemDiskCategory": "cloud_essd",         "InstancePassword": "******",         "InternetChargeType": "PayByTraffic",         "InstanceCount": 1,         "InternetMaxBandwidthOut": 0,         "VpcId": "vpc-bp1i99boyas8i8m9t3skp",         "EcsImageId": "centos_8_5_x64_20G_alibase_20211228.vhd",         "DataDiskSize": 100,         "EcsInstanceType": "ecs.s6-c1m4.small",         "DataDiskCategory": "cloud_efficiency",         "EnvironmentCommandId": "c-hz028fc3g031gcg"       }', position='Query'),
  name: string(name='Name', description='The name of the application group.

This parameter is required.', example='MyApplicationGroup', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which you want to deploy the application group.', example='cn-hangzhou', position='Query'),
}

model DeployApplicationGroupResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='8AF4800A-A316-589A-90C4-313B1FEEB084'),
}

model DeployApplicationGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DeployApplicationGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DeployApplicationGroup  DeployApplicationGroupRequest
  * @return DeployApplicationGroupResponse
 */
async function deployApplicationGroup(request: DeployApplicationGroupRequest): DeployApplicationGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DeployApplicationGroup', 'POST', '/', 'json', false, 'json', request);
}

model DescribeApplicationGroupBillRequest {
  applicationName: string(name='ApplicationName', description='The application name.

This parameter is required.', example='test_application', position='Query'),
  billingCycle: string(name='BillingCycle', description='The billing cycle, in the YYYY-MM format.

This parameter is required.', example='2023-06', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='10', maximum=50, position='Query'),
  name: string(name='Name', description='The application group name.

This parameter is required.', example='test_application_group', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='-', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the cloud resource.

This parameter is required.', example='ALIYUN::ECS::INSTANCE', position='Query'),
}

model DescribeApplicationGroupBillResponseBody = {
  applicationGroupConsume?: [ 
    {
      amount?: float(name='Amount', description='The amount consumed by the instance.', example='18.88'),
      creationTime?: string(name='CreationTime', description='The time when the instance was created.', example='2023-06-10T06:00Z'),
      currency?: string(name='Currency', description='The currency unit.', example='CNY'),
      instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-0jl781czrhqey0s5zpsj'),
      instanceName?: string(name='InstanceName', description='The name of the instance.', example='test-'),
      instanceType?: string(name='InstanceType', description='The instance type.', example='ALIYUN::ECS::INSTANCE'),
      optimization?: string(name='Optimization', description='Optimization suggestions.', example='1'),
      peakType?: string(name='PeakType', description='The peak type.', example='WHITE'),
      performance?: string(name='Performance', description='The performance of the data synchronization instance.', example='"{\\"mem\\":\\"6.82\\",\\"cpu\\":\\"0.55\\"}"'),
      status?: string(name='Status', description='The status of instance.', example='Running'),
    }
  ](name='ApplicationGroupConsume', description='The consume of application group.'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='10'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='""'),
  requestId?: string(name='RequestId', description='The request ID.', example='E897A1AB-4701-5B71-93AD-38FD703763A3'),
}

model DescribeApplicationGroupBillResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeApplicationGroupBillResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeApplicationGroupBill  DescribeApplicationGroupBillRequest
  * @return DescribeApplicationGroupBillResponse
 */
async function describeApplicationGroupBill(request: DescribeApplicationGroupBillRequest): DescribeApplicationGroupBillResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeApplicationGroupBill', 'POST', '/', 'json', false, 'json', request);
}

model DescribeRegionsRequest {
  acceptLanguage?: string(name='AcceptLanguage', description='The supported natural language. Valid values:

*   zh-CN: Chinese
*   en-US: English', example='zh-CN', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model DescribeRegionsResponseBody = {
  regions?: [ 
    {
      localName?: string(name='LocalName', description='The name of the region.', example='China (Shenzhen)'),
      regionEndpoint?: string(name='RegionEndpoint', description='The endpoint of the region.', example='oos.cn-shenzhen.aliyuncs.com'),
      regionId?: string(name='RegionId', description='The region ID.', example='cn-shenzhen'),
    }
  ](name='Regions', description='The details of the regions.'),
  requestId?: string(name='RequestId', description='The request ID.', example='469E79B1-90A3-4A57-B7C4-2FE0C8B5175E'),
}

model DescribeRegionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: DescribeRegionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of DescribeRegions  DescribeRegionsRequest
  * @return DescribeRegionsResponse
 */
async function describeRegions(request: DescribeRegionsRequest): DescribeRegionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'DescribeRegions', 'POST', '/', 'json', false, 'json', request);
}

model GenerateExecutionPolicyRequest {
  ramRole?: string(name='RamRole', description='The RAM role.', example='AliyunServiceRoleForOOSBandwidthScheduler', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  templateContent?: string(name='TemplateContent', description='The content of the template in the JSON or YAML format. This parameter is the same as the Content parameter that you can specify when you call the CreateTemplate operation. You can use this parameter to specify the tasks that you want to run. This way, you do not need to create a template before you start an execution. If you select an existing template, you do not need to specify this parameter.', example='{   "Description": "Example template, describe instances in some status",   "FormatVersion": "OOS-2019-06-01",   "Parameters": {},   "Tasks": [     {       "Name": "describeInstances",       "Action": "ACS::ExecuteAPI",       "Description": "desc-en",       "Properties": {         "Service": "ECS",         "API": "DescribeInstances",         "Parameters": {           "Status": "Running"         }       }     }   ] }', position='Query'),
  templateName?: string(name='TemplateName', description='The name of the template.', example='vmeixme', position='Query'),
  templateVersion?: string(name='TemplateVersion', description='The version of the template. The default value is the latest version of the template.', example='v2', position='Query'),
}

model GenerateExecutionPolicyResponseBody = {
  missingPolicy?: string(name='MissingPolicy', description='The policies that are missing.', example='[{\\"Action\\": [\\"ecs:DescribeInvocationResults\\", \\"ecs:DescribeInstances\\", \\"ecs:RunCommand\\", \\"ecs:DescribeInvocations\\"], \\"ServiceName\\": \\"ecs\\", \\"Resources\\": \\"*\\"}]'),
  policy?: string(name='Policy', description='The RAM policy.', example='{}'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
}

model GenerateExecutionPolicyResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateExecutionPolicyResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateExecutionPolicy  GenerateExecutionPolicyRequest
  * @return GenerateExecutionPolicyResponse
 */
async function generateExecutionPolicy(request: GenerateExecutionPolicyRequest): GenerateExecutionPolicyResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateExecutionPolicy', 'POST', '/', 'json', false, 'json', request);
}

model GenerateOpsItemRequest {
  clientToken?: string(name='ClientToken', description='The token that is used to ensure the idempotency.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  configurationId?: string(name='ConfigurationId', description='The configuration ID of the O\\&M item.', example='oic-ae4f******2c682e3', position='Query'),
  data: string(name='Data', description='The source system data.

This parameter is required.', example='/aliyun/ecs', position='Query'),
  dataSource?: string(name='DataSource', description='The data source system.', example='/aliyun/eventbridge/event', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GenerateOpsItemResponseBody = {
  opsItemIds?: [ string ](name='OpsItemIds', description='The O\\&M item list.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DA4F08D4-DA54-5407-84B9-108C71D75B17'),
}

model GenerateOpsItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GenerateOpsItemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GenerateOpsItem  GenerateOpsItemRequest
  * @return GenerateOpsItemResponse
 */
async function generateOpsItem(request: GenerateOpsItemRequest): GenerateOpsItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GenerateOpsItem', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationRequest {
  name: string(name='Name', description='The application name.

This parameter is required.', example='MyApplication', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model GetApplicationResponseBody = {
  application?: {
    alarmConfig?: {
      contactGroups?: [ string ](name='ContactGroups', description='The alert contact list.'),
      healthCheckUrl?: string(name='HealthCheckUrl', description='The health check URL of the application.', example='/api/health/'),
      templateIds?: [ string ](name='TemplateIds', description='The ID of the alert template.'),
    }(name='AlarmConfig', description='The configurations of application alerts.'),
    applicationSource?: string(name='ApplicationSource', description='The source of application.', example='{"Platform":"gitee","Owner":"aliyun-computenest","RepoName":"aliyun-computenest/java-springboot-demo","Name":"java-springboot-demo"}'),
    applicationType?: string(name='ApplicationType', description='The type of the application.

Valid values:

*   ComputeNest

    <!-- -->

    <!-- -->

    <!-- -->

*   Custom

    <!-- -->

    <!-- -->

    <!-- -->

*   DingTalk

    <!-- -->

    <!-- -->

    <!-- -->', example='DingTalk'),
    createDate?: string(name='CreateDate', description='The time when the application was created.', example='2021-09-07T09:17:46Z'),
    description?: string(name='Description', description='The description of the application.', example='Application'),
    name?: string(name='Name', description='The application name.', example='MyApplication'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m******'),
    serviceId?: string(name='ServiceId', description='The ID of the Compute Nest service that corresponds to the application template.', example='service-79538e30e44541b699d8'),
    tags?: map[string]any(name='Tags', description='The tags.', example='{"k1": "v1", "k2": "v2"}'),
    updateDate?: string(name='UpdateDate', description='The time when the application was updated.', example='2021-09-07T09:17:46Z'),
  }(name='Application', description='The information about the application.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='51004B8A-6D9A-5ACB-9158-6C6794496AD0'),
}

model GetApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetApplication  GetApplicationRequest
  * @return GetApplicationResponse
 */
async function getApplication(request: GetApplicationRequest): GetApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplication', 'POST', '/', 'json', false, 'json', request);
}

model GetApplicationGroupRequest {
  applicationName: string(name='ApplicationName', description='The name of the application.

This parameter is required.', example='MyApplication', position='Query'),
  name: string(name='Name', description='The name of the application group.

This parameter is required.', example='MyApplicationGroup', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model GetApplicationGroupResponseBody = {
  applicationGroup?: {
    applicationName?: string(name='ApplicationName', description='The name of the application.', example='MyApplication'),
    applicationSource?: string(name='ApplicationSource', description='The source of application.', example='{"Platform":"github","RepoName":"wenle/springboot-ecs-sourcecode-demo","Owner":"wenle","Branch":"main","CommitHash":"8559ff3ac7568fc7951ff63f841883ee3f06c6fe","CommitMessage":"Init computenest project"}'),
    cmsGroupId?: string(name='CmsGroupId', description='The ID of the application group in CloudMonitor.', example='12345678'),
    createDate?: string(name='CreateDate', description='The time when the application group was created.', example='2021-09-07T10:28:25Z'),
    deployOutputs?: string(name='DeployOutputs', description='The output of the deployment result.', example='{       "Outputs": [         {           "Description": "No description given",           "OutputKey": "InstanceIds"         }       ],       "StackId": "6ef4b860-f6e7-4145-8d22-f4a2a32363e1"     }   }'),
    deployParameters?: string(name='DeployParameters', description='The configuration information of the application group.', example='{       "TemplateURL": "https://ros-template.oss-cn-zhangjiakou.aliyuncs.com/App_Management_Existing_Vpc_Ecs_Instance.json",       "Parameters": {         "ZoneId": "cn-hangzhou-k",         "ProjectName": "test",         "SystemDiskSize": 40,         "InstanceChargeType": "PostPaid",         "SecurityGroupId": "sg-bp1a4374akk63jl8tddy",         "VSwitchId": "vsw-bp1fcvc3zn0jrag86rrlm",         "SystemDiskCategory": "cloud_essd",         "InstancePassword": "******",         "InternetChargeType": "PayByTraffic",         "InstanceCount": 1,         "InternetMaxBandwidthOut": 0,         "VpcId": "vpc-bp1i99boyas8i8m9t3skp",         "EcsImageId": "centos_8_5_x64_20G_alibase_20211228.vhd",         "DataDiskSize": 100,         "EcsInstanceType": "ecs.s6-c1m4.small",         "DataDiskCategory": "cloud_efficiency",         "EnvironmentCommandId": "c-hz028fc3g031gcg"       }'),
    deployRegionId?: string(name='DeployRegionId', description='The ID of the region in which you deploy the application group.', example='cn-hangzhou'),
    description?: string(name='Description', description='The description of the application group.', example='ApplicationGroup'),
    errorDetail?: string(name='ErrorDetail'),
    errorType?: string(name='ErrorType'),
    importTagKey?: string(name='ImportTagKey', description='The tag key.', example='k1'),
    importTagValue?: string(name='ImportTagValue', description='The tag value.', example='v1'),
    name?: string(name='Name', description='The name of the application group.', example='MyApplicationGroup'),
    operationMetadata?: string(name='OperationMetadata', description='The hosted O\\&M configurations.', example='{\\\\"PrometheusConfigMap\\\\":{\\\\"Template 1\\\\":{\\\\"EnablePrometheus\\\\":false}}}'),
    progress?: string(name='Progress', description='The creation progress of the application instance.', example='100'),
    status?: string(name='Status', description='The state of the application group.', example='Created'),
    statusReason?: string(name='StatusReason', description='The state information of the application group.', example='Stack CREATE completed successfully'),
    updateDate?: string(name='UpdateDate', description='The time when the application group was last modified.', example='2021-09-07T10:28:25Z'),
  }(name='ApplicationGroup', description='The information about the application group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='92EA60ED-544D-55E9-93D9-237BE9976C0D'),
}

model GetApplicationGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetApplicationGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetApplicationGroup  GetApplicationGroupRequest
  * @return GetApplicationGroupResponse
 */
async function getApplicationGroup(request: GetApplicationGroupRequest): GetApplicationGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetApplicationGroup', 'POST', '/', 'json', false, 'json', request);
}

model GetExecutionTemplateRequest {
  executionId: string(name='ExecutionId', description='The ID of the execution.

This parameter is required.', example='exec-046490ff88f242', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model GetExecutionTemplateResponseBody = {
  content?: string(name='Content', description='The content of the template.', example='"{\\n \\"FormatVersion\\": \\"OOS-2019-06-01\\",\\n \\"Parameters\\": {\\n \\"Status\\": {\\n \\"Type\\": \\"String\\",\\n \\"Description\\": \\"(Required) The ID of the ECS instance.\\"\\n }\\n },\\n \\"Tasks\\": [\\n {\\n \\"Name\\": \\"bar\\",\\n \\"Properties\\": {\\n \\"Parameters\\": {\\n \\"Status\\": \\"{{ Status }}\\"\\n },\\n \\"API\\": \\"DescribeInstances\\",\\n \\"Service\\": \\"Ecs\\"\\n },\\n \\"Action\\": \\"acs::ExecuteAPI\\",\\n \\"Outputs\\": {\\n \\"InstanceIds\\", {\\n \\"ValueSelector\\": \\".Instances.Instance[].InstanceId\\",\\n \\"Type\\": \\"List\\"\\n }\\n }\\n }\\n ],\\n \\"Outputs\\": {\\n \\"InstanceIds\\": {\\n \\"Value\\": \\" {{ bar.InstanceIds }} \\",\\n \\"Type\\": \\"List\\"\\n }\\n }\\n}\\n"'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='14A60-EBE7-47CA-9757-12C1D47A'),
  template?: {
    createdBy?: string(name='CreatedBy', description='The creator of the template.', example='root(13090000)'),
    createdDate?: string(name='CreatedDate', description='The time when the template was created.', example='2019-05-16T10:26:14Z'),
    description?: string(name='Description', description='The description of the template.', example='Get status of instances'),
    hash?: string(name='Hash', description='The SHA-256 value of the template content.', example='4bc7d7a21b3e003434b9c223f6e6d2578b5ebfeb5be28c1fcf8a8a1b11907bb4'),
    shareType?: string(name='ShareType', description='The share type of the template. The share type of a user-created template is **Private**.', example='Private'),
    tags?: map[string]any(name='Tags', description='The tag keys and values. The number of key-value pairs ranges from 1 to 20.', example='{"k1":"k2","k2":"v2"}'),
    templateFormat?: string(name='TemplateFormat', description='The format of the template. The system automatically determines whether the format is JSON or YAML.', example='JSON'),
    templateId?: string(name='TemplateId', description='The ID of the template.', example='t-94753d4d828d38'),
    templateName?: string(name='TemplateName', description='The name of the template.', example='MyTemplate'),
    templateVersion?: string(name='TemplateVersion', description='The version of the template. The name of the version consists of the letter v and a number. The number starts from 1.', example='v1'),
    updatedBy?: string(name='UpdatedBy', description='The user who last updated the template.', example='root(13090000)'),
    updatedDate?: string(name='UpdatedDate', description='The time when the template was last updated.', example='2019-05-16T10:26:14Z'),
  }(name='Template', description='The metadata of the template.'),
}

model GetExecutionTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetExecutionTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetExecutionTemplate  GetExecutionTemplateRequest
  * @return GetExecutionTemplateResponse
 */
async function getExecutionTemplate(request: GetExecutionTemplateRequest): GetExecutionTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetExecutionTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetInventorySchemaRequest {
  aggregator?: boolean(name='Aggregator', description='Specifies whether to return only properties that support the aggregate feature in the configuration list. Valid values:

*   true: only returns properties that support the aggregate feature in the configuration list.
*   false: returns all properties in the configuration list.', example='false', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 1 to 100. Default value: 50.', example='50', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='gAAAAABfh8MVLQI9AuKGACLgjbsXbWs-Mna47IDM6tr6wK7TZ1', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  typeName?: string(name='TypeName', description='The configuration list type name. Valid values:

*   ACS:InstanceInformation
*   ACS:Application
*   ACS:File
*   ACS:Network
*   ACS:WindowsRole
*   ACS:Service
*   ACS:WindowsUpdate
*   ACS:WindowsRegistry', example='ACS:Application', position='Query'),
}

model GetInventorySchemaResponseBody = {
  maxResults?: string(name='MaxResults', description='The number of entries per page.', example='1'),
  nextToken?: string(name='NextToken', description='The pagination token that was used in the next request to retrieve a new page of results.', example='gAAAAABfh8MVLQI9AuKGACLgjbsXbWs-Mna47IDM6tr6wK7TZ1'),
  requestId?: string(name='RequestId', description='The request ID.', example='89117642-7167-4F4D-B7F1-876582279E3E'),
  schemas?: [ 
    {
      attributes?: [ 
        {
          dataType?: string(name='DataType', description='The data type of the property.', example='STRING'),
          name?: string(name='Name', description='The name of the property.', example='ApplicationType'),
        }
      ](name='Attributes', description='The properties of the configuration list.'),
      typeName?: string(name='TypeName', description='The name of the configuration list.', example='ACS:Application'),
      version?: string(name='Version', description='The version of the configuration list.', example='1.0'),
    }
  ](name='Schemas', description='The detailed configurations of the configuration list.'),
}

model GetInventorySchemaResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetInventorySchemaResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetInventorySchema  GetInventorySchemaRequest
  * @return GetInventorySchemaResponse
 */
async function getInventorySchema(request: GetInventorySchemaRequest): GetInventorySchemaResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetInventorySchema', 'POST', '/', 'json', false, 'json', request);
}

model GetOpsItemRequest {
  opsItemId: string(name='OpsItemId', description='The O\\&M item ID.

This parameter is required.', example='oi-d52b08695e2b46ae8413', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model GetOpsItemResponseBody = {
  opsItem?: {
    attributes?: map[string]any(name='Attributes', description='The information about the attributes of the O\\&M item.'),
    category?: string(name='Category', description='The category of the O\\&M item.', example='Security'),
    createBy?: string(name='CreateBy', description='The user who created the O\\&M item.', example='root(130900000)'),
    createDate?: string(name='CreateDate', description='The time when the O\\&M item was created.', example='2023-04-10T06:15Z'),
    description?: string(name='Description', description='The description.', example='test-update'),
    lastModifiedBy?: string(name='LastModifiedBy', description='The user who last modified the O\\&M item.', example='modifiedBy'),
    opsItemId?: string(name='OpsItemId', description='The O\\&M item ID.', example='oi-d52b08695e2b46ae8413'),
    priority?: int32(name='Priority', description='The priority of the O\\&M item.', example='1'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aekzxkofnlxtn2i'),
    resources?: [ string ](name='Resources', description='The Alibaba Cloud Resource Names (ARNs) of the associated resources.'),
    severity?: string(name='Severity', description='The severity level of the O\\&M item.', example='Medium'),
    solutions?: [  map[string]any ](name='Solutions', description='The solutions to the O\\&M item.'),
    source?: string(name='Source', description='The source business of the O\\&M item.', example='/aliyun/appManager'),
    status?: string(name='Status', description='The status of the O\\&M item.', example='Open'),
    tags?: map[string]any(name='Tags', description='The tags attached to the O\\&M item.', example='{"K1":"V1"}'),
    title?: string(name='Title', description='The title of the O\\&M item.', example='test'),
    updateDate?: string(name='UpdateDate', description='The time when the O\\&M item was updated.', example='2023-04-10T06:15Z'),
  }(name='OpsItem', description='The information about the O\\&M item.'),
  requestId?: string(name='RequestId', description='The request ID.', example='8BED4C16-BD30-5E27-94D4-7EBCCECF70C1'),
}

model GetOpsItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetOpsItemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetOpsItem  GetOpsItemRequest
  * @return GetOpsItemResponse
 */
async function getOpsItem(request: GetOpsItemRequest): GetOpsItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetOpsItem', 'POST', '/', 'json', false, 'json', request);
}

model GetParameterRequest {
  name: string(name='Name', description='The name of the common parameter. The name can be up to 200 characters in length and can contain letters, digits, hyphens (-), and underscores (_).

This parameter is required.', example='MyParameter', position='Query'),
  parameterVersion?: int32(name='ParameterVersion', description='The version number of the common parameter. Valid values: 1 to 100.', example='1', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxsn4m*****', position='Query'),
}

model GetParameterResponseBody = {
  parameter?: {
    constraints?: string(name='Constraints', description='The constraints of the common parameter.', example='\\"{\\"\\"AllowedValues":["parameter"],"AllowedPattern":"parameter","MinLength":0,"MaxLength":20}\\"'),
    createdBy?: string(name='CreatedBy', description='The user who created the common parameter.', example='root(130900000)'),
    createdDate?: string(name='CreatedDate', description='The time when the common parameter was created.', example='2020-09-01T08:01:43Z'),
    description?: string(name='Description', description='The description of the common parameter.', example='parameter'),
    id?: string(name='Id', description='The ID of the common parameter.', example='p-4c4b401cab6747xxxxxx'),
    name?: string(name='Name', description='The name of the common parameter.', example='MyParameter'),
    parameterVersion?: int32(name='ParameterVersion', description='The version number of the common parameter.', example='1'),
    resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxsn4m*****'),
    shareType?: string(name='ShareType', description='The share type of the common parameter.', example='Private'),
    tags?: map[string]any(name='Tags', description='The tags added to the common parameter.', example='{"k1":"v1","k2":"v2"}'),
    type?: string(name='Type', description='The data type of the common parameter.', example='String'),
    updatedBy?: string(name='UpdatedBy', description='The user who updated the common parameter.', example='root(130900000)'),
    updatedDate?: string(name='UpdatedDate', description='The time when the common parameter was updated.', example='2020-09-01T08:01:43Z'),
    value?: string(name='Value', description='The value of the common parameter.', example='parameter'),
  }(name='Parameter', description='The information about the common parameter.'),
  requestId?: string(name='RequestId', description='The request ID.', example='BA326372-2A10-4C3B-BE3E-6439DB7557CC'),
}

model GetParameterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetParameterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetParameter  GetParameterRequest
  * @return GetParameterResponse
 */
async function getParameter(request: GetParameterRequest): GetParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetParameter', 'POST', '/', 'json', false, 'json', request);
}

model GetParametersRequest {
  names: string(name='Names', description='The names of the common parameters.

This parameter is required.', example='["parameter1","parameter2"]', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model GetParametersResponseBody = {
  invalidParameters?: [ string ](name='InvalidParameters', description='Invalid parameters.'),
  parameters?: [ 
    {
      constraints?: string(name='Constraints', description='The constraints of the common parameter.', example='{\\"MaxLength\\": 2}'),
      createdBy?: string(name='CreatedBy', description='The user who created the common parameter.', example='root(130900000)'),
      createdDate?: string(name='CreatedDate', description='The time when the common parameter was created.', example='2020-10-22T03:30:45Z'),
      description?: string(name='Description', description='The description of the common parameter.', example='parameter'),
      id?: string(name='Id', description='The ID of the common parameter.', example='p-7cdc0000000000000000'),
      name?: string(name='Name', description='The name of the common parameter.', example='MyParameter'),
      parameterVersion?: int32(name='ParameterVersion', description='The version number of the common parameter.', example='1'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
      shareType?: string(name='ShareType', description='The share type of the common parameter.', example='Private'),
      tags?: map[string]any(name='Tags', description='The tags.', example='{"k1": "v1", "k2": "v2"}'),
      type?: string(name='Type', description='The type of the parameter.', example='StringList'),
      updatedBy?: string(name='UpdatedBy', description='The user who updated the common parameter.', example='root(130900000)'),
      updatedDate?: string(name='UpdatedDate', description='The time when the parameter was updated.', example='2020-10-22T03:30:45Z'),
      value?: string(name='Value', description='The value of the common parameter.', example='parameter,parameter1'),
    }
  ](name='Parameters', description='The information about the common parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='2597E94B-5346-42D1-BB58-D3333EDD0975'),
}

model GetParametersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetParametersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetParameters  GetParametersRequest
  * @return GetParametersResponse
 */
async function getParameters(request: GetParametersRequest): GetParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetParameters', 'POST', '/', 'json', false, 'json', request);
}

model GetParametersByPathRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzA', position='Query'),
  path: string(name='Path', description='The path of the parameter. For example, if the name of a parameter is /path/path1/Myparameter, the path of the parameter is /path/path1/.

This parameter is required.', example='/parameter', position='Query'),
  recursive?: boolean(name='Recursive', description='Specifies whether to recursively query encryption parameters from all levels of directories in the specified path. Valid values: true and false. For example, if you want to query the /secretParameter/mySecretParameter and /secretParameter/secretParameter 1/mySecretParameter parameters, the valid values specify the parameters to be returned.

*   true: returns both of the /secretParameter/mySecretParameter and /secretParameter/secretParameter1/mySecretParameter parameters.
*   false: returns only the /secretParameter/mySecretParameter parameter.', example='false', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model GetParametersByPathResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='10'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='gAAAAABfTgv5ewUWmNdJ3g7JVLvX70sPH90GZOVGC'),
  parameters?: [ 
    {
      constraints?: string(name='Constraints', description='The constraints of the common parameter.', example='{\\"MaxLength\\": 2}'),
      createdBy?: string(name='CreatedBy', description='The user who created the common parameter.', example='root(130900000)'),
      createdDate?: string(name='CreatedDate', description='The time when the common parameter was created.', example='2020-10-21T04:03:12Z'),
      description?: string(name='Description', description='The description of the common parameter.', example='parameter'),
      id?: string(name='Id', description='The ID of the common parameter.', example='p-7cdc0000000000000000'),
      name?: string(name='Name', description='The name of the common parameter.', example='myParameter'),
      parameterVersion?: int32(name='ParameterVersion', description='The version number of the common parameter.', example='1'),
      shareType?: string(name='ShareType', description='The share type of the common parameter.', example='Private'),
      tags?: map[string]any(name='Tags', description='The tags added to the common parameters.', example='{"k1": "v1", "k2": "v2"}'),
      type?: string(name='Type', description='The type of the common parameter.', example='StringList'),
      updatedBy?: string(name='UpdatedBy', description='The user who updated the common parameter.', example='root(130900000)'),
      updatedDate?: string(name='UpdatedDate', description='The time when the common parameter was last updated.', example='2020-10-21T04:03:12Z'),
      value?: string(name='Value', description='The value of the common parameter.', example='"parameter1,parameter2"'),
    }
  ](name='Parameters', description='The information about the common parameters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='25156E99-7437-4590-AA58-2ACA17DE405C'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='1'),
}

model GetParametersByPathResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetParametersByPathResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetParametersByPath  GetParametersByPathRequest
  * @return GetParametersByPathResponse
 */
async function getParametersByPath(request: GetParametersByPathRequest): GetParametersByPathResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetParametersByPath', 'POST', '/', 'json', false, 'json', request);
}

model GetPatchBaselineRequest {
  name: string(name='Name', description='The name of the patch baseline.

This parameter is required.', example='MyPatchBaseline', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the patch baseline whose details you want to query resides.', example='cn-hangzhou', position='Query'),
}

model GetPatchBaselineResponseBody = {
  patchBaseline?: {
    approvalRules?: string(name='ApprovalRules', description='The rules of scanning and installing patches for the specified operating system.', example='{"PatchRules":[{"PatchFilterGroup":[{"Key":"PatchSet","Values":["OS"]},{"Key":"ProductFamily","Values":["Windows"]},{"Key":"Product","Values":["Windows 10","Windows 7"]},{"Key":"Classification","Values":["Security Updates","Updates","Update Rollups","Critical Updates"]},{"Key":"Severity","Values":["Critical","Important","Moderate"]}],"ApproveAfterDays":7,"ApproveUntilDate":"","EnableNonSecurity":true,"ComplianceLevel":"Medium"}]}'),
    approvedPatches?: [ string ](name='ApprovedPatches', description='The approved patches.'),
    approvedPatchesEnableNonSecurity?: boolean(name='ApprovedPatchesEnableNonSecurity', description='Indicates whether the approved patch involves updates other than security-related updates.', example='true'),
    createdBy?: string(name='CreatedBy', description='The creator of the patch baseline.', example='root(130900000)'),
    createdDate?: string(name='CreatedDate', description='The time when the patch baseline was created.', example='2021-09-07T03:42:56Z'),
    description?: string(name='Description', description='The description of the patch baseline.', example='UpdatePatchBaseline'),
    id?: string(name='Id', description='The ID of the patch baseline.', example='pb-445340b5c6504a85a300'),
    isDefault?: boolean(name='IsDefault', description='Indicates whether the patch baseline is set as the default patch baseline.', example='false'),
    name?: string(name='Name', description='The name of the patch baseline.', example='MypatchBaseline'),
    operationSystem?: string(name='OperationSystem', description='The type of the operating system.', example='Windows'),
    rejectedPatches?: [ string ](name='RejectedPatches', description='The rejected patches.'),
    rejectedPatchesAction?: string(name='RejectedPatchesAction', description='The action of the rejected patch.', example='ALLOW_AS_DEPENDENCY'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmzmhzoaad5oq'),
    shareType?: string(name='ShareType', description='The share type of the patch baseline.', example='Private'),
    sources?: [ string ](name='Sources', description='The patch source configurations.'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey', description='The key of the tag.', example='key'),
        tagValue?: string(name='TagValue', description='The value of the tag.', example='value'),
      }
    ](name='Tags', description='The tags.'),
    updatedBy?: string(name='UpdatedBy', description='The user who last modified the patch baseline.', example='root(130900000)'),
    updatedDate?: string(name='UpdatedDate', description='The time when the patch baseline was last modified.', example='2021-09-08T07:26:38Z'),
  }(name='PatchBaseline', description='The details of the patch baseline.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='2C630E64-7273-57AC-A598-1B2B8B35CEA5'),
}

model GetPatchBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetPatchBaselineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetPatchBaseline  GetPatchBaselineRequest
  * @return GetPatchBaselineResponse
 */
async function getPatchBaseline(request: GetPatchBaselineRequest): GetPatchBaselineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetPatchBaseline', 'POST', '/', 'json', false, 'json', request);
}

model GetSecretParameterRequest {
  name: string(name='Name', description='The name of the parameter. The name must be 1 to 180 characters in length, and can contain letters, digits, hyphens (-), and underscores (_). It cannot start with ALIYUN, ACS, ALIBABA, ALICLOUD, or OOS.

This parameter is required.', example='MySecretParameter', position='Query'),
  parameterVersion?: int32(name='ParameterVersion', description='The version number of the common parameter. Valid values: 1 to 100.', example='1', minimum=1, maximum=200, position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  withDecryption?: boolean(name='WithDecryption', description='Specifies whether to decrypt the parameter value. The decrypted parameter value is returned only if this parameter is set to true. Otherwise, null is returned.', example='false', position='Query'),
}

model GetSecretParameterResponseBody = {
  parameter?: {
    constraints?: string(name='Constraints', description='The constraints of the encryption parameter.', example='\\"{\\"\\"AllowedValues":["secretparameter"],"AllowedPattern":".*","MinLength":0,"MaxLength":20}\\"'),
    createdBy?: string(name='CreatedBy', description='The user who created the encryption parameter.', example='root(130900000)'),
    createdDate?: string(name='CreatedDate', description='The time when the encryption parameter was created.', example='2020-09-01T09:28:47Z'),
    DKMSInstanceId?: string(name='DKMSInstanceId', description='The instance ID of the KMS instance.', example='kst-hzz****'),
    description?: string(name='Description', description='The description of the encryption parameter.', example='SecretParameter'),
    id?: string(name='Id', description='The ID of the encryption parameter.', example='p-14ed150fdcd048xxxxxx'),
    keyId?: string(name='KeyId', description='The ID of the key of Key Management Service (KMS) that is used for encryption.', example='80e9409f-78fa-42ab-84bd-83f40c******'),
    name?: string(name='Name', description='The name of the encryption parameter.', example='MySecretParameter'),
    parameterVersion?: int32(name='ParameterVersion', description='The version number of the encryption parameter.', example='1'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
    shareType?: string(name='ShareType', description='The share type of the encryption parameter.', example='Private'),
    tags?: map[string]any(name='Tags', description='The tags of the parameter.', example='{"k1": "v1", "k2": "v2"}'),
    type?: string(name='Type', description='The type of the parameter.', example='Secret'),
    updatedBy?: string(name='UpdatedBy', description='The user who updated the encryption parameter.', example='root(130900000)'),
    updatedDate?: string(name='UpdatedDate', description='The time when the encryption parameter was updated.', example='2020-09-01T09:35:17Z'),
    value?: string(name='Value', description='The value of the encryption parameter.', example='SecretParameter'),
  }(name='Parameter', description='The information about the encryption parameter.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='7F14FB7C-C9BE-44AE-92ED-21ACC02FBFD2'),
}

model GetSecretParameterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSecretParameterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSecretParameter  GetSecretParameterRequest
  * @return GetSecretParameterResponse
 */
async function getSecretParameter(request: GetSecretParameterRequest): GetSecretParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSecretParameter', 'POST', '/', 'json', false, 'json', request);
}

model GetSecretParametersRequest {
  names: string(name='Names', description='The name of the encryption parameter. Multiple encryption parameters can form a JSON array in the format of ["xxxxxxxxx", "yyyyyyyyy", … "zzzzzzzzz"]. Each JSON array can contain a maximum of 10 encryption parameters. Multiple encryption parameters in the array are separated by commas (,).

This parameter is required.', example='["secretParameter","secretParameter1"]', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  withDecryption?: boolean(name='WithDecryption', description='Specifies whether to decrypt the parameter value. Default value: false. Valid values:

*   true
*   false', example='false', position='Query'),
}

model GetSecretParametersResponseBody = {
  invalidParameters?: [ string ](name='InvalidParameters', description='Invalid encryption parameter.'),
  parameters?: [ 
    {
      constraints?: string(name='Constraints', description='The constraints of the encryption parameter.', example='{\\"AllowedValues\\": [\\"test\\"]}'),
      createdBy?: string(name='CreatedBy', description='The user who created the encryption parameter.', example='root(130900000)'),
      createdDate?: string(name='CreatedDate', description='The time when the encryption parameter was created.', example='2020-10-22T03:11:13Z'),
      description?: string(name='Description', description='The description of the encryption parameter.', example='secretParameter'),
      id?: string(name='Id', description='The ID of the encryption parameter.', example='p-7cdc0000000000000000'),
      keyId?: string(name='KeyId', description='The ID of the key.', example='ssh-bp67acfmxazb4p****'),
      name?: string(name='Name', description='The name of the encryption parameter.', example='MySecretParameter'),
      parameterVersion?: int32(name='ParameterVersion', description='The version number of the encryption parameter.', example='1'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
      shareType?: string(name='ShareType', description='The share type of the encryption parameter.', example='Private'),
      tags?: map[string]any(name='Tags', description='The tags.', example='{"k1": "v1", "k2": "v2"}'),
      type?: string(name='Type', description='The data type of the encryption parameter.', example='Secret'),
      updatedBy?: string(name='UpdatedBy', description='The user who updated the encryption parameter.', example='root(130900000)'),
      updatedDate?: string(name='UpdatedDate', description='The time when the encryption parameter was updated.', example='2020-10-22T03:11:13Z'),
      value?: string(name='Value', description='The value of the encryption parameter.', example='secretParameter,secretParameter1'),
    }
  ](name='Parameters', description='The information about the encryption parameter.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5320F1D-92D9-44BB-A416-5FC525ED6D57'),
}

model GetSecretParametersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSecretParametersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSecretParameters  GetSecretParametersRequest
  * @return GetSecretParametersResponse
 */
async function getSecretParameters(request: GetSecretParametersRequest): GetSecretParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSecretParameters', 'POST', '/', 'json', false, 'json', request);
}

model GetSecretParametersByPathRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 1 to 10. Default value: 10.', example='10', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzA', position='Query'),
  path: string(name='Path', description='The path of the encryption parameter. The path must be 1 to 200 characters in length. For example, if the name of an encryption parameter is /secretParameter/mySecretParameter, the path of the encryption parameter is /secretParameter.

This parameter is required.', example='/secretParameter', position='Query'),
  recursive?: boolean(name='Recursive', description='Specifies whether to recursively query encryption parameters from all levels of directories in the specified path. Valid values: true and false. For example, if you want to query the /secretParameter/mySecretParameter and /secretParameter/secretParameter 1/mySecretParameter parameters, the valid values specify the parameters to be returned.

*   true: returns both of the /secretParameter/mySecretParameter and /secretParameter/secretParameter1/mySecretParameter parameters.
*   false: returns only the /secretParameter/mySecretParameter parameter.', example='false', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  withDecryption?: boolean(name='WithDecryption', description='Specifies whether to decrypt the parameter value. Default value: false. Valid values:

*   true
*   false', example='true', position='Query'),
}

model GetSecretParametersByPathResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='10'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='gAAAAABfTgv5ewUWmNdJ3g7JVLvX70sPH90GZOVGC'),
  parameters?: [ 
    {
      constraints?: string(name='Constraints', description='The constraints of the encryption parameter.', example='{\\"AllowedPattern\\": \\"^[a-g]*$\\"}'),
      createdBy?: string(name='CreatedBy', description='The user who created the encryption parameter.', example='root(130900000)'),
      createdDate?: string(name='CreatedDate', description='The time when the encryption parameter was updated.', example='2020-10-21T06:22:48Z'),
      description?: string(name='Description', description='The description of the encryption parameter.', example='secretParameter'),
      id?: string(name='Id', description='The ID of the encryption parameter.', example='p-7cdc0000000000000000'),
      keyId?: string(name='KeyId', description='The ID of the key.', example='090xxbex-xexx-xxxx-axfc-ddxxcxxxxcex'),
      name?: string(name='Name', description='The name of the encryption parameter.', example='mySecretParameter'),
      parameterVersion?: int32(name='ParameterVersion', description='The version number of the encryption parameter.', example='1'),
      shareType?: string(name='ShareType', description='The share type of the encryption parameter.', example='Private'),
      type?: string(name='Type', description='The data type of the encryption parameter.', example='Secret'),
      updatedBy?: string(name='UpdatedBy', description='The user who updated the encryption parameter.', example='root(130900000)'),
      updatedDate?: string(name='UpdatedDate', description='The time when the encryption parameter was updated.', example='2020-10-21T06:22:48Z'),
      value?: string(name='Value', description='The value of the encryption parameter.', example='secretParameter'),
    }
  ](name='Parameters', description='The information about the encryption parameters.'),
  requestId?: string(name='RequestId', description='The request ID.', example='25156E99-7437-4590-AA58-2ACA17DE405C'),
  totalCount?: int32(name='TotalCount', description='The total number of returned entries.', example='10'),
}

model GetSecretParametersByPathResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetSecretParametersByPathResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetSecretParametersByPath  GetSecretParametersByPathRequest
  * @return GetSecretParametersByPathResponse
 */
async function getSecretParametersByPath(request: GetSecretParametersByPathRequest): GetSecretParametersByPathResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetSecretParametersByPath', 'POST', '/', 'json', false, 'json', request);
}

model GetServiceSettingsRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model GetServiceSettingsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='9F755DC9-C0CF-4598-B2E3-2CC763F18CB2'),
  serviceSettings?: [ 
    {
      deliveryOssBucketName?: string(name='DeliveryOssBucketName', description='The name of OSS bucket to deliver.', example='OssBucketName'),
      deliveryOssEnabled?: boolean(name='DeliveryOssEnabled', description='Whether to enable OSS delivery.', example='false'),
      deliveryOssKeyPrefix?: string(name='DeliveryOssKeyPrefix', description='The key prefix of OSS to deliver.', example='oos/execution'),
      deliverySlsEnabled?: boolean(name='DeliverySlsEnabled', description='Whether to enable SLS delivery.', example='false'),
      deliverySlsProjectName?: string(name='DeliverySlsProjectName', description='The name of SLS project to deliver.', example='SlsProjectName'),
      rdcEnterpriseId?: string(name='RdcEnterpriseId', description='The id of RDC Enterprise.', example='RdcEnterpriseId'),
    }
  ](name='ServiceSettings', description='The information of service settings.'),
}

model GetServiceSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetServiceSettingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetServiceSettings  GetServiceSettingsRequest
  * @return GetServiceSettingsResponse
 */
async function getServiceSettings(request: GetServiceSettingsRequest): GetServiceSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetServiceSettings', 'GET', '/', 'json', false, 'json', request);
}

model GetTemplateRequest {
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  templateName: string(name='TemplateName', description='The name of the template. The name can be 1 to 200 characters in length and can contain letters, digits, hyphens (-), and underscores (_). The name cannot start with ALIYUN, ACS, ALIBABA, or ALICLOUD.

This parameter is required.', example='MyTemplate', position='Query'),
  templateVersion?: string(name='TemplateVersion', description='The version of the template. The default value is the latest version of the template.', example='v1', position='Query'),
}

model GetTemplateResponseBody = {
  content?: string(name='Content', description='The content of the template.', example='"FormatVersion: OOS-2019-06-01\\nDescription:\\n  en:  Creates an ECS image\\n  zh-cn: 创建一个ECS镜像\\n  name-en: Create Image\\n  name-zh-cn: 创建镜像\\n  categories:\\n    - image_manage\\n    - application_manage\\nParameters:\\n  regionId:\\n    Type: String\\n    Label:\\n      en: RegionId\\n      zh-cn: 地域ID\\n    AssociationProperty: RegionId\\n    Default: \\"{{ ACS::RegionId }}\\"\\n  instanceId:\\n    Label:\\n      en: InstanceId\\n      zh-cn: ECS实例ID\\n    Type: String\\n    AssociationProperty: ALIYUN::ECS::Instance::InstanceId\\n    AssociationPropertyMetadata:\\n      RegionId: regionId\\n  imageName:\\n    Label:\\n      en: ImageName\\n      zh-cn: 新镜像的名称\\n    Type: String\\n    Description:\\n      en: <p class=\\"p\\">Note:</p> <ul class=\\"ul\\"> <li class=\\"li\\">Length is 2~128 English or Chinese characters</li> <li class=\\"li\\"><font color=\\"red\\">must start with big or small letters or Chinese, not http:// and https://. </font></li> <li class=\\"li\\">Can contain numbers, colons (:), underscores (_), or dashes (-). </li> </ul>\\n      zh-cn: <p class=\\"p\\">注意：</p> <ul class=\\"ul\\"> <li class=\\"li\\">长度为2~128个英文或中文字符</li> <li class=\\"li\\"><font color=\\"red\\">必须以大小字母或中文开头，不能以http://和https://开头。</font></li> <li class=\\"li\\">可以包含数字、半角冒号（:）、下划线（_）或者短划线（-）。</li> </ul>\\n  tags:\\n    Label:\\n      en: Tags\\n      zh-cn: 镜像标签\\n    Type: Json\\n    AssociationProperty: Tags\\n    AssociationPropertyMetadata:\\n      ShowSystem: false\\n    Default: []\\n  OOSAssumeRole:\\n    Label:\\n      en: OOSAssumeRole\\n      zh-cn: OOS扮演的RAM角色\\n    Type: String\\n    Default: OOSServiceRole\\nRamRole: \\"{{ OOSAssumeRole }}\\"\\nTasks:\\n- Name: createImage\\n  Action: ACS::ECS::CreateImage\\n  Description:\\n    en: Create new image with the specified image name and instance ID\\n    zh-cn: 通过指定实例ID和镜像名称创建新的镜像\\n  Properties:\\n    regionId: \\"{{ regionId }}\\"\\n    imageName: \\"{{ imageName }}__on_{{ ACS::ExecutionId }}_at_{{ Acs::CurrentDate }}\\"\\n    instanceId: \\"{{ instanceId }}\\"\\n    tags: \\"{{tags}}\\"\\n  Outputs:\\n    imageId:\\n      ValueSelector: imageId\\n      Type: String\\nOutputs:\\n  imageId:\\n    Type: String\\n    Value: \\"{{ createImage.imageId }}\\"\\nMetadata:\\n  ALIYUN::OOS::Interface:\\n    ParameterGroups:\\n      - Parameters:\\n          - regionId\\n          - instanceId\\n        Label:\\n          default:\\n            zh-cn: 选择实例\\n            en: Select Ecs Instances\\n      - Parameters:\\n          - imageName\\n          - tags\\n        Label:\\n          default:\\n            zh-cn: 镜像设置\\n            en: Image Configure\\n      - Parameters:\\n          - OOSAssumeRole\\n        Label:\\n          default:\\n            zh-cn: 高级选项\\n            en: Control Options"'),
  requestId?: string(name='RequestId', description='The request ID.', example='5BBE2663-A18E-5261-9BBB-F4832F5294D9'),
  template?: {
    createdBy?: string(name='CreatedBy', description='The creator of the template.', example='ACS'),
    createdDate?: string(name='CreatedDate', description='The time when the template was created.', example='2019-05-16T10:26:14Z'),
    description?: string(name='Description', description='The description of the template.', example='"{\\"en\\": \\"Creates an ECS image\\", \\"zh-cn\\": \\"创建一个ECS镜像\\", \\"name-en\\": \\"Create Image\\", \\"name-zh-cn\\": \\"创建镜像\\", \\"categories\\": [\\"image_manage\\", \\"application_manage\\"]}"'),
    hasTrigger?: boolean(name='HasTrigger', description='Indicates whether the template was configured with a trigger.', example='false'),
    hash?: string(name='Hash', description='The SHA-256 value of the template content.', example='40fb5e3e08ef6c8a499ff7cd8441194f518028ad08338a84cb70c023a64576f1'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
    shareType?: string(name='ShareType', description='The share type of the template. The share type of a user-created template is **Private**.', example='Public'),
    tags?: map[string]any(name='Tags', description='The tag keys and values. The number of key-value pairs ranges from 1 to 20.', example='{"k1":"k2","k2":"v2"}'),
    templateFormat?: string(name='TemplateFormat', description='The format of the template. The system automatically determines whether the format is JSON or YAML.', example='YAML'),
    templateId?: string(name='TemplateId', description='The ID of the template.', example='t-4bdb1745c171401883a2'),
    templateName?: string(name='TemplateName', description='The name of the template.', example='ACS-ECS-CreateImage'),
    templateType?: string(name='TemplateType', description='The type of the template.', example='Automation'),
    templateVersion?: string(name='TemplateVersion', description='The version of the template. The name of the version consists of the letter v and a number. The number starts from 1.', example='v15'),
    updatedBy?: string(name='UpdatedBy', description='The user who last updated the template.', example='ACS'),
    updatedDate?: string(name='UpdatedDate', description='The time when the template was last updated.', example='2022-04-26T08:37:07Z'),
    versionName?: string(name='VersionName', description='The name of the version of the template.', example='version15'),
  }(name='Template', description='The metadata of the template.'),
}

model GetTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTemplate  GetTemplateRequest
  * @return GetTemplateResponse
 */
async function getTemplate(request: GetTemplateRequest): GetTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplate', 'POST', '/', 'json', false, 'json', request);
}

model GetTemplateParameterConstraintsRequest {
  parameters?: string(name='Parameters', description='The information about the parameters.', example='{\\"endDate\\": \\"2022-04-13T03:31:20Z\\", \\"Status\\": \\"Stopped\\"}', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  templateContent?: string(name='TemplateContent', description='The content of the template in the JSON or YAML format. This parameter is the same as the Content parameter that you can specify when you call the CreateTemplate operation. You can use this parameter to specify the tasks that you want to run. This way, you do not need to create a template before you start an execution. If you select an existing template, you do not need to specify this parameter.', example='{
	"Description": "Example template, describe instances in some status",
	"FormatVersion": "OOS-2019-06-01",
	"Parameters": {},
	"Tasks": [{
		"Name": "describeInstances",
		"Action": "ACS::ExecuteAPI",
		"Description": "desc-en",
		"Properties": {
			"Service": "ECS",
			"API": "DescribeInstances",
			"Parameters": {
				"Status": "Running"
			}
		}
	}]
}', position='Query'),
  templateName?: string(name='TemplateName', description='The name of the template.', example='MyTemplate', position='Query'),
  templateURL?: string(name='TemplateURL', description='The URL that is used to store the content of the Operation Orchestration Service (OOS) template in the Alibaba Cloud Object Storage Service (OSS). Only the public-read URL is supported. You can use this parameter to specify the tasks that you want to run. This way, you do not need to create a template before you start an execution. If you select an existing template, you do not need to specify this parameter.', example='http://oos-template.cn-hangzhou.oss.aliyun-inc.com/oos-test-template.json', position='Query'),
  templateVersion?: string(name='TemplateVersion', description='The version of the template. The default value is the latest version of the template.', example='v1', position='Query'),
}

model GetTemplateParameterConstraintsResponseBody = {
  parameterConstraints?: map[string]any(name='ParameterConstraints', description='The constraints of the parameters.', example='[
    {
      "Type": "String",
      "AllowedValues": [
        "ecs.n1.tiny",
        "ecs.r8a.4xlarge",
        "ecs.n2.xlarge",
        "ecs.c7.2xlarge",
        "ecs.c8i.4xlarge",
        "ecs.g8i.48xlarge",
        "ecs.c8a.4xlarge",
        "ecs.i2.4xlarge",
        "ecs.r8y.2xlarge"
      ],
      "AssociationParameterNames": [
        "RegionId",
        "zoneId"
      ],
      "ParameterKey": "instanceType"
    },
    {
      "Type": "String",
      "AllowedValues": [],
      "AssociationParameterNames": [
        "RegionId",
        "zoneId",
        "InstanceType"
      ],
      "ParameterKey": "systemDiskCategory"
    }
  ]'),
  requestId?: string(name='RequestId', description='The request ID.', example='CBEC8072-BEC2-478E-8EAE-E723BA79CF19'),
}

model GetTemplateParameterConstraintsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: GetTemplateParameterConstraintsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of GetTemplateParameterConstraints  GetTemplateParameterConstraintsRequest
  * @return GetTemplateParameterConstraintsResponse
 */
async function getTemplateParameterConstraints(request: GetTemplateParameterConstraintsRequest): GetTemplateParameterConstraintsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'GetTemplateParameterConstraints', 'POST', '/', 'json', false, 'json', request);
}

model ListActionsRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: 20 to 100. Default value: 50.', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='-', position='Query'),
  OOSActionName?: string(name='OOSActionName', description='The name of the action. All actions whose names contain the specified action name are returned.', example='MyTemplate', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model ListActionsResponseBody = {
  actions?: [ 
    {
      actionType?: string(name='ActionType', description='The type of the action.

1.  Atomic actions

    *   Atomic.API
    *   Atomic.Trigger
    *   Atomic.Control
    *   Atomic.Embedded

2.  Cloud product actions

    *   Product.ECS
    *   Product.RDS
    *   Product.VPC
    *   Product.FC
    *   ...', example='ACS::Template'),
      createdDate?: string(name='CreatedDate', description='The time when the action was created.', example='2019-05-16T10:26:14Z'),
      description?: string(name='Description', description='The description of the action.', example='ReplaceSystemDisk'),
      OOSActionName?: string(name='OOSActionName', description='The name of the action.', example='ACS::ECS::ReplaceSystemDisk'),
      popularity?: int32(name='Popularity', description='The number of times that the action is used.', example='5'),
      properties?: string(name='Properties', description='The parameters of the action.', example='{ "ImageId": { "Description": "The mirror ID you will use when resetting the system", "Type": "String" }, "InstanceId": { "Description": "the instance id that you will handle .", "Type": "String" } }'),
      templateVersion?: string(name='TemplateVersion', description='The version of the template that corresponds to the action.

>  For atomic actions, this parameter is not returned.', example='v1'),
    }
  ](name='Actions', description='The details of the actions.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='xxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F9154C02-F847-4563-BB6A-6DD01A4F0'),
}

model ListActionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListActionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListActions  ListActionsRequest
  * @return ListActionsResponse
 */
async function listActions(request: ListActionsRequest): ListActionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListActions', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationGroupsRequest {
  applicationName?: string(name='ApplicationName', description='The name of the application.', example='MyApplication', position='Query'),
  deployRegionId?: string(name='DeployRegionId', description='The ID of the region in which the related resources reside.', example='cn-hangzhou', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.', example='10', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='-', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the cloud resource.', example='i-2vcj9raxrhxb48zz3whw', position='Query'),
  resourceProduct?: string(name='ResourceProduct', description='The code of the product to which the cloud resource belongs.', example='ecs', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the cloud resource.', example='instance', position='Query'),
}

model ListApplicationGroupsResponseBody = {
  applicationGroups?: [ 
    {
      applicationName?: string(name='ApplicationName', description='The name of the application.', example='MyApplication'),
      cmsGroupId?: string(name='CmsGroupId', description='The ID of the application group in CloudMonitor.', example='12345678'),
      createDate?: string(name='CreateDate', description='The time when the application group was created.', example='2021-09-07T10:28:25Z'),
      deployParameters?: string(name='DeployParameters', description='The configuration information of the application group.', example='{   "TemplateURL": "https://ros-template.oss-cn-zhangjiakou.aliyuncs.com/App_Management_Existing_Vpc_Ecs_Instance.json",   "Parameters": {     "ZoneId": "cn-hangzhou-k",     "ProjectName": "test",     "SystemDiskSize": 40,     "InstanceChargeType": "PostPaid",     "SecurityGroupId": "sg-bp1a4374akk63jl8tddy",     "VSwitchId": "vsw-bp1fcvc3zn0jrag86rrlm",     "SystemDiskCategory": "cloud_essd",     "InstancePassword": "******",     "InternetChargeType": "PayByTraffic",     "InstanceCount": 1,     "InternetMaxBandwidthOut": 0,     "VpcId": "vpc-bp1i99boyas8i8m9t3skp",     "EcsImageId": "centos_8_5_x64_20G_alibase_20211228.vhd",     "DataDiskSize": 100,     "EcsInstanceType": "ecs.s6-c1m4.small",     "DataDiskCategory": "cloud_efficiency",     "EnvironmentCommandId": "c-hz028fc3g031gcg"   },   "RegionId": "cn-hangzhou",   "StackName": "stack-1645688523068-3no_AKhOJ",   "DisableRollback": true }'),
      deployRegionId?: string(name='DeployRegionId', description='The ID of the region in which the related resources reside.', example='cn-hangzhou'),
      description?: string(name='Description', description='The description of the application group.', example='ApplicationGroup'),
      errorDetail?: string(name='ErrorDetail'),
      errorType?: string(name='ErrorType'),
      importTagKey?: string(name='ImportTagKey', description='The tag key.', example='k1'),
      importTagValue?: string(name='ImportTagValue', description='The tag value.', example='v1'),
      name?: string(name='Name', description='The name of the application group.', example='UpdateMyApplicationGroup'),
      status?: string(name='Status', description='The state of the application group.', example='Created'),
      statusReason?: string(name='StatusReason', description='The state information of the application group.', example='ApplicationGroup is Created.'),
      updateDate?: string(name='UpdateDate', description='The time when the application group was updated.', example='2021-09-08T03:01:53Z'),
    }
  ](name='ApplicationGroups', description='The details of the application group.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.', example='10'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='-'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='69D97BF2-5DF2-544C-A650-36A474E17BC3'),
}

model ListApplicationGroupsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationGroupsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApplicationGroups  ListApplicationGroupsRequest
  * @return ListApplicationGroupsResponse
 */
async function listApplicationGroups(request: ListApplicationGroupsRequest): ListApplicationGroupsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplicationGroups', 'POST', '/', 'json', false, 'json', request);
}

model ListApplicationsRequest {
  applicationType?: string(name='ApplicationType', description='The type of the application.

Valid values:

*   ComputeNest

    <!-- -->

    <!-- -->

    <!-- -->

*   Custom

    <!-- -->

    <!-- -->

    <!-- -->

*   DingTalk

    <!-- -->

    <!-- -->

    <!-- -->', example='DingTalk', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: 10 to 100. Default value: 50.', example='10', position='Query'),
  name?: string(name='Name', description='The name of the application.', example='"MyApplications"', position='Query'),
  names?: string(name='Names', description='The names of the applications.', example='["MyApplication"]', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='-', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags.', example='{"k1": "v1","k2": "v2"}', shrink='json', position='Query'),
}

model ListApplicationsResponseBody = {
  applications?: [ 
    {
      applicationType?: string(name='ApplicationType', description='The type of the application.', example='DingTalk'),
      createDate?: string(name='CreateDate', description='The time when the application was created.', example='2021-09-07T09:09:59Z'),
      description?: string(name='Description', description='The description of the application.', example='Application'),
      name?: string(name='Name', description='The name of the application.', example='MyApplication'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxsn4m******'),
      tags?: map[string]any(name='Tags', description='The tags added to the application.', example='{"k1": "v1","k2": "v2"}'),
      updateDate?: string(name='UpdateDate', description='The time when the application was updated.', example='2021-09-07T09:09:59Z'),
    }
  ](name='Applications', description='The details of the application.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='10'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='-'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='12067D53-56A9-561B-ADD6-61429D207117'),
}

model ListApplicationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListApplicationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListApplications  ListApplicationsRequest
  * @return ListApplicationsResponse
 */
async function listApplications(request: ListApplicationsRequest): ListApplicationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListApplications', 'POST', '/', 'json', false, 'json', request);
}

model ListExecutionLogsRequest {
  executionId: string(name='ExecutionId', description='The ID of the execution.

This parameter is required.', example='exec-xxx', position='Query'),
  logType?: string(name='LogType', description='The type of the log.', example='System', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzQ3NjFENDdB', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which you want to query the logs of the execution.', example='cn-hangzhou', position='Query'),
  taskExecutionId?: string(name='TaskExecutionId', description='The execution ID of the task.', example='exec-1234567zxcvb.t0010', position='Query'),
}

model ListExecutionLogsResponseBody = {
  executionLogs?: [ 
    {
      logType?: string(name='LogType', description='The log type.', example='System'),
      message?: string(name='Message', description='The details of the task execution.', example='The task CheckDiskCategory completed.'),
      taskExecutionId?: string(name='TaskExecutionId', description='The task execution ID.', example='exec-1234567zxcvb.t0010'),
      timestamp?: string(name='Timestamp', description='The timestamp when the task was run.', example='2019-05-24T:02:29:07Z'),
    }
  ](name='ExecutionLogs', description='The logs of the execution.'),
  isTruncated?: boolean(name='IsTruncated', description='Indicates whether the log is truncated.', example='true'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='50'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='gAAAAABdpsGWjX8dJ-a6dl_pvoS7AFxNHSNJKHLCAJJ0ylgA53nWW5V4HTEZKCYTaEPNOrxFir4z43UTOjE150cFr8AGTifA=='),
  requestId?: string(name='RequestId', description='The request ID.', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
}

model ListExecutionLogsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExecutionLogsResponseBody(name='body'),
}

/**
  * @description ****
  * @param request  the request parameters of ListExecutionLogs  ListExecutionLogsRequest
  * @return ListExecutionLogsResponse
 */
async function listExecutionLogs(request: ListExecutionLogsRequest): ListExecutionLogsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListExecutionLogs', 'POST', '/', 'json', false, 'json', request);
}

model ListExecutionRiskyTasksRequest {
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  templateName: string(name='TemplateName', description='The name of the template.

This parameter is required.', example='myTemplate', position='Query'),
}

model ListExecutionRiskyTasksResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C04B668D-D2DD-4B40-B6E9-0E3C4F53D5B5'),
  riskyTasks?: [ 
    {
      API?: string(name='API', description='The name of the operation that the high-risk task calls.', example='DeleteInstance'),
      service?: string(name='Service', description='The cloud service in which the high-risk task runs.', example='ECS'),
      task?: [ string ](name='Task', description='The details of the high-risk task.'),
      template?: [ string ](name='Template', description='The details of templates to which the high-risk task belongs.'),
    }
  ](name='RiskyTasks', description='The information about high-risk tasks.'),
}

model ListExecutionRiskyTasksResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExecutionRiskyTasksResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExecutionRiskyTasks  ListExecutionRiskyTasksRequest
  * @return ListExecutionRiskyTasksResponse
 */
async function listExecutionRiskyTasks(request: ListExecutionRiskyTasksRequest): ListExecutionRiskyTasksResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListExecutionRiskyTasks', 'POST', '/', 'json', false, 'json', request);
}

model ListExecutionsRequest {
  categories?: string(name='Categories', description='The types of the execution template. Valid values: Other, TimerTrigger, EventTrigger, and AlarmTrigger. You can specify only one of the Categories and Category parameters. We recommend that you specify Categories.', example='["TimerTrigger"、"EventTrigger"]', position='Query'),
  category?: string(name='Category', description='The type of the execution template. Valid values: Other, TimerTrigger, EventTrigger, and AlarmTrigger.', example='Other', position='Query'),
  depth?: string(name='Depth', description='The depth of execution. Valid values: RootDepth and FirstChildDepth. If you set this parameter to RootDepth, only the parent execution is returned. If you set this parameter to FirstChildDepth, only the child executions at the first level are returned. You can specify only one of the Depth and IncludeChildExecution parameters. We recommend that you specify Depth.', example='RootDepth', position='Query'),
  description?: string(name='Description', description='The description of the execution.', example='MyDescription', position='Query'),
  endDateAfter?: string(name='EndDateAfter', description='The earliest end time. The executions that stop running at or later than the specified time are queried.', example='2019-05-16T10:26:14Z', position='Query'),
  endDateBefore?: string(name='EndDateBefore', description='The latest end time. The executions that stop running at or earlier than the specified time are queried.', example='2019-05-16T10:26:14Z', position='Query'),
  executedBy?: string(name='ExecutedBy', description='The executor.', example='vme', position='Query'),
  executionId?: string(name='ExecutionId', description='The ID of the execution.', example='exec-xxx', position='Query'),
  includeChildExecution?: boolean(name='IncludeChildExecution', description='Specifies whether to include child executions. Default value: False.', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: 10 to 100. Default value: 50.', example='50', position='Query'),
  mode?: string(name='Mode', description='The execution mode. Valid values:

*   **Automatic**
*   **Debug**', example='Automatic', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzQ', position='Query'),
  parentExecutionId?: string(name='ParentExecutionId', description='The ID of the parent execution.', example='exec-xxx', position='Query'),
  ramRole?: string(name='RamRole', description='The RAM role.', example='OOSServiceRole', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group to which the instances you want to query belong.', example='rg-acfmxsn4m4******', position='Query'),
  resourceId?: string(name='ResourceId', description='The ID of the Elastic Compute Service (ECS) resource.', example='i-xxx', position='Query'),
  resourceTemplateName?: string(name='ResourceTemplateName', description='The name of the resource template.', example='ACS-ECS-TEST', position='Query'),
  sortField?: string(name='SortField', description='The field that is used to sort the executions to query. Valid values:

*   **StartDate**: specifies that the executions are sorted based on the time when they are created. This is the default value.
*   **EndDate**: specifies that the executions are sorted based on the time when they stop running.
*   **Status**: specifies that the executions are sorted based on their states.', example='StartDate', position='Query'),
  sortOrder?: string(name='SortOrder', description='The order in which you want to sort the results. Valid values:

*   **Ascending**: ascending order.
*   **Descending**: descending order. This is the default value.', example='Ascending', position='Query'),
  startDateAfter?: string(name='StartDateAfter', description='The earliest start time. The executions that start to run at or later than the specified time are queried.', example='2019-05-16T10:26:14Z', position='Query'),
  startDateBefore?: string(name='StartDateBefore', description='The latest start time. The executions that start to run at or earlier than the specified point in time are queried.', example='2019-05-16T10:26:14Z', position='Query'),
  status?: string(name='Status', description='The status of the execution. Valid values: Running, Started, Success, Failed, Waiting, Cancelled, Pending, and Skipped.', example='Running', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags for the execution.', example='{"k1":"v2","k2":"v2"}', shrink='json', position='Query'),
  templateName?: string(name='TemplateName', description='The name of the template. All templates whose names contain the specified template name are queried.', example='MyTemplate', position='Query'),
}

model ListExecutionsResponseBody = {
  executions?: [ 
    {
      category?: string(name='Category', description='The type of the execution template. Valid values: Other, TimerTrigger, EventTrigger, and AlarmTrigger.', example='Other'),
      counters?: map[string]any(name='Counters', description='The number of tasks that are counted by execution status.', example='{"Failed": 0,"Success": 1,"Total": 2}'),
      createDate?: string(name='CreateDate', description='The time when the execution was created.', example='2019-05-16T10:26:14Z'),
      currentTasks?: [ 
        {
          taskAction?: string(name='TaskAction', description='The execution template of the task.', example='acs::Template'),
          taskExecutionId?: string(name='TaskExecutionId', description='The ID of the task execution.', example='task-exec-44d32b45d2a49899#1'),
          taskName?: string(name='TaskName', description='The name of the task.', example='installSLSILogtail'),
        }
      ](name='CurrentTasks', description='The information about the tasks that are running.'),
      description?: string(name='Description', description='The description of the execution.', example='test execution.'),
      endDate?: string(name='EndDate', description='The time when the execution stops running.', example='2019-05-16T10:26:14Z'),
      executedBy?: string(name='ExecutedBy', description='The account ID of the user who started the execution of the template.', example='1309252800'),
      executionId?: string(name='ExecutionId', description='The unique ID of the execution.', example='exec-44d32b45d2a449e'),
      isParent?: boolean(name='IsParent', description='Indicates whether the execution contains child executions.', example='false'),
      lastSuccessfulTriggerTime?: string(name='LastSuccessfulTriggerTime', description='The time when the template was last successfully triggered.', example='2019-05-27T09:29:18Z'),
      lastTriggerOutputs?: string(name='LastTriggerOutputs', description='The outputs of last trigger.', example='{
      "InstanceId": "i-xxx"
}'),
      lastTriggerStatus?: string(name='LastTriggerStatus', description='The status of the execution after the template was last triggered.', example='Success'),
      lastTriggerStatusMessage?: string(name='LastTriggerStatusMessage', description='The status message of last trigger.', example='""'),
      lastTriggerTime?: string(name='LastTriggerTime', description='The time when the template was last successfully triggered.', example='2019-05-27T09:29:18Z'),
      mode?: string(name='Mode', description='The execution mode.', example='Automatic'),
      nextScheduleTime?: string(name='NextScheduleTime', description='The next schedule time for timer trigger execution.', example='2019-05-16T10:26:14Z'),
      outputs?: string(name='Outputs', description='The output of the execution.', example='{ "InstanceId":"i-xxx" }'),
      parameters?: map[string]any(name='Parameters', description='The input parameters of the execution.', example='{ "Status":"Running" }'),
      parentExecutionId?: string(name='ParentExecutionId', description='The ID of the parent execution.', example='exec-xxx'),
      ramRole?: string(name='RamRole', description='The role that started the execution of the template.', example='OOSServiceRole'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
      resourceStatus?: string(name='ResourceStatus', description='The status of the resource.', example='{ 			"Success": 1 		}'),
      safetyCheck?: string(name='SafetyCheck', description='The security check mode. Valid values: Skip, and ConfirmEveryHighRiskAction.', example='Skip'),
      startDate?: string(name='StartDate', description='The time when the execution was started.', example='2019-05-16T10:26:14Z'),
      status?: string(name='Status', description='The status of the execution. Valid values: Started, Queued, Running, Waiting, Success, Failed, and Cancelled.', example='Success'),
      statusMessage?: string(name='StatusMessage', description='The status of the task execution.', example='“”'),
      statusReason?: string(name='StatusReason', description='The reason for which the status occurs.', example='""'),
      tags?: map[string]any(name='Tags', description='The tags of the execution.', example='{}'),
      targets?: string(name='Targets', description='The target resource.', example='"{"ResourceType": "ALIYUN::ECS::Instance", "Filters": [{"ResourceIds": ["i-bp14z07dg3464980x72o"], "RegionId": "cn-hangzhou", "Type": "ResourceIds"}]}"'),
      templateId?: string(name='TemplateId', description='The ID of the template.', example='123'),
      templateName?: string(name='TemplateName', description='The name of the template.', example='MyTemplate'),
      templateVersion?: string(name='TemplateVersion', description='The version number of the template.', example='v1'),
      updateDate?: string(name='UpdateDate', description='The time when the execution was updated.', example='2019-05-16T10:26:14Z'),
      waitingStatus?: string(name='WaitingStatus', description='The Waiting state.', example='""'),
    }
  ](name='Executions', description='The details of the task executions.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzQ'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='14A074-47CA-9757-12CC4761D47A'),
  totalCount?: int32(name='TotalCount', description='The total number of the executions.', example='30'),
}

model ListExecutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListExecutionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListExecutions  ListExecutionsRequest
  * @return ListExecutionsResponse
 */
async function listExecutions(request: ListExecutionsRequest): ListExecutionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListExecutions', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancePackageStatesRequest {
  instanceId: string(name='InstanceId', description='ECS instance ID

This parameter is required.', example='i-bp1cpoxxxwxxxxxxxxxx', position='Query'),
  maxResults?: int32(name='MaxResults', description='Page size.', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='Pagination token.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctzxxxxxxx', position='Query'),
  regionId?: string(name='RegionId', description='Region ID.', example='cn-hangzhou', position='Query'),
  templateNames?: string(name='TemplateNames', description='List of extension names', example='["template1","template2"]', position='Query'),
}

model ListInstancePackageStatesResponseBody = {
  maxResults?: string(name='MaxResults', description='Page size.', example='50'),
  nextToken?: string(name='NextToken', description='Token string for pagination.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctzxxxxxxx'),
  packageStates?: [ 
    {
      description?: string(name='Description', description='Description', example='template description'),
      parameters?: string(name='Parameters', description='Parameters', example='{}'),
      publisher?: string(name='Publisher', description='Publisher', example='Alibaba Cloud'),
      templateCategory?: string(name='TemplateCategory', description='Template type', example='Package'),
      templateId?: string(name='TemplateId', description='Template ID', example='087b1e11072a40259f6fxxxxxxxxx'),
      templateName?: string(name='TemplateName', description='Template name.', example='ACS-ECS-Docker'),
      templateVersion?: string(name='TemplateVersion', description='Template version number', example='v3'),
      templateVersionName?: string(name='TemplateVersionName', description='Template version name', example='fix bug'),
      updateTime?: string(name='UpdateTime', description='Update time.', example='2024-05-04T11:17:28'),
    }
  ](name='PackageStates', description='List of extensions'),
  requestId?: string(name='RequestId', description='ID of the request', example='1306108F-610C-40FD-AAD5-XXXXXX'),
}

model ListInstancePackageStatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancePackageStatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstancePackageStates  ListInstancePackageStatesRequest
  * @return ListInstancePackageStatesResponse
 */
async function listInstancePackageStates(request: ListInstancePackageStatesRequest): ListInstancePackageStatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstancePackageStates', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancePatchStatesRequest {
  instanceIds?: string(name='InstanceIds', description='The ID of the Elastic Compute Service (ECS) instance. The value can be a JSON array that consists of up to 100 instance IDs. Separate the instance IDs with commas (,).', example='["i-bp1jaxa2bs4bps7*****", "i-bp67acfmxazb4p****", … "i-bp67acfmxazb4p****"]', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='-', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance whose patches you want to query resides.', example='cn-hangzhou', position='Query'),
}

model ListInstancePatchStatesResponseBody = {
  instancePatchStates?: [ 
    {
      baselineId?: string(name='BaselineId', description='The ID of the patch baseline.', example='pb-f9393021b7a049e1b34e'),
      failedCount?: string(name='FailedCount', description='The number of patches that failed to be installed.', example='0'),
      installedCount?: string(name='InstalledCount', description='The number of installed patches.', example='0'),
      installedOtherCount?: string(name='InstalledOtherCount', description='The number of patches that do not meet the baseline.', example='0'),
      installedPendingRebootCount?: string(name='InstalledPendingRebootCount', description='The number of patches that have been installed but require a restart to take effect.', example='0'),
      installedRejectedCount?: string(name='InstalledRejectedCount', description='The number of patches that are rejected by the user.', example='0'),
      instanceId?: string(name='InstanceId', description='The ID of the ECS instance.', example='i-bp1jaxa2bs4bps7*****'),
      missingCount?: string(name='MissingCount', description='The number of patches that are not installed.', example='0'),
      operationEndTime?: string(name='OperationEndTime', description='The time when the operation ended.', example='2021-09-10T11:42:22Z'),
      operationStartTime?: string(name='OperationStartTime', description='The time when the operation was initiated.', example='2021-09-10T11:42:22Z'),
      operationType?: string(name='OperationType', description='The operation type.', example='scan'),
      ownerInformation?: string(name='OwnerInformation', description='The information about the user.', example='“”'),
      patchGroup?: string(name='PatchGroup', description='The patch group.', example='null'),
    }
  ](name='InstancePatchStates', description='The details of patches of the instance.'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='-'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='9A47C086-E64D-52EE-8B2C-EFD23877C55E'),
}

model ListInstancePatchStatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancePatchStatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstancePatchStates  ListInstancePatchStatesRequest
  * @return ListInstancePatchStatesResponse
 */
async function listInstancePatchStates(request: ListInstancePatchStatesRequest): ListInstancePatchStatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstancePatchStates', 'POST', '/', 'json', false, 'json', request);
}

model ListInstancePatchesRequest {
  instanceId?: string(name='InstanceId', description='The ID of the instance.', example='i-bp1jaxa2bs4bps7*****', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page.', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='gAAAAABfTgv5ewUWmNdJ3g7JVLvX70sPH90GZOVGC6KPDUL0FIIb', position='Query'),
  patchStatuses?: string(name='PatchStatuses', description='The status of the patches that you want to query. If you do not set this parameter, patches are not filtered.', example='Installed', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance whose patches you want to query resides.', example='cn-hangzhou', position='Query'),
}

model ListInstancePatchesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='-'),
  patches?: [ 
    {
      classification?: string(name='Classification', description='The classification of the patch.', example='“”'),
      installedTime?: string(name='InstalledTime', description='The time when the patch was installed.', example='2021-01-28T07:07:20Z'),
      KBId?: string(name='KBId', description='The Id of KBId.', example='apt-utils.amd64'),
      severity?: string(name='Severity', description='The level of the severity.', example='important'),
      status?: string(name='Status', description='The status of the installation.', example='Installed'),
      title?: string(name='Title', description='The name of the patch.', example='isc-dhcp-common.amd64:4.3.5-3ubuntu7.3'),
    }
  ](name='Patches', description='The information about the patch.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0A615755-9C86-5EA6-BF9E-6E8F1AFF9403'),
}

model ListInstancePatchesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInstancePatchesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInstancePatches  ListInstancePatchesRequest
  * @return ListInstancePatchesResponse
 */
async function listInstancePatches(request: ListInstancePatchesRequest): ListInstancePatchesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInstancePatches', 'POST', '/', 'json', false, 'json', request);
}

model ListInventoryEntriesRequest {
  filter?: [ 
    {
      name?: string(name='Name', description='The name of the component property. Valid values of N: 1 to 5.', example='PlatformName'),
      operator?: string(name='Operator', description='The comparison operator that is used to filter property values. Valid values of N: 1 to 5. Valid values:

*   Equal
*   NotEqual
*   BeginWith
*   LessThan
*   GreaterThan', example='Equal'),
      value?: [ string ](name='Value', description='The values of properties. Valid values of the first N: 1 to 5. Valid values of the second N: 1 to 20.', example='test'),
    }
  ](name='Filter', description='The filter rules for the component.', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the instance.

This parameter is required.', example='i-bp1cpoxxxwxxxxxxxxxx', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 1 to 100. Default value: 50.', example='50', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzA', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the instance resides.', example='cn-hangzhou', position='Query'),
  typeName: string(name='TypeName', description='The name of the component. Valid values:

*   ACS:InstanceInformation
*   ACS:Application
*   ACS:File
*   ACS:Network
*   ACS:WindowsRole
*   ACS:Service
*   ACS:WindowsRegistry
*   ACS:WindowsUpdate

This parameter is required.', example='ACS:InstanceInformation', position='Query'),
}

model ListInventoryEntriesResponseBody = {
  captureTime?: string(name='CaptureTime', description='The time when the request was sent.', example='2020-09-17T12:28:13Z'),
  entries?: [  map[string]any ](name='Entries', description='The configurations of the component.'),
  instanceId?: string(name='InstanceId', description='The ID of the ECS instance.', example='i-bp1cpoxxxwxxxxxxxxxx'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.', example='gAAAAABfTgv5ewUWmNdJ3g7JVLvX70sPH90GZOVGC'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A81E4B2E-6B33-4BAE-9856-55DB7C893E01'),
  schemaVersion?: string(name='SchemaVersion', description='The version number of the component.', example='1.0'),
  typeName?: string(name='TypeName', description='The name of the component.', example='ACS:InstanceInformation'),
}

model ListInventoryEntriesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListInventoryEntriesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListInventoryEntries  ListInventoryEntriesRequest
  * @return ListInventoryEntriesResponse
 */
async function listInventoryEntries(request: ListInventoryEntriesRequest): ListInventoryEntriesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListInventoryEntries', 'POST', '/', 'json', false, 'json', request);
}

model ListOpsItemsRequest {
  filter?: [ 
    {
      name?: string(name='Name', description='The parameter name of the filter.', example='Status'),
      operator?: string(name='Operator', description='The comparison operator that is used to filter property values.', example='Equal'),
      value?: [ string ](name='Value', description='The parameter values of the filter.'),
    }
  ](name='Filter', description='The filter rules for the component.', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: 10 to 100. Default value: 50.', example='50', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzQ3NjFENDdB', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceTags?: map[string]any(name='ResourceTags', description='The information about resource tags.', example='{
      "k1": "v1",
      "k2": "v2"
}', shrink='json', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags.', example='{"k1": "v1", "k2": "v2"}', shrink='json', position='Query'),
}

model ListOpsItemsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.', example='50'),
  nextToken?: string(name='NextToken', description='The pagination token that can be used in the next request to retrieve a new page of results.', example='gAAAAABfTgv5ewUWmNdJ3g7JVLvX70sPH90GZOVGC6KPDUL0FIIb'),
  opsItems?: [ 
    {
      category?: string(name='Category', description='The category.', example='Security'),
      createDate?: string(name='CreateDate', description='The time when the O\\&M item was created.', example='2023-07-09T10:01Z'),
      opsItemId?: string(name='OpsItemId', description='The ID of the O\\&M item.', example='oi-d52b08695e2b46ae8413'),
      priority?: int32(name='Priority', description='The priority.', example='1'),
      resources?: [ string ](name='Resources', description='The Alibaba Resource Names (ARNs) of the associated resources.'),
      severity?: string(name='Severity', description='The severity level.', example='Medium'),
      source?: string(name='Source', description='The source business.', example='/aliyun/ecs'),
      status?: string(name='Status', description='The status of the O\\&M item.', example='Open'),
      tags?: map[string]any(name='Tags', description='The tags.', example='{"k1":"v1"}'),
      title?: string(name='Title', description='The title of the O\\&M item.', example='Test'),
      updateDate?: string(name='UpdateDate', description='The time when the O\\&M item was updated.', example='2023-07-09T10:01Z'),
    }
  ](name='OpsItems', description='The list of O\\&M items.'),
  requestId?: string(name='RequestId', description='The request ID.', example='113DD533-389C-5F83-9C69-F64D5BAB10B2'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
}

model ListOpsItemsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListOpsItemsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListOpsItems  ListOpsItemsRequest
  * @return ListOpsItemsResponse
 */
async function listOpsItems(request: ListOpsItemsRequest): ListOpsItemsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListOpsItems', 'POST', '/', 'json', false, 'json', request);
}

model ListParameterVersionsRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 10 to 100. Default value: 50.', example='50', minimum=10, maximum=100, position='Query'),
  name: string(name='Name', description='The name of the common parameter.

This parameter is required.', example='MyParameter', position='Query'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzQ3NjFENDdB', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  shareType?: string(name='ShareType', description='The share type of the common parameter.', example='Private', position='Query'),
}

model ListParameterVersionsResponseBody = {
  createdBy?: string(name='CreatedBy', description='The user who created the common parameter.', example='root(130900000)'),
  createdDate?: string(name='CreatedDate', description='The time when the common parameter was created.', example='2020-09-07T11:37:29Z'),
  description?: string(name='Description', description='The description of the common parameter.', example='parameter-description'),
  id?: string(name='Id', description='The ID of the common parameter.', example='p-a483b520e0axxxxxxxxx'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='50'),
  name?: string(name='Name', description='The name of the common parameter.', example='MyParameter'),
  nextToken?: string(name='NextToken', description='The pagination token that was used in the next request to retrieve a new page of results.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzQ3NjFENDdB'),
  parameterVersions?: [ 
    {
      parameterVersion?: int32(name='ParameterVersion', description='The version number of the common parameter.', example='1'),
      updatedBy?: string(name='UpdatedBy', description='The user who updated the common parameter.', example='root(130900000)'),
      updatedDate?: string(name='UpdatedDate', description='The time when the common parameter was last updated.', example='2020-09-07T11:37:29Z'),
      value?: string(name='Value', description='The value of the common parameter.', example='MyParameter'),
    }
  ](name='ParameterVersions', description='The information about the version of the common parameter.'),
  requestId?: string(name='RequestId', description='The request ID.', example='FD08D89D-B6C8-4AA2-A2B4-521D3F4A39FA'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='50'),
  type?: string(name='Type', description='The data type of the common parameter.', example='String'),
}

model ListParameterVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListParameterVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListParameterVersions  ListParameterVersionsRequest
  * @return ListParameterVersionsResponse
 */
async function listParameterVersions(request: ListParameterVersionsRequest): ListParameterVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListParameterVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListParametersRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 10 to 100. Default value: 50.', example='50', minimum=10, maximum=100, position='Query'),
  name?: string(name='Name', description='The name of the common parameter.', example='MyParameter', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that can be used in the next request to retrieve a new page of results.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzA', position='Query'),
  path?: string(name='Path', description='The path of the parameter. For example, if the name of a parameter is /path/path1/Myparameter, the path of the parameter is /path/path1/.', example='/path1/path2/', position='Query'),
  recursive?: boolean(name='Recursive', description='Specifies whether to query parameters from all levels of directories in the specified path. Default value: false.', example='false', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxsn4m4******', position='Query'),
  shareType?: string(name='ShareType', description='The share type of the common parameter. Valid values:

*   Public
*   Private

Default value: Private.', example='‘Private’', position='Query'),
  sortField?: string(name='SortField', description='The field used to sort the query results. Valid values:

*   Name
*   CreatedDate', example='Name', position='Query'),
  sortOrder?: string(name='SortOrder', description='The order in which the entries are sorted. Valid values:

*   Ascending
*   Descending (Default)', example='Descending', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags.', example='{"k1": "v1", "k2": "v2"}', shrink='json', position='Query'),
  type?: string(name='Type', description='The data type of the common parameter.', example='String', position='Query'),
}

model ListParametersResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 10 to 100. Default value: 50.', example='50'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='gAAAAABfTgv5ewUWmNdJ3g7JVLvX70sPH90GZOVGC6KPDUL0FIIb'),
  parameters?: [ 
    {
      createdBy?: string(name='CreatedBy', description='The user who created the common parameter.', example='root(130900000)'),
      createdDate?: string(name='CreatedDate', description='The time when the common parameter was created.', example='2020-09-01T08:01:43Z'),
      description?: string(name='Description', description='The description of the common parameter.', example='parameter'),
      id?: string(name='Id', description='The common parameter ID.', example='p-4c4b401cab6747xxxxxx'),
      name?: string(name='Name', description='The name of the common parameter.', example='MyParameter'),
      parameterVersion?: string(name='ParameterVersion', description='The version number of the common parameter.', example='1'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxsn4m4******'),
      shareType?: string(name='ShareType', description='The share type of the common parameter.', example='Private'),
      tags?: map[string]any(name='Tags', description='The tags added to the common parameter.', example='{"k1": "v1", "k2": "v2"}'),
      type?: string(name='Type', description='The data type of the common parameter.', example='String'),
      updatedBy?: string(name='UpdatedBy', description='The user who updated the common parameter.', example='root(130900000)'),
      updatedDate?: string(name='UpdatedDate', description='The time when the common parameter was updated.', example='2020-09-01T08:01:43Z'),
    }
  ](name='Parameters', description='The information about the common parameter.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A81E4B2E-6B33-4BAE-9856-55DB7C893E01'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='5'),
}

model ListParametersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListParametersResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListParameters  ListParametersRequest
  * @return ListParametersResponse
 */
async function listParameters(request: ListParametersRequest): ListParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListParameters', 'POST', '/', 'json', false, 'json', request);
}

model ListPatchBaselinesRequest {
  approvedPatches?: [ string ](name='ApprovedPatches', description='The approved patches.', shrink='json', position='Query'),
  approvedPatchesEnableNonSecurity?: boolean(name='ApprovedPatchesEnableNonSecurity', description='Specifies whether the approved patch involves updates other than security-related updates.', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='50', position='Query'),
  name?: string(name='Name', description='The name of the patch baseline.', example='MyPatchBaseline', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='-', position='Query'),
  operationSystem?: string(name='OperationSystem', description='The type of the operating system. Valid values:

*   Windows
*   Ubuntu
*   CentOS
*   Debian
*   AliyunLinux
*   RedhatEnterpriseLinux
*   Anolis
*   AlmaLinux', example='AliyunLinux', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******', position='Query'),
  shareType?: string(name='ShareType', description='The share type of the template. Valid values:

*   **Public**
*   **Private**', example='Private', position='Query'),
  sources?: [ string ](name='Sources', description='The patch source configurations.', shrink='json', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='key'),
      value?: string(name='Value', description='The value of the tag.', example='value'),
    }
  ](name='Tags', description='The tags.', shrink='json', position='Query'),
}

model ListPatchBaselinesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='The number of entries returned on each page.'),
  patchBaselines?: [ 
    {
      approvedPatches?: [ string ](name='ApprovedPatches', description='The approved patches.'),
      approvedPatchesEnableNonSecurity?: boolean(name='ApprovedPatchesEnableNonSecurity', description='Indicates whether the approved patch involves updates other than security-related updates.', example='true'),
      createdBy?: string(name='CreatedBy', description='The user who created the patch baseline.', example='root(130900000)'),
      createdDate?: string(name='CreatedDate', description='The time when the patch baseline was created.', example='2021-09-08T03:41:23Z'),
      description?: string(name='Description', description='The description of the patch baseline.', example='ListPatchBaseline'),
      id?: string(name='Id', description='The ID of the patch baseline.', example='pb-c2838b5d89b540e19ee6'),
      isDefault?: boolean(name='IsDefault', description='Indicates whether the patch baseline is set as the default patch baseline.', example='false'),
      name?: string(name='Name', description='The name of the patch baseline.', example='MyPatchBaseline'),
      operationSystem?: string(name='OperationSystem', description='The type of the operating system.', example='AliyunLinux'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-aek256ia6vhsndy'),
      shareType?: string(name='ShareType', description='The share type of the patch baseline.', example='Private'),
      sources?: [ string ](name='Sources', description='The configurations of patch sources.'),
      tags?: [ 
        {
          tagKey?: string(name='TagKey', description='The key of the tag.', example='key'),
          tagValue?: string(name='TagValue', description='The value of the tag.', example='value'),
        }
      ](name='Tags', description='The tags of the patch baseline.'),
      updatedBy?: string(name='UpdatedBy', description='The user who last updated the patch baseline.', example='root(130900000)'),
      updatedDate?: string(name='UpdatedDate', description='The time when the patch baseline was updated.', example='2021-09-08T03:44:34Z'),
    }
  ](name='PatchBaselines', description='The patch baselines.'),
  requestId?: string(name='RequestId', description='The request ID.', example='432996A1-03C0-5C4C-A8E6-66C4110765B8'),
}

model ListPatchBaselinesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListPatchBaselinesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListPatchBaselines  ListPatchBaselinesRequest
  * @return ListPatchBaselinesResponse
 */
async function listPatchBaselines(request: ListPatchBaselinesRequest): ListPatchBaselinesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListPatchBaselines', 'POST', '/', 'json', false, 'json', request);
}

model ListResourceExecutionStatusRequest {
  executionId: string(name='ExecutionId', description='The ID of the execution.

This parameter is required.', example='exec-xxxxxxxxxxxx', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries to return on each page. Valid values: 10 to 100. Default value: 50.', example='50', minimum=10, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzQ', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model ListResourceExecutionStatusResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.', example='50'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzQ'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='ED571CBD-9F96-419D-B919-CF340BBCA157'),
  resourceExecutionStatus?: [ 
    {
      executionId?: string(name='ExecutionId', description='The ID of the execution.', example='exec-6be6d6ff805349d9ac13'),
      executionTime?: string(name='ExecutionTime', description='The time when the execution started running.', example='2020-11-13T08:48:34Z'),
      outputs?: string(name='Outputs', description='The output of the template.', example='{ 				"commandOutput": "hello\\n" 			}'),
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='i-bp1e1bxxxxxxxxxxxxxx'),
      status?: string(name='Status', description='The status of the execution.', example='Success'),
    }
  ](name='ResourceExecutionStatus', description='The execution information of the resource.'),
}

model ListResourceExecutionStatusResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListResourceExecutionStatusResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListResourceExecutionStatus  ListResourceExecutionStatusRequest
  * @return ListResourceExecutionStatusResponse
 */
async function listResourceExecutionStatus(request: ListResourceExecutionStatusRequest): ListResourceExecutionStatusResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListResourceExecutionStatus', 'POST', '/', 'json', false, 'json', request);
}

model ListSecretParameterVersionsRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 10 to 100. Default value: 50.', example='10', minimum=10, maximum=100, position='Query'),
  name: string(name='Name', description='The name of the encryption parameter.

This parameter is required.', example='MySecretParameter', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzQ3NjFENDdB', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  shareType?: string(name='ShareType', description='The share type of the encryption parameter.', example='Private', position='Query'),
  withDecryption?: boolean(name='WithDecryption', description='Specifies whether to decrypt the parameter value. The decrypted parameter value is returned only if this parameter is set to true. Otherwise, null is returned.', example='false', position='Query'),
}

model ListSecretParameterVersionsResponseBody = {
  createdBy?: string(name='CreatedBy', description='The user who created the encryption parameter.', example='root(130900000)'),
  createdDate?: string(name='CreatedDate', description='The time when the encryption parameter was created.', example='2020-09-01T08:01:43Z'),
  description?: string(name='Description', description='The description of the encryption parameter.', example='SecretParameter'),
  id?: string(name='Id', description='The ID of the encryption parameter.', example='p-4c4b401cab6747xxxxxx'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='50'),
  name?: string(name='Name', description='The name of the encryption parameter.', example='MySecretParameter'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzQ3NjFENDdB'),
  parameterVersions?: [ 
    {
      parameterVersion?: int32(name='ParameterVersion', description='The version number of the encryption parameter.', example='1'),
      updatedBy?: string(name='UpdatedBy', description='The user who updated the encryption parameter.', example='root(130900000)'),
      updatedDate?: string(name='UpdatedDate', description='The time when the encryption parameter was updated.', example='2020-09-01T08:01:43Z'),
      value?: string(name='Value', description='The value of the encryption parameter.', example='SecretParameter'),
    }
  ](name='ParameterVersions', description='The information about the version of the encryption parameter.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='DBA6E6C8-F75D-41DE-AFF5-1FA03F551CA3'),
  totalCount?: int32(name='TotalCount', description='The total number of entries returned.', example='1'),
  type?: string(name='Type', description='The type of the encryption parameter.', example='Secret'),
}

model ListSecretParameterVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSecretParameterVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListSecretParameterVersions  ListSecretParameterVersionsRequest
  * @return ListSecretParameterVersionsResponse
 */
async function listSecretParameterVersions(request: ListSecretParameterVersionsRequest): ListSecretParameterVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSecretParameterVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListSecretParametersRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 10 to 100. Default value: 50.', example='50', minimum=10, maximum=100, position='Query'),
  name?: string(name='Name', description='The name of the parameter. **You can enter a keyword to query parameter names in fuzzy match mode.', example='MySecretParameter', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='sPH90GZOVGC6KPDUL0FIIbEtMQHq_19S6_4O_XqA', position='Query'),
  path?: string(name='Path', description='The path of the parameter. For example, if the name of a parameter is /path/path1/Myparameter, the path of the parameter is /path/path1/.', example='/path1/path2/', position='Query'),
  recursive?: boolean(name='Recursive', description='Specifies whether to query parameters from all levels of directories in the specified path. Default value: false.', example='false', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******', position='Query'),
  sortField?: string(name='SortField', description='The field used to sort the query results. Valid values:

*   Name
*   CreatedDate', example='Name', position='Query'),
  sortOrder?: string(name='SortOrder', description='The order in which the entries are sorted. Valid values:

*   Ascending
*   Descending (Default)', example='Descending', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags of the parameter.', example='{"k1": "v1", "k2": "v2"}', shrink='json', position='Query'),
}

model ListSecretParametersResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='sPH90GZOVGC6KPDUL0FIIbEtMQHq_19S6_4O_XqA'),
  parameters?: [ 
    {
      createdBy?: string(name='CreatedBy', description='The user who created the parameter.', example='root(130900000)'),
      createdDate?: string(name='CreatedDate', description='The time when the parameter was created.', example='2020-09-01T09:28:47Z'),
      description?: string(name='Description', description='The description of the parameter.', example='SecretParameter'),
      id?: string(name='Id', description='The ID of the parameter.', example='p-14ed150fdcd048xxxxxx'),
      keyId?: string(name='KeyId', description='The ID of the KMS customer master key (CMK) that is used for encryption.', example='80e9409f-78fa-42ab-84bd-83f40c******'),
      name?: string(name='Name', description='The name of the parameter.', example='MySecretParameter'),
      parameterVersion?: string(name='ParameterVersion', description='The version number of the parameter.', example='1'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
      shareType?: string(name='ShareType', description='The share type of the parameter.', example='Private'),
      tags?: map[string]any(name='Tags', description='The tags of the parameter.', example='{"k1": "v1", "k2": "v2"}'),
      type?: string(name='Type', description='The type of the parameter.', example='Secret'),
      updatedBy?: string(name='UpdatedBy', description='The user who updated the parameter.', example='root(130900000)'),
      updatedDate?: string(name='UpdatedDate', description='The time when the parameter was updated.', example='2020-09-01T09:35:17Z'),
    }
  ](name='Parameters', description='The information about the parameters.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='CA9C6248-AF2A-4AE9-A166-88FD901BBB90'),
}

model ListSecretParametersResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListSecretParametersResponseBody(name='body'),
}

/**
  * @description Before you call this operation, make sure that you have the permission to manage Key Management Service (KMS) secrets.
  * @param request  the request parameters of ListSecretParameters  ListSecretParametersRequest
  * @return ListSecretParametersResponse
 */
async function listSecretParameters(request: ListSecretParametersRequest): ListSecretParametersResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListSecretParameters', 'POST', '/', 'json', false, 'json', request);
}

model ListStateConfigurationsRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries per page.', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='AHJKH-AHKJHDJK-AKHDIOWJL', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxsn4m4******', position='Query'),
  stateConfigurationIds?: string(name='StateConfigurationIds', description='The ID of the desired-state configuration.', example='["sc-asfgdhj12345"]', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags to be added to the configuration.', example='{"Key": "oos", "Value": "inventory"}', shrink='json', position='Query'),
  templateName?: string(name='TemplateName', description='The name of the template. The name must be 1 to 200 characters in length and can contain letters, digits, hyphens (-), and underscores (_).', example='ACS-ECS-InventoryDataCollection', position='Query'),
  templateVersion?: string(name='TemplateVersion', description='The version number of the template. If you do not specify this parameter, the latest version of the template is used.', example='v1', position='Query'),
}

model ListStateConfigurationsResponseBody = {
  nextToken?: string(name='NextToken', description='The pagination token that was used in the next request to retrieve a new page of results.', example='AAAAASO3cL82+b5iji7bfPNpMh8='),
  requestId?: string(name='RequestId', description='The request ID.', example='1306108F-610C-40FD-AAD5-DA13E8B00BE9'),
  stateConfigurations?: [ 
    {
      configureMode?: string(name='ConfigureMode', description='The configuration mode. Valid values:', example='ApplyAndAutoCorrect'),
      createTime?: string(name='CreateTime', description='The time when the desired-state configuration was created.', example='2021-03-22T03:13:32Z'),
      description?: string(name='Description', description='The description.', example='Collect inventory data'),
      parameters?: string(name='Parameters', description='The parameters.', example='{"policy": {"ACS:Network": {"Collection": "Enabled"}, "ACS:Application": {"Collection": "Enabled"}}}'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxsn4m4******'),
      scheduleExpression?: string(name='ScheduleExpression', description='The schedule expression.', example='1 hour'),
      scheduleType?: string(name='ScheduleType', description='The schedule type.', example='rate'),
      stateConfigurationId?: string(name='StateConfigurationId', description='The ID of the desired-state configuration.', example='sc-a538febe18fabcdef'),
      tags?: map[string]any(name='Tags', description='The tags added to the configuration.', example='{"Key": "oos", "Value": "inventory"}'),
      targets?: string(name='Targets', description='The queried resources.', example='{ "ResourceType": "ALIYUN::ECS::Instance", "Filters": [ { "Type": "All", "RegionId": "cn-hangzhou", "Parameters": { "RegionId": "cn-hangzhou", "Status": "Running" } } ] }'),
      templateId?: string(name='TemplateId', description='The template ID.', example='t-ajshjalscfhjk2214'),
      templateName?: string(name='TemplateName', description='The name of the template.', example='ACS-ECS-InventoryDataCollection'),
      templateVersion?: string(name='TemplateVersion', description='The version of the template.', example='v2'),
      updateTime?: string(name='UpdateTime', description='The time when the configuration was updated.', example='2021-04-22T03:13:32Z'),
    }
  ](name='StateConfigurations', description='The information about the desired-state configurations.'),
}

model ListStateConfigurationsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListStateConfigurationsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListStateConfigurations  ListStateConfigurationsRequest
  * @return ListStateConfigurationsResponse
 */
async function listStateConfigurations(request: ListStateConfigurationsRequest): ListStateConfigurationsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListStateConfigurations', 'POST', '/', 'json', false, 'json', request);
}

model ListTagKeysRequest {
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page. Valid value: 10 to 100. Default value: 50.', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page.', example='djsdlkasd', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the resource to which the tag is added.', example='template', position='Query'),
}

model ListTagKeysResponseBody = {
  keys?: [ string ](name='Keys', description='The tag keys.'),
  maxResults?: int32(name='MaxResults', description='The maximum number of entries to return on each page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page.', example='87y29h80h20h3f2'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='36210B73-8262-4D08-9D3A-7F96789733C8'),
}

model ListTagKeysResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagKeysResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagKeys  ListTagKeysRequest
  * @return ListTagKeysResponse
 */
async function listTagKeys(request: ListTagKeysRequest): ListTagKeysResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagKeys', 'POST', '/', 'json', false, 'json', request);
}

model ListTagResourcesRequest {
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzQ', position='Query'),
  regionId: string(name='RegionId', description='The ID of the region.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceIds?: map[string]any(name='ResourceIds', description='The IDs of resources. The number of resource IDs ranges from 1 to 50.', example='["templateNam1","templateName2"]', shrink='json', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource. Valid values: template execution

This parameter is required.', example='template', position='Query'),
  tags?: map[string]any(name='Tags', description='The tag keys and values. The number of key-value pairs ranges from 1 to 20.', example='{"k1":"v2","k2":"v2"}', shrink='json', position='Query'),
}

model ListTagResourcesResponseBody = {
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results. If the return value of the NextToken parameter is empty, the next page does not exist.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzQ'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A5EF78C1-67FC-4E36-A6A8-7DF9C51726DF'),
  tagResources?: {
    tagResource?: [ 
    {
      resourceId?: string(name='ResourceId', description='The ID of the resource.', example='TagTest2'),
      resourceType?: string(name='ResourceType', description='The type of the resource.', example='template'),
      tagKey?: string(name='TagKey', description='The tag key.', example='k1'),
      tagValue?: string(name='TagValue', description='The tag value.', example='v1'),
    }
  ](name='TagResource')
  }(name='TagResources', description='The set of resources and the tags that are added to the resources.'),
}

model ListTagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagResources  ListTagResourcesRequest
  * @return ListTagResourcesResponse
 */
async function listTagResources(request: ListTagResourcesRequest): ListTagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagResources', 'POST', '/', 'json', false, 'json', request);
}

model ListTagValuesRequest {
  key?: string(name='Key', description='The tag key to query.', example='k1', position='Query'),
  maxResults?: int32(name='MaxResults', description='The maximum number of results on each page.', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='The pagination token that is used in the next request to retrieve a new page of results. You do not need to specify this parameter for the first request.', example='3272h923879hsaksad', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceType?: string(name='ResourceType', description='The type of the tagged resource.', example='template', position='Query'),
}

model ListTagValuesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The maximum number of results on each page.', example='50'),
  nextToken?: string(name='NextToken', description='The returned value of NextToken is a pagination token, which can be used in the next request to retrieve a new page of results.', example='83u29j2dj3dskds'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='65591133-1188-4935-B78F-20F72'),
  values?: [ string ](name='Values', description='The tag values returned.'),
}

model ListTagValuesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTagValuesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTagValues  ListTagValuesRequest
  * @return ListTagValuesResponse
 */
async function listTagValues(request: ListTagValuesRequest): ListTagValuesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTagValues', 'POST', '/', 'json', false, 'json', request);
}

model ListTaskExecutionsRequest {
  endDateAfter?: string(name='EndDateAfter', description='The execution ID of the task.', example='2019-05-16T10:26:14Z', position='Query'),
  endDateBefore?: string(name='EndDateBefore', description='Specifies to query task executions that stop running at or later than the specified time.', example='2019-05-16T10:26:14Z', position='Query'),
  executionId?: string(name='ExecutionId', description='The status of the execution. Valid values: Running, Started, Success, Failed, Waiting, Cancelled, Pending, and Skipped.', example='exec-xxx', position='Query'),
  includeChildTaskExecution?: boolean(name='IncludeChildTaskExecution', description='The number of entries to return on each page. Valid values: 20 to 100. Default value: 50.', example='false', position='Query'),
  maxResults?: int32(name='MaxResults', description='The token that is used to retrieve the next page of results.', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='Sorts the task executions to query. Valid values:

*   **StartDate**: specifies that the task executions are sorted based on the time when they are created. This is the default value.
*   **EndDate**: specifies that the task executions are sorted based on the time when the time when they stop running.
*   **Status**: specifies that the task executions are sorted based on their statuses.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzQ3NjFENDdB', position='Query'),
  parentTaskExecutionId?: string(name='ParentTaskExecutionId', description='Specifies whether to show the child nodes in the loop task. Default value: False.', example='task-exec-xxx', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the execution.', example='cn-hangzhou', position='Query'),
  sortField?: string(name='SortField', description='The order in which you want to sort the task executions to query. Valid values:

*   **Ascending**: ascending order.
*   **Descending**: descending order. This is the default value.', example='StartDate', position='Query'),
  sortOrder?: string(name='SortOrder', description='The token that is used to retrieve the next page of results.', example='Ascending', position='Query'),
  startDateAfter?: string(name='StartDateAfter', description='Specifies to query task executions that stop running at or before the specified time.', example='2019-05-16T10:26:14Z', position='Query'),
  startDateBefore?: string(name='StartDateBefore', description='Specifies to query task executions that start to run at or later than the specified time.', example='2019-05-16T10:26:14Z', position='Query'),
  status?: string(name='Status', description='Specifies to query task executions that start to run at or before the specified time.', example='Running', position='Query'),
  taskAction?: string(name='TaskAction', description='The execution ID of the parent node. In a loop task, set this parameter to the execution ID of the parent node.', example='ACS::Sleep', position='Query'),
  taskExecutionId?: string(name='TaskExecutionId', description='The name of the task.', example='task-exec-xxx', position='Query'),
  taskName?: string(name='TaskName', description='The action of the task.', example='describeInstance', position='Query'),
}

model ListTaskExecutionsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The details of the task executions.', example='50'),
  nextToken?: string(name='NextToken', description='The ID of the request.', example='MTRBMDc0NjAtRUJFNy00N0NBLTk3NTctMTJDQzQ3NjFENDdB'),
  requestId?: string(name='RequestId', description='The number of entries returned on each page.', example='CDABABABAB-FC28-4D9C-8FB5-68DC6F0486FC'),
  taskExecutions?: [ 
    {
      childExecutionId?: string(name='ChildExecutionId', description='The output of the execution.', example='exec-xxx'),
      createDate?: string(name='CreateDate', description='The ID of the execution.', example='2019-05-16T10:26:14Z'),
      endDate?: string(name='EndDate', description='The execution ID of the parent node.', example='2019-05-16T10:26:14Z'),
      executionId?: string(name='ExecutionId', description='The action of the task.', example='exec-44d32b45d2a449e49899'),
      extraData?: map[string]any(name='ExtraData', description='The Input parameters of the task execution.', example='{                     "NotifyNote":""                 }'),
      loop?: map[string]any(name='Loop', description='The ID of the template.', example='{}'),
      loopBatchNumber?: int32(name='LoopBatchNumber', description='The status information of the task execution.', example='2'),
      loopItem?: string(name='LoopItem', description='The time when the execution was created.', example='i-1234566zxcvvb'),
      outputs?: string(name='Outputs', description='The status of the task.', example='{ "InstanceId":"i-xxx" }'),
      parentTaskExecutionId?: string(name='ParentTaskExecutionId', description='The name of the task.', example='task-exec-xxx'),
      properties?: string(name='Properties', description='Queries task executions. Multiple methods are supported to filter task executions.', example='{ "Status":"Running" }'),
      startDate?: string(name='StartDate', description='The elements in the loop task.', example='2019-05-16T10:26:14Z'),
      status?: string(name='Status', description='The time when the task execution stopped running.', example='Running'),
      statusMessage?: string(name='StatusMessage', description='The additional information.', example='""'),
      taskAction?: string(name='TaskAction', description='The execution ID of the task.', example='ACS::Sleep'),
      taskExecutionId?: string(name='TaskExecutionId', description='The time when the execution was last updated.', example='task-exec-xxx'),
      taskName?: string(name='TaskName', description='The time when the execution started.', example='describeInstance'),
      templateId?: string(name='TemplateId', description='The number of times for which the loop task is run.', example='xxx'),
      updateDate?: string(name='UpdateDate', description='The configuration and statistics information of the loop task. This parameter is returned only for the parent node of the loop task.', example='2019-05-16T10:26:14Z'),
    }
  ](name='TaskExecutions', description='The execution ID of the child node.'),
}

model ListTaskExecutionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTaskExecutionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTaskExecutions  ListTaskExecutionsRequest
  * @return ListTaskExecutionsResponse
 */
async function listTaskExecutions(request: ListTaskExecutionsRequest): ListTaskExecutionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTaskExecutions', 'POST', '/', 'json', false, 'json', request);
}

model ListTemplateVersionsRequest {
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 10 to 100', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='H8xj9c-398djs9-39ajd9asdjjJ', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  shareType?: string(name='ShareType', description='The type of the template. Valid values: Private and Public.', example='Private', position='Query'),
  templateName: string(name='TemplateName', description='The name of the template.

This parameter is required.', example='describeinstances', position='Query'),
}

model ListTemplateVersionsResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries per page.', example='50'),
  nextToken?: string(name='NextToken', description='A pagination token. It can be used in the next request to retrieve a new page of results.', example='NJSNDKLJS-SJKJDO090k30-JSDK232'),
  requestId?: string(name='RequestId', description='The request ID.', example='E6CD612B-5889-4F1A-823F-8A4029E46'),
  templateVersions?: [ 
    {
      description?: string(name='Description', description='The description of the version.', example='Detach the eip from the special instance.'),
      templateFormat?: string(name='TemplateFormat', description='The format of the template content. Valid values: YAML and JSON.', example='YAML'),
      templateVersion?: string(name='TemplateVersion', description='The number of the version.', example='v2'),
      updatedBy?: string(name='UpdatedBy', description='The user who last updated the version.', example='foo'),
      updatedDate?: string(name='UpdatedDate', description='The time when the version was last updated.', example='2020-05-19T06:05:41Z'),
      versionName?: string(name='VersionName', description='The name of the version.', example='baz'),
    }
  ](name='TemplateVersions', description='The versions of the template.'),
}

model ListTemplateVersionsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTemplateVersionsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTemplateVersions  ListTemplateVersionsRequest
  * @return ListTemplateVersionsResponse
 */
async function listTemplateVersions(request: ListTemplateVersionsRequest): ListTemplateVersionsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTemplateVersions', 'POST', '/', 'json', false, 'json', request);
}

model ListTemplatesRequest {
  category?: string(name='Category', description='The type of the template. Valid values include TimerTrigger, EventTrigger, AlarmTrigger, and Other.', example='TimerTrigger', position='Query'),
  createdBy?: string(name='CreatedBy', description='The creator of the template.

*   To query the template provided by Alibaba Cloud, set this parameter to **ACS**.
*   To query the template created by a user, set this parameter to the **ID** of the template or the **name of the user** who creates the template.', example='ACS', position='Query'),
  createdDateAfter?: string(name='CreatedDateAfter', description='Specifies to query the template that is created at or later than the specified time.

The value must be in the YYYY-MM-DDThh:mm:ssZ format.', example='2019-05-16T10:26:14Z', position='Query'),
  createdDateBefore?: string(name='CreatedDateBefore', description='Specifies to query the template that is created at or before the specified time.

The value must be in the YYYY-MM-DDThh:mm::ssZ format.', example='2019-05-16T10:26:14Z', position='Query'),
  hasTrigger?: boolean(name='HasTrigger', description='Specifies whether to query the template that is configured with a trigger.', example='true', position='Query'),
  isExample?: boolean(name='IsExample', description='Specifies whether the template is an example template.', example='false', position='Query'),
  isFavorite?: boolean(name='IsFavorite', description='Specifies whether the template is added to favorites.', example='true', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 10 to 100. Default value: 50.', example='50', position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='xxx', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which you want to query templates.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******', position='Query'),
  shareType?: string(name='ShareType', description='The share type of the template. Valid values:

*   **Public**
*   **Private**', example='Private', position='Query'),
  sortField?: string(name='SortField', description='The field that is used to sort the templates to be queried. Valid values:

*   **TotalExecutionCount** (default): The system sorts the returned templates based on the total number of times that the templates are used.
*   **Popularity**: The system sorts the returned templates based on the popularity of the templates.
*   **TemplateName**: The system sorts the returned templates based on the names of the templates.
*   **CreatedDate**: The system sorts the returned templates based on the points in time when the templates are created.
*   **UpdatedDate**: The system sorts the returned templates based on the points in time when the templates are updated.', example='Popularity', position='Query'),
  sortOrder?: string(name='SortOrder', description='The order in which you want to sort the results. Valid values:

*   **Ascending**: ascending order.
*   **Descending**: descending order. This is the default value.', example='Descending', position='Query'),
  tags?: map[string]any(name='Tags', description='The tag keys and values. The number of key-value pairs ranges from 1 to 20.', example='{"k1":"k2","k2":"v2"}', shrink='json', position='Query'),
  templateFormat?: string(name='TemplateFormat', description='The format of the template. Valid values:

*   **JSON**
*   **YAML**', example='YAML', position='Query'),
  templateName?: string(name='TemplateName', description='The name of the template. All templates whose names contain the specified template name are to be returned.', example='MyTemplate', position='Query'),
  templateType?: string(name='TemplateType', description='The type of the template. Valid values:

*   Automation: the template for automated tasks.
*   State: the template for configuration inventories.
*   Package: the template for software packages.', example='private', position='Query'),
}

model ListTemplatesResponseBody = {
  maxResults?: int32(name='MaxResults', description='The number of entries returned on each page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='xxx'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='BEF54BA-17B6-449F-A219-49ACB157E3'),
  templates?: [ 
    {
      category?: string(name='Category', description='The template type.', example='TimerTrigger'),
      constraints?: string(name='Constraints', description='The template constraints.', example='{
  "InstanceTypeFamilies": ["ecs.g8y", "ecs.c8y"],
  "ImageTypes": ["system"],
  "OSPlatforms": ["CentOS", "Ubuntu"],
  "OSVersions": ["CentOS7.9 64bit"]
}'),
      createdBy?: string(name='CreatedBy', description='The user who created the template.', example='root(1309200)'),
      createdDate?: string(name='CreatedDate', description='The creation time of the template.', example='2019-05-16T10:26:14Z'),
      description?: string(name='Description', description='The template description.', example='Describe instances of given status'),
      hasTrigger?: boolean(name='HasTrigger', description='Indicates whether the template was configured with a trigger.', example='true'),
      hash?: string(name='Hash', description='The SHA256 value of the template content.', example='4bc7d7a21b3e003434b9c223f6e6d2578b5ebfeb5be28c1fcf8a8a1b11907bb4'),
      isFavorite?: boolean(name='IsFavorite', description='Indicates whether the template is added to favorites.', example='true'),
      popularity?: int32(name='Popularity', description='The popularity of the public template. Valid values: **1-10**. A greater value indicates higher popularity. If **ShareType** is set to **Private**, the value of this parameter is `-1`.

>  This parameter is valid only if **ShareType** is set to **Public**.', example='8'),
      publisher?: string(name='Publisher', description='The user who published the template.', example='aliyun'),
      resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
      shareType?: string(name='ShareType', description='The share type of the template. The share type of a template created by a user is **Private**. Valid values:

*   **Public**
*   **Private**', example='Public'),
      tags?: map[string]any(name='Tags', description='The tag keys and values. The number of key-value pairs ranges from 1 to 20.', example='{"k1":"v1","k2":"v2"}'),
      templateFormat?: string(name='TemplateFormat', description='The template format. The system automatically determines whether the format of the template is JSON or YAML.', example='JSON'),
      templateId?: string(name='TemplateId', description='The template ID.', example='t-94753deed38'),
      templateName?: string(name='TemplateName', description='The template name.', example='MyTemplate'),
      templateType?: string(name='TemplateType', description='The template type.', example='private'),
      templateVersion?: string(name='TemplateVersion', description='The template version. The version contains the letter v and a number. The number starts from 1.', example='v1'),
      totalExecutionCount?: int32(name='TotalExecutionCount', description='The number of times for which the private template is executed. If **ShareType** is set to **Public**, the value of this parameter is `-1`.

>  This parameter is valid only if **ShareType** is set to **Private**.', example='5'),
      updatedBy?: string(name='UpdatedBy', description='The user who last updated the template.', example='root(13092000)'),
      updatedDate?: string(name='UpdatedDate', description='The time when the template was last updated.', example='2019-05-16T10:26:14Z'),
      versionName?: string(name='VersionName', description='The version name.', example='v2.1'),
    }
  ](name='Templates', description='The template metadata.'),
}

model ListTemplatesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ListTemplatesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ListTemplates  ListTemplatesRequest
  * @return ListTemplatesResponse
 */
async function listTemplates(request: ListTemplatesRequest): ListTemplatesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ListTemplates', 'POST', '/', 'json', false, 'json', request);
}

model NotifyExecutionRequest {
  executionId: string(name='ExecutionId', description='The ID of the execution.

This parameter is required.', example='exec-xxx', position='Query'),
  executionStatus?: string(name='ExecutionStatus', description='The state of the terminated execution. This parameter is valid if you set the NotifyType parameter to CompleteExecution.', example='Success', position='Query'),
  loopItem?: string(name='LoopItem', description='The items of the child node in the loop task.', example='i-xxx', position='Query'),
  notifyNote?: string(name='NotifyNote', description='The description for the notification.', example='Note', position='Query'),
  notifyType: string(name='NotifyType', description='The type of the notification. Valid values:

*   **ExecuteTask**: starts to run a specific task. This value is used if you perform debugging in the Debug mode. If you set this parameter to ExecuteTask, you also need to set the Parameters parameter.
*   **CancelTask**: cancels a current task. This value is used if you perform debugging in the Debug mode.
*   **CompleteExecution**: manually terminates an execution if you perform debugging in the Debug mode. You can specify the state of the terminated execution by using the **ExecutionStatus** parameter.
*   **Approve**: approves an execution. For example, you are aware of the risks of an operation task and agree to approve the execution.
*   **Reject**: rejects an execution. For example, you want to reject the execution of a high-risk operation task.
*   **RetryTask**: retries a failed task whose execution mode is Suspend upon Failure.
*   **SkipTask**: skips a failed task whose execution mode is Suspend upon Failure.

This parameter is required.', example='Approve', position='Query'),
  parameters?: string(name='Parameters', description='The parameters of the subsequent task. This parameter is valid if you set the NotifyType parameter to ExecuteTask.', example='{}', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the execution resides.', example='cn-hangzhou', position='Query'),
  taskExecutionId?: string(name='TaskExecutionId', description='The execution ID of the task.', example='task-exec-xxx', position='Query'),
  taskExecutionIds?: string(name='TaskExecutionIds', description='The execution IDs of the tasks.', example='["exec-79c321c11003a97c","exec-79c321c11003aqw97cz"]', position='Query'),
  taskName?: string(name='TaskName', description='The name of the subsequent task.', example='describeInstance', position='Query'),
}

model NotifyExecutionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='491DF8C2-34C9-4679-9DB3-4C0F49B129AC'),
}

model NotifyExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: NotifyExecutionResponseBody(name='body'),
}

/**
  * @description You can call this operation to notify an execution in the following scenarios:
  * *   If a template contains a special task, such as an approval task, the Operation Orchestration Service (OOS) execution engine sets the execution state to Waiting when the approval task is being run. You can call this operation to specify whether to continue the execution.
  * *   If you perform debugging in the debug mode, you can call this operation to notify the execution of the subsequent operations after the execution is created or a task is complete.
  * *   If a high-risk operation task waits for approval, you can call this operation to specify whether to continue the execution.
  * @param request  the request parameters of NotifyExecution  NotifyExecutionRequest
  * @return NotifyExecutionResponse
 */
async function notifyExecution(request: NotifyExecutionRequest): NotifyExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'NotifyExecution', 'POST', '/', 'json', false, 'json', request);
}

model RegisterDefaultPatchBaselineRequest {
  name: string(name='Name', description='The name of the patch baseline.

This parameter is required.', example='MyPatchBaseline', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model RegisterDefaultPatchBaselineResponseBody = {
  patchBaseline?: {
    approvalRules?: string(name='ApprovalRules', description='The rules of scanning and installing patches for the specified operating system.', example='{"PatchRules":[{"PatchFilterGroup":[{"Key":"PatchSet","Values":["OS"]},{"Key":"ProductFamily","Values":["Windows"]},{"Key":"Product","Values":["Windows 10","Windows 7"]},{"Key":"Classification","Values":["Security Updates","Updates","Update Rollups","Critical Updates"]},{"Key":"Severity","Values":["Critical","Important","Moderate"]}],"ApproveAfterDays":7,"ApproveUntilDate":"","EnableNonSecurity":true,"ComplianceLevel":"Medium"}]}'),
    createdBy?: string(name='CreatedBy', description='The user who created the patch baseline.', example='root(130900000)'),
    createdDate?: string(name='CreatedDate', description='The time when the patch baseline was created.', example='2021-09-07T03:42:56Z'),
    description?: string(name='Description', description='The description of the patch baseline.', example='RegisterPatchBaseline'),
    id?: string(name='Id', description='The ID of the patch baseline.', example='pb-445340b5c6504a85a300'),
    name?: string(name='Name', description='The name of the patch baseline.', example='MyPatchBaseline'),
    operationSystem?: string(name='OperationSystem', description='The operating system.', example='Windows'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfm4dpaq2yox6q'),
    shareType?: string(name='ShareType', description='The share type of the patch baseline.', example='Private'),
    updatedBy?: string(name='UpdatedBy', description='The user who last updated the patch baseline.', example='root(130900000)'),
    updatedDate?: string(name='UpdatedDate', description='The time when the patch baseline was last updated.', example='2021-09-07T03:42:56Z'),
  }(name='PatchBaseline', description='The details of the patch baseline.'),
  requestId?: string(name='RequestId', description='The request ID.', example='D6850689-348D-59FC-AE13-BB0EDB7C4BE8'),
}

model RegisterDefaultPatchBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: RegisterDefaultPatchBaselineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of RegisterDefaultPatchBaseline  RegisterDefaultPatchBaselineRequest
  * @return RegisterDefaultPatchBaselineResponse
 */
async function registerDefaultPatchBaseline(request: RegisterDefaultPatchBaselineRequest): RegisterDefaultPatchBaselineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'RegisterDefaultPatchBaseline', 'POST', '/', 'json', false, 'json', request);
}

model SearchInventoryRequest {
  aggregator?: [ string ](name='Aggregator', description='The information about aggregators. You can use one or more aggregators to query the aggregate information of an instance. Valid values:

*   ACS:Application.Name
*   ACS:Application.Version', example='ACS:Application.Name', position='Query'),
  filter?: [ 
    {
      name?: string(name='Name', description='The name of the component property. Valid values of N: 1 to 5. Different components have different property names. You can call the [GetInventorySchema](https://api.aliyun.com/#/?product=oos\\&version=2019-06-01\\&api=GetInventorySchema) operation to query the property names of different components. For example, the ACS:InstanceInformation component has the InstanceId property. Therefore, you can set this parameter to ACS:InstanceInformation.InstanceId.', example='ACS:InstanceInformation.InstanceId'),
      operator?: string(name='Operator', description='The comparison operator that is used to filter property values. Valid values of N: 1 to 5. Valid values:

*   Equal
*   NotEqual
*   BeginWith
*   LessThan
*   GreaterThan', example='Equal'),
      value?: [ string ](name='Value', description='The property values to query.', example='i-bp1cpoxxxxxxxxxxxxxx'),
    }
  ](name='Filter', description='The filter rules for the component.', position='Query'),
  maxResults?: int32(name='MaxResults', description='The number of entries per page. Valid values: 1 to 100. Default value: 50.', example='50', minimum=1, maximum=100, position='Query'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='gAAAAABfTgv5ewUWmNdJ3g7JVLvX70sPH90GZOVGC', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
}

model SearchInventoryResponseBody = {
  entities?: [  map[string]any ](name='Entities'),
  maxResults?: int32(name='MaxResults', description='The number of entries returned per page.', example='50'),
  nextToken?: string(name='NextToken', description='The token that is used to retrieve the next page of results.', example='gAAAAABfTgv5ewUWmNdJ3g7JVLvX70sPH90GZOVGC'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='A81E4B2E-6B33-4BAE-9856-55DB7C893E01'),
}

model SearchInventoryResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SearchInventoryResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SearchInventory  SearchInventoryRequest
  * @return SearchInventoryResponse
 */
async function searchInventory(request: SearchInventoryRequest): SearchInventoryResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SearchInventory', 'POST', '/', 'json', false, 'json', request);
}

model SetServiceSettingsRequest {
  deliveryOssBucketName?: string(name='DeliveryOssBucketName', description='The name of OSS bucket to deliver.', example='OssBucketName', position='Query'),
  deliveryOssEnabled?: boolean(name='DeliveryOssEnabled', description='Whether to enable OSS delivery.', example='false', position='Query'),
  deliveryOssKeyPrefix?: string(name='DeliveryOssKeyPrefix', description='The key prefix of OSS to deliver.', example='oos/execution', position='Query'),
  deliverySlsEnabled?: boolean(name='DeliverySlsEnabled', description='Whether to enable SLS delivery.', example='false', position='Query'),
  deliverySlsProjectName?: string(name='DeliverySlsProjectName', description='The name of SLS project to deliver.', example='SlsProjectName', position='Query'),
  rdcEnterpriseId?: string(name='RdcEnterpriseId', description='The id of RDC Enterprise.', example='RdcEnterpriseId', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
}

model SetServiceSettingsResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='CBEC8072-BEC2-478E-8EAE-E723BA79CF19'),
  serviceSettings?: [ 
    {
      deliveryOssBucketName?: string(name='DeliveryOssBucketName', description='The name of OSS bucket to deliver.', example='OssBucketName'),
      deliveryOssEnabled?: boolean(name='DeliveryOssEnabled', description='Whether to enable OSS delivery.', example='true'),
      deliveryOssKeyPrefix?: string(name='DeliveryOssKeyPrefix', description='The key prefix of OSS to deliver.', example='oos/execution'),
      deliverySlsEnabled?: boolean(name='DeliverySlsEnabled', description='Whether to enable SLS delivery.', example='false'),
      deliverySlsProjectName?: string(name='DeliverySlsProjectName', description='The name of SLS project to deliver.', example='SlsProjectName'),
      rdcEnterpriseId?: string(name='RdcEnterpriseId', description='The id of RDC Enterprise.', example='RdcEnterpriseId'),
    }
  ](name='ServiceSettings', description='The information of service settings.'),
}

model SetServiceSettingsResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: SetServiceSettingsResponseBody(name='body'),
}

/**
  * @param request  the request parameters of SetServiceSettings  SetServiceSettingsRequest
  * @return SetServiceSettingsResponse
 */
async function setServiceSettings(request: SetServiceSettingsRequest): SetServiceSettingsResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'SetServiceSettings', 'POST', '/', 'json', false, 'json', request);
}

model StartExecutionRequest {
  clientToken?: string(name='ClientToken', description='The access token.', example='123e56767-e89b-12d3-a456-426655440000', position='Query'),
  description?: string(name='Description', description='The description of the execution.', example='test execution.', position='Query'),
  loopMode?: string(name='LoopMode', description='The loop mode. Valid values:

*   Automatic: does not suspend the execution of the template. This is the default value.
*   FirstBatchPause: suspends the execution of the template after the first batch is complete.
*   EveryBatchPause: suspends the execution of the template after each batch is complete.', example='Automatic', position='Query'),
  mode?: string(name='Mode', description='The execution mode. Valid values:

*   Automatic: automatically starts the execution of the template. This is the default value.
*   FailurePause: suspends the execution of the template upon a failure.
*   Debug: manually starts the execution of the template.', example='Automatic', position='Query'),
  parameters?: string(name='Parameters', description='The JSON string that consists of a set of parameters. Default value: {}.', example='{"Status":"Running"}', position='Query'),
  parentExecutionId?: string(name='ParentExecutionId', description='The ID of the parent execution.', example='exec-xxx', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region in which the execution resides.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******', position='Query'),
  safetyCheck?: string(name='SafetyCheck', description='The security check mode. Valid values:

*   Skip: specifies that you are aware of the risks. The system performs all actions in the execution without manual confirmation, regardless of the risk level. This parameter is valid only if the `Mode` parameter is set to Automatic.
*   ConfirmEveryHighRiskAction: requires you to confirm each high-risk action. This is the default value. You can call the **NotifyExecution** operation to confirm or cancel an action.', example='Skip', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags for the execution.', example='{"k1":"v2","k2":"v2"}', shrink='json', position='Query'),
  templateContent?: string(name='TemplateContent', description='The content of the template in the JSON or YAML format. This parameter is the same as the Content parameter that you can specify when you call the CreateTemplate operation. You can use this parameter to specify the tasks that you want to run. This way, you do not need to create a template before you start an execution. If you select an existing template, you do not need to specify this parameter.', example='{   "Description": "Example template, describe instances in some status",   "FormatVersion": "OOS-2019-06-01",   "Parameters": {},   "Tasks": [     {       "Name": "describeInstances",       "Action": "ACS::ExecuteAPI",       "Description": "desc-en",       "Properties": {         "Service": "ECS",         "API": "DescribeInstances",         "Parameters": {           "Status": "Running"         }       }     }   ] }', position='Query'),
  templateName?: string(name='TemplateName', description='The name of the template. The name must be 1 to 200 characters in length, and can contain letters, digits, hyphens (-), and underscores (_).', example='vmeixme', position='Query'),
  templateURL?: string(name='TemplateURL', description='The Object Storage Service (OSS) URL of the object that stores the content of the Operation Orchestration Service (OOS) template. The access control list (ACL) of the object must be public-read. You can use this parameter to specify the tasks that you want to run. This way, you do not need to create a template before you start an execution. If you select an existing template, you do not need to specify this parameter.', example='http://oos-template.cn-hangzhou.oss.aliyun-inc.com/oos-test-template.json', position='Query'),
  templateVersion?: string(name='TemplateVersion', description='The version number of the template. If you do not specify this parameter, the system uses the latest version.', example='v1', position='Query'),
}

model StartExecutionResponseBody = {
  execution?: {
    counters?: map[string]any(name='Counters', description='The number of executions.', example='1'),
    createDate?: string(name='CreateDate', description='The time when the execution was created.', example='2019-05-16T10:26:14Z'),
    currentTasks?: [ 
      {
        taskAction?: string(name='TaskAction', description='The action of the task.', example='ACS::TimerTrigger'),
        taskExecutionId?: string(name='TaskExecutionId', description='The execution ID of the task.', example='exec-dsadasdawq'),
        taskName?: string(name='TaskName', description='The name of the task.', example='testTask'),
      }
    ](name='CurrentTasks', description='The information about in-progress tasks.'),
    description?: string(name='Description', description='The description of the execution.', example='test execution.'),
    endDate?: string(name='EndDate', description='The time when the execution stopped.', example='2019-05-16T10:26:14Z'),
    executedBy?: string(name='ExecutedBy', description='The account ID of the user who started the execution of the template.', example='root(13092080xx12344)'),
    executionId?: string(name='ExecutionId', description='The GUID of the execution.', example='exec-xxxyyy'),
    isParent?: boolean(name='IsParent', description='Indicates whether the execution is a parent execution.', example='false'),
    loopMode?: string(name='LoopMode', description='The loop mode.', example='Automatic'),
    mode?: string(name='Mode', description='The execution mode.', example='Automatic'),
    outputs?: string(name='Outputs', description='The output of the execution.', example='{ "InstanceId":"i-xxx" }'),
    parameters?: string(name='Parameters', description='The input parameters of the execution.', example='{ "Status":"Running" }'),
    parentExecutionId?: string(name='ParentExecutionId', description='The ID of the parent execution.', example='exec-xxxx'),
    ramRole?: string(name='RamRole', description='The role that started the execution of the template.', example='OOSServiceRole'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
    safetyCheck?: string(name='SafetyCheck', description='The security check mode.', example='Skip'),
    startDate?: string(name='StartDate', description='The time when the execution was started.', example='2019-05-16T10:26:14Z'),
    status?: string(name='Status', description='The status of the execution.', example='Success'),
    statusMessage?: string(name='StatusMessage', description='The status information of the execution.', example='""'),
    tags?: map[string]any(name='Tags', description='The tags of the execution.', example='{"k1":"v2","k2":"v2"}'),
    templateId?: string(name='TemplateId', description='The ID of the template.', example='t-1bd341007f'),
    templateName?: string(name='TemplateName', description='The name of the template.', example='MyTemplate'),
    templateVersion?: string(name='TemplateVersion', description='The version number of the template.', example='v1'),
    updateDate?: string(name='UpdateDate', description='The time when the execution was last updated.', example='2019-05-16T10:26:14Z'),
  }(name='Execution', description='The details of the execution.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
}

model StartExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: StartExecutionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of StartExecution  StartExecutionRequest
  * @return StartExecutionResponse
 */
async function startExecution(request: StartExecutionRequest): StartExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'StartExecution', 'POST', '/', 'json', false, 'json', request);
}

model TagResourcesRequest {
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceIds: map[string]any(name='ResourceIds', description='The IDs of the resources for which you want to modify the resource group. The number of resource IDs is 1 to 50.

*   If you set ResourceType to template, specify ResourceIds in the ["TemplateName1","TemplateName2"] format.
*   If you set ResourceType to parameter, specify ResourceIds in the ["Name1","Name2"] format.
*   If you set ResourceType to secretparameter, specify ResourceIds in the ["Name1","Name2"] format.
*   If you set ResourceType to stateconfiguration, specify ResourceIds in the ["StateConfigurationId 1","StateConfigurationId 2"] format.
*   If you set ResourceType to application, specify ResourceIds in the ["Name1","Name2"] format.

This parameter is required.', example='["templateName1","templateName2"]', shrink='json', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource for which you want to modify the resource group. Valid values:

*   template: template.
*   parameter: parameter.
*   secretparameter: encryption parameter.
*   stateconfiguration: desired-state configuration.
*   application: application.

This parameter is required.', example='template', position='Query'),
  tags: map[string]any(name='Tags', description='The tag keys and values. The number of key-value pairs ranges from 1 to 20.

This parameter is required.', example='{"k1":"v1","k2":"v2"}', shrink='json', position='Query'),
}

model TagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='B19AE203-FD99-49C7-9253-FAAACAD46F4A'),
}

model TagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TagResources  TagResourcesRequest
  * @return TagResourcesResponse
 */
async function tagResources(request: TagResourcesRequest): TagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TagResources', 'POST', '/', 'json', false, 'json', request);
}

model TriggerExecutionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='dswe2-3i0-029', position='Query'),
  content?: string(name='Content', description='The message body to be sent to the trigger task.', example='{"eventTime": "20181226T220114.058+0800", "id": "9435EAD6-3CF6-4494-8F7A-3A********77","level": "INFO","name": "Instance:StateChange","product": "ECS","regionId":"cn-hangzhou","resourceId": "acs:ecs:cn-hangzhou:169070********30:instance/i-bp1ecr********5go2go","userId": "169070********30","ver": "1.0","content": {"resourceId": "i-bp1ecr********5go2go", "resourceType": "ALIYUN::ECS::Instance","state": "Stopping"} }', position='Query'),
  executionId: string(name='ExecutionId', description='The ID of the event-, alert-, or timer-triggered execution.

This parameter is required.', example='exec-sadw3f23rsad', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  type: string(name='Type', description='The type of the trigger. Valid values:

*   Event
*   Alarm
*   Timer

This parameter is required.', example='Event', position='Query'),
}

model TriggerExecutionResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='14A07460-EBE7-47CA-9757-12CC4761D47A'),
}

model TriggerExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: TriggerExecutionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of TriggerExecution  TriggerExecutionRequest
  * @return TriggerExecutionResponse
 */
async function triggerExecution(request: TriggerExecutionRequest): TriggerExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'TriggerExecution', 'POST', '/', 'json', false, 'json', request);
}

model UntagResourcesRequest {
  all?: boolean(name='All', description='Specifies whether to remove all tags. This parameter takes effect only if TagKeys is left empty. Valid values: true and false. Default value: false. TagKeys is required if this parameter is set to false.', example='false', position='Query'),
  regionId: string(name='RegionId', description='The region ID.

This parameter is required.', example='cn-hangzhou', position='Query'),
  resourceIds: map[string]any(name='ResourceIds', description='The IDs of the resources for which you want to modify the resource group. The number of resource IDs is 1 to 50.

*   If you set ResourceType to template, specify ResourceIds in the ["TemplateName1","TemplateName2"] format.
*   If you set ResourceType to parameter, specify ResourceIds in the ["Name1","Name2"] format.
*   If you set ResourceType to secretparameter, specify ResourceIds in the ["Name1","Name2"] format.
*   If you set ResourceType to stateconfiguration, specify ResourceIds in the ["StateConfigurationId 1","StateConfigurationId 2"] format.
*   If you set ResourceType to application, specify ResourceIds in the ["Name1","Name2"] format.

This parameter is required.', example='["templateName1","templateName2"]', shrink='json', position='Query'),
  resourceType: string(name='ResourceType', description='The type of the resource for which you want to modify the resource group. Valid values:

*   template: template.
*   parameter: parameter.
*   secretparameter: encryption parameter.
*   stateconfiguration: desired-state configuration.
*   application: application.

This parameter is required.', example='template', position='Query'),
  tagKeys?: map[string]any(name='TagKeys', description='The tag keys. The number of keys ranges from 1 to 20.', example='["k1","k2"]', shrink='json', position='Query'),
}

model UntagResourcesResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='491DF8C2-34C9-4679-9DB3-4C0F49B129AC'),
}

model UntagResourcesResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UntagResourcesResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UntagResources  UntagResourcesRequest
  * @return UntagResourcesResponse
 */
async function untagResources(request: UntagResourcesRequest): UntagResourcesResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UntagResources', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApplicationRequest {
  alarmConfig?: {
    contactGroups?: [ string ](name='ContactGroups', description='The alert contact groups.'),
    healthCheckUrl?: string(name='HealthCheckUrl', description='The health check URL of the application.', example='/healthcheck/tcp50122'),
    templateIds?: [ string ](name='TemplateIds', description='The alert templates.'),
  }(name='AlarmConfig', description='The configurations of application alerts.', shrink='json', position='Query'),
  deleteAlarmRulesBeforeUpdate?: boolean(name='DeleteAlarmRulesBeforeUpdate', description='Specifies whether to delete existing alert rules before applying the alert template. Default value: false.', example='false', position='Query'),
  description?: string(name='Description', description='The description to be updated for the application.', example='test application', position='Query'),
  name: string(name='Name', description='The application name.

This parameter is required.', example='My-Application', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags.', example='{"k1":"v1","k2":"v2"}', shrink='json', position='Query'),
}

model UpdateApplicationResponseBody = {
  application?: {
    createdDate?: string(name='CreatedDate', description='The time when the application was created.', example='2021-09-07T09:17:46Z'),
    description?: string(name='Description', description='The description of the application.', example='test application'),
    name?: string(name='Name', description='The application name.', example='My-Application'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m*****'),
    tags?: map[string]any(name='Tags', description='The tags.', example='{"k1":"v1","k2":"v2"}'),
    updatedDate?: string(name='UpdatedDate', description='The time when the application was updated.', example='2021-09-07T10:17:46Z'),
  }(name='Application', description='The information about the application.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='F1F00F41-D24C-5377-831B-C97F739CE1AB'),
}

model UpdateApplicationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateApplicationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateApplication  UpdateApplicationRequest
  * @return UpdateApplicationResponse
 */
async function updateApplication(request: UpdateApplicationRequest): UpdateApplicationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApplication', 'POST', '/', 'json', false, 'json', request);
}

model UpdateApplicationGroupRequest {
  applicationName: string(name='ApplicationName', description='The application name.

This parameter is required.', example='MyApplication', position='Query'),
  name: string(name='Name', description='The name of the application group.

This parameter is required.', example='MyApplicationGroup', position='Query'),
  newName?: string(name='NewName', description='The new name of the application group.', example='UpdateMyApplicationGroup', position='Query'),
  operationName?: string(name='OperationName', description='The name of the configuration update operation.', example='/business/v1/product/spus/{spu_id}', position='Query'),
  parameters?: map[string]any(name='Parameters', description='The JSON string that consists of a set of parameters. Default value: {}.', example='{"username": "xx"}', shrink='json', position='Query'),
  regionId?: string(name='RegionId', description='The region ID. Set the value to cn-hangzhou.', example='cn-hangzhou', position='Query'),
}

model UpdateApplicationGroupResponseBody = {
  applicationGroup?: {
    applicationName?: string(name='ApplicationName', description='The application name.', example='MyApplication'),
    createdDate?: string(name='CreatedDate', description='The time when the application group was created.', example='2021-09-07T10:28:25Z'),
    deployRegionId?: string(name='DeployRegionId', description='The ID of the region in which the related resources reside.', example='cn-hangzhou'),
    description?: string(name='Description', description='The description of the application group.', example='ApplicationGroup'),
    importTagKey?: string(name='ImportTagKey', description='The key of the tag.', example='k1'),
    importTagValue?: string(name='ImportTagValue', description='The value of the tag.', example='v1'),
    name?: string(name='Name', description='The name of the application group.', example='UpdateMyApplicationGroup'),
    updatedDate?: string(name='UpdatedDate', description='The time when the application group was updated.', example='2021-09-08T03:01:53Z'),
  }(name='ApplicationGroup', description='The information about the application group.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='AA9FA778-AE4B-55EC-81CC-C46BAF08A166'),
}

model UpdateApplicationGroupResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateApplicationGroupResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateApplicationGroup  UpdateApplicationGroupRequest
  * @return UpdateApplicationGroupResponse
 */
async function updateApplicationGroup(request: UpdateApplicationGroupRequest): UpdateApplicationGroupResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateApplicationGroup', 'POST', '/', 'json', false, 'json', request);
}

model UpdateExecutionRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='123e4567-e89b-12d3-a456-42665544****', position='Query'),
  description?: string(name='Description', description='The description of the execution.', example='Execution description', position='Query'),
  executionId: string(name='ExecutionId', description='The ID of the execution.

This parameter is required.', example='exec-c223xxxxxxxxxxxxxxxx', position='Query'),
  parameters?: string(name='Parameters', description='The information about the parameters.', example='{"Status":"Running"}', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m*****', position='Query'),
  tags?: string(name='Tags', description='The tags of the execution.', example='{"k1": "v1", "k2": "v2"}', position='Query'),
}

model UpdateExecutionResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='C8345E88-5334-469E-901D-F912C8CB9C55'),
}

model UpdateExecutionResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateExecutionResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateExecution  UpdateExecutionRequest
  * @return UpdateExecutionResponse
 */
async function updateExecution(request: UpdateExecutionRequest): UpdateExecutionResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateExecution', 'POST', '/', 'json', false, 'json', request);
}

model UpdateInstancePackageStateRequest {
  configureAction: string(name='ConfigureAction', description='The operation type.

Valid values:

*   uninstall
*   install

This parameter is required.', example='install', position='Query'),
  instanceId: string(name='InstanceId', description='The ID of the Elastic Compute Service (ECS) instance.

This parameter is required.', example='i-bp1jaxa2bs4bps7*****', position='Query'),
  parameters?: map[string]any(name='Parameters', description='The parameters for installing or uninstalling the extensions.', example='{"username": "xx"}', shrink='json', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  templateName: string(name='TemplateName', description='The name of the template.

This parameter is required.', example='ACS-ECS-InventoryDataCollection', position='Query'),
  templateVersion?: string(name='TemplateVersion', description='The version of the template.', example='v1', position='Query'),
}

model UpdateInstancePackageStateResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='2597E94B-5346-42D1-BB58-XXXXXXXXXXX'),
}

model UpdateInstancePackageStateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateInstancePackageStateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateInstancePackageState  UpdateInstancePackageStateRequest
  * @return UpdateInstancePackageStateResponse
 */
async function updateInstancePackageState(request: UpdateInstancePackageStateRequest): UpdateInstancePackageStateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateInstancePackageState', 'POST', '/', 'json', false, 'json', request);
}

model UpdateOpsItemRequest {
  category?: string(name='Category', description='The category.', example='Security', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='DASKJJLKADS-AHKLJHJSAKL-AJK', position='Query'),
  dedupString?: string(name='DedupString', description='The string to be deduplicated.', example='ecs_instance_SystemMaintenance.Reboot', position='Query'),
  description?: string(name='Description', description='The description of the O\\&M item.', example='test-update', position='Query'),
  opsItemId?: string(name='OpsItemId', description='The ID of the O\\&M item.', example='oi-e2264dcf040c472598e9', position='Query'),
  priority?: int32(name='Priority', description='The priority.', example='2', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******', position='Query'),
  resources?: string(name='Resources', description='The Alibaba Resource Names (ARNs) of the associated resources.', example='[\\"arn:acs:ecs:cn-heyuan:1139354755361920:instance/i-f8z928h7aqotd3o65032\\"]', position='Query'),
  severity?: string(name='Severity', description='The severity level.', example='Medium', position='Query'),
  solutions?: string(name='Solutions', description='The solutions.', example='[{\\n \\\\"priority\\\\":3,\\n \\\\"type\\\\":\\\\"url\\\\",\\n \\\\"url\\\\":\\\\"https://example.com\\\\",\\n \\\\"description\\\\":\\\\"Specify a cross-zone high availability cluster. \\\\"\\n}]', position='Query'),
  source?: string(name='Source', description='The source business.', example='/aliyun/ecs', position='Query'),
  status?: string(name='Status', description='The status.', example='Open', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags.', example='{
      "k1": "v1",
      "k2": "v2"
}', shrink='json', position='Query'),
  title?: string(name='Title', description='The title of the O\\&M item.', example='Test', position='Query'),
}

model UpdateOpsItemResponseBody = {
  opsItem?: {
    attributes?: string(name='Attributes', description='The attributes of the O\\&M item.', example='[{\\"Attribute\\": {\\"Weight\\": 100}, \\"RealServer\\": \\"uaejc8hnqzqz5valyh8dibolpvza48ik.yundunwaf5.com\\"}]'),
    category?: string(name='Category', description='The category.', example='Security'),
    createDate?: string(name='CreateDate', description='The time when the O\\&M item was created.', example='2023-03-16T07:04Z'),
    createdBy?: string(name='CreatedBy', description='The user who created the patch baseline.', example='root(130900000)'),
    description?: string(name='Description', description='The description.', example='test-update'),
    lastModifiedBy?: string(name='LastModifiedBy', description='The user who modified the O\\&M item.', example='root(130900000)'),
    opsItemId?: string(name='OpsItemId', description='The ID of the O\\&M item.', example='oi-e2264dcf040c472598e9'),
    priority?: int32(name='Priority', description='The priority.', example='2'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
    resources?: [ string ](name='Resources', description='The ARNs of the associated resources.'),
    severity?: string(name='Severity', description='The severity level.', example='Medium'),
    solutions?: [ string ](name='Solutions', description='The solutions.'),
    source?: string(name='Source', description='The source business.', example='/aliyun/ecs'),
    status?: string(name='Status', description='The status.', example='Open'),
    tags?: map[string]any(name='Tags', description='The tags.', example='{
      "k1": "v1",
      "k2": "v2"
}'),
    title?: string(name='Title', description='The title of the O\\&M item.', example='Test'),
    updateDate?: string(name='UpdateDate', description='The time when the O\\&M item was updated.', example='2023-03-16T08:04Z'),
  }(name='OpsItem', description='The information about the O\\&M item.'),
  requestId?: string(name='RequestId', description='The request ID.', example='C996DECB-3D2B-5321-B359-BE7031B6399E'),
}

model UpdateOpsItemResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateOpsItemResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateOpsItem  UpdateOpsItemRequest
  * @return UpdateOpsItemResponse
 */
async function updateOpsItem(request: UpdateOpsItemRequest): UpdateOpsItemResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateOpsItem', 'POST', '/', 'json', false, 'json', request);
}

model UpdateParameterRequest {
  description?: string(name='Description', description='The description of the common parameter. The description must be 1 to 200 characters in length.', example='update', position='Query'),
  name: string(name='Name', description='The name of the common parameter. The name must be 1 to 200 characters in length, and can contain letters, digits, hyphens (-), and underscores (_). It cannot start with ALIYUN, ACS, ALIBABA, ALICLOUD, or OOS.

This parameter is required.', example='MyParameter', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxsn4m4******', position='Query'),
  tags?: string(name='Tags', description='The tags to be added to common parameter.', example='{"k1": "v1", "k2": "v2"}', position='Query'),
  value: string(name='Value', description='The value of the common parameter. The value must be 1 to 4,096 characters in length.

This parameter is required.', example='update', position='Query'),
}

model UpdateParameterResponseBody = {
  parameter?: {
    constraints?: string(name='Constraints', description='The constraints of the common parameter.', example='"{\\"AllowedValues\\":[\\"parameter\\"],\\"AllowedPattern\\":\\"parameter\\",\\"MinLength\\":0,\\"MaxLength\\":20}"'),
    createdBy?: string(name='CreatedBy', description='The user who created the common parameter.', example='root(130900000)'),
    createdDate?: string(name='CreatedDate', description='The time when the common parameter was created.', example='2020-09-01T08:01:43Z'),
    description?: string(name='Description', description='The description of the common parameter.', example='update'),
    id?: string(name='Id', description='The parameter ID.', example='p-4c4b401cab6747xxxxxx'),
    name?: string(name='Name', description='The name of the common parameter.', example='MyParameter'),
    parameterVersion?: int32(name='ParameterVersion', description='The version number of the common parameter.', example='2'),
    resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxsn4m4******'),
    shareType?: string(name='ShareType', description='The share type of the common parameter.', example='Private'),
    tags?: string(name='Tags', description='The tag added to the common parameter.', example='{"k1": "v1", "k2": "v2"}'),
    type?: string(name='Type', description='The data type of the common parameter.', example='String'),
    updatedBy?: string(name='UpdatedBy', description='The user who updated the common parameter.', example='root(130900000)'),
    updatedDate?: string(name='UpdatedDate', description='The time when the common parameter was updated.', example='2020-09-01T08:04:23Z'),
  }(name='Parameter', description='The information about the common parameter.'),
  requestId?: string(name='RequestId', description='The request ID.', example='AF1AE6DE-61C4-435E-8687-072CFACCCEC7'),
}

model UpdateParameterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateParameterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateParameter  UpdateParameterRequest
  * @return UpdateParameterResponse
 */
async function updateParameter(request: UpdateParameterRequest): UpdateParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateParameter', 'POST', '/', 'json', false, 'json', request);
}

model UpdatePatchBaselineRequest {
  approvalRules?: string(name='ApprovalRules', description='The rules of scanning and installing patches for the specified operating system.', example='{"PatchRules":[{"PatchFilterGroup":[{"Key":"PatchSet","Values":["OS"]},{"Key":"ProductFamily","Values":["Windows"]},{"Key":"Product","Values":["Windows 10","Windows 7"]},{"Key":"Classification","Values":["Security Updates","Updates","Update Rollups","Critical Updates"]},{"Key":"Severity","Values":["Critical","Important","Moderate"]}],"ApproveAfterDays":7,"ApproveUntilDate":"","EnableNonSecurity":true,"ComplianceLevel":"Medium"}]}', position='Query'),
  approvedPatches?: [ string ](name='ApprovedPatches', description='The approved patches.', shrink='json', position='Query'),
  approvedPatchesEnableNonSecurity?: boolean(name='ApprovedPatchesEnableNonSecurity', description='Indicates whether the approved patch involves updates other than security-related updates.', example='true', position='Query'),
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='-', position='Query'),
  description?: string(name='Description', description='The description of the patch baseline.', example='UpdatePatchBaseline', position='Query'),
  name: string(name='Name', description='The name of the patch baseline.

This parameter is required.', example='MyPatchBaseline', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  rejectedPatches?: [ string ](name='RejectedPatches', description='The rejected patches.', shrink='json', position='Query'),
  rejectedPatchesAction?: string(name='RejectedPatchesAction', description='The action of the rejected patch.', example='ALLOW_AS_DEPENDENCY', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******', position='Query'),
  sources?: [ string ](name='Sources', description='The patch source configurations.', shrink='json', position='Query'),
  tags?: [ 
    {
      key?: string(name='Key', description='The key of the tag.', example='key'),
      value?: string(name='Value', description='The value of the tag.', example='value'),
    }
  ](name='Tags', description='The tags.', shrink='json', position='Query'),
}

model UpdatePatchBaselineResponseBody = {
  patchBaseline?: {
    approvalRules?: string(name='ApprovalRules', description='The rules of scanning and installing patches for the specified operating system.', example='{"PatchRules":[{"PatchFilterGroup":[{"Key":"PatchSet","Values":["OS"]},{"Key":"ProductFamily","Values":["Windows"]},{"Key":"Product","Values":["Windows 10","Windows 7"]},{"Key":"Classification","Values":["Security Updates","Updates","Update Rollups","Critical Updates"]},{"Key":"Severity","Values":["Critical","Important","Moderate"]}],"ApproveAfterDays":7,"ApproveUntilDate":"","EnableNonSecurity":true,"ComplianceLevel":"Medium"}]}'),
    approvedPatches?: [ string ](name='ApprovedPatches', description='The approved patches.'),
    approvedPatchesEnableNonSecurity?: boolean(name='ApprovedPatchesEnableNonSecurity', description='Indicates whether the approved patch involves updates other than security-related updates.', example='true'),
    createdBy?: string(name='CreatedBy', description='The creator of the patch baseline.', example='root(130900000)'),
    createdDate?: string(name='CreatedDate', description='The time when the patch baseline was created.', example='2021-09-07T03:42:56Z'),
    description?: string(name='Description', description='The description of the patch baseline.', example='UpdatePatchBaseline'),
    id?: string(name='Id', description='The ID of the patch baseline.', example='pb-445340b5c6504a85a300'),
    name?: string(name='Name', description='The name of the patch baseline.', example='MyPatchBaseline'),
    operationSystem?: string(name='OperationSystem', description='The operating system.', example='Windows'),
    rejectedPatches?: [ string ](name='RejectedPatches', description='The rejected patches.'),
    rejectedPatchesAction?: string(name='RejectedPatchesAction', description='The action of the rejected patch.', example='ALLOW_AS_DEPENDENCY'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmy2zdbbjplii'),
    shareType?: string(name='ShareType', description='The share type of the patch baseline.', example='Private'),
    sources?: [ string ](name='Sources', description='The patch source configurations.'),
    tags?: [ 
      {
        tagKey?: string(name='TagKey', description='The key of the tag.', example='key'),
        tagValue?: string(name='TagValue', description='The value of the tag.', example='value'),
      }
    ](name='Tags', description='The tags.'),
    updatedBy?: string(name='UpdatedBy', description='The user who updated the patch baseline.', example='root(130900000)'),
    updatedDate?: string(name='UpdatedDate', description='The time when the patch baseline was updated.', example='2021-09-08T07:26:37Z'),
  }(name='PatchBaseline', description='The details of the patch baseline.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='1457F46C-7AAE-59FA-BD12-0BDB3751E6F8'),
}

model UpdatePatchBaselineResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdatePatchBaselineResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdatePatchBaseline  UpdatePatchBaselineRequest
  * @return UpdatePatchBaselineResponse
 */
async function updatePatchBaseline(request: UpdatePatchBaselineRequest): UpdatePatchBaselineResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdatePatchBaseline', 'POST', '/', 'json', false, 'json', request);
}

model UpdateSecretParameterRequest {
  description?: string(name='Description', description='The description of the parameter. The description must be 1 to 200 characters in length.', example='SecretParameter', position='Query'),
  name: string(name='Name', description='The name of the parameter. The name must be 1 to 180 characters in length, and can contain letters, digits, hyphens (-), and underscores (_). It cannot start with ALIYUN, ACS, ALIBABA, ALICLOUD, or OOS.

This parameter is required.', example='MySecretParameter', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags of the parameter.', example='{"k1": "v1", "k2": "v2"}', shrink='json', position='Query'),
  value: string(name='Value', description='The value of the parameter. The value must be 1 to 4096 characters in length.

This parameter is required.', example='update', position='Query'),
}

model UpdateSecretParameterResponseBody = {
  parameter?: {
    constraints?: string(name='Constraints', description='The constraints of the parameter.', example='\\"{\\"\\"AllowedValues":["secretparameter"],"AllowedPattern":".*","MinLength":0,"MaxLength":20}\\"'),
    createdBy?: string(name='CreatedBy', description='The user who created the parameter.', example='root(130900000)'),
    createdDate?: string(name='CreatedDate', description='The time when the parameter was created.', example='2020-09-01T09:30:36Z'),
    description?: string(name='Description', description='The description of the parameter.', example='SecretParameter'),
    id?: string(name='Id', description='The ID of the parameter.', example='p-0b0fff9919c946xxxxxx'),
    keyId?: string(name='KeyId', description='The ID of customer master key (CMK) of Key Management Service (KMS) that is used for encryption.', example='80e9409f-78fa-42ab-84bd-83f40c******'),
    name?: string(name='Name', description='The name of the parameter.', example='MyParameter'),
    parameterVersion?: int32(name='ParameterVersion', description='The version number of the parameter.', example='2'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
    shareType?: string(name='ShareType', description='The share type of the parameter.', example='Private'),
    tags?: string(name='Tags', description='The tags of the parameter.', example='{"k1": "v1", "k2": "v2"}'),
    type?: string(name='Type', description='The type of the parameter.', example='Secret'),
    updatedBy?: string(name='UpdatedBy', description='The user who updated the parameter.', example='root(130900000)'),
    updatedDate?: string(name='UpdatedDate', description='The time when the parameter was updated.', example='2020-09-01T09:33:11Z'),
  }(name='Parameter', description='The information about the parameter.'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='0B419FF3-ABC6-4DF0-95E5-636DC8CBB8AF'),
}

model UpdateSecretParameterResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateSecretParameterResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateSecretParameter  UpdateSecretParameterRequest
  * @return UpdateSecretParameterResponse
 */
async function updateSecretParameter(request: UpdateSecretParameterRequest): UpdateSecretParameterResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateSecretParameter', 'POST', '/', 'json', false, 'json', request);
}

model UpdateStateConfigurationRequest {
  clientToken?: string(name='ClientToken', description='The client token that is used to ensure the idempotence of the request.', example='DASKJJLKADS-AHKLJHJSAKL-AJK', position='Query'),
  configureMode?: string(name='ConfigureMode', description='The configuration mode. Valid values: ApplyOnce: The configuration is applied only once. After a configuration is updated, the new configuration is applied. ApplyAndMonitor: The configuration is applied only once. After the configuration is applied, the system only checks whether the configuration is migrated in the future. ApplyAndAutoCorrect: The configuration is always applied.', example='ApplyOnce', position='Query'),
  description?: string(name='Description', description='The description.', example='ACS-ECS-InventoryDataCollection', position='Query'),
  parameters?: map[string]any(name='Parameters', description='The parameters.', example='{ "policy": { "ACS:Application": { "Collection": "Enabled" }, "ACS:Network": { "Collection": "Enabled" } } }', shrink='json', position='Query'),
  regionId?: string(name='RegionId', description='The region ID.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxsn4m4******', position='Query'),
  scheduleExpression?: string(name='ScheduleExpression', description='The schedule expression.', example='1 hour', position='Query'),
  scheduleType?: string(name='ScheduleType', description='The schedule type.', example='rate', position='Query'),
  stateConfigurationId: string(name='StateConfigurationId', description='The ID of the desired-state configuration.

This parameter is required.', example='sc-asfgdhj12345', position='Query'),
  tags?: map[string]any(name='Tags', description='The tags to be added to the configuration.', example='{"Key": "oos", "Value": "sc"}', shrink='json', position='Query'),
  targets?: string(name='Targets', description='The resources to be queried.', example='{ "ResourceType": "ALIYUN::ECS::Instance", "Filters": [ { "Type": "All", "RegionId": "cn-hangzhou", "Parameters": { "RegionId": "cn-hangzhou", "Status": "Running" } } ] }', position='Query'),
}

model UpdateStateConfigurationResponseBody = {
  requestId?: string(name='RequestId', description='The request ID.', example='1306108F-610C-40FD-AAD5-DA13E8B00BE9'),
  stateConfiguration?: [ 
    {
      configureMode?: string(name='ConfigureMode', description='The configuration mode. Valid values:', example='ApplyAndAutoCorrect'),
      createTime?: string(name='CreateTime', description='The time when the configuration was created.', example='2021-03-22T03:13:32Z'),
      description?: string(name='Description', description='The description of the desired-state configuration.', example='collect inventory data'),
      parameters?: string(name='Parameters', description='The parameters.', example='{"policy": {"ACS:Network": {"Collection": "Enabled"}, "ACS:Application": {"Collection": "Enabled"}}}'),
      resourceGroupId?: string(name='ResourceGroupId', description='The resource group ID.', example='rg-acfmxsn4m4******'),
      scheduleExpression?: string(name='ScheduleExpression', description='The CRON expression.', example='1 hour'),
      scheduleType?: string(name='ScheduleType', description='The schedule type.', example='rate'),
      stateConfigurationId?: string(name='StateConfigurationId', description='The ID of the desired-state configuration.', example='StateConfigurationId'),
      tags?: map[string]any(name='Tags', description='The tags added to the configuration.', example='{"Key": "oos", "Value": "inventory"}'),
      targets?: string(name='Targets', description='The queried resources.', example='{ "ResourceType": "ALIYUN::ECS::Instance", "Filters": [ { "Type": "All", "RegionId": "cn-hangzhou", "Parameters": { "RegionId": "cn-hangzhou", "Status": "Running" } } ] }'),
      templateId?: string(name='TemplateId', description='The template ID.', example='t-1234asadf'),
      templateName?: string(name='TemplateName', description='The name of the template.', example='ACS-ECS-InventoryDataCollection'),
      templateVersion?: string(name='TemplateVersion', description='The name of the template version.', example='v1'),
      updateTime?: string(name='UpdateTime', description='The time when the configuration was updated.', example='2021-03-22T03:13:32Z'),
    }
  ](name='StateConfiguration', description='The details of the configuration.'),
}

model UpdateStateConfigurationResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateStateConfigurationResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateStateConfiguration  UpdateStateConfigurationRequest
  * @return UpdateStateConfigurationResponse
 */
async function updateStateConfiguration(request: UpdateStateConfigurationRequest): UpdateStateConfigurationResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateStateConfiguration', 'POST', '/', 'json', false, 'json', request);
}

model UpdateTemplateRequest {
  content: string(name='Content', description='The content of the template. The content must be in the JSON or YAML format, and its maximum size is 64 KB.

This parameter is required.', example='{ "FormatVersion": "OOS-2019-06-01", "Description": { "en": "Bulky starts the ECS instances", "name-en": "Bulky Start Instances", }, "Parameters": { "regionId": { "Type": "String", "Label": { "en": "RegionId", }, "AssociationProperty": "RegionId", "Default": "{{ ACS::RegionId }}" }, "targets": { "Type": "Json", "Label": { "en": "TargetInstance", }, "AssociationProperty": "Targets", "AssociationPropertyMetadata": { "ResourceType": "ALIYUN::ECS::Instance", "RegionId": "regionId" } }, "rateControl": { "Label": { "en": "RateControl", }, "Type": "Json", "AssociationProperty": "RateControl", "Default": { "Mode": "Concurrency", "MaxErrors": 0, "Concurrency": 10 } }, "OOSAssumeRole": { "Label": { "en": "OOSAssumeRole", }, "Type": "String", "Default": "OOSServiceRole" } }, "RamRole": "{{ OOSAssumeRole }}", "Tasks": [ { "Name": "getInstance", "Description": { "en": "Views the ECS instances", }, "Action": "ACS::SelectTargets", "Properties": { "ResourceType": "ALIYUN::ECS::Instance", "RegionId": "{{ regionId }}", "Filters": [ "{{ targets }}" ] }, "Outputs": { "instanceIds": { "Type": "List", "ValueSelector": "Instances.Instance[].InstanceId" } } }, { "Name": "startInstance", "Action": "ACS::ECS::StartInstance", "Description": { "en": "Starts the ECS instances", }, "Properties": { "regionId": "{{ regionId }}", "instanceId": "{{ ACS::TaskLoopItem }}" }, "Loop": { "RateControl": "{{ rateControl }}", "Items": "{{ getInstance.instanceIds }}" } } ], "Outputs": { "instanceIds": { "Type": "List", "Value": "{{ getInstance.instanceIds }}" } } }', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******', position='Query'),
  tags?: map[string]any(name='Tags', description='The tag keys and values. The number of key-value pairs ranges from 1 to 20.', example='{"k1":"k2","k2":"v2"}', shrink='json', position='Query'),
  templateName: string(name='TemplateName', description='The name of the template. The name can be up to 200 characters in length and can contain letters, digits, hyphens (-), and underscores (_). The name cannot start with ALIYUN, ACS, ALIBABA, or ALICLOUD.

This parameter is required.', example='MyTemplate', position='Query'),
  versionName?: string(name='VersionName', description='The name of the template version.', example='v2', position='Query'),
}

model UpdateTemplateResponseBody = {
  requestId?: string(name='RequestId', description='The ID of the request.', example='2075899A-585D-4A41-A9B2-28DF4F534F'),
  template?: {
    createdBy?: string(name='CreatedBy', description='The user who created the template.', example='root(130920000)'),
    createdDate?: string(name='CreatedDate', description='The time when the template was created.', example='2019-05-16T10:26:14Z'),
    description?: string(name='Description', description='The description of the template.', example='Describe instances of given status'),
    hasTrigger?: boolean(name='HasTrigger', description='Indicates whether the template is configured with a trigger.', example='true'),
    hash?: string(name='Hash', description='The SHA-256 value of the template content.', example='4bc7d7a21b3e003434b9c223f6e6d2578b5ebfeb5be28c1fcf8a8a1b11907bb4'),
    resourceGroupId?: string(name='ResourceGroupId', description='The ID of the resource group.', example='rg-acfmxsn4m4******'),
    shareType?: string(name='ShareType', description='The share type of the template. The share type of a user-created template is **Private**.', example='Private'),
    tags?: map[string]any(name='Tags', description='The tag keys and values. The number of key-value pairs ranges from 1 to 20.', example='{"k1":"k2","k2":"v2"}'),
    templateFormat?: string(name='TemplateFormat', description='The format of the template. The system automatically determines whether the format is JSON or YAML.', example='JSON'),
    templateId?: string(name='TemplateId', description='The ID of the template.', example='t-94753deed38'),
    templateName?: string(name='TemplateName', description='The name of the template.', example='MyTemplate'),
    templateVersion?: string(name='TemplateVersion', description='The version of the template. The name of the version consists of the letter v and a number. The number starts from 1.', example='v2'),
    updatedBy?: string(name='UpdatedBy', description='The user who last modified the information about the template.', example='root(1309000)'),
    updatedDate?: string(name='UpdatedDate', description='The time when the information about the template was last modified.', example='2019-05-16T10:26:14Z'),
  }(name='Template', description='The metadata of the template.'),
}

model UpdateTemplateResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: UpdateTemplateResponseBody(name='body'),
}

/**
  * @param request  the request parameters of UpdateTemplate  UpdateTemplateRequest
  * @return UpdateTemplateResponse
 */
async function updateTemplate(request: UpdateTemplateRequest): UpdateTemplateResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'UpdateTemplate', 'POST', '/', 'json', false, 'json', request);
}

model ValidateTemplateContentRequest {
  content?: string(name='Content', description='The content of the template.', example='{"FormatVersion": "OOS-2019-06-01", "Description": "Describe instances of given status", "Parameters": {"Status": {"Type": "String", "Description": "(Required) The status of the Ecs instance."}}, "Tasks": [{"Properties": {"Parameters": {"Status": "{{ Status }}"}, "API": "DescribeInstances", "Service": "Ecs"}, "Name": "foo", "Action": "ACS::ExecuteApi"}]}', position='Query'),
  regionId?: string(name='RegionId', description='The ID of the region.', example='cn-hangzhou', position='Query'),
  templateURL?: string(name='TemplateURL', description='The URL that is used to store the content of the Operation Orchestration Service (OOS) template in the Alibaba Cloud Object Storage Service (OSS). Only the public-read URL is supported. You can use this parameter to specify the tasks that you want to run. This way, you do not need to create a template before you start an execution. If you select an existing template, you do not need to specify this parameter.', example='http:/oos-template.cn-hangzhou.oss.aliyun-inc.com/oos-template.json', position='Query'),
}

model ValidateTemplateContentResponseBody = {
  outputs?: string(name='Outputs', description='The outputs of the template.', example='{}'),
  parameters?: string(name='Parameters', description='The parameters of the template.', example='{ "Status": { "Description": "(Required) The status of the Ecs instance.", "Type": "String" } }'),
  ramRole?: string(name='RamRole', description='The RAM role.', example='OOSServiceRole'),
  requestId?: string(name='RequestId', description='The ID of the request.', example='D5EE9591-1F2D-573E-8751-7F08BBB388D4'),
  tasks?: [ 
    {
      description?: string(name='Description', description='The description of the task.', example='(Required) The status of the Ecs instance.'),
      name?: string(name='Name', description='The name of the task.', example='foo'),
      outputs?: string(name='Outputs', description='The outputs of the task.', example='.instanceId'),
      properties?: string(name='Properties', description='The properties of the task.', example='{"API": "DescribeInstances","Parameters": {"Status": "{{ Status }}"},"Service": "Ecs"}'),
      type?: string(name='Type', description='The type of the task.', example='ACS::ExecuteAPI'),
    }
  ](name='Tasks', description='The task defined in the template.'),
}

model ValidateTemplateContentResponse = {
  headers?: map[string]string(name='headers'),
  statusCode?: int32(name='statusCode'),
  body?: ValidateTemplateContentResponseBody(name='body'),
}

/**
  * @param request  the request parameters of ValidateTemplateContent  ValidateTemplateContentRequest
  * @return ValidateTemplateContentResponse
 */
async function validateTemplateContent(request: ValidateTemplateContentRequest): ValidateTemplateContentResponse {
  @handler.validateRequestModel(request);
  return @handler.do('RPC', 'ValidateTemplateContent', 'POST', '/', 'json', false, 'json', request);
}

