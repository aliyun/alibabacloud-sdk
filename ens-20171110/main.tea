/**
 *
 */
import Util;
import OpenApi;
import OpenApiUtil;
import EndpointUtil;

extends OpenApi;

init(config: OpenApi.Config){
  super(config);
  @endpointRule = '';
  
  checkConfig(config);
  @endpoint = getEndpoint('ens', @regionId, @endpointRule, @network, @suffix, @endpointMap, @endpoint);
}

function getEndpoint(productId: string, regionId: string, endpointRule: string, network: string, suffix: string, endpointMap: map[string]string, endpoint: string) throws: string{
  if (!Util.empty(endpoint)) {
    return endpoint;
  }

  if (!Util.isUnset(endpointMap) && !Util.empty(endpointMap[regionId])) {
    return endpointMap[regionId];
  }
  return EndpointUtil.getEndpointRules(productId, regionId, endpointRule, network, suffix);
}
model AddNetworkInterfaceToInstanceRequest {
  instanceId?: string(name='InstanceId'),
  networks?: string(name='Networks'),
}

model AddNetworkInterfaceToInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model AddNetworkInterfaceToInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: AddNetworkInterfaceToInstanceResponseBody(name='body'),
}

async function addNetworkInterfaceToInstanceWithOptions(request: AddNetworkInterfaceToInstanceRequest, runtime: Util.RuntimeOptions): AddNetworkInterfaceToInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AddNetworkInterfaceToInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function addNetworkInterfaceToInstance(request: AddNetworkInterfaceToInstanceRequest): AddNetworkInterfaceToInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return addNetworkInterfaceToInstanceWithOptions(request, runtime);
}

model AllocateEipAddressRequest {
  version?: string(name='Version'),
  ensRegionId?: string(name='EnsRegionId'),
  count?: int32(name='Count'),
  minCount?: int32(name='MinCount'),
}

model AllocateEipAddressResponseBody = {
  bizStatusCode?: string(name='BizStatusCode'),
  eipAddresses?: {
    eipAddress?: [ 
    {
      eip?: string(name='Eip'),
    }
  ](name='EipAddress')
  }(name='EipAddresses'),
  requestId?: string(name='RequestId'),
}

model AllocateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AllocateEipAddressResponseBody(name='body'),
}

async function allocateEipAddressWithOptions(request: AllocateEipAddressRequest, runtime: Util.RuntimeOptions): AllocateEipAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AllocateEipAddress', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function allocateEipAddress(request: AllocateEipAddressRequest): AllocateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return allocateEipAddressWithOptions(request, runtime);
}

model AssociateEipAddressRequest {
  version?: string(name='Version'),
  ensRegionId?: string(name='EnsRegionId'),
  eip?: string(name='Eip'),
  instanceIdInternetIp?: string(name='InstanceIdInternetIp'),
}

model AssociateEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model AssociateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: AssociateEipAddressResponseBody(name='body'),
}

async function associateEipAddressWithOptions(request: AssociateEipAddressRequest, runtime: Util.RuntimeOptions): AssociateEipAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AssociateEipAddress', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function associateEipAddress(request: AssociateEipAddressRequest): AssociateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return associateEipAddressWithOptions(request, runtime);
}

model AttachEnsInstancesRequest {
  version?: string(name='Version'),
  instanceId?: string(name='InstanceId'),
  scripts?: string(name='Scripts'),
}

model AttachEnsInstancesResponseBody = {
  requestId?: string(name='RequestId'),
}

model AttachEnsInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: AttachEnsInstancesResponseBody(name='body'),
}

async function attachEnsInstancesWithOptions(request: AttachEnsInstancesRequest, runtime: Util.RuntimeOptions): AttachEnsInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AttachEnsInstances', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function attachEnsInstances(request: AttachEnsInstancesRequest): AttachEnsInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return attachEnsInstancesWithOptions(request, runtime);
}

model AuthorizeSecurityGroupRequest {
  version?: string(name='Version'),
  ipProtocol?: string(name='IpProtocol'),
  portRange?: string(name='PortRange'),
  securityGroupId?: string(name='SecurityGroupId'),
  policy?: string(name='Policy'),
  priority?: int32(name='Priority'),
  sourceCidrIp?: string(name='SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange'),
}

model AuthorizeSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model AuthorizeSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeSecurityGroupResponseBody(name='body'),
}

async function authorizeSecurityGroupWithOptions(request: AuthorizeSecurityGroupRequest, runtime: Util.RuntimeOptions): AuthorizeSecurityGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AuthorizeSecurityGroup', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function authorizeSecurityGroup(request: AuthorizeSecurityGroupRequest): AuthorizeSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeSecurityGroupWithOptions(request, runtime);
}

model AuthorizeSecurityGroupEgressRequest {
  version?: string(name='Version'),
  ipProtocol?: string(name='IpProtocol'),
  portRange?: string(name='PortRange'),
  securityGroupId?: string(name='SecurityGroupId'),
  policy?: string(name='Policy'),
  priority?: int32(name='Priority'),
  destCidrIp?: string(name='DestCidrIp'),
  sourcePortRange?: string(name='SourcePortRange'),
}

model AuthorizeSecurityGroupEgressResponseBody = {
  requestId?: string(name='RequestId'),
}

model AuthorizeSecurityGroupEgressResponse = {
  headers: map[string]string(name='headers'),
  body: AuthorizeSecurityGroupEgressResponseBody(name='body'),
}

async function authorizeSecurityGroupEgressWithOptions(request: AuthorizeSecurityGroupEgressRequest, runtime: Util.RuntimeOptions): AuthorizeSecurityGroupEgressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('AuthorizeSecurityGroupEgress', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function authorizeSecurityGroupEgress(request: AuthorizeSecurityGroupEgressRequest): AuthorizeSecurityGroupEgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return authorizeSecurityGroupEgressWithOptions(request, runtime);
}

model CheckQuotaRequest {
  aliUid?: long(name='AliUid'),
  resourceAttribute?: string(name='ResourceAttribute'),
  groupUuid?: string(name='GroupUuid'),
}

model CheckQuotaResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  data?: string(name='Data'),
  msg?: string(name='Msg'),
  desc?: string(name='Desc'),
}

model CheckQuotaResponse = {
  headers: map[string]string(name='headers'),
  body: CheckQuotaResponseBody(name='body'),
}

async function checkQuotaWithOptions(request: CheckQuotaRequest, runtime: Util.RuntimeOptions): CheckQuotaResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CheckQuota', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function checkQuota(request: CheckQuotaRequest): CheckQuotaResponse {
  var runtime = new Util.RuntimeOptions{};
  return checkQuotaWithOptions(request, runtime);
}

model CreateApplicationRequest {
  template?: string(name='Template'),
  timeout?: int32(name='Timeout'),
}

model CreateApplicationResponseBody = {
  appId?: string(name='AppId'),
  requestId?: string(name='RequestId'),
}

model CreateApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: CreateApplicationResponseBody(name='body'),
}

async function createApplicationWithOptions(request: CreateApplicationRequest, runtime: Util.RuntimeOptions): CreateApplicationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateApplication', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createApplication(request: CreateApplicationRequest): CreateApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return createApplicationWithOptions(request, runtime);
}

model CreateEnsServiceRequest {
  version?: string(name='Version'),
  ensServiceId?: string(name='EnsServiceId'),
  orderType?: string(name='OrderType'),
}

model CreateEnsServiceResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
}

model CreateEnsServiceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEnsServiceResponseBody(name='body'),
}

async function createEnsServiceWithOptions(request: CreateEnsServiceRequest, runtime: Util.RuntimeOptions): CreateEnsServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEnsService', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEnsService(request: CreateEnsServiceRequest): CreateEnsServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEnsServiceWithOptions(request, runtime);
}

model CreateEPInstanceRequest {
  EPNInstanceType?: string(name='EPNInstanceType'),
  EPNInstanceName?: string(name='EPNInstanceName'),
  internetChargeType?: string(name='InternetChargeType'),
  networkingModel?: string(name='NetworkingModel'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
}

model CreateEPInstanceResponseBody = {
  EPNInstanceId?: string(name='EPNInstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateEPInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEPInstanceResponseBody(name='body'),
}

async function createEPInstanceWithOptions(request: CreateEPInstanceRequest, runtime: Util.RuntimeOptions): CreateEPInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEPInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEPInstance(request: CreateEPInstanceRequest): CreateEPInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEPInstanceWithOptions(request, runtime);
}

model CreateEpnInstanceRequest {
  EPNInstanceType?: string(name='EPNInstanceType'),
  EPNInstanceName?: string(name='EPNInstanceName'),
  internetChargeType?: string(name='InternetChargeType'),
  networkingModel?: string(name='NetworkingModel'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
}

model CreateEpnInstanceResponseBody = {
  EPNInstanceId?: string(name='EPNInstanceId'),
  requestId?: string(name='RequestId'),
}

model CreateEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: CreateEpnInstanceResponseBody(name='body'),
}

async function createEpnInstanceWithOptions(request: CreateEpnInstanceRequest, runtime: Util.RuntimeOptions): CreateEpnInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateEpnInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createEpnInstance(request: CreateEpnInstanceRequest): CreateEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return createEpnInstanceWithOptions(request, runtime);
}

model CreateImageRequest {
  product?: string(name='product'),
  version?: string(name='Version'),
  instanceId?: string(name='InstanceId'),
  imageName?: string(name='ImageName'),
  deleteAfterImageUpload?: string(name='DeleteAfterImageUpload'),
}

model CreateImageResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
}

model CreateImageResponse = {
  headers: map[string]string(name='headers'),
  body: CreateImageResponseBody(name='body'),
}

async function createImageWithOptions(request: CreateImageRequest, runtime: Util.RuntimeOptions): CreateImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateImage', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createImage(request: CreateImageRequest): CreateImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return createImageWithOptions(request, runtime);
}

model CreateKeyPairRequest {
  version?: string(name='Version'),
  keyPairName?: string(name='KeyPairName'),
}

model CreateKeyPairResponseBody = {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint'),
  keyPairId?: string(name='KeyPairId'),
  keyPairName?: string(name='KeyPairName'),
  privateKeyBody?: string(name='PrivateKeyBody'),
  requestId?: string(name='RequestId'),
}

model CreateKeyPairResponse = {
  headers: map[string]string(name='headers'),
  body: CreateKeyPairResponseBody(name='body'),
}

async function createKeyPairWithOptions(request: CreateKeyPairRequest, runtime: Util.RuntimeOptions): CreateKeyPairResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateKeyPair', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createKeyPair(request: CreateKeyPairRequest): CreateKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return createKeyPairWithOptions(request, runtime);
}

model CreateSecurityGroupRequest {
  version?: string(name='Version'),
  securityGroupName?: string(name='SecurityGroupName'),
}

model CreateSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
  securityGroupId?: string(name='SecurityGroupId'),
}

model CreateSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: CreateSecurityGroupResponseBody(name='body'),
}

async function createSecurityGroupWithOptions(request: CreateSecurityGroupRequest, runtime: Util.RuntimeOptions): CreateSecurityGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateSecurityGroup', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createSecurityGroup(request: CreateSecurityGroupRequest): CreateSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return createSecurityGroupWithOptions(request, runtime);
}

model CreateVmAndSaveStockRequest {
  aliUid?: long(name='AliUid'),
  tenant?: string(name='Tenant'),
  workloadUuid?: string(name='WorkloadUuid'),
  groupUuid?: string(name='GroupUuid'),
  resourceAttribute?: string(name='ResourceAttribute'),
}

model CreateVmAndSaveStockResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  desc?: string(name='Desc'),
  data?: string(name='Data'),
}

model CreateVmAndSaveStockResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVmAndSaveStockResponseBody(name='body'),
}

async function createVmAndSaveStockWithOptions(request: CreateVmAndSaveStockRequest, runtime: Util.RuntimeOptions): CreateVmAndSaveStockResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVmAndSaveStock', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVmAndSaveStock(request: CreateVmAndSaveStockRequest): CreateVmAndSaveStockResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVmAndSaveStockWithOptions(request, runtime);
}

model CreateVSwitchRequest {
  version?: string(name='Version'),
  ensRegionId?: string(name='EnsRegionId'),
  cidrBlock?: string(name='CidrBlock'),
  vSwitchName?: string(name='VSwitchName'),
}

model CreateVSwitchResponseBody = {
  requestId?: string(name='RequestId'),
  vSwitchId?: string(name='VSwitchId'),
}

model CreateVSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: CreateVSwitchResponseBody(name='body'),
}

async function createVSwitchWithOptions(request: CreateVSwitchRequest, runtime: Util.RuntimeOptions): CreateVSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('CreateVSwitch', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function createVSwitch(request: CreateVSwitchRequest): CreateVSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return createVSwitchWithOptions(request, runtime);
}

model DeleteApplicationRequest {
  appId?: string(name='AppId'),
  timeout?: int32(name='Timeout'),
}

model DeleteApplicationResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteApplicationResponseBody(name='body'),
}

async function deleteApplicationWithOptions(request: DeleteApplicationRequest, runtime: Util.RuntimeOptions): DeleteApplicationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteApplication', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteApplication(request: DeleteApplicationRequest): DeleteApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteApplicationWithOptions(request, runtime);
}

model DeleteEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId'),
}

model DeleteEpnInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteEpnInstanceResponseBody(name='body'),
}

async function deleteEpnInstanceWithOptions(request: DeleteEpnInstanceRequest, runtime: Util.RuntimeOptions): DeleteEpnInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteEpnInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteEpnInstance(request: DeleteEpnInstanceRequest): DeleteEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteEpnInstanceWithOptions(request, runtime);
}

model DeleteKeyPairsRequest {
  version?: string(name='Version'),
  keyPairName?: string(name='KeyPairName'),
}

model DeleteKeyPairsResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteKeyPairsResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteKeyPairsResponseBody(name='body'),
}

async function deleteKeyPairsWithOptions(request: DeleteKeyPairsRequest, runtime: Util.RuntimeOptions): DeleteKeyPairsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteKeyPairs', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteKeyPairs(request: DeleteKeyPairsRequest): DeleteKeyPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteKeyPairsWithOptions(request, runtime);
}

model DeleteSecurityGroupRequest {
  version?: string(name='Version'),
  securityGroupId?: string(name='SecurityGroupId'),
}

model DeleteSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteSecurityGroupResponseBody(name='body'),
}

async function deleteSecurityGroupWithOptions(request: DeleteSecurityGroupRequest, runtime: Util.RuntimeOptions): DeleteSecurityGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteSecurityGroup', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteSecurityGroup(request: DeleteSecurityGroupRequest): DeleteSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteSecurityGroupWithOptions(request, runtime);
}

model DeleteVmRequest {
  aliUid?: long(name='AliUid'),
  workloadUuid?: string(name='WorkloadUuid'),
}

model DeleteVmResponseBody = {
  code?: int32(name='Code'),
  msg?: string(name='Msg'),
  desc?: string(name='Desc'),
  data?: string(name='Data'),
  requestId?: string(name='RequestId'),
}

model DeleteVmResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVmResponseBody(name='body'),
}

async function deleteVmWithOptions(request: DeleteVmRequest, runtime: Util.RuntimeOptions): DeleteVmResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVm', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVm(request: DeleteVmRequest): DeleteVmResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVmWithOptions(request, runtime);
}

model DeleteVSwitchRequest {
  version?: string(name='Version'),
  vSwitchId?: string(name='VSwitchId'),
}

model DeleteVSwitchResponseBody = {
  requestId?: string(name='RequestId'),
}

model DeleteVSwitchResponse = {
  headers: map[string]string(name='headers'),
  body: DeleteVSwitchResponseBody(name='body'),
}

async function deleteVSwitchWithOptions(request: DeleteVSwitchRequest, runtime: Util.RuntimeOptions): DeleteVSwitchResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DeleteVSwitch', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function deleteVSwitch(request: DeleteVSwitchRequest): DeleteVSwitchResponse {
  var runtime = new Util.RuntimeOptions{};
  return deleteVSwitchWithOptions(request, runtime);
}

model DescribeApplicationRequest {
  appId?: string(name='AppId'),
  appVersions?: string(name='AppVersions'),
  level?: string(name='Level'),
  outDetailStatParams?: string(name='OutDetailStatParams'),
}

model DescribeApplicationResponseBody = {
  application?: string(name='Application'),
  requestId?: string(name='RequestId'),
}

model DescribeApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApplicationResponseBody(name='body'),
}

async function describeApplicationWithOptions(request: DescribeApplicationRequest, runtime: Util.RuntimeOptions): DescribeApplicationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApplication', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApplication(request: DescribeApplicationRequest): DescribeApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApplicationWithOptions(request, runtime);
}

model DescribeApplicationResourceSummaryRequest {
  level?: string(name='Level'),
  resourceType?: string(name='ResourceType'),
}

model DescribeApplicationResourceSummaryResponseBody = {
  applicationResource?: string(name='ApplicationResource'),
  requestId?: string(name='RequestId'),
}

model DescribeApplicationResourceSummaryResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeApplicationResourceSummaryResponseBody(name='body'),
}

async function describeApplicationResourceSummaryWithOptions(request: DescribeApplicationResourceSummaryRequest, runtime: Util.RuntimeOptions): DescribeApplicationResourceSummaryResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeApplicationResourceSummary', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeApplicationResourceSummary(request: DescribeApplicationResourceSummaryRequest): DescribeApplicationResourceSummaryResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeApplicationResourceSummaryWithOptions(request, runtime);
}

model DescribeAvailableResourceRequest {
  version?: string(name='Version'),
}

model DescribeAvailableResourceResponseBody = {
  code?: int32(name='Code'),
  images?: {
    image?: [ 
    {
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
    }
  ](name='Image')
  }(name='Images'),
  requestId?: string(name='RequestId'),
  supportResources?: {
    supportResource?: [ 
    {
      dataDiskSize?: string(name='DataDiskSize'),
      ensRegionId?: string(name='EnsRegionId'),
      instanceSpec?: string(name='InstanceSpec'),
      supportResourcesCount?: string(name='SupportResourcesCount'),
      systemDiskSize?: string(name='SystemDiskSize'),
    }
  ](name='SupportResource')
  }(name='SupportResources'),
}

model DescribeAvailableResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeAvailableResourceResponseBody(name='body'),
}

async function describeAvailableResourceWithOptions(request: DescribeAvailableResourceRequest, runtime: Util.RuntimeOptions): DescribeAvailableResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeAvailableResource', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeAvailableResource(request: DescribeAvailableResourceRequest): DescribeAvailableResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeAvailableResourceWithOptions(request, runtime);
}

model DescribeBandwitdhByInternetChargeTypeRequest {
  version?: string(name='Version'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  isp?: string(name='Isp'),
  ensRegionId?: string(name='EnsRegionId'),
}

model DescribeBandwitdhByInternetChargeTypeResponseBody = {
  bandwidthValue?: long(name='BandwidthValue'),
  internetChargeType?: string(name='InternetChargeType'),
  requestId?: string(name='RequestId'),
  timeStamp?: string(name='TimeStamp'),
}

model DescribeBandwitdhByInternetChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBandwitdhByInternetChargeTypeResponseBody(name='body'),
}

async function describeBandwitdhByInternetChargeTypeWithOptions(request: DescribeBandwitdhByInternetChargeTypeRequest, runtime: Util.RuntimeOptions): DescribeBandwitdhByInternetChargeTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBandwitdhByInternetChargeType', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBandwitdhByInternetChargeType(request: DescribeBandwitdhByInternetChargeTypeRequest): DescribeBandwitdhByInternetChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBandwitdhByInternetChargeTypeWithOptions(request, runtime);
}

model DescribeBandWithdChargeTypeRequest {
  version?: string(name='Version'),
}

model DescribeBandWithdChargeTypeResponseBody = {
  bandWithTypeInfo?: string(name='BandWithTypeInfo'),
  chargeContractType?: string(name='ChargeContractType'),
  chargeCycleInfo?: string(name='ChargeCycleInfo'),
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
}

model DescribeBandWithdChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeBandWithdChargeTypeResponseBody(name='body'),
}

async function describeBandWithdChargeTypeWithOptions(request: DescribeBandWithdChargeTypeRequest, runtime: Util.RuntimeOptions): DescribeBandWithdChargeTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeBandWithdChargeType', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeBandWithdChargeType(request: DescribeBandWithdChargeTypeRequest): DescribeBandWithdChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeBandWithdChargeTypeWithOptions(request, runtime);
}

model DescribeCreatePrePaidInstanceResultRequest {
  version?: string(name='Version'),
  instanceId?: string(name='InstanceId'),
}

model DescribeCreatePrePaidInstanceResultResponseBody = {
  instanceCreateResult?: {
    instanceCreateStatus?: string(name='InstanceCreateStatus'),
    instanceId?: string(name='InstanceId'),
  }(name='InstanceCreateResult'),
  requestId?: string(name='RequestId'),
}

model DescribeCreatePrePaidInstanceResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeCreatePrePaidInstanceResultResponseBody(name='body'),
}

async function describeCreatePrePaidInstanceResultWithOptions(request: DescribeCreatePrePaidInstanceResultRequest, runtime: Util.RuntimeOptions): DescribeCreatePrePaidInstanceResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeCreatePrePaidInstanceResult', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeCreatePrePaidInstanceResult(request: DescribeCreatePrePaidInstanceResultRequest): DescribeCreatePrePaidInstanceResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeCreatePrePaidInstanceResultWithOptions(request, runtime);
}

model DescribeDataDistResultRequest {
  appId?: string(name='AppId'),
  dataNames?: string(name='DataNames'),
  dataVersions?: string(name='DataVersions'),
  instanceIds?: string(name='InstanceIds'),
  minDate?: string(name='MinDate'),
  maxDate?: string(name='MaxDate'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeDataDistResultResponseBody = {
  distResults?: {
    distResult?: [ 
    {
      name?: string(name='Name'),
      statusStats?: {
        statusStat?: [ 
        {
          instanceCount?: string(name='InstanceCount'),
          instances?: {
            instance?: [ 
            {
              instanceId?: string(name='InstanceId'),
              startTime?: string(name='StartTime'),
              statusDescrip?: string(name='StatusDescrip'),
              updateTime?: string(name='UpdateTime'),
            }
          ](name='Instance')
          }(name='Instances'),
          status?: string(name='Status'),
        }
      ](name='StatusStat')
      }(name='StatusStats'),
      version?: string(name='Version'),
    }
  ](name='DistResult')
  }(name='DistResults'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDataDistResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataDistResultResponseBody(name='body'),
}

async function describeDataDistResultWithOptions(request: DescribeDataDistResultRequest, runtime: Util.RuntimeOptions): DescribeDataDistResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataDistResult', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataDistResult(request: DescribeDataDistResultRequest): DescribeDataDistResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataDistResultWithOptions(request, runtime);
}

model DescribeDataPushResultRequest {
  appId?: string(name='AppId'),
  dataNames?: string(name='DataNames'),
  dataVersions?: string(name='DataVersions'),
  minDate?: string(name='MinDate'),
  maxDate?: string(name='MaxDate'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  regionIds?: string(name='RegionIds'),
}

model DescribeDataPushResultResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  pushResults?: {
    pushResult?: [ 
    {
      name?: string(name='Name'),
      statusStatS?: {
        statusStat?: [ 
        {
          regionIdCount?: int32(name='RegionIdCount'),
          regionIds?: {
            regionId?: [ 
            {
              regionId?: string(name='RegionId'),
              startTime?: string(name='StartTime'),
              statusDescrip?: string(name='StatusDescrip'),
              updateTime?: string(name='UpdateTime'),
            }
          ](name='RegionId')
          }(name='RegionIds'),
          status?: string(name='Status'),
        }
      ](name='StatusStat')
      }(name='StatusStatS'),
      version?: string(name='Version'),
    }
  ](name='PushResult')
  }(name='PushResults'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeDataPushResultResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeDataPushResultResponseBody(name='body'),
}

async function describeDataPushResultWithOptions(request: DescribeDataPushResultRequest, runtime: Util.RuntimeOptions): DescribeDataPushResultResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeDataPushResult', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeDataPushResult(request: DescribeDataPushResultRequest): DescribeDataPushResultResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeDataPushResultWithOptions(request, runtime);
}

model DescribeEipAddressesRequest {
  version?: string(name='Version'),
  ensRegionId?: string(name='EnsRegionId'),
  eips?: string(name='Eips'),
}

model DescribeEipAddressesResponseBody = {
  eipAddresses?: {
    eipAddress?: [ 
    {
      eip?: string(name='Eip'),
      instanceIdInternetIp?: string(name='InstanceIdInternetIp'),
    }
  ](name='EipAddress')
  }(name='EipAddresses'),
  requestId?: string(name='RequestId'),
}

model DescribeEipAddressesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEipAddressesResponseBody(name='body'),
}

async function describeEipAddressesWithOptions(request: DescribeEipAddressesRequest, runtime: Util.RuntimeOptions): DescribeEipAddressesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEipAddresses', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEipAddresses(request: DescribeEipAddressesRequest): DescribeEipAddressesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEipAddressesWithOptions(request, runtime);
}

model DescribeEnsNetDistrictRequest {
  version?: string(name='Version'),
  netLevelCode?: string(name='NetLevelCode'),
  netDistrictCode?: string(name='NetDistrictCode'),
}

model DescribeEnsNetDistrictResponseBody = {
  code?: int32(name='Code'),
  ensNetDistricts?: {
    ensNetDistrict?: [ 
    {
      ensRegionIdCount?: string(name='EnsRegionIdCount'),
      netDistrictCode?: string(name='NetDistrictCode'),
      netDistrictEnName?: string(name='NetDistrictEnName'),
      netDistrictFatherCode?: string(name='NetDistrictFatherCode'),
      netDistrictLevel?: string(name='NetDistrictLevel'),
      netDistrictName?: string(name='NetDistrictName'),
    }
  ](name='EnsNetDistrict')
  }(name='EnsNetDistricts'),
  requestId?: string(name='RequestId'),
}

model DescribeEnsNetDistrictResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsNetDistrictResponseBody(name='body'),
}

async function describeEnsNetDistrictWithOptions(request: DescribeEnsNetDistrictRequest, runtime: Util.RuntimeOptions): DescribeEnsNetDistrictResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEnsNetDistrict', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEnsNetDistrict(request: DescribeEnsNetDistrictRequest): DescribeEnsNetDistrictResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsNetDistrictWithOptions(request, runtime);
}

model DescribeEnsNetLevelRequest {
  version?: string(name='Version'),
}

model DescribeEnsNetLevelResponseBody = {
  code?: int32(name='Code'),
  ensNetLevels?: {
    ensNetLevel?: [ 
    {
      ensNetLevelCode?: string(name='EnsNetLevelCode'),
    }
  ](name='EnsNetLevel')
  }(name='EnsNetLevels'),
  requestId?: string(name='RequestId'),
}

model DescribeEnsNetLevelResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsNetLevelResponseBody(name='body'),
}

async function describeEnsNetLevelWithOptions(request: DescribeEnsNetLevelRequest, runtime: Util.RuntimeOptions): DescribeEnsNetLevelResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEnsNetLevel', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEnsNetLevel(request: DescribeEnsNetLevelRequest): DescribeEnsNetLevelResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsNetLevelWithOptions(request, runtime);
}

model DescribeEnsNetSaleDistrictRequest {
  version?: string(name='Version'),
  netLevelCode?: string(name='NetLevelCode'),
  netDistrictCode?: string(name='NetDistrictCode'),
}

model DescribeEnsNetSaleDistrictResponseBody = {
  code?: int32(name='Code'),
  ensNetDistricts?: {
    ensNetDistrict?: [ 
    {
      ensRegionIdCount?: string(name='EnsRegionIdCount'),
      instanceCount?: string(name='InstanceCount'),
      netDistrictCode?: string(name='NetDistrictCode'),
      netDistrictEnName?: string(name='NetDistrictEnName'),
      netDistrictFatherCode?: string(name='NetDistrictFatherCode'),
      netDistrictLevel?: string(name='NetDistrictLevel'),
      netDistrictName?: string(name='NetDistrictName'),
    }
  ](name='EnsNetDistrict')
  }(name='EnsNetDistricts'),
  requestId?: string(name='RequestId'),
}

model DescribeEnsNetSaleDistrictResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsNetSaleDistrictResponseBody(name='body'),
}

async function describeEnsNetSaleDistrictWithOptions(request: DescribeEnsNetSaleDistrictRequest, runtime: Util.RuntimeOptions): DescribeEnsNetSaleDistrictResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEnsNetSaleDistrict', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEnsNetSaleDistrict(request: DescribeEnsNetSaleDistrictRequest): DescribeEnsNetSaleDistrictResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsNetSaleDistrictWithOptions(request, runtime);
}

model DescribeEnsRegionIdIpv6InfoRequest {
  version?: string(name='Version'),
  ensRegionId?: string(name='EnsRegionId'),
}

model DescribeEnsRegionIdIpv6InfoResponseBody = {
  requestId?: string(name='RequestId'),
  supportIpv6Info?: {
    ensRegionId?: string(name='EnsRegionId'),
    supportIpv6?: boolean(name='SupportIpv6'),
  }(name='SupportIpv6Info'),
}

model DescribeEnsRegionIdIpv6InfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsRegionIdIpv6InfoResponseBody(name='body'),
}

async function describeEnsRegionIdIpv6InfoWithOptions(request: DescribeEnsRegionIdIpv6InfoRequest, runtime: Util.RuntimeOptions): DescribeEnsRegionIdIpv6InfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEnsRegionIdIpv6Info', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEnsRegionIdIpv6Info(request: DescribeEnsRegionIdIpv6InfoRequest): DescribeEnsRegionIdIpv6InfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsRegionIdIpv6InfoWithOptions(request, runtime);
}

model DescribeEnsRegionIdResourceRequest {
  version?: string(name='Version'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  orderByParams?: string(name='OrderByParams'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: string(name='PageSize'),
  isp?: string(name='Isp'),
}

model DescribeEnsRegionIdResourceResponseBody = {
  ensRegionIdResources?: {
    ensRegionIdResource?: [ 
    {
      area?: string(name='Area'),
      areaCode?: string(name='AreaCode'),
      bizDate?: string(name='BizDate'),
      ensRegionId?: string(name='EnsRegionId'),
      ensRegionIdName?: string(name='EnsRegionIdName'),
      instanceCount?: int32(name='InstanceCount'),
      internetBandwidth?: int32(name='InternetBandwidth'),
      isp?: string(name='Isp'),
      VCpu?: int32(name='VCpu'),
    }
  ](name='EnsRegionIdResource')
  }(name='EnsRegionIdResources'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeEnsRegionIdResourceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsRegionIdResourceResponseBody(name='body'),
}

async function describeEnsRegionIdResourceWithOptions(request: DescribeEnsRegionIdResourceRequest, runtime: Util.RuntimeOptions): DescribeEnsRegionIdResourceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEnsRegionIdResource', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEnsRegionIdResource(request: DescribeEnsRegionIdResourceRequest): DescribeEnsRegionIdResourceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsRegionIdResourceWithOptions(request, runtime);
}

model DescribeEnsRegionsRequest {
  version?: string(name='Version'),
  ensRegionId?: string(name='EnsRegionId'),
}

model DescribeEnsRegionsResponseBody = {
  code?: int32(name='Code'),
  ensRegions?: {
    ensRegions?: [ 
    {
      area?: string(name='Area'),
      enName?: string(name='EnName'),
      ensRegionId?: string(name='EnsRegionId'),
      name?: string(name='Name'),
      province?: string(name='Province'),
    }
  ](name='EnsRegions')
  }(name='EnsRegions'),
  requestId?: string(name='RequestId'),
}

model DescribeEnsRegionsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEnsRegionsResponseBody(name='body'),
}

async function describeEnsRegionsWithOptions(request: DescribeEnsRegionsRequest, runtime: Util.RuntimeOptions): DescribeEnsRegionsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEnsRegions', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEnsRegions(request: DescribeEnsRegionsRequest): DescribeEnsRegionsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEnsRegionsWithOptions(request, runtime);
}

model DescribeEpnBandWidthDataRequest {
  version?: string(name='Version'),
  ensRegionId?: string(name='EnsRegionId'),
  instanceId?: string(name='InstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  period?: string(name='Period'),
  isp?: string(name='Isp'),
  networkingModel?: string(name='NetworkingModel'),
  EPNInstanceId?: string(name='EPNInstanceId'),
}

model DescribeEpnBandWidthDataResponseBody = {
  monitorData?: {
    bandWidthMonitorData?: [ 
      {
        downBandWidth?: long(name='DownBandWidth'),
        internetRX?: long(name='InternetRX'),
        internetTX?: long(name='InternetTX'),
        timeStamp?: string(name='TimeStamp'),
        upBandWidth?: long(name='UpBandWidth'),
      }
    ](name='BandWidthMonitorData'),
    maxDownBandWidth?: long(name='MaxDownBandWidth'),
    maxUpBandWidth?: long(name='MaxUpBandWidth'),
  }(name='MonitorData'),
  requestId?: string(name='RequestId'),
}

model DescribeEpnBandWidthDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEpnBandWidthDataResponseBody(name='body'),
}

async function describeEpnBandWidthDataWithOptions(request: DescribeEpnBandWidthDataRequest, runtime: Util.RuntimeOptions): DescribeEpnBandWidthDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEpnBandWidthData', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEpnBandWidthData(request: DescribeEpnBandWidthDataRequest): DescribeEpnBandWidthDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEpnBandWidthDataWithOptions(request, runtime);
}

model DescribeEpnBandwitdhByInternetChargeTypeRequest {
  version?: string(name='Version'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  isp?: string(name='Isp'),
  ensRegionId?: string(name='EnsRegionId'),
  networkingModel?: string(name='NetworkingModel'),
}

model DescribeEpnBandwitdhByInternetChargeTypeResponseBody = {
  bandwidthValue?: long(name='BandwidthValue'),
  internetChargeType?: string(name='InternetChargeType'),
  requestId?: string(name='RequestId'),
  timeStamp?: string(name='TimeStamp'),
}

model DescribeEpnBandwitdhByInternetChargeTypeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEpnBandwitdhByInternetChargeTypeResponseBody(name='body'),
}

async function describeEpnBandwitdhByInternetChargeTypeWithOptions(request: DescribeEpnBandwitdhByInternetChargeTypeRequest, runtime: Util.RuntimeOptions): DescribeEpnBandwitdhByInternetChargeTypeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEpnBandwitdhByInternetChargeType', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEpnBandwitdhByInternetChargeType(request: DescribeEpnBandwitdhByInternetChargeTypeRequest): DescribeEpnBandwitdhByInternetChargeTypeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEpnBandwitdhByInternetChargeTypeWithOptions(request, runtime);
}

model DescribeEpnInstanceAttributeRequest {
  EPNInstanceId?: string(name='EPNInstanceId'),
}

model DescribeEpnInstanceAttributeResponseBody = {
  confVersions?: [ 
    {
      confVersion?: string(name='ConfVersion'),
      ensRegionId?: string(name='EnsRegionId'),
    }
  ](name='ConfVersions'),
  EPNInstanceId?: string(name='EPNInstanceId'),
  EPNInstanceName?: string(name='EPNInstanceName'),
  instances?: [ 
    {
      ensRegionId?: string(name='EnsRegionId'),
      instanceId?: string(name='InstanceId'),
      instanceName?: string(name='InstanceName'),
      isp?: string(name='Isp'),
      privateIpAddress?: string(name='PrivateIpAddress'),
      publicIpAddress?: string(name='PublicIpAddress'),
      status?: string(name='Status'),
    }
  ](name='Instances'),
  networkingModel?: string(name='NetworkingModel'),
  requestId?: string(name='RequestId'),
  vSwitches?: [ 
    {
      cidrBlock?: string(name='CidrBlock'),
      ensRegionId?: string(name='EnsRegionId'),
      vSwitchId?: string(name='VSwitchId'),
      vSwitchName?: string(name='VSwitchName'),
    }
  ](name='VSwitches'),
}

model DescribeEpnInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEpnInstanceAttributeResponseBody(name='body'),
}

async function describeEpnInstanceAttributeWithOptions(request: DescribeEpnInstanceAttributeRequest, runtime: Util.RuntimeOptions): DescribeEpnInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEpnInstanceAttribute', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEpnInstanceAttribute(request: DescribeEpnInstanceAttributeRequest): DescribeEpnInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEpnInstanceAttributeWithOptions(request, runtime);
}

model DescribeEpnInstancesRequest {
  EPNInstanceId?: string(name='EPNInstanceId'),
  EPNInstanceName?: string(name='EPNInstanceName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeEpnInstancesResponseBody = {
  EPNInstances?: {
    EPNInstance?: [ 
    {
      creationTime?: string(name='CreationTime'),
      EPNInstanceId?: string(name='EPNInstanceId'),
      EPNInstanceName?: string(name='EPNInstanceName'),
      EPNInstanceType?: string(name='EPNInstanceType'),
      endTime?: string(name='EndTime'),
      internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
      modifyTime?: string(name='ModifyTime'),
      networkingModel?: string(name='NetworkingModel'),
      startTime?: string(name='StartTime'),
      status?: string(name='Status'),
    }
  ](name='EPNInstance')
  }(name='EPNInstances'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeEpnInstancesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEpnInstancesResponseBody(name='body'),
}

async function describeEpnInstancesWithOptions(request: DescribeEpnInstancesRequest, runtime: Util.RuntimeOptions): DescribeEpnInstancesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEpnInstances', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEpnInstances(request: DescribeEpnInstancesRequest): DescribeEpnInstancesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEpnInstancesWithOptions(request, runtime);
}

model DescribeEpnMeasurementDataRequest {
  version?: string(name='Version'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model DescribeEpnMeasurementDataResponseBody = {
  measurementDatas?: {
    measurementData?: [ 
    {
      bandWidthFeeDatas?: {
        bandWidthFeeData?: [ 
        {
          costCode?: string(name='CostCode'),
          costName?: string(name='CostName'),
          costType?: string(name='CostType'),
          costVal?: int32(name='CostVal'),
          ispLine?: string(name='IspLine'),
        }
      ](name='BandWidthFeeData')
      }(name='BandWidthFeeDatas'),
      chargeModel?: string(name='ChargeModel'),
      costCycle?: string(name='CostCycle'),
      costEndTime?: string(name='CostEndTime'),
      costStartTime?: string(name='CostStartTime'),
    }
  ](name='MeasurementData')
  }(name='MeasurementDatas'),
  requestId?: string(name='RequestId'),
}

model DescribeEpnMeasurementDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeEpnMeasurementDataResponseBody(name='body'),
}

async function describeEpnMeasurementDataWithOptions(request: DescribeEpnMeasurementDataRequest, runtime: Util.RuntimeOptions): DescribeEpnMeasurementDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeEpnMeasurementData', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeEpnMeasurementData(request: DescribeEpnMeasurementDataRequest): DescribeEpnMeasurementDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeEpnMeasurementDataWithOptions(request, runtime);
}

model DescribeExportImageInfoRequest {
  imageId?: string(name='ImageId'),
  imageName?: string(name='ImageName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model DescribeExportImageInfoResponseBody = {
  images?: {
    image?: [ 
    {
      architecture?: string(name='Architecture'),
      creationTime?: string(name='CreationTime'),
      exportedImageURL?: string(name='ExportedImageURL'),
      imageExportStatus?: string(name='ImageExportStatus'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      imageOwnerAlias?: string(name='ImageOwnerAlias'),
      platform?: string(name='Platform'),
    }
  ](name='Image')
  }(name='Images'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeExportImageInfoResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExportImageInfoResponseBody(name='body'),
}

async function describeExportImageInfoWithOptions(request: DescribeExportImageInfoRequest, runtime: Util.RuntimeOptions): DescribeExportImageInfoResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeExportImageInfo', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeExportImageInfo(request: DescribeExportImageInfoRequest): DescribeExportImageInfoResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExportImageInfoWithOptions(request, runtime);
}

model DescribeExportImageStatusRequest {
  version?: string(name='Version'),
  imageId?: string(name='ImageId'),
}

model DescribeExportImageStatusResponseBody = {
  imageExportStatus?: string(name='ImageExportStatus'),
  requestId?: string(name='RequestId'),
}

model DescribeExportImageStatusResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeExportImageStatusResponseBody(name='body'),
}

async function describeExportImageStatusWithOptions(request: DescribeExportImageStatusRequest, runtime: Util.RuntimeOptions): DescribeExportImageStatusResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeExportImageStatus', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeExportImageStatus(request: DescribeExportImageStatusRequest): DescribeExportImageStatusResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeExportImageStatusWithOptions(request, runtime);
}

model DescribeImageInfosRequest {
  version?: string(name='Version'),
  osType?: string(name='OsType'),
}

model DescribeImageInfosResponseBody = {
  code?: int32(name='Code'),
  images?: {
    image?: [ 
    {
      description?: string(name='Description'),
      imageId?: string(name='ImageId'),
      imageSize?: string(name='ImageSize'),
      imageVersion?: string(name='ImageVersion'),
      OSName?: string(name='OSName'),
      OSType?: string(name='OSType'),
    }
  ](name='Image')
  }(name='Images'),
  requestId?: string(name='RequestId'),
}

model DescribeImageInfosResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImageInfosResponseBody(name='body'),
}

async function describeImageInfosWithOptions(request: DescribeImageInfosRequest, runtime: Util.RuntimeOptions): DescribeImageInfosResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImageInfos', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImageInfos(request: DescribeImageInfosRequest): DescribeImageInfosResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImageInfosWithOptions(request, runtime);
}

model DescribeImagesRequest {
  product?: string(name='product'),
  version?: string(name='Version'),
  ensRegionId?: string(name='EnsRegionId'),
  imageId?: string(name='ImageId'),
  status?: string(name='Status'),
  imageName?: string(name='ImageName'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
}

model DescribeImagesResponseBody = {
  code?: int32(name='Code'),
  images?: {
    image?: [ 
    {
      architecture?: string(name='Architecture'),
      creationTime?: string(name='CreationTime'),
      imageId?: string(name='ImageId'),
      imageName?: string(name='ImageName'),
      imageOwnerAlias?: string(name='ImageOwnerAlias'),
      imageSize?: string(name='ImageSize'),
      platform?: string(name='Platform'),
    }
  ](name='Image')
  }(name='Images'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeImagesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeImagesResponseBody(name='body'),
}

async function describeImagesWithOptions(request: DescribeImagesRequest, runtime: Util.RuntimeOptions): DescribeImagesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeImages', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeImages(request: DescribeImagesRequest): DescribeImagesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeImagesWithOptions(request, runtime);
}

model DescribeInstanceAutoRenewAttributeRequest {
  version?: string(name='Version'),
  instanceIds?: string(name='InstanceIds'),
  ownerId?: long(name='OwnerId'),
}

model DescribeInstanceAutoRenewAttributeResponseBody = {
  code?: int32(name='Code'),
  instanceRenewAttributes?: {
    instanceRenewAttribute?: [ 
    {
      autoRenewal?: boolean(name='AutoRenewal'),
      duration?: string(name='Duration'),
      instanceId?: string(name='InstanceId'),
    }
  ](name='InstanceRenewAttribute')
  }(name='InstanceRenewAttributes'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceAutoRenewAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceAutoRenewAttributeResponseBody(name='body'),
}

async function describeInstanceAutoRenewAttributeWithOptions(request: DescribeInstanceAutoRenewAttributeRequest, runtime: Util.RuntimeOptions): DescribeInstanceAutoRenewAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceAutoRenewAttribute', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceAutoRenewAttribute(request: DescribeInstanceAutoRenewAttributeRequest): DescribeInstanceAutoRenewAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceAutoRenewAttributeWithOptions(request, runtime);
}

model DescribeInstanceMonitorDataRequest {
  version?: string(name='Version'),
  instanceId?: string(name='InstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  period?: string(name='Period'),
}

model DescribeInstanceMonitorDataResponseBody = {
  code?: int32(name='Code'),
  monitorData?: {
    instanceMonitorData?: [ 
    {
      CPU?: string(name='CPU'),
      instanceId?: string(name='InstanceId'),
      memory?: string(name='Memory'),
    }
  ](name='InstanceMonitorData')
  }(name='MonitorData'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceMonitorDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceMonitorDataResponseBody(name='body'),
}

async function describeInstanceMonitorDataWithOptions(request: DescribeInstanceMonitorDataRequest, runtime: Util.RuntimeOptions): DescribeInstanceMonitorDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceMonitorData', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceMonitorData(request: DescribeInstanceMonitorDataRequest): DescribeInstanceMonitorDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceMonitorDataWithOptions(request, runtime);
}

model DescribeInstanceSpecRequest {
  version?: string(name='Version'),
}

model DescribeInstanceSpecResponseBody = {
  bandwidthLimit?: int32(name='BandwidthLimit'),
  code?: int32(name='Code'),
  dataDiskMaxSize?: int32(name='DataDiskMaxSize'),
  dataDiskMinSize?: int32(name='DataDiskMinSize'),
  instanceSpecs?: {
    instanceSpec?: [ 
    {
      core?: string(name='Core'),
      displayName?: string(name='DisplayName'),
      instanceType?: string(name='InstanceType'),
      memory?: string(name='Memory'),
    }
  ](name='InstanceSpec')
  }(name='InstanceSpecs'),
  requestId?: string(name='RequestId'),
  systemDiskMaxSize?: int32(name='SystemDiskMaxSize'),
}

model DescribeInstanceSpecResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceSpecResponseBody(name='body'),
}

async function describeInstanceSpecWithOptions(request: DescribeInstanceSpecRequest, runtime: Util.RuntimeOptions): DescribeInstanceSpecResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceSpec', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceSpec(request: DescribeInstanceSpecRequest): DescribeInstanceSpecResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceSpecWithOptions(request, runtime);
}

model DescribeInstanceTypesRequest {
  version?: string(name='Version'),
}

model DescribeInstanceTypesResponseBody = {
  code?: int32(name='Code'),
  instanceTypes?: {
    instanceType?: [ 
    {
      cpuCoreCount?: int32(name='CpuCoreCount'),
      instanceTypeId?: string(name='InstanceTypeId'),
      instanceTypeName?: string(name='InstanceTypeName'),
      memorySize?: int32(name='MemorySize'),
    }
  ](name='InstanceType')
  }(name='InstanceTypes'),
  requestId?: string(name='RequestId'),
}

model DescribeInstanceTypesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceTypesResponseBody(name='body'),
}

async function describeInstanceTypesWithOptions(request: DescribeInstanceTypesRequest, runtime: Util.RuntimeOptions): DescribeInstanceTypesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceTypes', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceTypes(request: DescribeInstanceTypesRequest): DescribeInstanceTypesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceTypesWithOptions(request, runtime);
}

model DescribeInstanceVncUrlRequest {
  instanceId?: string(name='InstanceId', description='实例ID。'),
}

model DescribeInstanceVncUrlResponseBody = {
  requestId?: string(name='RequestId', description='请求ID。'),
  vncUrl?: string(name='VncUrl', description='管理终端Url。'),
}

model DescribeInstanceVncUrlResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeInstanceVncUrlResponseBody(name='body'),
}

async function describeInstanceVncUrlWithOptions(request: DescribeInstanceVncUrlRequest, runtime: Util.RuntimeOptions): DescribeInstanceVncUrlResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeInstanceVncUrl', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeInstanceVncUrl(request: DescribeInstanceVncUrlRequest): DescribeInstanceVncUrlResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeInstanceVncUrlWithOptions(request, runtime);
}

model DescribeKeyPairsRequest {
  version?: string(name='Version'),
  keyPairName?: string(name='KeyPairName'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
}

model DescribeKeyPairsResponseBody = {
  keyPairs?: {
    keyPair?: [ 
    {
      creationTime?: string(name='CreationTime'),
      keyPairFingerPrint?: string(name='KeyPairFingerPrint'),
      keyPairName?: string(name='KeyPairName'),
    }
  ](name='KeyPair')
  }(name='KeyPairs'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeKeyPairsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeKeyPairsResponseBody(name='body'),
}

async function describeKeyPairsWithOptions(request: DescribeKeyPairsRequest, runtime: Util.RuntimeOptions): DescribeKeyPairsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeKeyPairs', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeKeyPairs(request: DescribeKeyPairsRequest): DescribeKeyPairsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeKeyPairsWithOptions(request, runtime);
}

model DescribeMeasurementDataRequest {
  version?: string(name='Version'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model DescribeMeasurementDataResponseBody = {
  measurementDatas?: {
    measurementData?: [ 
    {
      bandWidthFeeDatas?: {
        bandWidthFeeData?: [ 
        {
          costCode?: string(name='CostCode'),
          costName?: string(name='CostName'),
          costVal?: int32(name='CostVal'),
        }
      ](name='BandWidthFeeData')
      }(name='BandWidthFeeDatas'),
      chargeModel?: string(name='ChargeModel'),
      costCycle?: string(name='CostCycle'),
      costEndTime?: string(name='CostEndTime'),
      costStartTime?: string(name='CostStartTime'),
      resourceFeeData?: {
        memory?: int32(name='Memory'),
        storage?: int32(name='Storage'),
        vcpu?: int32(name='Vcpu'),
      }(name='ResourceFeeData'),
      resourceFeeDataDetails?: {
        resourceFeeDataDetail?: [ 
        {
          costCode?: string(name='CostCode'),
          costName?: string(name='CostName'),
          costVal?: int32(name='CostVal'),
          resourceType?: string(name='ResourceType'),
        }
      ](name='ResourceFeeDataDetail')
      }(name='ResourceFeeDataDetails'),
    }
  ](name='MeasurementData')
  }(name='MeasurementDatas'),
  requestId?: string(name='RequestId'),
}

model DescribeMeasurementDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeMeasurementDataResponseBody(name='body'),
}

async function describeMeasurementDataWithOptions(request: DescribeMeasurementDataRequest, runtime: Util.RuntimeOptions): DescribeMeasurementDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeMeasurementData', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeMeasurementData(request: DescribeMeasurementDataRequest): DescribeMeasurementDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeMeasurementDataWithOptions(request, runtime);
}

model DescribeNetworkInterfacesRequest {
  instanceId?: string(name='InstanceId'),
  vSwitchId?: string(name='VSwitchId'),
  ensRegionId?: string(name='EnsRegionId'),
  primaryIpAddress?: string(name='PrimaryIpAddress'),
  pageNumber?: string(name='PageNumber'),
  pageSize?: string(name='PageSize'),
}

model DescribeNetworkInterfacesResponseBody = {
  networkInterfaceSets?: {
    networkInterfaceSet?: [ 
    {
      creationTime?: string(name='CreationTime'),
      ensRegionId?: string(name='EnsRegionId'),
      instanceId?: string(name='InstanceId'),
      macAddress?: string(name='MacAddress'),
      networkInterfaceId?: string(name='NetworkInterfaceId'),
      primaryIp?: string(name='PrimaryIp'),
      primaryIpType?: string(name='PrimaryIpType'),
      status?: string(name='Status'),
      vSwitchId?: string(name='VSwitchId'),
    }
  ](name='NetworkInterfaceSet')
  }(name='NetworkInterfaceSets'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeNetworkInterfacesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeNetworkInterfacesResponseBody(name='body'),
}

async function describeNetworkInterfacesWithOptions(request: DescribeNetworkInterfacesRequest, runtime: Util.RuntimeOptions): DescribeNetworkInterfacesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeNetworkInterfaces', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeNetworkInterfaces(request: DescribeNetworkInterfacesRequest): DescribeNetworkInterfacesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeNetworkInterfacesWithOptions(request, runtime);
}

model DescribePrePaidInstanceStockRequest {
  version?: string(name='Version'),
  ensRegionId?: string(name='EnsRegionId'),
  systemDiskSize?: int32(name='SystemDiskSize'),
  dataDiskSize?: int32(name='DataDiskSize'),
  instanceSpec?: string(name='InstanceSpec'),
}

model DescribePrePaidInstanceStockResponseBody = {
  avaliableCount?: int32(name='AvaliableCount'),
  cores?: int32(name='Cores'),
  dataDiskSize?: int32(name='DataDiskSize'),
  ensRegionId?: string(name='EnsRegionId'),
  instanceSpec?: string(name='InstanceSpec'),
  memory?: int32(name='Memory'),
  requestId?: string(name='RequestId'),
  systemDiskSize?: int32(name='SystemDiskSize'),
}

model DescribePrePaidInstanceStockResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePrePaidInstanceStockResponseBody(name='body'),
}

async function describePrePaidInstanceStockWithOptions(request: DescribePrePaidInstanceStockRequest, runtime: Util.RuntimeOptions): DescribePrePaidInstanceStockResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePrePaidInstanceStock', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePrePaidInstanceStock(request: DescribePrePaidInstanceStockRequest): DescribePrePaidInstanceStockResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePrePaidInstanceStockWithOptions(request, runtime);
}

model DescribePriceRequest {
  systemDisk?: {
    size?: int32(name='Size'),
  }(name='SystemDisk'),
  dataDisk?: [
    {
      size?: int32(name='Size'),
    }
  ](name='DataDisk'),
  version?: string(name='Version'),
  instanceType?: string(name='InstanceType'),
  ensRegionId?: string(name='EnsRegionId'),
  period?: int32(name='Period'),
  quantity?: int32(name='Quantity'),
  internetChargeType?: string(name='InternetChargeType'),
}

model DescribePriceResponseBody = {
  priceInfo?: {
    price?: {
      currency?: string(name='Currency'),
      discountPrice?: float(name='DiscountPrice'),
      originalPrice?: float(name='OriginalPrice'),
      tradePrice?: float(name='TradePrice'),
    }(name='Price'),
  }(name='PriceInfo'),
  requestId?: string(name='RequestId'),
}

model DescribePriceResponse = {
  headers: map[string]string(name='headers'),
  body: DescribePriceResponseBody(name='body'),
}

async function describePriceWithOptions(request: DescribePriceRequest, runtime: Util.RuntimeOptions): DescribePriceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribePrice', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describePrice(request: DescribePriceRequest): DescribePriceResponse {
  var runtime = new Util.RuntimeOptions{};
  return describePriceWithOptions(request, runtime);
}

model DescribeSecurityGroupAttributeRequest {
  version?: string(name='Version'),
  securityGroupId?: string(name='SecurityGroupId'),
}

model DescribeSecurityGroupAttributeResponseBody = {
  permissions?: {
    permission?: [ 
    {
      creationTime?: string(name='CreationTime'),
      destCidrIp?: string(name='DestCidrIp'),
      direction?: string(name='Direction'),
      ipProtocol?: string(name='IpProtocol'),
      policy?: string(name='Policy'),
      portRange?: string(name='PortRange'),
      priority?: int32(name='Priority'),
      sourceCidrIp?: string(name='SourceCidrIp'),
      sourcePortRange?: string(name='SourcePortRange'),
    }
  ](name='Permission')
  }(name='Permissions'),
  requestId?: string(name='RequestId'),
  securityGroupId?: string(name='SecurityGroupId'),
}

model DescribeSecurityGroupAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupAttributeResponseBody(name='body'),
}

async function describeSecurityGroupAttributeWithOptions(request: DescribeSecurityGroupAttributeRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityGroupAttribute', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityGroupAttribute(request: DescribeSecurityGroupAttributeRequest): DescribeSecurityGroupAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupAttributeWithOptions(request, runtime);
}

model DescribeSecurityGroupsRequest {
  version?: string(name='Version'),
  securityGroupId?: string(name='SecurityGroupId'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  securityGroupName?: string(name='SecurityGroupName'),
}

model DescribeSecurityGroupsResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  securityGroups?: {
    securityGroup?: [ 
    {
      creationTime?: string(name='CreationTime'),
      securityGroupId?: string(name='SecurityGroupId'),
      securityGroupName?: string(name='SecurityGroupName'),
    }
  ](name='SecurityGroup')
  }(name='SecurityGroups'),
  totalCount?: int32(name='TotalCount'),
}

model DescribeSecurityGroupsResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeSecurityGroupsResponseBody(name='body'),
}

async function describeSecurityGroupsWithOptions(request: DescribeSecurityGroupsRequest, runtime: Util.RuntimeOptions): DescribeSecurityGroupsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeSecurityGroups', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeSecurityGroups(request: DescribeSecurityGroupsRequest): DescribeSecurityGroupsResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeSecurityGroupsWithOptions(request, runtime);
}

model DescribeServcieScheduleRequest {
  appId?: string(name='AppId'),
  uuid?: string(name='Uuid'),
  podConfigName?: string(name='PodConfigName'),
}

model DescribeServcieScheduleResponseBody = {
  index?: int32(name='Index'),
  instanceId?: string(name='InstanceId'),
  instanceIp?: string(name='InstanceIp'),
  instancePort?: int32(name='InstancePort'),
  podAbstractInfo?: {
    containerService?: boolean(name='ContainerService'),
    containerStatuses?: {
      containerStatus?: [ 
      {
        containerId?: string(name='ContainerId'),
        name?: string(name='Name'),
      }
    ](name='ContainerStatus')
    }(name='ContainerStatuses'),
    name?: boolean(name='Name'),
    namespace?: boolean(name='Namespace'),
    resourceScope?: boolean(name='ResourceScope'),
    status?: boolean(name='Status'),
  }(name='PodAbstractInfo'),
  requestId?: string(name='RequestId'),
  requestRepeated?: boolean(name='RequestRepeated'),
  tcpPorts?: string(name='TcpPorts'),
}

model DescribeServcieScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeServcieScheduleResponseBody(name='body'),
}

async function describeServcieScheduleWithOptions(request: DescribeServcieScheduleRequest, runtime: Util.RuntimeOptions): DescribeServcieScheduleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeServcieSchedule', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeServcieSchedule(request: DescribeServcieScheduleRequest): DescribeServcieScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeServcieScheduleWithOptions(request, runtime);
}

model DescribeUserBandWidthDataRequest {
  version?: string(name='Version'),
  ensRegionId?: string(name='EnsRegionId'),
  instanceId?: string(name='InstanceId'),
  startTime?: string(name='StartTime'),
  endTime?: string(name='EndTime'),
  period?: string(name='Period'),
  isp?: string(name='Isp'),
}

model DescribeUserBandWidthDataResponseBody = {
  code?: int32(name='Code'),
  monitorData?: {
    bandWidthMonitorData?: [ 
      {
        downBandWidth?: int32(name='DownBandWidth'),
        internetRX?: int32(name='InternetRX'),
        internetTX?: int32(name='InternetTX'),
        timeStamp?: string(name='TimeStamp'),
        upBandWidth?: int32(name='UpBandWidth'),
      }
    ](name='BandWidthMonitorData'),
    maxDownBandWidth?: string(name='MaxDownBandWidth'),
    maxUpBandWidth?: string(name='MaxUpBandWidth'),
  }(name='MonitorData'),
  requestId?: string(name='RequestId'),
}

model DescribeUserBandWidthDataResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeUserBandWidthDataResponseBody(name='body'),
}

async function describeUserBandWidthDataWithOptions(request: DescribeUserBandWidthDataRequest, runtime: Util.RuntimeOptions): DescribeUserBandWidthDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeUserBandWidthData', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeUserBandWidthData(request: DescribeUserBandWidthDataRequest): DescribeUserBandWidthDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeUserBandWidthDataWithOptions(request, runtime);
}

model DescribeVSwitchesRequest {
  version?: string(name='Version'),
  ensRegionId?: string(name='EnsRegionId'),
  vSwitchId?: string(name='VSwitchId'),
  vSwitchName?: string(name='VSwitchName'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  orderByParams?: string(name='OrderByParams'),
}

model DescribeVSwitchesResponseBody = {
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
  vSwitches?: {
    vSwitch?: [ 
    {
      cidrBlock?: string(name='CidrBlock'),
      createdTime?: string(name='CreatedTime'),
      ensRegionId?: string(name='EnsRegionId'),
      freeIpCount?: long(name='FreeIpCount'),
      status?: string(name='Status'),
      vSwitchId?: string(name='VSwitchId'),
      vSwitchName?: string(name='VSwitchName'),
    }
  ](name='VSwitch')
  }(name='VSwitches'),
}

model DescribeVSwitchesResponse = {
  headers: map[string]string(name='headers'),
  body: DescribeVSwitchesResponseBody(name='body'),
}

async function describeVSwitchesWithOptions(request: DescribeVSwitchesRequest, runtime: Util.RuntimeOptions): DescribeVSwitchesResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('DescribeVSwitches', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function describeVSwitches(request: DescribeVSwitchesRequest): DescribeVSwitchesResponse {
  var runtime = new Util.RuntimeOptions{};
  return describeVSwitchesWithOptions(request, runtime);
}

model ExportBillDetailDataRequest {
  version?: string(name='Version'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model ExportBillDetailDataResponseBody = {
  filePath?: string(name='FilePath'),
  requestId?: string(name='RequestId'),
}

model ExportBillDetailDataResponse = {
  headers: map[string]string(name='headers'),
  body: ExportBillDetailDataResponseBody(name='body'),
}

async function exportBillDetailDataWithOptions(request: ExportBillDetailDataRequest, runtime: Util.RuntimeOptions): ExportBillDetailDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExportBillDetailData', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function exportBillDetailData(request: ExportBillDetailDataRequest): ExportBillDetailDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportBillDetailDataWithOptions(request, runtime);
}

model ExportImageRequest {
  version?: string(name='Version'),
  imageId?: string(name='ImageId'),
  OSSBucket?: string(name='OSSBucket'),
  OSSRegionId?: string(name='OSSRegionId'),
  OSSPrefix?: string(name='OSSPrefix'),
  roleName?: string(name='RoleName'),
}

model ExportImageResponseBody = {
  exportedImageURL?: string(name='ExportedImageURL'),
  requestId?: string(name='RequestId'),
}

model ExportImageResponse = {
  headers: map[string]string(name='headers'),
  body: ExportImageResponseBody(name='body'),
}

async function exportImageWithOptions(request: ExportImageRequest, runtime: Util.RuntimeOptions): ExportImageResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExportImage', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function exportImage(request: ExportImageRequest): ExportImageResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportImageWithOptions(request, runtime);
}

model ExportMeasurementDataRequest {
  version?: string(name='Version'),
  startDate?: string(name='StartDate'),
  endDate?: string(name='EndDate'),
}

model ExportMeasurementDataResponseBody = {
  filePath?: string(name='FilePath'),
  requestId?: string(name='RequestId'),
}

model ExportMeasurementDataResponse = {
  headers: map[string]string(name='headers'),
  body: ExportMeasurementDataResponseBody(name='body'),
}

async function exportMeasurementDataWithOptions(request: ExportMeasurementDataRequest, runtime: Util.RuntimeOptions): ExportMeasurementDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ExportMeasurementData', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function exportMeasurementData(request: ExportMeasurementDataRequest): ExportMeasurementDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return exportMeasurementDataWithOptions(request, runtime);
}

model GetVmListRequest {
  aliUid?: long(name='AliUid'),
  groupUuid?: string(name='GroupUuid'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
}

model GetVmListResponseBody = {
  code?: int32(name='Code', description='业务状态码'),
  requestId?: string(name='RequestId', description='Id of the request'),
  msg?: string(name='Msg', description='返回信息'),
  data?: string(name='Data', description='业务数据'),
  desc?: string(name='Desc'),
}

model GetVmListResponse = {
  headers: map[string]string(name='headers'),
  body: GetVmListResponseBody(name='body'),
}

async function getVmListWithOptions(request: GetVmListRequest, runtime: Util.RuntimeOptions): GetVmListResponse {
  Util.validateModel(request);
  var query = OpenApiUtil.query(Util.toMap(request));
  var req = new OpenApi.OpenApiRequest{ 
    query = query,
  };
  return doRPCRequest('GetVmList', '2017-11-10', 'HTTPS', 'GET', 'AK', 'json', req, runtime);
}

async function getVmList(request: GetVmListRequest): GetVmListResponse {
  var runtime = new Util.RuntimeOptions{};
  return getVmListWithOptions(request, runtime);
}

model ImportKeyPairRequest {
  version?: string(name='Version'),
  keyPairName?: string(name='KeyPairName'),
  publicKeyBody?: string(name='PublicKeyBody'),
}

model ImportKeyPairResponseBody = {
  keyPairFingerPrint?: string(name='KeyPairFingerPrint'),
  keyPairName?: string(name='KeyPairName'),
  requestId?: string(name='RequestId'),
}

model ImportKeyPairResponse = {
  headers: map[string]string(name='headers'),
  body: ImportKeyPairResponseBody(name='body'),
}

async function importKeyPairWithOptions(request: ImportKeyPairRequest, runtime: Util.RuntimeOptions): ImportKeyPairResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ImportKeyPair', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function importKeyPair(request: ImportKeyPairRequest): ImportKeyPairResponse {
  var runtime = new Util.RuntimeOptions{};
  return importKeyPairWithOptions(request, runtime);
}

model JoinPublicIpsToEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId'),
  instanceInfos?: string(name='InstanceInfos'),
}

model JoinPublicIpsToEpnInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model JoinPublicIpsToEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: JoinPublicIpsToEpnInstanceResponseBody(name='body'),
}

async function joinPublicIpsToEpnInstanceWithOptions(request: JoinPublicIpsToEpnInstanceRequest, runtime: Util.RuntimeOptions): JoinPublicIpsToEpnInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('JoinPublicIpsToEpnInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function joinPublicIpsToEpnInstance(request: JoinPublicIpsToEpnInstanceRequest): JoinPublicIpsToEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinPublicIpsToEpnInstanceWithOptions(request, runtime);
}

model JoinSecurityGroupRequest {
  version?: string(name='Version'),
  securityGroupId?: string(name='SecurityGroupId'),
  instanceId?: string(name='InstanceId'),
}

model JoinSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model JoinSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: JoinSecurityGroupResponseBody(name='body'),
}

async function joinSecurityGroupWithOptions(request: JoinSecurityGroupRequest, runtime: Util.RuntimeOptions): JoinSecurityGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('JoinSecurityGroup', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function joinSecurityGroup(request: JoinSecurityGroupRequest): JoinSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinSecurityGroupWithOptions(request, runtime);
}

model JoinVSwitchesToEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId'),
  vSwitchesInfo?: string(name='VSwitchesInfo'),
}

model JoinVSwitchesToEpnInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model JoinVSwitchesToEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: JoinVSwitchesToEpnInstanceResponseBody(name='body'),
}

async function joinVSwitchesToEpnInstanceWithOptions(request: JoinVSwitchesToEpnInstanceRequest, runtime: Util.RuntimeOptions): JoinVSwitchesToEpnInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('JoinVSwitchesToEpnInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function joinVSwitchesToEpnInstance(request: JoinVSwitchesToEpnInstanceRequest): JoinVSwitchesToEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return joinVSwitchesToEpnInstanceWithOptions(request, runtime);
}

model LeaveSecurityGroupRequest {
  version?: string(name='Version'),
  securityGroupId?: string(name='SecurityGroupId'),
  instanceId?: string(name='InstanceId'),
}

model LeaveSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model LeaveSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: LeaveSecurityGroupResponseBody(name='body'),
}

async function leaveSecurityGroupWithOptions(request: LeaveSecurityGroupRequest, runtime: Util.RuntimeOptions): LeaveSecurityGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('LeaveSecurityGroup', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function leaveSecurityGroup(request: LeaveSecurityGroupRequest): LeaveSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return leaveSecurityGroupWithOptions(request, runtime);
}

model ListApplicationsRequest {
  clusterNames?: string(name='ClusterNames'),
  appVersions?: string(name='AppVersions'),
  level?: string(name='Level'),
  outAppInfoParams?: string(name='OutAppInfoParams'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  minDate?: string(name='MinDate'),
  maxDate?: string(name='MaxDate'),
}

model ListApplicationsResponseBody = {
  applications?: {
    application?: [ 
    {
      appList?: {
        app?: [ 
        {
          appId?: string(name='AppId'),
          appInfo?: string(name='AppInfo'),
        }
      ](name='App')
      }(name='AppList'),
      clusterName?: string(name='ClusterName'),
    }
  ](name='Application')
  }(name='Applications'),
  pageNumber?: int32(name='PageNumber'),
  pageSize?: int32(name='PageSize'),
  requestId?: string(name='RequestId'),
  totalCount?: int32(name='TotalCount'),
}

model ListApplicationsResponse = {
  headers: map[string]string(name='headers'),
  body: ListApplicationsResponseBody(name='body'),
}

async function listApplicationsWithOptions(request: ListApplicationsRequest, runtime: Util.RuntimeOptions): ListApplicationsResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ListApplications', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function listApplications(request: ListApplicationsRequest): ListApplicationsResponse {
  var runtime = new Util.RuntimeOptions{};
  return listApplicationsWithOptions(request, runtime);
}

model ModifyEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId'),
  EPNInstanceName?: string(name='EPNInstanceName'),
  networkingModel?: string(name='NetworkingModel'),
  internetMaxBandwidthOut?: int32(name='InternetMaxBandwidthOut'),
}

model ModifyEpnInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyEpnInstanceResponseBody(name='body'),
}

async function modifyEpnInstanceWithOptions(request: ModifyEpnInstanceRequest, runtime: Util.RuntimeOptions): ModifyEpnInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyEpnInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyEpnInstance(request: ModifyEpnInstanceRequest): ModifyEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyEpnInstanceWithOptions(request, runtime);
}

model ModifyImageAttributeRequest {
  product?: string(name='product'),
  version?: string(name='Version'),
  imageId?: string(name='ImageId'),
  imageName?: string(name='ImageName'),
}

model ModifyImageAttributeResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
}

model ModifyImageAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageAttributeResponseBody(name='body'),
}

async function modifyImageAttributeWithOptions(request: ModifyImageAttributeRequest, runtime: Util.RuntimeOptions): ModifyImageAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyImageAttribute', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyImageAttribute(request: ModifyImageAttributeRequest): ModifyImageAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageAttributeWithOptions(request, runtime);
}

model ModifyImageSharePermissionRequest {
  imageId?: string(name='ImageId'),
  addAccounts?: string(name='AddAccounts'),
  removeAccounts?: string(name='RemoveAccounts'),
}

model ModifyImageSharePermissionResponseBody = {
  requestId?: string(name='RequestId'),
}

model ModifyImageSharePermissionResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyImageSharePermissionResponseBody(name='body'),
}

async function modifyImageSharePermissionWithOptions(request: ModifyImageSharePermissionRequest, runtime: Util.RuntimeOptions): ModifyImageSharePermissionResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyImageSharePermission', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyImageSharePermission(request: ModifyImageSharePermissionRequest): ModifyImageSharePermissionResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyImageSharePermissionWithOptions(request, runtime);
}

model ModifyInstanceAttributeRequest {
  version?: string(name='Version'),
  instanceId?: string(name='InstanceId'),
  password?: string(name='Password'),
  instanceName?: string(name='InstanceName'),
}

model ModifyInstanceAttributeResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
}

model ModifyInstanceAttributeResponse = {
  headers: map[string]string(name='headers'),
  body: ModifyInstanceAttributeResponseBody(name='body'),
}

async function modifyInstanceAttributeWithOptions(request: ModifyInstanceAttributeRequest, runtime: Util.RuntimeOptions): ModifyInstanceAttributeResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ModifyInstanceAttribute', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function modifyInstanceAttribute(request: ModifyInstanceAttributeRequest): ModifyInstanceAttributeResponse {
  var runtime = new Util.RuntimeOptions{};
  return modifyInstanceAttributeWithOptions(request, runtime);
}

model PreCreateEnsServiceRequest {
  version?: string(name='Version'),
  ensServiceName?: string(name='EnsServiceName'),
  imageId?: string(name='ImageId'),
  instanceSpec?: string(name='InstanceSpec'),
  systemDiskSize?: string(name='SystemDiskSize'),
  dataDiskSize?: string(name='DataDiskSize'),
  bandwidthType?: string(name='BandwidthType'),
  instanceBandwithdLimit?: string(name='InstanceBandwithdLimit'),
  password?: string(name='Password'),
  keyPairName?: string(name='KeyPairName'),
  userData?: string(name='UserData'),
  netLevel?: string(name='NetLevel'),
  schedulingStrategy?: string(name='SchedulingStrategy'),
  schedulingPriceStrategy?: string(name='SchedulingPriceStrategy'),
  buyResourcesDetail?: string(name='BuyResourcesDetail'),
}

model PreCreateEnsServiceResponseBody = {
  buyResourcesDetail?: string(name='BuyResourcesDetail'),
  code?: int32(name='Code'),
  ensServiceId?: string(name='EnsServiceId'),
  netLevel?: string(name='NetLevel'),
  requestId?: string(name='RequestId'),
}

model PreCreateEnsServiceResponse = {
  headers: map[string]string(name='headers'),
  body: PreCreateEnsServiceResponseBody(name='body'),
}

async function preCreateEnsServiceWithOptions(request: PreCreateEnsServiceRequest, runtime: Util.RuntimeOptions): PreCreateEnsServiceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PreCreateEnsService', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function preCreateEnsService(request: PreCreateEnsServiceRequest): PreCreateEnsServiceResponse {
  var runtime = new Util.RuntimeOptions{};
  return preCreateEnsServiceWithOptions(request, runtime);
}

model PushApplicationDataRequest {
  data?: string(name='Data'),
  appId?: string(name='AppId'),
  timeout?: int32(name='Timeout'),
  pushStrategy?: string(name='PushStrategy'),
}

model PushApplicationDataResponseBody = {
  pushResults?: {
    pushResult?: [ 
    {
      name?: string(name='Name'),
      resultCode?: int32(name='ResultCode'),
      resultDescrip?: string(name='ResultDescrip'),
      version?: string(name='Version'),
    }
  ](name='PushResult')
  }(name='PushResults'),
  requestId?: string(name='RequestId'),
}

model PushApplicationDataResponse = {
  headers: map[string]string(name='headers'),
  body: PushApplicationDataResponseBody(name='body'),
}

async function pushApplicationDataWithOptions(request: PushApplicationDataRequest, runtime: Util.RuntimeOptions): PushApplicationDataResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('PushApplicationData', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function pushApplicationData(request: PushApplicationDataRequest): PushApplicationDataResponse {
  var runtime = new Util.RuntimeOptions{};
  return pushApplicationDataWithOptions(request, runtime);
}

model RebootInstanceRequest {
  version?: string(name='Version'),
  instanceId?: string(name='InstanceId'),
  forceStop?: string(name='ForceStop'),
}

model RebootInstanceResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
}

model RebootInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RebootInstanceResponseBody(name='body'),
}

async function rebootInstanceWithOptions(request: RebootInstanceRequest, runtime: Util.RuntimeOptions): RebootInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RebootInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rebootInstance(request: RebootInstanceRequest): RebootInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return rebootInstanceWithOptions(request, runtime);
}

model ReInitDiskRequest {
  version?: string(name='Version'),
  diskId?: string(name='DiskId'),
  imageId?: string(name='ImageId'),
}

model ReInitDiskResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
}

model ReInitDiskResponse = {
  headers: map[string]string(name='headers'),
  body: ReInitDiskResponseBody(name='body'),
}

async function reInitDiskWithOptions(request: ReInitDiskRequest, runtime: Util.RuntimeOptions): ReInitDiskResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReInitDisk', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function reInitDisk(request: ReInitDiskRequest): ReInitDiskResponse {
  var runtime = new Util.RuntimeOptions{};
  return reInitDiskWithOptions(request, runtime);
}

model ReleaseEipAddressRequest {
  version?: string(name='Version'),
  ensRegionId?: string(name='EnsRegionId'),
  eips?: string(name='Eips'),
}

model ReleaseEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleaseEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: ReleaseEipAddressResponseBody(name='body'),
}

async function releaseEipAddressWithOptions(request: ReleaseEipAddressRequest, runtime: Util.RuntimeOptions): ReleaseEipAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleaseEipAddress', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releaseEipAddress(request: ReleaseEipAddressRequest): ReleaseEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return releaseEipAddressWithOptions(request, runtime);
}

model ReleasePostPaidInstanceRequest {
  version?: string(name='Version'),
  instanceId?: string(name='InstanceId'),
}

model ReleasePostPaidInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleasePostPaidInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleasePostPaidInstanceResponseBody(name='body'),
}

async function releasePostPaidInstanceWithOptions(request: ReleasePostPaidInstanceRequest, runtime: Util.RuntimeOptions): ReleasePostPaidInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleasePostPaidInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releasePostPaidInstance(request: ReleasePostPaidInstanceRequest): ReleasePostPaidInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releasePostPaidInstanceWithOptions(request, runtime);
}

model ReleasePrePaidInstanceRequest {
  version?: string(name='Version'),
  instanceId?: string(name='InstanceId'),
}

model ReleasePrePaidInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model ReleasePrePaidInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: ReleasePrePaidInstanceResponseBody(name='body'),
}

async function releasePrePaidInstanceWithOptions(request: ReleasePrePaidInstanceRequest, runtime: Util.RuntimeOptions): ReleasePrePaidInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('ReleasePrePaidInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function releasePrePaidInstance(request: ReleasePrePaidInstanceRequest): ReleasePrePaidInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return releasePrePaidInstanceWithOptions(request, runtime);
}

model RemovePublicIpsFromEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId'),
  instanceInfos?: string(name='InstanceInfos'),
}

model RemovePublicIpsFromEpnInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemovePublicIpsFromEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RemovePublicIpsFromEpnInstanceResponseBody(name='body'),
}

async function removePublicIpsFromEpnInstanceWithOptions(request: RemovePublicIpsFromEpnInstanceRequest, runtime: Util.RuntimeOptions): RemovePublicIpsFromEpnInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemovePublicIpsFromEpnInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removePublicIpsFromEpnInstance(request: RemovePublicIpsFromEpnInstanceRequest): RemovePublicIpsFromEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removePublicIpsFromEpnInstanceWithOptions(request, runtime);
}

model RemoveVSwitchesFromEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId'),
  vSwitchesInfo?: string(name='VSwitchesInfo'),
}

model RemoveVSwitchesFromEpnInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model RemoveVSwitchesFromEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: RemoveVSwitchesFromEpnInstanceResponseBody(name='body'),
}

async function removeVSwitchesFromEpnInstanceWithOptions(request: RemoveVSwitchesFromEpnInstanceRequest, runtime: Util.RuntimeOptions): RemoveVSwitchesFromEpnInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RemoveVSwitchesFromEpnInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function removeVSwitchesFromEpnInstance(request: RemoveVSwitchesFromEpnInstanceRequest): RemoveVSwitchesFromEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return removeVSwitchesFromEpnInstanceWithOptions(request, runtime);
}

model RescaleApplicationRequest {
  appId?: string(name='AppId'),
  rescaleType?: string(name='RescaleType'),
  rescaleLevel?: string(name='RescaleLevel'),
  resourceSelector?: string(name='ResourceSelector'),
  toAppVersion?: string(name='ToAppVersion'),
  timeout?: int32(name='Timeout'),
}

model RescaleApplicationResponseBody = {
  requestId?: string(name='RequestId'),
}

model RescaleApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: RescaleApplicationResponseBody(name='body'),
}

async function rescaleApplicationWithOptions(request: RescaleApplicationRequest, runtime: Util.RuntimeOptions): RescaleApplicationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RescaleApplication', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rescaleApplication(request: RescaleApplicationRequest): RescaleApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return rescaleApplicationWithOptions(request, runtime);
}

model RevokeSecurityGroupRequest {
  version?: string(name='Version'),
  ipProtocol?: string(name='IpProtocol'),
  portRange?: string(name='PortRange'),
  securityGroupId?: string(name='SecurityGroupId'),
  policy?: string(name='Policy'),
  priority?: int32(name='Priority'),
  sourceCidrIp?: string(name='SourceCidrIp'),
  sourcePortRange?: string(name='SourcePortRange'),
}

model RevokeSecurityGroupResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeSecurityGroupResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeSecurityGroupResponseBody(name='body'),
}

async function revokeSecurityGroupWithOptions(request: RevokeSecurityGroupRequest, runtime: Util.RuntimeOptions): RevokeSecurityGroupResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RevokeSecurityGroup', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function revokeSecurityGroup(request: RevokeSecurityGroupRequest): RevokeSecurityGroupResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeSecurityGroupWithOptions(request, runtime);
}

model RevokeSecurityGroupEgressRequest {
  version?: string(name='Version'),
  ipProtocol?: string(name='IpProtocol'),
  portRange?: string(name='PortRange'),
  securityGroupId?: string(name='SecurityGroupId'),
  policy?: string(name='Policy'),
  priority?: int32(name='Priority'),
  destCidrIp?: string(name='DestCidrIp'),
  sourcePortRange?: string(name='SourcePortRange'),
}

model RevokeSecurityGroupEgressResponseBody = {
  requestId?: string(name='RequestId'),
}

model RevokeSecurityGroupEgressResponse = {
  headers: map[string]string(name='headers'),
  body: RevokeSecurityGroupEgressResponseBody(name='body'),
}

async function revokeSecurityGroupEgressWithOptions(request: RevokeSecurityGroupEgressRequest, runtime: Util.RuntimeOptions): RevokeSecurityGroupEgressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RevokeSecurityGroupEgress', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function revokeSecurityGroupEgress(request: RevokeSecurityGroupEgressRequest): RevokeSecurityGroupEgressResponse {
  var runtime = new Util.RuntimeOptions{};
  return revokeSecurityGroupEgressWithOptions(request, runtime);
}

model RollbackApplicationRequest {
  appId?: string(name='AppId'),
  fromAppVersion?: string(name='FromAppVersion'),
  toAppVersion?: string(name='ToAppVersion'),
  timeout?: int32(name='Timeout'),
}

model RollbackApplicationResponseBody = {
  requestId?: string(name='RequestId'),
}

model RollbackApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: RollbackApplicationResponseBody(name='body'),
}

async function rollbackApplicationWithOptions(request: RollbackApplicationRequest, runtime: Util.RuntimeOptions): RollbackApplicationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RollbackApplication', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function rollbackApplication(request: RollbackApplicationRequest): RollbackApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return rollbackApplicationWithOptions(request, runtime);
}

model RunServiceScheduleRequest {
  appId?: string(name='AppId'),
  uuid?: string(name='Uuid'),
  clientIp?: string(name='ClientIp'),
  serviceAction?: string(name='ServiceAction'),
  podConfigName?: string(name='PodConfigName'),
  preLockedTimeout?: int32(name='PreLockedTimeout'),
  directorys?: string(name='Directorys'),
  serviceCommands?: string(name='ServiceCommands'),
  scheduleStrategy?: string(name='ScheduleStrategy'),
}

model RunServiceScheduleResponseBody = {
  commandResults?: {
    commandResult?: [ 
    {
      command?: string(name='Command'),
      containerName?: string(name='ContainerName'),
      resultMsg?: string(name='ResultMsg'),
    }
  ](name='CommandResult')
  }(name='CommandResults'),
  index?: int32(name='Index'),
  instanceId?: string(name='InstanceId'),
  instanceIp?: string(name='InstanceIp'),
  instancePort?: int32(name='InstancePort'),
  requestId?: string(name='RequestId'),
  requestRepeated?: string(name='RequestRepeated'),
  tcpPorts?: boolean(name='TcpPorts'),
}

model RunServiceScheduleResponse = {
  headers: map[string]string(name='headers'),
  body: RunServiceScheduleResponseBody(name='body'),
}

async function runServiceScheduleWithOptions(request: RunServiceScheduleRequest, runtime: Util.RuntimeOptions): RunServiceScheduleResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('RunServiceSchedule', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function runServiceSchedule(request: RunServiceScheduleRequest): RunServiceScheduleResponse {
  var runtime = new Util.RuntimeOptions{};
  return runServiceScheduleWithOptions(request, runtime);
}

model SchedulePodRequest {
  aliUid?: long(name='AliUid'),
  groupUuid?: string(name='GroupUuid'),
  workloadUuid?: string(name='WorkloadUuid'),
  tenant?: string(name='Tenant'),
  regions?: string(name='Regions'),
  areaCodes?: string(name='AreaCodes'),
  isps?: string(name='Isps'),
  requirements?: string(name='Requirements'),
  labels?: string(name='Labels'),
  resourceAttribute?: string(name='ResourceAttribute'),
}

model SchedulePodResponseBody = {
  requestId?: string(name='RequestId', description='Id of the request'),
  code?: long(name='Code'),
  msg?: string(name='Msg'),
  desc?: string(name='Desc'),
  data?: string(name='Data'),
}

model SchedulePodResponse = {
  headers: map[string]string(name='headers'),
  body: SchedulePodResponseBody(name='body'),
}

async function schedulePodWithOptions(request: SchedulePodRequest, runtime: Util.RuntimeOptions): SchedulePodResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('SchedulePod', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function schedulePod(request: SchedulePodRequest): SchedulePodResponse {
  var runtime = new Util.RuntimeOptions{};
  return schedulePodWithOptions(request, runtime);
}

model StartEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId'),
}

model StartEpnInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StartEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartEpnInstanceResponseBody(name='body'),
}

async function startEpnInstanceWithOptions(request: StartEpnInstanceRequest, runtime: Util.RuntimeOptions): StartEpnInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartEpnInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startEpnInstance(request: StartEpnInstanceRequest): StartEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startEpnInstanceWithOptions(request, runtime);
}

model StartInstanceRequest {
  version?: string(name='Version'),
  instanceId?: string(name='InstanceId'),
}

model StartInstanceResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
}

model StartInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StartInstanceResponseBody(name='body'),
}

async function startInstanceWithOptions(request: StartInstanceRequest, runtime: Util.RuntimeOptions): StartInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StartInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function startInstance(request: StartInstanceRequest): StartInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return startInstanceWithOptions(request, runtime);
}

model StopEpnInstanceRequest {
  EPNInstanceId?: string(name='EPNInstanceId'),
}

model StopEpnInstanceResponseBody = {
  requestId?: string(name='RequestId'),
}

model StopEpnInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopEpnInstanceResponseBody(name='body'),
}

async function stopEpnInstanceWithOptions(request: StopEpnInstanceRequest, runtime: Util.RuntimeOptions): StopEpnInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopEpnInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopEpnInstance(request: StopEpnInstanceRequest): StopEpnInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopEpnInstanceWithOptions(request, runtime);
}

model StopInstanceRequest {
  version?: string(name='Version'),
  instanceId?: string(name='InstanceId'),
  forceStop?: string(name='ForceStop'),
}

model StopInstanceResponseBody = {
  code?: int32(name='Code'),
  requestId?: string(name='RequestId'),
}

model StopInstanceResponse = {
  headers: map[string]string(name='headers'),
  body: StopInstanceResponseBody(name='body'),
}

async function stopInstanceWithOptions(request: StopInstanceRequest, runtime: Util.RuntimeOptions): StopInstanceResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('StopInstance', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function stopInstance(request: StopInstanceRequest): StopInstanceResponse {
  var runtime = new Util.RuntimeOptions{};
  return stopInstanceWithOptions(request, runtime);
}

model UnassociateEipAddressRequest {
  version?: string(name='Version'),
  ensRegionId?: string(name='EnsRegionId'),
  eip?: string(name='Eip'),
  instanceIdInternetIp?: string(name='InstanceIdInternetIp'),
}

model UnassociateEipAddressResponseBody = {
  requestId?: string(name='RequestId'),
}

model UnassociateEipAddressResponse = {
  headers: map[string]string(name='headers'),
  body: UnassociateEipAddressResponseBody(name='body'),
}

async function unassociateEipAddressWithOptions(request: UnassociateEipAddressRequest, runtime: Util.RuntimeOptions): UnassociateEipAddressResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UnassociateEipAddress', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function unassociateEipAddress(request: UnassociateEipAddressRequest): UnassociateEipAddressResponse {
  var runtime = new Util.RuntimeOptions{};
  return unassociateEipAddressWithOptions(request, runtime);
}

model UpgradeApplicationRequest {
  appId?: string(name='AppId'),
  template?: string(name='Template'),
  timeout?: int32(name='Timeout'),
}

model UpgradeApplicationResponseBody = {
  requestId?: string(name='RequestId'),
}

model UpgradeApplicationResponse = {
  headers: map[string]string(name='headers'),
  body: UpgradeApplicationResponseBody(name='body'),
}

async function upgradeApplicationWithOptions(request: UpgradeApplicationRequest, runtime: Util.RuntimeOptions): UpgradeApplicationResponse {
  Util.validateModel(request);
  var req = new OpenApi.OpenApiRequest{ 
    body = Util.toMap(request),
  };
  return doRPCRequest('UpgradeApplication', '2017-11-10', 'HTTPS', 'POST', 'AK', 'json', req, runtime);
}

async function upgradeApplication(request: UpgradeApplicationRequest): UpgradeApplicationResponse {
  var runtime = new Util.RuntimeOptions{};
  return upgradeApplicationWithOptions(request, runtime);
}

